//
// Early-binding C# API for SDAI (CE wrappers)
//

#pragma warning disable CS1587
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Collections;
using System.Collections.Generic;
using RDF;

#if _WIN64
        using int_t = System.Int64;
#else
		using int_t = System.Int32;
#endif

namespace IFC2x3
    {
    using SdaiModel = int_t;
    using SdaiInstance = int_t;
    using SdaiAggr = int_t;

    using IntValue = int_t;
    using TextValue = String;

    /// <summary>
    /// 
    /// </summary>
    class EnumValue<TEnum> where TEnum : struct, Enum
        {
        static public TEnum? FromIndex(int index)
            {
            var values = System.Enum.GetValues<TEnum>();
            if (index >= 0 && index < values.Length)
                {
                return values[index];
                }
            else
                {
                return null;
                }
            }
        }

    class EnumIndex
        {
        static public int FromString(TextValue value, TextValue[] allStrings)
            {
            for (int i = 0; i < allStrings.Length; i++)
                {
                if (value == allStrings[i])
                    return i;
                }
            return -1;
            }
        }

    class EnumString<TEnum> where TEnum : struct, Enum, IComparable
        {
        public static TextValue FromValue(TEnum value, TextValue[] allStrings)
            {
            var values = System.Enum.GetValues<TEnum>();

            for (int i = 0; i < values.Length; i++)
                {
                if (values[i].Equals(value))
                    {
                    if (i < allStrings.Length)
                        {
                        return allStrings[i];
                        }
                    else
                        {
                        Debug.Assert(false);
                        return null;
                        }
                    }
                }

            Debug.Assert(false);
            return null;
            }
        }

    /// <summary>
    /// Helper class to handle and access SELECT instance data
    /// </summary>
    public class Select
        {
        protected SdaiInstance m_instance;
        protected TextValue m_attrName;

        private IntValue m_adb;
        private Select m_outerSelect;

        public IntValue ADB()
            {
            if (m_outerSelect != null)
                {
                return m_outerSelect.ADB();
                }

            if (m_adb == 0 && m_instance != 0 && m_attrName != null)
                {
                if (0 == ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiADB, out m_adb))
                    {
                    ifcengine.sdaiDeleteADB(m_adb);
                    m_adb = 0;
                    }
                }

            return m_adb;
            }

        protected Select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0)
            {
            Init(instance, attrName, adb);
            }

        protected Select(Select outer)
            {
            m_instance = 0;
            m_attrName = null;
            m_adb = 0;
            m_outerSelect = outer;
            if (m_outerSelect != null)
                {
                m_instance = m_outerSelect.m_instance;
                }
            }

        public void Init(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0)
            {
            Debug.Assert(instance != 0);
            m_instance = instance;
            m_attrName = attrName;
            m_adb = adb;
            m_outerSelect = null;
            }

        protected void SetADB(IntValue adb)
            {
            if (m_outerSelect != null)
                {
                m_outerSelect.SetADB(adb);
                }
            else
                {
                //???sdaiDeleteADB(m_adb);
                m_adb = adb;

                if (m_instance != 0 && m_attrName != null)
                    {
                    ifcengine.sdaiPutAttrBN(m_instance, m_attrName, ifcengine.sdaiADB, m_adb);
                    }
                }
            }

        private bool CheckADBType(IntValue adb, TextValue typeName)
            {
            if (adb == 0)
                {
                return false;
                }

            if (typeName == null)
                {
                return true; //any suitable
                }

            var pPath = ifcengine.sdaiGetADBTypePath(adb, 0);
            var path = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(pPath);

            return path != null && path == typeName;
            }

        public TextValue TypePath
            { get
                {
                var adb = ADB();
                if (adb == 0)
                    {
                    return null;
                    }
                else
                    {
                    return ifcengine.sdaiGetADBTypePathx(adb, 0);
                    }
                }
            }

        //
        //
        protected IntValue? get_IntValue(TextValue typeName, IntValue sdaiType)
            {
            IntValue? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                IntValue val = 0;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        protected void put_IntValue(TextValue typeName, IntValue sdaiType, IntValue? value)
            {
            if (value.HasValue)
                {
                IntValue v = value.Value;
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected double? get_double(TextValue typeName, IntValue sdaiType)
            {
            double? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                double val = 0;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }
        protected bool? get_bool(TextValue typeName, IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiBOOLEAN);
            bool? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                bool val = false;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        //
        protected void put_double(TextValue typeName, IntValue sdaiType, double? value)
            {
            if (value.HasValue)
                {
                double v = value.Value;
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }
        protected void put_bool(TextValue typeName, IntValue sdaiType, bool? value)
            {
            if (value.HasValue)
                {
                bool v = value.Value;
                Debug.Assert(sdaiType == ifcengine.sdaiBOOLEAN);
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected TextValue getTextValue(TextValue typeName, IntValue sdaiType)
            {
            TextValue ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                string val;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        //
        protected void putTextValue(TextValue typeName, IntValue sdaiType, TextValue value)
            {
            var adb = ifcengine.sdaiCreateADB(sdaiType, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected int getEnumerationIndex(TextValue typeName, TextValue[] rEnumValues)
            {
            int ret = -1;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                string value;
                if (0 != ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiENUM, out value))
                    {
                    ret = EnumIndex.FromString(value, rEnumValues);
                    }
                }
            return ret;
            }

        //
        protected void putEnumerationValue(TextValue typeName, TextValue value)
            {
            var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiENUM, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected SdaiInstance getEntityInstance(TextValue typeName)
            {
            SdaiInstance ret = 0;
            var adb = ADB();
            if (adb != 0)
                {
                SdaiInstance inst = 0;
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiINSTANCE, out inst) != 0)
                    {
                    if (typeName == null || ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                        {
                        ret = inst;
                        }
                    }
                }
            return ret;
            }

        //
        protected void putEntityInstance(TextValue typeName, SdaiInstance inst)
            {
            if (inst == 0 || ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                {
                var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiINSTANCE, inst);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected SdaiAggr getAggrValue(TextValue typeName)
            {
            SdaiAggr ret = 0;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiAGGR, out ret) == 0)
                    {
                    ret = 0;
                    }
                }
            return ret;
            }

        //
        protected void putAggrValue(TextValue typeName, SdaiAggr value)
            {
            var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiAGGR, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected bool IsADBType(TextValue typeName)
            {
            var adb = ADB();
            return CheckADBType(adb, typeName);
            }

        protected bool IsADBEntity(TextValue typeName)
            {
            var adb = ADB();
            if (adb != 0)
                {
                SdaiInstance inst = 0;
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiINSTANCE, out inst) != 0)
                    {
                    if (ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                        {
                        return true;
                        }
                    }
                }
            return false;
            }
        };

    /// <summary>
    /// Aggregations templates
    /// </summary>
    /// 
    interface IAggrSerializerObj
        {
        public abstract IList FromSdaiAggrUntyped(SdaiInstance inst, SdaiAggr aggr);
        public abstract SdaiAggr ToSdaiAggr(IEnumerable lst, SdaiInstance instance, TextValue attrName);

        }

    abstract class AggrSerializer<TElem, TList> : IAggrSerializerObj
        where TList : List<TElem>, new()
        {
        //
        public TList FromAttr(SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = 0;
            ifcengine.sdaiGetAttrBN(instance, attrName, ifcengine.sdaiAGGR, out aggr);
            return FromSdaiAggr(instance, aggr);
            }

        //
        public TList FromSdaiAggr(SdaiInstance inst, SdaiAggr aggr)
            {
            var ret = new TList();
            IntValue cnt = ifcengine.sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++)
                {
                TElem elem;
                if (GetAggrElement(inst, aggr, i, out elem))
                    {
                    ret.Add(elem);
                    }
                }
            return ret;
            }

        public SdaiAggr ToSdaiAggr(IEnumerable<TElem> lst, SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = ifcengine.sdaiCreateAggrBN(instance, attrName);
            foreach (var v in lst)
                {
                AppendAggrElement(instance, aggr, v);
                }
            return aggr;
            }

        public SdaiAggr ToSdaiAggr(IEnumerable lst, SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = ifcengine.sdaiCreateAggrBN(instance, attrName);
            foreach (var v in lst)
                {
                AppendAggrElement(instance, aggr, (TElem)v);
                }
            return aggr;
            }

        protected abstract bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TElem elem);
        protected abstract void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TElem elem);

        IList IAggrSerializerObj.FromSdaiAggrUntyped(SdaiInstance inst, SdaiAggr aggr)
            {
            return FromSdaiAggr(inst, aggr);
            }
        }

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_IntValue<TElem, TList> : AggrSerializer<IntValue, TList>
        where TList : List<IntValue>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out IntValue elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiINTEGER, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiINTEGER, ref elem);
            }
        };

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_double<TElem, TList> : AggrSerializer<double, TList>
        where TList : List<double>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out double elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiREAL, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, double elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiREAL, ref elem);
            }
        };

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_bool<TElem, TList> : AggrSerializer<bool, TList>
        where TList : List<bool>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out bool elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiBOOLEAN, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, bool elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiBOOLEAN, ref elem);
            }
        };

    class AggrSerializerText<TElem, TList> : AggrSerializer<TextValue, TList>
        where TList : List<TextValue>, new()
        {
        private IntValue m_sdaiType;

        public AggrSerializerText(IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiSTRING || sdaiType == ifcengine.sdaiBINARY);
            m_sdaiType = sdaiType;
            }
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TextValue elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, m_sdaiType, out elem);
            return (elem != null);
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TextValue elem)
            {
            ifcengine.sdaiAppend(aggr, m_sdaiType, elem);
            }
        };

    class AggrSerializerInstance<TElem, TList> : AggrSerializer<TElem, TList>
        where TElem : Entity, new()
        where TList : List<TElem>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TElem elem)
            {
            SdaiInstance val = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiINSTANCE, out val);
            elem = new TElem();
            elem.Set(val);
            return (elem != 0);
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TElem elem)
            {
            SdaiInstance v = elem;
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiINSTANCE, v);
            }
        };

    class AggrSerializerEnum<TEnum, TList> : AggrSerializer<TEnum, TList>
        where TEnum : struct, Enum
        where TList : List<TEnum>, new()
        {
        private IntValue m_sdaiType;
        private TextValue[] m_EnumValues;

        public AggrSerializerEnum(TextValue[] enumValues, IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiENUM || sdaiType == ifcengine.sdaiLOGICAL);
            m_EnumValues = enumValues;
            m_sdaiType = sdaiType;
            }

        //
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TEnum elem)
            {
            string value;
            ifcengine.sdaiGetAggrByIndex(aggr, i, m_sdaiType, out value);
            var ind = EnumIndex.FromString(value, m_EnumValues);
            var val = EnumValue<TEnum>.FromIndex(ind);
            if (val.HasValue)
                {
                elem = val.Value;
                return true;
                }
            else
                {
                elem = EnumValue<TEnum>.FromIndex(0).Value;
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TEnum elem)
            {
            var value = EnumString<TEnum>.FromValue(elem, m_EnumValues);
            ifcengine.sdaiAppend(aggr, m_sdaiType, value);
            }
        }
    /// <summary>
    /// 
    /// </summary>
    class AggrSerializerAggr<TNestedAggr, TNestedSerializer, TList> : AggrSerializer<TNestedAggr, TList>
                    where TNestedAggr : IEnumerable
                    where TNestedSerializer : IAggrSerializerObj, new()
                    where TList : List<TNestedAggr>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TNestedAggr elem)
            {
            SdaiAggr nested = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiAGGR, out nested);
            if (nested != 0)
                {
                var nestedSerializer = new TNestedSerializer();
                elem = (TNestedAggr)nestedSerializer.FromSdaiAggrUntyped(inst, nested);
                return true;
                }
            else
                {
                elem = default(TNestedAggr);
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TNestedAggr elem)
            {
            var nestedSerializer = new TNestedSerializer();
            SdaiAggr nested = nestedSerializer.ToSdaiAggr(elem, inst, null);
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiAGGR, nested);
            }
        };

    class AggrSerializerSelect<TSelect, TList> : AggrSerializer<TSelect, TList>
        where TSelect : Select, new()
        where TList : List<TSelect>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TSelect elem)
            {
            IntValue adb = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiADB, out adb);
            if (adb != 0)
                {
                elem = new TSelect();
                elem.Init(inst, null, adb);
                return true;
                }
            else
                {
                elem = null;
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TSelect elem)
            {
            var adb = elem.ADB();
            if (adb != 0)
                {
                ifcengine.sdaiAppend((IntValue)aggr, ifcengine.sdaiADB, adb);
                }
            }
        };

    /// <summary>
    /// Provides utility methods to interact with a generic SDAI instnace
    /// You also can use object of this class instead of SdaiInstance handle in any place where the handle is required
    /// </summary>
    public abstract class Entity : IEquatable<Entity>, IComparable, IComparable<Entity>
        {
        public static Entity Create(SdaiModel model) { System.Diagnostics.Debug.Assert(false); return null; }

        //
        public Int64 StepID { get { return m_instance != 0 ? ifcengine.internalGetP21Line(m_instance) : 0; } }

        public bool IsNull { get { return m_instance == 0; } }

        public string EntityName { get
                {
                if (m_instance != 0)
                    {
                    var type = ifcengine.sdaiGetInstanceType(m_instance);
                    if (type != 0)
                        return ifcengine.engiGetEntityName(type);
                    }
                return null;
                } }

        //
        protected SdaiInstance m_instance = 0;

        public Entity(SdaiInstance instance)
            {
            Set(instance);
            }

        public void Set(SdaiInstance instance)
            {
            m_instance = instance;

            if (m_instance != 0)
                {
                if (ifcengine.sdaiIsKindOfBN(m_instance, WrapperEntityName()) == 0)
                    {
                    m_instance = 0;
                    }
                }
            }

        protected abstract TextValue WrapperEntityName();

        /// <summary>
        /// Conversion to instance handle, so the object of the class can be used anywhere where a handle required
        /// </summary>
        public static implicit operator SdaiInstance(Entity instance) => instance.m_instance;

        protected TextValue get_string(TextValue attrName, IntValue sdaiType)
            {
            string value;
            if (0 != ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out value))
                {
                return value;
                }
            else
                {
                return null;
                }
            }
        public double? get_double(TextValue attrName, IntValue sdaiType)
            {
            double val = 0;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }
        public IntValue? get_IntValue(TextValue attrName, IntValue sdaiType)
            {
            IntValue val = 0;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }
        public bool? get_bool(TextValue attrName, IntValue sdaiType)
            {
            bool val = false;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }

        /// <summary>
        /// 
        /// </summary>
        public static bool operator ==(Entity i1, Entity i2) => (Equals(i1, i2));
        public static bool operator !=(Entity i1, Entity i2) => (!(i1 == i2));
        public override bool Equals(Object obj)
            {
            return Equals(obj as Entity);
            }
        public bool Equals(Entity other)
            {
            return (other == null) ? false : (other.m_instance == m_instance);
            }
        public int CompareTo(object obj)
            {
            return CompareTo(obj as Entity);
            }
        public int CompareTo(Entity other)
            {
            return (other == null) ? 1 : m_instance.CompareTo(other.m_instance);
            }
        public override int GetHashCode()
            {
            return m_instance.GetHashCode();
            }
        }


    //
    // Enumerations
    //
    public enum LOGICAL_VALUE { False = 0, True = 1, Unknown = 2 };

    public enum IfcActionSourceTypeEnum
        {
        DEAD_LOAD_G = 0,
        COMPLETION_G1 = 1,
        LIVE_LOAD_Q = 2,
        SNOW_S = 3,
        WIND_W = 4,
        PRESTRESSING_P = 5,
        SETTLEMENT_U = 6,
        TEMPERATURE_T = 7,
        EARTHQUAKE_E = 8,
        FIRE = 9,
        IMPULSE = 10,
        IMPACT = 11,
        TRANSPORT = 12,
        ERECTION = 13,
        PROPPING = 14,
        SYSTEM_IMPERFECTION = 15,
        SHRINKAGE = 16,
        CREEP = 17,
        LACK_OF_FIT = 18,
        BUOYANCY = 19,
        ICE = 20,
        CURRENT = 21,
        WAVE = 22,
        RAIN = 23,
        BRAKES = 24,
        USERDEFINED = 25,
        NOTDEFINED = 26,
        };

    public enum IfcActionTypeEnum
        {
        PERMANENT_G = 0,
        VARIABLE_Q = 1,
        EXTRAORDINARY_A = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcActuatorTypeEnum
        {
        ELECTRICACTUATOR = 0,
        HANDOPERATEDACTUATOR = 1,
        HYDRAULICACTUATOR = 2,
        PNEUMATICACTUATOR = 3,
        THERMOSTATICACTUATOR = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcAddressTypeEnum
        {
        OFFICE = 0,
        SITE = 1,
        HOME = 2,
        DISTRIBUTIONPOINT = 3,
        USERDEFINED = 4,
        };

    public enum IfcAheadOrBehind
        {
        AHEAD = 0,
        BEHIND = 1,
        };

    public enum IfcAirTerminalBoxTypeEnum
        {
        CONSTANTFLOW = 0,
        VARIABLEFLOWPRESSUREDEPENDANT = 1,
        VARIABLEFLOWPRESSUREINDEPENDANT = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcAirTerminalTypeEnum
        {
        GRILLE = 0,
        REGISTER = 1,
        DIFFUSER = 2,
        EYEBALL = 3,
        IRIS = 4,
        LINEARGRILLE = 5,
        LINEARDIFFUSER = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcAirToAirHeatRecoveryTypeEnum
        {
        FIXEDPLATECOUNTERFLOWEXCHANGER = 0,
        FIXEDPLATECROSSFLOWEXCHANGER = 1,
        FIXEDPLATEPARALLELFLOWEXCHANGER = 2,
        ROTARYWHEEL = 3,
        RUNAROUNDCOILLOOP = 4,
        HEATPIPE = 5,
        TWINTOWERENTHALPYRECOVERYLOOPS = 6,
        THERMOSIPHONSEALEDTUBEHEATEXCHANGERS = 7,
        THERMOSIPHONCOILTYPEHEATEXCHANGERS = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcAlarmTypeEnum
        {
        BELL = 0,
        BREAKGLASSBUTTON = 1,
        LIGHT = 2,
        MANUALPULLBOX = 3,
        SIREN = 4,
        WHISTLE = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcAnalysisModelTypeEnum
        {
        IN_PLANE_LOADING_2D = 0,
        OUT_PLANE_LOADING_2D = 1,
        LOADING_3D = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcAnalysisTheoryTypeEnum
        {
        FIRST_ORDER_THEORY = 0,
        SECOND_ORDER_THEORY = 1,
        THIRD_ORDER_THEORY = 2,
        FULL_NONLINEAR_THEORY = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcArithmeticOperatorEnum
        {
        ADD = 0,
        DIVIDE = 1,
        MULTIPLY = 2,
        SUBTRACT = 3,
        };

    public enum IfcAssemblyPlaceEnum
        {
        SITE = 0,
        FACTORY = 1,
        NOTDEFINED = 2,
        };

    public enum IfcBeamTypeEnum
        {
        BEAM = 0,
        JOIST = 1,
        LINTEL = 2,
        T_BEAM = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcBenchmarkEnum
        {
        GREATERTHAN = 0,
        GREATERTHANOREQUALTO = 1,
        LESSTHAN = 2,
        LESSTHANOREQUALTO = 3,
        EQUALTO = 4,
        NOTEQUALTO = 5,
        };

    public enum IfcBoilerTypeEnum
        {
        WATER = 0,
        STEAM = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcBooleanOperator
        {
        UNION = 0,
        INTERSECTION = 1,
        DIFFERENCE = 2,
        };

    public enum IfcBSplineCurveForm
        {
        POLYLINE_FORM = 0,
        CIRCULAR_ARC = 1,
        ELLIPTIC_ARC = 2,
        PARABOLIC_ARC = 3,
        HYPERBOLIC_ARC = 4,
        UNSPECIFIED = 5,
        };

    public enum IfcBuildingElementProxyTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcCableCarrierFittingTypeEnum
        {
        BEND = 0,
        CROSS = 1,
        REDUCER = 2,
        TEE = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcCableCarrierSegmentTypeEnum
        {
        CABLELADDERSEGMENT = 0,
        CABLETRAYSEGMENT = 1,
        CABLETRUNKINGSEGMENT = 2,
        CONDUITSEGMENT = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcCableSegmentTypeEnum
        {
        CABLESEGMENT = 0,
        CONDUCTORSEGMENT = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcChangeActionEnum
        {
        NOCHANGE = 0,
        MODIFIED = 1,
        ADDED = 2,
        DELETED = 3,
        MODIFIEDADDED = 4,
        MODIFIEDDELETED = 5,
        };

    public enum IfcChillerTypeEnum
        {
        AIRCOOLED = 0,
        WATERCOOLED = 1,
        HEATRECOVERY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcCoilTypeEnum
        {
        DXCOOLINGCOIL = 0,
        WATERCOOLINGCOIL = 1,
        STEAMHEATINGCOIL = 2,
        WATERHEATINGCOIL = 3,
        ELECTRICHEATINGCOIL = 4,
        GASHEATINGCOIL = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcColumnTypeEnum
        {
        COLUMN = 0,
        USERDEFINED = 1,
        NOTDEFINED = 2,
        };

    public enum IfcCompressorTypeEnum
        {
        DYNAMIC = 0,
        RECIPROCATING = 1,
        ROTARY = 2,
        SCROLL = 3,
        TROCHOIDAL = 4,
        SINGLESTAGE = 5,
        BOOSTER = 6,
        OPENTYPE = 7,
        HERMETIC = 8,
        SEMIHERMETIC = 9,
        WELDEDSHELLHERMETIC = 10,
        ROLLINGPISTON = 11,
        ROTARYVANE = 12,
        SINGLESCREW = 13,
        TWINSCREW = 14,
        USERDEFINED = 15,
        NOTDEFINED = 16,
        };

    public enum IfcCondenserTypeEnum
        {
        WATERCOOLEDSHELLTUBE = 0,
        WATERCOOLEDSHELLCOIL = 1,
        WATERCOOLEDTUBEINTUBE = 2,
        WATERCOOLEDBRAZEDPLATE = 3,
        AIRCOOLED = 4,
        EVAPORATIVECOOLED = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcConnectionTypeEnum
        {
        ATPATH = 0,
        ATSTART = 1,
        ATEND = 2,
        NOTDEFINED = 3,
        };

    public enum IfcConstraintEnum
        {
        HARD = 0,
        SOFT = 1,
        ADVISORY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcControllerTypeEnum
        {
        FLOATING = 0,
        PROPORTIONAL = 1,
        PROPORTIONALINTEGRAL = 2,
        PROPORTIONALINTEGRALDERIVATIVE = 3,
        TIMEDTWOPOSITION = 4,
        TWOPOSITION = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcCooledBeamTypeEnum
        {
        ACTIVE = 0,
        PASSIVE = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcCoolingTowerTypeEnum
        {
        NATURALDRAFT = 0,
        MECHANICALINDUCEDDRAFT = 1,
        MECHANICALFORCEDDRAFT = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcCostScheduleTypeEnum
        {
        BUDGET = 0,
        COSTPLAN = 1,
        ESTIMATE = 2,
        TENDER = 3,
        PRICEDBILLOFQUANTITIES = 4,
        UNPRICEDBILLOFQUANTITIES = 5,
        SCHEDULEOFRATES = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcCoveringTypeEnum
        {
        CEILING = 0,
        FLOORING = 1,
        CLADDING = 2,
        ROOFING = 3,
        INSULATION = 4,
        MEMBRANE = 5,
        SLEEVING = 6,
        WRAPPING = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcCurrencyEnum
        {
        AED = 0,
        AES = 1,
        ATS = 2,
        AUD = 3,
        BBD = 4,
        BEG = 5,
        BGL = 6,
        BHD = 7,
        BMD = 8,
        BND = 9,
        BRL = 10,
        BSD = 11,
        BWP = 12,
        BZD = 13,
        CAD = 14,
        CBD = 15,
        CHF = 16,
        CLP = 17,
        CNY = 18,
        CYS = 19,
        CZK = 20,
        DDP = 21,
        DEM = 22,
        DKK = 23,
        EGL = 24,
        EST = 25,
        EUR = 26,
        FAK = 27,
        FIM = 28,
        FJD = 29,
        FKP = 30,
        FRF = 31,
        GBP = 32,
        GIP = 33,
        GMD = 34,
        GRX = 35,
        HKD = 36,
        HUF = 37,
        ICK = 38,
        IDR = 39,
        ILS = 40,
        INR = 41,
        IRP = 42,
        ITL = 43,
        JMD = 44,
        JOD = 45,
        JPY = 46,
        KES = 47,
        KRW = 48,
        KWD = 49,
        KYD = 50,
        LKR = 51,
        LUF = 52,
        MTL = 53,
        MUR = 54,
        MXN = 55,
        MYR = 56,
        NLG = 57,
        NZD = 58,
        OMR = 59,
        PGK = 60,
        PHP = 61,
        PKR = 62,
        PLN = 63,
        PTN = 64,
        QAR = 65,
        RUR = 66,
        SAR = 67,
        SCR = 68,
        SEK = 69,
        SGD = 70,
        SKP = 71,
        THB = 72,
        TRL = 73,
        TTD = 74,
        TWD = 75,
        USD = 76,
        VEB = 77,
        VND = 78,
        XEU = 79,
        ZAR = 80,
        ZWD = 81,
        NOK = 82,
        };

    public enum IfcCurtainWallTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcDamperTypeEnum
        {
        CONTROLDAMPER = 0,
        FIREDAMPER = 1,
        SMOKEDAMPER = 2,
        FIRESMOKEDAMPER = 3,
        BACKDRAFTDAMPER = 4,
        RELIEFDAMPER = 5,
        BLASTDAMPER = 6,
        GRAVITYDAMPER = 7,
        GRAVITYRELIEFDAMPER = 8,
        BALANCINGDAMPER = 9,
        FUMEHOODEXHAUST = 10,
        USERDEFINED = 11,
        NOTDEFINED = 12,
        };

    public enum IfcDataOriginEnum
        {
        MEASURED = 0,
        PREDICTED = 1,
        SIMULATED = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcDerivedUnitEnum
        {
        ANGULARVELOCITYUNIT = 0,
        COMPOUNDPLANEANGLEUNIT = 1,
        DYNAMICVISCOSITYUNIT = 2,
        HEATFLUXDENSITYUNIT = 3,
        INTEGERCOUNTRATEUNIT = 4,
        ISOTHERMALMOISTURECAPACITYUNIT = 5,
        KINEMATICVISCOSITYUNIT = 6,
        LINEARVELOCITYUNIT = 7,
        MASSDENSITYUNIT = 8,
        MASSFLOWRATEUNIT = 9,
        MOISTUREDIFFUSIVITYUNIT = 10,
        MOLECULARWEIGHTUNIT = 11,
        SPECIFICHEATCAPACITYUNIT = 12,
        THERMALADMITTANCEUNIT = 13,
        THERMALCONDUCTANCEUNIT = 14,
        THERMALRESISTANCEUNIT = 15,
        THERMALTRANSMITTANCEUNIT = 16,
        VAPORPERMEABILITYUNIT = 17,
        VOLUMETRICFLOWRATEUNIT = 18,
        ROTATIONALFREQUENCYUNIT = 19,
        TORQUEUNIT = 20,
        MOMENTOFINERTIAUNIT = 21,
        LINEARMOMENTUNIT = 22,
        LINEARFORCEUNIT = 23,
        PLANARFORCEUNIT = 24,
        MODULUSOFELASTICITYUNIT = 25,
        SHEARMODULUSUNIT = 26,
        LINEARSTIFFNESSUNIT = 27,
        ROTATIONALSTIFFNESSUNIT = 28,
        MODULUSOFSUBGRADEREACTIONUNIT = 29,
        ACCELERATIONUNIT = 30,
        CURVATUREUNIT = 31,
        HEATINGVALUEUNIT = 32,
        IONCONCENTRATIONUNIT = 33,
        LUMINOUSINTENSITYDISTRIBUTIONUNIT = 34,
        MASSPERLENGTHUNIT = 35,
        MODULUSOFLINEARSUBGRADEREACTIONUNIT = 36,
        MODULUSOFROTATIONALSUBGRADEREACTIONUNIT = 37,
        PHUNIT = 38,
        ROTATIONALMASSUNIT = 39,
        SECTIONAREAINTEGRALUNIT = 40,
        SECTIONMODULUSUNIT = 41,
        SOUNDPOWERUNIT = 42,
        SOUNDPRESSUREUNIT = 43,
        TEMPERATUREGRADIENTUNIT = 44,
        THERMALEXPANSIONCOEFFICIENTUNIT = 45,
        WARPINGCONSTANTUNIT = 46,
        WARPINGMOMENTUNIT = 47,
        USERDEFINED = 48,
        };

    public enum IfcDimensionExtentUsage
        {
        ORIGIN = 0,
        TARGET = 1,
        };

    public enum IfcDirectionSenseEnum
        {
        POSITIVE = 0,
        NEGATIVE = 1,
        };

    public enum IfcDistributionChamberElementTypeEnum
        {
        FORMEDDUCT = 0,
        INSPECTIONCHAMBER = 1,
        INSPECTIONPIT = 2,
        MANHOLE = 3,
        METERCHAMBER = 4,
        SUMP = 5,
        TRENCH = 6,
        VALVECHAMBER = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcDocumentConfidentialityEnum
        {
        PUBLIC = 0,
        RESTRICTED = 1,
        CONFIDENTIAL = 2,
        PERSONAL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcDocumentStatusEnum
        {
        DRAFT = 0,
        FINALDRAFT = 1,
        FINAL = 2,
        REVISION = 3,
        NOTDEFINED = 4,
        };

    public enum IfcDoorPanelOperationEnum
        {
        SWINGING = 0,
        DOUBLE_ACTING = 1,
        SLIDING = 2,
        FOLDING = 3,
        REVOLVING = 4,
        ROLLINGUP = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcDoorPanelPositionEnum
        {
        LEFT = 0,
        MIDDLE = 1,
        RIGHT = 2,
        NOTDEFINED = 3,
        };

    public enum IfcDoorStyleConstructionEnum
        {
        ALUMINIUM = 0,
        HIGH_GRADE_STEEL = 1,
        STEEL = 2,
        WOOD = 3,
        ALUMINIUM_WOOD = 4,
        ALUMINIUM_PLASTIC = 5,
        PLASTIC = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcDoorStyleOperationEnum
        {
        SINGLE_SWING_LEFT = 0,
        SINGLE_SWING_RIGHT = 1,
        DOUBLE_DOOR_SINGLE_SWING = 2,
        DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT = 3,
        DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT = 4,
        DOUBLE_SWING_LEFT = 5,
        DOUBLE_SWING_RIGHT = 6,
        DOUBLE_DOOR_DOUBLE_SWING = 7,
        SLIDING_TO_LEFT = 8,
        SLIDING_TO_RIGHT = 9,
        DOUBLE_DOOR_SLIDING = 10,
        FOLDING_TO_LEFT = 11,
        FOLDING_TO_RIGHT = 12,
        DOUBLE_DOOR_FOLDING = 13,
        REVOLVING = 14,
        ROLLINGUP = 15,
        USERDEFINED = 16,
        NOTDEFINED = 17,
        };

    public enum IfcDuctFittingTypeEnum
        {
        BEND = 0,
        CONNECTOR = 1,
        ENTRY = 2,
        EXIT = 3,
        JUNCTION = 4,
        OBSTRUCTION = 5,
        TRANSITION = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcDuctSegmentTypeEnum
        {
        RIGIDSEGMENT = 0,
        FLEXIBLESEGMENT = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcDuctSilencerTypeEnum
        {
        FLATOVAL = 0,
        RECTANGULAR = 1,
        ROUND = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcElectricApplianceTypeEnum
        {
        COMPUTER = 0,
        DIRECTWATERHEATER = 1,
        DISHWASHER = 2,
        ELECTRICCOOKER = 3,
        ELECTRICHEATER = 4,
        FACSIMILE = 5,
        FREESTANDINGFAN = 6,
        FREEZER = 7,
        FRIDGE_FREEZER = 8,
        HANDDRYER = 9,
        INDIRECTWATERHEATER = 10,
        MICROWAVE = 11,
        PHOTOCOPIER = 12,
        PRINTER = 13,
        REFRIGERATOR = 14,
        RADIANTHEATER = 15,
        SCANNER = 16,
        TELEPHONE = 17,
        TUMBLEDRYER = 18,
        TV = 19,
        VENDINGMACHINE = 20,
        WASHINGMACHINE = 21,
        WATERHEATER = 22,
        WATERCOOLER = 23,
        USERDEFINED = 24,
        NOTDEFINED = 25,
        };

    public enum IfcElectricCurrentEnum
        {
        ALTERNATING = 0,
        DIRECT = 1,
        NOTDEFINED = 2,
        };

    public enum IfcElectricDistributionPointFunctionEnum
        {
        ALARMPANEL = 0,
        CONSUMERUNIT = 1,
        CONTROLPANEL = 2,
        DISTRIBUTIONBOARD = 3,
        GASDETECTORPANEL = 4,
        INDICATORPANEL = 5,
        MIMICPANEL = 6,
        MOTORCONTROLCENTRE = 7,
        SWITCHBOARD = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcElectricFlowStorageDeviceTypeEnum
        {
        BATTERY = 0,
        CAPACITORBANK = 1,
        HARMONICFILTER = 2,
        INDUCTORBANK = 3,
        UPS = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcElectricGeneratorTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcElectricHeaterTypeEnum
        {
        ELECTRICPOINTHEATER = 0,
        ELECTRICCABLEHEATER = 1,
        ELECTRICMATHEATER = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcElectricMotorTypeEnum
        {
        DC = 0,
        INDUCTION = 1,
        POLYPHASE = 2,
        RELUCTANCESYNCHRONOUS = 3,
        SYNCHRONOUS = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcElectricTimeControlTypeEnum
        {
        TIMECLOCK = 0,
        TIMEDELAY = 1,
        RELAY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcElementAssemblyTypeEnum
        {
        ACCESSORY_ASSEMBLY = 0,
        ARCH = 1,
        BEAM_GRID = 2,
        BRACED_FRAME = 3,
        GIRDER = 4,
        REINFORCEMENT_UNIT = 5,
        RIGID_FRAME = 6,
        SLAB_FIELD = 7,
        TRUSS = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcElementCompositionEnum
        {
        COMPLEX = 0,
        ELEMENT = 1,
        PARTIAL = 2,
        };

    public enum IfcEnergySequenceEnum
        {
        PRIMARY = 0,
        SECONDARY = 1,
        TERTIARY = 2,
        AUXILIARY = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcEnvironmentalImpactCategoryEnum
        {
        COMBINEDVALUE = 0,
        DISPOSAL = 1,
        EXTRACTION = 2,
        INSTALLATION = 3,
        MANUFACTURE = 4,
        TRANSPORTATION = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcEvaporativeCoolerTypeEnum
        {
        DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER = 0,
        DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER = 1,
        DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER = 2,
        DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER = 3,
        DIRECTEVAPORATIVEAIRWASHER = 4,
        INDIRECTEVAPORATIVEPACKAGEAIRCOOLER = 5,
        INDIRECTEVAPORATIVEWETCOIL = 6,
        INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER = 7,
        INDIRECTDIRECTCOMBINATION = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcEvaporatorTypeEnum
        {
        DIRECTEXPANSIONSHELLANDTUBE = 0,
        DIRECTEXPANSIONTUBEINTUBE = 1,
        DIRECTEXPANSIONBRAZEDPLATE = 2,
        FLOODEDSHELLANDTUBE = 3,
        SHELLANDCOIL = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcFanTypeEnum
        {
        CENTRIFUGALFORWARDCURVED = 0,
        CENTRIFUGALRADIAL = 1,
        CENTRIFUGALBACKWARDINCLINEDCURVED = 2,
        CENTRIFUGALAIRFOIL = 3,
        TUBEAXIAL = 4,
        VANEAXIAL = 5,
        PROPELLORAXIAL = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcFilterTypeEnum
        {
        AIRPARTICLEFILTER = 0,
        ODORFILTER = 1,
        OILFILTER = 2,
        STRAINER = 3,
        WATERFILTER = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcFireSuppressionTerminalTypeEnum
        {
        BREECHINGINLET = 0,
        FIREHYDRANT = 1,
        HOSEREEL = 2,
        SPRINKLER = 3,
        SPRINKLERDEFLECTOR = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcFlowDirectionEnum
        {
        SOURCE = 0,
        SINK = 1,
        SOURCEANDSINK = 2,
        NOTDEFINED = 3,
        };

    public enum IfcFlowInstrumentTypeEnum
        {
        PRESSUREGAUGE = 0,
        THERMOMETER = 1,
        AMMETER = 2,
        FREQUENCYMETER = 3,
        POWERFACTORMETER = 4,
        PHASEANGLEMETER = 5,
        VOLTMETER_PEAK = 6,
        VOLTMETER_RMS = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcFlowMeterTypeEnum
        {
        ELECTRICMETER = 0,
        ENERGYMETER = 1,
        FLOWMETER = 2,
        GASMETER = 3,
        OILMETER = 4,
        WATERMETER = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcFootingTypeEnum
        {
        FOOTING_BEAM = 0,
        PAD_FOOTING = 1,
        PILE_CAP = 2,
        STRIP_FOOTING = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcGasTerminalTypeEnum
        {
        GASAPPLIANCE = 0,
        GASBOOSTER = 1,
        GASBURNER = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcGeometricProjectionEnum
        {
        GRAPH_VIEW = 0,
        SKETCH_VIEW = 1,
        MODEL_VIEW = 2,
        PLAN_VIEW = 3,
        REFLECTED_PLAN_VIEW = 4,
        SECTION_VIEW = 5,
        ELEVATION_VIEW = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcGlobalOrLocalEnum
        {
        GLOBAL_COORDS = 0,
        LOCAL_COORDS = 1,
        };

    public enum IfcHeatExchangerTypeEnum
        {
        PLATE = 0,
        SHELLANDTUBE = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcHumidifierTypeEnum
        {
        STEAMINJECTION = 0,
        ADIABATICAIRWASHER = 1,
        ADIABATICPAN = 2,
        ADIABATICWETTEDELEMENT = 3,
        ADIABATICATOMIZING = 4,
        ADIABATICULTRASONIC = 5,
        ADIABATICRIGIDMEDIA = 6,
        ADIABATICCOMPRESSEDAIRNOZZLE = 7,
        ASSISTEDELECTRIC = 8,
        ASSISTEDNATURALGAS = 9,
        ASSISTEDPROPANE = 10,
        ASSISTEDBUTANE = 11,
        ASSISTEDSTEAM = 12,
        USERDEFINED = 13,
        NOTDEFINED = 14,
        };

    public enum IfcInternalOrExternalEnum
        {
        INTERNAL = 0,
        EXTERNAL = 1,
        NOTDEFINED = 2,
        };

    public enum IfcInventoryTypeEnum
        {
        ASSETINVENTORY = 0,
        SPACEINVENTORY = 1,
        FURNITUREINVENTORY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcJunctionBoxTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcLampTypeEnum
        {
        COMPACTFLUORESCENT = 0,
        FLUORESCENT = 1,
        HIGHPRESSUREMERCURY = 2,
        HIGHPRESSURESODIUM = 3,
        METALHALIDE = 4,
        TUNGSTENFILAMENT = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcLayerSetDirectionEnum
        {
        AXIS1 = 0,
        AXIS2 = 1,
        AXIS3 = 2,
        };

    public enum IfcLightDistributionCurveEnum
        {
        TYPE_A = 0,
        TYPE_B = 1,
        TYPE_C = 2,
        NOTDEFINED = 3,
        };

    public enum IfcLightEmissionSourceEnum
        {
        COMPACTFLUORESCENT = 0,
        FLUORESCENT = 1,
        HIGHPRESSUREMERCURY = 2,
        HIGHPRESSURESODIUM = 3,
        LIGHTEMITTINGDIODE = 4,
        LOWPRESSURESODIUM = 5,
        LOWVOLTAGEHALOGEN = 6,
        MAINVOLTAGEHALOGEN = 7,
        METALHALIDE = 8,
        TUNGSTENFILAMENT = 9,
        NOTDEFINED = 10,
        };

    public enum IfcLightFixtureTypeEnum
        {
        POINTSOURCE = 0,
        DIRECTIONSOURCE = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcLoadGroupTypeEnum
        {
        LOAD_GROUP = 0,
        LOAD_CASE = 1,
        LOAD_COMBINATION_GROUP = 2,
        LOAD_COMBINATION = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcLogicalOperatorEnum
        {
        LOGICALAND = 0,
        LOGICALOR = 1,
        };

    public enum IfcMemberTypeEnum
        {
        BRACE = 0,
        CHORD = 1,
        COLLAR = 2,
        MEMBER = 3,
        MULLION = 4,
        PLATE = 5,
        POST = 6,
        PURLIN = 7,
        RAFTER = 8,
        STRINGER = 9,
        STRUT = 10,
        STUD = 11,
        USERDEFINED = 12,
        NOTDEFINED = 13,
        };

    public enum IfcMotorConnectionTypeEnum
        {
        BELTDRIVE = 0,
        COUPLING = 1,
        DIRECTDRIVE = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcNullStyle
        {
        NULL_ = 0,
        };

    public enum IfcObjectiveEnum
        {
        CODECOMPLIANCE = 0,
        DESIGNINTENT = 1,
        HEALTHANDSAFETY = 2,
        REQUIREMENT = 3,
        SPECIFICATION = 4,
        TRIGGERCONDITION = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcObjectTypeEnum
        {
        PRODUCT = 0,
        PROCESS = 1,
        CONTROL = 2,
        RESOURCE = 3,
        ACTOR = 4,
        GROUP = 5,
        PROJECT = 6,
        NOTDEFINED = 7,
        };

    public enum IfcOccupantTypeEnum
        {
        ASSIGNEE = 0,
        ASSIGNOR = 1,
        LESSEE = 2,
        LESSOR = 3,
        LETTINGAGENT = 4,
        OWNER = 5,
        TENANT = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcOutletTypeEnum
        {
        AUDIOVISUALOUTLET = 0,
        COMMUNICATIONSOUTLET = 1,
        POWEROUTLET = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcPermeableCoveringOperationEnum
        {
        GRILL = 0,
        LOUVER = 1,
        SCREEN = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcPhysicalOrVirtualEnum
        {
        PHYSICAL = 0,
        VIRTUAL = 1,
        NOTDEFINED = 2,
        };

    public enum IfcPileConstructionEnum
        {
        CAST_IN_PLACE = 0,
        COMPOSITE = 1,
        PRECAST_CONCRETE = 2,
        PREFAB_STEEL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcPileTypeEnum
        {
        COHESION = 0,
        FRICTION = 1,
        SUPPORT = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcPipeFittingTypeEnum
        {
        BEND = 0,
        CONNECTOR = 1,
        ENTRY = 2,
        EXIT = 3,
        JUNCTION = 4,
        OBSTRUCTION = 5,
        TRANSITION = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcPipeSegmentTypeEnum
        {
        FLEXIBLESEGMENT = 0,
        RIGIDSEGMENT = 1,
        GUTTER = 2,
        SPOOL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcPlateTypeEnum
        {
        CURTAIN_PANEL = 0,
        SHEET = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcProcedureTypeEnum
        {
        ADVICE_CAUTION = 0,
        ADVICE_NOTE = 1,
        ADVICE_WARNING = 2,
        CALIBRATION = 3,
        DIAGNOSTIC = 4,
        SHUTDOWN = 5,
        STARTUP = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcProfileTypeEnum
        {
        CURVE = 0,
        AREA = 1,
        };

    public enum IfcProjectedOrTrueLengthEnum
        {
        PROJECTED_LENGTH = 0,
        TRUE_LENGTH = 1,
        };

    public enum IfcProjectOrderRecordTypeEnum
        {
        CHANGE = 0,
        MAINTENANCE = 1,
        MOVE = 2,
        PURCHASE = 3,
        WORK = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcProjectOrderTypeEnum
        {
        CHANGEORDER = 0,
        MAINTENANCEWORKORDER = 1,
        MOVEORDER = 2,
        PURCHASEORDER = 3,
        WORKORDER = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcPropertySourceEnum
        {
        DESIGN = 0,
        DESIGNMAXIMUM = 1,
        DESIGNMINIMUM = 2,
        SIMULATED = 3,
        ASBUILT = 4,
        COMMISSIONING = 5,
        MEASURED = 6,
        USERDEFINED = 7,
        NOTKNOWN = 8,
        };

    public enum IfcProtectiveDeviceTypeEnum
        {
        FUSEDISCONNECTOR = 0,
        CIRCUITBREAKER = 1,
        EARTHFAILUREDEVICE = 2,
        RESIDUALCURRENTCIRCUITBREAKER = 3,
        RESIDUALCURRENTSWITCH = 4,
        VARISTOR = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcPumpTypeEnum
        {
        CIRCULATOR = 0,
        ENDSUCTION = 1,
        SPLITCASE = 2,
        VERTICALINLINE = 3,
        VERTICALTURBINE = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcRailingTypeEnum
        {
        HANDRAIL = 0,
        GUARDRAIL = 1,
        BALUSTRADE = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcRampFlightTypeEnum
        {
        STRAIGHT = 0,
        SPIRAL = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcRampTypeEnum
        {
        STRAIGHT_RUN_RAMP = 0,
        TWO_STRAIGHT_RUN_RAMP = 1,
        QUARTER_TURN_RAMP = 2,
        TWO_QUARTER_TURN_RAMP = 3,
        HALF_TURN_RAMP = 4,
        SPIRAL_RAMP = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcReflectanceMethodEnum
        {
        BLINN = 0,
        FLAT = 1,
        GLASS = 2,
        MATT = 3,
        METAL = 4,
        MIRROR = 5,
        PHONG = 6,
        PLASTIC = 7,
        STRAUSS = 8,
        NOTDEFINED = 9,
        };

    public enum IfcReinforcingBarRoleEnum
        {
        MAIN = 0,
        SHEAR = 1,
        LIGATURE = 2,
        STUD = 3,
        PUNCHING = 4,
        EDGE = 5,
        RING = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcReinforcingBarSurfaceEnum
        {
        PLAIN = 0,
        TEXTURED = 1,
        };

    public enum IfcResourceConsumptionEnum
        {
        CONSUMED = 0,
        PARTIALLYCONSUMED = 1,
        NOTCONSUMED = 2,
        OCCUPIED = 3,
        PARTIALLYOCCUPIED = 4,
        NOTOCCUPIED = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcRibPlateDirectionEnum
        {
        DIRECTION_X = 0,
        DIRECTION_Y = 1,
        };

    public enum IfcRoleEnum
        {
        SUPPLIER = 0,
        MANUFACTURER = 1,
        CONTRACTOR = 2,
        SUBCONTRACTOR = 3,
        ARCHITECT = 4,
        STRUCTURALENGINEER = 5,
        COSTENGINEER = 6,
        CLIENT = 7,
        BUILDINGOWNER = 8,
        BUILDINGOPERATOR = 9,
        MECHANICALENGINEER = 10,
        ELECTRICALENGINEER = 11,
        PROJECTMANAGER = 12,
        FACILITIESMANAGER = 13,
        CIVILENGINEER = 14,
        COMISSIONINGENGINEER = 15,
        ENGINEER = 16,
        OWNER = 17,
        CONSULTANT = 18,
        CONSTRUCTIONMANAGER = 19,
        FIELDCONSTRUCTIONMANAGER = 20,
        RESELLER = 21,
        USERDEFINED = 22,
        };

    public enum IfcRoofTypeEnum
        {
        FLAT_ROOF = 0,
        SHED_ROOF = 1,
        GABLE_ROOF = 2,
        HIP_ROOF = 3,
        HIPPED_GABLE_ROOF = 4,
        GAMBREL_ROOF = 5,
        MANSARD_ROOF = 6,
        BARREL_ROOF = 7,
        RAINBOW_ROOF = 8,
        BUTTERFLY_ROOF = 9,
        PAVILION_ROOF = 10,
        DOME_ROOF = 11,
        FREEFORM = 12,
        NOTDEFINED = 13,
        };

    public enum IfcSanitaryTerminalTypeEnum
        {
        BATH = 0,
        BIDET = 1,
        CISTERN = 2,
        SHOWER = 3,
        SINK = 4,
        SANITARYFOUNTAIN = 5,
        TOILETPAN = 6,
        URINAL = 7,
        WASHHANDBASIN = 8,
        WCSEAT = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        };

    public enum IfcSectionTypeEnum
        {
        UNIFORM = 0,
        TAPERED = 1,
        };

    public enum IfcSensorTypeEnum
        {
        CO2SENSOR = 0,
        FIRESENSOR = 1,
        FLOWSENSOR = 2,
        GASSENSOR = 3,
        HEATSENSOR = 4,
        HUMIDITYSENSOR = 5,
        LIGHTSENSOR = 6,
        MOISTURESENSOR = 7,
        MOVEMENTSENSOR = 8,
        PRESSURESENSOR = 9,
        SMOKESENSOR = 10,
        SOUNDSENSOR = 11,
        TEMPERATURESENSOR = 12,
        USERDEFINED = 13,
        NOTDEFINED = 14,
        };

    public enum IfcSequenceEnum
        {
        START_START = 0,
        START_FINISH = 1,
        FINISH_START = 2,
        FINISH_FINISH = 3,
        NOTDEFINED = 4,
        };

    public enum IfcServiceLifeFactorTypeEnum
        {
        A_QUALITYOFCOMPONENTS = 0,
        B_DESIGNLEVEL = 1,
        C_WORKEXECUTIONLEVEL = 2,
        D_INDOORENVIRONMENT = 3,
        E_OUTDOORENVIRONMENT = 4,
        F_INUSECONDITIONS = 5,
        G_MAINTENANCELEVEL = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcServiceLifeTypeEnum
        {
        ACTUALSERVICELIFE = 0,
        EXPECTEDSERVICELIFE = 1,
        OPTIMISTICREFERENCESERVICELIFE = 2,
        PESSIMISTICREFERENCESERVICELIFE = 3,
        REFERENCESERVICELIFE = 4,
        };

    public enum IfcSIPrefix
        {
        EXA = 0,
        PETA = 1,
        TERA = 2,
        GIGA = 3,
        MEGA = 4,
        KILO = 5,
        HECTO = 6,
        DECA = 7,
        DECI = 8,
        CENTI = 9,
        MILLI = 10,
        MICRO = 11,
        NANO = 12,
        PICO = 13,
        FEMTO = 14,
        ATTO = 15,
        };

    public enum IfcSIUnitName
        {
        AMPERE = 0,
        BECQUEREL = 1,
        CANDELA = 2,
        COULOMB = 3,
        CUBIC_METRE = 4,
        DEGREE_CELSIUS = 5,
        FARAD = 6,
        GRAM = 7,
        GRAY = 8,
        HENRY = 9,
        HERTZ = 10,
        JOULE = 11,
        KELVIN = 12,
        LUMEN = 13,
        LUX = 14,
        METRE = 15,
        MOLE = 16,
        NEWTON = 17,
        OHM = 18,
        PASCAL = 19,
        RADIAN = 20,
        SECOND = 21,
        SIEMENS = 22,
        SIEVERT = 23,
        SQUARE_METRE = 24,
        STERADIAN = 25,
        TESLA = 26,
        VOLT = 27,
        WATT = 28,
        WEBER = 29,
        };

    public enum IfcSlabTypeEnum
        {
        FLOOR = 0,
        ROOF = 1,
        LANDING = 2,
        BASESLAB = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcSoundScaleEnum
        {
        DBA = 0,
        DBB = 1,
        DBC = 2,
        NC = 3,
        NR = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcSpaceHeaterTypeEnum
        {
        SECTIONALRADIATOR = 0,
        PANELRADIATOR = 1,
        TUBULARRADIATOR = 2,
        CONVECTOR = 3,
        BASEBOARDHEATER = 4,
        FINNEDTUBEUNIT = 5,
        UNITHEATER = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcSpaceTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcStackTerminalTypeEnum
        {
        BIRDCAGE = 0,
        COWL = 1,
        RAINWATERHOPPER = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcStairFlightTypeEnum
        {
        STRAIGHT = 0,
        WINDER = 1,
        SPIRAL = 2,
        CURVED = 3,
        FREEFORM = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcStairTypeEnum
        {
        STRAIGHT_RUN_STAIR = 0,
        TWO_STRAIGHT_RUN_STAIR = 1,
        QUARTER_WINDING_STAIR = 2,
        QUARTER_TURN_STAIR = 3,
        HALF_WINDING_STAIR = 4,
        HALF_TURN_STAIR = 5,
        TWO_QUARTER_WINDING_STAIR = 6,
        TWO_QUARTER_TURN_STAIR = 7,
        THREE_QUARTER_WINDING_STAIR = 8,
        THREE_QUARTER_TURN_STAIR = 9,
        SPIRAL_STAIR = 10,
        DOUBLE_RETURN_STAIR = 11,
        CURVED_RUN_STAIR = 12,
        TWO_CURVED_RUN_STAIR = 13,
        USERDEFINED = 14,
        NOTDEFINED = 15,
        };

    public enum IfcStateEnum
        {
        READWRITE = 0,
        READONLY = 1,
        LOCKED = 2,
        READWRITELOCKED = 3,
        READONLYLOCKED = 4,
        };

    public enum IfcStructuralCurveTypeEnum
        {
        RIGID_JOINED_MEMBER = 0,
        PIN_JOINED_MEMBER = 1,
        CABLE = 2,
        TENSION_MEMBER = 3,
        COMPRESSION_MEMBER = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcStructuralSurfaceTypeEnum
        {
        BENDING_ELEMENT = 0,
        MEMBRANE_ELEMENT = 1,
        SHELL = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcSurfaceSide
        {
        POSITIVE = 0,
        NEGATIVE = 1,
        BOTH = 2,
        };

    public enum IfcSurfaceTextureEnum
        {
        BUMP = 0,
        OPACITY = 1,
        REFLECTION = 2,
        SELFILLUMINATION = 3,
        SHININESS = 4,
        SPECULAR = 5,
        TEXTURE = 6,
        TRANSPARENCYMAP = 7,
        NOTDEFINED = 8,
        };

    public enum IfcSwitchingDeviceTypeEnum
        {
        CONTACTOR = 0,
        EMERGENCYSTOP = 1,
        STARTER = 2,
        SWITCHDISCONNECTOR = 3,
        TOGGLESWITCH = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcTankTypeEnum
        {
        PREFORMED = 0,
        SECTIONAL = 1,
        EXPANSION = 2,
        PRESSUREVESSEL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcTendonTypeEnum
        {
        STRAND = 0,
        WIRE = 1,
        BAR = 2,
        COATED = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcTextPath
        {
        LEFT = 0,
        RIGHT = 1,
        UP = 2,
        DOWN = 3,
        };

    public enum IfcThermalLoadSourceEnum
        {
        PEOPLE = 0,
        LIGHTING = 1,
        EQUIPMENT = 2,
        VENTILATIONINDOORAIR = 3,
        VENTILATIONOUTSIDEAIR = 4,
        RECIRCULATEDAIR = 5,
        EXHAUSTAIR = 6,
        AIREXCHANGERATE = 7,
        DRYBULBTEMPERATURE = 8,
        RELATIVEHUMIDITY = 9,
        INFILTRATION = 10,
        USERDEFINED = 11,
        NOTDEFINED = 12,
        };

    public enum IfcThermalLoadTypeEnum
        {
        SENSIBLE = 0,
        LATENT = 1,
        RADIANT = 2,
        NOTDEFINED = 3,
        };

    public enum IfcTimeSeriesDataTypeEnum
        {
        CONTINUOUS = 0,
        DISCRETE = 1,
        DISCRETEBINARY = 2,
        PIECEWISEBINARY = 3,
        PIECEWISECONSTANT = 4,
        PIECEWISECONTINUOUS = 5,
        NOTDEFINED = 6,
        };

    public enum IfcTimeSeriesScheduleTypeEnum
        {
        ANNUAL = 0,
        MONTHLY = 1,
        WEEKLY = 2,
        DAILY = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcTransformerTypeEnum
        {
        CURRENT = 0,
        FREQUENCY = 1,
        VOLTAGE = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcTransitionCode
        {
        DISCONTINUOUS = 0,
        CONTINUOUS = 1,
        CONTSAMEGRADIENT = 2,
        CONTSAMEGRADIENTSAMECURVATURE = 3,
        };

    public enum IfcTransportElementTypeEnum
        {
        ELEVATOR = 0,
        ESCALATOR = 1,
        MOVINGWALKWAY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcTrimmingPreference
        {
        CARTESIAN = 0,
        PARAMETER = 1,
        UNSPECIFIED = 2,
        };

    public enum IfcTubeBundleTypeEnum
        {
        FINNED = 0,
        USERDEFINED = 1,
        NOTDEFINED = 2,
        };

    public enum IfcUnitaryEquipmentTypeEnum
        {
        AIRHANDLER = 0,
        AIRCONDITIONINGUNIT = 1,
        SPLITSYSTEM = 2,
        ROOFTOPUNIT = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcUnitEnum
        {
        ABSORBEDDOSEUNIT = 0,
        AMOUNTOFSUBSTANCEUNIT = 1,
        AREAUNIT = 2,
        DOSEEQUIVALENTUNIT = 3,
        ELECTRICCAPACITANCEUNIT = 4,
        ELECTRICCHARGEUNIT = 5,
        ELECTRICCONDUCTANCEUNIT = 6,
        ELECTRICCURRENTUNIT = 7,
        ELECTRICRESISTANCEUNIT = 8,
        ELECTRICVOLTAGEUNIT = 9,
        ENERGYUNIT = 10,
        FORCEUNIT = 11,
        FREQUENCYUNIT = 12,
        ILLUMINANCEUNIT = 13,
        INDUCTANCEUNIT = 14,
        LENGTHUNIT = 15,
        LUMINOUSFLUXUNIT = 16,
        LUMINOUSINTENSITYUNIT = 17,
        MAGNETICFLUXDENSITYUNIT = 18,
        MAGNETICFLUXUNIT = 19,
        MASSUNIT = 20,
        PLANEANGLEUNIT = 21,
        POWERUNIT = 22,
        PRESSUREUNIT = 23,
        RADIOACTIVITYUNIT = 24,
        SOLIDANGLEUNIT = 25,
        THERMODYNAMICTEMPERATUREUNIT = 26,
        TIMEUNIT = 27,
        VOLUMEUNIT = 28,
        USERDEFINED = 29,
        };

    public enum IfcValveTypeEnum
        {
        AIRRELEASE = 0,
        ANTIVACUUM = 1,
        CHANGEOVER = 2,
        CHECK = 3,
        COMMISSIONING = 4,
        DIVERTING = 5,
        DRAWOFFCOCK = 6,
        DOUBLECHECK = 7,
        DOUBLEREGULATING = 8,
        FAUCET = 9,
        FLUSHING = 10,
        GASCOCK = 11,
        GASTAP = 12,
        ISOLATING = 13,
        MIXING = 14,
        PRESSUREREDUCING = 15,
        PRESSURERELIEF = 16,
        REGULATING = 17,
        SAFETYCUTOFF = 18,
        STEAMTRAP = 19,
        STOPCOCK = 20,
        USERDEFINED = 21,
        NOTDEFINED = 22,
        };

    public enum IfcVibrationIsolatorTypeEnum
        {
        COMPRESSION = 0,
        SPRING = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcWallTypeEnum
        {
        STANDARD = 0,
        POLYGONAL = 1,
        SHEAR = 2,
        ELEMENTEDWALL = 3,
        PLUMBINGWALL = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcWasteTerminalTypeEnum
        {
        FLOORTRAP = 0,
        FLOORWASTE = 1,
        GULLYSUMP = 2,
        GULLYTRAP = 3,
        GREASEINTERCEPTOR = 4,
        OILINTERCEPTOR = 5,
        PETROLINTERCEPTOR = 6,
        ROOFDRAIN = 7,
        WASTEDISPOSALUNIT = 8,
        WASTETRAP = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        };

    public enum IfcWindowPanelOperationEnum
        {
        SIDEHUNGRIGHTHAND = 0,
        SIDEHUNGLEFTHAND = 1,
        TILTANDTURNRIGHTHAND = 2,
        TILTANDTURNLEFTHAND = 3,
        TOPHUNG = 4,
        BOTTOMHUNG = 5,
        PIVOTHORIZONTAL = 6,
        PIVOTVERTICAL = 7,
        SLIDINGHORIZONTAL = 8,
        SLIDINGVERTICAL = 9,
        REMOVABLECASEMENT = 10,
        FIXEDCASEMENT = 11,
        OTHEROPERATION = 12,
        NOTDEFINED = 13,
        };

    public enum IfcWindowPanelPositionEnum
        {
        LEFT = 0,
        MIDDLE = 1,
        RIGHT = 2,
        BOTTOM = 3,
        TOP = 4,
        NOTDEFINED = 5,
        };

    public enum IfcWindowStyleConstructionEnum
        {
        ALUMINIUM = 0,
        HIGH_GRADE_STEEL = 1,
        STEEL = 2,
        WOOD = 3,
        ALUMINIUM_WOOD = 4,
        PLASTIC = 5,
        OTHER_CONSTRUCTION = 6,
        NOTDEFINED = 7,
        };

    public enum IfcWindowStyleOperationEnum
        {
        SINGLE_PANEL = 0,
        DOUBLE_PANEL_VERTICAL = 1,
        DOUBLE_PANEL_HORIZONTAL = 2,
        TRIPLE_PANEL_VERTICAL = 3,
        TRIPLE_PANEL_BOTTOM = 4,
        TRIPLE_PANEL_TOP = 5,
        TRIPLE_PANEL_LEFT = 6,
        TRIPLE_PANEL_RIGHT = 7,
        TRIPLE_PANEL_HORIZONTAL = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcWorkControlTypeEnum
        {
        ACTUAL = 0,
        BASELINE = 1,
        PLANNED = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };
    //
    class EnumNames
        {
        public static TextValue[] LOGICAL_VALUE_ = { "F", "T", "U" };
        public static TextValue[] IfcActionSourceTypeEnum_ = { "DEAD_LOAD_G", "COMPLETION_G1", "LIVE_LOAD_Q", "SNOW_S", "WIND_W", "PRESTRESSING_P", "SETTLEMENT_U", "TEMPERATURE_T", "EARTHQUAKE_E", "FIRE", "IMPULSE", "IMPACT", "TRANSPORT", "ERECTION", "PROPPING", "SYSTEM_IMPERFECTION", "SHRINKAGE", "CREEP", "LACK_OF_FIT", "BUOYANCY", "ICE", "CURRENT", "WAVE", "RAIN", "BRAKES", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcActionTypeEnum_ = { "PERMANENT_G", "VARIABLE_Q", "EXTRAORDINARY_A", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcActuatorTypeEnum_ = { "ELECTRICACTUATOR", "HANDOPERATEDACTUATOR", "HYDRAULICACTUATOR", "PNEUMATICACTUATOR", "THERMOSTATICACTUATOR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAddressTypeEnum_ = { "OFFICE", "SITE", "HOME", "DISTRIBUTIONPOINT", "USERDEFINED" };
        public static TextValue[] IfcAheadOrBehind_ = { "AHEAD", "BEHIND" };
        public static TextValue[] IfcAirTerminalBoxTypeEnum_ = { "CONSTANTFLOW", "VARIABLEFLOWPRESSUREDEPENDANT", "VARIABLEFLOWPRESSUREINDEPENDANT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAirTerminalTypeEnum_ = { "GRILLE", "REGISTER", "DIFFUSER", "EYEBALL", "IRIS", "LINEARGRILLE", "LINEARDIFFUSER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAirToAirHeatRecoveryTypeEnum_ = { "FIXEDPLATECOUNTERFLOWEXCHANGER", "FIXEDPLATECROSSFLOWEXCHANGER", "FIXEDPLATEPARALLELFLOWEXCHANGER", "ROTARYWHEEL", "RUNAROUNDCOILLOOP", "HEATPIPE", "TWINTOWERENTHALPYRECOVERYLOOPS", "THERMOSIPHONSEALEDTUBEHEATEXCHANGERS", "THERMOSIPHONCOILTYPEHEATEXCHANGERS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAlarmTypeEnum_ = { "BELL", "BREAKGLASSBUTTON", "LIGHT", "MANUALPULLBOX", "SIREN", "WHISTLE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAnalysisModelTypeEnum_ = { "IN_PLANE_LOADING_2D", "OUT_PLANE_LOADING_2D", "LOADING_3D", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAnalysisTheoryTypeEnum_ = { "FIRST_ORDER_THEORY", "SECOND_ORDER_THEORY", "THIRD_ORDER_THEORY", "FULL_NONLINEAR_THEORY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcArithmeticOperatorEnum_ = { "ADD", "DIVIDE", "MULTIPLY", "SUBTRACT" };
        public static TextValue[] IfcAssemblyPlaceEnum_ = { "SITE", "FACTORY", "NOTDEFINED" };
        public static TextValue[] IfcBeamTypeEnum_ = { "BEAM", "JOIST", "LINTEL", "T_BEAM", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBenchmarkEnum_ = { "GREATERTHAN", "GREATERTHANOREQUALTO", "LESSTHAN", "LESSTHANOREQUALTO", "EQUALTO", "NOTEQUALTO" };
        public static TextValue[] IfcBoilerTypeEnum_ = { "WATER", "STEAM", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBooleanOperator_ = { "UNION", "INTERSECTION", "DIFFERENCE" };
        public static TextValue[] IfcBSplineCurveForm_ = { "POLYLINE_FORM", "CIRCULAR_ARC", "ELLIPTIC_ARC", "PARABOLIC_ARC", "HYPERBOLIC_ARC", "UNSPECIFIED" };
        public static TextValue[] IfcBuildingElementProxyTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCableCarrierFittingTypeEnum_ = { "BEND", "CROSS", "REDUCER", "TEE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCableCarrierSegmentTypeEnum_ = { "CABLELADDERSEGMENT", "CABLETRAYSEGMENT", "CABLETRUNKINGSEGMENT", "CONDUITSEGMENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCableSegmentTypeEnum_ = { "CABLESEGMENT", "CONDUCTORSEGMENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcChangeActionEnum_ = { "NOCHANGE", "MODIFIED", "ADDED", "DELETED", "MODIFIEDADDED", "MODIFIEDDELETED" };
        public static TextValue[] IfcChillerTypeEnum_ = { "AIRCOOLED", "WATERCOOLED", "HEATRECOVERY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCoilTypeEnum_ = { "DXCOOLINGCOIL", "WATERCOOLINGCOIL", "STEAMHEATINGCOIL", "WATERHEATINGCOIL", "ELECTRICHEATINGCOIL", "GASHEATINGCOIL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcColumnTypeEnum_ = { "COLUMN", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCompressorTypeEnum_ = { "DYNAMIC", "RECIPROCATING", "ROTARY", "SCROLL", "TROCHOIDAL", "SINGLESTAGE", "BOOSTER", "OPENTYPE", "HERMETIC", "SEMIHERMETIC", "WELDEDSHELLHERMETIC", "ROLLINGPISTON", "ROTARYVANE", "SINGLESCREW", "TWINSCREW", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCondenserTypeEnum_ = { "WATERCOOLEDSHELLTUBE", "WATERCOOLEDSHELLCOIL", "WATERCOOLEDTUBEINTUBE", "WATERCOOLEDBRAZEDPLATE", "AIRCOOLED", "EVAPORATIVECOOLED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcConnectionTypeEnum_ = { "ATPATH", "ATSTART", "ATEND", "NOTDEFINED" };
        public static TextValue[] IfcConstraintEnum_ = { "HARD", "SOFT", "ADVISORY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcControllerTypeEnum_ = { "FLOATING", "PROPORTIONAL", "PROPORTIONALINTEGRAL", "PROPORTIONALINTEGRALDERIVATIVE", "TIMEDTWOPOSITION", "TWOPOSITION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCooledBeamTypeEnum_ = { "ACTIVE", "PASSIVE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCoolingTowerTypeEnum_ = { "NATURALDRAFT", "MECHANICALINDUCEDDRAFT", "MECHANICALFORCEDDRAFT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCostScheduleTypeEnum_ = { "BUDGET", "COSTPLAN", "ESTIMATE", "TENDER", "PRICEDBILLOFQUANTITIES", "UNPRICEDBILLOFQUANTITIES", "SCHEDULEOFRATES", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCoveringTypeEnum_ = { "CEILING", "FLOORING", "CLADDING", "ROOFING", "INSULATION", "MEMBRANE", "SLEEVING", "WRAPPING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCurrencyEnum_ = { "AED", "AES", "ATS", "AUD", "BBD", "BEG", "BGL", "BHD", "BMD", "BND", "BRL", "BSD", "BWP", "BZD", "CAD", "CBD", "CHF", "CLP", "CNY", "CYS", "CZK", "DDP", "DEM", "DKK", "EGL", "EST", "EUR", "FAK", "FIM", "FJD", "FKP", "FRF", "GBP", "GIP", "GMD", "GRX", "HKD", "HUF", "ICK", "IDR", "ILS", "INR", "IRP", "ITL", "JMD", "JOD", "JPY", "KES", "KRW", "KWD", "KYD", "LKR", "LUF", "MTL", "MUR", "MXN", "MYR", "NLG", "NZD", "OMR", "PGK", "PHP", "PKR", "PLN", "PTN", "QAR", "RUR", "SAR", "SCR", "SEK", "SGD", "SKP", "THB", "TRL", "TTD", "TWD", "USD", "VEB", "VND", "XEU", "ZAR", "ZWD", "NOK" };
        public static TextValue[] IfcCurtainWallTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDamperTypeEnum_ = { "CONTROLDAMPER", "FIREDAMPER", "SMOKEDAMPER", "FIRESMOKEDAMPER", "BACKDRAFTDAMPER", "RELIEFDAMPER", "BLASTDAMPER", "GRAVITYDAMPER", "GRAVITYRELIEFDAMPER", "BALANCINGDAMPER", "FUMEHOODEXHAUST", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDataOriginEnum_ = { "MEASURED", "PREDICTED", "SIMULATED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDerivedUnitEnum_ = { "ANGULARVELOCITYUNIT", "COMPOUNDPLANEANGLEUNIT", "DYNAMICVISCOSITYUNIT", "HEATFLUXDENSITYUNIT", "INTEGERCOUNTRATEUNIT", "ISOTHERMALMOISTURECAPACITYUNIT", "KINEMATICVISCOSITYUNIT", "LINEARVELOCITYUNIT", "MASSDENSITYUNIT", "MASSFLOWRATEUNIT", "MOISTUREDIFFUSIVITYUNIT", "MOLECULARWEIGHTUNIT", "SPECIFICHEATCAPACITYUNIT", "THERMALADMITTANCEUNIT", "THERMALCONDUCTANCEUNIT", "THERMALRESISTANCEUNIT", "THERMALTRANSMITTANCEUNIT", "VAPORPERMEABILITYUNIT", "VOLUMETRICFLOWRATEUNIT", "ROTATIONALFREQUENCYUNIT", "TORQUEUNIT", "MOMENTOFINERTIAUNIT", "LINEARMOMENTUNIT", "LINEARFORCEUNIT", "PLANARFORCEUNIT", "MODULUSOFELASTICITYUNIT", "SHEARMODULUSUNIT", "LINEARSTIFFNESSUNIT", "ROTATIONALSTIFFNESSUNIT", "MODULUSOFSUBGRADEREACTIONUNIT", "ACCELERATIONUNIT", "CURVATUREUNIT", "HEATINGVALUEUNIT", "IONCONCENTRATIONUNIT", "LUMINOUSINTENSITYDISTRIBUTIONUNIT", "MASSPERLENGTHUNIT", "MODULUSOFLINEARSUBGRADEREACTIONUNIT", "MODULUSOFROTATIONALSUBGRADEREACTIONUNIT", "PHUNIT", "ROTATIONALMASSUNIT", "SECTIONAREAINTEGRALUNIT", "SECTIONMODULUSUNIT", "SOUNDPOWERUNIT", "SOUNDPRESSUREUNIT", "TEMPERATUREGRADIENTUNIT", "THERMALEXPANSIONCOEFFICIENTUNIT", "WARPINGCONSTANTUNIT", "WARPINGMOMENTUNIT", "USERDEFINED" };
        public static TextValue[] IfcDimensionExtentUsage_ = { "ORIGIN", "TARGET" };
        public static TextValue[] IfcDirectionSenseEnum_ = { "POSITIVE", "NEGATIVE" };
        public static TextValue[] IfcDistributionChamberElementTypeEnum_ = { "FORMEDDUCT", "INSPECTIONCHAMBER", "INSPECTIONPIT", "MANHOLE", "METERCHAMBER", "SUMP", "TRENCH", "VALVECHAMBER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDocumentConfidentialityEnum_ = { "PUBLIC", "RESTRICTED", "CONFIDENTIAL", "PERSONAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDocumentStatusEnum_ = { "DRAFT", "FINALDRAFT", "FINAL", "REVISION", "NOTDEFINED" };
        public static TextValue[] IfcDoorPanelOperationEnum_ = { "SWINGING", "DOUBLE_ACTING", "SLIDING", "FOLDING", "REVOLVING", "ROLLINGUP", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDoorPanelPositionEnum_ = { "LEFT", "MIDDLE", "RIGHT", "NOTDEFINED" };
        public static TextValue[] IfcDoorStyleConstructionEnum_ = { "ALUMINIUM", "HIGH_GRADE_STEEL", "STEEL", "WOOD", "ALUMINIUM_WOOD", "ALUMINIUM_PLASTIC", "PLASTIC", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDoorStyleOperationEnum_ = { "SINGLE_SWING_LEFT", "SINGLE_SWING_RIGHT", "DOUBLE_DOOR_SINGLE_SWING", "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT", "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT", "DOUBLE_SWING_LEFT", "DOUBLE_SWING_RIGHT", "DOUBLE_DOOR_DOUBLE_SWING", "SLIDING_TO_LEFT", "SLIDING_TO_RIGHT", "DOUBLE_DOOR_SLIDING", "FOLDING_TO_LEFT", "FOLDING_TO_RIGHT", "DOUBLE_DOOR_FOLDING", "REVOLVING", "ROLLINGUP", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDuctFittingTypeEnum_ = { "BEND", "CONNECTOR", "ENTRY", "EXIT", "JUNCTION", "OBSTRUCTION", "TRANSITION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDuctSegmentTypeEnum_ = { "RIGIDSEGMENT", "FLEXIBLESEGMENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDuctSilencerTypeEnum_ = { "FLATOVAL", "RECTANGULAR", "ROUND", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricApplianceTypeEnum_ = { "COMPUTER", "DIRECTWATERHEATER", "DISHWASHER", "ELECTRICCOOKER", "ELECTRICHEATER", "FACSIMILE", "FREESTANDINGFAN", "FREEZER", "FRIDGE_FREEZER", "HANDDRYER", "INDIRECTWATERHEATER", "MICROWAVE", "PHOTOCOPIER", "PRINTER", "REFRIGERATOR", "RADIANTHEATER", "SCANNER", "TELEPHONE", "TUMBLEDRYER", "TV", "VENDINGMACHINE", "WASHINGMACHINE", "WATERHEATER", "WATERCOOLER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricCurrentEnum_ = { "ALTERNATING", "DIRECT", "NOTDEFINED" };
        public static TextValue[] IfcElectricDistributionPointFunctionEnum_ = { "ALARMPANEL", "CONSUMERUNIT", "CONTROLPANEL", "DISTRIBUTIONBOARD", "GASDETECTORPANEL", "INDICATORPANEL", "MIMICPANEL", "MOTORCONTROLCENTRE", "SWITCHBOARD", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricFlowStorageDeviceTypeEnum_ = { "BATTERY", "CAPACITORBANK", "HARMONICFILTER", "INDUCTORBANK", "UPS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricGeneratorTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricHeaterTypeEnum_ = { "ELECTRICPOINTHEATER", "ELECTRICCABLEHEATER", "ELECTRICMATHEATER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricMotorTypeEnum_ = { "DC", "INDUCTION", "POLYPHASE", "RELUCTANCESYNCHRONOUS", "SYNCHRONOUS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricTimeControlTypeEnum_ = { "TIMECLOCK", "TIMEDELAY", "RELAY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElementAssemblyTypeEnum_ = { "ACCESSORY_ASSEMBLY", "ARCH", "BEAM_GRID", "BRACED_FRAME", "GIRDER", "REINFORCEMENT_UNIT", "RIGID_FRAME", "SLAB_FIELD", "TRUSS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElementCompositionEnum_ = { "COMPLEX", "ELEMENT", "PARTIAL" };
        public static TextValue[] IfcEnergySequenceEnum_ = { "PRIMARY", "SECONDARY", "TERTIARY", "AUXILIARY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcEnvironmentalImpactCategoryEnum_ = { "COMBINEDVALUE", "DISPOSAL", "EXTRACTION", "INSTALLATION", "MANUFACTURE", "TRANSPORTATION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcEvaporativeCoolerTypeEnum_ = { "DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER", "DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER", "DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER", "DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER", "DIRECTEVAPORATIVEAIRWASHER", "INDIRECTEVAPORATIVEPACKAGEAIRCOOLER", "INDIRECTEVAPORATIVEWETCOIL", "INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER", "INDIRECTDIRECTCOMBINATION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcEvaporatorTypeEnum_ = { "DIRECTEXPANSIONSHELLANDTUBE", "DIRECTEXPANSIONTUBEINTUBE", "DIRECTEXPANSIONBRAZEDPLATE", "FLOODEDSHELLANDTUBE", "SHELLANDCOIL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFanTypeEnum_ = { "CENTRIFUGALFORWARDCURVED", "CENTRIFUGALRADIAL", "CENTRIFUGALBACKWARDINCLINEDCURVED", "CENTRIFUGALAIRFOIL", "TUBEAXIAL", "VANEAXIAL", "PROPELLORAXIAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFilterTypeEnum_ = { "AIRPARTICLEFILTER", "ODORFILTER", "OILFILTER", "STRAINER", "WATERFILTER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFireSuppressionTerminalTypeEnum_ = { "BREECHINGINLET", "FIREHYDRANT", "HOSEREEL", "SPRINKLER", "SPRINKLERDEFLECTOR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFlowDirectionEnum_ = { "SOURCE", "SINK", "SOURCEANDSINK", "NOTDEFINED" };
        public static TextValue[] IfcFlowInstrumentTypeEnum_ = { "PRESSUREGAUGE", "THERMOMETER", "AMMETER", "FREQUENCYMETER", "POWERFACTORMETER", "PHASEANGLEMETER", "VOLTMETER_PEAK", "VOLTMETER_RMS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFlowMeterTypeEnum_ = { "ELECTRICMETER", "ENERGYMETER", "FLOWMETER", "GASMETER", "OILMETER", "WATERMETER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFootingTypeEnum_ = { "FOOTING_BEAM", "PAD_FOOTING", "PILE_CAP", "STRIP_FOOTING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcGasTerminalTypeEnum_ = { "GASAPPLIANCE", "GASBOOSTER", "GASBURNER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcGeometricProjectionEnum_ = { "GRAPH_VIEW", "SKETCH_VIEW", "MODEL_VIEW", "PLAN_VIEW", "REFLECTED_PLAN_VIEW", "SECTION_VIEW", "ELEVATION_VIEW", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcGlobalOrLocalEnum_ = { "GLOBAL_COORDS", "LOCAL_COORDS" };
        public static TextValue[] IfcHeatExchangerTypeEnum_ = { "PLATE", "SHELLANDTUBE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcHumidifierTypeEnum_ = { "STEAMINJECTION", "ADIABATICAIRWASHER", "ADIABATICPAN", "ADIABATICWETTEDELEMENT", "ADIABATICATOMIZING", "ADIABATICULTRASONIC", "ADIABATICRIGIDMEDIA", "ADIABATICCOMPRESSEDAIRNOZZLE", "ASSISTEDELECTRIC", "ASSISTEDNATURALGAS", "ASSISTEDPROPANE", "ASSISTEDBUTANE", "ASSISTEDSTEAM", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcInternalOrExternalEnum_ = { "INTERNAL", "EXTERNAL", "NOTDEFINED" };
        public static TextValue[] IfcInventoryTypeEnum_ = { "ASSETINVENTORY", "SPACEINVENTORY", "FURNITUREINVENTORY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcJunctionBoxTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcLampTypeEnum_ = { "COMPACTFLUORESCENT", "FLUORESCENT", "HIGHPRESSUREMERCURY", "HIGHPRESSURESODIUM", "METALHALIDE", "TUNGSTENFILAMENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcLayerSetDirectionEnum_ = { "AXIS1", "AXIS2", "AXIS3" };
        public static TextValue[] IfcLightDistributionCurveEnum_ = { "TYPE_A", "TYPE_B", "TYPE_C", "NOTDEFINED" };
        public static TextValue[] IfcLightEmissionSourceEnum_ = { "COMPACTFLUORESCENT", "FLUORESCENT", "HIGHPRESSUREMERCURY", "HIGHPRESSURESODIUM", "LIGHTEMITTINGDIODE", "LOWPRESSURESODIUM", "LOWVOLTAGEHALOGEN", "MAINVOLTAGEHALOGEN", "METALHALIDE", "TUNGSTENFILAMENT", "NOTDEFINED" };
        public static TextValue[] IfcLightFixtureTypeEnum_ = { "POINTSOURCE", "DIRECTIONSOURCE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcLoadGroupTypeEnum_ = { "LOAD_GROUP", "LOAD_CASE", "LOAD_COMBINATION_GROUP", "LOAD_COMBINATION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcLogicalOperatorEnum_ = { "LOGICALAND", "LOGICALOR" };
        public static TextValue[] IfcMemberTypeEnum_ = { "BRACE", "CHORD", "COLLAR", "MEMBER", "MULLION", "PLATE", "POST", "PURLIN", "RAFTER", "STRINGER", "STRUT", "STUD", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcMotorConnectionTypeEnum_ = { "BELTDRIVE", "COUPLING", "DIRECTDRIVE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcNullStyle_ = { "NULL" };
        public static TextValue[] IfcObjectiveEnum_ = { "CODECOMPLIANCE", "DESIGNINTENT", "HEALTHANDSAFETY", "REQUIREMENT", "SPECIFICATION", "TRIGGERCONDITION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcObjectTypeEnum_ = { "PRODUCT", "PROCESS", "CONTROL", "RESOURCE", "ACTOR", "GROUP", "PROJECT", "NOTDEFINED" };
        public static TextValue[] IfcOccupantTypeEnum_ = { "ASSIGNEE", "ASSIGNOR", "LESSEE", "LESSOR", "LETTINGAGENT", "OWNER", "TENANT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcOutletTypeEnum_ = { "AUDIOVISUALOUTLET", "COMMUNICATIONSOUTLET", "POWEROUTLET", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPermeableCoveringOperationEnum_ = { "GRILL", "LOUVER", "SCREEN", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPhysicalOrVirtualEnum_ = { "PHYSICAL", "VIRTUAL", "NOTDEFINED" };
        public static TextValue[] IfcPileConstructionEnum_ = { "CAST_IN_PLACE", "COMPOSITE", "PRECAST_CONCRETE", "PREFAB_STEEL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPileTypeEnum_ = { "COHESION", "FRICTION", "SUPPORT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPipeFittingTypeEnum_ = { "BEND", "CONNECTOR", "ENTRY", "EXIT", "JUNCTION", "OBSTRUCTION", "TRANSITION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPipeSegmentTypeEnum_ = { "FLEXIBLESEGMENT", "RIGIDSEGMENT", "GUTTER", "SPOOL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPlateTypeEnum_ = { "CURTAIN_PANEL", "SHEET", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcProcedureTypeEnum_ = { "ADVICE_CAUTION", "ADVICE_NOTE", "ADVICE_WARNING", "CALIBRATION", "DIAGNOSTIC", "SHUTDOWN", "STARTUP", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcProfileTypeEnum_ = { "CURVE", "AREA" };
        public static TextValue[] IfcProjectedOrTrueLengthEnum_ = { "PROJECTED_LENGTH", "TRUE_LENGTH" };
        public static TextValue[] IfcProjectOrderRecordTypeEnum_ = { "CHANGE", "MAINTENANCE", "MOVE", "PURCHASE", "WORK", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcProjectOrderTypeEnum_ = { "CHANGEORDER", "MAINTENANCEWORKORDER", "MOVEORDER", "PURCHASEORDER", "WORKORDER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPropertySourceEnum_ = { "DESIGN", "DESIGNMAXIMUM", "DESIGNMINIMUM", "SIMULATED", "ASBUILT", "COMMISSIONING", "MEASURED", "USERDEFINED", "NOTKNOWN" };
        public static TextValue[] IfcProtectiveDeviceTypeEnum_ = { "FUSEDISCONNECTOR", "CIRCUITBREAKER", "EARTHFAILUREDEVICE", "RESIDUALCURRENTCIRCUITBREAKER", "RESIDUALCURRENTSWITCH", "VARISTOR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPumpTypeEnum_ = { "CIRCULATOR", "ENDSUCTION", "SPLITCASE", "VERTICALINLINE", "VERTICALTURBINE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRailingTypeEnum_ = { "HANDRAIL", "GUARDRAIL", "BALUSTRADE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRampFlightTypeEnum_ = { "STRAIGHT", "SPIRAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRampTypeEnum_ = { "STRAIGHT_RUN_RAMP", "TWO_STRAIGHT_RUN_RAMP", "QUARTER_TURN_RAMP", "TWO_QUARTER_TURN_RAMP", "HALF_TURN_RAMP", "SPIRAL_RAMP", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcReflectanceMethodEnum_ = { "BLINN", "FLAT", "GLASS", "MATT", "METAL", "MIRROR", "PHONG", "PLASTIC", "STRAUSS", "NOTDEFINED" };
        public static TextValue[] IfcReinforcingBarRoleEnum_ = { "MAIN", "SHEAR", "LIGATURE", "STUD", "PUNCHING", "EDGE", "RING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcReinforcingBarSurfaceEnum_ = { "PLAIN", "TEXTURED" };
        public static TextValue[] IfcResourceConsumptionEnum_ = { "CONSUMED", "PARTIALLYCONSUMED", "NOTCONSUMED", "OCCUPIED", "PARTIALLYOCCUPIED", "NOTOCCUPIED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRibPlateDirectionEnum_ = { "DIRECTION_X", "DIRECTION_Y" };
        public static TextValue[] IfcRoleEnum_ = { "SUPPLIER", "MANUFACTURER", "CONTRACTOR", "SUBCONTRACTOR", "ARCHITECT", "STRUCTURALENGINEER", "COSTENGINEER", "CLIENT", "BUILDINGOWNER", "BUILDINGOPERATOR", "MECHANICALENGINEER", "ELECTRICALENGINEER", "PROJECTMANAGER", "FACILITIESMANAGER", "CIVILENGINEER", "COMISSIONINGENGINEER", "ENGINEER", "OWNER", "CONSULTANT", "CONSTRUCTIONMANAGER", "FIELDCONSTRUCTIONMANAGER", "RESELLER", "USERDEFINED" };
        public static TextValue[] IfcRoofTypeEnum_ = { "FLAT_ROOF", "SHED_ROOF", "GABLE_ROOF", "HIP_ROOF", "HIPPED_GABLE_ROOF", "GAMBREL_ROOF", "MANSARD_ROOF", "BARREL_ROOF", "RAINBOW_ROOF", "BUTTERFLY_ROOF", "PAVILION_ROOF", "DOME_ROOF", "FREEFORM", "NOTDEFINED" };
        public static TextValue[] IfcSanitaryTerminalTypeEnum_ = { "BATH", "BIDET", "CISTERN", "SHOWER", "SINK", "SANITARYFOUNTAIN", "TOILETPAN", "URINAL", "WASHHANDBASIN", "WCSEAT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSectionTypeEnum_ = { "UNIFORM", "TAPERED" };
        public static TextValue[] IfcSensorTypeEnum_ = { "CO2SENSOR", "FIRESENSOR", "FLOWSENSOR", "GASSENSOR", "HEATSENSOR", "HUMIDITYSENSOR", "LIGHTSENSOR", "MOISTURESENSOR", "MOVEMENTSENSOR", "PRESSURESENSOR", "SMOKESENSOR", "SOUNDSENSOR", "TEMPERATURESENSOR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSequenceEnum_ = { "START_START", "START_FINISH", "FINISH_START", "FINISH_FINISH", "NOTDEFINED" };
        public static TextValue[] IfcServiceLifeFactorTypeEnum_ = { "A_QUALITYOFCOMPONENTS", "B_DESIGNLEVEL", "C_WORKEXECUTIONLEVEL", "D_INDOORENVIRONMENT", "E_OUTDOORENVIRONMENT", "F_INUSECONDITIONS", "G_MAINTENANCELEVEL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcServiceLifeTypeEnum_ = { "ACTUALSERVICELIFE", "EXPECTEDSERVICELIFE", "OPTIMISTICREFERENCESERVICELIFE", "PESSIMISTICREFERENCESERVICELIFE", "REFERENCESERVICELIFE" };
        public static TextValue[] IfcSIPrefix_ = { "EXA", "PETA", "TERA", "GIGA", "MEGA", "KILO", "HECTO", "DECA", "DECI", "CENTI", "MILLI", "MICRO", "NANO", "PICO", "FEMTO", "ATTO" };
        public static TextValue[] IfcSIUnitName_ = { "AMPERE", "BECQUEREL", "CANDELA", "COULOMB", "CUBIC_METRE", "DEGREE_CELSIUS", "FARAD", "GRAM", "GRAY", "HENRY", "HERTZ", "JOULE", "KELVIN", "LUMEN", "LUX", "METRE", "MOLE", "NEWTON", "OHM", "PASCAL", "RADIAN", "SECOND", "SIEMENS", "SIEVERT", "SQUARE_METRE", "STERADIAN", "TESLA", "VOLT", "WATT", "WEBER" };
        public static TextValue[] IfcSlabTypeEnum_ = { "FLOOR", "ROOF", "LANDING", "BASESLAB", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSoundScaleEnum_ = { "DBA", "DBB", "DBC", "NC", "NR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSpaceHeaterTypeEnum_ = { "SECTIONALRADIATOR", "PANELRADIATOR", "TUBULARRADIATOR", "CONVECTOR", "BASEBOARDHEATER", "FINNEDTUBEUNIT", "UNITHEATER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSpaceTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStackTerminalTypeEnum_ = { "BIRDCAGE", "COWL", "RAINWATERHOPPER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStairFlightTypeEnum_ = { "STRAIGHT", "WINDER", "SPIRAL", "CURVED", "FREEFORM", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStairTypeEnum_ = { "STRAIGHT_RUN_STAIR", "TWO_STRAIGHT_RUN_STAIR", "QUARTER_WINDING_STAIR", "QUARTER_TURN_STAIR", "HALF_WINDING_STAIR", "HALF_TURN_STAIR", "TWO_QUARTER_WINDING_STAIR", "TWO_QUARTER_TURN_STAIR", "THREE_QUARTER_WINDING_STAIR", "THREE_QUARTER_TURN_STAIR", "SPIRAL_STAIR", "DOUBLE_RETURN_STAIR", "CURVED_RUN_STAIR", "TWO_CURVED_RUN_STAIR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStateEnum_ = { "READWRITE", "READONLY", "LOCKED", "READWRITELOCKED", "READONLYLOCKED" };
        public static TextValue[] IfcStructuralCurveTypeEnum_ = { "RIGID_JOINED_MEMBER", "PIN_JOINED_MEMBER", "CABLE", "TENSION_MEMBER", "COMPRESSION_MEMBER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStructuralSurfaceTypeEnum_ = { "BENDING_ELEMENT", "MEMBRANE_ELEMENT", "SHELL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSurfaceSide_ = { "POSITIVE", "NEGATIVE", "BOTH" };
        public static TextValue[] IfcSurfaceTextureEnum_ = { "BUMP", "OPACITY", "REFLECTION", "SELFILLUMINATION", "SHININESS", "SPECULAR", "TEXTURE", "TRANSPARENCYMAP", "NOTDEFINED" };
        public static TextValue[] IfcSwitchingDeviceTypeEnum_ = { "CONTACTOR", "EMERGENCYSTOP", "STARTER", "SWITCHDISCONNECTOR", "TOGGLESWITCH", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTankTypeEnum_ = { "PREFORMED", "SECTIONAL", "EXPANSION", "PRESSUREVESSEL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTendonTypeEnum_ = { "STRAND", "WIRE", "BAR", "COATED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTextPath_ = { "LEFT", "RIGHT", "UP", "DOWN" };
        public static TextValue[] IfcThermalLoadSourceEnum_ = { "PEOPLE", "LIGHTING", "EQUIPMENT", "VENTILATIONINDOORAIR", "VENTILATIONOUTSIDEAIR", "RECIRCULATEDAIR", "EXHAUSTAIR", "AIREXCHANGERATE", "DRYBULBTEMPERATURE", "RELATIVEHUMIDITY", "INFILTRATION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcThermalLoadTypeEnum_ = { "SENSIBLE", "LATENT", "RADIANT", "NOTDEFINED" };
        public static TextValue[] IfcTimeSeriesDataTypeEnum_ = { "CONTINUOUS", "DISCRETE", "DISCRETEBINARY", "PIECEWISEBINARY", "PIECEWISECONSTANT", "PIECEWISECONTINUOUS", "NOTDEFINED" };
        public static TextValue[] IfcTimeSeriesScheduleTypeEnum_ = { "ANNUAL", "MONTHLY", "WEEKLY", "DAILY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTransformerTypeEnum_ = { "CURRENT", "FREQUENCY", "VOLTAGE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTransitionCode_ = { "DISCONTINUOUS", "CONTINUOUS", "CONTSAMEGRADIENT", "CONTSAMEGRADIENTSAMECURVATURE" };
        public static TextValue[] IfcTransportElementTypeEnum_ = { "ELEVATOR", "ESCALATOR", "MOVINGWALKWAY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTrimmingPreference_ = { "CARTESIAN", "PARAMETER", "UNSPECIFIED" };
        public static TextValue[] IfcTubeBundleTypeEnum_ = { "FINNED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcUnitaryEquipmentTypeEnum_ = { "AIRHANDLER", "AIRCONDITIONINGUNIT", "SPLITSYSTEM", "ROOFTOPUNIT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcUnitEnum_ = { "ABSORBEDDOSEUNIT", "AMOUNTOFSUBSTANCEUNIT", "AREAUNIT", "DOSEEQUIVALENTUNIT", "ELECTRICCAPACITANCEUNIT", "ELECTRICCHARGEUNIT", "ELECTRICCONDUCTANCEUNIT", "ELECTRICCURRENTUNIT", "ELECTRICRESISTANCEUNIT", "ELECTRICVOLTAGEUNIT", "ENERGYUNIT", "FORCEUNIT", "FREQUENCYUNIT", "ILLUMINANCEUNIT", "INDUCTANCEUNIT", "LENGTHUNIT", "LUMINOUSFLUXUNIT", "LUMINOUSINTENSITYUNIT", "MAGNETICFLUXDENSITYUNIT", "MAGNETICFLUXUNIT", "MASSUNIT", "PLANEANGLEUNIT", "POWERUNIT", "PRESSUREUNIT", "RADIOACTIVITYUNIT", "SOLIDANGLEUNIT", "THERMODYNAMICTEMPERATUREUNIT", "TIMEUNIT", "VOLUMEUNIT", "USERDEFINED" };
        public static TextValue[] IfcValveTypeEnum_ = { "AIRRELEASE", "ANTIVACUUM", "CHANGEOVER", "CHECK", "COMMISSIONING", "DIVERTING", "DRAWOFFCOCK", "DOUBLECHECK", "DOUBLEREGULATING", "FAUCET", "FLUSHING", "GASCOCK", "GASTAP", "ISOLATING", "MIXING", "PRESSUREREDUCING", "PRESSURERELIEF", "REGULATING", "SAFETYCUTOFF", "STEAMTRAP", "STOPCOCK", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcVibrationIsolatorTypeEnum_ = { "COMPRESSION", "SPRING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcWallTypeEnum_ = { "STANDARD", "POLYGONAL", "SHEAR", "ELEMENTEDWALL", "PLUMBINGWALL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcWasteTerminalTypeEnum_ = { "FLOORTRAP", "FLOORWASTE", "GULLYSUMP", "GULLYTRAP", "GREASEINTERCEPTOR", "OILINTERCEPTOR", "PETROLINTERCEPTOR", "ROOFDRAIN", "WASTEDISPOSALUNIT", "WASTETRAP", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcWindowPanelOperationEnum_ = { "SIDEHUNGRIGHTHAND", "SIDEHUNGLEFTHAND", "TILTANDTURNRIGHTHAND", "TILTANDTURNLEFTHAND", "TOPHUNG", "BOTTOMHUNG", "PIVOTHORIZONTAL", "PIVOTVERTICAL", "SLIDINGHORIZONTAL", "SLIDINGVERTICAL", "REMOVABLECASEMENT", "FIXEDCASEMENT", "OTHEROPERATION", "NOTDEFINED" };
        public static TextValue[] IfcWindowPanelPositionEnum_ = { "LEFT", "MIDDLE", "RIGHT", "BOTTOM", "TOP", "NOTDEFINED" };
        public static TextValue[] IfcWindowStyleConstructionEnum_ = { "ALUMINIUM", "HIGH_GRADE_STEEL", "STEEL", "WOOD", "ALUMINIUM_WOOD", "PLASTIC", "OTHER_CONSTRUCTION", "NOTDEFINED" };
        public static TextValue[] IfcWindowStyleOperationEnum_ = { "SINGLE_PANEL", "DOUBLE_PANEL_VERTICAL", "DOUBLE_PANEL_HORIZONTAL", "TRIPLE_PANEL_VERTICAL", "TRIPLE_PANEL_BOTTOM", "TRIPLE_PANEL_TOP", "TRIPLE_PANEL_LEFT", "TRIPLE_PANEL_RIGHT", "TRIPLE_PANEL_HORIZONTAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcWorkControlTypeEnum_ = { "ACTUAL", "BASELINE", "PLANNED", "USERDEFINED", "NOTDEFINED" };
        }


    //
    // Defined types
    // 
    public class IfcComplexNumber : List<double> { }
    class IfcComplexNumberSerializer : AggrSerializer_double<double, IfcComplexNumber> { }
    public class IfcCompoundPlaneAngleMeasure : List<IntValue> { }
    class IfcCompoundPlaneAngleMeasureSerializer : AggrSerializer_IntValue<IntValue, IfcCompoundPlaneAngleMeasure> { }

    public class IfcActorSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcActorSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcActorSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcActorSelect() : base(null) { }

        public bool is_IfcOrganization { get { return IsADBEntity("IfcOrganization"); } }
        public IfcOrganization IfcOrganization
            {
            set { putEntityInstance("IFCORGANIZATION", value); }
            get { return new IfcOrganization(getEntityInstance("IFCORGANIZATION")); } 
            }
        public bool is_IfcPerson { get { return IsADBEntity("IfcPerson"); } }
        public IfcPerson IfcPerson
            {
            set { putEntityInstance("IFCPERSON", value); }
            get { return new IfcPerson(getEntityInstance("IFCPERSON")); } 
            }
        public bool is_IfcPersonAndOrganization { get { return IsADBEntity("IfcPersonAndOrganization"); } }
        public IfcPersonAndOrganization IfcPersonAndOrganization
            {
            set { putEntityInstance("IFCPERSONANDORGANIZATION", value); }
            get { return new IfcPersonAndOrganization(getEntityInstance("IFCPERSONANDORGANIZATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcActorSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcActorSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcActorSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcActorSelect_get() : base(null) { }

        public bool is_IfcOrganization { get { return IsADBEntity("IfcOrganization"); } }
        public IfcOrganization IfcOrganization
            {
            get { return new IfcOrganization(getEntityInstance("IFCORGANIZATION")); }
            }
        public bool is_IfcPerson { get { return IsADBEntity("IfcPerson"); } }
        public IfcPerson IfcPerson
            {
            get { return new IfcPerson(getEntityInstance("IFCPERSON")); }
            }
        public bool is_IfcPersonAndOrganization { get { return IsADBEntity("IfcPersonAndOrganization"); } }
        public IfcPersonAndOrganization IfcPersonAndOrganization
            {
            get { return new IfcPersonAndOrganization(getEntityInstance("IFCPERSONANDORGANIZATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcAppliedValueSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcAppliedValueSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcAppliedValueSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcAppliedValueSelect() : base(null) { }

        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            set { put_double("IFCRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMeasureWithUnit { get { return IsADBEntity("IfcMeasureWithUnit"); } }
        public IfcMeasureWithUnit IfcMeasureWithUnit
            {
            set { putEntityInstance("IFCMEASUREWITHUNIT", value); }
            get { return new IfcMeasureWithUnit(getEntityInstance("IFCMEASUREWITHUNIT")); } 
            }
        public bool is_IfcMonetaryMeasure { get { return IsADBType("IFCMONETARYMEASURE"); } }
        public double? IfcMonetaryMeasure
            {
            set { put_double("IFCMONETARYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMONETARYMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcAppliedValueSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcAppliedValueSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcAppliedValueSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcAppliedValueSelect_get() : base(null) { }

        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMeasureWithUnit { get { return IsADBEntity("IfcMeasureWithUnit"); } }
        public IfcMeasureWithUnit IfcMeasureWithUnit
            {
            get { return new IfcMeasureWithUnit(getEntityInstance("IFCMEASUREWITHUNIT")); }
            }
        public bool is_IfcMonetaryMeasure { get { return IsADBType("IFCMONETARYMEASURE"); } }
        public double? IfcMonetaryMeasure
            {
            get { return get_double("IFCMONETARYMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcAxis2Placement : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcAxis2Placement(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcAxis2Placement(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcAxis2Placement() : base(null) { }

        public bool is_IfcAxis2Placement2D { get { return IsADBEntity("IfcAxis2Placement2D"); } }
        public IfcAxis2Placement2D IfcAxis2Placement2D
            {
            set { putEntityInstance("IFCAXIS2PLACEMENT2D", value); }
            get { return new IfcAxis2Placement2D(getEntityInstance("IFCAXIS2PLACEMENT2D")); } 
            }
        public bool is_IfcAxis2Placement3D { get { return IsADBEntity("IfcAxis2Placement3D"); } }
        public IfcAxis2Placement3D IfcAxis2Placement3D
            {
            set { putEntityInstance("IFCAXIS2PLACEMENT3D", value); }
            get { return new IfcAxis2Placement3D(getEntityInstance("IFCAXIS2PLACEMENT3D")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcAxis2Placement_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcAxis2Placement_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcAxis2Placement_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcAxis2Placement_get() : base(null) { }

        public bool is_IfcAxis2Placement2D { get { return IsADBEntity("IfcAxis2Placement2D"); } }
        public IfcAxis2Placement2D IfcAxis2Placement2D
            {
            get { return new IfcAxis2Placement2D(getEntityInstance("IFCAXIS2PLACEMENT2D")); }
            }
        public bool is_IfcAxis2Placement3D { get { return IsADBEntity("IfcAxis2Placement3D"); } }
        public IfcAxis2Placement3D IfcAxis2Placement3D
            {
            get { return new IfcAxis2Placement3D(getEntityInstance("IFCAXIS2PLACEMENT3D")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcBooleanOperand : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcBooleanOperand(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcBooleanOperand(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcBooleanOperand() : base(null) { }

        public bool is_IfcSolidModel { get { return IsADBEntity("IfcSolidModel"); } }
        public IfcSolidModel IfcSolidModel
            {
            set { putEntityInstance("IFCSOLIDMODEL", value); }
            get { return new IfcSolidModel(getEntityInstance("IFCSOLIDMODEL")); } 
            }
        public bool is_IfcHalfSpaceSolid { get { return IsADBEntity("IfcHalfSpaceSolid"); } }
        public IfcHalfSpaceSolid IfcHalfSpaceSolid
            {
            set { putEntityInstance("IFCHALFSPACESOLID", value); }
            get { return new IfcHalfSpaceSolid(getEntityInstance("IFCHALFSPACESOLID")); } 
            }
        public bool is_IfcBooleanResult { get { return IsADBEntity("IfcBooleanResult"); } }
        public IfcBooleanResult IfcBooleanResult
            {
            set { putEntityInstance("IFCBOOLEANRESULT", value); }
            get { return new IfcBooleanResult(getEntityInstance("IFCBOOLEANRESULT")); } 
            }
        public bool is_IfcCsgPrimitive3D { get { return IsADBEntity("IfcCsgPrimitive3D"); } }
        public IfcCsgPrimitive3D IfcCsgPrimitive3D
            {
            set { putEntityInstance("IFCCSGPRIMITIVE3D", value); }
            get { return new IfcCsgPrimitive3D(getEntityInstance("IFCCSGPRIMITIVE3D")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcBooleanOperand_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcBooleanOperand_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcBooleanOperand_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcBooleanOperand_get() : base(null) { }

        public bool is_IfcSolidModel { get { return IsADBEntity("IfcSolidModel"); } }
        public IfcSolidModel IfcSolidModel
            {
            get { return new IfcSolidModel(getEntityInstance("IFCSOLIDMODEL")); }
            }
        public bool is_IfcHalfSpaceSolid { get { return IsADBEntity("IfcHalfSpaceSolid"); } }
        public IfcHalfSpaceSolid IfcHalfSpaceSolid
            {
            get { return new IfcHalfSpaceSolid(getEntityInstance("IFCHALFSPACESOLID")); }
            }
        public bool is_IfcBooleanResult { get { return IsADBEntity("IfcBooleanResult"); } }
        public IfcBooleanResult IfcBooleanResult
            {
            get { return new IfcBooleanResult(getEntityInstance("IFCBOOLEANRESULT")); }
            }
        public bool is_IfcCsgPrimitive3D { get { return IsADBEntity("IfcCsgPrimitive3D"); } }
        public IfcCsgPrimitive3D IfcCsgPrimitive3D
            {
            get { return new IfcCsgPrimitive3D(getEntityInstance("IFCCSGPRIMITIVE3D")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCharacterStyleSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCharacterStyleSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCharacterStyleSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCharacterStyleSelect() : base(null) { }

        public bool is_IfcTextStyleForDefinedFont { get { return IsADBEntity("IfcTextStyleForDefinedFont"); } }
        public IfcTextStyleForDefinedFont IfcTextStyleForDefinedFont
            {
            set { putEntityInstance("IFCTEXTSTYLEFORDEFINEDFONT", value); }
            get { return new IfcTextStyleForDefinedFont(getEntityInstance("IFCTEXTSTYLEFORDEFINEDFONT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCharacterStyleSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCharacterStyleSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCharacterStyleSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCharacterStyleSelect_get() : base(null) { }

        public bool is_IfcTextStyleForDefinedFont { get { return IsADBEntity("IfcTextStyleForDefinedFont"); } }
        public IfcTextStyleForDefinedFont IfcTextStyleForDefinedFont
            {
            get { return new IfcTextStyleForDefinedFont(getEntityInstance("IFCTEXTSTYLEFORDEFINEDFONT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcClassificationNotationSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcClassificationNotationSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcClassificationNotationSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcClassificationNotationSelect() : base(null) { }

        public bool is_IfcClassificationNotation { get { return IsADBEntity("IfcClassificationNotation"); } }
        public IfcClassificationNotation IfcClassificationNotation
            {
            set { putEntityInstance("IFCCLASSIFICATIONNOTATION", value); }
            get { return new IfcClassificationNotation(getEntityInstance("IFCCLASSIFICATIONNOTATION")); } 
            }
        public bool is_IfcClassificationReference { get { return IsADBEntity("IfcClassificationReference"); } }
        public IfcClassificationReference IfcClassificationReference
            {
            set { putEntityInstance("IFCCLASSIFICATIONREFERENCE", value); }
            get { return new IfcClassificationReference(getEntityInstance("IFCCLASSIFICATIONREFERENCE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcClassificationNotationSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcClassificationNotationSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcClassificationNotationSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcClassificationNotationSelect_get() : base(null) { }

        public bool is_IfcClassificationNotation { get { return IsADBEntity("IfcClassificationNotation"); } }
        public IfcClassificationNotation IfcClassificationNotation
            {
            get { return new IfcClassificationNotation(getEntityInstance("IFCCLASSIFICATIONNOTATION")); }
            }
        public bool is_IfcClassificationReference { get { return IsADBEntity("IfcClassificationReference"); } }
        public IfcClassificationReference IfcClassificationReference
            {
            get { return new IfcClassificationReference(getEntityInstance("IFCCLASSIFICATIONREFERENCE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcColour : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcColour(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcColour(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcColour() : base(null) { }

        public bool is_IfcColourSpecification { get { return IsADBEntity("IfcColourSpecification"); } }
        public IfcColourSpecification IfcColourSpecification
            {
            set { putEntityInstance("IFCCOLOURSPECIFICATION", value); }
            get { return new IfcColourSpecification(getEntityInstance("IFCCOLOURSPECIFICATION")); } 
            }
        public bool is_IfcPreDefinedColour { get { return IsADBEntity("IfcPreDefinedColour"); } }
        public IfcPreDefinedColour IfcPreDefinedColour
            {
            set { putEntityInstance("IFCPREDEFINEDCOLOUR", value); }
            get { return new IfcPreDefinedColour(getEntityInstance("IFCPREDEFINEDCOLOUR")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcColour_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcColour_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcColour_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcColour_get() : base(null) { }

        public bool is_IfcColourSpecification { get { return IsADBEntity("IfcColourSpecification"); } }
        public IfcColourSpecification IfcColourSpecification
            {
            get { return new IfcColourSpecification(getEntityInstance("IFCCOLOURSPECIFICATION")); }
            }
        public bool is_IfcPreDefinedColour { get { return IsADBEntity("IfcPreDefinedColour"); } }
        public IfcPreDefinedColour IfcPreDefinedColour
            {
            get { return new IfcPreDefinedColour(getEntityInstance("IFCPREDEFINEDCOLOUR")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcColourOrFactor : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcColourOrFactor(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcColourOrFactor(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcColourOrFactor() : base(null) { }

        public bool is_IfcColourRgb { get { return IsADBEntity("IfcColourRgb"); } }
        public IfcColourRgb IfcColourRgb
            {
            set { putEntityInstance("IFCCOLOURRGB", value); }
            get { return new IfcColourRgb(getEntityInstance("IFCCOLOURRGB")); } 
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            set { put_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcColourOrFactor_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcColourOrFactor_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcColourOrFactor_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcColourOrFactor_get() : base(null) { }

        public bool is_IfcColourRgb { get { return IsADBEntity("IfcColourRgb"); } }
        public IfcColourRgb IfcColourRgb
            {
            get { return new IfcColourRgb(getEntityInstance("IFCCOLOURRGB")); }
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcConditionCriterionSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcConditionCriterionSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcConditionCriterionSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcConditionCriterionSelect() : base(null) { }

        public bool is_IfcLabel { get { return IsADBType("IFCLABEL"); } }
        public TextValue IfcLabel { 
            set { putTextValue("IFCLABEL", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCLABEL", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcMeasureWithUnit { get { return IsADBEntity("IfcMeasureWithUnit"); } }
        public IfcMeasureWithUnit IfcMeasureWithUnit
            {
            set { putEntityInstance("IFCMEASUREWITHUNIT", value); }
            get { return new IfcMeasureWithUnit(getEntityInstance("IFCMEASUREWITHUNIT")); } 
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcConditionCriterionSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcConditionCriterionSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcConditionCriterionSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcConditionCriterionSelect_get() : base(null) { }

        public bool is_IfcLabel { get { return IsADBType("IFCLABEL"); } }
        public TextValue IfcLabel
            {
            get { return getTextValue("IFCLABEL", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcMeasureWithUnit { get { return IsADBEntity("IfcMeasureWithUnit"); } }
        public IfcMeasureWithUnit IfcMeasureWithUnit
            {
            get { return new IfcMeasureWithUnit(getEntityInstance("IFCMEASUREWITHUNIT")); }
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCsgSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCsgSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCsgSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCsgSelect() : base(null) { }

        public bool is_IfcBooleanResult { get { return IsADBEntity("IfcBooleanResult"); } }
        public IfcBooleanResult IfcBooleanResult
            {
            set { putEntityInstance("IFCBOOLEANRESULT", value); }
            get { return new IfcBooleanResult(getEntityInstance("IFCBOOLEANRESULT")); } 
            }
        public bool is_IfcCsgPrimitive3D { get { return IsADBEntity("IfcCsgPrimitive3D"); } }
        public IfcCsgPrimitive3D IfcCsgPrimitive3D
            {
            set { putEntityInstance("IFCCSGPRIMITIVE3D", value); }
            get { return new IfcCsgPrimitive3D(getEntityInstance("IFCCSGPRIMITIVE3D")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCsgSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCsgSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCsgSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCsgSelect_get() : base(null) { }

        public bool is_IfcBooleanResult { get { return IsADBEntity("IfcBooleanResult"); } }
        public IfcBooleanResult IfcBooleanResult
            {
            get { return new IfcBooleanResult(getEntityInstance("IFCBOOLEANRESULT")); }
            }
        public bool is_IfcCsgPrimitive3D { get { return IsADBEntity("IfcCsgPrimitive3D"); } }
        public IfcCsgPrimitive3D IfcCsgPrimitive3D
            {
            get { return new IfcCsgPrimitive3D(getEntityInstance("IFCCSGPRIMITIVE3D")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveStyleFontSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveStyleFontSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveStyleFontSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveStyleFontSelect() : base(null) { }

        public bool is_IfcPreDefinedCurveFont { get { return IsADBEntity("IfcPreDefinedCurveFont"); } }
        public IfcPreDefinedCurveFont IfcPreDefinedCurveFont
            {
            set { putEntityInstance("IFCPREDEFINEDCURVEFONT", value); }
            get { return new IfcPreDefinedCurveFont(getEntityInstance("IFCPREDEFINEDCURVEFONT")); } 
            }
        public bool is_IfcCurveStyleFont { get { return IsADBEntity("IfcCurveStyleFont"); } }
        public IfcCurveStyleFont IfcCurveStyleFont
            {
            set { putEntityInstance("IFCCURVESTYLEFONT", value); }
            get { return new IfcCurveStyleFont(getEntityInstance("IFCCURVESTYLEFONT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveStyleFontSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveStyleFontSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveStyleFontSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveStyleFontSelect_get() : base(null) { }

        public bool is_IfcPreDefinedCurveFont { get { return IsADBEntity("IfcPreDefinedCurveFont"); } }
        public IfcPreDefinedCurveFont IfcPreDefinedCurveFont
            {
            get { return new IfcPreDefinedCurveFont(getEntityInstance("IFCPREDEFINEDCURVEFONT")); }
            }
        public bool is_IfcCurveStyleFont { get { return IsADBEntity("IfcCurveStyleFont"); } }
        public IfcCurveStyleFont IfcCurveStyleFont
            {
            get { return new IfcCurveStyleFont(getEntityInstance("IFCCURVESTYLEFONT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveFontOrScaledCurveFontSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveFontOrScaledCurveFontSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveFontOrScaledCurveFontSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveFontOrScaledCurveFontSelect() : base(null) { }

        public IfcCurveStyleFontSelect IfcCurveStyleFontSelect { get { return new IfcCurveStyleFontSelect(this); } }
        public bool is_IfcCurveStyleFontAndScaling { get { return IsADBEntity("IfcCurveStyleFontAndScaling"); } }
        public IfcCurveStyleFontAndScaling IfcCurveStyleFontAndScaling
            {
            set { putEntityInstance("IFCCURVESTYLEFONTANDSCALING", value); }
            get { return new IfcCurveStyleFontAndScaling(getEntityInstance("IFCCURVESTYLEFONTANDSCALING")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveFontOrScaledCurveFontSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveFontOrScaledCurveFontSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveFontOrScaledCurveFontSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveFontOrScaledCurveFontSelect_get() : base(null) { }

        public IfcCurveStyleFontSelect_get IfcCurveStyleFontSelect { get { return new IfcCurveStyleFontSelect_get(this); } }
        public bool is_IfcCurveStyleFontAndScaling { get { return IsADBEntity("IfcCurveStyleFontAndScaling"); } }
        public IfcCurveStyleFontAndScaling IfcCurveStyleFontAndScaling
            {
            get { return new IfcCurveStyleFontAndScaling(getEntityInstance("IFCCURVESTYLEFONTANDSCALING")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveOrEdgeCurve : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveOrEdgeCurve(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveOrEdgeCurve(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveOrEdgeCurve() : base(null) { }

        public bool is_IfcBoundedCurve { get { return IsADBEntity("IfcBoundedCurve"); } }
        public IfcBoundedCurve IfcBoundedCurve
            {
            set { putEntityInstance("IFCBOUNDEDCURVE", value); }
            get { return new IfcBoundedCurve(getEntityInstance("IFCBOUNDEDCURVE")); } 
            }
        public bool is_IfcEdgeCurve { get { return IsADBEntity("IfcEdgeCurve"); } }
        public IfcEdgeCurve IfcEdgeCurve
            {
            set { putEntityInstance("IFCEDGECURVE", value); }
            get { return new IfcEdgeCurve(getEntityInstance("IFCEDGECURVE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveOrEdgeCurve_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveOrEdgeCurve_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveOrEdgeCurve_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveOrEdgeCurve_get() : base(null) { }

        public bool is_IfcBoundedCurve { get { return IsADBEntity("IfcBoundedCurve"); } }
        public IfcBoundedCurve IfcBoundedCurve
            {
            get { return new IfcBoundedCurve(getEntityInstance("IFCBOUNDEDCURVE")); }
            }
        public bool is_IfcEdgeCurve { get { return IsADBEntity("IfcEdgeCurve"); } }
        public IfcEdgeCurve IfcEdgeCurve
            {
            get { return new IfcEdgeCurve(getEntityInstance("IFCEDGECURVE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDateTimeSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDateTimeSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDateTimeSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDateTimeSelect() : base(null) { }

        public bool is_IfcCalendarDate { get { return IsADBEntity("IfcCalendarDate"); } }
        public IfcCalendarDate IfcCalendarDate
            {
            set { putEntityInstance("IFCCALENDARDATE", value); }
            get { return new IfcCalendarDate(getEntityInstance("IFCCALENDARDATE")); } 
            }
        public bool is_IfcLocalTime { get { return IsADBEntity("IfcLocalTime"); } }
        public IfcLocalTime IfcLocalTime
            {
            set { putEntityInstance("IFCLOCALTIME", value); }
            get { return new IfcLocalTime(getEntityInstance("IFCLOCALTIME")); } 
            }
        public bool is_IfcDateAndTime { get { return IsADBEntity("IfcDateAndTime"); } }
        public IfcDateAndTime IfcDateAndTime
            {
            set { putEntityInstance("IFCDATEANDTIME", value); }
            get { return new IfcDateAndTime(getEntityInstance("IFCDATEANDTIME")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDateTimeSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDateTimeSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDateTimeSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDateTimeSelect_get() : base(null) { }

        public bool is_IfcCalendarDate { get { return IsADBEntity("IfcCalendarDate"); } }
        public IfcCalendarDate IfcCalendarDate
            {
            get { return new IfcCalendarDate(getEntityInstance("IFCCALENDARDATE")); }
            }
        public bool is_IfcLocalTime { get { return IsADBEntity("IfcLocalTime"); } }
        public IfcLocalTime IfcLocalTime
            {
            get { return new IfcLocalTime(getEntityInstance("IFCLOCALTIME")); }
            }
        public bool is_IfcDateAndTime { get { return IsADBEntity("IfcDateAndTime"); } }
        public IfcDateAndTime IfcDateAndTime
            {
            get { return new IfcDateAndTime(getEntityInstance("IFCDATEANDTIME")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDefinedSymbolSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDefinedSymbolSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDefinedSymbolSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDefinedSymbolSelect() : base(null) { }

        public bool is_IfcPreDefinedSymbol { get { return IsADBEntity("IfcPreDefinedSymbol"); } }
        public IfcPreDefinedSymbol IfcPreDefinedSymbol
            {
            set { putEntityInstance("IFCPREDEFINEDSYMBOL", value); }
            get { return new IfcPreDefinedSymbol(getEntityInstance("IFCPREDEFINEDSYMBOL")); } 
            }
        public bool is_IfcExternallyDefinedSymbol { get { return IsADBEntity("IfcExternallyDefinedSymbol"); } }
        public IfcExternallyDefinedSymbol IfcExternallyDefinedSymbol
            {
            set { putEntityInstance("IFCEXTERNALLYDEFINEDSYMBOL", value); }
            get { return new IfcExternallyDefinedSymbol(getEntityInstance("IFCEXTERNALLYDEFINEDSYMBOL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDefinedSymbolSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDefinedSymbolSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDefinedSymbolSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDefinedSymbolSelect_get() : base(null) { }

        public bool is_IfcPreDefinedSymbol { get { return IsADBEntity("IfcPreDefinedSymbol"); } }
        public IfcPreDefinedSymbol IfcPreDefinedSymbol
            {
            get { return new IfcPreDefinedSymbol(getEntityInstance("IFCPREDEFINEDSYMBOL")); }
            }
        public bool is_IfcExternallyDefinedSymbol { get { return IsADBEntity("IfcExternallyDefinedSymbol"); } }
        public IfcExternallyDefinedSymbol IfcExternallyDefinedSymbol
            {
            get { return new IfcExternallyDefinedSymbol(getEntityInstance("IFCEXTERNALLYDEFINEDSYMBOL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDerivedMeasureValue : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDerivedMeasureValue(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDerivedMeasureValue(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDerivedMeasureValue() : base(null) { }

        public bool is_IfcVolumetricFlowRateMeasure { get { return IsADBType("IFCVOLUMETRICFLOWRATEMEASURE"); } }
        public double? IfcVolumetricFlowRateMeasure
            {
            set { put_double("IFCVOLUMETRICFLOWRATEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCVOLUMETRICFLOWRATEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTimeStamp { get { return IsADBType("IFCTIMESTAMP"); } }
        public IntValue? IfcTimeStamp
            {
            set { put_IntValue("IFCTIMESTAMP", ifcengine.sdaiINTEGER, value); }
            get { return get_IntValue("IFCTIMESTAMP", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcThermalTransmittanceMeasure { get { return IsADBType("IFCTHERMALTRANSMITTANCEMEASURE"); } }
        public double? IfcThermalTransmittanceMeasure
            {
            set { put_double("IFCTHERMALTRANSMITTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMALTRANSMITTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalResistanceMeasure { get { return IsADBType("IFCTHERMALRESISTANCEMEASURE"); } }
        public double? IfcThermalResistanceMeasure
            {
            set { put_double("IFCTHERMALRESISTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMALRESISTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalAdmittanceMeasure { get { return IsADBType("IFCTHERMALADMITTANCEMEASURE"); } }
        public double? IfcThermalAdmittanceMeasure
            {
            set { put_double("IFCTHERMALADMITTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMALADMITTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPressureMeasure { get { return IsADBType("IFCPRESSUREMEASURE"); } }
        public double? IfcPressureMeasure
            {
            set { put_double("IFCPRESSUREMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPRESSUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPowerMeasure { get { return IsADBType("IFCPOWERMEASURE"); } }
        public double? IfcPowerMeasure
            {
            set { put_double("IFCPOWERMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOWERMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassFlowRateMeasure { get { return IsADBType("IFCMASSFLOWRATEMEASURE"); } }
        public double? IfcMassFlowRateMeasure
            {
            set { put_double("IFCMASSFLOWRATEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMASSFLOWRATEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassDensityMeasure { get { return IsADBType("IFCMASSDENSITYMEASURE"); } }
        public double? IfcMassDensityMeasure
            {
            set { put_double("IFCMASSDENSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMASSDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearVelocityMeasure { get { return IsADBType("IFCLINEARVELOCITYMEASURE"); } }
        public double? IfcLinearVelocityMeasure
            {
            set { put_double("IFCLINEARVELOCITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLINEARVELOCITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcKinematicViscosityMeasure { get { return IsADBType("IFCKINEMATICVISCOSITYMEASURE"); } }
        public double? IfcKinematicViscosityMeasure
            {
            set { put_double("IFCKINEMATICVISCOSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCKINEMATICVISCOSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIntegerCountRateMeasure { get { return IsADBType("IFCINTEGERCOUNTRATEMEASURE"); } }
        public IntValue? IfcIntegerCountRateMeasure
            {
            set { put_IntValue("IFCINTEGERCOUNTRATEMEASURE", ifcengine.sdaiINTEGER, value); }
            get { return get_IntValue("IFCINTEGERCOUNTRATEMEASURE", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcHeatFluxDensityMeasure { get { return IsADBType("IFCHEATFLUXDENSITYMEASURE"); } }
        public double? IfcHeatFluxDensityMeasure
            {
            set { put_double("IFCHEATFLUXDENSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCHEATFLUXDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcFrequencyMeasure { get { return IsADBType("IFCFREQUENCYMEASURE"); } }
        public double? IfcFrequencyMeasure
            {
            set { put_double("IFCFREQUENCYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCFREQUENCYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcEnergyMeasure { get { return IsADBType("IFCENERGYMEASURE"); } }
        public double? IfcEnergyMeasure
            {
            set { put_double("IFCENERGYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCENERGYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricVoltageMeasure { get { return IsADBType("IFCELECTRICVOLTAGEMEASURE"); } }
        public double? IfcElectricVoltageMeasure
            {
            set { put_double("IFCELECTRICVOLTAGEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICVOLTAGEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDynamicViscosityMeasure { get { return IsADBType("IFCDYNAMICVISCOSITYMEASURE"); } }
        public double? IfcDynamicViscosityMeasure
            {
            set { put_double("IFCDYNAMICVISCOSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCDYNAMICVISCOSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcCompoundPlaneAngleMeasure { get { return IsADBType("IFCCOMPOUNDPLANEANGLEMEASURE"); } }
        public IfcCompoundPlaneAngleMeasure IfcCompoundPlaneAngleMeasure { get { SdaiAggr aggr = getAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE"); return (new IfcCompoundPlaneAngleMeasureSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_IfcCompoundPlaneAngleMeasure(IEnumerable<IntValue> lst) { SdaiAggr aggr = (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE", aggr); }
        public void put_IfcCompoundPlaneAngleMeasure(IEnumerable lst) { SdaiAggr aggr = (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE", aggr); }
        public bool is_IfcAngularVelocityMeasure { get { return IsADBType("IFCANGULARVELOCITYMEASURE"); } }
        public double? IfcAngularVelocityMeasure
            {
            set { put_double("IFCANGULARVELOCITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCANGULARVELOCITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalConductivityMeasure { get { return IsADBType("IFCTHERMALCONDUCTIVITYMEASURE"); } }
        public double? IfcThermalConductivityMeasure
            {
            set { put_double("IFCTHERMALCONDUCTIVITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMALCONDUCTIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMolecularWeightMeasure { get { return IsADBType("IFCMOLECULARWEIGHTMEASURE"); } }
        public double? IfcMolecularWeightMeasure
            {
            set { put_double("IFCMOLECULARWEIGHTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMOLECULARWEIGHTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcVaporPermeabilityMeasure { get { return IsADBType("IFCVAPORPERMEABILITYMEASURE"); } }
        public double? IfcVaporPermeabilityMeasure
            {
            set { put_double("IFCVAPORPERMEABILITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCVAPORPERMEABILITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMoistureDiffusivityMeasure { get { return IsADBType("IFCMOISTUREDIFFUSIVITYMEASURE"); } }
        public double? IfcMoistureDiffusivityMeasure
            {
            set { put_double("IFCMOISTUREDIFFUSIVITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMOISTUREDIFFUSIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIsothermalMoistureCapacityMeasure { get { return IsADBType("IFCISOTHERMALMOISTURECAPACITYMEASURE"); } }
        public double? IfcIsothermalMoistureCapacityMeasure
            {
            set { put_double("IFCISOTHERMALMOISTURECAPACITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCISOTHERMALMOISTURECAPACITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSpecificHeatCapacityMeasure { get { return IsADBType("IFCSPECIFICHEATCAPACITYMEASURE"); } }
        public double? IfcSpecificHeatCapacityMeasure
            {
            set { put_double("IFCSPECIFICHEATCAPACITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSPECIFICHEATCAPACITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMonetaryMeasure { get { return IsADBType("IFCMONETARYMEASURE"); } }
        public double? IfcMonetaryMeasure
            {
            set { put_double("IFCMONETARYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMONETARYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMagneticFluxDensityMeasure { get { return IsADBType("IFCMAGNETICFLUXDENSITYMEASURE"); } }
        public double? IfcMagneticFluxDensityMeasure
            {
            set { put_double("IFCMAGNETICFLUXDENSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMAGNETICFLUXDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMagneticFluxMeasure { get { return IsADBType("IFCMAGNETICFLUXMEASURE"); } }
        public double? IfcMagneticFluxMeasure
            {
            set { put_double("IFCMAGNETICFLUXMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMAGNETICFLUXMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousFluxMeasure { get { return IsADBType("IFCLUMINOUSFLUXMEASURE"); } }
        public double? IfcLuminousFluxMeasure
            {
            set { put_double("IFCLUMINOUSFLUXMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLUMINOUSFLUXMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcForceMeasure { get { return IsADBType("IFCFORCEMEASURE"); } }
        public double? IfcForceMeasure
            {
            set { put_double("IFCFORCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcInductanceMeasure { get { return IsADBType("IFCINDUCTANCEMEASURE"); } }
        public double? IfcInductanceMeasure
            {
            set { put_double("IFCINDUCTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCINDUCTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIlluminanceMeasure { get { return IsADBType("IFCILLUMINANCEMEASURE"); } }
        public double? IfcIlluminanceMeasure
            {
            set { put_double("IFCILLUMINANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCILLUMINANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricResistanceMeasure { get { return IsADBType("IFCELECTRICRESISTANCEMEASURE"); } }
        public double? IfcElectricResistanceMeasure
            {
            set { put_double("IFCELECTRICRESISTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICRESISTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricConductanceMeasure { get { return IsADBType("IFCELECTRICCONDUCTANCEMEASURE"); } }
        public double? IfcElectricConductanceMeasure
            {
            set { put_double("IFCELECTRICCONDUCTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICCONDUCTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricChargeMeasure { get { return IsADBType("IFCELECTRICCHARGEMEASURE"); } }
        public double? IfcElectricChargeMeasure
            {
            set { put_double("IFCELECTRICCHARGEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICCHARGEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDoseEquivalentMeasure { get { return IsADBType("IFCDOSEEQUIVALENTMEASURE"); } }
        public double? IfcDoseEquivalentMeasure
            {
            set { put_double("IFCDOSEEQUIVALENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCDOSEEQUIVALENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricCapacitanceMeasure { get { return IsADBType("IFCELECTRICCAPACITANCEMEASURE"); } }
        public double? IfcElectricCapacitanceMeasure
            {
            set { put_double("IFCELECTRICCAPACITANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICCAPACITANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAbsorbedDoseMeasure { get { return IsADBType("IFCABSORBEDDOSEMEASURE"); } }
        public double? IfcAbsorbedDoseMeasure
            {
            set { put_double("IFCABSORBEDDOSEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCABSORBEDDOSEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRadioActivityMeasure { get { return IsADBType("IFCRADIOACTIVITYMEASURE"); } }
        public double? IfcRadioActivityMeasure
            {
            set { put_double("IFCRADIOACTIVITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCRADIOACTIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalFrequencyMeasure { get { return IsADBType("IFCROTATIONALFREQUENCYMEASURE"); } }
        public double? IfcRotationalFrequencyMeasure
            {
            set { put_double("IFCROTATIONALFREQUENCYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCROTATIONALFREQUENCYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTorqueMeasure { get { return IsADBType("IFCTORQUEMEASURE"); } }
        public double? IfcTorqueMeasure
            {
            set { put_double("IFCTORQUEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTORQUEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAccelerationMeasure { get { return IsADBType("IFCACCELERATIONMEASURE"); } }
        public double? IfcAccelerationMeasure
            {
            set { put_double("IFCACCELERATIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCACCELERATIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearForceMeasure { get { return IsADBType("IFCLINEARFORCEMEASURE"); } }
        public double? IfcLinearForceMeasure
            {
            set { put_double("IFCLINEARFORCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLINEARFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearStiffnessMeasure { get { return IsADBType("IFCLINEARSTIFFNESSMEASURE"); } }
        public double? IfcLinearStiffnessMeasure
            {
            set { put_double("IFCLINEARSTIFFNESSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLINEARSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfSubgradeReactionMeasure
            {
            set { put_double("IFCMODULUSOFSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMODULUSOFSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfElasticityMeasure { get { return IsADBType("IFCMODULUSOFELASTICITYMEASURE"); } }
        public double? IfcModulusOfElasticityMeasure
            {
            set { put_double("IFCMODULUSOFELASTICITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMODULUSOFELASTICITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMomentOfInertiaMeasure { get { return IsADBType("IFCMOMENTOFINERTIAMEASURE"); } }
        public double? IfcMomentOfInertiaMeasure
            {
            set { put_double("IFCMOMENTOFINERTIAMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMOMENTOFINERTIAMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPlanarForceMeasure { get { return IsADBType("IFCPLANARFORCEMEASURE"); } }
        public double? IfcPlanarForceMeasure
            {
            set { put_double("IFCPLANARFORCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPLANARFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalStiffnessMeasure { get { return IsADBType("IFCROTATIONALSTIFFNESSMEASURE"); } }
        public double? IfcRotationalStiffnessMeasure
            {
            set { put_double("IFCROTATIONALSTIFFNESSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCROTATIONALSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcShearModulusMeasure { get { return IsADBType("IFCSHEARMODULUSMEASURE"); } }
        public double? IfcShearModulusMeasure
            {
            set { put_double("IFCSHEARMODULUSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSHEARMODULUSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearMomentMeasure { get { return IsADBType("IFCLINEARMOMENTMEASURE"); } }
        public double? IfcLinearMomentMeasure
            {
            set { put_double("IFCLINEARMOMENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLINEARMOMENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousIntensityDistributionMeasure { get { return IsADBType("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE"); } }
        public double? IfcLuminousIntensityDistributionMeasure
            {
            set { put_double("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcCurvatureMeasure { get { return IsADBType("IFCCURVATUREMEASURE"); } }
        public double? IfcCurvatureMeasure
            {
            set { put_double("IFCCURVATUREMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCCURVATUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassPerLengthMeasure { get { return IsADBType("IFCMASSPERLENGTHMEASURE"); } }
        public double? IfcMassPerLengthMeasure
            {
            set { put_double("IFCMASSPERLENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMASSPERLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfLinearSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfLinearSubgradeReactionMeasure
            {
            set { put_double("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfRotationalSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfRotationalSubgradeReactionMeasure
            {
            set { put_double("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalMassMeasure { get { return IsADBType("IFCROTATIONALMASSMEASURE"); } }
        public double? IfcRotationalMassMeasure
            {
            set { put_double("IFCROTATIONALMASSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCROTATIONALMASSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSectionalAreaIntegralMeasure { get { return IsADBType("IFCSECTIONALAREAINTEGRALMEASURE"); } }
        public double? IfcSectionalAreaIntegralMeasure
            {
            set { put_double("IFCSECTIONALAREAINTEGRALMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSECTIONALAREAINTEGRALMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSectionModulusMeasure { get { return IsADBType("IFCSECTIONMODULUSMEASURE"); } }
        public double? IfcSectionModulusMeasure
            {
            set { put_double("IFCSECTIONMODULUSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSECTIONMODULUSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTemperatureGradientMeasure { get { return IsADBType("IFCTEMPERATUREGRADIENTMEASURE"); } }
        public double? IfcTemperatureGradientMeasure
            {
            set { put_double("IFCTEMPERATUREGRADIENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTEMPERATUREGRADIENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalExpansionCoefficientMeasure { get { return IsADBType("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE"); } }
        public double? IfcThermalExpansionCoefficientMeasure
            {
            set { put_double("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcWarpingConstantMeasure { get { return IsADBType("IFCWARPINGCONSTANTMEASURE"); } }
        public double? IfcWarpingConstantMeasure
            {
            set { put_double("IFCWARPINGCONSTANTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCWARPINGCONSTANTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcWarpingMomentMeasure { get { return IsADBType("IFCWARPINGMOMENTMEASURE"); } }
        public double? IfcWarpingMomentMeasure
            {
            set { put_double("IFCWARPINGMOMENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCWARPINGMOMENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPowerMeasure { get { return IsADBType("IFCSOUNDPOWERMEASURE"); } }
        public double? IfcSoundPowerMeasure
            {
            set { put_double("IFCSOUNDPOWERMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSOUNDPOWERMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPressureMeasure { get { return IsADBType("IFCSOUNDPRESSUREMEASURE"); } }
        public double? IfcSoundPressureMeasure
            {
            set { put_double("IFCSOUNDPRESSUREMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSOUNDPRESSUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcHeatingValueMeasure { get { return IsADBType("IFCHEATINGVALUEMEASURE"); } }
        public double? IfcHeatingValueMeasure
            {
            set { put_double("IFCHEATINGVALUEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCHEATINGVALUEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPHMeasure { get { return IsADBType("IFCPHMEASURE"); } }
        public double? IfcPHMeasure
            {
            set { put_double("IFCPHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIonConcentrationMeasure { get { return IsADBType("IFCIONCONCENTRATIONMEASURE"); } }
        public double? IfcIonConcentrationMeasure
            {
            set { put_double("IFCIONCONCENTRATIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCIONCONCENTRATIONMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        };


    public class IfcDerivedMeasureValue_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDerivedMeasureValue_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDerivedMeasureValue_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDerivedMeasureValue_get() : base(null) { }

        public bool is_IfcVolumetricFlowRateMeasure { get { return IsADBType("IFCVOLUMETRICFLOWRATEMEASURE"); } }
        public double? IfcVolumetricFlowRateMeasure
            {
            get { return get_double("IFCVOLUMETRICFLOWRATEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTimeStamp { get { return IsADBType("IFCTIMESTAMP"); } }
        public IntValue? IfcTimeStamp
            {
            get { return get_IntValue("IFCTIMESTAMP", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcThermalTransmittanceMeasure { get { return IsADBType("IFCTHERMALTRANSMITTANCEMEASURE"); } }
        public double? IfcThermalTransmittanceMeasure
            {
            get { return get_double("IFCTHERMALTRANSMITTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalResistanceMeasure { get { return IsADBType("IFCTHERMALRESISTANCEMEASURE"); } }
        public double? IfcThermalResistanceMeasure
            {
            get { return get_double("IFCTHERMALRESISTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalAdmittanceMeasure { get { return IsADBType("IFCTHERMALADMITTANCEMEASURE"); } }
        public double? IfcThermalAdmittanceMeasure
            {
            get { return get_double("IFCTHERMALADMITTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPressureMeasure { get { return IsADBType("IFCPRESSUREMEASURE"); } }
        public double? IfcPressureMeasure
            {
            get { return get_double("IFCPRESSUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPowerMeasure { get { return IsADBType("IFCPOWERMEASURE"); } }
        public double? IfcPowerMeasure
            {
            get { return get_double("IFCPOWERMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassFlowRateMeasure { get { return IsADBType("IFCMASSFLOWRATEMEASURE"); } }
        public double? IfcMassFlowRateMeasure
            {
            get { return get_double("IFCMASSFLOWRATEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassDensityMeasure { get { return IsADBType("IFCMASSDENSITYMEASURE"); } }
        public double? IfcMassDensityMeasure
            {
            get { return get_double("IFCMASSDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearVelocityMeasure { get { return IsADBType("IFCLINEARVELOCITYMEASURE"); } }
        public double? IfcLinearVelocityMeasure
            {
            get { return get_double("IFCLINEARVELOCITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcKinematicViscosityMeasure { get { return IsADBType("IFCKINEMATICVISCOSITYMEASURE"); } }
        public double? IfcKinematicViscosityMeasure
            {
            get { return get_double("IFCKINEMATICVISCOSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIntegerCountRateMeasure { get { return IsADBType("IFCINTEGERCOUNTRATEMEASURE"); } }
        public IntValue? IfcIntegerCountRateMeasure
            {
            get { return get_IntValue("IFCINTEGERCOUNTRATEMEASURE", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcHeatFluxDensityMeasure { get { return IsADBType("IFCHEATFLUXDENSITYMEASURE"); } }
        public double? IfcHeatFluxDensityMeasure
            {
            get { return get_double("IFCHEATFLUXDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcFrequencyMeasure { get { return IsADBType("IFCFREQUENCYMEASURE"); } }
        public double? IfcFrequencyMeasure
            {
            get { return get_double("IFCFREQUENCYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcEnergyMeasure { get { return IsADBType("IFCENERGYMEASURE"); } }
        public double? IfcEnergyMeasure
            {
            get { return get_double("IFCENERGYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricVoltageMeasure { get { return IsADBType("IFCELECTRICVOLTAGEMEASURE"); } }
        public double? IfcElectricVoltageMeasure
            {
            get { return get_double("IFCELECTRICVOLTAGEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDynamicViscosityMeasure { get { return IsADBType("IFCDYNAMICVISCOSITYMEASURE"); } }
        public double? IfcDynamicViscosityMeasure
            {
            get { return get_double("IFCDYNAMICVISCOSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcCompoundPlaneAngleMeasure { get { return IsADBType("IFCCOMPOUNDPLANEANGLEMEASURE"); } }
        public IfcCompoundPlaneAngleMeasure IfcCompoundPlaneAngleMeasure { get { SdaiAggr aggr = getAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE"); return (new IfcCompoundPlaneAngleMeasureSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public bool is_IfcAngularVelocityMeasure { get { return IsADBType("IFCANGULARVELOCITYMEASURE"); } }
        public double? IfcAngularVelocityMeasure
            {
            get { return get_double("IFCANGULARVELOCITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalConductivityMeasure { get { return IsADBType("IFCTHERMALCONDUCTIVITYMEASURE"); } }
        public double? IfcThermalConductivityMeasure
            {
            get { return get_double("IFCTHERMALCONDUCTIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMolecularWeightMeasure { get { return IsADBType("IFCMOLECULARWEIGHTMEASURE"); } }
        public double? IfcMolecularWeightMeasure
            {
            get { return get_double("IFCMOLECULARWEIGHTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcVaporPermeabilityMeasure { get { return IsADBType("IFCVAPORPERMEABILITYMEASURE"); } }
        public double? IfcVaporPermeabilityMeasure
            {
            get { return get_double("IFCVAPORPERMEABILITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMoistureDiffusivityMeasure { get { return IsADBType("IFCMOISTUREDIFFUSIVITYMEASURE"); } }
        public double? IfcMoistureDiffusivityMeasure
            {
            get { return get_double("IFCMOISTUREDIFFUSIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIsothermalMoistureCapacityMeasure { get { return IsADBType("IFCISOTHERMALMOISTURECAPACITYMEASURE"); } }
        public double? IfcIsothermalMoistureCapacityMeasure
            {
            get { return get_double("IFCISOTHERMALMOISTURECAPACITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSpecificHeatCapacityMeasure { get { return IsADBType("IFCSPECIFICHEATCAPACITYMEASURE"); } }
        public double? IfcSpecificHeatCapacityMeasure
            {
            get { return get_double("IFCSPECIFICHEATCAPACITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMonetaryMeasure { get { return IsADBType("IFCMONETARYMEASURE"); } }
        public double? IfcMonetaryMeasure
            {
            get { return get_double("IFCMONETARYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMagneticFluxDensityMeasure { get { return IsADBType("IFCMAGNETICFLUXDENSITYMEASURE"); } }
        public double? IfcMagneticFluxDensityMeasure
            {
            get { return get_double("IFCMAGNETICFLUXDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMagneticFluxMeasure { get { return IsADBType("IFCMAGNETICFLUXMEASURE"); } }
        public double? IfcMagneticFluxMeasure
            {
            get { return get_double("IFCMAGNETICFLUXMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousFluxMeasure { get { return IsADBType("IFCLUMINOUSFLUXMEASURE"); } }
        public double? IfcLuminousFluxMeasure
            {
            get { return get_double("IFCLUMINOUSFLUXMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcForceMeasure { get { return IsADBType("IFCFORCEMEASURE"); } }
        public double? IfcForceMeasure
            {
            get { return get_double("IFCFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcInductanceMeasure { get { return IsADBType("IFCINDUCTANCEMEASURE"); } }
        public double? IfcInductanceMeasure
            {
            get { return get_double("IFCINDUCTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIlluminanceMeasure { get { return IsADBType("IFCILLUMINANCEMEASURE"); } }
        public double? IfcIlluminanceMeasure
            {
            get { return get_double("IFCILLUMINANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricResistanceMeasure { get { return IsADBType("IFCELECTRICRESISTANCEMEASURE"); } }
        public double? IfcElectricResistanceMeasure
            {
            get { return get_double("IFCELECTRICRESISTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricConductanceMeasure { get { return IsADBType("IFCELECTRICCONDUCTANCEMEASURE"); } }
        public double? IfcElectricConductanceMeasure
            {
            get { return get_double("IFCELECTRICCONDUCTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricChargeMeasure { get { return IsADBType("IFCELECTRICCHARGEMEASURE"); } }
        public double? IfcElectricChargeMeasure
            {
            get { return get_double("IFCELECTRICCHARGEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDoseEquivalentMeasure { get { return IsADBType("IFCDOSEEQUIVALENTMEASURE"); } }
        public double? IfcDoseEquivalentMeasure
            {
            get { return get_double("IFCDOSEEQUIVALENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricCapacitanceMeasure { get { return IsADBType("IFCELECTRICCAPACITANCEMEASURE"); } }
        public double? IfcElectricCapacitanceMeasure
            {
            get { return get_double("IFCELECTRICCAPACITANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAbsorbedDoseMeasure { get { return IsADBType("IFCABSORBEDDOSEMEASURE"); } }
        public double? IfcAbsorbedDoseMeasure
            {
            get { return get_double("IFCABSORBEDDOSEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRadioActivityMeasure { get { return IsADBType("IFCRADIOACTIVITYMEASURE"); } }
        public double? IfcRadioActivityMeasure
            {
            get { return get_double("IFCRADIOACTIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalFrequencyMeasure { get { return IsADBType("IFCROTATIONALFREQUENCYMEASURE"); } }
        public double? IfcRotationalFrequencyMeasure
            {
            get { return get_double("IFCROTATIONALFREQUENCYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTorqueMeasure { get { return IsADBType("IFCTORQUEMEASURE"); } }
        public double? IfcTorqueMeasure
            {
            get { return get_double("IFCTORQUEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAccelerationMeasure { get { return IsADBType("IFCACCELERATIONMEASURE"); } }
        public double? IfcAccelerationMeasure
            {
            get { return get_double("IFCACCELERATIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearForceMeasure { get { return IsADBType("IFCLINEARFORCEMEASURE"); } }
        public double? IfcLinearForceMeasure
            {
            get { return get_double("IFCLINEARFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearStiffnessMeasure { get { return IsADBType("IFCLINEARSTIFFNESSMEASURE"); } }
        public double? IfcLinearStiffnessMeasure
            {
            get { return get_double("IFCLINEARSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfSubgradeReactionMeasure
            {
            get { return get_double("IFCMODULUSOFSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfElasticityMeasure { get { return IsADBType("IFCMODULUSOFELASTICITYMEASURE"); } }
        public double? IfcModulusOfElasticityMeasure
            {
            get { return get_double("IFCMODULUSOFELASTICITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMomentOfInertiaMeasure { get { return IsADBType("IFCMOMENTOFINERTIAMEASURE"); } }
        public double? IfcMomentOfInertiaMeasure
            {
            get { return get_double("IFCMOMENTOFINERTIAMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPlanarForceMeasure { get { return IsADBType("IFCPLANARFORCEMEASURE"); } }
        public double? IfcPlanarForceMeasure
            {
            get { return get_double("IFCPLANARFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalStiffnessMeasure { get { return IsADBType("IFCROTATIONALSTIFFNESSMEASURE"); } }
        public double? IfcRotationalStiffnessMeasure
            {
            get { return get_double("IFCROTATIONALSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcShearModulusMeasure { get { return IsADBType("IFCSHEARMODULUSMEASURE"); } }
        public double? IfcShearModulusMeasure
            {
            get { return get_double("IFCSHEARMODULUSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearMomentMeasure { get { return IsADBType("IFCLINEARMOMENTMEASURE"); } }
        public double? IfcLinearMomentMeasure
            {
            get { return get_double("IFCLINEARMOMENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousIntensityDistributionMeasure { get { return IsADBType("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE"); } }
        public double? IfcLuminousIntensityDistributionMeasure
            {
            get { return get_double("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcCurvatureMeasure { get { return IsADBType("IFCCURVATUREMEASURE"); } }
        public double? IfcCurvatureMeasure
            {
            get { return get_double("IFCCURVATUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassPerLengthMeasure { get { return IsADBType("IFCMASSPERLENGTHMEASURE"); } }
        public double? IfcMassPerLengthMeasure
            {
            get { return get_double("IFCMASSPERLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfLinearSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfLinearSubgradeReactionMeasure
            {
            get { return get_double("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfRotationalSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfRotationalSubgradeReactionMeasure
            {
            get { return get_double("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalMassMeasure { get { return IsADBType("IFCROTATIONALMASSMEASURE"); } }
        public double? IfcRotationalMassMeasure
            {
            get { return get_double("IFCROTATIONALMASSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSectionalAreaIntegralMeasure { get { return IsADBType("IFCSECTIONALAREAINTEGRALMEASURE"); } }
        public double? IfcSectionalAreaIntegralMeasure
            {
            get { return get_double("IFCSECTIONALAREAINTEGRALMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSectionModulusMeasure { get { return IsADBType("IFCSECTIONMODULUSMEASURE"); } }
        public double? IfcSectionModulusMeasure
            {
            get { return get_double("IFCSECTIONMODULUSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTemperatureGradientMeasure { get { return IsADBType("IFCTEMPERATUREGRADIENTMEASURE"); } }
        public double? IfcTemperatureGradientMeasure
            {
            get { return get_double("IFCTEMPERATUREGRADIENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalExpansionCoefficientMeasure { get { return IsADBType("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE"); } }
        public double? IfcThermalExpansionCoefficientMeasure
            {
            get { return get_double("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcWarpingConstantMeasure { get { return IsADBType("IFCWARPINGCONSTANTMEASURE"); } }
        public double? IfcWarpingConstantMeasure
            {
            get { return get_double("IFCWARPINGCONSTANTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcWarpingMomentMeasure { get { return IsADBType("IFCWARPINGMOMENTMEASURE"); } }
        public double? IfcWarpingMomentMeasure
            {
            get { return get_double("IFCWARPINGMOMENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPowerMeasure { get { return IsADBType("IFCSOUNDPOWERMEASURE"); } }
        public double? IfcSoundPowerMeasure
            {
            get { return get_double("IFCSOUNDPOWERMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPressureMeasure { get { return IsADBType("IFCSOUNDPRESSUREMEASURE"); } }
        public double? IfcSoundPressureMeasure
            {
            get { return get_double("IFCSOUNDPRESSUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcHeatingValueMeasure { get { return IsADBType("IFCHEATINGVALUEMEASURE"); } }
        public double? IfcHeatingValueMeasure
            {
            get { return get_double("IFCHEATINGVALUEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPHMeasure { get { return IsADBType("IFCPHMEASURE"); } }
        public double? IfcPHMeasure
            {
            get { return get_double("IFCPHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIonConcentrationMeasure { get { return IsADBType("IFCIONCONCENTRATIONMEASURE"); } }
        public double? IfcIonConcentrationMeasure
            {
            get { return get_double("IFCIONCONCENTRATIONMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        };


    public class IfcDocumentSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDocumentSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDocumentSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDocumentSelect() : base(null) { }

        public bool is_IfcDocumentReference { get { return IsADBEntity("IfcDocumentReference"); } }
        public IfcDocumentReference IfcDocumentReference
            {
            set { putEntityInstance("IFCDOCUMENTREFERENCE", value); }
            get { return new IfcDocumentReference(getEntityInstance("IFCDOCUMENTREFERENCE")); } 
            }
        public bool is_IfcDocumentInformation { get { return IsADBEntity("IfcDocumentInformation"); } }
        public IfcDocumentInformation IfcDocumentInformation
            {
            set { putEntityInstance("IFCDOCUMENTINFORMATION", value); }
            get { return new IfcDocumentInformation(getEntityInstance("IFCDOCUMENTINFORMATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDocumentSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDocumentSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDocumentSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDocumentSelect_get() : base(null) { }

        public bool is_IfcDocumentReference { get { return IsADBEntity("IfcDocumentReference"); } }
        public IfcDocumentReference IfcDocumentReference
            {
            get { return new IfcDocumentReference(getEntityInstance("IFCDOCUMENTREFERENCE")); }
            }
        public bool is_IfcDocumentInformation { get { return IsADBEntity("IfcDocumentInformation"); } }
        public IfcDocumentInformation IfcDocumentInformation
            {
            get { return new IfcDocumentInformation(getEntityInstance("IFCDOCUMENTINFORMATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDraughtingCalloutElement : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDraughtingCalloutElement(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDraughtingCalloutElement(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDraughtingCalloutElement() : base(null) { }

        public bool is_IfcAnnotationCurveOccurrence { get { return IsADBEntity("IfcAnnotationCurveOccurrence"); } }
        public IfcAnnotationCurveOccurrence IfcAnnotationCurveOccurrence
            {
            set { putEntityInstance("IFCANNOTATIONCURVEOCCURRENCE", value); }
            get { return new IfcAnnotationCurveOccurrence(getEntityInstance("IFCANNOTATIONCURVEOCCURRENCE")); } 
            }
        public bool is_IfcAnnotationTextOccurrence { get { return IsADBEntity("IfcAnnotationTextOccurrence"); } }
        public IfcAnnotationTextOccurrence IfcAnnotationTextOccurrence
            {
            set { putEntityInstance("IFCANNOTATIONTEXTOCCURRENCE", value); }
            get { return new IfcAnnotationTextOccurrence(getEntityInstance("IFCANNOTATIONTEXTOCCURRENCE")); } 
            }
        public bool is_IfcAnnotationSymbolOccurrence { get { return IsADBEntity("IfcAnnotationSymbolOccurrence"); } }
        public IfcAnnotationSymbolOccurrence IfcAnnotationSymbolOccurrence
            {
            set { putEntityInstance("IFCANNOTATIONSYMBOLOCCURRENCE", value); }
            get { return new IfcAnnotationSymbolOccurrence(getEntityInstance("IFCANNOTATIONSYMBOLOCCURRENCE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDraughtingCalloutElement_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDraughtingCalloutElement_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDraughtingCalloutElement_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDraughtingCalloutElement_get() : base(null) { }

        public bool is_IfcAnnotationCurveOccurrence { get { return IsADBEntity("IfcAnnotationCurveOccurrence"); } }
        public IfcAnnotationCurveOccurrence IfcAnnotationCurveOccurrence
            {
            get { return new IfcAnnotationCurveOccurrence(getEntityInstance("IFCANNOTATIONCURVEOCCURRENCE")); }
            }
        public bool is_IfcAnnotationTextOccurrence { get { return IsADBEntity("IfcAnnotationTextOccurrence"); } }
        public IfcAnnotationTextOccurrence IfcAnnotationTextOccurrence
            {
            get { return new IfcAnnotationTextOccurrence(getEntityInstance("IFCANNOTATIONTEXTOCCURRENCE")); }
            }
        public bool is_IfcAnnotationSymbolOccurrence { get { return IsADBEntity("IfcAnnotationSymbolOccurrence"); } }
        public IfcAnnotationSymbolOccurrence IfcAnnotationSymbolOccurrence
            {
            get { return new IfcAnnotationSymbolOccurrence(getEntityInstance("IFCANNOTATIONSYMBOLOCCURRENCE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcFillAreaStyleTileShapeSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcFillAreaStyleTileShapeSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcFillAreaStyleTileShapeSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcFillAreaStyleTileShapeSelect() : base(null) { }

        public bool is_IfcFillAreaStyleTileSymbolWithStyle { get { return IsADBEntity("IfcFillAreaStyleTileSymbolWithStyle"); } }
        public IfcFillAreaStyleTileSymbolWithStyle IfcFillAreaStyleTileSymbolWithStyle
            {
            set { putEntityInstance("IFCFILLAREASTYLETILESYMBOLWITHSTYLE", value); }
            get { return new IfcFillAreaStyleTileSymbolWithStyle(getEntityInstance("IFCFILLAREASTYLETILESYMBOLWITHSTYLE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcFillAreaStyleTileShapeSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcFillAreaStyleTileShapeSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcFillAreaStyleTileShapeSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcFillAreaStyleTileShapeSelect_get() : base(null) { }

        public bool is_IfcFillAreaStyleTileSymbolWithStyle { get { return IsADBEntity("IfcFillAreaStyleTileSymbolWithStyle"); } }
        public IfcFillAreaStyleTileSymbolWithStyle IfcFillAreaStyleTileSymbolWithStyle
            {
            get { return new IfcFillAreaStyleTileSymbolWithStyle(getEntityInstance("IFCFILLAREASTYLETILESYMBOLWITHSTYLE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcFillStyleSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcFillStyleSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcFillStyleSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcFillStyleSelect() : base(null) { }

        public bool is_IfcFillAreaStyleHatching { get { return IsADBEntity("IfcFillAreaStyleHatching"); } }
        public IfcFillAreaStyleHatching IfcFillAreaStyleHatching
            {
            set { putEntityInstance("IFCFILLAREASTYLEHATCHING", value); }
            get { return new IfcFillAreaStyleHatching(getEntityInstance("IFCFILLAREASTYLEHATCHING")); } 
            }
        public bool is_IfcFillAreaStyleTiles { get { return IsADBEntity("IfcFillAreaStyleTiles"); } }
        public IfcFillAreaStyleTiles IfcFillAreaStyleTiles
            {
            set { putEntityInstance("IFCFILLAREASTYLETILES", value); }
            get { return new IfcFillAreaStyleTiles(getEntityInstance("IFCFILLAREASTYLETILES")); } 
            }
        public IfcColour IfcColour { get { return new IfcColour(this); } }
        public bool is_IfcExternallyDefinedHatchStyle { get { return IsADBEntity("IfcExternallyDefinedHatchStyle"); } }
        public IfcExternallyDefinedHatchStyle IfcExternallyDefinedHatchStyle
            {
            set { putEntityInstance("IFCEXTERNALLYDEFINEDHATCHSTYLE", value); }
            get { return new IfcExternallyDefinedHatchStyle(getEntityInstance("IFCEXTERNALLYDEFINEDHATCHSTYLE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcFillStyleSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcFillStyleSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcFillStyleSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcFillStyleSelect_get() : base(null) { }

        public bool is_IfcFillAreaStyleHatching { get { return IsADBEntity("IfcFillAreaStyleHatching"); } }
        public IfcFillAreaStyleHatching IfcFillAreaStyleHatching
            {
            get { return new IfcFillAreaStyleHatching(getEntityInstance("IFCFILLAREASTYLEHATCHING")); }
            }
        public bool is_IfcFillAreaStyleTiles { get { return IsADBEntity("IfcFillAreaStyleTiles"); } }
        public IfcFillAreaStyleTiles IfcFillAreaStyleTiles
            {
            get { return new IfcFillAreaStyleTiles(getEntityInstance("IFCFILLAREASTYLETILES")); }
            }
        public IfcColour_get IfcColour { get { return new IfcColour_get(this); } }
        public bool is_IfcExternallyDefinedHatchStyle { get { return IsADBEntity("IfcExternallyDefinedHatchStyle"); } }
        public IfcExternallyDefinedHatchStyle IfcExternallyDefinedHatchStyle
            {
            get { return new IfcExternallyDefinedHatchStyle(getEntityInstance("IFCEXTERNALLYDEFINEDHATCHSTYLE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcGeometricSetSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcGeometricSetSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcGeometricSetSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcGeometricSetSelect() : base(null) { }

        public bool is_IfcPoint { get { return IsADBEntity("IfcPoint"); } }
        public IfcPoint IfcPoint
            {
            set { putEntityInstance("IFCPOINT", value); }
            get { return new IfcPoint(getEntityInstance("IFCPOINT")); } 
            }
        public bool is_IfcCurve { get { return IsADBEntity("IfcCurve"); } }
        public IfcCurve IfcCurve
            {
            set { putEntityInstance("IFCCURVE", value); }
            get { return new IfcCurve(getEntityInstance("IFCCURVE")); } 
            }
        public bool is_IfcSurface { get { return IsADBEntity("IfcSurface"); } }
        public IfcSurface IfcSurface
            {
            set { putEntityInstance("IFCSURFACE", value); }
            get { return new IfcSurface(getEntityInstance("IFCSURFACE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcGeometricSetSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcGeometricSetSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcGeometricSetSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcGeometricSetSelect_get() : base(null) { }

        public bool is_IfcPoint { get { return IsADBEntity("IfcPoint"); } }
        public IfcPoint IfcPoint
            {
            get { return new IfcPoint(getEntityInstance("IFCPOINT")); }
            }
        public bool is_IfcCurve { get { return IsADBEntity("IfcCurve"); } }
        public IfcCurve IfcCurve
            {
            get { return new IfcCurve(getEntityInstance("IFCCURVE")); }
            }
        public bool is_IfcSurface { get { return IsADBEntity("IfcSurface"); } }
        public IfcSurface IfcSurface
            {
            get { return new IfcSurface(getEntityInstance("IFCSURFACE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcHatchLineDistanceSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcHatchLineDistanceSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcHatchLineDistanceSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcHatchLineDistanceSelect() : base(null) { }

        public bool is_IfcOneDirectionRepeatFactor { get { return IsADBEntity("IfcOneDirectionRepeatFactor"); } }
        public IfcOneDirectionRepeatFactor IfcOneDirectionRepeatFactor
            {
            set { putEntityInstance("IFCONEDIRECTIONREPEATFACTOR", value); }
            get { return new IfcOneDirectionRepeatFactor(getEntityInstance("IFCONEDIRECTIONREPEATFACTOR")); } 
            }
        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            set { put_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcHatchLineDistanceSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcHatchLineDistanceSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcHatchLineDistanceSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcHatchLineDistanceSelect_get() : base(null) { }

        public bool is_IfcOneDirectionRepeatFactor { get { return IsADBEntity("IfcOneDirectionRepeatFactor"); } }
        public IfcOneDirectionRepeatFactor IfcOneDirectionRepeatFactor
            {
            get { return new IfcOneDirectionRepeatFactor(getEntityInstance("IFCONEDIRECTIONREPEATFACTOR")); }
            }
        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcLayeredItem : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLayeredItem(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLayeredItem(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLayeredItem() : base(null) { }

        public bool is_IfcRepresentationItem { get { return IsADBEntity("IfcRepresentationItem"); } }
        public IfcRepresentationItem IfcRepresentationItem
            {
            set { putEntityInstance("IFCREPRESENTATIONITEM", value); }
            get { return new IfcRepresentationItem(getEntityInstance("IFCREPRESENTATIONITEM")); } 
            }
        public bool is_IfcRepresentation { get { return IsADBEntity("IfcRepresentation"); } }
        public IfcRepresentation IfcRepresentation
            {
            set { putEntityInstance("IFCREPRESENTATION", value); }
            get { return new IfcRepresentation(getEntityInstance("IFCREPRESENTATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcLayeredItem_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLayeredItem_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLayeredItem_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLayeredItem_get() : base(null) { }

        public bool is_IfcRepresentationItem { get { return IsADBEntity("IfcRepresentationItem"); } }
        public IfcRepresentationItem IfcRepresentationItem
            {
            get { return new IfcRepresentationItem(getEntityInstance("IFCREPRESENTATIONITEM")); }
            }
        public bool is_IfcRepresentation { get { return IsADBEntity("IfcRepresentation"); } }
        public IfcRepresentation IfcRepresentation
            {
            get { return new IfcRepresentation(getEntityInstance("IFCREPRESENTATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcLibrarySelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLibrarySelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLibrarySelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLibrarySelect() : base(null) { }

        public bool is_IfcLibraryReference { get { return IsADBEntity("IfcLibraryReference"); } }
        public IfcLibraryReference IfcLibraryReference
            {
            set { putEntityInstance("IFCLIBRARYREFERENCE", value); }
            get { return new IfcLibraryReference(getEntityInstance("IFCLIBRARYREFERENCE")); } 
            }
        public bool is_IfcLibraryInformation { get { return IsADBEntity("IfcLibraryInformation"); } }
        public IfcLibraryInformation IfcLibraryInformation
            {
            set { putEntityInstance("IFCLIBRARYINFORMATION", value); }
            get { return new IfcLibraryInformation(getEntityInstance("IFCLIBRARYINFORMATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcLibrarySelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLibrarySelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLibrarySelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLibrarySelect_get() : base(null) { }

        public bool is_IfcLibraryReference { get { return IsADBEntity("IfcLibraryReference"); } }
        public IfcLibraryReference IfcLibraryReference
            {
            get { return new IfcLibraryReference(getEntityInstance("IFCLIBRARYREFERENCE")); }
            }
        public bool is_IfcLibraryInformation { get { return IsADBEntity("IfcLibraryInformation"); } }
        public IfcLibraryInformation IfcLibraryInformation
            {
            get { return new IfcLibraryInformation(getEntityInstance("IFCLIBRARYINFORMATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcLightDistributionDataSourceSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLightDistributionDataSourceSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLightDistributionDataSourceSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLightDistributionDataSourceSelect() : base(null) { }

        public bool is_IfcExternalReference { get { return IsADBEntity("IfcExternalReference"); } }
        public IfcExternalReference IfcExternalReference
            {
            set { putEntityInstance("IFCEXTERNALREFERENCE", value); }
            get { return new IfcExternalReference(getEntityInstance("IFCEXTERNALREFERENCE")); } 
            }
        public bool is_IfcLightIntensityDistribution { get { return IsADBEntity("IfcLightIntensityDistribution"); } }
        public IfcLightIntensityDistribution IfcLightIntensityDistribution
            {
            set { putEntityInstance("IFCLIGHTINTENSITYDISTRIBUTION", value); }
            get { return new IfcLightIntensityDistribution(getEntityInstance("IFCLIGHTINTENSITYDISTRIBUTION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcLightDistributionDataSourceSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLightDistributionDataSourceSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLightDistributionDataSourceSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLightDistributionDataSourceSelect_get() : base(null) { }

        public bool is_IfcExternalReference { get { return IsADBEntity("IfcExternalReference"); } }
        public IfcExternalReference IfcExternalReference
            {
            get { return new IfcExternalReference(getEntityInstance("IFCEXTERNALREFERENCE")); }
            }
        public bool is_IfcLightIntensityDistribution { get { return IsADBEntity("IfcLightIntensityDistribution"); } }
        public IfcLightIntensityDistribution IfcLightIntensityDistribution
            {
            get { return new IfcLightIntensityDistribution(getEntityInstance("IFCLIGHTINTENSITYDISTRIBUTION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcMaterialSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMaterialSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMaterialSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMaterialSelect() : base(null) { }

        public bool is_IfcMaterial { get { return IsADBEntity("IfcMaterial"); } }
        public IfcMaterial IfcMaterial
            {
            set { putEntityInstance("IFCMATERIAL", value); }
            get { return new IfcMaterial(getEntityInstance("IFCMATERIAL")); } 
            }
        public bool is_IfcMaterialList { get { return IsADBEntity("IfcMaterialList"); } }
        public IfcMaterialList IfcMaterialList
            {
            set { putEntityInstance("IFCMATERIALLIST", value); }
            get { return new IfcMaterialList(getEntityInstance("IFCMATERIALLIST")); } 
            }
        public bool is_IfcMaterialLayerSetUsage { get { return IsADBEntity("IfcMaterialLayerSetUsage"); } }
        public IfcMaterialLayerSetUsage IfcMaterialLayerSetUsage
            {
            set { putEntityInstance("IFCMATERIALLAYERSETUSAGE", value); }
            get { return new IfcMaterialLayerSetUsage(getEntityInstance("IFCMATERIALLAYERSETUSAGE")); } 
            }
        public bool is_IfcMaterialLayerSet { get { return IsADBEntity("IfcMaterialLayerSet"); } }
        public IfcMaterialLayerSet IfcMaterialLayerSet
            {
            set { putEntityInstance("IFCMATERIALLAYERSET", value); }
            get { return new IfcMaterialLayerSet(getEntityInstance("IFCMATERIALLAYERSET")); } 
            }
        public bool is_IfcMaterialLayer { get { return IsADBEntity("IfcMaterialLayer"); } }
        public IfcMaterialLayer IfcMaterialLayer
            {
            set { putEntityInstance("IFCMATERIALLAYER", value); }
            get { return new IfcMaterialLayer(getEntityInstance("IFCMATERIALLAYER")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcMaterialSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMaterialSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMaterialSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMaterialSelect_get() : base(null) { }

        public bool is_IfcMaterial { get { return IsADBEntity("IfcMaterial"); } }
        public IfcMaterial IfcMaterial
            {
            get { return new IfcMaterial(getEntityInstance("IFCMATERIAL")); }
            }
        public bool is_IfcMaterialList { get { return IsADBEntity("IfcMaterialList"); } }
        public IfcMaterialList IfcMaterialList
            {
            get { return new IfcMaterialList(getEntityInstance("IFCMATERIALLIST")); }
            }
        public bool is_IfcMaterialLayerSetUsage { get { return IsADBEntity("IfcMaterialLayerSetUsage"); } }
        public IfcMaterialLayerSetUsage IfcMaterialLayerSetUsage
            {
            get { return new IfcMaterialLayerSetUsage(getEntityInstance("IFCMATERIALLAYERSETUSAGE")); }
            }
        public bool is_IfcMaterialLayerSet { get { return IsADBEntity("IfcMaterialLayerSet"); } }
        public IfcMaterialLayerSet IfcMaterialLayerSet
            {
            get { return new IfcMaterialLayerSet(getEntityInstance("IFCMATERIALLAYERSET")); }
            }
        public bool is_IfcMaterialLayer { get { return IsADBEntity("IfcMaterialLayer"); } }
        public IfcMaterialLayer IfcMaterialLayer
            {
            get { return new IfcMaterialLayer(getEntityInstance("IFCMATERIALLAYER")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcMeasureValue : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMeasureValue(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMeasureValue(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMeasureValue() : base(null) { }

        public bool is_IfcVolumeMeasure { get { return IsADBType("IFCVOLUMEMEASURE"); } }
        public double? IfcVolumeMeasure
            {
            set { put_double("IFCVOLUMEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCVOLUMEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTimeMeasure { get { return IsADBType("IFCTIMEMEASURE"); } }
        public double? IfcTimeMeasure
            {
            set { put_double("IFCTIMEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTIMEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermodynamicTemperatureMeasure { get { return IsADBType("IFCTHERMODYNAMICTEMPERATUREMEASURE"); } }
        public double? IfcThermodynamicTemperatureMeasure
            {
            set { put_double("IFCTHERMODYNAMICTEMPERATUREMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMODYNAMICTEMPERATUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSolidAngleMeasure { get { return IsADBType("IFCSOLIDANGLEMEASURE"); } }
        public double? IfcSolidAngleMeasure
            {
            set { put_double("IFCSOLIDANGLEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSOLIDANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveRatioMeasure { get { return IsADBType("IFCPOSITIVERATIOMEASURE"); } }
        public double? IfcPositiveRatioMeasure
            {
            set { put_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            set { put_double("IFCRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositivePlaneAngleMeasure { get { return IsADBType("IFCPOSITIVEPLANEANGLEMEASURE"); } }
        public double? IfcPositivePlaneAngleMeasure
            {
            set { put_double("IFCPOSITIVEPLANEANGLEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVEPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPlaneAngleMeasure { get { return IsADBType("IFCPLANEANGLEMEASURE"); } }
        public double? IfcPlaneAngleMeasure
            {
            set { put_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcParameterValue { get { return IsADBType("IFCPARAMETERVALUE"); } }
        public double? IfcParameterValue
            {
            set { put_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNumericMeasure { get { return IsADBType("IFCNUMERICMEASURE"); } }
        public double? IfcNumericMeasure
            {
            set { put_double("IFCNUMERICMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCNUMERICMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassMeasure { get { return IsADBType("IFCMASSMEASURE"); } }
        public double? IfcMassMeasure
            {
            set { put_double("IFCMASSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMASSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            set { put_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            set { put_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricCurrentMeasure { get { return IsADBType("IFCELECTRICCURRENTMEASURE"); } }
        public double? IfcElectricCurrentMeasure
            {
            set { put_double("IFCELECTRICCURRENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICCURRENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDescriptiveMeasure { get { return IsADBType("IFCDESCRIPTIVEMEASURE"); } }
        public TextValue IfcDescriptiveMeasure { 
            set { putTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcCountMeasure { get { return IsADBType("IFCCOUNTMEASURE"); } }
        public double? IfcCountMeasure
            {
            set { put_double("IFCCOUNTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCCOUNTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcContextDependentMeasure { get { return IsADBType("IFCCONTEXTDEPENDENTMEASURE"); } }
        public double? IfcContextDependentMeasure
            {
            set { put_double("IFCCONTEXTDEPENDENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCCONTEXTDEPENDENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAreaMeasure { get { return IsADBType("IFCAREAMEASURE"); } }
        public double? IfcAreaMeasure
            {
            set { put_double("IFCAREAMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCAREAMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAmountOfSubstanceMeasure { get { return IsADBType("IFCAMOUNTOFSUBSTANCEMEASURE"); } }
        public double? IfcAmountOfSubstanceMeasure
            {
            set { put_double("IFCAMOUNTOFSUBSTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCAMOUNTOFSUBSTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousIntensityMeasure { get { return IsADBType("IFCLUMINOUSINTENSITYMEASURE"); } }
        public double? IfcLuminousIntensityMeasure
            {
            set { put_double("IFCLUMINOUSINTENSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLUMINOUSINTENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            set { put_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcComplexNumber { get { return IsADBType("IFCCOMPLEXNUMBER"); } }
        public IfcComplexNumber IfcComplexNumber { get { SdaiAggr aggr = getAggrValue("IFCCOMPLEXNUMBER"); return (new IfcComplexNumberSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_IfcComplexNumber(IEnumerable<double> lst) { SdaiAggr aggr = (new IfcComplexNumberSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCCOMPLEXNUMBER", aggr); }
        public void put_IfcComplexNumber(IEnumerable lst) { SdaiAggr aggr = (new IfcComplexNumberSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCCOMPLEXNUMBER", aggr); }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class IfcMeasureValue_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMeasureValue_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMeasureValue_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMeasureValue_get() : base(null) { }

        public bool is_IfcVolumeMeasure { get { return IsADBType("IFCVOLUMEMEASURE"); } }
        public double? IfcVolumeMeasure
            {
            get { return get_double("IFCVOLUMEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTimeMeasure { get { return IsADBType("IFCTIMEMEASURE"); } }
        public double? IfcTimeMeasure
            {
            get { return get_double("IFCTIMEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermodynamicTemperatureMeasure { get { return IsADBType("IFCTHERMODYNAMICTEMPERATUREMEASURE"); } }
        public double? IfcThermodynamicTemperatureMeasure
            {
            get { return get_double("IFCTHERMODYNAMICTEMPERATUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSolidAngleMeasure { get { return IsADBType("IFCSOLIDANGLEMEASURE"); } }
        public double? IfcSolidAngleMeasure
            {
            get { return get_double("IFCSOLIDANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveRatioMeasure { get { return IsADBType("IFCPOSITIVERATIOMEASURE"); } }
        public double? IfcPositiveRatioMeasure
            {
            get { return get_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositivePlaneAngleMeasure { get { return IsADBType("IFCPOSITIVEPLANEANGLEMEASURE"); } }
        public double? IfcPositivePlaneAngleMeasure
            {
            get { return get_double("IFCPOSITIVEPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPlaneAngleMeasure { get { return IsADBType("IFCPLANEANGLEMEASURE"); } }
        public double? IfcPlaneAngleMeasure
            {
            get { return get_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcParameterValue { get { return IsADBType("IFCPARAMETERVALUE"); } }
        public double? IfcParameterValue
            {
            get { return get_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNumericMeasure { get { return IsADBType("IFCNUMERICMEASURE"); } }
        public double? IfcNumericMeasure
            {
            get { return get_double("IFCNUMERICMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassMeasure { get { return IsADBType("IFCMASSMEASURE"); } }
        public double? IfcMassMeasure
            {
            get { return get_double("IFCMASSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricCurrentMeasure { get { return IsADBType("IFCELECTRICCURRENTMEASURE"); } }
        public double? IfcElectricCurrentMeasure
            {
            get { return get_double("IFCELECTRICCURRENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDescriptiveMeasure { get { return IsADBType("IFCDESCRIPTIVEMEASURE"); } }
        public TextValue IfcDescriptiveMeasure
            {
            get { return getTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcCountMeasure { get { return IsADBType("IFCCOUNTMEASURE"); } }
        public double? IfcCountMeasure
            {
            get { return get_double("IFCCOUNTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcContextDependentMeasure { get { return IsADBType("IFCCONTEXTDEPENDENTMEASURE"); } }
        public double? IfcContextDependentMeasure
            {
            get { return get_double("IFCCONTEXTDEPENDENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAreaMeasure { get { return IsADBType("IFCAREAMEASURE"); } }
        public double? IfcAreaMeasure
            {
            get { return get_double("IFCAREAMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAmountOfSubstanceMeasure { get { return IsADBType("IFCAMOUNTOFSUBSTANCEMEASURE"); } }
        public double? IfcAmountOfSubstanceMeasure
            {
            get { return get_double("IFCAMOUNTOFSUBSTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousIntensityMeasure { get { return IsADBType("IFCLUMINOUSINTENSITYMEASURE"); } }
        public double? IfcLuminousIntensityMeasure
            {
            get { return get_double("IFCLUMINOUSINTENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcComplexNumber { get { return IsADBType("IFCCOMPLEXNUMBER"); } }
        public IfcComplexNumber IfcComplexNumber { get { SdaiAggr aggr = getAggrValue("IFCCOMPLEXNUMBER"); return (new IfcComplexNumberSerializer()).FromSdaiAggr(m_instance, aggr); } }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class IfcMetricValueSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMetricValueSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMetricValueSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMetricValueSelect() : base(null) { }

        public IfcDateTimeSelect IfcDateTimeSelect { get { return new IfcDateTimeSelect(this); } }
        public bool is_IfcMeasureWithUnit { get { return IsADBEntity("IfcMeasureWithUnit"); } }
        public IfcMeasureWithUnit IfcMeasureWithUnit
            {
            set { putEntityInstance("IFCMEASUREWITHUNIT", value); }
            get { return new IfcMeasureWithUnit(getEntityInstance("IFCMEASUREWITHUNIT")); } 
            }
        public bool is_IfcTable { get { return IsADBEntity("IfcTable"); } }
        public IfcTable IfcTable
            {
            set { putEntityInstance("IFCTABLE", value); }
            get { return new IfcTable(getEntityInstance("IFCTABLE")); } 
            }
        public bool is_IfcText { get { return IsADBType("IFCTEXT"); } }
        public TextValue IfcText { 
            set { putTextValue("IFCTEXT", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCTEXT", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcTimeSeries { get { return IsADBEntity("IfcTimeSeries"); } }
        public IfcTimeSeries IfcTimeSeries
            {
            set { putEntityInstance("IFCTIMESERIES", value); }
            get { return new IfcTimeSeries(getEntityInstance("IFCTIMESERIES")); } 
            }
        public bool is_IfcCostValue { get { return IsADBEntity("IfcCostValue"); } }
        public IfcCostValue IfcCostValue
            {
            set { putEntityInstance("IFCCOSTVALUE", value); }
            get { return new IfcCostValue(getEntityInstance("IFCCOSTVALUE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class IfcMetricValueSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMetricValueSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMetricValueSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMetricValueSelect_get() : base(null) { }

        public IfcDateTimeSelect_get IfcDateTimeSelect { get { return new IfcDateTimeSelect_get(this); } }
        public bool is_IfcMeasureWithUnit { get { return IsADBEntity("IfcMeasureWithUnit"); } }
        public IfcMeasureWithUnit IfcMeasureWithUnit
            {
            get { return new IfcMeasureWithUnit(getEntityInstance("IFCMEASUREWITHUNIT")); }
            }
        public bool is_IfcTable { get { return IsADBEntity("IfcTable"); } }
        public IfcTable IfcTable
            {
            get { return new IfcTable(getEntityInstance("IFCTABLE")); }
            }
        public bool is_IfcText { get { return IsADBType("IFCTEXT"); } }
        public TextValue IfcText
            {
            get { return getTextValue("IFCTEXT", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcTimeSeries { get { return IsADBEntity("IfcTimeSeries"); } }
        public IfcTimeSeries IfcTimeSeries
            {
            get { return new IfcTimeSeries(getEntityInstance("IFCTIMESERIES")); }
            }
        public bool is_IfcCostValue { get { return IsADBEntity("IfcCostValue"); } }
        public IfcCostValue IfcCostValue
            {
            get { return new IfcCostValue(getEntityInstance("IFCCOSTVALUE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class IfcObjectReferenceSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcObjectReferenceSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcObjectReferenceSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcObjectReferenceSelect() : base(null) { }

        public bool is_IfcMaterial { get { return IsADBEntity("IfcMaterial"); } }
        public IfcMaterial IfcMaterial
            {
            set { putEntityInstance("IFCMATERIAL", value); }
            get { return new IfcMaterial(getEntityInstance("IFCMATERIAL")); } 
            }
        public bool is_IfcPerson { get { return IsADBEntity("IfcPerson"); } }
        public IfcPerson IfcPerson
            {
            set { putEntityInstance("IFCPERSON", value); }
            get { return new IfcPerson(getEntityInstance("IFCPERSON")); } 
            }
        public bool is_IfcDateAndTime { get { return IsADBEntity("IfcDateAndTime"); } }
        public IfcDateAndTime IfcDateAndTime
            {
            set { putEntityInstance("IFCDATEANDTIME", value); }
            get { return new IfcDateAndTime(getEntityInstance("IFCDATEANDTIME")); } 
            }
        public bool is_IfcMaterialList { get { return IsADBEntity("IfcMaterialList"); } }
        public IfcMaterialList IfcMaterialList
            {
            set { putEntityInstance("IFCMATERIALLIST", value); }
            get { return new IfcMaterialList(getEntityInstance("IFCMATERIALLIST")); } 
            }
        public bool is_IfcOrganization { get { return IsADBEntity("IfcOrganization"); } }
        public IfcOrganization IfcOrganization
            {
            set { putEntityInstance("IFCORGANIZATION", value); }
            get { return new IfcOrganization(getEntityInstance("IFCORGANIZATION")); } 
            }
        public bool is_IfcCalendarDate { get { return IsADBEntity("IfcCalendarDate"); } }
        public IfcCalendarDate IfcCalendarDate
            {
            set { putEntityInstance("IFCCALENDARDATE", value); }
            get { return new IfcCalendarDate(getEntityInstance("IFCCALENDARDATE")); } 
            }
        public bool is_IfcLocalTime { get { return IsADBEntity("IfcLocalTime"); } }
        public IfcLocalTime IfcLocalTime
            {
            set { putEntityInstance("IFCLOCALTIME", value); }
            get { return new IfcLocalTime(getEntityInstance("IFCLOCALTIME")); } 
            }
        public bool is_IfcPersonAndOrganization { get { return IsADBEntity("IfcPersonAndOrganization"); } }
        public IfcPersonAndOrganization IfcPersonAndOrganization
            {
            set { putEntityInstance("IFCPERSONANDORGANIZATION", value); }
            get { return new IfcPersonAndOrganization(getEntityInstance("IFCPERSONANDORGANIZATION")); } 
            }
        public bool is_IfcMaterialLayer { get { return IsADBEntity("IfcMaterialLayer"); } }
        public IfcMaterialLayer IfcMaterialLayer
            {
            set { putEntityInstance("IFCMATERIALLAYER", value); }
            get { return new IfcMaterialLayer(getEntityInstance("IFCMATERIALLAYER")); } 
            }
        public bool is_IfcExternalReference { get { return IsADBEntity("IfcExternalReference"); } }
        public IfcExternalReference IfcExternalReference
            {
            set { putEntityInstance("IFCEXTERNALREFERENCE", value); }
            get { return new IfcExternalReference(getEntityInstance("IFCEXTERNALREFERENCE")); } 
            }
        public bool is_IfcTimeSeries { get { return IsADBEntity("IfcTimeSeries"); } }
        public IfcTimeSeries IfcTimeSeries
            {
            set { putEntityInstance("IFCTIMESERIES", value); }
            get { return new IfcTimeSeries(getEntityInstance("IFCTIMESERIES")); } 
            }
        public bool is_IfcAddress { get { return IsADBEntity("IfcAddress"); } }
        public IfcAddress IfcAddress
            {
            set { putEntityInstance("IFCADDRESS", value); }
            get { return new IfcAddress(getEntityInstance("IFCADDRESS")); } 
            }
        public bool is_IfcAppliedValue { get { return IsADBEntity("IfcAppliedValue"); } }
        public IfcAppliedValue IfcAppliedValue
            {
            set { putEntityInstance("IFCAPPLIEDVALUE", value); }
            get { return new IfcAppliedValue(getEntityInstance("IFCAPPLIEDVALUE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcObjectReferenceSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcObjectReferenceSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcObjectReferenceSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcObjectReferenceSelect_get() : base(null) { }

        public bool is_IfcMaterial { get { return IsADBEntity("IfcMaterial"); } }
        public IfcMaterial IfcMaterial
            {
            get { return new IfcMaterial(getEntityInstance("IFCMATERIAL")); }
            }
        public bool is_IfcPerson { get { return IsADBEntity("IfcPerson"); } }
        public IfcPerson IfcPerson
            {
            get { return new IfcPerson(getEntityInstance("IFCPERSON")); }
            }
        public bool is_IfcDateAndTime { get { return IsADBEntity("IfcDateAndTime"); } }
        public IfcDateAndTime IfcDateAndTime
            {
            get { return new IfcDateAndTime(getEntityInstance("IFCDATEANDTIME")); }
            }
        public bool is_IfcMaterialList { get { return IsADBEntity("IfcMaterialList"); } }
        public IfcMaterialList IfcMaterialList
            {
            get { return new IfcMaterialList(getEntityInstance("IFCMATERIALLIST")); }
            }
        public bool is_IfcOrganization { get { return IsADBEntity("IfcOrganization"); } }
        public IfcOrganization IfcOrganization
            {
            get { return new IfcOrganization(getEntityInstance("IFCORGANIZATION")); }
            }
        public bool is_IfcCalendarDate { get { return IsADBEntity("IfcCalendarDate"); } }
        public IfcCalendarDate IfcCalendarDate
            {
            get { return new IfcCalendarDate(getEntityInstance("IFCCALENDARDATE")); }
            }
        public bool is_IfcLocalTime { get { return IsADBEntity("IfcLocalTime"); } }
        public IfcLocalTime IfcLocalTime
            {
            get { return new IfcLocalTime(getEntityInstance("IFCLOCALTIME")); }
            }
        public bool is_IfcPersonAndOrganization { get { return IsADBEntity("IfcPersonAndOrganization"); } }
        public IfcPersonAndOrganization IfcPersonAndOrganization
            {
            get { return new IfcPersonAndOrganization(getEntityInstance("IFCPERSONANDORGANIZATION")); }
            }
        public bool is_IfcMaterialLayer { get { return IsADBEntity("IfcMaterialLayer"); } }
        public IfcMaterialLayer IfcMaterialLayer
            {
            get { return new IfcMaterialLayer(getEntityInstance("IFCMATERIALLAYER")); }
            }
        public bool is_IfcExternalReference { get { return IsADBEntity("IfcExternalReference"); } }
        public IfcExternalReference IfcExternalReference
            {
            get { return new IfcExternalReference(getEntityInstance("IFCEXTERNALREFERENCE")); }
            }
        public bool is_IfcTimeSeries { get { return IsADBEntity("IfcTimeSeries"); } }
        public IfcTimeSeries IfcTimeSeries
            {
            get { return new IfcTimeSeries(getEntityInstance("IFCTIMESERIES")); }
            }
        public bool is_IfcAddress { get { return IsADBEntity("IfcAddress"); } }
        public IfcAddress IfcAddress
            {
            get { return new IfcAddress(getEntityInstance("IFCADDRESS")); }
            }
        public bool is_IfcAppliedValue { get { return IsADBEntity("IfcAppliedValue"); } }
        public IfcAppliedValue IfcAppliedValue
            {
            get { return new IfcAppliedValue(getEntityInstance("IFCAPPLIEDVALUE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcOrientationSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcOrientationSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcOrientationSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcOrientationSelect() : base(null) { }

        public bool is_IfcPlaneAngleMeasure { get { return IsADBType("IFCPLANEANGLEMEASURE"); } }
        public double? IfcPlaneAngleMeasure
            {
            set { put_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDirection { get { return IsADBEntity("IfcDirection"); } }
        public IfcDirection IfcDirection
            {
            set { putEntityInstance("IFCDIRECTION", value); }
            get { return new IfcDirection(getEntityInstance("IFCDIRECTION")); } 
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcOrientationSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcOrientationSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcOrientationSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcOrientationSelect_get() : base(null) { }

        public bool is_IfcPlaneAngleMeasure { get { return IsADBType("IFCPLANEANGLEMEASURE"); } }
        public double? IfcPlaneAngleMeasure
            {
            get { return get_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDirection { get { return IsADBEntity("IfcDirection"); } }
        public IfcDirection IfcDirection
            {
            get { return new IfcDirection(getEntityInstance("IFCDIRECTION")); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcPointOrVertexPoint : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcPointOrVertexPoint(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcPointOrVertexPoint(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcPointOrVertexPoint() : base(null) { }

        public bool is_IfcPoint { get { return IsADBEntity("IfcPoint"); } }
        public IfcPoint IfcPoint
            {
            set { putEntityInstance("IFCPOINT", value); }
            get { return new IfcPoint(getEntityInstance("IFCPOINT")); } 
            }
        public bool is_IfcVertexPoint { get { return IsADBEntity("IfcVertexPoint"); } }
        public IfcVertexPoint IfcVertexPoint
            {
            set { putEntityInstance("IFCVERTEXPOINT", value); }
            get { return new IfcVertexPoint(getEntityInstance("IFCVERTEXPOINT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcPointOrVertexPoint_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcPointOrVertexPoint_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcPointOrVertexPoint_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcPointOrVertexPoint_get() : base(null) { }

        public bool is_IfcPoint { get { return IsADBEntity("IfcPoint"); } }
        public IfcPoint IfcPoint
            {
            get { return new IfcPoint(getEntityInstance("IFCPOINT")); }
            }
        public bool is_IfcVertexPoint { get { return IsADBEntity("IfcVertexPoint"); } }
        public IfcVertexPoint IfcVertexPoint
            {
            get { return new IfcVertexPoint(getEntityInstance("IFCVERTEXPOINT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcPresentationStyleSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcPresentationStyleSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcPresentationStyleSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcPresentationStyleSelect() : base(null) { }

        public bool is_IfcNullStyle { get { return IsADBType("IFCNULLSTYLE"); } }
        public IfcNullStyle? IfcNullStyle 
            { 
            set {
                if (value.HasValue)
                    {
                    TextValue val = EnumString<IfcNullStyle>.FromValue(value.Value, EnumNames.IfcNullStyle_); putEnumerationValue("IFCNULLSTYLE", val);
                    }
                else
                    {
                    Debug.Assert(false);
                    }
                }
            get { 
                int ind = getEnumerationIndex("IFCNULLSTYLE", EnumNames.IfcNullStyle_); 
                return EnumValue<IfcNullStyle>.FromIndex(ind); 
                } 
            }
        public bool is_IfcCurveStyle { get { return IsADBEntity("IfcCurveStyle"); } }
        public IfcCurveStyle IfcCurveStyle
            {
            set { putEntityInstance("IFCCURVESTYLE", value); }
            get { return new IfcCurveStyle(getEntityInstance("IFCCURVESTYLE")); } 
            }
        public bool is_IfcSymbolStyle { get { return IsADBEntity("IfcSymbolStyle"); } }
        public IfcSymbolStyle IfcSymbolStyle
            {
            set { putEntityInstance("IFCSYMBOLSTYLE", value); }
            get { return new IfcSymbolStyle(getEntityInstance("IFCSYMBOLSTYLE")); } 
            }
        public bool is_IfcFillAreaStyle { get { return IsADBEntity("IfcFillAreaStyle"); } }
        public IfcFillAreaStyle IfcFillAreaStyle
            {
            set { putEntityInstance("IFCFILLAREASTYLE", value); }
            get { return new IfcFillAreaStyle(getEntityInstance("IFCFILLAREASTYLE")); } 
            }
        public bool is_IfcTextStyle { get { return IsADBEntity("IfcTextStyle"); } }
        public IfcTextStyle IfcTextStyle
            {
            set { putEntityInstance("IFCTEXTSTYLE", value); }
            get { return new IfcTextStyle(getEntityInstance("IFCTEXTSTYLE")); } 
            }
        public bool is_IfcSurfaceStyle { get { return IsADBEntity("IfcSurfaceStyle"); } }
        public IfcSurfaceStyle IfcSurfaceStyle
            {
            set { putEntityInstance("IFCSURFACESTYLE", value); }
            get { return new IfcSurfaceStyle(getEntityInstance("IFCSURFACESTYLE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcPresentationStyleSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcPresentationStyleSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcPresentationStyleSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcPresentationStyleSelect_get() : base(null) { }

        public bool is_IfcNullStyle { get { return IsADBType("IFCNULLSTYLE"); } }
        public IfcNullStyle? IfcNullStyle
            {
            get
                {
                int ind = getEnumerationIndex("IFCNULLSTYLE", EnumNames.IfcNullStyle_);
                return EnumValue<IfcNullStyle>.FromIndex(ind);
                }
            }
        public bool is_IfcCurveStyle { get { return IsADBEntity("IfcCurveStyle"); } }
        public IfcCurveStyle IfcCurveStyle
            {
            get { return new IfcCurveStyle(getEntityInstance("IFCCURVESTYLE")); }
            }
        public bool is_IfcSymbolStyle { get { return IsADBEntity("IfcSymbolStyle"); } }
        public IfcSymbolStyle IfcSymbolStyle
            {
            get { return new IfcSymbolStyle(getEntityInstance("IFCSYMBOLSTYLE")); }
            }
        public bool is_IfcFillAreaStyle { get { return IsADBEntity("IfcFillAreaStyle"); } }
        public IfcFillAreaStyle IfcFillAreaStyle
            {
            get { return new IfcFillAreaStyle(getEntityInstance("IFCFILLAREASTYLE")); }
            }
        public bool is_IfcTextStyle { get { return IsADBEntity("IfcTextStyle"); } }
        public IfcTextStyle IfcTextStyle
            {
            get { return new IfcTextStyle(getEntityInstance("IFCTEXTSTYLE")); }
            }
        public bool is_IfcSurfaceStyle { get { return IsADBEntity("IfcSurfaceStyle"); } }
        public IfcSurfaceStyle IfcSurfaceStyle
            {
            get { return new IfcSurfaceStyle(getEntityInstance("IFCSURFACESTYLE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcShell : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcShell(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcShell(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcShell() : base(null) { }

        public bool is_IfcClosedShell { get { return IsADBEntity("IfcClosedShell"); } }
        public IfcClosedShell IfcClosedShell
            {
            set { putEntityInstance("IFCCLOSEDSHELL", value); }
            get { return new IfcClosedShell(getEntityInstance("IFCCLOSEDSHELL")); } 
            }
        public bool is_IfcOpenShell { get { return IsADBEntity("IfcOpenShell"); } }
        public IfcOpenShell IfcOpenShell
            {
            set { putEntityInstance("IFCOPENSHELL", value); }
            get { return new IfcOpenShell(getEntityInstance("IFCOPENSHELL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcShell_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcShell_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcShell_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcShell_get() : base(null) { }

        public bool is_IfcClosedShell { get { return IsADBEntity("IfcClosedShell"); } }
        public IfcClosedShell IfcClosedShell
            {
            get { return new IfcClosedShell(getEntityInstance("IFCCLOSEDSHELL")); }
            }
        public bool is_IfcOpenShell { get { return IsADBEntity("IfcOpenShell"); } }
        public IfcOpenShell IfcOpenShell
            {
            get { return new IfcOpenShell(getEntityInstance("IFCOPENSHELL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSimpleValue : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSimpleValue(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSimpleValue(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSimpleValue() : base(null) { }

        public bool is_IfcInteger { get { return IsADBType("IFCINTEGER"); } }
        public IntValue? IfcInteger
            {
            set { put_IntValue("IFCINTEGER", ifcengine.sdaiINTEGER, value); }
            get { return get_IntValue("IFCINTEGER", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcReal { get { return IsADBType("IFCREAL"); } }
        public double? IfcReal
            {
            set { put_double("IFCREAL", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCREAL", ifcengine.sdaiREAL); }
            }
        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            set { put_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN, value); }
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcIdentifier { get { return IsADBType("IFCIDENTIFIER"); } }
        public TextValue IfcIdentifier { 
            set { putTextValue("IFCIDENTIFIER", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCIDENTIFIER", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcText { get { return IsADBType("IFCTEXT"); } }
        public TextValue IfcText { 
            set { putTextValue("IFCTEXT", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCTEXT", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcLabel { get { return IsADBType("IFCLABEL"); } }
        public TextValue IfcLabel { 
            set { putTextValue("IFCLABEL", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCLABEL", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcLogical { get { return IsADBType("IFCLOGICAL"); } }
        public LOGICAL_VALUE? IfcLogical 
            { 
            set {
                if (value.HasValue)
                    {
                    TextValue val = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); putEnumerationValue("IFCLOGICAL", val);
                    }
                else
                    {
                    Debug.Assert(false);
                    }
                }
            get { 
                int ind = getEnumerationIndex("IFCLOGICAL", EnumNames.LOGICAL_VALUE_); 
                return EnumValue<LOGICAL_VALUE>.FromIndex(ind); 
                } 
            }

        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class IfcSimpleValue_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSimpleValue_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSimpleValue_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSimpleValue_get() : base(null) { }

        public bool is_IfcInteger { get { return IsADBType("IFCINTEGER"); } }
        public IntValue? IfcInteger
            {
            get { return get_IntValue("IFCINTEGER", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcReal { get { return IsADBType("IFCREAL"); } }
        public double? IfcReal
            {
            get { return get_double("IFCREAL", ifcengine.sdaiREAL); }
            }
        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcIdentifier { get { return IsADBType("IFCIDENTIFIER"); } }
        public TextValue IfcIdentifier
            {
            get { return getTextValue("IFCIDENTIFIER", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcText { get { return IsADBType("IFCTEXT"); } }
        public TextValue IfcText
            {
            get { return getTextValue("IFCTEXT", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcLabel { get { return IsADBType("IFCLABEL"); } }
        public TextValue IfcLabel
            {
            get { return getTextValue("IFCLABEL", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcLogical { get { return IsADBType("IFCLOGICAL"); } }
        public LOGICAL_VALUE? IfcLogical
            {
            get
                {
                int ind = getEnumerationIndex("IFCLOGICAL", EnumNames.LOGICAL_VALUE_);
                return EnumValue<LOGICAL_VALUE>.FromIndex(ind);
                }
            }

        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class IfcSizeSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSizeSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSizeSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSizeSelect() : base(null) { }

        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            set { put_double("IFCRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            set { put_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDescriptiveMeasure { get { return IsADBType("IFCDESCRIPTIVEMEASURE"); } }
        public TextValue IfcDescriptiveMeasure { 
            set { putTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            set { put_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            set { put_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveRatioMeasure { get { return IsADBType("IFCPOSITIVERATIOMEASURE"); } }
        public double? IfcPositiveRatioMeasure
            {
            set { put_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class IfcSizeSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSizeSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSizeSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSizeSelect_get() : base(null) { }

        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDescriptiveMeasure { get { return IsADBType("IFCDESCRIPTIVEMEASURE"); } }
        public TextValue IfcDescriptiveMeasure
            {
            get { return getTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveRatioMeasure { get { return IsADBType("IFCPOSITIVERATIOMEASURE"); } }
        public double? IfcPositiveRatioMeasure
            {
            get { return get_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class IfcSpecularHighlightSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSpecularHighlightSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSpecularHighlightSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSpecularHighlightSelect() : base(null) { }

        public bool is_IfcSpecularExponent { get { return IsADBType("IFCSPECULAREXPONENT"); } }
        public double? IfcSpecularExponent
            {
            set { put_double("IFCSPECULAREXPONENT", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSPECULAREXPONENT", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSpecularRoughness { get { return IsADBType("IFCSPECULARROUGHNESS"); } }
        public double? IfcSpecularRoughness
            {
            set { put_double("IFCSPECULARROUGHNESS", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSPECULARROUGHNESS", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcSpecularHighlightSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSpecularHighlightSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSpecularHighlightSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSpecularHighlightSelect_get() : base(null) { }

        public bool is_IfcSpecularExponent { get { return IsADBType("IFCSPECULAREXPONENT"); } }
        public double? IfcSpecularExponent
            {
            get { return get_double("IFCSPECULAREXPONENT", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSpecularRoughness { get { return IsADBType("IFCSPECULARROUGHNESS"); } }
        public double? IfcSpecularRoughness
            {
            get { return get_double("IFCSPECULARROUGHNESS", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcStructuralActivityAssignmentSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcStructuralActivityAssignmentSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcStructuralActivityAssignmentSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcStructuralActivityAssignmentSelect() : base(null) { }

        public bool is_IfcStructuralItem { get { return IsADBEntity("IfcStructuralItem"); } }
        public IfcStructuralItem IfcStructuralItem
            {
            set { putEntityInstance("IFCSTRUCTURALITEM", value); }
            get { return new IfcStructuralItem(getEntityInstance("IFCSTRUCTURALITEM")); } 
            }
        public bool is_IfcElement { get { return IsADBEntity("IfcElement"); } }
        public IfcElement IfcElement
            {
            set { putEntityInstance("IFCELEMENT", value); }
            get { return new IfcElement(getEntityInstance("IFCELEMENT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcStructuralActivityAssignmentSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcStructuralActivityAssignmentSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcStructuralActivityAssignmentSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcStructuralActivityAssignmentSelect_get() : base(null) { }

        public bool is_IfcStructuralItem { get { return IsADBEntity("IfcStructuralItem"); } }
        public IfcStructuralItem IfcStructuralItem
            {
            get { return new IfcStructuralItem(getEntityInstance("IFCSTRUCTURALITEM")); }
            }
        public bool is_IfcElement { get { return IsADBEntity("IfcElement"); } }
        public IfcElement IfcElement
            {
            get { return new IfcElement(getEntityInstance("IFCELEMENT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSurfaceOrFaceSurface : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSurfaceOrFaceSurface(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSurfaceOrFaceSurface(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSurfaceOrFaceSurface() : base(null) { }

        public bool is_IfcSurface { get { return IsADBEntity("IfcSurface"); } }
        public IfcSurface IfcSurface
            {
            set { putEntityInstance("IFCSURFACE", value); }
            get { return new IfcSurface(getEntityInstance("IFCSURFACE")); } 
            }
        public bool is_IfcFaceSurface { get { return IsADBEntity("IfcFaceSurface"); } }
        public IfcFaceSurface IfcFaceSurface
            {
            set { putEntityInstance("IFCFACESURFACE", value); }
            get { return new IfcFaceSurface(getEntityInstance("IFCFACESURFACE")); } 
            }
        public bool is_IfcFaceBasedSurfaceModel { get { return IsADBEntity("IfcFaceBasedSurfaceModel"); } }
        public IfcFaceBasedSurfaceModel IfcFaceBasedSurfaceModel
            {
            set { putEntityInstance("IFCFACEBASEDSURFACEMODEL", value); }
            get { return new IfcFaceBasedSurfaceModel(getEntityInstance("IFCFACEBASEDSURFACEMODEL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSurfaceOrFaceSurface_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSurfaceOrFaceSurface_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSurfaceOrFaceSurface_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSurfaceOrFaceSurface_get() : base(null) { }

        public bool is_IfcSurface { get { return IsADBEntity("IfcSurface"); } }
        public IfcSurface IfcSurface
            {
            get { return new IfcSurface(getEntityInstance("IFCSURFACE")); }
            }
        public bool is_IfcFaceSurface { get { return IsADBEntity("IfcFaceSurface"); } }
        public IfcFaceSurface IfcFaceSurface
            {
            get { return new IfcFaceSurface(getEntityInstance("IFCFACESURFACE")); }
            }
        public bool is_IfcFaceBasedSurfaceModel { get { return IsADBEntity("IfcFaceBasedSurfaceModel"); } }
        public IfcFaceBasedSurfaceModel IfcFaceBasedSurfaceModel
            {
            get { return new IfcFaceBasedSurfaceModel(getEntityInstance("IFCFACEBASEDSURFACEMODEL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSurfaceStyleElementSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSurfaceStyleElementSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSurfaceStyleElementSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSurfaceStyleElementSelect() : base(null) { }

        public bool is_IfcSurfaceStyleShading { get { return IsADBEntity("IfcSurfaceStyleShading"); } }
        public IfcSurfaceStyleShading IfcSurfaceStyleShading
            {
            set { putEntityInstance("IFCSURFACESTYLESHADING", value); }
            get { return new IfcSurfaceStyleShading(getEntityInstance("IFCSURFACESTYLESHADING")); } 
            }
        public bool is_IfcSurfaceStyleLighting { get { return IsADBEntity("IfcSurfaceStyleLighting"); } }
        public IfcSurfaceStyleLighting IfcSurfaceStyleLighting
            {
            set { putEntityInstance("IFCSURFACESTYLELIGHTING", value); }
            get { return new IfcSurfaceStyleLighting(getEntityInstance("IFCSURFACESTYLELIGHTING")); } 
            }
        public bool is_IfcSurfaceStyleWithTextures { get { return IsADBEntity("IfcSurfaceStyleWithTextures"); } }
        public IfcSurfaceStyleWithTextures IfcSurfaceStyleWithTextures
            {
            set { putEntityInstance("IFCSURFACESTYLEWITHTEXTURES", value); }
            get { return new IfcSurfaceStyleWithTextures(getEntityInstance("IFCSURFACESTYLEWITHTEXTURES")); } 
            }
        public bool is_IfcExternallyDefinedSurfaceStyle { get { return IsADBEntity("IfcExternallyDefinedSurfaceStyle"); } }
        public IfcExternallyDefinedSurfaceStyle IfcExternallyDefinedSurfaceStyle
            {
            set { putEntityInstance("IFCEXTERNALLYDEFINEDSURFACESTYLE", value); }
            get { return new IfcExternallyDefinedSurfaceStyle(getEntityInstance("IFCEXTERNALLYDEFINEDSURFACESTYLE")); } 
            }
        public bool is_IfcSurfaceStyleRefraction { get { return IsADBEntity("IfcSurfaceStyleRefraction"); } }
        public IfcSurfaceStyleRefraction IfcSurfaceStyleRefraction
            {
            set { putEntityInstance("IFCSURFACESTYLEREFRACTION", value); }
            get { return new IfcSurfaceStyleRefraction(getEntityInstance("IFCSURFACESTYLEREFRACTION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSurfaceStyleElementSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSurfaceStyleElementSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSurfaceStyleElementSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSurfaceStyleElementSelect_get() : base(null) { }

        public bool is_IfcSurfaceStyleShading { get { return IsADBEntity("IfcSurfaceStyleShading"); } }
        public IfcSurfaceStyleShading IfcSurfaceStyleShading
            {
            get { return new IfcSurfaceStyleShading(getEntityInstance("IFCSURFACESTYLESHADING")); }
            }
        public bool is_IfcSurfaceStyleLighting { get { return IsADBEntity("IfcSurfaceStyleLighting"); } }
        public IfcSurfaceStyleLighting IfcSurfaceStyleLighting
            {
            get { return new IfcSurfaceStyleLighting(getEntityInstance("IFCSURFACESTYLELIGHTING")); }
            }
        public bool is_IfcSurfaceStyleWithTextures { get { return IsADBEntity("IfcSurfaceStyleWithTextures"); } }
        public IfcSurfaceStyleWithTextures IfcSurfaceStyleWithTextures
            {
            get { return new IfcSurfaceStyleWithTextures(getEntityInstance("IFCSURFACESTYLEWITHTEXTURES")); }
            }
        public bool is_IfcExternallyDefinedSurfaceStyle { get { return IsADBEntity("IfcExternallyDefinedSurfaceStyle"); } }
        public IfcExternallyDefinedSurfaceStyle IfcExternallyDefinedSurfaceStyle
            {
            get { return new IfcExternallyDefinedSurfaceStyle(getEntityInstance("IFCEXTERNALLYDEFINEDSURFACESTYLE")); }
            }
        public bool is_IfcSurfaceStyleRefraction { get { return IsADBEntity("IfcSurfaceStyleRefraction"); } }
        public IfcSurfaceStyleRefraction IfcSurfaceStyleRefraction
            {
            get { return new IfcSurfaceStyleRefraction(getEntityInstance("IFCSURFACESTYLEREFRACTION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSymbolStyleSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSymbolStyleSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSymbolStyleSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSymbolStyleSelect() : base(null) { }

        public IfcColour IfcColour { get { return new IfcColour(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSymbolStyleSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSymbolStyleSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSymbolStyleSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSymbolStyleSelect_get() : base(null) { }

        public IfcColour_get IfcColour { get { return new IfcColour_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcTextFontSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTextFontSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTextFontSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTextFontSelect() : base(null) { }

        public bool is_IfcPreDefinedTextFont { get { return IsADBEntity("IfcPreDefinedTextFont"); } }
        public IfcPreDefinedTextFont IfcPreDefinedTextFont
            {
            set { putEntityInstance("IFCPREDEFINEDTEXTFONT", value); }
            get { return new IfcPreDefinedTextFont(getEntityInstance("IFCPREDEFINEDTEXTFONT")); } 
            }
        public bool is_IfcExternallyDefinedTextFont { get { return IsADBEntity("IfcExternallyDefinedTextFont"); } }
        public IfcExternallyDefinedTextFont IfcExternallyDefinedTextFont
            {
            set { putEntityInstance("IFCEXTERNALLYDEFINEDTEXTFONT", value); }
            get { return new IfcExternallyDefinedTextFont(getEntityInstance("IFCEXTERNALLYDEFINEDTEXTFONT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcTextFontSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTextFontSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTextFontSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTextFontSelect_get() : base(null) { }

        public bool is_IfcPreDefinedTextFont { get { return IsADBEntity("IfcPreDefinedTextFont"); } }
        public IfcPreDefinedTextFont IfcPreDefinedTextFont
            {
            get { return new IfcPreDefinedTextFont(getEntityInstance("IFCPREDEFINEDTEXTFONT")); }
            }
        public bool is_IfcExternallyDefinedTextFont { get { return IsADBEntity("IfcExternallyDefinedTextFont"); } }
        public IfcExternallyDefinedTextFont IfcExternallyDefinedTextFont
            {
            get { return new IfcExternallyDefinedTextFont(getEntityInstance("IFCEXTERNALLYDEFINEDTEXTFONT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcTextStyleSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTextStyleSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTextStyleSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTextStyleSelect() : base(null) { }

        public bool is_IfcTextStyleWithBoxCharacteristics { get { return IsADBEntity("IfcTextStyleWithBoxCharacteristics"); } }
        public IfcTextStyleWithBoxCharacteristics IfcTextStyleWithBoxCharacteristics
            {
            set { putEntityInstance("IFCTEXTSTYLEWITHBOXCHARACTERISTICS", value); }
            get { return new IfcTextStyleWithBoxCharacteristics(getEntityInstance("IFCTEXTSTYLEWITHBOXCHARACTERISTICS")); } 
            }
        public bool is_IfcTextStyleTextModel { get { return IsADBEntity("IfcTextStyleTextModel"); } }
        public IfcTextStyleTextModel IfcTextStyleTextModel
            {
            set { putEntityInstance("IFCTEXTSTYLETEXTMODEL", value); }
            get { return new IfcTextStyleTextModel(getEntityInstance("IFCTEXTSTYLETEXTMODEL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcTextStyleSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTextStyleSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTextStyleSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTextStyleSelect_get() : base(null) { }

        public bool is_IfcTextStyleWithBoxCharacteristics { get { return IsADBEntity("IfcTextStyleWithBoxCharacteristics"); } }
        public IfcTextStyleWithBoxCharacteristics IfcTextStyleWithBoxCharacteristics
            {
            get { return new IfcTextStyleWithBoxCharacteristics(getEntityInstance("IFCTEXTSTYLEWITHBOXCHARACTERISTICS")); }
            }
        public bool is_IfcTextStyleTextModel { get { return IsADBEntity("IfcTextStyleTextModel"); } }
        public IfcTextStyleTextModel IfcTextStyleTextModel
            {
            get { return new IfcTextStyleTextModel(getEntityInstance("IFCTEXTSTYLETEXTMODEL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcTrimmingSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTrimmingSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTrimmingSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTrimmingSelect() : base(null) { }

        public bool is_IfcCartesianPoint { get { return IsADBEntity("IfcCartesianPoint"); } }
        public IfcCartesianPoint IfcCartesianPoint
            {
            set { putEntityInstance("IFCCARTESIANPOINT", value); }
            get { return new IfcCartesianPoint(getEntityInstance("IFCCARTESIANPOINT")); } 
            }
        public bool is_IfcParameterValue { get { return IsADBType("IFCPARAMETERVALUE"); } }
        public double? IfcParameterValue
            {
            set { put_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcTrimmingSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTrimmingSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTrimmingSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTrimmingSelect_get() : base(null) { }

        public bool is_IfcCartesianPoint { get { return IsADBEntity("IfcCartesianPoint"); } }
        public IfcCartesianPoint IfcCartesianPoint
            {
            get { return new IfcCartesianPoint(getEntityInstance("IFCCARTESIANPOINT")); }
            }
        public bool is_IfcParameterValue { get { return IsADBType("IFCPARAMETERVALUE"); } }
        public double? IfcParameterValue
            {
            get { return get_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcUnit : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcUnit(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcUnit(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcUnit() : base(null) { }

        public bool is_IfcDerivedUnit { get { return IsADBEntity("IfcDerivedUnit"); } }
        public IfcDerivedUnit IfcDerivedUnit
            {
            set { putEntityInstance("IFCDERIVEDUNIT", value); }
            get { return new IfcDerivedUnit(getEntityInstance("IFCDERIVEDUNIT")); } 
            }
        public bool is_IfcNamedUnit { get { return IsADBEntity("IfcNamedUnit"); } }
        public IfcNamedUnit IfcNamedUnit
            {
            set { putEntityInstance("IFCNAMEDUNIT", value); }
            get { return new IfcNamedUnit(getEntityInstance("IFCNAMEDUNIT")); } 
            }
        public bool is_IfcMonetaryUnit { get { return IsADBEntity("IfcMonetaryUnit"); } }
        public IfcMonetaryUnit IfcMonetaryUnit
            {
            set { putEntityInstance("IFCMONETARYUNIT", value); }
            get { return new IfcMonetaryUnit(getEntityInstance("IFCMONETARYUNIT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcUnit_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcUnit_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcUnit_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcUnit_get() : base(null) { }

        public bool is_IfcDerivedUnit { get { return IsADBEntity("IfcDerivedUnit"); } }
        public IfcDerivedUnit IfcDerivedUnit
            {
            get { return new IfcDerivedUnit(getEntityInstance("IFCDERIVEDUNIT")); }
            }
        public bool is_IfcNamedUnit { get { return IsADBEntity("IfcNamedUnit"); } }
        public IfcNamedUnit IfcNamedUnit
            {
            get { return new IfcNamedUnit(getEntityInstance("IFCNAMEDUNIT")); }
            }
        public bool is_IfcMonetaryUnit { get { return IsADBEntity("IfcMonetaryUnit"); } }
        public IfcMonetaryUnit IfcMonetaryUnit
            {
            get { return new IfcMonetaryUnit(getEntityInstance("IFCMONETARYUNIT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcValue : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcValue(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcValue(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcValue() : base(null) { }

        public IfcMeasureValue IfcMeasureValue { get { return new IfcMeasureValue(this); } }
        public IfcSimpleValue IfcSimpleValue { get { return new IfcSimpleValue(this); } }
        public IfcDerivedMeasureValue IfcDerivedMeasureValue { get { return new IfcDerivedMeasureValue(this); } }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        };


    public class IfcValue_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcValue_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcValue_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcValue_get() : base(null) { }

        public IfcMeasureValue_get IfcMeasureValue { get { return new IfcMeasureValue_get(this); } }
        public IfcSimpleValue_get IfcSimpleValue { get { return new IfcSimpleValue_get(this); } }
        public IfcDerivedMeasureValue_get IfcDerivedMeasureValue { get { return new IfcDerivedMeasureValue_get(this); } }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        };


    public class IfcVectorOrDirection : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcVectorOrDirection(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcVectorOrDirection(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcVectorOrDirection() : base(null) { }

        public bool is_IfcDirection { get { return IsADBEntity("IfcDirection"); } }
        public IfcDirection IfcDirection
            {
            set { putEntityInstance("IFCDIRECTION", value); }
            get { return new IfcDirection(getEntityInstance("IFCDIRECTION")); } 
            }
        public bool is_IfcVector { get { return IsADBEntity("IfcVector"); } }
        public IfcVector IfcVector
            {
            set { putEntityInstance("IFCVECTOR", value); }
            get { return new IfcVector(getEntityInstance("IFCVECTOR")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcVectorOrDirection_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcVectorOrDirection_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcVectorOrDirection_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcVectorOrDirection_get() : base(null) { }

        public bool is_IfcDirection { get { return IsADBEntity("IfcDirection"); } }
        public IfcDirection IfcDirection
            {
            get { return new IfcDirection(getEntityInstance("IFCDIRECTION")); }
            }
        public bool is_IfcVector { get { return IsADBEntity("IfcVector"); } }
        public IfcVector IfcVector
            {
            get { return new IfcVector(getEntityInstance("IFCVECTOR")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };

    //
    // Unnamed aggregations
    //
    public class SetOfIfcPresentationLayerAssignment : List<IfcPresentationLayerAssignment> { }
    class SetOfIfcPresentationLayerAssignmentSerializer : AggrSerializerInstance<IfcPresentationLayerAssignment, SetOfIfcPresentationLayerAssignment> { }
    public class SetOfIfcStyledItem : List<IfcStyledItem> { }
    class SetOfIfcStyledItemSerializer : AggrSerializerInstance<IfcStyledItem, SetOfIfcStyledItem> { }
    public class ListOfIfcCompositeCurveSegment : List<IfcCompositeCurveSegment> { }
    class ListOfIfcCompositeCurveSegmentSerializer : AggrSerializerInstance<IfcCompositeCurveSegment, ListOfIfcCompositeCurveSegment> { }
    public class SetOfIfcRelAssigns : List<IfcRelAssigns> { }
    class SetOfIfcRelAssignsSerializer : AggrSerializerInstance<IfcRelAssigns, SetOfIfcRelAssigns> { }
    public class SetOfIfcRelDecomposes : List<IfcRelDecomposes> { }
    class SetOfIfcRelDecomposesSerializer : AggrSerializerInstance<IfcRelDecomposes, SetOfIfcRelDecomposes> { }
    public class SetOfIfcRelAssociates : List<IfcRelAssociates> { }
    class SetOfIfcRelAssociatesSerializer : AggrSerializerInstance<IfcRelAssociates, SetOfIfcRelAssociates> { }
    public class SetOfIfcRelDefines : List<IfcRelDefines> { }
    class SetOfIfcRelDefinesSerializer : AggrSerializerInstance<IfcRelDefines, SetOfIfcRelDefines> { }
    public class SetOfIfcRelAssignsToControl : List<IfcRelAssignsToControl> { }
    class SetOfIfcRelAssignsToControlSerializer : AggrSerializerInstance<IfcRelAssignsToControl, SetOfIfcRelAssignsToControl> { }
    public class SetOfIfcRelAssignsToActor : List<IfcRelAssignsToActor> { }
    class SetOfIfcRelAssignsToActorSerializer : AggrSerializerInstance<IfcRelAssignsToActor, SetOfIfcRelAssignsToActor> { }
    public class SetOfIfcPropertySetDefinition : List<IfcPropertySetDefinition> { }
    class SetOfIfcPropertySetDefinitionSerializer : AggrSerializerInstance<IfcPropertySetDefinition, SetOfIfcPropertySetDefinition> { }
    public class SetOfIfcRelDefinesByType : List<IfcRelDefinesByType> { }
    class SetOfIfcRelDefinesByTypeSerializer : AggrSerializerInstance<IfcRelDefinesByType, SetOfIfcRelDefinesByType> { }
    public class ListOfIfcRepresentationMap : List<IfcRepresentationMap> { }
    class ListOfIfcRepresentationMapSerializer : AggrSerializerInstance<IfcRepresentationMap, ListOfIfcRepresentationMap> { }
    public class SetOfIfcPerson : List<IfcPerson> { }
    class SetOfIfcPersonSerializer : AggrSerializerInstance<IfcPerson, SetOfIfcPerson> { }
    public class SetOfIfcOrganization : List<IfcOrganization> { }
    class SetOfIfcOrganizationSerializer : AggrSerializerInstance<IfcOrganization, SetOfIfcOrganization> { }
    public class SetOfIfcDraughtingCalloutElement : List<IfcDraughtingCalloutElement> { }
    class SetOfIfcDraughtingCalloutElementSerializer : AggrSerializerSelect<IfcDraughtingCalloutElement, SetOfIfcDraughtingCalloutElement> { }
    public class SetOfIfcDraughtingCalloutRelationship : List<IfcDraughtingCalloutRelationship> { }
    class SetOfIfcDraughtingCalloutRelationshipSerializer : AggrSerializerInstance<IfcDraughtingCalloutRelationship, SetOfIfcDraughtingCalloutRelationship> { }
    public class SetOfIfcRelAssignsToProduct : List<IfcRelAssignsToProduct> { }
    class SetOfIfcRelAssignsToProductSerializer : AggrSerializerInstance<IfcRelAssignsToProduct, SetOfIfcRelAssignsToProduct> { }
    public class SetOfIfcRelContainedInSpatialStructure : List<IfcRelContainedInSpatialStructure> { }
    class SetOfIfcRelContainedInSpatialStructureSerializer : AggrSerializerInstance<IfcRelContainedInSpatialStructure, SetOfIfcRelContainedInSpatialStructure> { }
    public class SetOfIfcPresentationStyleAssignment : List<IfcPresentationStyleAssignment> { }
    class SetOfIfcPresentationStyleAssignmentSerializer : AggrSerializerInstance<IfcPresentationStyleAssignment, SetOfIfcPresentationStyleAssignment> { }
    public class SetOfIfcCurve : List<IfcCurve> { }
    class SetOfIfcCurveSerializer : AggrSerializerInstance<IfcCurve, SetOfIfcCurve> { }
    public class SetOfIfcReferencesValueDocument : List<IfcReferencesValueDocument> { }
    class SetOfIfcReferencesValueDocumentSerializer : AggrSerializerInstance<IfcReferencesValueDocument, SetOfIfcReferencesValueDocument> { }
    public class SetOfIfcAppliedValueRelationship : List<IfcAppliedValueRelationship> { }
    class SetOfIfcAppliedValueRelationshipSerializer : AggrSerializerInstance<IfcAppliedValueRelationship, SetOfIfcAppliedValueRelationship> { }
    public class SetOfIfcAppliedValue : List<IfcAppliedValue> { }
    class SetOfIfcAppliedValueSerializer : AggrSerializerInstance<IfcAppliedValue, SetOfIfcAppliedValue> { }
    public class SetOfIfcApprovalActorRelationship : List<IfcApprovalActorRelationship> { }
    class SetOfIfcApprovalActorRelationshipSerializer : AggrSerializerInstance<IfcApprovalActorRelationship, SetOfIfcApprovalActorRelationship> { }
    public class SetOfIfcApprovalRelationship : List<IfcApprovalRelationship> { }
    class SetOfIfcApprovalRelationshipSerializer : AggrSerializerInstance<IfcApprovalRelationship, SetOfIfcApprovalRelationship> { }
    public class SetOfIfcProperty : List<IfcProperty> { }
    class SetOfIfcPropertySerializer : AggrSerializerInstance<IfcProperty, SetOfIfcProperty> { }
    public class ListOfIfcDirection : List<IfcDirection> { }
    class ListOfIfcDirectionSerializer : AggrSerializerInstance<IfcDirection, ListOfIfcDirection> { }
    public class SetOfIfcRelConnectsStructuralElement : List<IfcRelConnectsStructuralElement> { }
    class SetOfIfcRelConnectsStructuralElementSerializer : AggrSerializerInstance<IfcRelConnectsStructuralElement, SetOfIfcRelConnectsStructuralElement> { }
    public class SetOfIfcRelFillsElement : List<IfcRelFillsElement> { }
    class SetOfIfcRelFillsElementSerializer : AggrSerializerInstance<IfcRelFillsElement, SetOfIfcRelFillsElement> { }
    public class SetOfIfcRelConnectsElements : List<IfcRelConnectsElements> { }
    class SetOfIfcRelConnectsElementsSerializer : AggrSerializerInstance<IfcRelConnectsElements, SetOfIfcRelConnectsElements> { }
    public class SetOfIfcRelCoversBldgElements : List<IfcRelCoversBldgElements> { }
    class SetOfIfcRelCoversBldgElementsSerializer : AggrSerializerInstance<IfcRelCoversBldgElements, SetOfIfcRelCoversBldgElements> { }
    public class SetOfIfcRelProjectsElement : List<IfcRelProjectsElement> { }
    class SetOfIfcRelProjectsElementSerializer : AggrSerializerInstance<IfcRelProjectsElement, SetOfIfcRelProjectsElement> { }
    public class SetOfIfcRelReferencedInSpatialStructure : List<IfcRelReferencedInSpatialStructure> { }
    class SetOfIfcRelReferencedInSpatialStructureSerializer : AggrSerializerInstance<IfcRelReferencedInSpatialStructure, SetOfIfcRelReferencedInSpatialStructure> { }
    public class SetOfIfcRelConnectsPortToElement : List<IfcRelConnectsPortToElement> { }
    class SetOfIfcRelConnectsPortToElementSerializer : AggrSerializerInstance<IfcRelConnectsPortToElement, SetOfIfcRelConnectsPortToElement> { }
    public class SetOfIfcRelVoidsElement : List<IfcRelVoidsElement> { }
    class SetOfIfcRelVoidsElementSerializer : AggrSerializerInstance<IfcRelVoidsElement, SetOfIfcRelVoidsElement> { }
    public class SetOfIfcRelConnectsWithRealizingElements : List<IfcRelConnectsWithRealizingElements> { }
    class SetOfIfcRelConnectsWithRealizingElementsSerializer : AggrSerializerInstance<IfcRelConnectsWithRealizingElements, SetOfIfcRelConnectsWithRealizingElements> { }
    public class SetOfIfcRelSpaceBoundary : List<IfcRelSpaceBoundary> { }
    class SetOfIfcRelSpaceBoundarySerializer : AggrSerializerInstance<IfcRelSpaceBoundary, SetOfIfcRelSpaceBoundary> { }
    public class ListOfIfcCartesianPoint : List<IfcCartesianPoint> { }
    class ListOfIfcCartesianPointSerializer : AggrSerializerInstance<IfcCartesianPoint, ListOfIfcCartesianPoint> { }
    public class ArrayOfIfcCartesianPoint : List<IfcCartesianPoint> { }
    class ArrayOfIfcCartesianPointSerializer : AggrSerializerInstance<IfcCartesianPoint, ArrayOfIfcCartesianPoint> { }
    public class SetOfIfcRelServicesBuildings : List<IfcRelServicesBuildings> { }
    class SetOfIfcRelServicesBuildingsSerializer : AggrSerializerInstance<IfcRelServicesBuildings, SetOfIfcRelServicesBuildings> { }
    public class ListOfIfcLengthMeasure : List<double> { }
    class ListOfIfcLengthMeasureSerializer : AggrSerializer_double<double, ListOfIfcLengthMeasure> { }
    public class SetOfIfcClassificationItem : List<IfcClassificationItem> { }
    class SetOfIfcClassificationItemSerializer : AggrSerializerInstance<IfcClassificationItem, SetOfIfcClassificationItem> { }
    public class SetOfIfcClassificationItemRelationship : List<IfcClassificationItemRelationship> { }
    class SetOfIfcClassificationItemRelationshipSerializer : AggrSerializerInstance<IfcClassificationItemRelationship, SetOfIfcClassificationItemRelationship> { }
    public class SetOfIfcClassificationNotationFacet : List<IfcClassificationNotationFacet> { }
    class SetOfIfcClassificationNotationFacetSerializer : AggrSerializerInstance<IfcClassificationNotationFacet, SetOfIfcClassificationNotationFacet> { }
    public class SetOfIfcFace : List<IfcFace> { }
    class SetOfIfcFaceSerializer : AggrSerializerInstance<IfcFace, SetOfIfcFace> { }
    public class SetOfIfcPropertyDependencyRelationship : List<IfcPropertyDependencyRelationship> { }
    class SetOfIfcPropertyDependencyRelationshipSerializer : AggrSerializerInstance<IfcPropertyDependencyRelationship, SetOfIfcPropertyDependencyRelationship> { }
    public class SetOfIfcComplexProperty : List<IfcComplexProperty> { }
    class SetOfIfcComplexPropertySerializer : AggrSerializerInstance<IfcComplexProperty, SetOfIfcComplexProperty> { }
    public class SetOfIfcCompositeCurve : List<IfcCompositeCurve> { }
    class SetOfIfcCompositeCurveSerializer : AggrSerializerInstance<IfcCompositeCurve, SetOfIfcCompositeCurve> { }
    public class SetOfIfcProfileDef : List<IfcProfileDef> { }
    class SetOfIfcProfileDefSerializer : AggrSerializerInstance<IfcProfileDef, SetOfIfcProfileDef> { }
    public class SetOfIfcConstraintClassificationRelationship : List<IfcConstraintClassificationRelationship> { }
    class SetOfIfcConstraintClassificationRelationshipSerializer : AggrSerializerInstance<IfcConstraintClassificationRelationship, SetOfIfcConstraintClassificationRelationship> { }
    public class SetOfIfcConstraintRelationship : List<IfcConstraintRelationship> { }
    class SetOfIfcConstraintRelationshipSerializer : AggrSerializerInstance<IfcConstraintRelationship, SetOfIfcConstraintRelationship> { }
    public class SetOfIfcPropertyConstraintRelationship : List<IfcPropertyConstraintRelationship> { }
    class SetOfIfcPropertyConstraintRelationshipSerializer : AggrSerializerInstance<IfcPropertyConstraintRelationship, SetOfIfcPropertyConstraintRelationship> { }
    public class SetOfIfcConstraintAggregationRelationship : List<IfcConstraintAggregationRelationship> { }
    class SetOfIfcConstraintAggregationRelationshipSerializer : AggrSerializerInstance<IfcConstraintAggregationRelationship, SetOfIfcConstraintAggregationRelationship> { }
    public class ListOfIfcConstraint : List<IfcConstraint> { }
    class ListOfIfcConstraintSerializer : AggrSerializerInstance<IfcConstraint, ListOfIfcConstraint> { }
    public class SetOfIfcClassificationNotationSelect : List<IfcClassificationNotationSelect> { }
    class SetOfIfcClassificationNotationSelectSerializer : AggrSerializerSelect<IfcClassificationNotationSelect, SetOfIfcClassificationNotationSelect> { }
    public class SetOfIfcConstraint : List<IfcConstraint> { }
    class SetOfIfcConstraintSerializer : AggrSerializerInstance<IfcConstraint, SetOfIfcConstraint> { }
    public class SetOfIfcRelAssignsToResource : List<IfcRelAssignsToResource> { }
    class SetOfIfcRelAssignsToResourceSerializer : AggrSerializerInstance<IfcRelAssignsToResource, SetOfIfcRelAssignsToResource> { }
    public class SetOfIfcActorSelect : List<IfcActorSelect> { }
    class SetOfIfcActorSelectSerializer : AggrSerializerSelect<IfcActorSelect, SetOfIfcActorSelect> { }
    public class SetOfIfcRelCoversSpaces : List<IfcRelCoversSpaces> { }
    class SetOfIfcRelCoversSpacesSerializer : AggrSerializerInstance<IfcRelCoversSpaces, SetOfIfcRelCoversSpaces> { }
    public class ListOfIfcCurveStyleFontPattern : List<IfcCurveStyleFontPattern> { }
    class ListOfIfcCurveStyleFontPatternSerializer : AggrSerializerInstance<IfcCurveStyleFontPattern, ListOfIfcCurveStyleFontPattern> { }
    public class SetOfIfcDerivedUnitElement : List<IfcDerivedUnitElement> { }
    class SetOfIfcDerivedUnitElementSerializer : AggrSerializerInstance<IfcDerivedUnitElement, SetOfIfcDerivedUnitElement> { }
    public class SetOfIfcTerminatorSymbol : List<IfcTerminatorSymbol> { }
    class SetOfIfcTerminatorSymbolSerializer : AggrSerializerInstance<IfcTerminatorSymbol, SetOfIfcTerminatorSymbol> { }
    public class list_of_double : List<double> { }
    class list_of_doubleSerializer : AggrSerializer_double<double, list_of_double> { }
    public class SetOfIfcRelFlowControlElements : List<IfcRelFlowControlElements> { }
    class SetOfIfcRelFlowControlElementsSerializer : AggrSerializerInstance<IfcRelFlowControlElements, SetOfIfcRelFlowControlElements> { }
    public class SetOfIfcRelConnectsPorts : List<IfcRelConnectsPorts> { }
    class SetOfIfcRelConnectsPortsSerializer : AggrSerializerInstance<IfcRelConnectsPorts, SetOfIfcRelConnectsPorts> { }
    public class SetOfIfcDocumentReference : List<IfcDocumentReference> { }
    class SetOfIfcDocumentReferenceSerializer : AggrSerializerInstance<IfcDocumentReference, SetOfIfcDocumentReference> { }
    public class SetOfIfcDocumentInformationRelationship : List<IfcDocumentInformationRelationship> { }
    class SetOfIfcDocumentInformationRelationshipSerializer : AggrSerializerInstance<IfcDocumentInformationRelationship, SetOfIfcDocumentInformationRelationship> { }
    public class SetOfIfcDocumentInformation : List<IfcDocumentInformation> { }
    class SetOfIfcDocumentInformationSerializer : AggrSerializerInstance<IfcDocumentInformation, SetOfIfcDocumentInformation> { }
    public class SetOfIfcRelDefinesByProperties : List<IfcRelDefinesByProperties> { }
    class SetOfIfcRelDefinesByPropertiesSerializer : AggrSerializerInstance<IfcRelDefinesByProperties, SetOfIfcRelDefinesByProperties> { }
    public class SetOfIfcTypeObject : List<IfcTypeObject> { }
    class SetOfIfcTypeObjectSerializer : AggrSerializerInstance<IfcTypeObject, SetOfIfcTypeObject> { }
    public class ListOfIfcOrientedEdge : List<IfcOrientedEdge> { }
    class ListOfIfcOrientedEdgeSerializer : AggrSerializerInstance<IfcOrientedEdge, ListOfIfcOrientedEdge> { }
    public class SetOfIfcPhysicalQuantity : List<IfcPhysicalQuantity> { }
    class SetOfIfcPhysicalQuantitySerializer : AggrSerializerInstance<IfcPhysicalQuantity, SetOfIfcPhysicalQuantity> { }
    public class SetOfIfcFaceBound : List<IfcFaceBound> { }
    class SetOfIfcFaceBoundSerializer : AggrSerializerInstance<IfcFaceBound, SetOfIfcFaceBound> { }
    public class SetOfIfcConnectedFaceSet : List<IfcConnectedFaceSet> { }
    class SetOfIfcConnectedFaceSetSerializer : AggrSerializerInstance<IfcConnectedFaceSet, SetOfIfcConnectedFaceSet> { }
    public class SetOfIfcClosedShell : List<IfcClosedShell> { }
    class SetOfIfcClosedShellSerializer : AggrSerializerInstance<IfcClosedShell, SetOfIfcClosedShell> { }
    public class SetOfIfcFillStyleSelect : List<IfcFillStyleSelect> { }
    class SetOfIfcFillStyleSelectSerializer : AggrSerializerSelect<IfcFillStyleSelect, SetOfIfcFillStyleSelect> { }
    public class SetOfIfcFillAreaStyleTileShapeSelect : List<IfcFillAreaStyleTileShapeSelect> { }
    class SetOfIfcFillAreaStyleTileShapeSelectSerializer : AggrSerializerSelect<IfcFillAreaStyleTileShapeSelect, SetOfIfcFillAreaStyleTileShapeSelect> { }
    public class SetOfIfcGeometricSetSelect : List<IfcGeometricSetSelect> { }
    class SetOfIfcGeometricSetSelectSerializer : AggrSerializerSelect<IfcGeometricSetSelect, SetOfIfcGeometricSetSelect> { }
    public class SetOfIfcRepresentation : List<IfcRepresentation> { }
    class SetOfIfcRepresentationSerializer : AggrSerializerInstance<IfcRepresentation, SetOfIfcRepresentation> { }
    public class SetOfIfcGeometricRepresentationSubContext : List<IfcGeometricRepresentationSubContext> { }
    class SetOfIfcGeometricRepresentationSubContextSerializer : AggrSerializerInstance<IfcGeometricRepresentationSubContext, SetOfIfcGeometricRepresentationSubContext> { }
    public class ListOfIfcGridAxis : List<IfcGridAxis> { }
    class ListOfIfcGridAxisSerializer : AggrSerializerInstance<IfcGridAxis, ListOfIfcGridAxis> { }
    public class SetOfIfcGrid : List<IfcGrid> { }
    class SetOfIfcGridSerializer : AggrSerializerInstance<IfcGrid, SetOfIfcGrid> { }
    public class SetOfIfcVirtualGridIntersection : List<IfcVirtualGridIntersection> { }
    class SetOfIfcVirtualGridIntersectionSerializer : AggrSerializerInstance<IfcVirtualGridIntersection, SetOfIfcVirtualGridIntersection> { }
    public class SetOfIfcProduct : List<IfcProduct> { }
    class SetOfIfcProductSerializer : AggrSerializerInstance<IfcProduct, SetOfIfcProduct> { }
    public class SetOfIfcLocalPlacement : List<IfcLocalPlacement> { }
    class SetOfIfcLocalPlacementSerializer : AggrSerializerInstance<IfcLocalPlacement, SetOfIfcLocalPlacement> { }
    public class SetOfIfcTimeSeriesReferenceRelationship : List<IfcTimeSeriesReferenceRelationship> { }
    class SetOfIfcTimeSeriesReferenceRelationshipSerializer : AggrSerializerInstance<IfcTimeSeriesReferenceRelationship, SetOfIfcTimeSeriesReferenceRelationship> { }
    public class ListOfIfcIrregularTimeSeriesValue : List<IfcIrregularTimeSeriesValue> { }
    class ListOfIfcIrregularTimeSeriesValueSerializer : AggrSerializerInstance<IfcIrregularTimeSeriesValue, ListOfIfcIrregularTimeSeriesValue> { }
    public class ListOfIfcValue : List<IfcValue> { }
    class ListOfIfcValueSerializer : AggrSerializerSelect<IfcValue, ListOfIfcValue> { }
    public class SetOfIfcLibraryReference : List<IfcLibraryReference> { }
    class SetOfIfcLibraryReferenceSerializer : AggrSerializerInstance<IfcLibraryReference, SetOfIfcLibraryReference> { }
    public class SetOfIfcLibraryInformation : List<IfcLibraryInformation> { }
    class SetOfIfcLibraryInformationSerializer : AggrSerializerInstance<IfcLibraryInformation, SetOfIfcLibraryInformation> { }
    public class ListOfIfcPlaneAngleMeasure : List<double> { }
    class ListOfIfcPlaneAngleMeasureSerializer : AggrSerializer_double<double, ListOfIfcPlaneAngleMeasure> { }
    public class ListOfIfcLuminousIntensityDistributionMeasure : List<double> { }
    class ListOfIfcLuminousIntensityDistributionMeasureSerializer : AggrSerializer_double<double, ListOfIfcLuminousIntensityDistributionMeasure> { }
    public class ListOfIfcLightDistributionData : List<IfcLightDistributionData> { }
    class ListOfIfcLightDistributionDataSerializer : AggrSerializerInstance<IfcLightDistributionData, ListOfIfcLightDistributionData> { }
    public class SetOfIfcMaterialDefinitionRepresentation : List<IfcMaterialDefinitionRepresentation> { }
    class SetOfIfcMaterialDefinitionRepresentationSerializer : AggrSerializerInstance<IfcMaterialDefinitionRepresentation, SetOfIfcMaterialDefinitionRepresentation> { }
    public class SetOfIfcMaterialClassificationRelationship : List<IfcMaterialClassificationRelationship> { }
    class SetOfIfcMaterialClassificationRelationshipSerializer : AggrSerializerInstance<IfcMaterialClassificationRelationship, SetOfIfcMaterialClassificationRelationship> { }
    public class ListOfIfcRepresentation : List<IfcRepresentation> { }
    class ListOfIfcRepresentationSerializer : AggrSerializerInstance<IfcRepresentation, ListOfIfcRepresentation> { }
    public class ListOfIfcMaterialLayer : List<IfcMaterialLayer> { }
    class ListOfIfcMaterialLayerSerializer : AggrSerializerInstance<IfcMaterialLayer, ListOfIfcMaterialLayer> { }
    public class ListOfIfcMaterial : List<IfcMaterial> { }
    class ListOfIfcMaterialSerializer : AggrSerializerInstance<IfcMaterial, ListOfIfcMaterial> { }
    public class SetOfIfcRelaxation : List<IfcRelaxation> { }
    class SetOfIfcRelaxationSerializer : AggrSerializerInstance<IfcRelaxation, SetOfIfcRelaxation> { }
    public class SetOfIfcRelAssignsToProcess : List<IfcRelAssignsToProcess> { }
    class SetOfIfcRelAssignsToProcessSerializer : AggrSerializerInstance<IfcRelAssignsToProcess, SetOfIfcRelAssignsToProcess> { }
    public class SetOfIfcRelSequence : List<IfcRelSequence> { }
    class SetOfIfcRelSequenceSerializer : AggrSerializerInstance<IfcRelSequence, SetOfIfcRelSequence> { }
    public class ListOfIfcText : List<TextValue> { }
    class ListOfIfcTextSerializer : AggrSerializerText<TextValue, ListOfIfcText> { public ListOfIfcTextSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class ListOfIfcActorRole : List<IfcActorRole> { }
    class ListOfIfcActorRoleSerializer : AggrSerializerInstance<IfcActorRole, ListOfIfcActorRole> { }
    public class ListOfIfcAddress : List<IfcAddress> { }
    class ListOfIfcAddressSerializer : AggrSerializerInstance<IfcAddress, ListOfIfcAddress> { }
    public class SetOfIfcOrganizationRelationship : List<IfcOrganizationRelationship> { }
    class SetOfIfcOrganizationRelationshipSerializer : AggrSerializerInstance<IfcOrganizationRelationship, SetOfIfcOrganizationRelationship> { }
    public class SetOfIfcPersonAndOrganization : List<IfcPersonAndOrganization> { }
    class SetOfIfcPersonAndOrganizationSerializer : AggrSerializerInstance<IfcPersonAndOrganization, SetOfIfcPersonAndOrganization> { }
    public class ListOfIfcLabel : List<TextValue> { }
    class ListOfIfcLabelSerializer : AggrSerializerText<TextValue, ListOfIfcLabel> { public ListOfIfcLabelSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class SetOfIfcPhysicalComplexQuantity : List<IfcPhysicalComplexQuantity> { }
    class SetOfIfcPhysicalComplexQuantitySerializer : AggrSerializerInstance<IfcPhysicalComplexQuantity, SetOfIfcPhysicalComplexQuantity> { }
    public class ListOfTextValue : List<TextValue> { }
    class ListOfTextValueSerializer : AggrSerializerText<TextValue, ListOfTextValue> { public ListOfTextValueSerializer() : base(ifcengine.sdaiBINARY) { } }
    public class SetOfIfcLayeredItem : List<IfcLayeredItem> { }
    class SetOfIfcLayeredItemSerializer : AggrSerializerSelect<IfcLayeredItem, SetOfIfcLayeredItem> { }
    public class SetOfIfcPresentationStyleSelect : List<IfcPresentationStyleSelect> { }
    class SetOfIfcPresentationStyleSelectSerializer : AggrSerializerSelect<IfcPresentationStyleSelect, SetOfIfcPresentationStyleSelect> { }
    public class SetOfIfcShapeAspect : List<IfcShapeAspect> { }
    class SetOfIfcShapeAspectSerializer : AggrSerializerInstance<IfcShapeAspect, SetOfIfcShapeAspect> { }
    public class SetOfIfcRepresentationContext : List<IfcRepresentationContext> { }
    class SetOfIfcRepresentationContextSerializer : AggrSerializerInstance<IfcRepresentationContext, SetOfIfcRepresentationContext> { }
    public class ListOfIfcRelAssignsToProjectOrder : List<IfcRelAssignsToProjectOrder> { }
    class ListOfIfcRelAssignsToProjectOrderSerializer : AggrSerializerInstance<IfcRelAssignsToProjectOrder, ListOfIfcRelAssignsToProjectOrder> { }
    public class array_of_double : List<double> { }
    class array_of_doubleSerializer : AggrSerializer_double<double, array_of_double> { }
    public class ListOfIfcTimeSeriesValue : List<IfcTimeSeriesValue> { }
    class ListOfIfcTimeSeriesValueSerializer : AggrSerializerInstance<IfcTimeSeriesValue, ListOfIfcTimeSeriesValue> { }
    public class ListOfIfcSectionReinforcementProperties : List<IfcSectionReinforcementProperties> { }
    class ListOfIfcSectionReinforcementPropertiesSerializer : AggrSerializerInstance<IfcSectionReinforcementProperties, ListOfIfcSectionReinforcementProperties> { }
    public class SetOfIfcObjectDefinition : List<IfcObjectDefinition> { }
    class SetOfIfcObjectDefinitionSerializer : AggrSerializerInstance<IfcObjectDefinition, SetOfIfcObjectDefinition> { }
    public class SetOfIfcRoot : List<IfcRoot> { }
    class SetOfIfcRootSerializer : AggrSerializerInstance<IfcRoot, SetOfIfcRoot> { }
    public class ListOfIntValue : List<IntValue> { }
    class ListOfIntValueSerializer : AggrSerializer_IntValue<IntValue, ListOfIntValue> { }
    public class SetOfIfcElement : List<IfcElement> { }
    class SetOfIfcElementSerializer : AggrSerializerInstance<IfcElement, SetOfIfcElement> { }
    public class SetOfIfcCovering : List<IfcCovering> { }
    class SetOfIfcCoveringSerializer : AggrSerializerInstance<IfcCovering, SetOfIfcCovering> { }
    public class SetOfIfcObject : List<IfcObject> { }
    class SetOfIfcObjectSerializer : AggrSerializerInstance<IfcObject, SetOfIfcObject> { }
    public class SetOfIfcDistributionControlElement : List<IfcDistributionControlElement> { }
    class SetOfIfcDistributionControlElementSerializer : AggrSerializerInstance<IfcDistributionControlElement, SetOfIfcDistributionControlElement> { }
    public class SetOfIfcSpatialStructureElement : List<IfcSpatialStructureElement> { }
    class SetOfIfcSpatialStructureElementSerializer : AggrSerializerInstance<IfcSpatialStructureElement, SetOfIfcSpatialStructureElement> { }
    public class SetOfIfcRepresentationItem : List<IfcRepresentationItem> { }
    class SetOfIfcRepresentationItemSerializer : AggrSerializerInstance<IfcRepresentationItem, SetOfIfcRepresentationItem> { }
    public class SetOfIfcRepresentationMap : List<IfcRepresentationMap> { }
    class SetOfIfcRepresentationMapSerializer : AggrSerializerInstance<IfcRepresentationMap, SetOfIfcRepresentationMap> { }
    public class SetOfIfcProductRepresentation : List<IfcProductRepresentation> { }
    class SetOfIfcProductRepresentationSerializer : AggrSerializerInstance<IfcProductRepresentation, SetOfIfcProductRepresentation> { }
    public class SetOfIfcMappedItem : List<IfcMappedItem> { }
    class SetOfIfcMappedItemSerializer : AggrSerializerInstance<IfcMappedItem, SetOfIfcMappedItem> { }
    public class ListOfIfcProfileDef : List<IfcProfileDef> { }
    class ListOfIfcProfileDefSerializer : AggrSerializerInstance<IfcProfileDef, ListOfIfcProfileDef> { }
    public class ListOfIfcAxis2Placement3D : List<IfcAxis2Placement3D> { }
    class ListOfIfcAxis2Placement3DSerializer : AggrSerializerInstance<IfcAxis2Placement3D, ListOfIfcAxis2Placement3D> { }
    public class SetOfIfcReinforcementBarProperties : List<IfcReinforcementBarProperties> { }
    class SetOfIfcReinforcementBarPropertiesSerializer : AggrSerializerInstance<IfcReinforcementBarProperties, SetOfIfcReinforcementBarProperties> { }
    public class ListOfIfcShapeModel : List<IfcShapeModel> { }
    class ListOfIfcShapeModelSerializer : AggrSerializerInstance<IfcShapeModel, ListOfIfcShapeModel> { }
    public class SetOfIfcShell : List<IfcShell> { }
    class SetOfIfcShellSerializer : AggrSerializerSelect<IfcShell, SetOfIfcShell> { }
    public class ListOfIfcSoundValue : List<IfcSoundValue> { }
    class ListOfIfcSoundValueSerializer : AggrSerializerInstance<IfcSoundValue, ListOfIfcSoundValue> { }
    public class SetOfIfcRelInteractionRequirements : List<IfcRelInteractionRequirements> { }
    class SetOfIfcRelInteractionRequirementsSerializer : AggrSerializerInstance<IfcRelInteractionRequirements, SetOfIfcRelInteractionRequirements> { }
    public class SetOfIfcStructuralLoadGroup : List<IfcStructuralLoadGroup> { }
    class SetOfIfcStructuralLoadGroupSerializer : AggrSerializerInstance<IfcStructuralLoadGroup, SetOfIfcStructuralLoadGroup> { }
    public class SetOfIfcStructuralResultGroup : List<IfcStructuralResultGroup> { }
    class SetOfIfcStructuralResultGroupSerializer : AggrSerializerInstance<IfcStructuralResultGroup, SetOfIfcStructuralResultGroup> { }
    public class SetOfIfcRelConnectsStructuralActivity : List<IfcRelConnectsStructuralActivity> { }
    class SetOfIfcRelConnectsStructuralActivitySerializer : AggrSerializerInstance<IfcRelConnectsStructuralActivity, SetOfIfcRelConnectsStructuralActivity> { }
    public class SetOfIfcRelConnectsStructuralMember : List<IfcRelConnectsStructuralMember> { }
    class SetOfIfcRelConnectsStructuralMemberSerializer : AggrSerializerInstance<IfcRelConnectsStructuralMember, SetOfIfcRelConnectsStructuralMember> { }
    public class ListOfIfcStructuralLoad : List<IfcStructuralLoad> { }
    class ListOfIfcStructuralLoadSerializer : AggrSerializerInstance<IfcStructuralLoad, ListOfIfcStructuralLoad> { }
    public class SetOfIfcStructuralAnalysisModel : List<IfcStructuralAnalysisModel> { }
    class SetOfIfcStructuralAnalysisModelSerializer : AggrSerializerInstance<IfcStructuralAnalysisModel, SetOfIfcStructuralAnalysisModel> { }
    public class SetOfIfcStructuralAction : List<IfcStructuralAction> { }
    class SetOfIfcStructuralActionSerializer : AggrSerializerInstance<IfcStructuralAction, SetOfIfcStructuralAction> { }
    public class ListOfIfcPositiveLengthMeasure : List<double> { }
    class ListOfIfcPositiveLengthMeasureSerializer : AggrSerializer_double<double, ListOfIfcPositiveLengthMeasure> { }
    public class SetOfIfcSurfaceStyleElementSelect : List<IfcSurfaceStyleElementSelect> { }
    class SetOfIfcSurfaceStyleElementSelectSerializer : AggrSerializerSelect<IfcSurfaceStyleElementSelect, SetOfIfcSurfaceStyleElementSelect> { }
    public class ListOfIfcSurfaceTexture : List<IfcSurfaceTexture> { }
    class ListOfIfcSurfaceTextureSerializer : AggrSerializerInstance<IfcSurfaceTexture, ListOfIfcSurfaceTexture> { }
    public class ListOfIfcTableRow : List<IfcTableRow> { }
    class ListOfIfcTableRowSerializer : AggrSerializerInstance<IfcTableRow, ListOfIfcTableRow> { }
    public class ListOfIfcTextFontName : List<TextValue> { }
    class ListOfIfcTextFontNameSerializer : AggrSerializerText<TextValue, ListOfIfcTextFontName> { public ListOfIfcTextFontNameSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class SetOfIfcAnnotationSurface : List<IfcAnnotationSurface> { }
    class SetOfIfcAnnotationSurfaceSerializer : AggrSerializerInstance<IfcAnnotationSurface, SetOfIfcAnnotationSurface> { }
    public class ListOfIfcSimpleValue : List<IfcSimpleValue> { }
    class ListOfIfcSimpleValueSerializer : AggrSerializerSelect<IfcSimpleValue, ListOfIfcSimpleValue> { }
    public class SetOfIfcVertexBasedTextureMap : List<IfcVertexBasedTextureMap> { }
    class SetOfIfcVertexBasedTextureMapSerializer : AggrSerializerInstance<IfcVertexBasedTextureMap, SetOfIfcVertexBasedTextureMap> { }
    public class ListOfIfcParameterValue : List<double> { }
    class ListOfIfcParameterValueSerializer : AggrSerializer_double<double, ListOfIfcParameterValue> { }
    public class SetOfIfcDocumentSelect : List<IfcDocumentSelect> { }
    class SetOfIfcDocumentSelectSerializer : AggrSerializerSelect<IfcDocumentSelect, SetOfIfcDocumentSelect> { }
    public class ListOfIfcDateTimeSelect : List<IfcDateTimeSelect> { }
    class ListOfIfcDateTimeSelectSerializer : AggrSerializerSelect<IfcDateTimeSelect, ListOfIfcDateTimeSelect> { }
    public class SetOfIfcTrimmingSelect : List<IfcTrimmingSelect> { }
    class SetOfIfcTrimmingSelectSerializer : AggrSerializerSelect<IfcTrimmingSelect, SetOfIfcTrimmingSelect> { }
    public class SetOfIfcUnit : List<IfcUnit> { }
    class SetOfIfcUnitSerializer : AggrSerializerSelect<IfcUnit, SetOfIfcUnit> { }
    public class ListOfIfcTextureVertex : List<IfcTextureVertex> { }
    class ListOfIfcTextureVertexSerializer : AggrSerializerInstance<IfcTextureVertex, ListOfIfcTextureVertex> { }

    //
    // Entities
    // 


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRepresentationItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRepresentationItem : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRepresentationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRepresentationItem(SdaiInstance instance) : base(instance) { }
        public IfcRepresentationItem() : base(0) { }

        public static implicit operator IfcRepresentationItem(SdaiInstance instance) => new IfcRepresentationItem(instance);

        public SetOfIfcPresentationLayerAssignment LayerAssignments { get { return (new SetOfIfcPresentationLayerAssignmentSerializer()).FromAttr(m_instance, "LayerAssignments"); } }
        public SetOfIfcStyledItem StyledByItem { get { return (new SetOfIfcStyledItemSerializer()).FromAttr(m_instance, "StyledByItem"); } }

        protected override TextValue WrapperEntityName() { return "IfcRepresentationItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeometricRepresentationItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeometricRepresentationItem : IfcRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeometricRepresentationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeometricRepresentationItem(SdaiInstance instance) : base(instance) { }
        public IfcGeometricRepresentationItem() : base(0) { }

        public static implicit operator IfcGeometricRepresentationItem(SdaiInstance instance) => new IfcGeometricRepresentationItem(instance);


        protected override TextValue WrapperEntityName() { return "IfcGeometricRepresentationItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurve : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurve(SdaiInstance instance) : base(instance) { }
        public IfcCurve() : base(0) { }

        public static implicit operator IfcCurve(SdaiInstance instance) => new IfcCurve(instance);

        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundedCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundedCurve : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundedCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundedCurve(SdaiInstance instance) : base(instance) { }
        public IfcBoundedCurve() : base(0) { }

        public static implicit operator IfcBoundedCurve(SdaiInstance instance) => new IfcBoundedCurve(instance);


        protected override TextValue WrapperEntityName() { return "IfcBoundedCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCompositeCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCompositeCurve : IfcBoundedCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCompositeCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCompositeCurve(SdaiInstance instance) : base(instance) { }
        public IfcCompositeCurve() : base(0) { }

        public static implicit operator IfcCompositeCurve(SdaiInstance instance) => new IfcCompositeCurve(instance);

        /// <summary>
        /// Create new instace of IfcCompositeCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcCompositeCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCompositeCurve"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcCompositeCurveSegment Segments { get { return (new ListOfIfcCompositeCurveSegmentSerializer()).FromAttr(m_instance, "Segments"); } }
        public void put_Segments(IEnumerable<IfcCompositeCurveSegment> lst) { (new ListOfIfcCompositeCurveSegmentSerializer()).ToSdaiAggr(lst, m_instance, "Segments"); }
        public void put_Segments_untyped(IEnumerable lst) { (new ListOfIfcCompositeCurveSegmentSerializer()).ToSdaiAggr(lst, m_instance, "Segments"); }
        public LOGICAL_VALUE? SelfIntersect 
            { 
            get { var str = get_string("SelfIntersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "SelfIntersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? NSegments { get { return get_IntValue("NSegments", ifcengine.sdaiINTEGER); } }
        public LOGICAL_VALUE? ClosedCurve { get { var str = get_string("ClosedCurve", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } }

        protected override TextValue WrapperEntityName() { return "IfcCompositeCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of Ifc2DCompositeCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class Ifc2DCompositeCurve : IfcCompositeCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of Ifc2DCompositeCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public Ifc2DCompositeCurve(SdaiInstance instance) : base(instance) { }
        public Ifc2DCompositeCurve() : base(0) { }

        public static implicit operator Ifc2DCompositeCurve(SdaiInstance instance) => new Ifc2DCompositeCurve(instance);

        /// <summary>
        /// Create new instace of Ifc2DCompositeCurve and returns object of this class to interact with
        /// </summary>
        public static new Ifc2DCompositeCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "Ifc2DCompositeCurve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "Ifc2DCompositeCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRoot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRoot : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRoot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRoot(SdaiInstance instance) : base(instance) { }
        public IfcRoot() : base(0) { }

        public static implicit operator IfcRoot(SdaiInstance instance) => new IfcRoot(instance);

        public TextValue GlobalId
            {
            get { return get_string("GlobalId", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "GlobalId", ifcengine.sdaiSTRING, value); }
            }
        public IfcOwnerHistory OwnerHistory 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OwnerHistory", ifcengine.sdaiINSTANCE, out inst); return new IfcOwnerHistory(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OwnerHistory", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRoot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcObjectDefinition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcObjectDefinition : IfcRoot
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcObjectDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcObjectDefinition(SdaiInstance instance) : base(instance) { }
        public IfcObjectDefinition() : base(0) { }

        public static implicit operator IfcObjectDefinition(SdaiInstance instance) => new IfcObjectDefinition(instance);

        public SetOfIfcRelAssigns HasAssignments { get { return (new SetOfIfcRelAssignsSerializer()).FromAttr(m_instance, "HasAssignments"); } }
        public SetOfIfcRelDecomposes IsDecomposedBy { get { return (new SetOfIfcRelDecomposesSerializer()).FromAttr(m_instance, "IsDecomposedBy"); } }
        public SetOfIfcRelDecomposes Decomposes { get { return (new SetOfIfcRelDecomposesSerializer()).FromAttr(m_instance, "Decomposes"); } }
        public SetOfIfcRelAssociates HasAssociations { get { return (new SetOfIfcRelAssociatesSerializer()).FromAttr(m_instance, "HasAssociations"); } }

        protected override TextValue WrapperEntityName() { return "IfcObjectDefinition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcObject
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcObject : IfcObjectDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcObject
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcObject(SdaiInstance instance) : base(instance) { }
        public IfcObject() : base(0) { }

        public static implicit operator IfcObject(SdaiInstance instance) => new IfcObject(instance);

        public TextValue ObjectType
            {
            get { return get_string("ObjectType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ObjectType", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelDefines IsDefinedBy { get { return (new SetOfIfcRelDefinesSerializer()).FromAttr(m_instance, "IsDefinedBy"); } }

        protected override TextValue WrapperEntityName() { return "IfcObject"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcControl
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcControl : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcControl(SdaiInstance instance) : base(instance) { }
        public IfcControl() : base(0) { }

        public static implicit operator IfcControl(SdaiInstance instance) => new IfcControl(instance);

        public SetOfIfcRelAssignsToControl Controls { get { return (new SetOfIfcRelAssignsToControlSerializer()).FromAttr(m_instance, "Controls"); } }

        protected override TextValue WrapperEntityName() { return "IfcControl"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcActionRequest
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcActionRequest : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcActionRequest
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcActionRequest(SdaiInstance instance) : base(instance) { }
        public IfcActionRequest() : base(0) { }

        public static implicit operator IfcActionRequest(SdaiInstance instance) => new IfcActionRequest(instance);

        /// <summary>
        /// Create new instace of IfcActionRequest and returns object of this class to interact with
        /// </summary>
        public static new IfcActionRequest Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcActionRequest"); Debug.Assert(inst != 0); return inst; }

        public TextValue RequestID
            {
            get { return get_string("RequestID", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RequestID", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcActionRequest"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcActor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcActor : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcActor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcActor(SdaiInstance instance) : base(instance) { }
        public IfcActor() : base(0) { }

        public static implicit operator IfcActor(SdaiInstance instance) => new IfcActor(instance);

        /// <summary>
        /// Create new instace of IfcActor and returns object of this class to interact with
        /// </summary>
        public static new IfcActor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcActor"); Debug.Assert(inst != 0); return inst; }


        public IfcActorSelect TheActor
            {
            get { return new IfcActorSelect(m_instance, "TheActor", 0); }
            }
        public SetOfIfcRelAssignsToActor IsActingUpon { get { return (new SetOfIfcRelAssignsToActorSerializer()).FromAttr(m_instance, "IsActingUpon"); } }

        protected override TextValue WrapperEntityName() { return "IfcActor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcActorRole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcActorRole : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcActorRole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcActorRole(SdaiInstance instance) : base(instance) { }
        public IfcActorRole() : base(0) { }

        public static implicit operator IfcActorRole(SdaiInstance instance) => new IfcActorRole(instance);

        /// <summary>
        /// Create new instace of IfcActorRole and returns object of this class to interact with
        /// </summary>
        public static new IfcActorRole Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcActorRole"); Debug.Assert(inst != 0); return inst; }

        public IfcRoleEnum? Role 
            { 
            get { var str = get_string("Role", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRoleEnum_); return EnumValue<IfcRoleEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRoleEnum>.FromValue(value.Value, EnumNames.IfcRoleEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Role", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedRole
            {
            get { return get_string("UserDefinedRole", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedRole", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcActorRole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTypeObject
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTypeObject : IfcObjectDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTypeObject
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTypeObject(SdaiInstance instance) : base(instance) { }
        public IfcTypeObject() : base(0) { }

        public static implicit operator IfcTypeObject(SdaiInstance instance) => new IfcTypeObject(instance);

        /// <summary>
        /// Create new instace of IfcTypeObject and returns object of this class to interact with
        /// </summary>
        public static new IfcTypeObject Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTypeObject"); Debug.Assert(inst != 0); return inst; }

        public TextValue ApplicableOccurrence
            {
            get { return get_string("ApplicableOccurrence", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ApplicableOccurrence", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcPropertySetDefinition HasPropertySets { get { return (new SetOfIfcPropertySetDefinitionSerializer()).FromAttr(m_instance, "HasPropertySets"); } }
        public void put_HasPropertySets(IEnumerable<IfcPropertySetDefinition> lst) { (new SetOfIfcPropertySetDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "HasPropertySets"); }
        public void put_HasPropertySets_untyped(IEnumerable lst) { (new SetOfIfcPropertySetDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "HasPropertySets"); }
        public SetOfIfcRelDefinesByType ObjectTypeOf { get { return (new SetOfIfcRelDefinesByTypeSerializer()).FromAttr(m_instance, "ObjectTypeOf"); } }

        protected override TextValue WrapperEntityName() { return "IfcTypeObject"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTypeProduct
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTypeProduct : IfcTypeObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTypeProduct
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTypeProduct(SdaiInstance instance) : base(instance) { }
        public IfcTypeProduct() : base(0) { }

        public static implicit operator IfcTypeProduct(SdaiInstance instance) => new IfcTypeProduct(instance);

        /// <summary>
        /// Create new instace of IfcTypeProduct and returns object of this class to interact with
        /// </summary>
        public static new IfcTypeProduct Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTypeProduct"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcRepresentationMap RepresentationMaps { get { return (new ListOfIfcRepresentationMapSerializer()).FromAttr(m_instance, "RepresentationMaps"); } }
        public void put_RepresentationMaps(IEnumerable<IfcRepresentationMap> lst) { (new ListOfIfcRepresentationMapSerializer()).ToSdaiAggr(lst, m_instance, "RepresentationMaps"); }
        public void put_RepresentationMaps_untyped(IEnumerable lst) { (new ListOfIfcRepresentationMapSerializer()).ToSdaiAggr(lst, m_instance, "RepresentationMaps"); }
        public TextValue Tag
            {
            get { return get_string("Tag", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Tag", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTypeProduct"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementType : IfcTypeProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementType(SdaiInstance instance) : base(instance) { }
        public IfcElementType() : base(0) { }

        public static implicit operator IfcElementType(SdaiInstance instance) => new IfcElementType(instance);

        public TextValue ElementType
            {
            get { return get_string("ElementType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ElementType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionElementType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionElementType(SdaiInstance instance) : base(instance) { }
        public IfcDistributionElementType() : base(0) { }

        public static implicit operator IfcDistributionElementType(SdaiInstance instance) => new IfcDistributionElementType(instance);

        /// <summary>
        /// Create new instace of IfcDistributionElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionElementType"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDistributionElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionControlElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionControlElementType : IfcDistributionElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionControlElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionControlElementType(SdaiInstance instance) : base(instance) { }
        public IfcDistributionControlElementType() : base(0) { }

        public static implicit operator IfcDistributionControlElementType(SdaiInstance instance) => new IfcDistributionControlElementType(instance);


        protected override TextValue WrapperEntityName() { return "IfcDistributionControlElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcActuatorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcActuatorType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcActuatorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcActuatorType(SdaiInstance instance) : base(instance) { }
        public IfcActuatorType() : base(0) { }

        public static implicit operator IfcActuatorType(SdaiInstance instance) => new IfcActuatorType(instance);

        /// <summary>
        /// Create new instace of IfcActuatorType and returns object of this class to interact with
        /// </summary>
        public static new IfcActuatorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcActuatorType"); Debug.Assert(inst != 0); return inst; }

        public IfcActuatorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcActuatorTypeEnum_); return EnumValue<IfcActuatorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcActuatorTypeEnum>.FromValue(value.Value, EnumNames.IfcActuatorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcActuatorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAddress
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAddress : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAddress
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAddress(SdaiInstance instance) : base(instance) { }
        public IfcAddress() : base(0) { }

        public static implicit operator IfcAddress(SdaiInstance instance) => new IfcAddress(instance);

        public IfcAddressTypeEnum? Purpose 
            { 
            get { var str = get_string("Purpose", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAddressTypeEnum_); return EnumValue<IfcAddressTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAddressTypeEnum>.FromValue(value.Value, EnumNames.IfcAddressTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Purpose", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue UserDefinedPurpose
            {
            get { return get_string("UserDefinedPurpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedPurpose", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcPerson OfPerson { get { return (new SetOfIfcPersonSerializer()).FromAttr(m_instance, "OfPerson"); } }
        public SetOfIfcOrganization OfOrganization { get { return (new SetOfIfcOrganizationSerializer()).FromAttr(m_instance, "OfOrganization"); } }

        protected override TextValue WrapperEntityName() { return "IfcAddress"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionFlowElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionFlowElementType : IfcDistributionElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionFlowElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionFlowElementType(SdaiInstance instance) : base(instance) { }
        public IfcDistributionFlowElementType() : base(0) { }

        public static implicit operator IfcDistributionFlowElementType(SdaiInstance instance) => new IfcDistributionFlowElementType(instance);


        protected override TextValue WrapperEntityName() { return "IfcDistributionFlowElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowControllerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowControllerType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowControllerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowControllerType(SdaiInstance instance) : base(instance) { }
        public IfcFlowControllerType() : base(0) { }

        public static implicit operator IfcFlowControllerType(SdaiInstance instance) => new IfcFlowControllerType(instance);


        protected override TextValue WrapperEntityName() { return "IfcFlowControllerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAirTerminalBoxType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAirTerminalBoxType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAirTerminalBoxType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAirTerminalBoxType(SdaiInstance instance) : base(instance) { }
        public IfcAirTerminalBoxType() : base(0) { }

        public static implicit operator IfcAirTerminalBoxType(SdaiInstance instance) => new IfcAirTerminalBoxType(instance);

        /// <summary>
        /// Create new instace of IfcAirTerminalBoxType and returns object of this class to interact with
        /// </summary>
        public static new IfcAirTerminalBoxType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAirTerminalBoxType"); Debug.Assert(inst != 0); return inst; }

        public IfcAirTerminalBoxTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAirTerminalBoxTypeEnum_); return EnumValue<IfcAirTerminalBoxTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAirTerminalBoxTypeEnum>.FromValue(value.Value, EnumNames.IfcAirTerminalBoxTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcAirTerminalBoxType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowTerminalType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcFlowTerminalType() : base(0) { }

        public static implicit operator IfcFlowTerminalType(SdaiInstance instance) => new IfcFlowTerminalType(instance);


        protected override TextValue WrapperEntityName() { return "IfcFlowTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAirTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAirTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAirTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAirTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcAirTerminalType() : base(0) { }

        public static implicit operator IfcAirTerminalType(SdaiInstance instance) => new IfcAirTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcAirTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcAirTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAirTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcAirTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAirTerminalTypeEnum_); return EnumValue<IfcAirTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAirTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcAirTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcAirTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEnergyConversionDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEnergyConversionDeviceType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEnergyConversionDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEnergyConversionDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcEnergyConversionDeviceType() : base(0) { }

        public static implicit operator IfcEnergyConversionDeviceType(SdaiInstance instance) => new IfcEnergyConversionDeviceType(instance);


        protected override TextValue WrapperEntityName() { return "IfcEnergyConversionDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAirToAirHeatRecoveryType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAirToAirHeatRecoveryType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAirToAirHeatRecoveryType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAirToAirHeatRecoveryType(SdaiInstance instance) : base(instance) { }
        public IfcAirToAirHeatRecoveryType() : base(0) { }

        public static implicit operator IfcAirToAirHeatRecoveryType(SdaiInstance instance) => new IfcAirToAirHeatRecoveryType(instance);

        /// <summary>
        /// Create new instace of IfcAirToAirHeatRecoveryType and returns object of this class to interact with
        /// </summary>
        public static new IfcAirToAirHeatRecoveryType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAirToAirHeatRecoveryType"); Debug.Assert(inst != 0); return inst; }

        public IfcAirToAirHeatRecoveryTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAirToAirHeatRecoveryTypeEnum_); return EnumValue<IfcAirToAirHeatRecoveryTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAirToAirHeatRecoveryTypeEnum>.FromValue(value.Value, EnumNames.IfcAirToAirHeatRecoveryTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcAirToAirHeatRecoveryType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlarmType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlarmType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlarmType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlarmType(SdaiInstance instance) : base(instance) { }
        public IfcAlarmType() : base(0) { }

        public static implicit operator IfcAlarmType(SdaiInstance instance) => new IfcAlarmType(instance);

        /// <summary>
        /// Create new instace of IfcAlarmType and returns object of this class to interact with
        /// </summary>
        public static new IfcAlarmType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAlarmType"); Debug.Assert(inst != 0); return inst; }

        public IfcAlarmTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAlarmTypeEnum_); return EnumValue<IfcAlarmTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAlarmTypeEnum>.FromValue(value.Value, EnumNames.IfcAlarmTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcAlarmType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDraughtingCallout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDraughtingCallout : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDraughtingCallout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDraughtingCallout(SdaiInstance instance) : base(instance) { }
        public IfcDraughtingCallout() : base(0) { }

        public static implicit operator IfcDraughtingCallout(SdaiInstance instance) => new IfcDraughtingCallout(instance);

        /// <summary>
        /// Create new instace of IfcDraughtingCallout and returns object of this class to interact with
        /// </summary>
        public static new IfcDraughtingCallout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDraughtingCallout"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcDraughtingCalloutElement Contents { get { return (new SetOfIfcDraughtingCalloutElementSerializer()).FromAttr(m_instance, "Contents"); } }
        public void put_Contents(IEnumerable<IfcDraughtingCalloutElement> lst) { (new SetOfIfcDraughtingCalloutElementSerializer()).ToSdaiAggr(lst, m_instance, "Contents"); }
        public void put_Contents_untyped(IEnumerable lst) { (new SetOfIfcDraughtingCalloutElementSerializer()).ToSdaiAggr(lst, m_instance, "Contents"); }
        public SetOfIfcDraughtingCalloutRelationship IsRelatedFromCallout { get { return (new SetOfIfcDraughtingCalloutRelationshipSerializer()).FromAttr(m_instance, "IsRelatedFromCallout"); } }
        public SetOfIfcDraughtingCalloutRelationship IsRelatedToCallout { get { return (new SetOfIfcDraughtingCalloutRelationshipSerializer()).FromAttr(m_instance, "IsRelatedToCallout"); } }

        protected override TextValue WrapperEntityName() { return "IfcDraughtingCallout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDimensionCurveDirectedCallout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDimensionCurveDirectedCallout : IfcDraughtingCallout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDimensionCurveDirectedCallout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDimensionCurveDirectedCallout(SdaiInstance instance) : base(instance) { }
        public IfcDimensionCurveDirectedCallout() : base(0) { }

        public static implicit operator IfcDimensionCurveDirectedCallout(SdaiInstance instance) => new IfcDimensionCurveDirectedCallout(instance);

        /// <summary>
        /// Create new instace of IfcDimensionCurveDirectedCallout and returns object of this class to interact with
        /// </summary>
        public static new IfcDimensionCurveDirectedCallout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDimensionCurveDirectedCallout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDimensionCurveDirectedCallout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAngularDimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAngularDimension : IfcDimensionCurveDirectedCallout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAngularDimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAngularDimension(SdaiInstance instance) : base(instance) { }
        public IfcAngularDimension() : base(0) { }

        public static implicit operator IfcAngularDimension(SdaiInstance instance) => new IfcAngularDimension(instance);

        /// <summary>
        /// Create new instace of IfcAngularDimension and returns object of this class to interact with
        /// </summary>
        public static new IfcAngularDimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAngularDimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcAngularDimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProduct
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProduct : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProduct
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProduct(SdaiInstance instance) : base(instance) { }
        public IfcProduct() : base(0) { }

        public static implicit operator IfcProduct(SdaiInstance instance) => new IfcProduct(instance);

        public IfcObjectPlacement ObjectPlacement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ObjectPlacement", ifcengine.sdaiINSTANCE, out inst); return new IfcObjectPlacement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ObjectPlacement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcProductRepresentation Representation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Representation", ifcengine.sdaiINSTANCE, out inst); return new IfcProductRepresentation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Representation", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcRelAssignsToProduct ReferencedBy { get { return (new SetOfIfcRelAssignsToProductSerializer()).FromAttr(m_instance, "ReferencedBy"); } }

        protected override TextValue WrapperEntityName() { return "IfcProduct"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAnnotation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAnnotation : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAnnotation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAnnotation(SdaiInstance instance) : base(instance) { }
        public IfcAnnotation() : base(0) { }

        public static implicit operator IfcAnnotation(SdaiInstance instance) => new IfcAnnotation(instance);

        /// <summary>
        /// Create new instace of IfcAnnotation and returns object of this class to interact with
        /// </summary>
        public static new IfcAnnotation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAnnotation"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcRelContainedInSpatialStructure ContainedInStructure { get { return (new SetOfIfcRelContainedInSpatialStructureSerializer()).FromAttr(m_instance, "ContainedInStructure"); } }

        protected override TextValue WrapperEntityName() { return "IfcAnnotation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStyledItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStyledItem : IfcRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStyledItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStyledItem(SdaiInstance instance) : base(instance) { }
        public IfcStyledItem() : base(0) { }

        public static implicit operator IfcStyledItem(SdaiInstance instance) => new IfcStyledItem(instance);

        /// <summary>
        /// Create new instace of IfcStyledItem and returns object of this class to interact with
        /// </summary>
        public static new IfcStyledItem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStyledItem"); Debug.Assert(inst != 0); return inst; }

        public IfcRepresentationItem Item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Item", ifcengine.sdaiINSTANCE, out inst); return new IfcRepresentationItem(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Item", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcPresentationStyleAssignment Styles { get { return (new SetOfIfcPresentationStyleAssignmentSerializer()).FromAttr(m_instance, "Styles"); } }
        public void put_Styles(IEnumerable<IfcPresentationStyleAssignment> lst) { (new SetOfIfcPresentationStyleAssignmentSerializer()).ToSdaiAggr(lst, m_instance, "Styles"); }
        public void put_Styles_untyped(IEnumerable lst) { (new SetOfIfcPresentationStyleAssignmentSerializer()).ToSdaiAggr(lst, m_instance, "Styles"); }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStyledItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAnnotationOccurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAnnotationOccurrence : IfcStyledItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAnnotationOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAnnotationOccurrence(SdaiInstance instance) : base(instance) { }
        public IfcAnnotationOccurrence() : base(0) { }

        public static implicit operator IfcAnnotationOccurrence(SdaiInstance instance) => new IfcAnnotationOccurrence(instance);


        protected override TextValue WrapperEntityName() { return "IfcAnnotationOccurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAnnotationCurveOccurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAnnotationCurveOccurrence : IfcAnnotationOccurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAnnotationCurveOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAnnotationCurveOccurrence(SdaiInstance instance) : base(instance) { }
        public IfcAnnotationCurveOccurrence() : base(0) { }

        public static implicit operator IfcAnnotationCurveOccurrence(SdaiInstance instance) => new IfcAnnotationCurveOccurrence(instance);

        /// <summary>
        /// Create new instace of IfcAnnotationCurveOccurrence and returns object of this class to interact with
        /// </summary>
        public static new IfcAnnotationCurveOccurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAnnotationCurveOccurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcAnnotationCurveOccurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAnnotationFillArea
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAnnotationFillArea : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAnnotationFillArea
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAnnotationFillArea(SdaiInstance instance) : base(instance) { }
        public IfcAnnotationFillArea() : base(0) { }

        public static implicit operator IfcAnnotationFillArea(SdaiInstance instance) => new IfcAnnotationFillArea(instance);

        /// <summary>
        /// Create new instace of IfcAnnotationFillArea and returns object of this class to interact with
        /// </summary>
        public static new IfcAnnotationFillArea Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAnnotationFillArea"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve OuterBoundary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OuterBoundary", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OuterBoundary", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcCurve InnerBoundaries { get { return (new SetOfIfcCurveSerializer()).FromAttr(m_instance, "InnerBoundaries"); } }
        public void put_InnerBoundaries(IEnumerable<IfcCurve> lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerBoundaries"); }
        public void put_InnerBoundaries_untyped(IEnumerable lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerBoundaries"); }

        protected override TextValue WrapperEntityName() { return "IfcAnnotationFillArea"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAnnotationFillAreaOccurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAnnotationFillAreaOccurrence : IfcAnnotationOccurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAnnotationFillAreaOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAnnotationFillAreaOccurrence(SdaiInstance instance) : base(instance) { }
        public IfcAnnotationFillAreaOccurrence() : base(0) { }

        public static implicit operator IfcAnnotationFillAreaOccurrence(SdaiInstance instance) => new IfcAnnotationFillAreaOccurrence(instance);

        /// <summary>
        /// Create new instace of IfcAnnotationFillAreaOccurrence and returns object of this class to interact with
        /// </summary>
        public static new IfcAnnotationFillAreaOccurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAnnotationFillAreaOccurrence"); Debug.Assert(inst != 0); return inst; }

        public IfcPoint FillStyleTarget 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "FillStyleTarget", ifcengine.sdaiINSTANCE, out inst); return new IfcPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "FillStyleTarget", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcGlobalOrLocalEnum? GlobalOrLocal 
            { 
            get { var str = get_string("GlobalOrLocal", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcGlobalOrLocalEnum_); return EnumValue<IfcGlobalOrLocalEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcGlobalOrLocalEnum>.FromValue(value.Value, EnumNames.IfcGlobalOrLocalEnum_); ifcengine.sdaiPutAttrBN(m_instance, "GlobalOrLocal", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcAnnotationFillAreaOccurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAnnotationSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAnnotationSurface : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAnnotationSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAnnotationSurface(SdaiInstance instance) : base(instance) { }
        public IfcAnnotationSurface() : base(0) { }

        public static implicit operator IfcAnnotationSurface(SdaiInstance instance) => new IfcAnnotationSurface(instance);

        /// <summary>
        /// Create new instace of IfcAnnotationSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcAnnotationSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAnnotationSurface"); Debug.Assert(inst != 0); return inst; }

        public IfcGeometricRepresentationItem Item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Item", ifcengine.sdaiINSTANCE, out inst); return new IfcGeometricRepresentationItem(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Item", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcTextureCoordinate TextureCoordinates 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TextureCoordinates", ifcengine.sdaiINSTANCE, out inst); return new IfcTextureCoordinate(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TextureCoordinates", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcAnnotationSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAnnotationSurfaceOccurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAnnotationSurfaceOccurrence : IfcAnnotationOccurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAnnotationSurfaceOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAnnotationSurfaceOccurrence(SdaiInstance instance) : base(instance) { }
        public IfcAnnotationSurfaceOccurrence() : base(0) { }

        public static implicit operator IfcAnnotationSurfaceOccurrence(SdaiInstance instance) => new IfcAnnotationSurfaceOccurrence(instance);

        /// <summary>
        /// Create new instace of IfcAnnotationSurfaceOccurrence and returns object of this class to interact with
        /// </summary>
        public static new IfcAnnotationSurfaceOccurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAnnotationSurfaceOccurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcAnnotationSurfaceOccurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAnnotationSymbolOccurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAnnotationSymbolOccurrence : IfcAnnotationOccurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAnnotationSymbolOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAnnotationSymbolOccurrence(SdaiInstance instance) : base(instance) { }
        public IfcAnnotationSymbolOccurrence() : base(0) { }

        public static implicit operator IfcAnnotationSymbolOccurrence(SdaiInstance instance) => new IfcAnnotationSymbolOccurrence(instance);

        /// <summary>
        /// Create new instace of IfcAnnotationSymbolOccurrence and returns object of this class to interact with
        /// </summary>
        public static new IfcAnnotationSymbolOccurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAnnotationSymbolOccurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcAnnotationSymbolOccurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAnnotationTextOccurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAnnotationTextOccurrence : IfcAnnotationOccurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAnnotationTextOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAnnotationTextOccurrence(SdaiInstance instance) : base(instance) { }
        public IfcAnnotationTextOccurrence() : base(0) { }

        public static implicit operator IfcAnnotationTextOccurrence(SdaiInstance instance) => new IfcAnnotationTextOccurrence(instance);

        /// <summary>
        /// Create new instace of IfcAnnotationTextOccurrence and returns object of this class to interact with
        /// </summary>
        public static new IfcAnnotationTextOccurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAnnotationTextOccurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcAnnotationTextOccurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcApplication
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcApplication : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcApplication
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcApplication(SdaiInstance instance) : base(instance) { }
        public IfcApplication() : base(0) { }

        public static implicit operator IfcApplication(SdaiInstance instance) => new IfcApplication(instance);

        /// <summary>
        /// Create new instace of IfcApplication and returns object of this class to interact with
        /// </summary>
        public static new IfcApplication Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcApplication"); Debug.Assert(inst != 0); return inst; }

        public IfcOrganization ApplicationDeveloper 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ApplicationDeveloper", ifcengine.sdaiINSTANCE, out inst); return new IfcOrganization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ApplicationDeveloper", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue Version
            {
            get { return get_string("Version", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Version", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ApplicationFullName
            {
            get { return get_string("ApplicationFullName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ApplicationFullName", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ApplicationIdentifier
            {
            get { return get_string("ApplicationIdentifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ApplicationIdentifier", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcApplication"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAppliedValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAppliedValue : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAppliedValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAppliedValue(SdaiInstance instance) : base(instance) { }
        public IfcAppliedValue() : base(0) { }

        public static implicit operator IfcAppliedValue(SdaiInstance instance) => new IfcAppliedValue(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        public IfcAppliedValueSelect AppliedValue
            {
            get { return new IfcAppliedValueSelect(m_instance, "AppliedValue", 0); }
            }
        public IfcMeasureWithUnit UnitBasis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "UnitBasis", ifcengine.sdaiINSTANCE, out inst); return new IfcMeasureWithUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "UnitBasis", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcDateTimeSelect ApplicableDate
            {
            get { return new IfcDateTimeSelect(m_instance, "ApplicableDate", 0); }
            }

        public IfcDateTimeSelect FixedUntilDate
            {
            get { return new IfcDateTimeSelect(m_instance, "FixedUntilDate", 0); }
            }
        public SetOfIfcReferencesValueDocument ValuesReferenced { get { return (new SetOfIfcReferencesValueDocumentSerializer()).FromAttr(m_instance, "ValuesReferenced"); } }
        public SetOfIfcAppliedValueRelationship ValueOfComponents { get { return (new SetOfIfcAppliedValueRelationshipSerializer()).FromAttr(m_instance, "ValueOfComponents"); } }
        public SetOfIfcAppliedValueRelationship IsComponentIn { get { return (new SetOfIfcAppliedValueRelationshipSerializer()).FromAttr(m_instance, "IsComponentIn"); } }

        protected override TextValue WrapperEntityName() { return "IfcAppliedValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAppliedValueRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAppliedValueRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAppliedValueRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAppliedValueRelationship(SdaiInstance instance) : base(instance) { }
        public IfcAppliedValueRelationship() : base(0) { }

        public static implicit operator IfcAppliedValueRelationship(SdaiInstance instance) => new IfcAppliedValueRelationship(instance);

        /// <summary>
        /// Create new instace of IfcAppliedValueRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcAppliedValueRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAppliedValueRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcAppliedValue ComponentOfTotal 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ComponentOfTotal", ifcengine.sdaiINSTANCE, out inst); return new IfcAppliedValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ComponentOfTotal", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcAppliedValue Components { get { return (new SetOfIfcAppliedValueSerializer()).FromAttr(m_instance, "Components"); } }
        public void put_Components(IEnumerable<IfcAppliedValue> lst) { (new SetOfIfcAppliedValueSerializer()).ToSdaiAggr(lst, m_instance, "Components"); }
        public void put_Components_untyped(IEnumerable lst) { (new SetOfIfcAppliedValueSerializer()).ToSdaiAggr(lst, m_instance, "Components"); }
        public IfcArithmeticOperatorEnum? ArithmeticOperator 
            { 
            get { var str = get_string("ArithmeticOperator", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcArithmeticOperatorEnum_); return EnumValue<IfcArithmeticOperatorEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcArithmeticOperatorEnum>.FromValue(value.Value, EnumNames.IfcArithmeticOperatorEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ArithmeticOperator", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcAppliedValueRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcApproval
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcApproval : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcApproval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcApproval(SdaiInstance instance) : base(instance) { }
        public IfcApproval() : base(0) { }

        public static implicit operator IfcApproval(SdaiInstance instance) => new IfcApproval(instance);

        /// <summary>
        /// Create new instace of IfcApproval and returns object of this class to interact with
        /// </summary>
        public static new IfcApproval Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcApproval"); Debug.Assert(inst != 0); return inst; }

        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        public IfcDateTimeSelect ApprovalDateTime
            {
            get { return new IfcDateTimeSelect(m_instance, "ApprovalDateTime", 0); }
            }
        public TextValue ApprovalStatus
            {
            get { return get_string("ApprovalStatus", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ApprovalStatus", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ApprovalLevel
            {
            get { return get_string("ApprovalLevel", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ApprovalLevel", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ApprovalQualifier
            {
            get { return get_string("ApprovalQualifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ApprovalQualifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Identifier
            {
            get { return get_string("Identifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identifier", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcApprovalActorRelationship Actors { get { return (new SetOfIfcApprovalActorRelationshipSerializer()).FromAttr(m_instance, "Actors"); } }
        public SetOfIfcApprovalRelationship IsRelatedWith { get { return (new SetOfIfcApprovalRelationshipSerializer()).FromAttr(m_instance, "IsRelatedWith"); } }
        public SetOfIfcApprovalRelationship Relates { get { return (new SetOfIfcApprovalRelationshipSerializer()).FromAttr(m_instance, "Relates"); } }

        protected override TextValue WrapperEntityName() { return "IfcApproval"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcApprovalActorRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcApprovalActorRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcApprovalActorRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcApprovalActorRelationship(SdaiInstance instance) : base(instance) { }
        public IfcApprovalActorRelationship() : base(0) { }

        public static implicit operator IfcApprovalActorRelationship(SdaiInstance instance) => new IfcApprovalActorRelationship(instance);

        /// <summary>
        /// Create new instace of IfcApprovalActorRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcApprovalActorRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcApprovalActorRelationship"); Debug.Assert(inst != 0); return inst; }


        public IfcActorSelect Actor
            {
            get { return new IfcActorSelect(m_instance, "Actor", 0); }
            }
        public IfcApproval Approval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Approval", ifcengine.sdaiINSTANCE, out inst); return new IfcApproval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Approval", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcActorRole Role 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Role", ifcengine.sdaiINSTANCE, out inst); return new IfcActorRole(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Role", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcApprovalActorRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcApprovalPropertyRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcApprovalPropertyRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcApprovalPropertyRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcApprovalPropertyRelationship(SdaiInstance instance) : base(instance) { }
        public IfcApprovalPropertyRelationship() : base(0) { }

        public static implicit operator IfcApprovalPropertyRelationship(SdaiInstance instance) => new IfcApprovalPropertyRelationship(instance);

        /// <summary>
        /// Create new instace of IfcApprovalPropertyRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcApprovalPropertyRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcApprovalPropertyRelationship"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProperty ApprovedProperties { get { return (new SetOfIfcPropertySerializer()).FromAttr(m_instance, "ApprovedProperties"); } }
        public void put_ApprovedProperties(IEnumerable<IfcProperty> lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "ApprovedProperties"); }
        public void put_ApprovedProperties_untyped(IEnumerable lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "ApprovedProperties"); }
        public IfcApproval Approval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Approval", ifcengine.sdaiINSTANCE, out inst); return new IfcApproval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Approval", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcApprovalPropertyRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcApprovalRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcApprovalRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcApprovalRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcApprovalRelationship(SdaiInstance instance) : base(instance) { }
        public IfcApprovalRelationship() : base(0) { }

        public static implicit operator IfcApprovalRelationship(SdaiInstance instance) => new IfcApprovalRelationship(instance);

        /// <summary>
        /// Create new instace of IfcApprovalRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcApprovalRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcApprovalRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcApproval RelatedApproval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedApproval", ifcengine.sdaiINSTANCE, out inst); return new IfcApproval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedApproval", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcApproval RelatingApproval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingApproval", ifcengine.sdaiINSTANCE, out inst); return new IfcApproval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingApproval", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcApprovalRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProfileDef : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcProfileDef() : base(0) { }

        public static implicit operator IfcProfileDef(SdaiInstance instance) => new IfcProfileDef(instance);

        public IfcProfileTypeEnum? ProfileType 
            { 
            get { var str = get_string("ProfileType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProfileTypeEnum_); return EnumValue<IfcProfileTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProfileTypeEnum>.FromValue(value.Value, EnumNames.IfcProfileTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ProfileType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue ProfileName
            {
            get { return get_string("ProfileName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ProfileName", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcArbitraryClosedProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcArbitraryClosedProfileDef : IfcProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcArbitraryClosedProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcArbitraryClosedProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcArbitraryClosedProfileDef() : base(0) { }

        public static implicit operator IfcArbitraryClosedProfileDef(SdaiInstance instance) => new IfcArbitraryClosedProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcArbitraryClosedProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcArbitraryClosedProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcArbitraryClosedProfileDef"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve OuterCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OuterCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OuterCurve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcArbitraryClosedProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcArbitraryOpenProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcArbitraryOpenProfileDef : IfcProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcArbitraryOpenProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcArbitraryOpenProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcArbitraryOpenProfileDef() : base(0) { }

        public static implicit operator IfcArbitraryOpenProfileDef(SdaiInstance instance) => new IfcArbitraryOpenProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcArbitraryOpenProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcArbitraryOpenProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcArbitraryOpenProfileDef"); Debug.Assert(inst != 0); return inst; }

        public IfcBoundedCurve Curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Curve", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundedCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Curve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcArbitraryOpenProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcArbitraryProfileDefWithVoids
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcArbitraryProfileDefWithVoids : IfcArbitraryClosedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcArbitraryProfileDefWithVoids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcArbitraryProfileDefWithVoids(SdaiInstance instance) : base(instance) { }
        public IfcArbitraryProfileDefWithVoids() : base(0) { }

        public static implicit operator IfcArbitraryProfileDefWithVoids(SdaiInstance instance) => new IfcArbitraryProfileDefWithVoids(instance);

        /// <summary>
        /// Create new instace of IfcArbitraryProfileDefWithVoids and returns object of this class to interact with
        /// </summary>
        public static new IfcArbitraryProfileDefWithVoids Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcArbitraryProfileDefWithVoids"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcCurve InnerCurves { get { return (new SetOfIfcCurveSerializer()).FromAttr(m_instance, "InnerCurves"); } }
        public void put_InnerCurves(IEnumerable<IfcCurve> lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerCurves"); }
        public void put_InnerCurves_untyped(IEnumerable lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerCurves"); }

        protected override TextValue WrapperEntityName() { return "IfcArbitraryProfileDefWithVoids"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGroup
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGroup : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGroup(SdaiInstance instance) : base(instance) { }
        public IfcGroup() : base(0) { }

        public static implicit operator IfcGroup(SdaiInstance instance) => new IfcGroup(instance);

        /// <summary>
        /// Create new instace of IfcGroup and returns object of this class to interact with
        /// </summary>
        public static new IfcGroup Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGroup"); Debug.Assert(inst != 0); return inst; }

        public IfcRelAssignsToGroup IsGroupedBy { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "IsGroupedBy", ifcengine.sdaiINSTANCE, out inst); return new IfcRelAssignsToGroup(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcGroup"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAsset
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAsset : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAsset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAsset(SdaiInstance instance) : base(instance) { }
        public IfcAsset() : base(0) { }

        public static implicit operator IfcAsset(SdaiInstance instance) => new IfcAsset(instance);

        /// <summary>
        /// Create new instace of IfcAsset and returns object of this class to interact with
        /// </summary>
        public static new IfcAsset Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAsset"); Debug.Assert(inst != 0); return inst; }

        public TextValue AssetID
            {
            get { return get_string("AssetID", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "AssetID", ifcengine.sdaiSTRING, value); }
            }
        public IfcCostValue OriginalValue 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OriginalValue", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OriginalValue", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCostValue CurrentValue 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "CurrentValue", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "CurrentValue", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCostValue TotalReplacementCost 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TotalReplacementCost", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TotalReplacementCost", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcActorSelect Owner
            {
            get { return new IfcActorSelect(m_instance, "Owner", 0); }
            }

        public IfcActorSelect User
            {
            get { return new IfcActorSelect(m_instance, "User", 0); }
            }
        public IfcPerson ResponsiblePerson 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ResponsiblePerson", ifcengine.sdaiINSTANCE, out inst); return new IfcPerson(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ResponsiblePerson", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCalendarDate IncorporationDate 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "IncorporationDate", ifcengine.sdaiINSTANCE, out inst); return new IfcCalendarDate(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "IncorporationDate", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCostValue DepreciatedValue 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DepreciatedValue", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DepreciatedValue", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcAsset"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcParameterizedProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcParameterizedProfileDef : IfcProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcParameterizedProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcParameterizedProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcParameterizedProfileDef() : base(0) { }

        public static implicit operator IfcParameterizedProfileDef(SdaiInstance instance) => new IfcParameterizedProfileDef(instance);

        public IfcAxis2Placement2D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement2D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcParameterizedProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcIShapeProfileDef() : base(0) { }

        public static implicit operator IfcIShapeProfileDef(SdaiInstance instance) => new IfcIShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcIShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcIShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? OverallWidth
            {
            get { return get_double("OverallWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OverallDepth
            {
            get { return get_double("OverallDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebThickness
            {
            get { return get_double("WebThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeThickness
            {
            get { return get_double("FlangeThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FilletRadius
            {
            get { return get_double("FilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcIShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAsymmetricIShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAsymmetricIShapeProfileDef : IfcIShapeProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAsymmetricIShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAsymmetricIShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcAsymmetricIShapeProfileDef() : base(0) { }

        public static implicit operator IfcAsymmetricIShapeProfileDef(SdaiInstance instance) => new IfcAsymmetricIShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcAsymmetricIShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcAsymmetricIShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAsymmetricIShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? TopFlangeWidth
            {
            get { return get_double("TopFlangeWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopFlangeWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TopFlangeThickness
            {
            get { return get_double("TopFlangeThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopFlangeThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TopFlangeFilletRadius
            {
            get { return get_double("TopFlangeFilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopFlangeFilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CentreOfGravityInY
            {
            get { return get_double("CentreOfGravityInY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CentreOfGravityInY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcAsymmetricIShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlacement : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlacement(SdaiInstance instance) : base(instance) { }
        public IfcPlacement() : base(0) { }

        public static implicit operator IfcPlacement(SdaiInstance instance) => new IfcPlacement(instance);

        public IfcCartesianPoint Location 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Location", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Location", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcPlacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAxis1Placement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAxis1Placement : IfcPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAxis1Placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAxis1Placement(SdaiInstance instance) : base(instance) { }
        public IfcAxis1Placement() : base(0) { }

        public static implicit operator IfcAxis1Placement(SdaiInstance instance) => new IfcAxis1Placement(instance);

        /// <summary>
        /// Create new instace of IfcAxis1Placement and returns object of this class to interact with
        /// </summary>
        public static new IfcAxis1Placement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAxis1Placement"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcDirection Z { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Z", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcAxis1Placement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAxis2Placement2D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAxis2Placement2D : IfcPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAxis2Placement2D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAxis2Placement2D(SdaiInstance instance) : base(instance) { }
        public IfcAxis2Placement2D() : base(0) { }

        public static implicit operator IfcAxis2Placement2D(SdaiInstance instance) => new IfcAxis2Placement2D(instance);

        /// <summary>
        /// Create new instace of IfcAxis2Placement2D and returns object of this class to interact with
        /// </summary>
        public static new IfcAxis2Placement2D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAxis2Placement2D"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection RefDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcDirection P { get { return (new ListOfIfcDirectionSerializer()).FromAttr(m_instance, "P"); } }

        protected override TextValue WrapperEntityName() { return "IfcAxis2Placement2D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAxis2Placement3D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAxis2Placement3D : IfcPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAxis2Placement3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAxis2Placement3D(SdaiInstance instance) : base(instance) { }
        public IfcAxis2Placement3D() : base(0) { }

        public static implicit operator IfcAxis2Placement3D(SdaiInstance instance) => new IfcAxis2Placement3D(instance);

        /// <summary>
        /// Create new instace of IfcAxis2Placement3D and returns object of this class to interact with
        /// </summary>
        public static new IfcAxis2Placement3D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAxis2Placement3D"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcDirection RefDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcDirection P { get { return (new ListOfIfcDirectionSerializer()).FromAttr(m_instance, "P"); } }

        protected override TextValue WrapperEntityName() { return "IfcAxis2Placement3D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElement : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElement(SdaiInstance instance) : base(instance) { }
        public IfcElement() : base(0) { }

        public static implicit operator IfcElement(SdaiInstance instance) => new IfcElement(instance);

        public TextValue Tag
            {
            get { return get_string("Tag", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Tag", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelConnectsStructuralElement HasStructuralMember { get { return (new SetOfIfcRelConnectsStructuralElementSerializer()).FromAttr(m_instance, "HasStructuralMember"); } }
        public SetOfIfcRelFillsElement FillsVoids { get { return (new SetOfIfcRelFillsElementSerializer()).FromAttr(m_instance, "FillsVoids"); } }
        public SetOfIfcRelConnectsElements ConnectedTo { get { return (new SetOfIfcRelConnectsElementsSerializer()).FromAttr(m_instance, "ConnectedTo"); } }
        public SetOfIfcRelCoversBldgElements HasCoverings { get { return (new SetOfIfcRelCoversBldgElementsSerializer()).FromAttr(m_instance, "HasCoverings"); } }
        public SetOfIfcRelProjectsElement HasProjections { get { return (new SetOfIfcRelProjectsElementSerializer()).FromAttr(m_instance, "HasProjections"); } }
        public SetOfIfcRelReferencedInSpatialStructure ReferencedInStructures { get { return (new SetOfIfcRelReferencedInSpatialStructureSerializer()).FromAttr(m_instance, "ReferencedInStructures"); } }
        public SetOfIfcRelConnectsPortToElement HasPorts { get { return (new SetOfIfcRelConnectsPortToElementSerializer()).FromAttr(m_instance, "HasPorts"); } }
        public SetOfIfcRelVoidsElement HasOpenings { get { return (new SetOfIfcRelVoidsElementSerializer()).FromAttr(m_instance, "HasOpenings"); } }
        public SetOfIfcRelConnectsWithRealizingElements IsConnectionRealization { get { return (new SetOfIfcRelConnectsWithRealizingElementsSerializer()).FromAttr(m_instance, "IsConnectionRealization"); } }
        public SetOfIfcRelSpaceBoundary ProvidesBoundaries { get { return (new SetOfIfcRelSpaceBoundarySerializer()).FromAttr(m_instance, "ProvidesBoundaries"); } }
        public SetOfIfcRelConnectsElements ConnectedFrom { get { return (new SetOfIfcRelConnectsElementsSerializer()).FromAttr(m_instance, "ConnectedFrom"); } }
        public SetOfIfcRelContainedInSpatialStructure ContainedInStructure { get { return (new SetOfIfcRelContainedInSpatialStructureSerializer()).FromAttr(m_instance, "ContainedInStructure"); } }

        protected override TextValue WrapperEntityName() { return "IfcElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingElement(SdaiInstance instance) : base(instance) { }
        public IfcBuildingElement() : base(0) { }

        public static implicit operator IfcBuildingElement(SdaiInstance instance) => new IfcBuildingElement(instance);


        protected override TextValue WrapperEntityName() { return "IfcBuildingElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBeam
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBeam : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBeam
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBeam(SdaiInstance instance) : base(instance) { }
        public IfcBeam() : base(0) { }

        public static implicit operator IfcBeam(SdaiInstance instance) => new IfcBeam(instance);

        /// <summary>
        /// Create new instace of IfcBeam and returns object of this class to interact with
        /// </summary>
        public static new IfcBeam Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBeam"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcBeam"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingElementType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingElementType(SdaiInstance instance) : base(instance) { }
        public IfcBuildingElementType() : base(0) { }

        public static implicit operator IfcBuildingElementType(SdaiInstance instance) => new IfcBuildingElementType(instance);


        protected override TextValue WrapperEntityName() { return "IfcBuildingElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBeamType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBeamType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBeamType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBeamType(SdaiInstance instance) : base(instance) { }
        public IfcBeamType() : base(0) { }

        public static implicit operator IfcBeamType(SdaiInstance instance) => new IfcBeamType(instance);

        /// <summary>
        /// Create new instace of IfcBeamType and returns object of this class to interact with
        /// </summary>
        public static new IfcBeamType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBeamType"); Debug.Assert(inst != 0); return inst; }

        public IfcBeamTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBeamTypeEnum_); return EnumValue<IfcBeamTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBeamTypeEnum>.FromValue(value.Value, EnumNames.IfcBeamTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBeamType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBSplineCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBSplineCurve : IfcBoundedCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBSplineCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBSplineCurve(SdaiInstance instance) : base(instance) { }
        public IfcBSplineCurve() : base(0) { }

        public static implicit operator IfcBSplineCurve(SdaiInstance instance) => new IfcBSplineCurve(instance);

        public IntValue? Degree
            {
            get { return get_IntValue("Degree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Degree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public ListOfIfcCartesianPoint ControlPointsList { get { return (new ListOfIfcCartesianPointSerializer()).FromAttr(m_instance, "ControlPointsList"); } }
        public void put_ControlPointsList(IEnumerable<IfcCartesianPoint> lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "ControlPointsList"); }
        public void put_ControlPointsList_untyped(IEnumerable lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "ControlPointsList"); }
        public IfcBSplineCurveForm? CurveForm 
            { 
            get { var str = get_string("CurveForm", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBSplineCurveForm_); return EnumValue<IfcBSplineCurveForm>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBSplineCurveForm>.FromValue(value.Value, EnumNames.IfcBSplineCurveForm_); ifcengine.sdaiPutAttrBN(m_instance, "CurveForm", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? ClosedCurve 
            { 
            get { var str = get_string("ClosedCurve", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "ClosedCurve", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? SelfIntersect 
            { 
            get { var str = get_string("SelfIntersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "SelfIntersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public ArrayOfIfcCartesianPoint ControlPoints { get { return (new ArrayOfIfcCartesianPointSerializer()).FromAttr(m_instance, "ControlPoints"); } }
        public IntValue? UpperIndexOnControlPoints { get { return get_IntValue("UpperIndexOnControlPoints", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcBSplineCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBezierCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBezierCurve : IfcBSplineCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBezierCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBezierCurve(SdaiInstance instance) : base(instance) { }
        public IfcBezierCurve() : base(0) { }

        public static implicit operator IfcBezierCurve(SdaiInstance instance) => new IfcBezierCurve(instance);

        /// <summary>
        /// Create new instace of IfcBezierCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcBezierCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBezierCurve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcBezierCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceTexture
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceTexture : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceTexture(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceTexture() : base(0) { }

        public static implicit operator IfcSurfaceTexture(SdaiInstance instance) => new IfcSurfaceTexture(instance);

        public bool? RepeatS
            {
            get { return get_bool("RepeatS", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RepeatS", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? RepeatT
            {
            get { return get_bool("RepeatT", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RepeatT", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IfcSurfaceTextureEnum? TextureType 
            { 
            get { var str = get_string("TextureType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSurfaceTextureEnum_); return EnumValue<IfcSurfaceTextureEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSurfaceTextureEnum>.FromValue(value.Value, EnumNames.IfcSurfaceTextureEnum_); ifcengine.sdaiPutAttrBN(m_instance, "TextureType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcCartesianTransformationOperator2D TextureTransform 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TextureTransform", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianTransformationOperator2D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TextureTransform", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSurfaceTexture"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBlobTexture
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBlobTexture : IfcSurfaceTexture
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBlobTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBlobTexture(SdaiInstance instance) : base(instance) { }
        public IfcBlobTexture() : base(0) { }

        public static implicit operator IfcBlobTexture(SdaiInstance instance) => new IfcBlobTexture(instance);

        /// <summary>
        /// Create new instace of IfcBlobTexture and returns object of this class to interact with
        /// </summary>
        public static new IfcBlobTexture Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBlobTexture"); Debug.Assert(inst != 0); return inst; }

        public TextValue RasterFormat
            {
            get { return get_string("RasterFormat", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RasterFormat", ifcengine.sdaiSTRING, value); }
            }
        public bool? RasterCode
            {
            get { return get_bool("RasterCode", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RasterCode", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBlobTexture"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCsgPrimitive3D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCsgPrimitive3D : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCsgPrimitive3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCsgPrimitive3D(SdaiInstance instance) : base(instance) { }
        public IfcCsgPrimitive3D() : base(0) { }

        public static implicit operator IfcCsgPrimitive3D(SdaiInstance instance) => new IfcCsgPrimitive3D(instance);

        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcCsgPrimitive3D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBlock
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBlock : IfcCsgPrimitive3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBlock
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBlock(SdaiInstance instance) : base(instance) { }
        public IfcBlock() : base(0) { }

        public static implicit operator IfcBlock(SdaiInstance instance) => new IfcBlock(instance);

        /// <summary>
        /// Create new instace of IfcBlock and returns object of this class to interact with
        /// </summary>
        public static new IfcBlock Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBlock"); Debug.Assert(inst != 0); return inst; }

        public double? XLength
            {
            get { return get_double("XLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "XLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? YLength
            {
            get { return get_double("YLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ZLength
            {
            get { return get_double("ZLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ZLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBlock"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoilerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoilerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoilerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoilerType(SdaiInstance instance) : base(instance) { }
        public IfcBoilerType() : base(0) { }

        public static implicit operator IfcBoilerType(SdaiInstance instance) => new IfcBoilerType(instance);

        /// <summary>
        /// Create new instace of IfcBoilerType and returns object of this class to interact with
        /// </summary>
        public static new IfcBoilerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoilerType"); Debug.Assert(inst != 0); return inst; }

        public IfcBoilerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBoilerTypeEnum_); return EnumValue<IfcBoilerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBoilerTypeEnum>.FromValue(value.Value, EnumNames.IfcBoilerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBoilerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBooleanResult
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBooleanResult : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBooleanResult
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBooleanResult(SdaiInstance instance) : base(instance) { }
        public IfcBooleanResult() : base(0) { }

        public static implicit operator IfcBooleanResult(SdaiInstance instance) => new IfcBooleanResult(instance);

        /// <summary>
        /// Create new instace of IfcBooleanResult and returns object of this class to interact with
        /// </summary>
        public static new IfcBooleanResult Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBooleanResult"); Debug.Assert(inst != 0); return inst; }

        public IfcBooleanOperator? Operator 
            { 
            get { var str = get_string("Operator", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBooleanOperator_); return EnumValue<IfcBooleanOperator>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBooleanOperator>.FromValue(value.Value, EnumNames.IfcBooleanOperator_); ifcengine.sdaiPutAttrBN(m_instance, "Operator", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public IfcBooleanOperand FirstOperand
            {
            get { return new IfcBooleanOperand(m_instance, "FirstOperand", 0); }
            }

        public IfcBooleanOperand SecondOperand
            {
            get { return new IfcBooleanOperand(m_instance, "SecondOperand", 0); }
            }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcBooleanResult"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBooleanClippingResult
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBooleanClippingResult : IfcBooleanResult
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBooleanClippingResult
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBooleanClippingResult(SdaiInstance instance) : base(instance) { }
        public IfcBooleanClippingResult() : base(0) { }

        public static implicit operator IfcBooleanClippingResult(SdaiInstance instance) => new IfcBooleanClippingResult(instance);

        /// <summary>
        /// Create new instace of IfcBooleanClippingResult and returns object of this class to interact with
        /// </summary>
        public static new IfcBooleanClippingResult Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBooleanClippingResult"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcBooleanClippingResult"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundaryCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundaryCondition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundaryCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundaryCondition(SdaiInstance instance) : base(instance) { }
        public IfcBoundaryCondition() : base(0) { }

        public static implicit operator IfcBoundaryCondition(SdaiInstance instance) => new IfcBoundaryCondition(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBoundaryCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundaryEdgeCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundaryEdgeCondition : IfcBoundaryCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundaryEdgeCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundaryEdgeCondition(SdaiInstance instance) : base(instance) { }
        public IfcBoundaryEdgeCondition() : base(0) { }

        public static implicit operator IfcBoundaryEdgeCondition(SdaiInstance instance) => new IfcBoundaryEdgeCondition(instance);

        /// <summary>
        /// Create new instace of IfcBoundaryEdgeCondition and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundaryEdgeCondition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundaryEdgeCondition"); Debug.Assert(inst != 0); return inst; }

        public double? LinearStiffnessByLengthX
            {
            get { return get_double("LinearStiffnessByLengthX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearStiffnessByLengthX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearStiffnessByLengthY
            {
            get { return get_double("LinearStiffnessByLengthY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearStiffnessByLengthY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearStiffnessByLengthZ
            {
            get { return get_double("LinearStiffnessByLengthZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearStiffnessByLengthZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalStiffnessByLengthX
            {
            get { return get_double("RotationalStiffnessByLengthX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalStiffnessByLengthX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalStiffnessByLengthY
            {
            get { return get_double("RotationalStiffnessByLengthY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalStiffnessByLengthY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalStiffnessByLengthZ
            {
            get { return get_double("RotationalStiffnessByLengthZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalStiffnessByLengthZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBoundaryEdgeCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundaryFaceCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundaryFaceCondition : IfcBoundaryCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundaryFaceCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundaryFaceCondition(SdaiInstance instance) : base(instance) { }
        public IfcBoundaryFaceCondition() : base(0) { }

        public static implicit operator IfcBoundaryFaceCondition(SdaiInstance instance) => new IfcBoundaryFaceCondition(instance);

        /// <summary>
        /// Create new instace of IfcBoundaryFaceCondition and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundaryFaceCondition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundaryFaceCondition"); Debug.Assert(inst != 0); return inst; }

        public double? LinearStiffnessByAreaX
            {
            get { return get_double("LinearStiffnessByAreaX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearStiffnessByAreaX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearStiffnessByAreaY
            {
            get { return get_double("LinearStiffnessByAreaY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearStiffnessByAreaY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearStiffnessByAreaZ
            {
            get { return get_double("LinearStiffnessByAreaZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearStiffnessByAreaZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBoundaryFaceCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundaryNodeCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundaryNodeCondition : IfcBoundaryCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundaryNodeCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundaryNodeCondition(SdaiInstance instance) : base(instance) { }
        public IfcBoundaryNodeCondition() : base(0) { }

        public static implicit operator IfcBoundaryNodeCondition(SdaiInstance instance) => new IfcBoundaryNodeCondition(instance);

        /// <summary>
        /// Create new instace of IfcBoundaryNodeCondition and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundaryNodeCondition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundaryNodeCondition"); Debug.Assert(inst != 0); return inst; }

        public double? LinearStiffnessX
            {
            get { return get_double("LinearStiffnessX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearStiffnessX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearStiffnessY
            {
            get { return get_double("LinearStiffnessY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearStiffnessY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearStiffnessZ
            {
            get { return get_double("LinearStiffnessZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearStiffnessZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalStiffnessX
            {
            get { return get_double("RotationalStiffnessX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalStiffnessX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalStiffnessY
            {
            get { return get_double("RotationalStiffnessY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalStiffnessY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalStiffnessZ
            {
            get { return get_double("RotationalStiffnessZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalStiffnessZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBoundaryNodeCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundaryNodeConditionWarping
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundaryNodeConditionWarping : IfcBoundaryNodeCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundaryNodeConditionWarping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundaryNodeConditionWarping(SdaiInstance instance) : base(instance) { }
        public IfcBoundaryNodeConditionWarping() : base(0) { }

        public static implicit operator IfcBoundaryNodeConditionWarping(SdaiInstance instance) => new IfcBoundaryNodeConditionWarping(instance);

        /// <summary>
        /// Create new instace of IfcBoundaryNodeConditionWarping and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundaryNodeConditionWarping Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundaryNodeConditionWarping"); Debug.Assert(inst != 0); return inst; }

        public double? WarpingStiffness
            {
            get { return get_double("WarpingStiffness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WarpingStiffness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBoundaryNodeConditionWarping"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurface : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurface(SdaiInstance instance) : base(instance) { }
        public IfcSurface() : base(0) { }

        public static implicit operator IfcSurface(SdaiInstance instance) => new IfcSurface(instance);


        protected override TextValue WrapperEntityName() { return "IfcSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundedSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundedSurface : IfcSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundedSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundedSurface(SdaiInstance instance) : base(instance) { }
        public IfcBoundedSurface() : base(0) { }

        public static implicit operator IfcBoundedSurface(SdaiInstance instance) => new IfcBoundedSurface(instance);

        /// <summary>
        /// Create new instace of IfcBoundedSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundedSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundedSurface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcBoundedSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundingBox
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundingBox : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundingBox
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundingBox(SdaiInstance instance) : base(instance) { }
        public IfcBoundingBox() : base(0) { }

        public static implicit operator IfcBoundingBox(SdaiInstance instance) => new IfcBoundingBox(instance);

        /// <summary>
        /// Create new instace of IfcBoundingBox and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundingBox Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundingBox"); Debug.Assert(inst != 0); return inst; }

        public IfcCartesianPoint Corner 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Corner", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Corner", ifcengine.sdaiINSTANCE, i); }
            }
        public double? XDim
            {
            get { return get_double("XDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "XDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? YDim
            {
            get { return get_double("YDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ZDim
            {
            get { return get_double("ZDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ZDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcBoundingBox"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcHalfSpaceSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcHalfSpaceSolid : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcHalfSpaceSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcHalfSpaceSolid(SdaiInstance instance) : base(instance) { }
        public IfcHalfSpaceSolid() : base(0) { }

        public static implicit operator IfcHalfSpaceSolid(SdaiInstance instance) => new IfcHalfSpaceSolid(instance);

        /// <summary>
        /// Create new instace of IfcHalfSpaceSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcHalfSpaceSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcHalfSpaceSolid"); Debug.Assert(inst != 0); return inst; }

        public IfcSurface BaseSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BaseSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BaseSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? AgreementFlag
            {
            get { return get_bool("AgreementFlag", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AgreementFlag", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcHalfSpaceSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoxedHalfSpace
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoxedHalfSpace : IfcHalfSpaceSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoxedHalfSpace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoxedHalfSpace(SdaiInstance instance) : base(instance) { }
        public IfcBoxedHalfSpace() : base(0) { }

        public static implicit operator IfcBoxedHalfSpace(SdaiInstance instance) => new IfcBoxedHalfSpace(instance);

        /// <summary>
        /// Create new instace of IfcBoxedHalfSpace and returns object of this class to interact with
        /// </summary>
        public static new IfcBoxedHalfSpace Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoxedHalfSpace"); Debug.Assert(inst != 0); return inst; }

        public IfcBoundingBox Enclosure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Enclosure", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundingBox(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Enclosure", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBoxedHalfSpace"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpatialStructureElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpatialStructureElement : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpatialStructureElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpatialStructureElement(SdaiInstance instance) : base(instance) { }
        public IfcSpatialStructureElement() : base(0) { }

        public static implicit operator IfcSpatialStructureElement(SdaiInstance instance) => new IfcSpatialStructureElement(instance);

        public TextValue LongName
            {
            get { return get_string("LongName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongName", ifcengine.sdaiSTRING, value); }
            }
        public IfcElementCompositionEnum? CompositionType 
            { 
            get { var str = get_string("CompositionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElementCompositionEnum_); return EnumValue<IfcElementCompositionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElementCompositionEnum>.FromValue(value.Value, EnumNames.IfcElementCompositionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "CompositionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcRelReferencedInSpatialStructure ReferencesElements { get { return (new SetOfIfcRelReferencedInSpatialStructureSerializer()).FromAttr(m_instance, "ReferencesElements"); } }
        public SetOfIfcRelServicesBuildings ServicedBySystems { get { return (new SetOfIfcRelServicesBuildingsSerializer()).FromAttr(m_instance, "ServicedBySystems"); } }
        public SetOfIfcRelContainedInSpatialStructure ContainsElements { get { return (new SetOfIfcRelContainedInSpatialStructureSerializer()).FromAttr(m_instance, "ContainsElements"); } }

        protected override TextValue WrapperEntityName() { return "IfcSpatialStructureElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuilding
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuilding : IfcSpatialStructureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuilding
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuilding(SdaiInstance instance) : base(instance) { }
        public IfcBuilding() : base(0) { }

        public static implicit operator IfcBuilding(SdaiInstance instance) => new IfcBuilding(instance);

        /// <summary>
        /// Create new instace of IfcBuilding and returns object of this class to interact with
        /// </summary>
        public static new IfcBuilding Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuilding"); Debug.Assert(inst != 0); return inst; }

        public double? ElevationOfRefHeight
            {
            get { return get_double("ElevationOfRefHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ElevationOfRefHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ElevationOfTerrain
            {
            get { return get_double("ElevationOfTerrain", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ElevationOfTerrain", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcPostalAddress BuildingAddress 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BuildingAddress", ifcengine.sdaiINSTANCE, out inst); return new IfcPostalAddress(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BuildingAddress", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBuilding"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingElementComponent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingElementComponent : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingElementComponent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingElementComponent(SdaiInstance instance) : base(instance) { }
        public IfcBuildingElementComponent() : base(0) { }

        public static implicit operator IfcBuildingElementComponent(SdaiInstance instance) => new IfcBuildingElementComponent(instance);


        protected override TextValue WrapperEntityName() { return "IfcBuildingElementComponent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingElementPart
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingElementPart : IfcBuildingElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingElementPart
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingElementPart(SdaiInstance instance) : base(instance) { }
        public IfcBuildingElementPart() : base(0) { }

        public static implicit operator IfcBuildingElementPart(SdaiInstance instance) => new IfcBuildingElementPart(instance);

        /// <summary>
        /// Create new instace of IfcBuildingElementPart and returns object of this class to interact with
        /// </summary>
        public static new IfcBuildingElementPart Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuildingElementPart"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcBuildingElementPart"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingElementProxy
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingElementProxy : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingElementProxy
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingElementProxy(SdaiInstance instance) : base(instance) { }
        public IfcBuildingElementProxy() : base(0) { }

        public static implicit operator IfcBuildingElementProxy(SdaiInstance instance) => new IfcBuildingElementProxy(instance);

        /// <summary>
        /// Create new instace of IfcBuildingElementProxy and returns object of this class to interact with
        /// </summary>
        public static new IfcBuildingElementProxy Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuildingElementProxy"); Debug.Assert(inst != 0); return inst; }

        public IfcElementCompositionEnum? CompositionType 
            { 
            get { var str = get_string("CompositionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElementCompositionEnum_); return EnumValue<IfcElementCompositionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElementCompositionEnum>.FromValue(value.Value, EnumNames.IfcElementCompositionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "CompositionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBuildingElementProxy"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingElementProxyType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingElementProxyType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingElementProxyType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingElementProxyType(SdaiInstance instance) : base(instance) { }
        public IfcBuildingElementProxyType() : base(0) { }

        public static implicit operator IfcBuildingElementProxyType(SdaiInstance instance) => new IfcBuildingElementProxyType(instance);

        /// <summary>
        /// Create new instace of IfcBuildingElementProxyType and returns object of this class to interact with
        /// </summary>
        public static new IfcBuildingElementProxyType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuildingElementProxyType"); Debug.Assert(inst != 0); return inst; }

        public IfcBuildingElementProxyTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBuildingElementProxyTypeEnum_); return EnumValue<IfcBuildingElementProxyTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBuildingElementProxyTypeEnum>.FromValue(value.Value, EnumNames.IfcBuildingElementProxyTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBuildingElementProxyType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingStorey
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingStorey : IfcSpatialStructureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingStorey
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingStorey(SdaiInstance instance) : base(instance) { }
        public IfcBuildingStorey() : base(0) { }

        public static implicit operator IfcBuildingStorey(SdaiInstance instance) => new IfcBuildingStorey(instance);

        /// <summary>
        /// Create new instace of IfcBuildingStorey and returns object of this class to interact with
        /// </summary>
        public static new IfcBuildingStorey Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuildingStorey"); Debug.Assert(inst != 0); return inst; }

        public double? Elevation
            {
            get { return get_double("Elevation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Elevation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcBuildingStorey"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowFittingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowFittingType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowFittingType(SdaiInstance instance) : base(instance) { }
        public IfcFlowFittingType() : base(0) { }

        public static implicit operator IfcFlowFittingType(SdaiInstance instance) => new IfcFlowFittingType(instance);


        protected override TextValue WrapperEntityName() { return "IfcFlowFittingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCableCarrierFittingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCableCarrierFittingType : IfcFlowFittingType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCableCarrierFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCableCarrierFittingType(SdaiInstance instance) : base(instance) { }
        public IfcCableCarrierFittingType() : base(0) { }

        public static implicit operator IfcCableCarrierFittingType(SdaiInstance instance) => new IfcCableCarrierFittingType(instance);

        /// <summary>
        /// Create new instace of IfcCableCarrierFittingType and returns object of this class to interact with
        /// </summary>
        public static new IfcCableCarrierFittingType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCableCarrierFittingType"); Debug.Assert(inst != 0); return inst; }

        public IfcCableCarrierFittingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCableCarrierFittingTypeEnum_); return EnumValue<IfcCableCarrierFittingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCableCarrierFittingTypeEnum>.FromValue(value.Value, EnumNames.IfcCableCarrierFittingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCableCarrierFittingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowSegmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowSegmentType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowSegmentType(SdaiInstance instance) : base(instance) { }
        public IfcFlowSegmentType() : base(0) { }

        public static implicit operator IfcFlowSegmentType(SdaiInstance instance) => new IfcFlowSegmentType(instance);


        protected override TextValue WrapperEntityName() { return "IfcFlowSegmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCableCarrierSegmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCableCarrierSegmentType : IfcFlowSegmentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCableCarrierSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCableCarrierSegmentType(SdaiInstance instance) : base(instance) { }
        public IfcCableCarrierSegmentType() : base(0) { }

        public static implicit operator IfcCableCarrierSegmentType(SdaiInstance instance) => new IfcCableCarrierSegmentType(instance);

        /// <summary>
        /// Create new instace of IfcCableCarrierSegmentType and returns object of this class to interact with
        /// </summary>
        public static new IfcCableCarrierSegmentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCableCarrierSegmentType"); Debug.Assert(inst != 0); return inst; }

        public IfcCableCarrierSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCableCarrierSegmentTypeEnum_); return EnumValue<IfcCableCarrierSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCableCarrierSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcCableCarrierSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCableCarrierSegmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCableSegmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCableSegmentType : IfcFlowSegmentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCableSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCableSegmentType(SdaiInstance instance) : base(instance) { }
        public IfcCableSegmentType() : base(0) { }

        public static implicit operator IfcCableSegmentType(SdaiInstance instance) => new IfcCableSegmentType(instance);

        /// <summary>
        /// Create new instace of IfcCableSegmentType and returns object of this class to interact with
        /// </summary>
        public static new IfcCableSegmentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCableSegmentType"); Debug.Assert(inst != 0); return inst; }

        public IfcCableSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCableSegmentTypeEnum_); return EnumValue<IfcCableSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCableSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcCableSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCableSegmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCalendarDate
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCalendarDate : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCalendarDate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCalendarDate(SdaiInstance instance) : base(instance) { }
        public IfcCalendarDate() : base(0) { }

        public static implicit operator IfcCalendarDate(SdaiInstance instance) => new IfcCalendarDate(instance);

        /// <summary>
        /// Create new instace of IfcCalendarDate and returns object of this class to interact with
        /// </summary>
        public static new IfcCalendarDate Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCalendarDate"); Debug.Assert(inst != 0); return inst; }

        public IntValue? DayComponent
            {
            get { return get_IntValue("DayComponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DayComponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? MonthComponent
            {
            get { return get_IntValue("MonthComponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MonthComponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? YearComponent
            {
            get { return get_IntValue("YearComponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YearComponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCalendarDate"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPoint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPoint : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPoint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPoint(SdaiInstance instance) : base(instance) { }
        public IfcPoint() : base(0) { }

        public static implicit operator IfcPoint(SdaiInstance instance) => new IfcPoint(instance);


        protected override TextValue WrapperEntityName() { return "IfcPoint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianPoint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianPoint : IfcPoint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianPoint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianPoint(SdaiInstance instance) : base(instance) { }
        public IfcCartesianPoint() : base(0) { }

        public static implicit operator IfcCartesianPoint(SdaiInstance instance) => new IfcCartesianPoint(instance);

        /// <summary>
        /// Create new instace of IfcCartesianPoint and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianPoint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianPoint"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcLengthMeasure Coordinates { get { return (new ListOfIfcLengthMeasureSerializer()).FromAttr(m_instance, "Coordinates"); } }
        public void put_Coordinates(IEnumerable<double> lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "Coordinates"); }
        public void put_Coordinates_untyped(IEnumerable lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "Coordinates"); }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcCartesianPoint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianTransformationOperator : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianTransformationOperator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianTransformationOperator(SdaiInstance instance) : base(instance) { }
        public IfcCartesianTransformationOperator() : base(0) { }

        public static implicit operator IfcCartesianTransformationOperator(SdaiInstance instance) => new IfcCartesianTransformationOperator(instance);

        public IfcDirection Axis1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis1", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis1", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcDirection Axis2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis2", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis2", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCartesianPoint LocalOrigin 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LocalOrigin", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LocalOrigin", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Scale
            {
            get { return get_double("Scale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Scale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Scl { get { return get_double("Scl", ifcengine.sdaiREAL); } }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcCartesianTransformationOperator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator2D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianTransformationOperator2D : IfcCartesianTransformationOperator
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianTransformationOperator2D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianTransformationOperator2D(SdaiInstance instance) : base(instance) { }
        public IfcCartesianTransformationOperator2D() : base(0) { }

        public static implicit operator IfcCartesianTransformationOperator2D(SdaiInstance instance) => new IfcCartesianTransformationOperator2D(instance);

        /// <summary>
        /// Create new instace of IfcCartesianTransformationOperator2D and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianTransformationOperator2D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator2D"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcDirection U { get { return (new ListOfIfcDirectionSerializer()).FromAttr(m_instance, "U"); } }

        protected override TextValue WrapperEntityName() { return "IfcCartesianTransformationOperator2D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator2DnonUniform
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianTransformationOperator2DnonUniform : IfcCartesianTransformationOperator2D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianTransformationOperator2DnonUniform
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianTransformationOperator2DnonUniform(SdaiInstance instance) : base(instance) { }
        public IfcCartesianTransformationOperator2DnonUniform() : base(0) { }

        public static implicit operator IfcCartesianTransformationOperator2DnonUniform(SdaiInstance instance) => new IfcCartesianTransformationOperator2DnonUniform(instance);

        /// <summary>
        /// Create new instace of IfcCartesianTransformationOperator2DnonUniform and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianTransformationOperator2DnonUniform Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator2DnonUniform"); Debug.Assert(inst != 0); return inst; }

        public double? Scale2
            {
            get { return get_double("Scale2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Scale2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Scl2 { get { return get_double("Scl2", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "IfcCartesianTransformationOperator2DnonUniform"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator3D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianTransformationOperator3D : IfcCartesianTransformationOperator
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianTransformationOperator3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianTransformationOperator3D(SdaiInstance instance) : base(instance) { }
        public IfcCartesianTransformationOperator3D() : base(0) { }

        public static implicit operator IfcCartesianTransformationOperator3D(SdaiInstance instance) => new IfcCartesianTransformationOperator3D(instance);

        /// <summary>
        /// Create new instace of IfcCartesianTransformationOperator3D and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianTransformationOperator3D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator3D"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Axis3 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis3", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis3", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcDirection U { get { return (new ListOfIfcDirectionSerializer()).FromAttr(m_instance, "U"); } }

        protected override TextValue WrapperEntityName() { return "IfcCartesianTransformationOperator3D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator3DnonUniform
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianTransformationOperator3DnonUniform : IfcCartesianTransformationOperator3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianTransformationOperator3DnonUniform
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianTransformationOperator3DnonUniform(SdaiInstance instance) : base(instance) { }
        public IfcCartesianTransformationOperator3DnonUniform() : base(0) { }

        public static implicit operator IfcCartesianTransformationOperator3DnonUniform(SdaiInstance instance) => new IfcCartesianTransformationOperator3DnonUniform(instance);

        /// <summary>
        /// Create new instace of IfcCartesianTransformationOperator3DnonUniform and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianTransformationOperator3DnonUniform Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator3DnonUniform"); Debug.Assert(inst != 0); return inst; }

        public double? Scale2
            {
            get { return get_double("Scale2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Scale2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Scale3
            {
            get { return get_double("Scale3", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Scale3", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Scl2 { get { return get_double("Scl2", ifcengine.sdaiREAL); } }
        public double? Scl3 { get { return get_double("Scl3", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "IfcCartesianTransformationOperator3DnonUniform"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCenterLineProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCenterLineProfileDef : IfcArbitraryOpenProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCenterLineProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCenterLineProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCenterLineProfileDef() : base(0) { }

        public static implicit operator IfcCenterLineProfileDef(SdaiInstance instance) => new IfcCenterLineProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCenterLineProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCenterLineProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCenterLineProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Thickness
            {
            get { return get_double("Thickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Thickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCenterLineProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFeatureElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFeatureElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFeatureElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFeatureElement(SdaiInstance instance) : base(instance) { }
        public IfcFeatureElement() : base(0) { }

        public static implicit operator IfcFeatureElement(SdaiInstance instance) => new IfcFeatureElement(instance);


        protected override TextValue WrapperEntityName() { return "IfcFeatureElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFeatureElementSubtraction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFeatureElementSubtraction : IfcFeatureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFeatureElementSubtraction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFeatureElementSubtraction(SdaiInstance instance) : base(instance) { }
        public IfcFeatureElementSubtraction() : base(0) { }

        public static implicit operator IfcFeatureElementSubtraction(SdaiInstance instance) => new IfcFeatureElementSubtraction(instance);

        public IfcRelVoidsElement VoidsElements { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "VoidsElements", ifcengine.sdaiINSTANCE, out inst); return new IfcRelVoidsElement(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcFeatureElementSubtraction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEdgeFeature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEdgeFeature : IfcFeatureElementSubtraction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEdgeFeature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEdgeFeature(SdaiInstance instance) : base(instance) { }
        public IfcEdgeFeature() : base(0) { }

        public static implicit operator IfcEdgeFeature(SdaiInstance instance) => new IfcEdgeFeature(instance);

        public double? FeatureLength
            {
            get { return get_double("FeatureLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FeatureLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcEdgeFeature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcChamferEdgeFeature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcChamferEdgeFeature : IfcEdgeFeature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcChamferEdgeFeature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcChamferEdgeFeature(SdaiInstance instance) : base(instance) { }
        public IfcChamferEdgeFeature() : base(0) { }

        public static implicit operator IfcChamferEdgeFeature(SdaiInstance instance) => new IfcChamferEdgeFeature(instance);

        /// <summary>
        /// Create new instace of IfcChamferEdgeFeature and returns object of this class to interact with
        /// </summary>
        public static new IfcChamferEdgeFeature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcChamferEdgeFeature"); Debug.Assert(inst != 0); return inst; }

        public double? Width
            {
            get { return get_double("Width", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Width", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Height
            {
            get { return get_double("Height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcChamferEdgeFeature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcChillerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcChillerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcChillerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcChillerType(SdaiInstance instance) : base(instance) { }
        public IfcChillerType() : base(0) { }

        public static implicit operator IfcChillerType(SdaiInstance instance) => new IfcChillerType(instance);

        /// <summary>
        /// Create new instace of IfcChillerType and returns object of this class to interact with
        /// </summary>
        public static new IfcChillerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcChillerType"); Debug.Assert(inst != 0); return inst; }

        public IfcChillerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcChillerTypeEnum_); return EnumValue<IfcChillerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcChillerTypeEnum>.FromValue(value.Value, EnumNames.IfcChillerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcChillerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConic : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConic(SdaiInstance instance) : base(instance) { }
        public IfcConic() : base(0) { }

        public static implicit operator IfcConic(SdaiInstance instance) => new IfcConic(instance);


        public IfcAxis2Placement Position
            {
            get { return new IfcAxis2Placement(m_instance, "Position", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcConic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCircle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCircle : IfcConic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCircle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCircle(SdaiInstance instance) : base(instance) { }
        public IfcCircle() : base(0) { }

        public static implicit operator IfcCircle(SdaiInstance instance) => new IfcCircle(instance);

        /// <summary>
        /// Create new instace of IfcCircle and returns object of this class to interact with
        /// </summary>
        public static new IfcCircle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCircle"); Debug.Assert(inst != 0); return inst; }

        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCircle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCircleProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCircleProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCircleProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCircleProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCircleProfileDef() : base(0) { }

        public static implicit operator IfcCircleProfileDef(SdaiInstance instance) => new IfcCircleProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCircleProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCircleProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCircleProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCircleProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCircleHollowProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCircleHollowProfileDef : IfcCircleProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCircleHollowProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCircleHollowProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCircleHollowProfileDef() : base(0) { }

        public static implicit operator IfcCircleHollowProfileDef(SdaiInstance instance) => new IfcCircleHollowProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCircleHollowProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCircleHollowProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCircleHollowProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? WallThickness
            {
            get { return get_double("WallThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WallThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCircleHollowProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcClassification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcClassification : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcClassification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcClassification(SdaiInstance instance) : base(instance) { }
        public IfcClassification() : base(0) { }

        public static implicit operator IfcClassification(SdaiInstance instance) => new IfcClassification(instance);

        /// <summary>
        /// Create new instace of IfcClassification and returns object of this class to interact with
        /// </summary>
        public static new IfcClassification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcClassification"); Debug.Assert(inst != 0); return inst; }

        public TextValue Source
            {
            get { return get_string("Source", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Source", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Edition
            {
            get { return get_string("Edition", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Edition", ifcengine.sdaiSTRING, value); }
            }
        public IfcCalendarDate EditionDate 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EditionDate", ifcengine.sdaiINSTANCE, out inst); return new IfcCalendarDate(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EditionDate", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcClassificationItem Contains { get { return (new SetOfIfcClassificationItemSerializer()).FromAttr(m_instance, "Contains"); } }

        protected override TextValue WrapperEntityName() { return "IfcClassification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcClassificationItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcClassificationItem : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcClassificationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcClassificationItem(SdaiInstance instance) : base(instance) { }
        public IfcClassificationItem() : base(0) { }

        public static implicit operator IfcClassificationItem(SdaiInstance instance) => new IfcClassificationItem(instance);

        /// <summary>
        /// Create new instace of IfcClassificationItem and returns object of this class to interact with
        /// </summary>
        public static new IfcClassificationItem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcClassificationItem"); Debug.Assert(inst != 0); return inst; }

        public IfcClassificationNotationFacet Notation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Notation", ifcengine.sdaiINSTANCE, out inst); return new IfcClassificationNotationFacet(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Notation", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcClassification ItemOf 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ItemOf", ifcengine.sdaiINSTANCE, out inst); return new IfcClassification(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ItemOf", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue Title
            {
            get { return get_string("Title", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Title", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcClassificationItemRelationship IsClassifiedItemIn { get { return (new SetOfIfcClassificationItemRelationshipSerializer()).FromAttr(m_instance, "IsClassifiedItemIn"); } }
        public SetOfIfcClassificationItemRelationship IsClassifyingItemIn { get { return (new SetOfIfcClassificationItemRelationshipSerializer()).FromAttr(m_instance, "IsClassifyingItemIn"); } }

        protected override TextValue WrapperEntityName() { return "IfcClassificationItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcClassificationItemRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcClassificationItemRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcClassificationItemRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcClassificationItemRelationship(SdaiInstance instance) : base(instance) { }
        public IfcClassificationItemRelationship() : base(0) { }

        public static implicit operator IfcClassificationItemRelationship(SdaiInstance instance) => new IfcClassificationItemRelationship(instance);

        /// <summary>
        /// Create new instace of IfcClassificationItemRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcClassificationItemRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcClassificationItemRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcClassificationItem RelatingItem 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingItem", ifcengine.sdaiINSTANCE, out inst); return new IfcClassificationItem(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingItem", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcClassificationItem RelatedItems { get { return (new SetOfIfcClassificationItemSerializer()).FromAttr(m_instance, "RelatedItems"); } }
        public void put_RelatedItems(IEnumerable<IfcClassificationItem> lst) { (new SetOfIfcClassificationItemSerializer()).ToSdaiAggr(lst, m_instance, "RelatedItems"); }
        public void put_RelatedItems_untyped(IEnumerable lst) { (new SetOfIfcClassificationItemSerializer()).ToSdaiAggr(lst, m_instance, "RelatedItems"); }

        protected override TextValue WrapperEntityName() { return "IfcClassificationItemRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcClassificationNotation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcClassificationNotation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcClassificationNotation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcClassificationNotation(SdaiInstance instance) : base(instance) { }
        public IfcClassificationNotation() : base(0) { }

        public static implicit operator IfcClassificationNotation(SdaiInstance instance) => new IfcClassificationNotation(instance);

        /// <summary>
        /// Create new instace of IfcClassificationNotation and returns object of this class to interact with
        /// </summary>
        public static new IfcClassificationNotation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcClassificationNotation"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcClassificationNotationFacet NotationFacets { get { return (new SetOfIfcClassificationNotationFacetSerializer()).FromAttr(m_instance, "NotationFacets"); } }
        public void put_NotationFacets(IEnumerable<IfcClassificationNotationFacet> lst) { (new SetOfIfcClassificationNotationFacetSerializer()).ToSdaiAggr(lst, m_instance, "NotationFacets"); }
        public void put_NotationFacets_untyped(IEnumerable lst) { (new SetOfIfcClassificationNotationFacetSerializer()).ToSdaiAggr(lst, m_instance, "NotationFacets"); }

        protected override TextValue WrapperEntityName() { return "IfcClassificationNotation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcClassificationNotationFacet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcClassificationNotationFacet : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcClassificationNotationFacet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcClassificationNotationFacet(SdaiInstance instance) : base(instance) { }
        public IfcClassificationNotationFacet() : base(0) { }

        public static implicit operator IfcClassificationNotationFacet(SdaiInstance instance) => new IfcClassificationNotationFacet(instance);

        /// <summary>
        /// Create new instace of IfcClassificationNotationFacet and returns object of this class to interact with
        /// </summary>
        public static new IfcClassificationNotationFacet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcClassificationNotationFacet"); Debug.Assert(inst != 0); return inst; }

        public TextValue NotationValue
            {
            get { return get_string("NotationValue", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "NotationValue", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcClassificationNotationFacet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternalReference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternalReference : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternalReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternalReference(SdaiInstance instance) : base(instance) { }
        public IfcExternalReference() : base(0) { }

        public static implicit operator IfcExternalReference(SdaiInstance instance) => new IfcExternalReference(instance);

        public TextValue Location
            {
            get { return get_string("Location", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Location", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ItemReference
            {
            get { return get_string("ItemReference", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ItemReference", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcExternalReference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcClassificationReference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcClassificationReference : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcClassificationReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcClassificationReference(SdaiInstance instance) : base(instance) { }
        public IfcClassificationReference() : base(0) { }

        public static implicit operator IfcClassificationReference(SdaiInstance instance) => new IfcClassificationReference(instance);

        /// <summary>
        /// Create new instace of IfcClassificationReference and returns object of this class to interact with
        /// </summary>
        public static new IfcClassificationReference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcClassificationReference"); Debug.Assert(inst != 0); return inst; }

        public IfcClassification ReferencedSource 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ReferencedSource", ifcengine.sdaiINSTANCE, out inst); return new IfcClassification(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ReferencedSource", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcClassificationReference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTopologicalRepresentationItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTopologicalRepresentationItem : IfcRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTopologicalRepresentationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTopologicalRepresentationItem(SdaiInstance instance) : base(instance) { }
        public IfcTopologicalRepresentationItem() : base(0) { }

        public static implicit operator IfcTopologicalRepresentationItem(SdaiInstance instance) => new IfcTopologicalRepresentationItem(instance);


        protected override TextValue WrapperEntityName() { return "IfcTopologicalRepresentationItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectedFaceSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectedFaceSet : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectedFaceSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectedFaceSet(SdaiInstance instance) : base(instance) { }
        public IfcConnectedFaceSet() : base(0) { }

        public static implicit operator IfcConnectedFaceSet(SdaiInstance instance) => new IfcConnectedFaceSet(instance);

        /// <summary>
        /// Create new instace of IfcConnectedFaceSet and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectedFaceSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectedFaceSet"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcFace CfsFaces { get { return (new SetOfIfcFaceSerializer()).FromAttr(m_instance, "CfsFaces"); } }
        public void put_CfsFaces(IEnumerable<IfcFace> lst) { (new SetOfIfcFaceSerializer()).ToSdaiAggr(lst, m_instance, "CfsFaces"); }
        public void put_CfsFaces_untyped(IEnumerable lst) { (new SetOfIfcFaceSerializer()).ToSdaiAggr(lst, m_instance, "CfsFaces"); }

        protected override TextValue WrapperEntityName() { return "IfcConnectedFaceSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcClosedShell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcClosedShell : IfcConnectedFaceSet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcClosedShell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcClosedShell(SdaiInstance instance) : base(instance) { }
        public IfcClosedShell() : base(0) { }

        public static implicit operator IfcClosedShell(SdaiInstance instance) => new IfcClosedShell(instance);

        /// <summary>
        /// Create new instace of IfcClosedShell and returns object of this class to interact with
        /// </summary>
        public static new IfcClosedShell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcClosedShell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcClosedShell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCoilType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCoilType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCoilType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCoilType(SdaiInstance instance) : base(instance) { }
        public IfcCoilType() : base(0) { }

        public static implicit operator IfcCoilType(SdaiInstance instance) => new IfcCoilType(instance);

        /// <summary>
        /// Create new instace of IfcCoilType and returns object of this class to interact with
        /// </summary>
        public static new IfcCoilType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCoilType"); Debug.Assert(inst != 0); return inst; }

        public IfcCoilTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCoilTypeEnum_); return EnumValue<IfcCoilTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCoilTypeEnum>.FromValue(value.Value, EnumNames.IfcCoilTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCoilType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcColourSpecification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcColourSpecification : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcColourSpecification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcColourSpecification(SdaiInstance instance) : base(instance) { }
        public IfcColourSpecification() : base(0) { }

        public static implicit operator IfcColourSpecification(SdaiInstance instance) => new IfcColourSpecification(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcColourSpecification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcColourRgb
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcColourRgb : IfcColourSpecification
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcColourRgb
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcColourRgb(SdaiInstance instance) : base(instance) { }
        public IfcColourRgb() : base(0) { }

        public static implicit operator IfcColourRgb(SdaiInstance instance) => new IfcColourRgb(instance);

        /// <summary>
        /// Create new instace of IfcColourRgb and returns object of this class to interact with
        /// </summary>
        public static new IfcColourRgb Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcColourRgb"); Debug.Assert(inst != 0); return inst; }

        public double? Red
            {
            get { return get_double("Red", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Red", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Green
            {
            get { return get_double("Green", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Green", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Blue
            {
            get { return get_double("Blue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Blue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcColourRgb"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcColumn
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcColumn : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcColumn
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcColumn(SdaiInstance instance) : base(instance) { }
        public IfcColumn() : base(0) { }

        public static implicit operator IfcColumn(SdaiInstance instance) => new IfcColumn(instance);

        /// <summary>
        /// Create new instace of IfcColumn and returns object of this class to interact with
        /// </summary>
        public static new IfcColumn Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcColumn"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcColumn"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcColumnType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcColumnType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcColumnType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcColumnType(SdaiInstance instance) : base(instance) { }
        public IfcColumnType() : base(0) { }

        public static implicit operator IfcColumnType(SdaiInstance instance) => new IfcColumnType(instance);

        /// <summary>
        /// Create new instace of IfcColumnType and returns object of this class to interact with
        /// </summary>
        public static new IfcColumnType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcColumnType"); Debug.Assert(inst != 0); return inst; }

        public IfcColumnTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcColumnTypeEnum_); return EnumValue<IfcColumnTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcColumnTypeEnum>.FromValue(value.Value, EnumNames.IfcColumnTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcColumnType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProperty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProperty : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProperty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProperty(SdaiInstance instance) : base(instance) { }
        public IfcProperty() : base(0) { }

        public static implicit operator IfcProperty(SdaiInstance instance) => new IfcProperty(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcPropertyDependencyRelationship PropertyForDependance { get { return (new SetOfIfcPropertyDependencyRelationshipSerializer()).FromAttr(m_instance, "PropertyForDependance"); } }
        public SetOfIfcPropertyDependencyRelationship PropertyDependsOn { get { return (new SetOfIfcPropertyDependencyRelationshipSerializer()).FromAttr(m_instance, "PropertyDependsOn"); } }
        public SetOfIfcComplexProperty PartOfComplex { get { return (new SetOfIfcComplexPropertySerializer()).FromAttr(m_instance, "PartOfComplex"); } }

        protected override TextValue WrapperEntityName() { return "IfcProperty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcComplexProperty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcComplexProperty : IfcProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcComplexProperty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcComplexProperty(SdaiInstance instance) : base(instance) { }
        public IfcComplexProperty() : base(0) { }

        public static implicit operator IfcComplexProperty(SdaiInstance instance) => new IfcComplexProperty(instance);

        /// <summary>
        /// Create new instace of IfcComplexProperty and returns object of this class to interact with
        /// </summary>
        public static new IfcComplexProperty Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcComplexProperty"); Debug.Assert(inst != 0); return inst; }

        public TextValue UsageName
            {
            get { return get_string("UsageName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UsageName", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcProperty HasProperties { get { return (new SetOfIfcPropertySerializer()).FromAttr(m_instance, "HasProperties"); } }
        public void put_HasProperties(IEnumerable<IfcProperty> lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "HasProperties"); }
        public void put_HasProperties_untyped(IEnumerable lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "HasProperties"); }

        protected override TextValue WrapperEntityName() { return "IfcComplexProperty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCompositeCurveSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCompositeCurveSegment : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCompositeCurveSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCompositeCurveSegment(SdaiInstance instance) : base(instance) { }
        public IfcCompositeCurveSegment() : base(0) { }

        public static implicit operator IfcCompositeCurveSegment(SdaiInstance instance) => new IfcCompositeCurveSegment(instance);

        /// <summary>
        /// Create new instace of IfcCompositeCurveSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcCompositeCurveSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCompositeCurveSegment"); Debug.Assert(inst != 0); return inst; }

        public IfcTransitionCode? Transition 
            { 
            get { var str = get_string("Transition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTransitionCode_); return EnumValue<IfcTransitionCode>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTransitionCode>.FromValue(value.Value, EnumNames.IfcTransitionCode_); ifcengine.sdaiPutAttrBN(m_instance, "Transition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? SameSense
            {
            get { return get_bool("SameSense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SameSense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IfcCurve ParentCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ParentCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ParentCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcCompositeCurve UsingCurves { get { return (new SetOfIfcCompositeCurveSerializer()).FromAttr(m_instance, "UsingCurves"); } }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcCompositeCurveSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCompositeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCompositeProfileDef : IfcProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCompositeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCompositeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCompositeProfileDef() : base(0) { }

        public static implicit operator IfcCompositeProfileDef(SdaiInstance instance) => new IfcCompositeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCompositeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCompositeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCompositeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProfileDef Profiles { get { return (new SetOfIfcProfileDefSerializer()).FromAttr(m_instance, "Profiles"); } }
        public void put_Profiles(IEnumerable<IfcProfileDef> lst) { (new SetOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "Profiles"); }
        public void put_Profiles_untyped(IEnumerable lst) { (new SetOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "Profiles"); }
        public TextValue Label
            {
            get { return get_string("Label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Label", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCompositeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowMovingDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowMovingDeviceType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowMovingDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowMovingDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcFlowMovingDeviceType() : base(0) { }

        public static implicit operator IfcFlowMovingDeviceType(SdaiInstance instance) => new IfcFlowMovingDeviceType(instance);


        protected override TextValue WrapperEntityName() { return "IfcFlowMovingDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCompressorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCompressorType : IfcFlowMovingDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCompressorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCompressorType(SdaiInstance instance) : base(instance) { }
        public IfcCompressorType() : base(0) { }

        public static implicit operator IfcCompressorType(SdaiInstance instance) => new IfcCompressorType(instance);

        /// <summary>
        /// Create new instace of IfcCompressorType and returns object of this class to interact with
        /// </summary>
        public static new IfcCompressorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCompressorType"); Debug.Assert(inst != 0); return inst; }

        public IfcCompressorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCompressorTypeEnum_); return EnumValue<IfcCompressorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCompressorTypeEnum>.FromValue(value.Value, EnumNames.IfcCompressorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCompressorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCondenserType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCondenserType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCondenserType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCondenserType(SdaiInstance instance) : base(instance) { }
        public IfcCondenserType() : base(0) { }

        public static implicit operator IfcCondenserType(SdaiInstance instance) => new IfcCondenserType(instance);

        /// <summary>
        /// Create new instace of IfcCondenserType and returns object of this class to interact with
        /// </summary>
        public static new IfcCondenserType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCondenserType"); Debug.Assert(inst != 0); return inst; }

        public IfcCondenserTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCondenserTypeEnum_); return EnumValue<IfcCondenserTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCondenserTypeEnum>.FromValue(value.Value, EnumNames.IfcCondenserTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCondenserType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCondition : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCondition(SdaiInstance instance) : base(instance) { }
        public IfcCondition() : base(0) { }

        public static implicit operator IfcCondition(SdaiInstance instance) => new IfcCondition(instance);

        /// <summary>
        /// Create new instace of IfcCondition and returns object of this class to interact with
        /// </summary>
        public static new IfcCondition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCondition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConditionCriterion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConditionCriterion : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConditionCriterion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConditionCriterion(SdaiInstance instance) : base(instance) { }
        public IfcConditionCriterion() : base(0) { }

        public static implicit operator IfcConditionCriterion(SdaiInstance instance) => new IfcConditionCriterion(instance);

        /// <summary>
        /// Create new instace of IfcConditionCriterion and returns object of this class to interact with
        /// </summary>
        public static new IfcConditionCriterion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConditionCriterion"); Debug.Assert(inst != 0); return inst; }


        public IfcConditionCriterionSelect Criterion
            {
            get { return new IfcConditionCriterionSelect(m_instance, "Criterion", 0); }
            }

        public IfcDateTimeSelect CriterionDateTime
            {
            get { return new IfcDateTimeSelect(m_instance, "CriterionDateTime", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcConditionCriterion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionGeometry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionGeometry : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionGeometry(SdaiInstance instance) : base(instance) { }
        public IfcConnectionGeometry() : base(0) { }

        public static implicit operator IfcConnectionGeometry(SdaiInstance instance) => new IfcConnectionGeometry(instance);


        protected override TextValue WrapperEntityName() { return "IfcConnectionGeometry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionCurveGeometry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionCurveGeometry : IfcConnectionGeometry
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionCurveGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionCurveGeometry(SdaiInstance instance) : base(instance) { }
        public IfcConnectionCurveGeometry() : base(0) { }

        public static implicit operator IfcConnectionCurveGeometry(SdaiInstance instance) => new IfcConnectionCurveGeometry(instance);

        /// <summary>
        /// Create new instace of IfcConnectionCurveGeometry and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectionCurveGeometry Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectionCurveGeometry"); Debug.Assert(inst != 0); return inst; }


        public IfcCurveOrEdgeCurve CurveOnRelatingElement
            {
            get { return new IfcCurveOrEdgeCurve(m_instance, "CurveOnRelatingElement", 0); }
            }

        public IfcCurveOrEdgeCurve CurveOnRelatedElement
            {
            get { return new IfcCurveOrEdgeCurve(m_instance, "CurveOnRelatedElement", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcConnectionCurveGeometry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionPointGeometry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionPointGeometry : IfcConnectionGeometry
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionPointGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionPointGeometry(SdaiInstance instance) : base(instance) { }
        public IfcConnectionPointGeometry() : base(0) { }

        public static implicit operator IfcConnectionPointGeometry(SdaiInstance instance) => new IfcConnectionPointGeometry(instance);

        /// <summary>
        /// Create new instace of IfcConnectionPointGeometry and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectionPointGeometry Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectionPointGeometry"); Debug.Assert(inst != 0); return inst; }


        public IfcPointOrVertexPoint PointOnRelatingElement
            {
            get { return new IfcPointOrVertexPoint(m_instance, "PointOnRelatingElement", 0); }
            }

        public IfcPointOrVertexPoint PointOnRelatedElement
            {
            get { return new IfcPointOrVertexPoint(m_instance, "PointOnRelatedElement", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcConnectionPointGeometry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionPointEccentricity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionPointEccentricity : IfcConnectionPointGeometry
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionPointEccentricity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionPointEccentricity(SdaiInstance instance) : base(instance) { }
        public IfcConnectionPointEccentricity() : base(0) { }

        public static implicit operator IfcConnectionPointEccentricity(SdaiInstance instance) => new IfcConnectionPointEccentricity(instance);

        /// <summary>
        /// Create new instace of IfcConnectionPointEccentricity and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectionPointEccentricity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectionPointEccentricity"); Debug.Assert(inst != 0); return inst; }

        public double? EccentricityInX
            {
            get { return get_double("EccentricityInX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EccentricityInX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EccentricityInY
            {
            get { return get_double("EccentricityInY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EccentricityInY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EccentricityInZ
            {
            get { return get_double("EccentricityInZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EccentricityInZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcConnectionPointEccentricity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionPortGeometry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionPortGeometry : IfcConnectionGeometry
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionPortGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionPortGeometry(SdaiInstance instance) : base(instance) { }
        public IfcConnectionPortGeometry() : base(0) { }

        public static implicit operator IfcConnectionPortGeometry(SdaiInstance instance) => new IfcConnectionPortGeometry(instance);

        /// <summary>
        /// Create new instace of IfcConnectionPortGeometry and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectionPortGeometry Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectionPortGeometry"); Debug.Assert(inst != 0); return inst; }


        public IfcAxis2Placement LocationAtRelatingElement
            {
            get { return new IfcAxis2Placement(m_instance, "LocationAtRelatingElement", 0); }
            }

        public IfcAxis2Placement LocationAtRelatedElement
            {
            get { return new IfcAxis2Placement(m_instance, "LocationAtRelatedElement", 0); }
            }
        public IfcProfileDef ProfileOfPort 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ProfileOfPort", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ProfileOfPort", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcConnectionPortGeometry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionSurfaceGeometry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionSurfaceGeometry : IfcConnectionGeometry
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionSurfaceGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionSurfaceGeometry(SdaiInstance instance) : base(instance) { }
        public IfcConnectionSurfaceGeometry() : base(0) { }

        public static implicit operator IfcConnectionSurfaceGeometry(SdaiInstance instance) => new IfcConnectionSurfaceGeometry(instance);

        /// <summary>
        /// Create new instace of IfcConnectionSurfaceGeometry and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectionSurfaceGeometry Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectionSurfaceGeometry"); Debug.Assert(inst != 0); return inst; }


        public IfcSurfaceOrFaceSurface SurfaceOnRelatingElement
            {
            get { return new IfcSurfaceOrFaceSurface(m_instance, "SurfaceOnRelatingElement", 0); }
            }

        public IfcSurfaceOrFaceSurface SurfaceOnRelatedElement
            {
            get { return new IfcSurfaceOrFaceSurface(m_instance, "SurfaceOnRelatedElement", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcConnectionSurfaceGeometry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstraint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstraint : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstraint(SdaiInstance instance) : base(instance) { }
        public IfcConstraint() : base(0) { }

        public static implicit operator IfcConstraint(SdaiInstance instance) => new IfcConstraint(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public IfcConstraintEnum? ConstraintGrade 
            { 
            get { var str = get_string("ConstraintGrade", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConstraintEnum_); return EnumValue<IfcConstraintEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConstraintEnum>.FromValue(value.Value, EnumNames.IfcConstraintEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ConstraintGrade", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue ConstraintSource
            {
            get { return get_string("ConstraintSource", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ConstraintSource", ifcengine.sdaiSTRING, value); }
            }

        public IfcActorSelect CreatingActor
            {
            get { return new IfcActorSelect(m_instance, "CreatingActor", 0); }
            }

        public IfcDateTimeSelect CreationTime
            {
            get { return new IfcDateTimeSelect(m_instance, "CreationTime", 0); }
            }
        public TextValue UserDefinedGrade
            {
            get { return get_string("UserDefinedGrade", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedGrade", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcConstraintClassificationRelationship ClassifiedAs { get { return (new SetOfIfcConstraintClassificationRelationshipSerializer()).FromAttr(m_instance, "ClassifiedAs"); } }
        public SetOfIfcConstraintRelationship RelatesConstraints { get { return (new SetOfIfcConstraintRelationshipSerializer()).FromAttr(m_instance, "RelatesConstraints"); } }
        public SetOfIfcConstraintRelationship IsRelatedWith { get { return (new SetOfIfcConstraintRelationshipSerializer()).FromAttr(m_instance, "IsRelatedWith"); } }
        public SetOfIfcPropertyConstraintRelationship PropertiesForConstraint { get { return (new SetOfIfcPropertyConstraintRelationshipSerializer()).FromAttr(m_instance, "PropertiesForConstraint"); } }
        public SetOfIfcConstraintAggregationRelationship Aggregates { get { return (new SetOfIfcConstraintAggregationRelationshipSerializer()).FromAttr(m_instance, "Aggregates"); } }
        public SetOfIfcConstraintAggregationRelationship IsAggregatedIn { get { return (new SetOfIfcConstraintAggregationRelationshipSerializer()).FromAttr(m_instance, "IsAggregatedIn"); } }

        protected override TextValue WrapperEntityName() { return "IfcConstraint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstraintAggregationRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstraintAggregationRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstraintAggregationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstraintAggregationRelationship(SdaiInstance instance) : base(instance) { }
        public IfcConstraintAggregationRelationship() : base(0) { }

        public static implicit operator IfcConstraintAggregationRelationship(SdaiInstance instance) => new IfcConstraintAggregationRelationship(instance);

        /// <summary>
        /// Create new instace of IfcConstraintAggregationRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcConstraintAggregationRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstraintAggregationRelationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public IfcConstraint RelatingConstraint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, out inst); return new IfcConstraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcConstraint RelatedConstraints { get { return (new ListOfIfcConstraintSerializer()).FromAttr(m_instance, "RelatedConstraints"); } }
        public void put_RelatedConstraints(IEnumerable<IfcConstraint> lst) { (new ListOfIfcConstraintSerializer()).ToSdaiAggr(lst, m_instance, "RelatedConstraints"); }
        public void put_RelatedConstraints_untyped(IEnumerable lst) { (new ListOfIfcConstraintSerializer()).ToSdaiAggr(lst, m_instance, "RelatedConstraints"); }
        public IfcLogicalOperatorEnum? LogicalAggregator 
            { 
            get { var str = get_string("LogicalAggregator", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLogicalOperatorEnum_); return EnumValue<IfcLogicalOperatorEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLogicalOperatorEnum>.FromValue(value.Value, EnumNames.IfcLogicalOperatorEnum_); ifcengine.sdaiPutAttrBN(m_instance, "LogicalAggregator", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcConstraintAggregationRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstraintClassificationRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstraintClassificationRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstraintClassificationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstraintClassificationRelationship(SdaiInstance instance) : base(instance) { }
        public IfcConstraintClassificationRelationship() : base(0) { }

        public static implicit operator IfcConstraintClassificationRelationship(SdaiInstance instance) => new IfcConstraintClassificationRelationship(instance);

        /// <summary>
        /// Create new instace of IfcConstraintClassificationRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcConstraintClassificationRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstraintClassificationRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcConstraint ClassifiedConstraint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ClassifiedConstraint", ifcengine.sdaiINSTANCE, out inst); return new IfcConstraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ClassifiedConstraint", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcClassificationNotationSelect RelatedClassifications { get { return (new SetOfIfcClassificationNotationSelectSerializer()).FromAttr(m_instance, "RelatedClassifications"); } }
        public void put_RelatedClassifications(IEnumerable<IfcClassificationNotationSelect> lst) { (new SetOfIfcClassificationNotationSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedClassifications"); }
        public void put_RelatedClassifications_untyped(IEnumerable lst) { (new SetOfIfcClassificationNotationSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedClassifications"); }

        protected override TextValue WrapperEntityName() { return "IfcConstraintClassificationRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstraintRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstraintRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstraintRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstraintRelationship(SdaiInstance instance) : base(instance) { }
        public IfcConstraintRelationship() : base(0) { }

        public static implicit operator IfcConstraintRelationship(SdaiInstance instance) => new IfcConstraintRelationship(instance);

        /// <summary>
        /// Create new instace of IfcConstraintRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcConstraintRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstraintRelationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public IfcConstraint RelatingConstraint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, out inst); return new IfcConstraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcConstraint RelatedConstraints { get { return (new SetOfIfcConstraintSerializer()).FromAttr(m_instance, "RelatedConstraints"); } }
        public void put_RelatedConstraints(IEnumerable<IfcConstraint> lst) { (new SetOfIfcConstraintSerializer()).ToSdaiAggr(lst, m_instance, "RelatedConstraints"); }
        public void put_RelatedConstraints_untyped(IEnumerable lst) { (new SetOfIfcConstraintSerializer()).ToSdaiAggr(lst, m_instance, "RelatedConstraints"); }

        protected override TextValue WrapperEntityName() { return "IfcConstraintRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcResource : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcResource(SdaiInstance instance) : base(instance) { }
        public IfcResource() : base(0) { }

        public static implicit operator IfcResource(SdaiInstance instance) => new IfcResource(instance);

        public SetOfIfcRelAssignsToResource ResourceOf { get { return (new SetOfIfcRelAssignsToResourceSerializer()).FromAttr(m_instance, "ResourceOf"); } }

        protected override TextValue WrapperEntityName() { return "IfcResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionResource : IfcResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionResource(SdaiInstance instance) : base(instance) { }
        public IfcConstructionResource() : base(0) { }

        public static implicit operator IfcConstructionResource(SdaiInstance instance) => new IfcConstructionResource(instance);

        public TextValue ResourceIdentifier
            {
            get { return get_string("ResourceIdentifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ResourceIdentifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ResourceGroup
            {
            get { return get_string("ResourceGroup", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ResourceGroup", ifcengine.sdaiSTRING, value); }
            }
        public IfcResourceConsumptionEnum? ResourceConsumption 
            { 
            get { var str = get_string("ResourceConsumption", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcResourceConsumptionEnum_); return EnumValue<IfcResourceConsumptionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcResourceConsumptionEnum>.FromValue(value.Value, EnumNames.IfcResourceConsumptionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ResourceConsumption", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcMeasureWithUnit BaseQuantity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BaseQuantity", ifcengine.sdaiINSTANCE, out inst); return new IfcMeasureWithUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BaseQuantity", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcConstructionResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionEquipmentResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionEquipmentResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionEquipmentResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionEquipmentResource(SdaiInstance instance) : base(instance) { }
        public IfcConstructionEquipmentResource() : base(0) { }

        public static implicit operator IfcConstructionEquipmentResource(SdaiInstance instance) => new IfcConstructionEquipmentResource(instance);

        /// <summary>
        /// Create new instace of IfcConstructionEquipmentResource and returns object of this class to interact with
        /// </summary>
        public static new IfcConstructionEquipmentResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstructionEquipmentResource"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcConstructionEquipmentResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionMaterialResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionMaterialResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionMaterialResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionMaterialResource(SdaiInstance instance) : base(instance) { }
        public IfcConstructionMaterialResource() : base(0) { }

        public static implicit operator IfcConstructionMaterialResource(SdaiInstance instance) => new IfcConstructionMaterialResource(instance);

        /// <summary>
        /// Create new instace of IfcConstructionMaterialResource and returns object of this class to interact with
        /// </summary>
        public static new IfcConstructionMaterialResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstructionMaterialResource"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcActorSelect Suppliers { get { return (new SetOfIfcActorSelectSerializer()).FromAttr(m_instance, "Suppliers"); } }
        public void put_Suppliers(IEnumerable<IfcActorSelect> lst) { (new SetOfIfcActorSelectSerializer()).ToSdaiAggr(lst, m_instance, "Suppliers"); }
        public void put_Suppliers_untyped(IEnumerable lst) { (new SetOfIfcActorSelectSerializer()).ToSdaiAggr(lst, m_instance, "Suppliers"); }
        public double? UsageRatio
            {
            get { return get_double("UsageRatio", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "UsageRatio", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcConstructionMaterialResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionProductResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionProductResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionProductResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionProductResource(SdaiInstance instance) : base(instance) { }
        public IfcConstructionProductResource() : base(0) { }

        public static implicit operator IfcConstructionProductResource(SdaiInstance instance) => new IfcConstructionProductResource(instance);

        /// <summary>
        /// Create new instace of IfcConstructionProductResource and returns object of this class to interact with
        /// </summary>
        public static new IfcConstructionProductResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstructionProductResource"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcConstructionProductResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcNamedUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcNamedUnit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcNamedUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcNamedUnit(SdaiInstance instance) : base(instance) { }
        public IfcNamedUnit() : base(0) { }

        public static implicit operator IfcNamedUnit(SdaiInstance instance) => new IfcNamedUnit(instance);

        public IfcDimensionalExponents Dimensions 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Dimensions", ifcengine.sdaiINSTANCE, out inst); return new IfcDimensionalExponents(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Dimensions", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcUnitEnum? UnitType 
            { 
            get { var str = get_string("UnitType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcUnitEnum_); return EnumValue<IfcUnitEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcUnitEnum>.FromValue(value.Value, EnumNames.IfcUnitEnum_); ifcengine.sdaiPutAttrBN(m_instance, "UnitType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcNamedUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcContextDependentUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcContextDependentUnit : IfcNamedUnit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcContextDependentUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcContextDependentUnit(SdaiInstance instance) : base(instance) { }
        public IfcContextDependentUnit() : base(0) { }

        public static implicit operator IfcContextDependentUnit(SdaiInstance instance) => new IfcContextDependentUnit(instance);

        /// <summary>
        /// Create new instace of IfcContextDependentUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcContextDependentUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcContextDependentUnit"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcContextDependentUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcControllerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcControllerType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcControllerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcControllerType(SdaiInstance instance) : base(instance) { }
        public IfcControllerType() : base(0) { }

        public static implicit operator IfcControllerType(SdaiInstance instance) => new IfcControllerType(instance);

        /// <summary>
        /// Create new instace of IfcControllerType and returns object of this class to interact with
        /// </summary>
        public static new IfcControllerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcControllerType"); Debug.Assert(inst != 0); return inst; }

        public IfcControllerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcControllerTypeEnum_); return EnumValue<IfcControllerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcControllerTypeEnum>.FromValue(value.Value, EnumNames.IfcControllerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcControllerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConversionBasedUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConversionBasedUnit : IfcNamedUnit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConversionBasedUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConversionBasedUnit(SdaiInstance instance) : base(instance) { }
        public IfcConversionBasedUnit() : base(0) { }

        public static implicit operator IfcConversionBasedUnit(SdaiInstance instance) => new IfcConversionBasedUnit(instance);

        /// <summary>
        /// Create new instace of IfcConversionBasedUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcConversionBasedUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConversionBasedUnit"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public IfcMeasureWithUnit ConversionFactor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ConversionFactor", ifcengine.sdaiINSTANCE, out inst); return new IfcMeasureWithUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ConversionFactor", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcConversionBasedUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCooledBeamType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCooledBeamType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCooledBeamType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCooledBeamType(SdaiInstance instance) : base(instance) { }
        public IfcCooledBeamType() : base(0) { }

        public static implicit operator IfcCooledBeamType(SdaiInstance instance) => new IfcCooledBeamType(instance);

        /// <summary>
        /// Create new instace of IfcCooledBeamType and returns object of this class to interact with
        /// </summary>
        public static new IfcCooledBeamType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCooledBeamType"); Debug.Assert(inst != 0); return inst; }

        public IfcCooledBeamTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCooledBeamTypeEnum_); return EnumValue<IfcCooledBeamTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCooledBeamTypeEnum>.FromValue(value.Value, EnumNames.IfcCooledBeamTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCooledBeamType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCoolingTowerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCoolingTowerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCoolingTowerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCoolingTowerType(SdaiInstance instance) : base(instance) { }
        public IfcCoolingTowerType() : base(0) { }

        public static implicit operator IfcCoolingTowerType(SdaiInstance instance) => new IfcCoolingTowerType(instance);

        /// <summary>
        /// Create new instace of IfcCoolingTowerType and returns object of this class to interact with
        /// </summary>
        public static new IfcCoolingTowerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCoolingTowerType"); Debug.Assert(inst != 0); return inst; }

        public IfcCoolingTowerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCoolingTowerTypeEnum_); return EnumValue<IfcCoolingTowerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCoolingTowerTypeEnum>.FromValue(value.Value, EnumNames.IfcCoolingTowerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCoolingTowerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCoordinatedUniversalTimeOffset
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCoordinatedUniversalTimeOffset : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCoordinatedUniversalTimeOffset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCoordinatedUniversalTimeOffset(SdaiInstance instance) : base(instance) { }
        public IfcCoordinatedUniversalTimeOffset() : base(0) { }

        public static implicit operator IfcCoordinatedUniversalTimeOffset(SdaiInstance instance) => new IfcCoordinatedUniversalTimeOffset(instance);

        /// <summary>
        /// Create new instace of IfcCoordinatedUniversalTimeOffset and returns object of this class to interact with
        /// </summary>
        public static new IfcCoordinatedUniversalTimeOffset Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCoordinatedUniversalTimeOffset"); Debug.Assert(inst != 0); return inst; }

        public IntValue? HourOffset
            {
            get { return get_IntValue("HourOffset", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HourOffset", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? MinuteOffset
            {
            get { return get_IntValue("MinuteOffset", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MinuteOffset", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IfcAheadOrBehind? Sense 
            { 
            get { var str = get_string("Sense", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAheadOrBehind_); return EnumValue<IfcAheadOrBehind>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAheadOrBehind>.FromValue(value.Value, EnumNames.IfcAheadOrBehind_); ifcengine.sdaiPutAttrBN(m_instance, "Sense", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCoordinatedUniversalTimeOffset"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCostItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCostItem : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCostItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCostItem(SdaiInstance instance) : base(instance) { }
        public IfcCostItem() : base(0) { }

        public static implicit operator IfcCostItem(SdaiInstance instance) => new IfcCostItem(instance);

        /// <summary>
        /// Create new instace of IfcCostItem and returns object of this class to interact with
        /// </summary>
        public static new IfcCostItem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCostItem"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcCostItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCostSchedule
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCostSchedule : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCostSchedule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCostSchedule(SdaiInstance instance) : base(instance) { }
        public IfcCostSchedule() : base(0) { }

        public static implicit operator IfcCostSchedule(SdaiInstance instance) => new IfcCostSchedule(instance);

        /// <summary>
        /// Create new instace of IfcCostSchedule and returns object of this class to interact with
        /// </summary>
        public static new IfcCostSchedule Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCostSchedule"); Debug.Assert(inst != 0); return inst; }


        public IfcActorSelect SubmittedBy
            {
            get { return new IfcActorSelect(m_instance, "SubmittedBy", 0); }
            }

        public IfcActorSelect PreparedBy
            {
            get { return new IfcActorSelect(m_instance, "PreparedBy", 0); }
            }

        public IfcDateTimeSelect SubmittedOn
            {
            get { return new IfcDateTimeSelect(m_instance, "SubmittedOn", 0); }
            }
        public TextValue Status
            {
            get { return get_string("Status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Status", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcActorSelect TargetUsers { get { return (new SetOfIfcActorSelectSerializer()).FromAttr(m_instance, "TargetUsers"); } }
        public void put_TargetUsers(IEnumerable<IfcActorSelect> lst) { (new SetOfIfcActorSelectSerializer()).ToSdaiAggr(lst, m_instance, "TargetUsers"); }
        public void put_TargetUsers_untyped(IEnumerable lst) { (new SetOfIfcActorSelectSerializer()).ToSdaiAggr(lst, m_instance, "TargetUsers"); }

        public IfcDateTimeSelect UpdateDate
            {
            get { return new IfcDateTimeSelect(m_instance, "UpdateDate", 0); }
            }
        public TextValue ID
            {
            get { return get_string("ID", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ID", ifcengine.sdaiSTRING, value); }
            }
        public IfcCostScheduleTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCostScheduleTypeEnum_); return EnumValue<IfcCostScheduleTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCostScheduleTypeEnum>.FromValue(value.Value, EnumNames.IfcCostScheduleTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCostSchedule"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCostValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCostValue : IfcAppliedValue
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCostValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCostValue(SdaiInstance instance) : base(instance) { }
        public IfcCostValue() : base(0) { }

        public static implicit operator IfcCostValue(SdaiInstance instance) => new IfcCostValue(instance);

        /// <summary>
        /// Create new instace of IfcCostValue and returns object of this class to interact with
        /// </summary>
        public static new IfcCostValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCostValue"); Debug.Assert(inst != 0); return inst; }

        public TextValue CostType
            {
            get { return get_string("CostType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "CostType", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Condition
            {
            get { return get_string("Condition", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Condition", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCostValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCovering
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCovering : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCovering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCovering(SdaiInstance instance) : base(instance) { }
        public IfcCovering() : base(0) { }

        public static implicit operator IfcCovering(SdaiInstance instance) => new IfcCovering(instance);

        /// <summary>
        /// Create new instace of IfcCovering and returns object of this class to interact with
        /// </summary>
        public static new IfcCovering Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCovering"); Debug.Assert(inst != 0); return inst; }

        public IfcCoveringTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCoveringTypeEnum_); return EnumValue<IfcCoveringTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCoveringTypeEnum>.FromValue(value.Value, EnumNames.IfcCoveringTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcRelCoversSpaces CoversSpaces { get { return (new SetOfIfcRelCoversSpacesSerializer()).FromAttr(m_instance, "CoversSpaces"); } }
        public SetOfIfcRelCoversBldgElements Covers { get { return (new SetOfIfcRelCoversBldgElementsSerializer()).FromAttr(m_instance, "Covers"); } }

        protected override TextValue WrapperEntityName() { return "IfcCovering"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCoveringType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCoveringType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCoveringType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCoveringType(SdaiInstance instance) : base(instance) { }
        public IfcCoveringType() : base(0) { }

        public static implicit operator IfcCoveringType(SdaiInstance instance) => new IfcCoveringType(instance);

        /// <summary>
        /// Create new instace of IfcCoveringType and returns object of this class to interact with
        /// </summary>
        public static new IfcCoveringType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCoveringType"); Debug.Assert(inst != 0); return inst; }

        public IfcCoveringTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCoveringTypeEnum_); return EnumValue<IfcCoveringTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCoveringTypeEnum>.FromValue(value.Value, EnumNames.IfcCoveringTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCoveringType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCraneRailAShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCraneRailAShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCraneRailAShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCraneRailAShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCraneRailAShapeProfileDef() : base(0) { }

        public static implicit operator IfcCraneRailAShapeProfileDef(SdaiInstance instance) => new IfcCraneRailAShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCraneRailAShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCraneRailAShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCraneRailAShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? OverallHeight
            {
            get { return get_double("OverallHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BaseWidth2
            {
            get { return get_double("BaseWidth2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BaseWidth2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? HeadWidth
            {
            get { return get_double("HeadWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HeadWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? HeadDepth2
            {
            get { return get_double("HeadDepth2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HeadDepth2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? HeadDepth3
            {
            get { return get_double("HeadDepth3", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HeadDepth3", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebThickness
            {
            get { return get_double("WebThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BaseWidth4
            {
            get { return get_double("BaseWidth4", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BaseWidth4", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BaseDepth1
            {
            get { return get_double("BaseDepth1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BaseDepth1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BaseDepth2
            {
            get { return get_double("BaseDepth2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BaseDepth2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BaseDepth3
            {
            get { return get_double("BaseDepth3", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BaseDepth3", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CentreOfGravityInY
            {
            get { return get_double("CentreOfGravityInY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CentreOfGravityInY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCraneRailAShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCraneRailFShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCraneRailFShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCraneRailFShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCraneRailFShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCraneRailFShapeProfileDef() : base(0) { }

        public static implicit operator IfcCraneRailFShapeProfileDef(SdaiInstance instance) => new IfcCraneRailFShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCraneRailFShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCraneRailFShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCraneRailFShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? OverallHeight
            {
            get { return get_double("OverallHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? HeadWidth
            {
            get { return get_double("HeadWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HeadWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? HeadDepth2
            {
            get { return get_double("HeadDepth2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HeadDepth2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? HeadDepth3
            {
            get { return get_double("HeadDepth3", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HeadDepth3", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebThickness
            {
            get { return get_double("WebThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BaseDepth1
            {
            get { return get_double("BaseDepth1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BaseDepth1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BaseDepth2
            {
            get { return get_double("BaseDepth2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BaseDepth2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CentreOfGravityInY
            {
            get { return get_double("CentreOfGravityInY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CentreOfGravityInY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCraneRailFShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCrewResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCrewResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCrewResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCrewResource(SdaiInstance instance) : base(instance) { }
        public IfcCrewResource() : base(0) { }

        public static implicit operator IfcCrewResource(SdaiInstance instance) => new IfcCrewResource(instance);

        /// <summary>
        /// Create new instace of IfcCrewResource and returns object of this class to interact with
        /// </summary>
        public static new IfcCrewResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCrewResource"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcCrewResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSolidModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSolidModel : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSolidModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSolidModel(SdaiInstance instance) : base(instance) { }
        public IfcSolidModel() : base(0) { }

        public static implicit operator IfcSolidModel(SdaiInstance instance) => new IfcSolidModel(instance);

        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcSolidModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCsgSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCsgSolid : IfcSolidModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCsgSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCsgSolid(SdaiInstance instance) : base(instance) { }
        public IfcCsgSolid() : base(0) { }

        public static implicit operator IfcCsgSolid(SdaiInstance instance) => new IfcCsgSolid(instance);

        /// <summary>
        /// Create new instace of IfcCsgSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcCsgSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCsgSolid"); Debug.Assert(inst != 0); return inst; }


        public IfcCsgSelect TreeRootExpression
            {
            get { return new IfcCsgSelect(m_instance, "TreeRootExpression", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCsgSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCShapeProfileDef() : base(0) { }

        public static implicit operator IfcCShapeProfileDef(SdaiInstance instance) => new IfcCShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Width
            {
            get { return get_double("Width", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Width", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WallThickness
            {
            get { return get_double("WallThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WallThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Girth
            {
            get { return get_double("Girth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Girth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? InternalFilletRadius
            {
            get { return get_double("InternalFilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InternalFilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CentreOfGravityInX
            {
            get { return get_double("CentreOfGravityInX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CentreOfGravityInX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurrencyRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurrencyRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurrencyRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurrencyRelationship(SdaiInstance instance) : base(instance) { }
        public IfcCurrencyRelationship() : base(0) { }

        public static implicit operator IfcCurrencyRelationship(SdaiInstance instance) => new IfcCurrencyRelationship(instance);

        /// <summary>
        /// Create new instace of IfcCurrencyRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcCurrencyRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurrencyRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcMonetaryUnit RelatingMonetaryUnit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingMonetaryUnit", ifcengine.sdaiINSTANCE, out inst); return new IfcMonetaryUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingMonetaryUnit", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcMonetaryUnit RelatedMonetaryUnit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedMonetaryUnit", ifcengine.sdaiINSTANCE, out inst); return new IfcMonetaryUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedMonetaryUnit", ifcengine.sdaiINSTANCE, i); }
            }
        public double? ExchangeRate
            {
            get { return get_double("ExchangeRate", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ExchangeRate", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcDateAndTime RateDateTime 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RateDateTime", ifcengine.sdaiINSTANCE, out inst); return new IfcDateAndTime(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RateDateTime", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcLibraryInformation RateSource 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RateSource", ifcengine.sdaiINSTANCE, out inst); return new IfcLibraryInformation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RateSource", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCurrencyRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurtainWall
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurtainWall : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurtainWall
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurtainWall(SdaiInstance instance) : base(instance) { }
        public IfcCurtainWall() : base(0) { }

        public static implicit operator IfcCurtainWall(SdaiInstance instance) => new IfcCurtainWall(instance);

        /// <summary>
        /// Create new instace of IfcCurtainWall and returns object of this class to interact with
        /// </summary>
        public static new IfcCurtainWall Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurtainWall"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcCurtainWall"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurtainWallType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurtainWallType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurtainWallType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurtainWallType(SdaiInstance instance) : base(instance) { }
        public IfcCurtainWallType() : base(0) { }

        public static implicit operator IfcCurtainWallType(SdaiInstance instance) => new IfcCurtainWallType(instance);

        /// <summary>
        /// Create new instace of IfcCurtainWallType and returns object of this class to interact with
        /// </summary>
        public static new IfcCurtainWallType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurtainWallType"); Debug.Assert(inst != 0); return inst; }

        public IfcCurtainWallTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCurtainWallTypeEnum_); return EnumValue<IfcCurtainWallTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCurtainWallTypeEnum>.FromValue(value.Value, EnumNames.IfcCurtainWallTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCurtainWallType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveBoundedPlane
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveBoundedPlane : IfcBoundedSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveBoundedPlane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveBoundedPlane(SdaiInstance instance) : base(instance) { }
        public IfcCurveBoundedPlane() : base(0) { }

        public static implicit operator IfcCurveBoundedPlane(SdaiInstance instance) => new IfcCurveBoundedPlane(instance);

        /// <summary>
        /// Create new instace of IfcCurveBoundedPlane and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveBoundedPlane Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveBoundedPlane"); Debug.Assert(inst != 0); return inst; }

        public IfcPlane BasisSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcPlane(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCurve OuterBoundary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OuterBoundary", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OuterBoundary", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcCurve InnerBoundaries { get { return (new SetOfIfcCurveSerializer()).FromAttr(m_instance, "InnerBoundaries"); } }
        public void put_InnerBoundaries(IEnumerable<IfcCurve> lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerBoundaries"); }
        public void put_InnerBoundaries_untyped(IEnumerable lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerBoundaries"); }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcCurveBoundedPlane"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPresentationStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPresentationStyle : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPresentationStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPresentationStyle(SdaiInstance instance) : base(instance) { }
        public IfcPresentationStyle() : base(0) { }

        public static implicit operator IfcPresentationStyle(SdaiInstance instance) => new IfcPresentationStyle(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPresentationStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveStyle : IfcPresentationStyle
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveStyle(SdaiInstance instance) : base(instance) { }
        public IfcCurveStyle() : base(0) { }

        public static implicit operator IfcCurveStyle(SdaiInstance instance) => new IfcCurveStyle(instance);

        /// <summary>
        /// Create new instace of IfcCurveStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveStyle"); Debug.Assert(inst != 0); return inst; }


        public IfcCurveFontOrScaledCurveFontSelect CurveFont
            {
            get { return new IfcCurveFontOrScaledCurveFontSelect(m_instance, "CurveFont", 0); }
            }

        public IfcSizeSelect CurveWidth
            {
            get { return new IfcSizeSelect(m_instance, "CurveWidth", 0); }
            }

        public IfcColour CurveColour
            {
            get { return new IfcColour(m_instance, "CurveColour", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCurveStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveStyleFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveStyleFont : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveStyleFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveStyleFont(SdaiInstance instance) : base(instance) { }
        public IfcCurveStyleFont() : base(0) { }

        public static implicit operator IfcCurveStyleFont(SdaiInstance instance) => new IfcCurveStyleFont(instance);

        /// <summary>
        /// Create new instace of IfcCurveStyleFont and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveStyleFont Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveStyleFont"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcCurveStyleFontPattern PatternList { get { return (new ListOfIfcCurveStyleFontPatternSerializer()).FromAttr(m_instance, "PatternList"); } }
        public void put_PatternList(IEnumerable<IfcCurveStyleFontPattern> lst) { (new ListOfIfcCurveStyleFontPatternSerializer()).ToSdaiAggr(lst, m_instance, "PatternList"); }
        public void put_PatternList_untyped(IEnumerable lst) { (new ListOfIfcCurveStyleFontPatternSerializer()).ToSdaiAggr(lst, m_instance, "PatternList"); }

        protected override TextValue WrapperEntityName() { return "IfcCurveStyleFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveStyleFontAndScaling
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveStyleFontAndScaling : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveStyleFontAndScaling
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveStyleFontAndScaling(SdaiInstance instance) : base(instance) { }
        public IfcCurveStyleFontAndScaling() : base(0) { }

        public static implicit operator IfcCurveStyleFontAndScaling(SdaiInstance instance) => new IfcCurveStyleFontAndScaling(instance);

        /// <summary>
        /// Create new instace of IfcCurveStyleFontAndScaling and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveStyleFontAndScaling Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveStyleFontAndScaling"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        public IfcCurveStyleFontSelect CurveFont
            {
            get { return new IfcCurveStyleFontSelect(m_instance, "CurveFont", 0); }
            }
        public double? CurveFontScaling
            {
            get { return get_double("CurveFontScaling", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CurveFontScaling", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCurveStyleFontAndScaling"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveStyleFontPattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveStyleFontPattern : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveStyleFontPattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveStyleFontPattern(SdaiInstance instance) : base(instance) { }
        public IfcCurveStyleFontPattern() : base(0) { }

        public static implicit operator IfcCurveStyleFontPattern(SdaiInstance instance) => new IfcCurveStyleFontPattern(instance);

        /// <summary>
        /// Create new instace of IfcCurveStyleFontPattern and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveStyleFontPattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveStyleFontPattern"); Debug.Assert(inst != 0); return inst; }

        public double? VisibleSegmentLength
            {
            get { return get_double("VisibleSegmentLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "VisibleSegmentLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? InvisibleSegmentLength
            {
            get { return get_double("InvisibleSegmentLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InvisibleSegmentLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcCurveStyleFontPattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDamperType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDamperType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDamperType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDamperType(SdaiInstance instance) : base(instance) { }
        public IfcDamperType() : base(0) { }

        public static implicit operator IfcDamperType(SdaiInstance instance) => new IfcDamperType(instance);

        /// <summary>
        /// Create new instace of IfcDamperType and returns object of this class to interact with
        /// </summary>
        public static new IfcDamperType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDamperType"); Debug.Assert(inst != 0); return inst; }

        public IfcDamperTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDamperTypeEnum_); return EnumValue<IfcDamperTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDamperTypeEnum>.FromValue(value.Value, EnumNames.IfcDamperTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDamperType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDateAndTime
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDateAndTime : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDateAndTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDateAndTime(SdaiInstance instance) : base(instance) { }
        public IfcDateAndTime() : base(0) { }

        public static implicit operator IfcDateAndTime(SdaiInstance instance) => new IfcDateAndTime(instance);

        /// <summary>
        /// Create new instace of IfcDateAndTime and returns object of this class to interact with
        /// </summary>
        public static new IfcDateAndTime Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDateAndTime"); Debug.Assert(inst != 0); return inst; }

        public IfcCalendarDate DateComponent 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DateComponent", ifcengine.sdaiINSTANCE, out inst); return new IfcCalendarDate(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DateComponent", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcLocalTime TimeComponent 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TimeComponent", ifcengine.sdaiINSTANCE, out inst); return new IfcLocalTime(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TimeComponent", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDateAndTime"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDefinedSymbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDefinedSymbol : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDefinedSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDefinedSymbol(SdaiInstance instance) : base(instance) { }
        public IfcDefinedSymbol() : base(0) { }

        public static implicit operator IfcDefinedSymbol(SdaiInstance instance) => new IfcDefinedSymbol(instance);

        /// <summary>
        /// Create new instace of IfcDefinedSymbol and returns object of this class to interact with
        /// </summary>
        public static new IfcDefinedSymbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDefinedSymbol"); Debug.Assert(inst != 0); return inst; }


        public IfcDefinedSymbolSelect Definition
            {
            get { return new IfcDefinedSymbolSelect(m_instance, "Definition", 0); }
            }
        public IfcCartesianTransformationOperator2D Target 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Target", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianTransformationOperator2D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Target", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDefinedSymbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDerivedProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDerivedProfileDef : IfcProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDerivedProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDerivedProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcDerivedProfileDef() : base(0) { }

        public static implicit operator IfcDerivedProfileDef(SdaiInstance instance) => new IfcDerivedProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcDerivedProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcDerivedProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDerivedProfileDef"); Debug.Assert(inst != 0); return inst; }

        public IfcProfileDef ParentProfile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ParentProfile", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ParentProfile", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCartesianTransformationOperator2D Operator 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Operator", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianTransformationOperator2D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Operator", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue Label
            {
            get { return get_string("Label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Label", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDerivedProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDerivedUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDerivedUnit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDerivedUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDerivedUnit(SdaiInstance instance) : base(instance) { }
        public IfcDerivedUnit() : base(0) { }

        public static implicit operator IfcDerivedUnit(SdaiInstance instance) => new IfcDerivedUnit(instance);

        /// <summary>
        /// Create new instace of IfcDerivedUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcDerivedUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDerivedUnit"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcDerivedUnitElement Elements { get { return (new SetOfIfcDerivedUnitElementSerializer()).FromAttr(m_instance, "Elements"); } }
        public void put_Elements(IEnumerable<IfcDerivedUnitElement> lst) { (new SetOfIfcDerivedUnitElementSerializer()).ToSdaiAggr(lst, m_instance, "Elements"); }
        public void put_Elements_untyped(IEnumerable lst) { (new SetOfIfcDerivedUnitElementSerializer()).ToSdaiAggr(lst, m_instance, "Elements"); }
        public IfcDerivedUnitEnum? UnitType 
            { 
            get { var str = get_string("UnitType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDerivedUnitEnum_); return EnumValue<IfcDerivedUnitEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDerivedUnitEnum>.FromValue(value.Value, EnumNames.IfcDerivedUnitEnum_); ifcengine.sdaiPutAttrBN(m_instance, "UnitType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedType
            {
            get { return get_string("UserDefinedType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedType", ifcengine.sdaiSTRING, value); }
            }
        public IfcDimensionalExponents Dimensions { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Dimensions", ifcengine.sdaiINSTANCE, out inst); return new IfcDimensionalExponents(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcDerivedUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDerivedUnitElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDerivedUnitElement : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDerivedUnitElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDerivedUnitElement(SdaiInstance instance) : base(instance) { }
        public IfcDerivedUnitElement() : base(0) { }

        public static implicit operator IfcDerivedUnitElement(SdaiInstance instance) => new IfcDerivedUnitElement(instance);

        /// <summary>
        /// Create new instace of IfcDerivedUnitElement and returns object of this class to interact with
        /// </summary>
        public static new IfcDerivedUnitElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDerivedUnitElement"); Debug.Assert(inst != 0); return inst; }

        public IfcNamedUnit Unit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Unit", ifcengine.sdaiINSTANCE, out inst); return new IfcNamedUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Unit", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? Exponent
            {
            get { return get_IntValue("Exponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Exponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDerivedUnitElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDiameterDimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDiameterDimension : IfcDimensionCurveDirectedCallout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDiameterDimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDiameterDimension(SdaiInstance instance) : base(instance) { }
        public IfcDiameterDimension() : base(0) { }

        public static implicit operator IfcDiameterDimension(SdaiInstance instance) => new IfcDiameterDimension(instance);

        /// <summary>
        /// Create new instace of IfcDiameterDimension and returns object of this class to interact with
        /// </summary>
        public static new IfcDiameterDimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDiameterDimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDiameterDimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDimensionalExponents
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDimensionalExponents : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDimensionalExponents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDimensionalExponents(SdaiInstance instance) : base(instance) { }
        public IfcDimensionalExponents() : base(0) { }

        public static implicit operator IfcDimensionalExponents(SdaiInstance instance) => new IfcDimensionalExponents(instance);

        /// <summary>
        /// Create new instace of IfcDimensionalExponents and returns object of this class to interact with
        /// </summary>
        public static new IfcDimensionalExponents Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDimensionalExponents"); Debug.Assert(inst != 0); return inst; }

        public IntValue? LengthExponent
            {
            get { return get_IntValue("LengthExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LengthExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? MassExponent
            {
            get { return get_IntValue("MassExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MassExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? TimeExponent
            {
            get { return get_IntValue("TimeExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TimeExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? ElectricCurrentExponent
            {
            get { return get_IntValue("ElectricCurrentExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ElectricCurrentExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? ThermodynamicTemperatureExponent
            {
            get { return get_IntValue("ThermodynamicTemperatureExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThermodynamicTemperatureExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? AmountOfSubstanceExponent
            {
            get { return get_IntValue("AmountOfSubstanceExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AmountOfSubstanceExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? LuminousIntensityExponent
            {
            get { return get_IntValue("LuminousIntensityExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LuminousIntensityExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDimensionalExponents"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDraughtingCalloutRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDraughtingCalloutRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDraughtingCalloutRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDraughtingCalloutRelationship(SdaiInstance instance) : base(instance) { }
        public IfcDraughtingCalloutRelationship() : base(0) { }

        public static implicit operator IfcDraughtingCalloutRelationship(SdaiInstance instance) => new IfcDraughtingCalloutRelationship(instance);

        /// <summary>
        /// Create new instace of IfcDraughtingCalloutRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcDraughtingCalloutRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDraughtingCalloutRelationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public IfcDraughtingCallout RelatingDraughtingCallout 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingDraughtingCallout", ifcengine.sdaiINSTANCE, out inst); return new IfcDraughtingCallout(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingDraughtingCallout", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcDraughtingCallout RelatedDraughtingCallout 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedDraughtingCallout", ifcengine.sdaiINSTANCE, out inst); return new IfcDraughtingCallout(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedDraughtingCallout", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDraughtingCalloutRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDimensionCalloutRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDimensionCalloutRelationship : IfcDraughtingCalloutRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDimensionCalloutRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDimensionCalloutRelationship(SdaiInstance instance) : base(instance) { }
        public IfcDimensionCalloutRelationship() : base(0) { }

        public static implicit operator IfcDimensionCalloutRelationship(SdaiInstance instance) => new IfcDimensionCalloutRelationship(instance);

        /// <summary>
        /// Create new instace of IfcDimensionCalloutRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcDimensionCalloutRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDimensionCalloutRelationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDimensionCalloutRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDimensionCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDimensionCurve : IfcAnnotationCurveOccurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDimensionCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDimensionCurve(SdaiInstance instance) : base(instance) { }
        public IfcDimensionCurve() : base(0) { }

        public static implicit operator IfcDimensionCurve(SdaiInstance instance) => new IfcDimensionCurve(instance);

        /// <summary>
        /// Create new instace of IfcDimensionCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcDimensionCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDimensionCurve"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcTerminatorSymbol AnnotatedBySymbols { get { return (new SetOfIfcTerminatorSymbolSerializer()).FromAttr(m_instance, "AnnotatedBySymbols"); } }

        protected override TextValue WrapperEntityName() { return "IfcDimensionCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTerminatorSymbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTerminatorSymbol : IfcAnnotationSymbolOccurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTerminatorSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTerminatorSymbol(SdaiInstance instance) : base(instance) { }
        public IfcTerminatorSymbol() : base(0) { }

        public static implicit operator IfcTerminatorSymbol(SdaiInstance instance) => new IfcTerminatorSymbol(instance);

        /// <summary>
        /// Create new instace of IfcTerminatorSymbol and returns object of this class to interact with
        /// </summary>
        public static new IfcTerminatorSymbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTerminatorSymbol"); Debug.Assert(inst != 0); return inst; }

        public IfcAnnotationCurveOccurrence AnnotatedCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AnnotatedCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcAnnotationCurveOccurrence(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AnnotatedCurve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTerminatorSymbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDimensionCurveTerminator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDimensionCurveTerminator : IfcTerminatorSymbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDimensionCurveTerminator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDimensionCurveTerminator(SdaiInstance instance) : base(instance) { }
        public IfcDimensionCurveTerminator() : base(0) { }

        public static implicit operator IfcDimensionCurveTerminator(SdaiInstance instance) => new IfcDimensionCurveTerminator(instance);

        /// <summary>
        /// Create new instace of IfcDimensionCurveTerminator and returns object of this class to interact with
        /// </summary>
        public static new IfcDimensionCurveTerminator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDimensionCurveTerminator"); Debug.Assert(inst != 0); return inst; }

        public IfcDimensionExtentUsage? Role 
            { 
            get { var str = get_string("Role", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDimensionExtentUsage_); return EnumValue<IfcDimensionExtentUsage>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDimensionExtentUsage>.FromValue(value.Value, EnumNames.IfcDimensionExtentUsage_); ifcengine.sdaiPutAttrBN(m_instance, "Role", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDimensionCurveTerminator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDimensionPair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDimensionPair : IfcDraughtingCalloutRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDimensionPair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDimensionPair(SdaiInstance instance) : base(instance) { }
        public IfcDimensionPair() : base(0) { }

        public static implicit operator IfcDimensionPair(SdaiInstance instance) => new IfcDimensionPair(instance);

        /// <summary>
        /// Create new instace of IfcDimensionPair and returns object of this class to interact with
        /// </summary>
        public static new IfcDimensionPair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDimensionPair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDimensionPair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDirection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDirection : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDirection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDirection(SdaiInstance instance) : base(instance) { }
        public IfcDirection() : base(0) { }

        public static implicit operator IfcDirection(SdaiInstance instance) => new IfcDirection(instance);

        /// <summary>
        /// Create new instace of IfcDirection and returns object of this class to interact with
        /// </summary>
        public static new IfcDirection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDirection"); Debug.Assert(inst != 0); return inst; }

        public list_of_double DirectionRatios { get { return (new list_of_doubleSerializer()).FromAttr(m_instance, "DirectionRatios"); } }
        public void put_DirectionRatios(IEnumerable<double> lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "DirectionRatios"); }
        public void put_DirectionRatios_untyped(IEnumerable lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "DirectionRatios"); }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcDirection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementComponent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementComponent : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementComponent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementComponent(SdaiInstance instance) : base(instance) { }
        public IfcElementComponent() : base(0) { }

        public static implicit operator IfcElementComponent(SdaiInstance instance) => new IfcElementComponent(instance);


        protected override TextValue WrapperEntityName() { return "IfcElementComponent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDiscreteAccessory
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDiscreteAccessory : IfcElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDiscreteAccessory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDiscreteAccessory(SdaiInstance instance) : base(instance) { }
        public IfcDiscreteAccessory() : base(0) { }

        public static implicit operator IfcDiscreteAccessory(SdaiInstance instance) => new IfcDiscreteAccessory(instance);

        /// <summary>
        /// Create new instace of IfcDiscreteAccessory and returns object of this class to interact with
        /// </summary>
        public static new IfcDiscreteAccessory Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDiscreteAccessory"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDiscreteAccessory"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementComponentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementComponentType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementComponentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementComponentType(SdaiInstance instance) : base(instance) { }
        public IfcElementComponentType() : base(0) { }

        public static implicit operator IfcElementComponentType(SdaiInstance instance) => new IfcElementComponentType(instance);


        protected override TextValue WrapperEntityName() { return "IfcElementComponentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDiscreteAccessoryType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDiscreteAccessoryType : IfcElementComponentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDiscreteAccessoryType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDiscreteAccessoryType(SdaiInstance instance) : base(instance) { }
        public IfcDiscreteAccessoryType() : base(0) { }

        public static implicit operator IfcDiscreteAccessoryType(SdaiInstance instance) => new IfcDiscreteAccessoryType(instance);

        /// <summary>
        /// Create new instace of IfcDiscreteAccessoryType and returns object of this class to interact with
        /// </summary>
        public static new IfcDiscreteAccessoryType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDiscreteAccessoryType"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDiscreteAccessoryType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionElement(SdaiInstance instance) : base(instance) { }
        public IfcDistributionElement() : base(0) { }

        public static implicit operator IfcDistributionElement(SdaiInstance instance) => new IfcDistributionElement(instance);

        /// <summary>
        /// Create new instace of IfcDistributionElement and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDistributionElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionFlowElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionFlowElement : IfcDistributionElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionFlowElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionFlowElement(SdaiInstance instance) : base(instance) { }
        public IfcDistributionFlowElement() : base(0) { }

        public static implicit operator IfcDistributionFlowElement(SdaiInstance instance) => new IfcDistributionFlowElement(instance);

        /// <summary>
        /// Create new instace of IfcDistributionFlowElement and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionFlowElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionFlowElement"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcRelFlowControlElements HasControlElements { get { return (new SetOfIfcRelFlowControlElementsSerializer()).FromAttr(m_instance, "HasControlElements"); } }

        protected override TextValue WrapperEntityName() { return "IfcDistributionFlowElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionChamberElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionChamberElement : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionChamberElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionChamberElement(SdaiInstance instance) : base(instance) { }
        public IfcDistributionChamberElement() : base(0) { }

        public static implicit operator IfcDistributionChamberElement(SdaiInstance instance) => new IfcDistributionChamberElement(instance);

        /// <summary>
        /// Create new instace of IfcDistributionChamberElement and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionChamberElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionChamberElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDistributionChamberElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionChamberElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionChamberElementType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionChamberElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionChamberElementType(SdaiInstance instance) : base(instance) { }
        public IfcDistributionChamberElementType() : base(0) { }

        public static implicit operator IfcDistributionChamberElementType(SdaiInstance instance) => new IfcDistributionChamberElementType(instance);

        /// <summary>
        /// Create new instace of IfcDistributionChamberElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionChamberElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionChamberElementType"); Debug.Assert(inst != 0); return inst; }

        public IfcDistributionChamberElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDistributionChamberElementTypeEnum_); return EnumValue<IfcDistributionChamberElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDistributionChamberElementTypeEnum>.FromValue(value.Value, EnumNames.IfcDistributionChamberElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDistributionChamberElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionControlElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionControlElement : IfcDistributionElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionControlElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionControlElement(SdaiInstance instance) : base(instance) { }
        public IfcDistributionControlElement() : base(0) { }

        public static implicit operator IfcDistributionControlElement(SdaiInstance instance) => new IfcDistributionControlElement(instance);

        /// <summary>
        /// Create new instace of IfcDistributionControlElement and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionControlElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionControlElement"); Debug.Assert(inst != 0); return inst; }

        public TextValue ControlElementId
            {
            get { return get_string("ControlElementId", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ControlElementId", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelFlowControlElements AssignedToFlowElement { get { return (new SetOfIfcRelFlowControlElementsSerializer()).FromAttr(m_instance, "AssignedToFlowElement"); } }

        protected override TextValue WrapperEntityName() { return "IfcDistributionControlElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPort
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPort : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPort
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPort(SdaiInstance instance) : base(instance) { }
        public IfcPort() : base(0) { }

        public static implicit operator IfcPort(SdaiInstance instance) => new IfcPort(instance);

        public IfcRelConnectsPortToElement ContainedIn { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ContainedIn", ifcengine.sdaiINSTANCE, out inst); return new IfcRelConnectsPortToElement(inst); } }
        public SetOfIfcRelConnectsPorts ConnectedFrom { get { return (new SetOfIfcRelConnectsPortsSerializer()).FromAttr(m_instance, "ConnectedFrom"); } }
        public SetOfIfcRelConnectsPorts ConnectedTo { get { return (new SetOfIfcRelConnectsPortsSerializer()).FromAttr(m_instance, "ConnectedTo"); } }

        protected override TextValue WrapperEntityName() { return "IfcPort"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionPort
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionPort : IfcPort
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionPort
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionPort(SdaiInstance instance) : base(instance) { }
        public IfcDistributionPort() : base(0) { }

        public static implicit operator IfcDistributionPort(SdaiInstance instance) => new IfcDistributionPort(instance);

        /// <summary>
        /// Create new instace of IfcDistributionPort and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionPort Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionPort"); Debug.Assert(inst != 0); return inst; }

        public IfcFlowDirectionEnum? FlowDirection 
            { 
            get { var str = get_string("FlowDirection", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFlowDirectionEnum_); return EnumValue<IfcFlowDirectionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFlowDirectionEnum>.FromValue(value.Value, EnumNames.IfcFlowDirectionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "FlowDirection", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDistributionPort"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDocumentElectronicFormat
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDocumentElectronicFormat : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDocumentElectronicFormat
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDocumentElectronicFormat(SdaiInstance instance) : base(instance) { }
        public IfcDocumentElectronicFormat() : base(0) { }

        public static implicit operator IfcDocumentElectronicFormat(SdaiInstance instance) => new IfcDocumentElectronicFormat(instance);

        /// <summary>
        /// Create new instace of IfcDocumentElectronicFormat and returns object of this class to interact with
        /// </summary>
        public static new IfcDocumentElectronicFormat Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDocumentElectronicFormat"); Debug.Assert(inst != 0); return inst; }

        public TextValue FileExtension
            {
            get { return get_string("FileExtension", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FileExtension", ifcengine.sdaiSTRING, value); }
            }
        public TextValue MimeContentType
            {
            get { return get_string("MimeContentType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "MimeContentType", ifcengine.sdaiSTRING, value); }
            }
        public TextValue MimeSubtype
            {
            get { return get_string("MimeSubtype", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "MimeSubtype", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDocumentElectronicFormat"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDocumentInformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDocumentInformation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDocumentInformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDocumentInformation(SdaiInstance instance) : base(instance) { }
        public IfcDocumentInformation() : base(0) { }

        public static implicit operator IfcDocumentInformation(SdaiInstance instance) => new IfcDocumentInformation(instance);

        /// <summary>
        /// Create new instace of IfcDocumentInformation and returns object of this class to interact with
        /// </summary>
        public static new IfcDocumentInformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDocumentInformation"); Debug.Assert(inst != 0); return inst; }

        public TextValue DocumentId
            {
            get { return get_string("DocumentId", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "DocumentId", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcDocumentReference DocumentReferences { get { return (new SetOfIfcDocumentReferenceSerializer()).FromAttr(m_instance, "DocumentReferences"); } }
        public void put_DocumentReferences(IEnumerable<IfcDocumentReference> lst) { (new SetOfIfcDocumentReferenceSerializer()).ToSdaiAggr(lst, m_instance, "DocumentReferences"); }
        public void put_DocumentReferences_untyped(IEnumerable lst) { (new SetOfIfcDocumentReferenceSerializer()).ToSdaiAggr(lst, m_instance, "DocumentReferences"); }
        public TextValue Purpose
            {
            get { return get_string("Purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Purpose", ifcengine.sdaiSTRING, value); }
            }
        public TextValue IntendedUse
            {
            get { return get_string("IntendedUse", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "IntendedUse", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Scope
            {
            get { return get_string("Scope", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Scope", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Revision
            {
            get { return get_string("Revision", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Revision", ifcengine.sdaiSTRING, value); }
            }

        public IfcActorSelect DocumentOwner
            {
            get { return new IfcActorSelect(m_instance, "DocumentOwner", 0); }
            }
        public SetOfIfcActorSelect Editors { get { return (new SetOfIfcActorSelectSerializer()).FromAttr(m_instance, "Editors"); } }
        public void put_Editors(IEnumerable<IfcActorSelect> lst) { (new SetOfIfcActorSelectSerializer()).ToSdaiAggr(lst, m_instance, "Editors"); }
        public void put_Editors_untyped(IEnumerable lst) { (new SetOfIfcActorSelectSerializer()).ToSdaiAggr(lst, m_instance, "Editors"); }
        public IfcDateAndTime CreationTime 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "CreationTime", ifcengine.sdaiINSTANCE, out inst); return new IfcDateAndTime(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "CreationTime", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcDateAndTime LastRevisionTime 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LastRevisionTime", ifcengine.sdaiINSTANCE, out inst); return new IfcDateAndTime(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LastRevisionTime", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcDocumentElectronicFormat ElectronicFormat 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ElectronicFormat", ifcengine.sdaiINSTANCE, out inst); return new IfcDocumentElectronicFormat(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ElectronicFormat", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCalendarDate ValidFrom 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ValidFrom", ifcengine.sdaiINSTANCE, out inst); return new IfcCalendarDate(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ValidFrom", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCalendarDate ValidUntil 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ValidUntil", ifcengine.sdaiINSTANCE, out inst); return new IfcCalendarDate(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ValidUntil", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcDocumentConfidentialityEnum? Confidentiality 
            { 
            get { var str = get_string("Confidentiality", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDocumentConfidentialityEnum_); return EnumValue<IfcDocumentConfidentialityEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDocumentConfidentialityEnum>.FromValue(value.Value, EnumNames.IfcDocumentConfidentialityEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Confidentiality", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDocumentStatusEnum? Status 
            { 
            get { var str = get_string("Status", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDocumentStatusEnum_); return EnumValue<IfcDocumentStatusEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDocumentStatusEnum>.FromValue(value.Value, EnumNames.IfcDocumentStatusEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Status", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcDocumentInformationRelationship IsPointedTo { get { return (new SetOfIfcDocumentInformationRelationshipSerializer()).FromAttr(m_instance, "IsPointedTo"); } }
        public SetOfIfcDocumentInformationRelationship IsPointer { get { return (new SetOfIfcDocumentInformationRelationshipSerializer()).FromAttr(m_instance, "IsPointer"); } }

        protected override TextValue WrapperEntityName() { return "IfcDocumentInformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDocumentInformationRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDocumentInformationRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDocumentInformationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDocumentInformationRelationship(SdaiInstance instance) : base(instance) { }
        public IfcDocumentInformationRelationship() : base(0) { }

        public static implicit operator IfcDocumentInformationRelationship(SdaiInstance instance) => new IfcDocumentInformationRelationship(instance);

        /// <summary>
        /// Create new instace of IfcDocumentInformationRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcDocumentInformationRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDocumentInformationRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcDocumentInformation RelatingDocument 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingDocument", ifcengine.sdaiINSTANCE, out inst); return new IfcDocumentInformation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingDocument", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcDocumentInformation RelatedDocuments { get { return (new SetOfIfcDocumentInformationSerializer()).FromAttr(m_instance, "RelatedDocuments"); } }
        public void put_RelatedDocuments(IEnumerable<IfcDocumentInformation> lst) { (new SetOfIfcDocumentInformationSerializer()).ToSdaiAggr(lst, m_instance, "RelatedDocuments"); }
        public void put_RelatedDocuments_untyped(IEnumerable lst) { (new SetOfIfcDocumentInformationSerializer()).ToSdaiAggr(lst, m_instance, "RelatedDocuments"); }
        public TextValue RelationshipType
            {
            get { return get_string("RelationshipType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RelationshipType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDocumentInformationRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDocumentReference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDocumentReference : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDocumentReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDocumentReference(SdaiInstance instance) : base(instance) { }
        public IfcDocumentReference() : base(0) { }

        public static implicit operator IfcDocumentReference(SdaiInstance instance) => new IfcDocumentReference(instance);

        /// <summary>
        /// Create new instace of IfcDocumentReference and returns object of this class to interact with
        /// </summary>
        public static new IfcDocumentReference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDocumentReference"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcDocumentInformation ReferenceToDocument { get { return (new SetOfIfcDocumentInformationSerializer()).FromAttr(m_instance, "ReferenceToDocument"); } }

        protected override TextValue WrapperEntityName() { return "IfcDocumentReference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDoor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDoor : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDoor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDoor(SdaiInstance instance) : base(instance) { }
        public IfcDoor() : base(0) { }

        public static implicit operator IfcDoor(SdaiInstance instance) => new IfcDoor(instance);

        /// <summary>
        /// Create new instace of IfcDoor and returns object of this class to interact with
        /// </summary>
        public static new IfcDoor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDoor"); Debug.Assert(inst != 0); return inst; }

        public double? OverallHeight
            {
            get { return get_double("OverallHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OverallWidth
            {
            get { return get_double("OverallWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDoor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyDefinition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyDefinition : IfcRoot
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyDefinition(SdaiInstance instance) : base(instance) { }
        public IfcPropertyDefinition() : base(0) { }

        public static implicit operator IfcPropertyDefinition(SdaiInstance instance) => new IfcPropertyDefinition(instance);

        public SetOfIfcRelAssociates HasAssociations { get { return (new SetOfIfcRelAssociatesSerializer()).FromAttr(m_instance, "HasAssociations"); } }

        protected override TextValue WrapperEntityName() { return "IfcPropertyDefinition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertySetDefinition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertySetDefinition : IfcPropertyDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertySetDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertySetDefinition(SdaiInstance instance) : base(instance) { }
        public IfcPropertySetDefinition() : base(0) { }

        public static implicit operator IfcPropertySetDefinition(SdaiInstance instance) => new IfcPropertySetDefinition(instance);

        public SetOfIfcRelDefinesByProperties PropertyDefinitionOf { get { return (new SetOfIfcRelDefinesByPropertiesSerializer()).FromAttr(m_instance, "PropertyDefinitionOf"); } }
        public SetOfIfcTypeObject DefinesType { get { return (new SetOfIfcTypeObjectSerializer()).FromAttr(m_instance, "DefinesType"); } }

        protected override TextValue WrapperEntityName() { return "IfcPropertySetDefinition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDoorLiningProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDoorLiningProperties : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDoorLiningProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDoorLiningProperties(SdaiInstance instance) : base(instance) { }
        public IfcDoorLiningProperties() : base(0) { }

        public static implicit operator IfcDoorLiningProperties(SdaiInstance instance) => new IfcDoorLiningProperties(instance);

        /// <summary>
        /// Create new instace of IfcDoorLiningProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcDoorLiningProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDoorLiningProperties"); Debug.Assert(inst != 0); return inst; }

        public double? LiningDepth
            {
            get { return get_double("LiningDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LiningThickness
            {
            get { return get_double("LiningThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ThresholdDepth
            {
            get { return get_double("ThresholdDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThresholdDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ThresholdThickness
            {
            get { return get_double("ThresholdThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThresholdThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransomThickness
            {
            get { return get_double("TransomThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransomThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransomOffset
            {
            get { return get_double("TransomOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransomOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LiningOffset
            {
            get { return get_double("LiningOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ThresholdOffset
            {
            get { return get_double("ThresholdOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThresholdOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CasingThickness
            {
            get { return get_double("CasingThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CasingThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CasingDepth
            {
            get { return get_double("CasingDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CasingDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcShapeAspect ShapeAspectStyle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDoorLiningProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDoorPanelProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDoorPanelProperties : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDoorPanelProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDoorPanelProperties(SdaiInstance instance) : base(instance) { }
        public IfcDoorPanelProperties() : base(0) { }

        public static implicit operator IfcDoorPanelProperties(SdaiInstance instance) => new IfcDoorPanelProperties(instance);

        /// <summary>
        /// Create new instace of IfcDoorPanelProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcDoorPanelProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDoorPanelProperties"); Debug.Assert(inst != 0); return inst; }

        public double? PanelDepth
            {
            get { return get_double("PanelDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PanelDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcDoorPanelOperationEnum? PanelOperation 
            { 
            get { var str = get_string("PanelOperation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDoorPanelOperationEnum_); return EnumValue<IfcDoorPanelOperationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDoorPanelOperationEnum>.FromValue(value.Value, EnumNames.IfcDoorPanelOperationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PanelOperation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? PanelWidth
            {
            get { return get_double("PanelWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PanelWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcDoorPanelPositionEnum? PanelPosition 
            { 
            get { var str = get_string("PanelPosition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDoorPanelPositionEnum_); return EnumValue<IfcDoorPanelPositionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDoorPanelPositionEnum>.FromValue(value.Value, EnumNames.IfcDoorPanelPositionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PanelPosition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcShapeAspect ShapeAspectStyle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDoorPanelProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDoorStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDoorStyle : IfcTypeProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDoorStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDoorStyle(SdaiInstance instance) : base(instance) { }
        public IfcDoorStyle() : base(0) { }

        public static implicit operator IfcDoorStyle(SdaiInstance instance) => new IfcDoorStyle(instance);

        /// <summary>
        /// Create new instace of IfcDoorStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcDoorStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDoorStyle"); Debug.Assert(inst != 0); return inst; }

        public IfcDoorStyleOperationEnum? OperationType 
            { 
            get { var str = get_string("OperationType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDoorStyleOperationEnum_); return EnumValue<IfcDoorStyleOperationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDoorStyleOperationEnum>.FromValue(value.Value, EnumNames.IfcDoorStyleOperationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "OperationType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDoorStyleConstructionEnum? ConstructionType 
            { 
            get { var str = get_string("ConstructionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDoorStyleConstructionEnum_); return EnumValue<IfcDoorStyleConstructionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDoorStyleConstructionEnum>.FromValue(value.Value, EnumNames.IfcDoorStyleConstructionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ConstructionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? ParameterTakesPrecedence
            {
            get { return get_bool("ParameterTakesPrecedence", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ParameterTakesPrecedence", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? Sizeable
            {
            get { return get_bool("Sizeable", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Sizeable", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDoorStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedItem : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedItem(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedItem() : base(0) { }

        public static implicit operator IfcPreDefinedItem(SdaiInstance instance) => new IfcPreDefinedItem(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPreDefinedItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedColour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedColour : IfcPreDefinedItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedColour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedColour(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedColour() : base(0) { }

        public static implicit operator IfcPreDefinedColour(SdaiInstance instance) => new IfcPreDefinedColour(instance);


        protected override TextValue WrapperEntityName() { return "IfcPreDefinedColour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDraughtingPreDefinedColour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDraughtingPreDefinedColour : IfcPreDefinedColour
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDraughtingPreDefinedColour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDraughtingPreDefinedColour(SdaiInstance instance) : base(instance) { }
        public IfcDraughtingPreDefinedColour() : base(0) { }

        public static implicit operator IfcDraughtingPreDefinedColour(SdaiInstance instance) => new IfcDraughtingPreDefinedColour(instance);

        /// <summary>
        /// Create new instace of IfcDraughtingPreDefinedColour and returns object of this class to interact with
        /// </summary>
        public static new IfcDraughtingPreDefinedColour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDraughtingPreDefinedColour"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDraughtingPreDefinedColour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedCurveFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedCurveFont : IfcPreDefinedItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedCurveFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedCurveFont(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedCurveFont() : base(0) { }

        public static implicit operator IfcPreDefinedCurveFont(SdaiInstance instance) => new IfcPreDefinedCurveFont(instance);


        protected override TextValue WrapperEntityName() { return "IfcPreDefinedCurveFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDraughtingPreDefinedCurveFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDraughtingPreDefinedCurveFont : IfcPreDefinedCurveFont
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDraughtingPreDefinedCurveFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDraughtingPreDefinedCurveFont(SdaiInstance instance) : base(instance) { }
        public IfcDraughtingPreDefinedCurveFont() : base(0) { }

        public static implicit operator IfcDraughtingPreDefinedCurveFont(SdaiInstance instance) => new IfcDraughtingPreDefinedCurveFont(instance);

        /// <summary>
        /// Create new instace of IfcDraughtingPreDefinedCurveFont and returns object of this class to interact with
        /// </summary>
        public static new IfcDraughtingPreDefinedCurveFont Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDraughtingPreDefinedCurveFont"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDraughtingPreDefinedCurveFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedTextFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedTextFont : IfcPreDefinedItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedTextFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedTextFont(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedTextFont() : base(0) { }

        public static implicit operator IfcPreDefinedTextFont(SdaiInstance instance) => new IfcPreDefinedTextFont(instance);


        protected override TextValue WrapperEntityName() { return "IfcPreDefinedTextFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDraughtingPreDefinedTextFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDraughtingPreDefinedTextFont : IfcPreDefinedTextFont
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDraughtingPreDefinedTextFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDraughtingPreDefinedTextFont(SdaiInstance instance) : base(instance) { }
        public IfcDraughtingPreDefinedTextFont() : base(0) { }

        public static implicit operator IfcDraughtingPreDefinedTextFont(SdaiInstance instance) => new IfcDraughtingPreDefinedTextFont(instance);

        /// <summary>
        /// Create new instace of IfcDraughtingPreDefinedTextFont and returns object of this class to interact with
        /// </summary>
        public static new IfcDraughtingPreDefinedTextFont Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDraughtingPreDefinedTextFont"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcDraughtingPreDefinedTextFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDuctFittingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDuctFittingType : IfcFlowFittingType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDuctFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDuctFittingType(SdaiInstance instance) : base(instance) { }
        public IfcDuctFittingType() : base(0) { }

        public static implicit operator IfcDuctFittingType(SdaiInstance instance) => new IfcDuctFittingType(instance);

        /// <summary>
        /// Create new instace of IfcDuctFittingType and returns object of this class to interact with
        /// </summary>
        public static new IfcDuctFittingType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDuctFittingType"); Debug.Assert(inst != 0); return inst; }

        public IfcDuctFittingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDuctFittingTypeEnum_); return EnumValue<IfcDuctFittingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDuctFittingTypeEnum>.FromValue(value.Value, EnumNames.IfcDuctFittingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDuctFittingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDuctSegmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDuctSegmentType : IfcFlowSegmentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDuctSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDuctSegmentType(SdaiInstance instance) : base(instance) { }
        public IfcDuctSegmentType() : base(0) { }

        public static implicit operator IfcDuctSegmentType(SdaiInstance instance) => new IfcDuctSegmentType(instance);

        /// <summary>
        /// Create new instace of IfcDuctSegmentType and returns object of this class to interact with
        /// </summary>
        public static new IfcDuctSegmentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDuctSegmentType"); Debug.Assert(inst != 0); return inst; }

        public IfcDuctSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDuctSegmentTypeEnum_); return EnumValue<IfcDuctSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDuctSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcDuctSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDuctSegmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowTreatmentDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowTreatmentDeviceType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowTreatmentDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowTreatmentDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcFlowTreatmentDeviceType() : base(0) { }

        public static implicit operator IfcFlowTreatmentDeviceType(SdaiInstance instance) => new IfcFlowTreatmentDeviceType(instance);


        protected override TextValue WrapperEntityName() { return "IfcFlowTreatmentDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDuctSilencerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDuctSilencerType : IfcFlowTreatmentDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDuctSilencerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDuctSilencerType(SdaiInstance instance) : base(instance) { }
        public IfcDuctSilencerType() : base(0) { }

        public static implicit operator IfcDuctSilencerType(SdaiInstance instance) => new IfcDuctSilencerType(instance);

        /// <summary>
        /// Create new instace of IfcDuctSilencerType and returns object of this class to interact with
        /// </summary>
        public static new IfcDuctSilencerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDuctSilencerType"); Debug.Assert(inst != 0); return inst; }

        public IfcDuctSilencerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDuctSilencerTypeEnum_); return EnumValue<IfcDuctSilencerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDuctSilencerTypeEnum>.FromValue(value.Value, EnumNames.IfcDuctSilencerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcDuctSilencerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEdge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEdge : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEdge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEdge(SdaiInstance instance) : base(instance) { }
        public IfcEdge() : base(0) { }

        public static implicit operator IfcEdge(SdaiInstance instance) => new IfcEdge(instance);

        /// <summary>
        /// Create new instace of IfcEdge and returns object of this class to interact with
        /// </summary>
        public static new IfcEdge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEdge"); Debug.Assert(inst != 0); return inst; }

        public IfcVertex EdgeStart 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EdgeStart", ifcengine.sdaiINSTANCE, out inst); return new IfcVertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeStart", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcVertex EdgeEnd 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EdgeEnd", ifcengine.sdaiINSTANCE, out inst); return new IfcVertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeEnd", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcEdge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEdgeCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEdgeCurve : IfcEdge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEdgeCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEdgeCurve(SdaiInstance instance) : base(instance) { }
        public IfcEdgeCurve() : base(0) { }

        public static implicit operator IfcEdgeCurve(SdaiInstance instance) => new IfcEdgeCurve(instance);

        /// <summary>
        /// Create new instace of IfcEdgeCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcEdgeCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEdgeCurve"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve EdgeGeometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EdgeGeometry", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeGeometry", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? SameSense
            {
            get { return get_bool("SameSense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SameSense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcEdgeCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLoop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLoop : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLoop(SdaiInstance instance) : base(instance) { }
        public IfcLoop() : base(0) { }

        public static implicit operator IfcLoop(SdaiInstance instance) => new IfcLoop(instance);

        /// <summary>
        /// Create new instace of IfcLoop and returns object of this class to interact with
        /// </summary>
        public static new IfcLoop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLoop"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcLoop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEdgeLoop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEdgeLoop : IfcLoop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEdgeLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEdgeLoop(SdaiInstance instance) : base(instance) { }
        public IfcEdgeLoop() : base(0) { }

        public static implicit operator IfcEdgeLoop(SdaiInstance instance) => new IfcEdgeLoop(instance);

        /// <summary>
        /// Create new instace of IfcEdgeLoop and returns object of this class to interact with
        /// </summary>
        public static new IfcEdgeLoop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEdgeLoop"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcOrientedEdge EdgeList { get { return (new ListOfIfcOrientedEdgeSerializer()).FromAttr(m_instance, "EdgeList"); } }
        public void put_EdgeList(IEnumerable<IfcOrientedEdge> lst) { (new ListOfIfcOrientedEdgeSerializer()).ToSdaiAggr(lst, m_instance, "EdgeList"); }
        public void put_EdgeList_untyped(IEnumerable lst) { (new ListOfIfcOrientedEdgeSerializer()).ToSdaiAggr(lst, m_instance, "EdgeList"); }
        public IntValue? Ne { get { return get_IntValue("Ne", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcEdgeLoop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEnergyProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEnergyProperties : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEnergyProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEnergyProperties(SdaiInstance instance) : base(instance) { }
        public IfcEnergyProperties() : base(0) { }

        public static implicit operator IfcEnergyProperties(SdaiInstance instance) => new IfcEnergyProperties(instance);

        /// <summary>
        /// Create new instace of IfcEnergyProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcEnergyProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEnergyProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcEnergySequenceEnum? EnergySequence 
            { 
            get { var str = get_string("EnergySequence", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEnergySequenceEnum_); return EnumValue<IfcEnergySequenceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEnergySequenceEnum>.FromValue(value.Value, EnumNames.IfcEnergySequenceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "EnergySequence", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedEnergySequence
            {
            get { return get_string("UserDefinedEnergySequence", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedEnergySequence", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcEnergyProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricalBaseProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricalBaseProperties : IfcEnergyProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricalBaseProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricalBaseProperties(SdaiInstance instance) : base(instance) { }
        public IfcElectricalBaseProperties() : base(0) { }

        public static implicit operator IfcElectricalBaseProperties(SdaiInstance instance) => new IfcElectricalBaseProperties(instance);

        /// <summary>
        /// Create new instace of IfcElectricalBaseProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricalBaseProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricalBaseProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricCurrentEnum? ElectricCurrentType 
            { 
            get { var str = get_string("ElectricCurrentType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricCurrentEnum_); return EnumValue<IfcElectricCurrentEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricCurrentEnum>.FromValue(value.Value, EnumNames.IfcElectricCurrentEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ElectricCurrentType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? InputVoltage
            {
            get { return get_double("InputVoltage", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InputVoltage", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? InputFrequency
            {
            get { return get_double("InputFrequency", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InputFrequency", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FullLoadCurrent
            {
            get { return get_double("FullLoadCurrent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FullLoadCurrent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MinimumCircuitCurrent
            {
            get { return get_double("MinimumCircuitCurrent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MinimumCircuitCurrent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MaximumPowerInput
            {
            get { return get_double("MaximumPowerInput", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MaximumPowerInput", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RatedPowerInput
            {
            get { return get_double("RatedPowerInput", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RatedPowerInput", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IntValue? InputPhase
            {
            get { return get_IntValue("InputPhase", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InputPhase", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcElectricalBaseProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSystem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSystem : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSystem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSystem(SdaiInstance instance) : base(instance) { }
        public IfcSystem() : base(0) { }

        public static implicit operator IfcSystem(SdaiInstance instance) => new IfcSystem(instance);

        /// <summary>
        /// Create new instace of IfcSystem and returns object of this class to interact with
        /// </summary>
        public static new IfcSystem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSystem"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcRelServicesBuildings ServicesBuildings { get { return (new SetOfIfcRelServicesBuildingsSerializer()).FromAttr(m_instance, "ServicesBuildings"); } }

        protected override TextValue WrapperEntityName() { return "IfcSystem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricalCircuit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricalCircuit : IfcSystem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricalCircuit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricalCircuit(SdaiInstance instance) : base(instance) { }
        public IfcElectricalCircuit() : base(0) { }

        public static implicit operator IfcElectricalCircuit(SdaiInstance instance) => new IfcElectricalCircuit(instance);

        /// <summary>
        /// Create new instace of IfcElectricalCircuit and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricalCircuit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricalCircuit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcElectricalCircuit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricalElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricalElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricalElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricalElement(SdaiInstance instance) : base(instance) { }
        public IfcElectricalElement() : base(0) { }

        public static implicit operator IfcElectricalElement(SdaiInstance instance) => new IfcElectricalElement(instance);

        /// <summary>
        /// Create new instace of IfcElectricalElement and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricalElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricalElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcElectricalElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricApplianceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricApplianceType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricApplianceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricApplianceType(SdaiInstance instance) : base(instance) { }
        public IfcElectricApplianceType() : base(0) { }

        public static implicit operator IfcElectricApplianceType(SdaiInstance instance) => new IfcElectricApplianceType(instance);

        /// <summary>
        /// Create new instace of IfcElectricApplianceType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricApplianceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricApplianceType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricApplianceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricApplianceTypeEnum_); return EnumValue<IfcElectricApplianceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricApplianceTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricApplianceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcElectricApplianceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowController
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowController : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowController
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowController(SdaiInstance instance) : base(instance) { }
        public IfcFlowController() : base(0) { }

        public static implicit operator IfcFlowController(SdaiInstance instance) => new IfcFlowController(instance);

        /// <summary>
        /// Create new instace of IfcFlowController and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowController Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowController"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFlowController"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricDistributionPoint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricDistributionPoint : IfcFlowController
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricDistributionPoint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricDistributionPoint(SdaiInstance instance) : base(instance) { }
        public IfcElectricDistributionPoint() : base(0) { }

        public static implicit operator IfcElectricDistributionPoint(SdaiInstance instance) => new IfcElectricDistributionPoint(instance);

        /// <summary>
        /// Create new instace of IfcElectricDistributionPoint and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricDistributionPoint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricDistributionPoint"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricDistributionPointFunctionEnum? DistributionPointFunction 
            { 
            get { var str = get_string("DistributionPointFunction", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricDistributionPointFunctionEnum_); return EnumValue<IfcElectricDistributionPointFunctionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricDistributionPointFunctionEnum>.FromValue(value.Value, EnumNames.IfcElectricDistributionPointFunctionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "DistributionPointFunction", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedFunction
            {
            get { return get_string("UserDefinedFunction", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedFunction", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcElectricDistributionPoint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowStorageDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowStorageDeviceType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowStorageDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowStorageDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcFlowStorageDeviceType() : base(0) { }

        public static implicit operator IfcFlowStorageDeviceType(SdaiInstance instance) => new IfcFlowStorageDeviceType(instance);


        protected override TextValue WrapperEntityName() { return "IfcFlowStorageDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricFlowStorageDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricFlowStorageDeviceType : IfcFlowStorageDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricFlowStorageDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricFlowStorageDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcElectricFlowStorageDeviceType() : base(0) { }

        public static implicit operator IfcElectricFlowStorageDeviceType(SdaiInstance instance) => new IfcElectricFlowStorageDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcElectricFlowStorageDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricFlowStorageDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricFlowStorageDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricFlowStorageDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricFlowStorageDeviceTypeEnum_); return EnumValue<IfcElectricFlowStorageDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricFlowStorageDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricFlowStorageDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcElectricFlowStorageDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricGeneratorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricGeneratorType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricGeneratorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricGeneratorType(SdaiInstance instance) : base(instance) { }
        public IfcElectricGeneratorType() : base(0) { }

        public static implicit operator IfcElectricGeneratorType(SdaiInstance instance) => new IfcElectricGeneratorType(instance);

        /// <summary>
        /// Create new instace of IfcElectricGeneratorType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricGeneratorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricGeneratorType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricGeneratorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricGeneratorTypeEnum_); return EnumValue<IfcElectricGeneratorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricGeneratorTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricGeneratorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcElectricGeneratorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricHeaterType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricHeaterType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricHeaterType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricHeaterType(SdaiInstance instance) : base(instance) { }
        public IfcElectricHeaterType() : base(0) { }

        public static implicit operator IfcElectricHeaterType(SdaiInstance instance) => new IfcElectricHeaterType(instance);

        /// <summary>
        /// Create new instace of IfcElectricHeaterType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricHeaterType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricHeaterType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricHeaterTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricHeaterTypeEnum_); return EnumValue<IfcElectricHeaterTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricHeaterTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricHeaterTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcElectricHeaterType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricMotorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricMotorType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricMotorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricMotorType(SdaiInstance instance) : base(instance) { }
        public IfcElectricMotorType() : base(0) { }

        public static implicit operator IfcElectricMotorType(SdaiInstance instance) => new IfcElectricMotorType(instance);

        /// <summary>
        /// Create new instace of IfcElectricMotorType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricMotorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricMotorType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricMotorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricMotorTypeEnum_); return EnumValue<IfcElectricMotorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricMotorTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricMotorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcElectricMotorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricTimeControlType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricTimeControlType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricTimeControlType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricTimeControlType(SdaiInstance instance) : base(instance) { }
        public IfcElectricTimeControlType() : base(0) { }

        public static implicit operator IfcElectricTimeControlType(SdaiInstance instance) => new IfcElectricTimeControlType(instance);

        /// <summary>
        /// Create new instace of IfcElectricTimeControlType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricTimeControlType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricTimeControlType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricTimeControlTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricTimeControlTypeEnum_); return EnumValue<IfcElectricTimeControlTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricTimeControlTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricTimeControlTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcElectricTimeControlType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementarySurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementarySurface : IfcSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementarySurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementarySurface(SdaiInstance instance) : base(instance) { }
        public IfcElementarySurface() : base(0) { }

        public static implicit operator IfcElementarySurface(SdaiInstance instance) => new IfcElementarySurface(instance);

        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcElementarySurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementAssembly
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementAssembly : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementAssembly
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementAssembly(SdaiInstance instance) : base(instance) { }
        public IfcElementAssembly() : base(0) { }

        public static implicit operator IfcElementAssembly(SdaiInstance instance) => new IfcElementAssembly(instance);

        /// <summary>
        /// Create new instace of IfcElementAssembly and returns object of this class to interact with
        /// </summary>
        public static new IfcElementAssembly Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElementAssembly"); Debug.Assert(inst != 0); return inst; }

        public IfcAssemblyPlaceEnum? AssemblyPlace 
            { 
            get { var str = get_string("AssemblyPlace", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAssemblyPlaceEnum_); return EnumValue<IfcAssemblyPlaceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAssemblyPlaceEnum>.FromValue(value.Value, EnumNames.IfcAssemblyPlaceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "AssemblyPlace", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcElementAssemblyTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElementAssemblyTypeEnum_); return EnumValue<IfcElementAssemblyTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElementAssemblyTypeEnum>.FromValue(value.Value, EnumNames.IfcElementAssemblyTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcElementAssembly"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementQuantity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementQuantity : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementQuantity(SdaiInstance instance) : base(instance) { }
        public IfcElementQuantity() : base(0) { }

        public static implicit operator IfcElementQuantity(SdaiInstance instance) => new IfcElementQuantity(instance);

        /// <summary>
        /// Create new instace of IfcElementQuantity and returns object of this class to interact with
        /// </summary>
        public static new IfcElementQuantity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElementQuantity"); Debug.Assert(inst != 0); return inst; }

        public TextValue MethodOfMeasurement
            {
            get { return get_string("MethodOfMeasurement", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "MethodOfMeasurement", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcPhysicalQuantity Quantities { get { return (new SetOfIfcPhysicalQuantitySerializer()).FromAttr(m_instance, "Quantities"); } }
        public void put_Quantities(IEnumerable<IfcPhysicalQuantity> lst) { (new SetOfIfcPhysicalQuantitySerializer()).ToSdaiAggr(lst, m_instance, "Quantities"); }
        public void put_Quantities_untyped(IEnumerable lst) { (new SetOfIfcPhysicalQuantitySerializer()).ToSdaiAggr(lst, m_instance, "Quantities"); }

        protected override TextValue WrapperEntityName() { return "IfcElementQuantity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEllipse
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEllipse : IfcConic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEllipse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEllipse(SdaiInstance instance) : base(instance) { }
        public IfcEllipse() : base(0) { }

        public static implicit operator IfcEllipse(SdaiInstance instance) => new IfcEllipse(instance);

        /// <summary>
        /// Create new instace of IfcEllipse and returns object of this class to interact with
        /// </summary>
        public static new IfcEllipse Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEllipse"); Debug.Assert(inst != 0); return inst; }

        public double? SemiAxis1
            {
            get { return get_double("SemiAxis1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SemiAxis1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SemiAxis2
            {
            get { return get_double("SemiAxis2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SemiAxis2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcEllipse"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEllipseProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEllipseProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEllipseProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEllipseProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcEllipseProfileDef() : base(0) { }

        public static implicit operator IfcEllipseProfileDef(SdaiInstance instance) => new IfcEllipseProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcEllipseProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcEllipseProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEllipseProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? SemiAxis1
            {
            get { return get_double("SemiAxis1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SemiAxis1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SemiAxis2
            {
            get { return get_double("SemiAxis2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SemiAxis2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcEllipseProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEnergyConversionDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEnergyConversionDevice : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEnergyConversionDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEnergyConversionDevice(SdaiInstance instance) : base(instance) { }
        public IfcEnergyConversionDevice() : base(0) { }

        public static implicit operator IfcEnergyConversionDevice(SdaiInstance instance) => new IfcEnergyConversionDevice(instance);

        /// <summary>
        /// Create new instace of IfcEnergyConversionDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcEnergyConversionDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEnergyConversionDevice"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcEnergyConversionDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEnvironmentalImpactValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEnvironmentalImpactValue : IfcAppliedValue
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEnvironmentalImpactValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEnvironmentalImpactValue(SdaiInstance instance) : base(instance) { }
        public IfcEnvironmentalImpactValue() : base(0) { }

        public static implicit operator IfcEnvironmentalImpactValue(SdaiInstance instance) => new IfcEnvironmentalImpactValue(instance);

        /// <summary>
        /// Create new instace of IfcEnvironmentalImpactValue and returns object of this class to interact with
        /// </summary>
        public static new IfcEnvironmentalImpactValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEnvironmentalImpactValue"); Debug.Assert(inst != 0); return inst; }

        public TextValue ImpactType
            {
            get { return get_string("ImpactType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ImpactType", ifcengine.sdaiSTRING, value); }
            }
        public IfcEnvironmentalImpactCategoryEnum? Category 
            { 
            get { var str = get_string("Category", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEnvironmentalImpactCategoryEnum_); return EnumValue<IfcEnvironmentalImpactCategoryEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEnvironmentalImpactCategoryEnum>.FromValue(value.Value, EnumNames.IfcEnvironmentalImpactCategoryEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Category", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedCategory
            {
            get { return get_string("UserDefinedCategory", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedCategory", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcEnvironmentalImpactValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEquipmentElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEquipmentElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEquipmentElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEquipmentElement(SdaiInstance instance) : base(instance) { }
        public IfcEquipmentElement() : base(0) { }

        public static implicit operator IfcEquipmentElement(SdaiInstance instance) => new IfcEquipmentElement(instance);

        /// <summary>
        /// Create new instace of IfcEquipmentElement and returns object of this class to interact with
        /// </summary>
        public static new IfcEquipmentElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEquipmentElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcEquipmentElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEquipmentStandard
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEquipmentStandard : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEquipmentStandard
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEquipmentStandard(SdaiInstance instance) : base(instance) { }
        public IfcEquipmentStandard() : base(0) { }

        public static implicit operator IfcEquipmentStandard(SdaiInstance instance) => new IfcEquipmentStandard(instance);

        /// <summary>
        /// Create new instace of IfcEquipmentStandard and returns object of this class to interact with
        /// </summary>
        public static new IfcEquipmentStandard Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEquipmentStandard"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcEquipmentStandard"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEvaporativeCoolerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEvaporativeCoolerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEvaporativeCoolerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEvaporativeCoolerType(SdaiInstance instance) : base(instance) { }
        public IfcEvaporativeCoolerType() : base(0) { }

        public static implicit operator IfcEvaporativeCoolerType(SdaiInstance instance) => new IfcEvaporativeCoolerType(instance);

        /// <summary>
        /// Create new instace of IfcEvaporativeCoolerType and returns object of this class to interact with
        /// </summary>
        public static new IfcEvaporativeCoolerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEvaporativeCoolerType"); Debug.Assert(inst != 0); return inst; }

        public IfcEvaporativeCoolerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEvaporativeCoolerTypeEnum_); return EnumValue<IfcEvaporativeCoolerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEvaporativeCoolerTypeEnum>.FromValue(value.Value, EnumNames.IfcEvaporativeCoolerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcEvaporativeCoolerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEvaporatorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEvaporatorType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEvaporatorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEvaporatorType(SdaiInstance instance) : base(instance) { }
        public IfcEvaporatorType() : base(0) { }

        public static implicit operator IfcEvaporatorType(SdaiInstance instance) => new IfcEvaporatorType(instance);

        /// <summary>
        /// Create new instace of IfcEvaporatorType and returns object of this class to interact with
        /// </summary>
        public static new IfcEvaporatorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEvaporatorType"); Debug.Assert(inst != 0); return inst; }

        public IfcEvaporatorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEvaporatorTypeEnum_); return EnumValue<IfcEvaporatorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEvaporatorTypeEnum>.FromValue(value.Value, EnumNames.IfcEvaporatorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcEvaporatorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialProperties : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialProperties(SdaiInstance instance) : base(instance) { }
        public IfcMaterialProperties() : base(0) { }

        public static implicit operator IfcMaterialProperties(SdaiInstance instance) => new IfcMaterialProperties(instance);

        public IfcMaterial Material 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterial(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMaterialProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExtendedMaterialProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExtendedMaterialProperties : IfcMaterialProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExtendedMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExtendedMaterialProperties(SdaiInstance instance) : base(instance) { }
        public IfcExtendedMaterialProperties() : base(0) { }

        public static implicit operator IfcExtendedMaterialProperties(SdaiInstance instance) => new IfcExtendedMaterialProperties(instance);

        /// <summary>
        /// Create new instace of IfcExtendedMaterialProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcExtendedMaterialProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExtendedMaterialProperties"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProperty ExtendedProperties { get { return (new SetOfIfcPropertySerializer()).FromAttr(m_instance, "ExtendedProperties"); } }
        public void put_ExtendedProperties(IEnumerable<IfcProperty> lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "ExtendedProperties"); }
        public void put_ExtendedProperties_untyped(IEnumerable lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "ExtendedProperties"); }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcExtendedMaterialProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternallyDefinedHatchStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternallyDefinedHatchStyle : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternallyDefinedHatchStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternallyDefinedHatchStyle(SdaiInstance instance) : base(instance) { }
        public IfcExternallyDefinedHatchStyle() : base(0) { }

        public static implicit operator IfcExternallyDefinedHatchStyle(SdaiInstance instance) => new IfcExternallyDefinedHatchStyle(instance);

        /// <summary>
        /// Create new instace of IfcExternallyDefinedHatchStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcExternallyDefinedHatchStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExternallyDefinedHatchStyle"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcExternallyDefinedHatchStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternallyDefinedSurfaceStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternallyDefinedSurfaceStyle : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternallyDefinedSurfaceStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternallyDefinedSurfaceStyle(SdaiInstance instance) : base(instance) { }
        public IfcExternallyDefinedSurfaceStyle() : base(0) { }

        public static implicit operator IfcExternallyDefinedSurfaceStyle(SdaiInstance instance) => new IfcExternallyDefinedSurfaceStyle(instance);

        /// <summary>
        /// Create new instace of IfcExternallyDefinedSurfaceStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcExternallyDefinedSurfaceStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExternallyDefinedSurfaceStyle"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcExternallyDefinedSurfaceStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternallyDefinedSymbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternallyDefinedSymbol : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternallyDefinedSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternallyDefinedSymbol(SdaiInstance instance) : base(instance) { }
        public IfcExternallyDefinedSymbol() : base(0) { }

        public static implicit operator IfcExternallyDefinedSymbol(SdaiInstance instance) => new IfcExternallyDefinedSymbol(instance);

        /// <summary>
        /// Create new instace of IfcExternallyDefinedSymbol and returns object of this class to interact with
        /// </summary>
        public static new IfcExternallyDefinedSymbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExternallyDefinedSymbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcExternallyDefinedSymbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternallyDefinedTextFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternallyDefinedTextFont : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternallyDefinedTextFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternallyDefinedTextFont(SdaiInstance instance) : base(instance) { }
        public IfcExternallyDefinedTextFont() : base(0) { }

        public static implicit operator IfcExternallyDefinedTextFont(SdaiInstance instance) => new IfcExternallyDefinedTextFont(instance);

        /// <summary>
        /// Create new instace of IfcExternallyDefinedTextFont and returns object of this class to interact with
        /// </summary>
        public static new IfcExternallyDefinedTextFont Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExternallyDefinedTextFont"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcExternallyDefinedTextFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSweptAreaSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSweptAreaSolid : IfcSolidModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSweptAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSweptAreaSolid(SdaiInstance instance) : base(instance) { }
        public IfcSweptAreaSolid() : base(0) { }

        public static implicit operator IfcSweptAreaSolid(SdaiInstance instance) => new IfcSweptAreaSolid(instance);

        public IfcProfileDef SweptArea 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SweptArea", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SweptArea", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSweptAreaSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExtrudedAreaSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExtrudedAreaSolid : IfcSweptAreaSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExtrudedAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExtrudedAreaSolid(SdaiInstance instance) : base(instance) { }
        public IfcExtrudedAreaSolid() : base(0) { }

        public static implicit operator IfcExtrudedAreaSolid(SdaiInstance instance) => new IfcExtrudedAreaSolid(instance);

        /// <summary>
        /// Create new instace of IfcExtrudedAreaSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcExtrudedAreaSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExtrudedAreaSolid"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection ExtrudedDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ExtrudedDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ExtrudedDirection", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcExtrudedAreaSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFace
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFace : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFace(SdaiInstance instance) : base(instance) { }
        public IfcFace() : base(0) { }

        public static implicit operator IfcFace(SdaiInstance instance) => new IfcFace(instance);

        /// <summary>
        /// Create new instace of IfcFace and returns object of this class to interact with
        /// </summary>
        public static new IfcFace Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFace"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcFaceBound Bounds { get { return (new SetOfIfcFaceBoundSerializer()).FromAttr(m_instance, "Bounds"); } }
        public void put_Bounds(IEnumerable<IfcFaceBound> lst) { (new SetOfIfcFaceBoundSerializer()).ToSdaiAggr(lst, m_instance, "Bounds"); }
        public void put_Bounds_untyped(IEnumerable lst) { (new SetOfIfcFaceBoundSerializer()).ToSdaiAggr(lst, m_instance, "Bounds"); }

        protected override TextValue WrapperEntityName() { return "IfcFace"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFaceBasedSurfaceModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFaceBasedSurfaceModel : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFaceBasedSurfaceModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFaceBasedSurfaceModel(SdaiInstance instance) : base(instance) { }
        public IfcFaceBasedSurfaceModel() : base(0) { }

        public static implicit operator IfcFaceBasedSurfaceModel(SdaiInstance instance) => new IfcFaceBasedSurfaceModel(instance);

        /// <summary>
        /// Create new instace of IfcFaceBasedSurfaceModel and returns object of this class to interact with
        /// </summary>
        public static new IfcFaceBasedSurfaceModel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFaceBasedSurfaceModel"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcConnectedFaceSet FbsmFaces { get { return (new SetOfIfcConnectedFaceSetSerializer()).FromAttr(m_instance, "FbsmFaces"); } }
        public void put_FbsmFaces(IEnumerable<IfcConnectedFaceSet> lst) { (new SetOfIfcConnectedFaceSetSerializer()).ToSdaiAggr(lst, m_instance, "FbsmFaces"); }
        public void put_FbsmFaces_untyped(IEnumerable lst) { (new SetOfIfcConnectedFaceSetSerializer()).ToSdaiAggr(lst, m_instance, "FbsmFaces"); }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcFaceBasedSurfaceModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFaceBound
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFaceBound : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFaceBound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFaceBound(SdaiInstance instance) : base(instance) { }
        public IfcFaceBound() : base(0) { }

        public static implicit operator IfcFaceBound(SdaiInstance instance) => new IfcFaceBound(instance);

        /// <summary>
        /// Create new instace of IfcFaceBound and returns object of this class to interact with
        /// </summary>
        public static new IfcFaceBound Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFaceBound"); Debug.Assert(inst != 0); return inst; }

        public IfcLoop Bound 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Bound", ifcengine.sdaiINSTANCE, out inst); return new IfcLoop(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Bound", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? Orientation
            {
            get { return get_bool("Orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFaceBound"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFaceOuterBound
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFaceOuterBound : IfcFaceBound
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFaceOuterBound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFaceOuterBound(SdaiInstance instance) : base(instance) { }
        public IfcFaceOuterBound() : base(0) { }

        public static implicit operator IfcFaceOuterBound(SdaiInstance instance) => new IfcFaceOuterBound(instance);

        /// <summary>
        /// Create new instace of IfcFaceOuterBound and returns object of this class to interact with
        /// </summary>
        public static new IfcFaceOuterBound Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFaceOuterBound"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFaceOuterBound"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFaceSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFaceSurface : IfcFace
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFaceSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFaceSurface(SdaiInstance instance) : base(instance) { }
        public IfcFaceSurface() : base(0) { }

        public static implicit operator IfcFaceSurface(SdaiInstance instance) => new IfcFaceSurface(instance);

        /// <summary>
        /// Create new instace of IfcFaceSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcFaceSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFaceSurface"); Debug.Assert(inst != 0); return inst; }

        public IfcSurface FaceSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "FaceSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "FaceSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? SameSense
            {
            get { return get_bool("SameSense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SameSense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFaceSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcManifoldSolidBrep
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcManifoldSolidBrep : IfcSolidModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcManifoldSolidBrep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcManifoldSolidBrep(SdaiInstance instance) : base(instance) { }
        public IfcManifoldSolidBrep() : base(0) { }

        public static implicit operator IfcManifoldSolidBrep(SdaiInstance instance) => new IfcManifoldSolidBrep(instance);

        public IfcClosedShell Outer 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Outer", ifcengine.sdaiINSTANCE, out inst); return new IfcClosedShell(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Outer", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcManifoldSolidBrep"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFacetedBrep
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFacetedBrep : IfcManifoldSolidBrep
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFacetedBrep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFacetedBrep(SdaiInstance instance) : base(instance) { }
        public IfcFacetedBrep() : base(0) { }

        public static implicit operator IfcFacetedBrep(SdaiInstance instance) => new IfcFacetedBrep(instance);

        /// <summary>
        /// Create new instace of IfcFacetedBrep and returns object of this class to interact with
        /// </summary>
        public static new IfcFacetedBrep Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFacetedBrep"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFacetedBrep"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFacetedBrepWithVoids
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFacetedBrepWithVoids : IfcManifoldSolidBrep
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFacetedBrepWithVoids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFacetedBrepWithVoids(SdaiInstance instance) : base(instance) { }
        public IfcFacetedBrepWithVoids() : base(0) { }

        public static implicit operator IfcFacetedBrepWithVoids(SdaiInstance instance) => new IfcFacetedBrepWithVoids(instance);

        /// <summary>
        /// Create new instace of IfcFacetedBrepWithVoids and returns object of this class to interact with
        /// </summary>
        public static new IfcFacetedBrepWithVoids Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFacetedBrepWithVoids"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcClosedShell Voids { get { return (new SetOfIfcClosedShellSerializer()).FromAttr(m_instance, "Voids"); } }
        public void put_Voids(IEnumerable<IfcClosedShell> lst) { (new SetOfIfcClosedShellSerializer()).ToSdaiAggr(lst, m_instance, "Voids"); }
        public void put_Voids_untyped(IEnumerable lst) { (new SetOfIfcClosedShellSerializer()).ToSdaiAggr(lst, m_instance, "Voids"); }

        protected override TextValue WrapperEntityName() { return "IfcFacetedBrepWithVoids"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralConnectionCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralConnectionCondition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralConnectionCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralConnectionCondition(SdaiInstance instance) : base(instance) { }
        public IfcStructuralConnectionCondition() : base(0) { }

        public static implicit operator IfcStructuralConnectionCondition(SdaiInstance instance) => new IfcStructuralConnectionCondition(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralConnectionCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFailureConnectionCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFailureConnectionCondition : IfcStructuralConnectionCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFailureConnectionCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFailureConnectionCondition(SdaiInstance instance) : base(instance) { }
        public IfcFailureConnectionCondition() : base(0) { }

        public static implicit operator IfcFailureConnectionCondition(SdaiInstance instance) => new IfcFailureConnectionCondition(instance);

        /// <summary>
        /// Create new instace of IfcFailureConnectionCondition and returns object of this class to interact with
        /// </summary>
        public static new IfcFailureConnectionCondition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFailureConnectionCondition"); Debug.Assert(inst != 0); return inst; }

        public double? TensionFailureX
            {
            get { return get_double("TensionFailureX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TensionFailureX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TensionFailureY
            {
            get { return get_double("TensionFailureY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TensionFailureY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TensionFailureZ
            {
            get { return get_double("TensionFailureZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TensionFailureZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CompressionFailureX
            {
            get { return get_double("CompressionFailureX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CompressionFailureX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CompressionFailureY
            {
            get { return get_double("CompressionFailureY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CompressionFailureY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CompressionFailureZ
            {
            get { return get_double("CompressionFailureZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CompressionFailureZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFailureConnectionCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFanType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFanType : IfcFlowMovingDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFanType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFanType(SdaiInstance instance) : base(instance) { }
        public IfcFanType() : base(0) { }

        public static implicit operator IfcFanType(SdaiInstance instance) => new IfcFanType(instance);

        /// <summary>
        /// Create new instace of IfcFanType and returns object of this class to interact with
        /// </summary>
        public static new IfcFanType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFanType"); Debug.Assert(inst != 0); return inst; }

        public IfcFanTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFanTypeEnum_); return EnumValue<IfcFanTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFanTypeEnum>.FromValue(value.Value, EnumNames.IfcFanTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFanType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFastener
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFastener : IfcElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFastener
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFastener(SdaiInstance instance) : base(instance) { }
        public IfcFastener() : base(0) { }

        public static implicit operator IfcFastener(SdaiInstance instance) => new IfcFastener(instance);

        /// <summary>
        /// Create new instace of IfcFastener and returns object of this class to interact with
        /// </summary>
        public static new IfcFastener Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFastener"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFastener"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFastenerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFastenerType : IfcElementComponentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFastenerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFastenerType(SdaiInstance instance) : base(instance) { }
        public IfcFastenerType() : base(0) { }

        public static implicit operator IfcFastenerType(SdaiInstance instance) => new IfcFastenerType(instance);

        /// <summary>
        /// Create new instace of IfcFastenerType and returns object of this class to interact with
        /// </summary>
        public static new IfcFastenerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFastenerType"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFastenerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFeatureElementAddition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFeatureElementAddition : IfcFeatureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFeatureElementAddition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFeatureElementAddition(SdaiInstance instance) : base(instance) { }
        public IfcFeatureElementAddition() : base(0) { }

        public static implicit operator IfcFeatureElementAddition(SdaiInstance instance) => new IfcFeatureElementAddition(instance);

        public IfcRelProjectsElement ProjectsElements { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ProjectsElements", ifcengine.sdaiINSTANCE, out inst); return new IfcRelProjectsElement(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcFeatureElementAddition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFillAreaStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFillAreaStyle : IfcPresentationStyle
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFillAreaStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFillAreaStyle(SdaiInstance instance) : base(instance) { }
        public IfcFillAreaStyle() : base(0) { }

        public static implicit operator IfcFillAreaStyle(SdaiInstance instance) => new IfcFillAreaStyle(instance);

        /// <summary>
        /// Create new instace of IfcFillAreaStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcFillAreaStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFillAreaStyle"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcFillStyleSelect FillStyles { get { return (new SetOfIfcFillStyleSelectSerializer()).FromAttr(m_instance, "FillStyles"); } }
        public void put_FillStyles(IEnumerable<IfcFillStyleSelect> lst) { (new SetOfIfcFillStyleSelectSerializer()).ToSdaiAggr(lst, m_instance, "FillStyles"); }
        public void put_FillStyles_untyped(IEnumerable lst) { (new SetOfIfcFillStyleSelectSerializer()).ToSdaiAggr(lst, m_instance, "FillStyles"); }

        protected override TextValue WrapperEntityName() { return "IfcFillAreaStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFillAreaStyleHatching
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFillAreaStyleHatching : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFillAreaStyleHatching
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFillAreaStyleHatching(SdaiInstance instance) : base(instance) { }
        public IfcFillAreaStyleHatching() : base(0) { }

        public static implicit operator IfcFillAreaStyleHatching(SdaiInstance instance) => new IfcFillAreaStyleHatching(instance);

        /// <summary>
        /// Create new instace of IfcFillAreaStyleHatching and returns object of this class to interact with
        /// </summary>
        public static new IfcFillAreaStyleHatching Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFillAreaStyleHatching"); Debug.Assert(inst != 0); return inst; }

        public IfcCurveStyle HatchLineAppearance 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "HatchLineAppearance", ifcengine.sdaiINSTANCE, out inst); return new IfcCurveStyle(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "HatchLineAppearance", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcHatchLineDistanceSelect StartOfNextHatchLine
            {
            get { return new IfcHatchLineDistanceSelect(m_instance, "StartOfNextHatchLine", 0); }
            }
        public IfcCartesianPoint PointOfReferenceHatchLine 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PointOfReferenceHatchLine", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PointOfReferenceHatchLine", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCartesianPoint PatternStart 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PatternStart", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PatternStart", ifcengine.sdaiINSTANCE, i); }
            }
        public double? HatchLineAngle
            {
            get { return get_double("HatchLineAngle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HatchLineAngle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFillAreaStyleHatching"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFillAreaStyleTiles
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFillAreaStyleTiles : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFillAreaStyleTiles
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFillAreaStyleTiles(SdaiInstance instance) : base(instance) { }
        public IfcFillAreaStyleTiles() : base(0) { }

        public static implicit operator IfcFillAreaStyleTiles(SdaiInstance instance) => new IfcFillAreaStyleTiles(instance);

        /// <summary>
        /// Create new instace of IfcFillAreaStyleTiles and returns object of this class to interact with
        /// </summary>
        public static new IfcFillAreaStyleTiles Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFillAreaStyleTiles"); Debug.Assert(inst != 0); return inst; }

        public IfcOneDirectionRepeatFactor TilingPattern 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TilingPattern", ifcengine.sdaiINSTANCE, out inst); return new IfcOneDirectionRepeatFactor(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TilingPattern", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcFillAreaStyleTileShapeSelect Tiles { get { return (new SetOfIfcFillAreaStyleTileShapeSelectSerializer()).FromAttr(m_instance, "Tiles"); } }
        public void put_Tiles(IEnumerable<IfcFillAreaStyleTileShapeSelect> lst) { (new SetOfIfcFillAreaStyleTileShapeSelectSerializer()).ToSdaiAggr(lst, m_instance, "Tiles"); }
        public void put_Tiles_untyped(IEnumerable lst) { (new SetOfIfcFillAreaStyleTileShapeSelectSerializer()).ToSdaiAggr(lst, m_instance, "Tiles"); }
        public double? TilingScale
            {
            get { return get_double("TilingScale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TilingScale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFillAreaStyleTiles"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFillAreaStyleTileSymbolWithStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFillAreaStyleTileSymbolWithStyle : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFillAreaStyleTileSymbolWithStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFillAreaStyleTileSymbolWithStyle(SdaiInstance instance) : base(instance) { }
        public IfcFillAreaStyleTileSymbolWithStyle() : base(0) { }

        public static implicit operator IfcFillAreaStyleTileSymbolWithStyle(SdaiInstance instance) => new IfcFillAreaStyleTileSymbolWithStyle(instance);

        /// <summary>
        /// Create new instace of IfcFillAreaStyleTileSymbolWithStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcFillAreaStyleTileSymbolWithStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFillAreaStyleTileSymbolWithStyle"); Debug.Assert(inst != 0); return inst; }

        public IfcAnnotationSymbolOccurrence Symbol 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Symbol", ifcengine.sdaiINSTANCE, out inst); return new IfcAnnotationSymbolOccurrence(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Symbol", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFillAreaStyleTileSymbolWithStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFilterType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFilterType : IfcFlowTreatmentDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFilterType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFilterType(SdaiInstance instance) : base(instance) { }
        public IfcFilterType() : base(0) { }

        public static implicit operator IfcFilterType(SdaiInstance instance) => new IfcFilterType(instance);

        /// <summary>
        /// Create new instace of IfcFilterType and returns object of this class to interact with
        /// </summary>
        public static new IfcFilterType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFilterType"); Debug.Assert(inst != 0); return inst; }

        public IfcFilterTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFilterTypeEnum_); return EnumValue<IfcFilterTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFilterTypeEnum>.FromValue(value.Value, EnumNames.IfcFilterTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFilterType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFireSuppressionTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFireSuppressionTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFireSuppressionTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFireSuppressionTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcFireSuppressionTerminalType() : base(0) { }

        public static implicit operator IfcFireSuppressionTerminalType(SdaiInstance instance) => new IfcFireSuppressionTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcFireSuppressionTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcFireSuppressionTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFireSuppressionTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcFireSuppressionTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFireSuppressionTerminalTypeEnum_); return EnumValue<IfcFireSuppressionTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFireSuppressionTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcFireSuppressionTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFireSuppressionTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowFitting
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowFitting : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowFitting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowFitting(SdaiInstance instance) : base(instance) { }
        public IfcFlowFitting() : base(0) { }

        public static implicit operator IfcFlowFitting(SdaiInstance instance) => new IfcFlowFitting(instance);

        /// <summary>
        /// Create new instace of IfcFlowFitting and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowFitting Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowFitting"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFlowFitting"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowInstrumentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowInstrumentType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowInstrumentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowInstrumentType(SdaiInstance instance) : base(instance) { }
        public IfcFlowInstrumentType() : base(0) { }

        public static implicit operator IfcFlowInstrumentType(SdaiInstance instance) => new IfcFlowInstrumentType(instance);

        /// <summary>
        /// Create new instace of IfcFlowInstrumentType and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowInstrumentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowInstrumentType"); Debug.Assert(inst != 0); return inst; }

        public IfcFlowInstrumentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFlowInstrumentTypeEnum_); return EnumValue<IfcFlowInstrumentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFlowInstrumentTypeEnum>.FromValue(value.Value, EnumNames.IfcFlowInstrumentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFlowInstrumentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowMeterType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowMeterType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowMeterType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowMeterType(SdaiInstance instance) : base(instance) { }
        public IfcFlowMeterType() : base(0) { }

        public static implicit operator IfcFlowMeterType(SdaiInstance instance) => new IfcFlowMeterType(instance);

        /// <summary>
        /// Create new instace of IfcFlowMeterType and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowMeterType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowMeterType"); Debug.Assert(inst != 0); return inst; }

        public IfcFlowMeterTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFlowMeterTypeEnum_); return EnumValue<IfcFlowMeterTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFlowMeterTypeEnum>.FromValue(value.Value, EnumNames.IfcFlowMeterTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFlowMeterType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowMovingDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowMovingDevice : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowMovingDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowMovingDevice(SdaiInstance instance) : base(instance) { }
        public IfcFlowMovingDevice() : base(0) { }

        public static implicit operator IfcFlowMovingDevice(SdaiInstance instance) => new IfcFlowMovingDevice(instance);

        /// <summary>
        /// Create new instace of IfcFlowMovingDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowMovingDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowMovingDevice"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFlowMovingDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowSegment : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowSegment(SdaiInstance instance) : base(instance) { }
        public IfcFlowSegment() : base(0) { }

        public static implicit operator IfcFlowSegment(SdaiInstance instance) => new IfcFlowSegment(instance);

        /// <summary>
        /// Create new instace of IfcFlowSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowSegment"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFlowSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowStorageDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowStorageDevice : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowStorageDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowStorageDevice(SdaiInstance instance) : base(instance) { }
        public IfcFlowStorageDevice() : base(0) { }

        public static implicit operator IfcFlowStorageDevice(SdaiInstance instance) => new IfcFlowStorageDevice(instance);

        /// <summary>
        /// Create new instace of IfcFlowStorageDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowStorageDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowStorageDevice"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFlowStorageDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowTerminal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowTerminal : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowTerminal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowTerminal(SdaiInstance instance) : base(instance) { }
        public IfcFlowTerminal() : base(0) { }

        public static implicit operator IfcFlowTerminal(SdaiInstance instance) => new IfcFlowTerminal(instance);

        /// <summary>
        /// Create new instace of IfcFlowTerminal and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowTerminal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowTerminal"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFlowTerminal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowTreatmentDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowTreatmentDevice : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowTreatmentDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowTreatmentDevice(SdaiInstance instance) : base(instance) { }
        public IfcFlowTreatmentDevice() : base(0) { }

        public static implicit operator IfcFlowTreatmentDevice(SdaiInstance instance) => new IfcFlowTreatmentDevice(instance);

        /// <summary>
        /// Create new instace of IfcFlowTreatmentDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowTreatmentDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowTreatmentDevice"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFlowTreatmentDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFluidFlowProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFluidFlowProperties : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFluidFlowProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFluidFlowProperties(SdaiInstance instance) : base(instance) { }
        public IfcFluidFlowProperties() : base(0) { }

        public static implicit operator IfcFluidFlowProperties(SdaiInstance instance) => new IfcFluidFlowProperties(instance);

        /// <summary>
        /// Create new instace of IfcFluidFlowProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcFluidFlowProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFluidFlowProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcPropertySourceEnum? PropertySource 
            { 
            get { var str = get_string("PropertySource", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPropertySourceEnum_); return EnumValue<IfcPropertySourceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPropertySourceEnum>.FromValue(value.Value, EnumNames.IfcPropertySourceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PropertySource", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcTimeSeries FlowConditionTimeSeries 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "FlowConditionTimeSeries", ifcengine.sdaiINSTANCE, out inst); return new IfcTimeSeries(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "FlowConditionTimeSeries", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcTimeSeries VelocityTimeSeries 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "VelocityTimeSeries", ifcengine.sdaiINSTANCE, out inst); return new IfcTimeSeries(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "VelocityTimeSeries", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcTimeSeries FlowrateTimeSeries 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "FlowrateTimeSeries", ifcengine.sdaiINSTANCE, out inst); return new IfcTimeSeries(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "FlowrateTimeSeries", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcMaterial Fluid 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Fluid", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterial(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Fluid", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcTimeSeries PressureTimeSeries 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PressureTimeSeries", ifcengine.sdaiINSTANCE, out inst); return new IfcTimeSeries(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PressureTimeSeries", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue UserDefinedPropertySource
            {
            get { return get_string("UserDefinedPropertySource", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedPropertySource", ifcengine.sdaiSTRING, value); }
            }
        public double? TemperatureSingleValue
            {
            get { return get_double("TemperatureSingleValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TemperatureSingleValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WetBulbTemperatureSingleValue
            {
            get { return get_double("WetBulbTemperatureSingleValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WetBulbTemperatureSingleValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcTimeSeries WetBulbTemperatureTimeSeries 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "WetBulbTemperatureTimeSeries", ifcengine.sdaiINSTANCE, out inst); return new IfcTimeSeries(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "WetBulbTemperatureTimeSeries", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcTimeSeries TemperatureTimeSeries 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TemperatureTimeSeries", ifcengine.sdaiINSTANCE, out inst); return new IfcTimeSeries(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TemperatureTimeSeries", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcDerivedMeasureValue FlowrateSingleValue
            {
            get { return new IfcDerivedMeasureValue(m_instance, "FlowrateSingleValue", 0); }
            }
        public double? FlowConditionSingleValue
            {
            get { return get_double("FlowConditionSingleValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlowConditionSingleValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? VelocitySingleValue
            {
            get { return get_double("VelocitySingleValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "VelocitySingleValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PressureSingleValue
            {
            get { return get_double("PressureSingleValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PressureSingleValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFluidFlowProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFooting
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFooting : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFooting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFooting(SdaiInstance instance) : base(instance) { }
        public IfcFooting() : base(0) { }

        public static implicit operator IfcFooting(SdaiInstance instance) => new IfcFooting(instance);

        /// <summary>
        /// Create new instace of IfcFooting and returns object of this class to interact with
        /// </summary>
        public static new IfcFooting Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFooting"); Debug.Assert(inst != 0); return inst; }

        public IfcFootingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFootingTypeEnum_); return EnumValue<IfcFootingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFootingTypeEnum>.FromValue(value.Value, EnumNames.IfcFootingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFooting"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFuelProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFuelProperties : IfcMaterialProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFuelProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFuelProperties(SdaiInstance instance) : base(instance) { }
        public IfcFuelProperties() : base(0) { }

        public static implicit operator IfcFuelProperties(SdaiInstance instance) => new IfcFuelProperties(instance);

        /// <summary>
        /// Create new instace of IfcFuelProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcFuelProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFuelProperties"); Debug.Assert(inst != 0); return inst; }

        public double? CombustionTemperature
            {
            get { return get_double("CombustionTemperature", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CombustionTemperature", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CarbonContent
            {
            get { return get_double("CarbonContent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CarbonContent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LowerHeatingValue
            {
            get { return get_double("LowerHeatingValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LowerHeatingValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? HigherHeatingValue
            {
            get { return get_double("HigherHeatingValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HigherHeatingValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFuelProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFurnishingElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFurnishingElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFurnishingElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFurnishingElement(SdaiInstance instance) : base(instance) { }
        public IfcFurnishingElement() : base(0) { }

        public static implicit operator IfcFurnishingElement(SdaiInstance instance) => new IfcFurnishingElement(instance);

        /// <summary>
        /// Create new instace of IfcFurnishingElement and returns object of this class to interact with
        /// </summary>
        public static new IfcFurnishingElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFurnishingElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFurnishingElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFurnishingElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFurnishingElementType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFurnishingElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFurnishingElementType(SdaiInstance instance) : base(instance) { }
        public IfcFurnishingElementType() : base(0) { }

        public static implicit operator IfcFurnishingElementType(SdaiInstance instance) => new IfcFurnishingElementType(instance);

        /// <summary>
        /// Create new instace of IfcFurnishingElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcFurnishingElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFurnishingElementType"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFurnishingElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFurnitureStandard
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFurnitureStandard : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFurnitureStandard
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFurnitureStandard(SdaiInstance instance) : base(instance) { }
        public IfcFurnitureStandard() : base(0) { }

        public static implicit operator IfcFurnitureStandard(SdaiInstance instance) => new IfcFurnitureStandard(instance);

        /// <summary>
        /// Create new instace of IfcFurnitureStandard and returns object of this class to interact with
        /// </summary>
        public static new IfcFurnitureStandard Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFurnitureStandard"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcFurnitureStandard"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFurnitureType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFurnitureType : IfcFurnishingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFurnitureType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFurnitureType(SdaiInstance instance) : base(instance) { }
        public IfcFurnitureType() : base(0) { }

        public static implicit operator IfcFurnitureType(SdaiInstance instance) => new IfcFurnitureType(instance);

        /// <summary>
        /// Create new instace of IfcFurnitureType and returns object of this class to interact with
        /// </summary>
        public static new IfcFurnitureType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFurnitureType"); Debug.Assert(inst != 0); return inst; }

        public IfcAssemblyPlaceEnum? AssemblyPlace 
            { 
            get { var str = get_string("AssemblyPlace", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAssemblyPlaceEnum_); return EnumValue<IfcAssemblyPlaceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAssemblyPlaceEnum>.FromValue(value.Value, EnumNames.IfcAssemblyPlaceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "AssemblyPlace", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcFurnitureType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGasTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGasTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGasTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGasTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcGasTerminalType() : base(0) { }

        public static implicit operator IfcGasTerminalType(SdaiInstance instance) => new IfcGasTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcGasTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcGasTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGasTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcGasTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcGasTerminalTypeEnum_); return EnumValue<IfcGasTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcGasTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcGasTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcGasTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeneralMaterialProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeneralMaterialProperties : IfcMaterialProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeneralMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeneralMaterialProperties(SdaiInstance instance) : base(instance) { }
        public IfcGeneralMaterialProperties() : base(0) { }

        public static implicit operator IfcGeneralMaterialProperties(SdaiInstance instance) => new IfcGeneralMaterialProperties(instance);

        /// <summary>
        /// Create new instace of IfcGeneralMaterialProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcGeneralMaterialProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeneralMaterialProperties"); Debug.Assert(inst != 0); return inst; }

        public double? MolecularWeight
            {
            get { return get_double("MolecularWeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MolecularWeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Porosity
            {
            get { return get_double("Porosity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Porosity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MassDensity
            {
            get { return get_double("MassDensity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MassDensity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcGeneralMaterialProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProfileProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProfileProperties : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProfileProperties(SdaiInstance instance) : base(instance) { }
        public IfcProfileProperties() : base(0) { }

        public static implicit operator IfcProfileProperties(SdaiInstance instance) => new IfcProfileProperties(instance);

        public TextValue ProfileName
            {
            get { return get_string("ProfileName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ProfileName", ifcengine.sdaiSTRING, value); }
            }
        public IfcProfileDef ProfileDefinition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ProfileDefinition", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ProfileDefinition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcProfileProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeneralProfileProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeneralProfileProperties : IfcProfileProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeneralProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeneralProfileProperties(SdaiInstance instance) : base(instance) { }
        public IfcGeneralProfileProperties() : base(0) { }

        public static implicit operator IfcGeneralProfileProperties(SdaiInstance instance) => new IfcGeneralProfileProperties(instance);

        /// <summary>
        /// Create new instace of IfcGeneralProfileProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcGeneralProfileProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeneralProfileProperties"); Debug.Assert(inst != 0); return inst; }

        public double? PhysicalWeight
            {
            get { return get_double("PhysicalWeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PhysicalWeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Perimeter
            {
            get { return get_double("Perimeter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Perimeter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MinimumPlateThickness
            {
            get { return get_double("MinimumPlateThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MinimumPlateThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MaximumPlateThickness
            {
            get { return get_double("MaximumPlateThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MaximumPlateThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CrossSectionArea
            {
            get { return get_double("CrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcGeneralProfileProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeometricSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeometricSet : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeometricSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeometricSet(SdaiInstance instance) : base(instance) { }
        public IfcGeometricSet() : base(0) { }

        public static implicit operator IfcGeometricSet(SdaiInstance instance) => new IfcGeometricSet(instance);

        /// <summary>
        /// Create new instace of IfcGeometricSet and returns object of this class to interact with
        /// </summary>
        public static new IfcGeometricSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeometricSet"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcGeometricSetSelect Elements { get { return (new SetOfIfcGeometricSetSelectSerializer()).FromAttr(m_instance, "Elements"); } }
        public void put_Elements(IEnumerable<IfcGeometricSetSelect> lst) { (new SetOfIfcGeometricSetSelectSerializer()).ToSdaiAggr(lst, m_instance, "Elements"); }
        public void put_Elements_untyped(IEnumerable lst) { (new SetOfIfcGeometricSetSelectSerializer()).ToSdaiAggr(lst, m_instance, "Elements"); }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcGeometricSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeometricCurveSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeometricCurveSet : IfcGeometricSet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeometricCurveSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeometricCurveSet(SdaiInstance instance) : base(instance) { }
        public IfcGeometricCurveSet() : base(0) { }

        public static implicit operator IfcGeometricCurveSet(SdaiInstance instance) => new IfcGeometricCurveSet(instance);

        /// <summary>
        /// Create new instace of IfcGeometricCurveSet and returns object of this class to interact with
        /// </summary>
        public static new IfcGeometricCurveSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeometricCurveSet"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcGeometricCurveSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRepresentationContext
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRepresentationContext : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRepresentationContext
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRepresentationContext(SdaiInstance instance) : base(instance) { }
        public IfcRepresentationContext() : base(0) { }

        public static implicit operator IfcRepresentationContext(SdaiInstance instance) => new IfcRepresentationContext(instance);

        /// <summary>
        /// Create new instace of IfcRepresentationContext and returns object of this class to interact with
        /// </summary>
        public static new IfcRepresentationContext Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRepresentationContext"); Debug.Assert(inst != 0); return inst; }

        public TextValue ContextIdentifier
            {
            get { return get_string("ContextIdentifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ContextIdentifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ContextType
            {
            get { return get_string("ContextType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ContextType", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRepresentation RepresentationsInContext { get { return (new SetOfIfcRepresentationSerializer()).FromAttr(m_instance, "RepresentationsInContext"); } }

        protected override TextValue WrapperEntityName() { return "IfcRepresentationContext"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeometricRepresentationContext
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeometricRepresentationContext : IfcRepresentationContext
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeometricRepresentationContext
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeometricRepresentationContext(SdaiInstance instance) : base(instance) { }
        public IfcGeometricRepresentationContext() : base(0) { }

        public static implicit operator IfcGeometricRepresentationContext(SdaiInstance instance) => new IfcGeometricRepresentationContext(instance);

        /// <summary>
        /// Create new instace of IfcGeometricRepresentationContext and returns object of this class to interact with
        /// </summary>
        public static new IfcGeometricRepresentationContext Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeometricRepresentationContext"); Debug.Assert(inst != 0); return inst; }

        public IntValue? CoordinateSpaceDimension
            {
            get { return get_IntValue("CoordinateSpaceDimension", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CoordinateSpaceDimension", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public double? Precision
            {
            get { return get_double("Precision", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Precision", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        public IfcAxis2Placement WorldCoordinateSystem
            {
            get { return new IfcAxis2Placement(m_instance, "WorldCoordinateSystem", 0); }
            }
        public IfcDirection TrueNorth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TrueNorth", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TrueNorth", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcGeometricRepresentationSubContext HasSubContexts { get { return (new SetOfIfcGeometricRepresentationSubContextSerializer()).FromAttr(m_instance, "HasSubContexts"); } }

        protected override TextValue WrapperEntityName() { return "IfcGeometricRepresentationContext"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeometricRepresentationSubContext
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeometricRepresentationSubContext : IfcGeometricRepresentationContext
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeometricRepresentationSubContext
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeometricRepresentationSubContext(SdaiInstance instance) : base(instance) { }
        public IfcGeometricRepresentationSubContext() : base(0) { }

        public static implicit operator IfcGeometricRepresentationSubContext(SdaiInstance instance) => new IfcGeometricRepresentationSubContext(instance);

        /// <summary>
        /// Create new instace of IfcGeometricRepresentationSubContext and returns object of this class to interact with
        /// </summary>
        public static new IfcGeometricRepresentationSubContext Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeometricRepresentationSubContext"); Debug.Assert(inst != 0); return inst; }

        public IfcGeometricRepresentationContext ParentContext 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ParentContext", ifcengine.sdaiINSTANCE, out inst); return new IfcGeometricRepresentationContext(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ParentContext", ifcengine.sdaiINSTANCE, i); }
            }
        public double? TargetScale
            {
            get { return get_double("TargetScale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TargetScale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcGeometricProjectionEnum? TargetView 
            { 
            get { var str = get_string("TargetView", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcGeometricProjectionEnum_); return EnumValue<IfcGeometricProjectionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcGeometricProjectionEnum>.FromValue(value.Value, EnumNames.IfcGeometricProjectionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "TargetView", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedTargetView
            {
            get { return get_string("UserDefinedTargetView", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedTargetView", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcGeometricRepresentationSubContext"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGrid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGrid : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGrid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGrid(SdaiInstance instance) : base(instance) { }
        public IfcGrid() : base(0) { }

        public static implicit operator IfcGrid(SdaiInstance instance) => new IfcGrid(instance);

        /// <summary>
        /// Create new instace of IfcGrid and returns object of this class to interact with
        /// </summary>
        public static new IfcGrid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGrid"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcGridAxis UAxes { get { return (new ListOfIfcGridAxisSerializer()).FromAttr(m_instance, "UAxes"); } }
        public void put_UAxes(IEnumerable<IfcGridAxis> lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "UAxes"); }
        public void put_UAxes_untyped(IEnumerable lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "UAxes"); }
        public ListOfIfcGridAxis VAxes { get { return (new ListOfIfcGridAxisSerializer()).FromAttr(m_instance, "VAxes"); } }
        public void put_VAxes(IEnumerable<IfcGridAxis> lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "VAxes"); }
        public void put_VAxes_untyped(IEnumerable lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "VAxes"); }
        public ListOfIfcGridAxis WAxes { get { return (new ListOfIfcGridAxisSerializer()).FromAttr(m_instance, "WAxes"); } }
        public void put_WAxes(IEnumerable<IfcGridAxis> lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "WAxes"); }
        public void put_WAxes_untyped(IEnumerable lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "WAxes"); }
        public SetOfIfcRelContainedInSpatialStructure ContainedInStructure { get { return (new SetOfIfcRelContainedInSpatialStructureSerializer()).FromAttr(m_instance, "ContainedInStructure"); } }

        protected override TextValue WrapperEntityName() { return "IfcGrid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGridAxis
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGridAxis : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGridAxis
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGridAxis(SdaiInstance instance) : base(instance) { }
        public IfcGridAxis() : base(0) { }

        public static implicit operator IfcGridAxis(SdaiInstance instance) => new IfcGridAxis(instance);

        /// <summary>
        /// Create new instace of IfcGridAxis and returns object of this class to interact with
        /// </summary>
        public static new IfcGridAxis Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGridAxis"); Debug.Assert(inst != 0); return inst; }

        public TextValue AxisTag
            {
            get { return get_string("AxisTag", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "AxisTag", ifcengine.sdaiSTRING, value); }
            }
        public IfcCurve AxisCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AxisCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AxisCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? SameSense
            {
            get { return get_bool("SameSense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SameSense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public SetOfIfcGrid PartOfW { get { return (new SetOfIfcGridSerializer()).FromAttr(m_instance, "PartOfW"); } }
        public SetOfIfcGrid PartOfV { get { return (new SetOfIfcGridSerializer()).FromAttr(m_instance, "PartOfV"); } }
        public SetOfIfcGrid PartOfU { get { return (new SetOfIfcGridSerializer()).FromAttr(m_instance, "PartOfU"); } }
        public SetOfIfcVirtualGridIntersection HasIntersections { get { return (new SetOfIfcVirtualGridIntersectionSerializer()).FromAttr(m_instance, "HasIntersections"); } }

        protected override TextValue WrapperEntityName() { return "IfcGridAxis"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcObjectPlacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcObjectPlacement : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcObjectPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcObjectPlacement(SdaiInstance instance) : base(instance) { }
        public IfcObjectPlacement() : base(0) { }

        public static implicit operator IfcObjectPlacement(SdaiInstance instance) => new IfcObjectPlacement(instance);

        public SetOfIfcProduct PlacesObject { get { return (new SetOfIfcProductSerializer()).FromAttr(m_instance, "PlacesObject"); } }
        public SetOfIfcLocalPlacement ReferencedByPlacements { get { return (new SetOfIfcLocalPlacementSerializer()).FromAttr(m_instance, "ReferencedByPlacements"); } }

        protected override TextValue WrapperEntityName() { return "IfcObjectPlacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGridPlacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGridPlacement : IfcObjectPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGridPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGridPlacement(SdaiInstance instance) : base(instance) { }
        public IfcGridPlacement() : base(0) { }

        public static implicit operator IfcGridPlacement(SdaiInstance instance) => new IfcGridPlacement(instance);

        /// <summary>
        /// Create new instace of IfcGridPlacement and returns object of this class to interact with
        /// </summary>
        public static new IfcGridPlacement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGridPlacement"); Debug.Assert(inst != 0); return inst; }

        public IfcVirtualGridIntersection PlacementLocation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PlacementLocation", ifcengine.sdaiINSTANCE, out inst); return new IfcVirtualGridIntersection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PlacementLocation", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcVirtualGridIntersection PlacementRefDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PlacementRefDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcVirtualGridIntersection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PlacementRefDirection", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcGridPlacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcHeatExchangerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcHeatExchangerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcHeatExchangerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcHeatExchangerType(SdaiInstance instance) : base(instance) { }
        public IfcHeatExchangerType() : base(0) { }

        public static implicit operator IfcHeatExchangerType(SdaiInstance instance) => new IfcHeatExchangerType(instance);

        /// <summary>
        /// Create new instace of IfcHeatExchangerType and returns object of this class to interact with
        /// </summary>
        public static new IfcHeatExchangerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcHeatExchangerType"); Debug.Assert(inst != 0); return inst; }

        public IfcHeatExchangerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcHeatExchangerTypeEnum_); return EnumValue<IfcHeatExchangerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcHeatExchangerTypeEnum>.FromValue(value.Value, EnumNames.IfcHeatExchangerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcHeatExchangerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcHumidifierType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcHumidifierType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcHumidifierType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcHumidifierType(SdaiInstance instance) : base(instance) { }
        public IfcHumidifierType() : base(0) { }

        public static implicit operator IfcHumidifierType(SdaiInstance instance) => new IfcHumidifierType(instance);

        /// <summary>
        /// Create new instace of IfcHumidifierType and returns object of this class to interact with
        /// </summary>
        public static new IfcHumidifierType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcHumidifierType"); Debug.Assert(inst != 0); return inst; }

        public IfcHumidifierTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcHumidifierTypeEnum_); return EnumValue<IfcHumidifierTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcHumidifierTypeEnum>.FromValue(value.Value, EnumNames.IfcHumidifierTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcHumidifierType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcHygroscopicMaterialProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcHygroscopicMaterialProperties : IfcMaterialProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcHygroscopicMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcHygroscopicMaterialProperties(SdaiInstance instance) : base(instance) { }
        public IfcHygroscopicMaterialProperties() : base(0) { }

        public static implicit operator IfcHygroscopicMaterialProperties(SdaiInstance instance) => new IfcHygroscopicMaterialProperties(instance);

        /// <summary>
        /// Create new instace of IfcHygroscopicMaterialProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcHygroscopicMaterialProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcHygroscopicMaterialProperties"); Debug.Assert(inst != 0); return inst; }

        public double? UpperVaporResistanceFactor
            {
            get { return get_double("UpperVaporResistanceFactor", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "UpperVaporResistanceFactor", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LowerVaporResistanceFactor
            {
            get { return get_double("LowerVaporResistanceFactor", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LowerVaporResistanceFactor", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? IsothermalMoistureCapacity
            {
            get { return get_double("IsothermalMoistureCapacity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsothermalMoistureCapacity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? VaporPermeability
            {
            get { return get_double("VaporPermeability", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "VaporPermeability", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MoistureDiffusivity
            {
            get { return get_double("MoistureDiffusivity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MoistureDiffusivity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcHygroscopicMaterialProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcImageTexture
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcImageTexture : IfcSurfaceTexture
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcImageTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcImageTexture(SdaiInstance instance) : base(instance) { }
        public IfcImageTexture() : base(0) { }

        public static implicit operator IfcImageTexture(SdaiInstance instance) => new IfcImageTexture(instance);

        /// <summary>
        /// Create new instace of IfcImageTexture and returns object of this class to interact with
        /// </summary>
        public static new IfcImageTexture Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcImageTexture"); Debug.Assert(inst != 0); return inst; }

        public TextValue UrlReference
            {
            get { return get_string("UrlReference", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UrlReference", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcImageTexture"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcInventory
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcInventory : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcInventory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcInventory(SdaiInstance instance) : base(instance) { }
        public IfcInventory() : base(0) { }

        public static implicit operator IfcInventory(SdaiInstance instance) => new IfcInventory(instance);

        /// <summary>
        /// Create new instace of IfcInventory and returns object of this class to interact with
        /// </summary>
        public static new IfcInventory Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcInventory"); Debug.Assert(inst != 0); return inst; }

        public IfcInventoryTypeEnum? InventoryType 
            { 
            get { var str = get_string("InventoryType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcInventoryTypeEnum_); return EnumValue<IfcInventoryTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcInventoryTypeEnum>.FromValue(value.Value, EnumNames.IfcInventoryTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "InventoryType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public IfcActorSelect Jurisdiction
            {
            get { return new IfcActorSelect(m_instance, "Jurisdiction", 0); }
            }
        public SetOfIfcPerson ResponsiblePersons { get { return (new SetOfIfcPersonSerializer()).FromAttr(m_instance, "ResponsiblePersons"); } }
        public void put_ResponsiblePersons(IEnumerable<IfcPerson> lst) { (new SetOfIfcPersonSerializer()).ToSdaiAggr(lst, m_instance, "ResponsiblePersons"); }
        public void put_ResponsiblePersons_untyped(IEnumerable lst) { (new SetOfIfcPersonSerializer()).ToSdaiAggr(lst, m_instance, "ResponsiblePersons"); }
        public IfcCalendarDate LastUpdateDate 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LastUpdateDate", ifcengine.sdaiINSTANCE, out inst); return new IfcCalendarDate(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LastUpdateDate", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCostValue CurrentValue 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "CurrentValue", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "CurrentValue", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCostValue OriginalValue 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OriginalValue", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OriginalValue", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcInventory"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTimeSeries
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTimeSeries : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTimeSeries
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTimeSeries(SdaiInstance instance) : base(instance) { }
        public IfcTimeSeries() : base(0) { }

        public static implicit operator IfcTimeSeries(SdaiInstance instance) => new IfcTimeSeries(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        public IfcDateTimeSelect StartTime
            {
            get { return new IfcDateTimeSelect(m_instance, "StartTime", 0); }
            }

        public IfcDateTimeSelect EndTime
            {
            get { return new IfcDateTimeSelect(m_instance, "EndTime", 0); }
            }
        public IfcTimeSeriesDataTypeEnum? TimeSeriesDataType 
            { 
            get { var str = get_string("TimeSeriesDataType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTimeSeriesDataTypeEnum_); return EnumValue<IfcTimeSeriesDataTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTimeSeriesDataTypeEnum>.FromValue(value.Value, EnumNames.IfcTimeSeriesDataTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "TimeSeriesDataType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDataOriginEnum? DataOrigin 
            { 
            get { var str = get_string("DataOrigin", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDataOriginEnum_); return EnumValue<IfcDataOriginEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDataOriginEnum>.FromValue(value.Value, EnumNames.IfcDataOriginEnum_); ifcengine.sdaiPutAttrBN(m_instance, "DataOrigin", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedDataOrigin
            {
            get { return get_string("UserDefinedDataOrigin", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedDataOrigin", ifcengine.sdaiSTRING, value); }
            }

        public IfcUnit Unit
            {
            get { return new IfcUnit(m_instance, "Unit", 0); }
            }
        public SetOfIfcTimeSeriesReferenceRelationship DocumentedBy { get { return (new SetOfIfcTimeSeriesReferenceRelationshipSerializer()).FromAttr(m_instance, "DocumentedBy"); } }

        protected override TextValue WrapperEntityName() { return "IfcTimeSeries"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIrregularTimeSeries
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIrregularTimeSeries : IfcTimeSeries
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIrregularTimeSeries
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIrregularTimeSeries(SdaiInstance instance) : base(instance) { }
        public IfcIrregularTimeSeries() : base(0) { }

        public static implicit operator IfcIrregularTimeSeries(SdaiInstance instance) => new IfcIrregularTimeSeries(instance);

        /// <summary>
        /// Create new instace of IfcIrregularTimeSeries and returns object of this class to interact with
        /// </summary>
        public static new IfcIrregularTimeSeries Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIrregularTimeSeries"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcIrregularTimeSeriesValue Values { get { return (new ListOfIfcIrregularTimeSeriesValueSerializer()).FromAttr(m_instance, "Values"); } }
        public void put_Values(IEnumerable<IfcIrregularTimeSeriesValue> lst) { (new ListOfIfcIrregularTimeSeriesValueSerializer()).ToSdaiAggr(lst, m_instance, "Values"); }
        public void put_Values_untyped(IEnumerable lst) { (new ListOfIfcIrregularTimeSeriesValueSerializer()).ToSdaiAggr(lst, m_instance, "Values"); }

        protected override TextValue WrapperEntityName() { return "IfcIrregularTimeSeries"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIrregularTimeSeriesValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIrregularTimeSeriesValue : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIrregularTimeSeriesValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIrregularTimeSeriesValue(SdaiInstance instance) : base(instance) { }
        public IfcIrregularTimeSeriesValue() : base(0) { }

        public static implicit operator IfcIrregularTimeSeriesValue(SdaiInstance instance) => new IfcIrregularTimeSeriesValue(instance);

        /// <summary>
        /// Create new instace of IfcIrregularTimeSeriesValue and returns object of this class to interact with
        /// </summary>
        public static new IfcIrregularTimeSeriesValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIrregularTimeSeriesValue"); Debug.Assert(inst != 0); return inst; }


        public IfcDateTimeSelect TimeStamp
            {
            get { return new IfcDateTimeSelect(m_instance, "TimeStamp", 0); }
            }
        public ListOfIfcValue ListValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "ListValues"); } }
        public void put_ListValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }
        public void put_ListValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }

        protected override TextValue WrapperEntityName() { return "IfcIrregularTimeSeriesValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcJunctionBoxType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcJunctionBoxType : IfcFlowFittingType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcJunctionBoxType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcJunctionBoxType(SdaiInstance instance) : base(instance) { }
        public IfcJunctionBoxType() : base(0) { }

        public static implicit operator IfcJunctionBoxType(SdaiInstance instance) => new IfcJunctionBoxType(instance);

        /// <summary>
        /// Create new instace of IfcJunctionBoxType and returns object of this class to interact with
        /// </summary>
        public static new IfcJunctionBoxType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcJunctionBoxType"); Debug.Assert(inst != 0); return inst; }

        public IfcJunctionBoxTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcJunctionBoxTypeEnum_); return EnumValue<IfcJunctionBoxTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcJunctionBoxTypeEnum>.FromValue(value.Value, EnumNames.IfcJunctionBoxTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcJunctionBoxType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLaborResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLaborResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLaborResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLaborResource(SdaiInstance instance) : base(instance) { }
        public IfcLaborResource() : base(0) { }

        public static implicit operator IfcLaborResource(SdaiInstance instance) => new IfcLaborResource(instance);

        /// <summary>
        /// Create new instace of IfcLaborResource and returns object of this class to interact with
        /// </summary>
        public static new IfcLaborResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLaborResource"); Debug.Assert(inst != 0); return inst; }

        public TextValue SkillSet
            {
            get { return get_string("SkillSet", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "SkillSet", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLaborResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLampType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLampType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLampType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLampType(SdaiInstance instance) : base(instance) { }
        public IfcLampType() : base(0) { }

        public static implicit operator IfcLampType(SdaiInstance instance) => new IfcLampType(instance);

        /// <summary>
        /// Create new instace of IfcLampType and returns object of this class to interact with
        /// </summary>
        public static new IfcLampType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLampType"); Debug.Assert(inst != 0); return inst; }

        public IfcLampTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLampTypeEnum_); return EnumValue<IfcLampTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLampTypeEnum>.FromValue(value.Value, EnumNames.IfcLampTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLampType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLibraryInformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLibraryInformation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLibraryInformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLibraryInformation(SdaiInstance instance) : base(instance) { }
        public IfcLibraryInformation() : base(0) { }

        public static implicit operator IfcLibraryInformation(SdaiInstance instance) => new IfcLibraryInformation(instance);

        /// <summary>
        /// Create new instace of IfcLibraryInformation and returns object of this class to interact with
        /// </summary>
        public static new IfcLibraryInformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLibraryInformation"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Version
            {
            get { return get_string("Version", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Version", ifcengine.sdaiSTRING, value); }
            }
        public IfcOrganization Publisher 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Publisher", ifcengine.sdaiINSTANCE, out inst); return new IfcOrganization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Publisher", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCalendarDate VersionDate 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "VersionDate", ifcengine.sdaiINSTANCE, out inst); return new IfcCalendarDate(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "VersionDate", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcLibraryReference LibraryReference { get { return (new SetOfIfcLibraryReferenceSerializer()).FromAttr(m_instance, "LibraryReference"); } }
        public void put_LibraryReference(IEnumerable<IfcLibraryReference> lst) { (new SetOfIfcLibraryReferenceSerializer()).ToSdaiAggr(lst, m_instance, "LibraryReference"); }
        public void put_LibraryReference_untyped(IEnumerable lst) { (new SetOfIfcLibraryReferenceSerializer()).ToSdaiAggr(lst, m_instance, "LibraryReference"); }

        protected override TextValue WrapperEntityName() { return "IfcLibraryInformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLibraryReference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLibraryReference : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLibraryReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLibraryReference(SdaiInstance instance) : base(instance) { }
        public IfcLibraryReference() : base(0) { }

        public static implicit operator IfcLibraryReference(SdaiInstance instance) => new IfcLibraryReference(instance);

        /// <summary>
        /// Create new instace of IfcLibraryReference and returns object of this class to interact with
        /// </summary>
        public static new IfcLibraryReference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLibraryReference"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcLibraryInformation ReferenceIntoLibrary { get { return (new SetOfIfcLibraryInformationSerializer()).FromAttr(m_instance, "ReferenceIntoLibrary"); } }

        protected override TextValue WrapperEntityName() { return "IfcLibraryReference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightDistributionData
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightDistributionData : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightDistributionData
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightDistributionData(SdaiInstance instance) : base(instance) { }
        public IfcLightDistributionData() : base(0) { }

        public static implicit operator IfcLightDistributionData(SdaiInstance instance) => new IfcLightDistributionData(instance);

        /// <summary>
        /// Create new instace of IfcLightDistributionData and returns object of this class to interact with
        /// </summary>
        public static new IfcLightDistributionData Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightDistributionData"); Debug.Assert(inst != 0); return inst; }

        public double? MainPlaneAngle
            {
            get { return get_double("MainPlaneAngle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MainPlaneAngle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public ListOfIfcPlaneAngleMeasure SecondaryPlaneAngle { get { return (new ListOfIfcPlaneAngleMeasureSerializer()).FromAttr(m_instance, "SecondaryPlaneAngle"); } }
        public void put_SecondaryPlaneAngle(IEnumerable<double> lst) { (new ListOfIfcPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SecondaryPlaneAngle"); }
        public void put_SecondaryPlaneAngle_untyped(IEnumerable lst) { (new ListOfIfcPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SecondaryPlaneAngle"); }
        public ListOfIfcLuminousIntensityDistributionMeasure LuminousIntensity { get { return (new ListOfIfcLuminousIntensityDistributionMeasureSerializer()).FromAttr(m_instance, "LuminousIntensity"); } }
        public void put_LuminousIntensity(IEnumerable<double> lst) { (new ListOfIfcLuminousIntensityDistributionMeasureSerializer()).ToSdaiAggr(lst, m_instance, "LuminousIntensity"); }
        public void put_LuminousIntensity_untyped(IEnumerable lst) { (new ListOfIfcLuminousIntensityDistributionMeasureSerializer()).ToSdaiAggr(lst, m_instance, "LuminousIntensity"); }

        protected override TextValue WrapperEntityName() { return "IfcLightDistributionData"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightFixtureType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightFixtureType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightFixtureType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightFixtureType(SdaiInstance instance) : base(instance) { }
        public IfcLightFixtureType() : base(0) { }

        public static implicit operator IfcLightFixtureType(SdaiInstance instance) => new IfcLightFixtureType(instance);

        /// <summary>
        /// Create new instace of IfcLightFixtureType and returns object of this class to interact with
        /// </summary>
        public static new IfcLightFixtureType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightFixtureType"); Debug.Assert(inst != 0); return inst; }

        public IfcLightFixtureTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLightFixtureTypeEnum_); return EnumValue<IfcLightFixtureTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLightFixtureTypeEnum>.FromValue(value.Value, EnumNames.IfcLightFixtureTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLightFixtureType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightIntensityDistribution
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightIntensityDistribution : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightIntensityDistribution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightIntensityDistribution(SdaiInstance instance) : base(instance) { }
        public IfcLightIntensityDistribution() : base(0) { }

        public static implicit operator IfcLightIntensityDistribution(SdaiInstance instance) => new IfcLightIntensityDistribution(instance);

        /// <summary>
        /// Create new instace of IfcLightIntensityDistribution and returns object of this class to interact with
        /// </summary>
        public static new IfcLightIntensityDistribution Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightIntensityDistribution"); Debug.Assert(inst != 0); return inst; }

        public IfcLightDistributionCurveEnum? LightDistributionCurve 
            { 
            get { var str = get_string("LightDistributionCurve", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLightDistributionCurveEnum_); return EnumValue<IfcLightDistributionCurveEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLightDistributionCurveEnum>.FromValue(value.Value, EnumNames.IfcLightDistributionCurveEnum_); ifcengine.sdaiPutAttrBN(m_instance, "LightDistributionCurve", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public ListOfIfcLightDistributionData DistributionData { get { return (new ListOfIfcLightDistributionDataSerializer()).FromAttr(m_instance, "DistributionData"); } }
        public void put_DistributionData(IEnumerable<IfcLightDistributionData> lst) { (new ListOfIfcLightDistributionDataSerializer()).ToSdaiAggr(lst, m_instance, "DistributionData"); }
        public void put_DistributionData_untyped(IEnumerable lst) { (new ListOfIfcLightDistributionDataSerializer()).ToSdaiAggr(lst, m_instance, "DistributionData"); }

        protected override TextValue WrapperEntityName() { return "IfcLightIntensityDistribution"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSource : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSource(SdaiInstance instance) : base(instance) { }
        public IfcLightSource() : base(0) { }

        public static implicit operator IfcLightSource(SdaiInstance instance) => new IfcLightSource(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public IfcColourRgb LightColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LightColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LightColour", ifcengine.sdaiINSTANCE, i); }
            }
        public double? AmbientIntensity
            {
            get { return get_double("AmbientIntensity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AmbientIntensity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Intensity
            {
            get { return get_double("Intensity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Intensity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLightSource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSourceAmbient
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSourceAmbient : IfcLightSource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSourceAmbient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSourceAmbient(SdaiInstance instance) : base(instance) { }
        public IfcLightSourceAmbient() : base(0) { }

        public static implicit operator IfcLightSourceAmbient(SdaiInstance instance) => new IfcLightSourceAmbient(instance);

        /// <summary>
        /// Create new instace of IfcLightSourceAmbient and returns object of this class to interact with
        /// </summary>
        public static new IfcLightSourceAmbient Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightSourceAmbient"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcLightSourceAmbient"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSourceDirectional
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSourceDirectional : IfcLightSource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSourceDirectional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSourceDirectional(SdaiInstance instance) : base(instance) { }
        public IfcLightSourceDirectional() : base(0) { }

        public static implicit operator IfcLightSourceDirectional(SdaiInstance instance) => new IfcLightSourceDirectional(instance);

        /// <summary>
        /// Create new instace of IfcLightSourceDirectional and returns object of this class to interact with
        /// </summary>
        public static new IfcLightSourceDirectional Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightSourceDirectional"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Orientation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLightSourceDirectional"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSourceGoniometric
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSourceGoniometric : IfcLightSource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSourceGoniometric
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSourceGoniometric(SdaiInstance instance) : base(instance) { }
        public IfcLightSourceGoniometric() : base(0) { }

        public static implicit operator IfcLightSourceGoniometric(SdaiInstance instance) => new IfcLightSourceGoniometric(instance);

        /// <summary>
        /// Create new instace of IfcLightSourceGoniometric and returns object of this class to interact with
        /// </summary>
        public static new IfcLightSourceGoniometric Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightSourceGoniometric"); Debug.Assert(inst != 0); return inst; }

        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcColourRgb ColourAppearance 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ColourAppearance", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ColourAppearance", ifcengine.sdaiINSTANCE, i); }
            }
        public double? ColourTemperature
            {
            get { return get_double("ColourTemperature", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ColourTemperature", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LuminousFlux
            {
            get { return get_double("LuminousFlux", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LuminousFlux", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcLightEmissionSourceEnum? LightEmissionSource 
            { 
            get { var str = get_string("LightEmissionSource", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLightEmissionSourceEnum_); return EnumValue<IfcLightEmissionSourceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLightEmissionSourceEnum>.FromValue(value.Value, EnumNames.IfcLightEmissionSourceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "LightEmissionSource", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public IfcLightDistributionDataSourceSelect LightDistributionDataSource
            {
            get { return new IfcLightDistributionDataSourceSelect(m_instance, "LightDistributionDataSource", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLightSourceGoniometric"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSourcePositional
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSourcePositional : IfcLightSource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSourcePositional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSourcePositional(SdaiInstance instance) : base(instance) { }
        public IfcLightSourcePositional() : base(0) { }

        public static implicit operator IfcLightSourcePositional(SdaiInstance instance) => new IfcLightSourcePositional(instance);

        /// <summary>
        /// Create new instace of IfcLightSourcePositional and returns object of this class to interact with
        /// </summary>
        public static new IfcLightSourcePositional Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightSourcePositional"); Debug.Assert(inst != 0); return inst; }

        public IfcCartesianPoint Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ConstantAttenuation
            {
            get { return get_double("ConstantAttenuation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ConstantAttenuation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DistanceAttenuation
            {
            get { return get_double("DistanceAttenuation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DistanceAttenuation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? QuadricAttenuation
            {
            get { return get_double("QuadricAttenuation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "QuadricAttenuation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLightSourcePositional"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSourceSpot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSourceSpot : IfcLightSourcePositional
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSourceSpot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSourceSpot(SdaiInstance instance) : base(instance) { }
        public IfcLightSourceSpot() : base(0) { }

        public static implicit operator IfcLightSourceSpot(SdaiInstance instance) => new IfcLightSourceSpot(instance);

        /// <summary>
        /// Create new instace of IfcLightSourceSpot and returns object of this class to interact with
        /// </summary>
        public static new IfcLightSourceSpot Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightSourceSpot"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Orientation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, i); }
            }
        public double? ConcentrationExponent
            {
            get { return get_double("ConcentrationExponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ConcentrationExponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SpreadAngle
            {
            get { return get_double("SpreadAngle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SpreadAngle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BeamWidthAngle
            {
            get { return get_double("BeamWidthAngle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BeamWidthAngle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLightSourceSpot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLine
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLine : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLine
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLine(SdaiInstance instance) : base(instance) { }
        public IfcLine() : base(0) { }

        public static implicit operator IfcLine(SdaiInstance instance) => new IfcLine(instance);

        /// <summary>
        /// Create new instace of IfcLine and returns object of this class to interact with
        /// </summary>
        public static new IfcLine Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLine"); Debug.Assert(inst != 0); return inst; }

        public IfcCartesianPoint Pnt 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Pnt", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Pnt", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcVector Dir 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Dir", ifcengine.sdaiINSTANCE, out inst); return new IfcVector(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Dir", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLine"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLinearDimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLinearDimension : IfcDimensionCurveDirectedCallout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLinearDimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLinearDimension(SdaiInstance instance) : base(instance) { }
        public IfcLinearDimension() : base(0) { }

        public static implicit operator IfcLinearDimension(SdaiInstance instance) => new IfcLinearDimension(instance);

        /// <summary>
        /// Create new instace of IfcLinearDimension and returns object of this class to interact with
        /// </summary>
        public static new IfcLinearDimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLinearDimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcLinearDimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLocalPlacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLocalPlacement : IfcObjectPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLocalPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLocalPlacement(SdaiInstance instance) : base(instance) { }
        public IfcLocalPlacement() : base(0) { }

        public static implicit operator IfcLocalPlacement(SdaiInstance instance) => new IfcLocalPlacement(instance);

        /// <summary>
        /// Create new instace of IfcLocalPlacement and returns object of this class to interact with
        /// </summary>
        public static new IfcLocalPlacement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLocalPlacement"); Debug.Assert(inst != 0); return inst; }

        public IfcObjectPlacement PlacementRelTo 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PlacementRelTo", ifcengine.sdaiINSTANCE, out inst); return new IfcObjectPlacement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PlacementRelTo", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcAxis2Placement RelativePlacement
            {
            get { return new IfcAxis2Placement(m_instance, "RelativePlacement", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLocalPlacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLocalTime
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLocalTime : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLocalTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLocalTime(SdaiInstance instance) : base(instance) { }
        public IfcLocalTime() : base(0) { }

        public static implicit operator IfcLocalTime(SdaiInstance instance) => new IfcLocalTime(instance);

        /// <summary>
        /// Create new instace of IfcLocalTime and returns object of this class to interact with
        /// </summary>
        public static new IfcLocalTime Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLocalTime"); Debug.Assert(inst != 0); return inst; }

        public IntValue? HourComponent
            {
            get { return get_IntValue("HourComponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HourComponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? MinuteComponent
            {
            get { return get_IntValue("MinuteComponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MinuteComponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public double? SecondComponent
            {
            get { return get_double("SecondComponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SecondComponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcCoordinatedUniversalTimeOffset Zone 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Zone", ifcengine.sdaiINSTANCE, out inst); return new IfcCoordinatedUniversalTimeOffset(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Zone", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? DaylightSavingOffset
            {
            get { return get_IntValue("DaylightSavingOffset", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DaylightSavingOffset", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLocalTime"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcLShapeProfileDef() : base(0) { }

        public static implicit operator IfcLShapeProfileDef(SdaiInstance instance) => new IfcLShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcLShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcLShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Width
            {
            get { return get_double("Width", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Width", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Thickness
            {
            get { return get_double("Thickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Thickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FilletRadius
            {
            get { return get_double("FilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EdgeRadius
            {
            get { return get_double("EdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LegSlope
            {
            get { return get_double("LegSlope", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LegSlope", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CentreOfGravityInX
            {
            get { return get_double("CentreOfGravityInX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CentreOfGravityInX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CentreOfGravityInY
            {
            get { return get_double("CentreOfGravityInY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CentreOfGravityInY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcLShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMappedItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMappedItem : IfcRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMappedItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMappedItem(SdaiInstance instance) : base(instance) { }
        public IfcMappedItem() : base(0) { }

        public static implicit operator IfcMappedItem(SdaiInstance instance) => new IfcMappedItem(instance);

        /// <summary>
        /// Create new instace of IfcMappedItem and returns object of this class to interact with
        /// </summary>
        public static new IfcMappedItem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMappedItem"); Debug.Assert(inst != 0); return inst; }

        public IfcRepresentationMap MappingSource 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MappingSource", ifcengine.sdaiINSTANCE, out inst); return new IfcRepresentationMap(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MappingSource", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCartesianTransformationOperator MappingTarget 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MappingTarget", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianTransformationOperator(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MappingTarget", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMappedItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterial
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterial : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterial
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterial(SdaiInstance instance) : base(instance) { }
        public IfcMaterial() : base(0) { }

        public static implicit operator IfcMaterial(SdaiInstance instance) => new IfcMaterial(instance);

        /// <summary>
        /// Create new instace of IfcMaterial and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterial Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterial"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcMaterialDefinitionRepresentation HasRepresentation { get { return (new SetOfIfcMaterialDefinitionRepresentationSerializer()).FromAttr(m_instance, "HasRepresentation"); } }
        public SetOfIfcMaterialClassificationRelationship ClassifiedAs { get { return (new SetOfIfcMaterialClassificationRelationshipSerializer()).FromAttr(m_instance, "ClassifiedAs"); } }

        protected override TextValue WrapperEntityName() { return "IfcMaterial"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialClassificationRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialClassificationRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialClassificationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialClassificationRelationship(SdaiInstance instance) : base(instance) { }
        public IfcMaterialClassificationRelationship() : base(0) { }

        public static implicit operator IfcMaterialClassificationRelationship(SdaiInstance instance) => new IfcMaterialClassificationRelationship(instance);

        /// <summary>
        /// Create new instace of IfcMaterialClassificationRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialClassificationRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialClassificationRelationship"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcClassificationNotationSelect MaterialClassifications { get { return (new SetOfIfcClassificationNotationSelectSerializer()).FromAttr(m_instance, "MaterialClassifications"); } }
        public void put_MaterialClassifications(IEnumerable<IfcClassificationNotationSelect> lst) { (new SetOfIfcClassificationNotationSelectSerializer()).ToSdaiAggr(lst, m_instance, "MaterialClassifications"); }
        public void put_MaterialClassifications_untyped(IEnumerable lst) { (new SetOfIfcClassificationNotationSelectSerializer()).ToSdaiAggr(lst, m_instance, "MaterialClassifications"); }
        public IfcMaterial ClassifiedMaterial 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ClassifiedMaterial", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterial(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ClassifiedMaterial", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMaterialClassificationRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProductRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProductRepresentation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProductRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProductRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcProductRepresentation() : base(0) { }

        public static implicit operator IfcProductRepresentation(SdaiInstance instance) => new IfcProductRepresentation(instance);

        /// <summary>
        /// Create new instace of IfcProductRepresentation and returns object of this class to interact with
        /// </summary>
        public static new IfcProductRepresentation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProductRepresentation"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcRepresentation Representations { get { return (new ListOfIfcRepresentationSerializer()).FromAttr(m_instance, "Representations"); } }
        public void put_Representations(IEnumerable<IfcRepresentation> lst) { (new ListOfIfcRepresentationSerializer()).ToSdaiAggr(lst, m_instance, "Representations"); }
        public void put_Representations_untyped(IEnumerable lst) { (new ListOfIfcRepresentationSerializer()).ToSdaiAggr(lst, m_instance, "Representations"); }

        protected override TextValue WrapperEntityName() { return "IfcProductRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialDefinitionRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialDefinitionRepresentation : IfcProductRepresentation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialDefinitionRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialDefinitionRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcMaterialDefinitionRepresentation() : base(0) { }

        public static implicit operator IfcMaterialDefinitionRepresentation(SdaiInstance instance) => new IfcMaterialDefinitionRepresentation(instance);

        /// <summary>
        /// Create new instace of IfcMaterialDefinitionRepresentation and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialDefinitionRepresentation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialDefinitionRepresentation"); Debug.Assert(inst != 0); return inst; }

        public IfcMaterial RepresentedMaterial 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RepresentedMaterial", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterial(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RepresentedMaterial", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMaterialDefinitionRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialLayer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialLayer : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialLayer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialLayer(SdaiInstance instance) : base(instance) { }
        public IfcMaterialLayer() : base(0) { }

        public static implicit operator IfcMaterialLayer(SdaiInstance instance) => new IfcMaterialLayer(instance);

        /// <summary>
        /// Create new instace of IfcMaterialLayer and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialLayer Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialLayer"); Debug.Assert(inst != 0); return inst; }

        public IfcMaterial Material 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterial(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, i); }
            }
        public double? LayerThickness
            {
            get { return get_double("LayerThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LayerThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? IsVentilated 
            { 
            get { var str = get_string("IsVentilated", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "IsVentilated", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcMaterialLayerSet ToMaterialLayerSet { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ToMaterialLayerSet", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterialLayerSet(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcMaterialLayer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialLayerSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialLayerSet : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialLayerSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialLayerSet(SdaiInstance instance) : base(instance) { }
        public IfcMaterialLayerSet() : base(0) { }

        public static implicit operator IfcMaterialLayerSet(SdaiInstance instance) => new IfcMaterialLayerSet(instance);

        /// <summary>
        /// Create new instace of IfcMaterialLayerSet and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialLayerSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialLayerSet"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcMaterialLayer MaterialLayers { get { return (new ListOfIfcMaterialLayerSerializer()).FromAttr(m_instance, "MaterialLayers"); } }
        public void put_MaterialLayers(IEnumerable<IfcMaterialLayer> lst) { (new ListOfIfcMaterialLayerSerializer()).ToSdaiAggr(lst, m_instance, "MaterialLayers"); }
        public void put_MaterialLayers_untyped(IEnumerable lst) { (new ListOfIfcMaterialLayerSerializer()).ToSdaiAggr(lst, m_instance, "MaterialLayers"); }
        public TextValue LayerSetName
            {
            get { return get_string("LayerSetName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LayerSetName", ifcengine.sdaiSTRING, value); }
            }
        public double? TotalThickness { get { return get_double("TotalThickness", ifcengine.sdaiREAL); } }

        protected override TextValue WrapperEntityName() { return "IfcMaterialLayerSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialLayerSetUsage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialLayerSetUsage : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialLayerSetUsage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialLayerSetUsage(SdaiInstance instance) : base(instance) { }
        public IfcMaterialLayerSetUsage() : base(0) { }

        public static implicit operator IfcMaterialLayerSetUsage(SdaiInstance instance) => new IfcMaterialLayerSetUsage(instance);

        /// <summary>
        /// Create new instace of IfcMaterialLayerSetUsage and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialLayerSetUsage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialLayerSetUsage"); Debug.Assert(inst != 0); return inst; }

        public IfcMaterialLayerSet ForLayerSet 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ForLayerSet", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterialLayerSet(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ForLayerSet", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcLayerSetDirectionEnum? LayerSetDirection 
            { 
            get { var str = get_string("LayerSetDirection", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLayerSetDirectionEnum_); return EnumValue<IfcLayerSetDirectionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLayerSetDirectionEnum>.FromValue(value.Value, EnumNames.IfcLayerSetDirectionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "LayerSetDirection", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDirectionSenseEnum? DirectionSense 
            { 
            get { var str = get_string("DirectionSense", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDirectionSenseEnum_); return EnumValue<IfcDirectionSenseEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDirectionSenseEnum>.FromValue(value.Value, EnumNames.IfcDirectionSenseEnum_); ifcengine.sdaiPutAttrBN(m_instance, "DirectionSense", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? OffsetFromReferenceLine
            {
            get { return get_double("OffsetFromReferenceLine", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OffsetFromReferenceLine", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMaterialLayerSetUsage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialList
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialList : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialList
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialList(SdaiInstance instance) : base(instance) { }
        public IfcMaterialList() : base(0) { }

        public static implicit operator IfcMaterialList(SdaiInstance instance) => new IfcMaterialList(instance);

        /// <summary>
        /// Create new instace of IfcMaterialList and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialList Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialList"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcMaterial Materials { get { return (new ListOfIfcMaterialSerializer()).FromAttr(m_instance, "Materials"); } }
        public void put_Materials(IEnumerable<IfcMaterial> lst) { (new ListOfIfcMaterialSerializer()).ToSdaiAggr(lst, m_instance, "Materials"); }
        public void put_Materials_untyped(IEnumerable lst) { (new ListOfIfcMaterialSerializer()).ToSdaiAggr(lst, m_instance, "Materials"); }

        protected override TextValue WrapperEntityName() { return "IfcMaterialList"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMeasureWithUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMeasureWithUnit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMeasureWithUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMeasureWithUnit(SdaiInstance instance) : base(instance) { }
        public IfcMeasureWithUnit() : base(0) { }

        public static implicit operator IfcMeasureWithUnit(SdaiInstance instance) => new IfcMeasureWithUnit(instance);

        /// <summary>
        /// Create new instace of IfcMeasureWithUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcMeasureWithUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMeasureWithUnit"); Debug.Assert(inst != 0); return inst; }


        public IfcValue ValueComponent
            {
            get { return new IfcValue(m_instance, "ValueComponent", 0); }
            }

        public IfcUnit UnitComponent
            {
            get { return new IfcUnit(m_instance, "UnitComponent", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMeasureWithUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMechanicalMaterialProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMechanicalMaterialProperties : IfcMaterialProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMechanicalMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMechanicalMaterialProperties(SdaiInstance instance) : base(instance) { }
        public IfcMechanicalMaterialProperties() : base(0) { }

        public static implicit operator IfcMechanicalMaterialProperties(SdaiInstance instance) => new IfcMechanicalMaterialProperties(instance);

        /// <summary>
        /// Create new instace of IfcMechanicalMaterialProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcMechanicalMaterialProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMechanicalMaterialProperties"); Debug.Assert(inst != 0); return inst; }

        public double? DynamicViscosity
            {
            get { return get_double("DynamicViscosity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DynamicViscosity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? YoungModulus
            {
            get { return get_double("YoungModulus", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YoungModulus", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ShearModulus
            {
            get { return get_double("ShearModulus", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ShearModulus", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PoissonRatio
            {
            get { return get_double("PoissonRatio", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PoissonRatio", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ThermalExpansionCoefficient
            {
            get { return get_double("ThermalExpansionCoefficient", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThermalExpansionCoefficient", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMechanicalMaterialProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMechanicalConcreteMaterialProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMechanicalConcreteMaterialProperties : IfcMechanicalMaterialProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMechanicalConcreteMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMechanicalConcreteMaterialProperties(SdaiInstance instance) : base(instance) { }
        public IfcMechanicalConcreteMaterialProperties() : base(0) { }

        public static implicit operator IfcMechanicalConcreteMaterialProperties(SdaiInstance instance) => new IfcMechanicalConcreteMaterialProperties(instance);

        /// <summary>
        /// Create new instace of IfcMechanicalConcreteMaterialProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcMechanicalConcreteMaterialProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMechanicalConcreteMaterialProperties"); Debug.Assert(inst != 0); return inst; }

        public double? CompressiveStrength
            {
            get { return get_double("CompressiveStrength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CompressiveStrength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MaxAggregateSize
            {
            get { return get_double("MaxAggregateSize", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MaxAggregateSize", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue AdmixturesDescription
            {
            get { return get_string("AdmixturesDescription", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "AdmixturesDescription", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Workability
            {
            get { return get_string("Workability", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Workability", ifcengine.sdaiSTRING, value); }
            }
        public double? ProtectivePoreRatio
            {
            get { return get_double("ProtectivePoreRatio", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ProtectivePoreRatio", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue WaterImpermeability
            {
            get { return get_string("WaterImpermeability", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "WaterImpermeability", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMechanicalConcreteMaterialProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMechanicalFastener
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMechanicalFastener : IfcFastener
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMechanicalFastener
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMechanicalFastener(SdaiInstance instance) : base(instance) { }
        public IfcMechanicalFastener() : base(0) { }

        public static implicit operator IfcMechanicalFastener(SdaiInstance instance) => new IfcMechanicalFastener(instance);

        /// <summary>
        /// Create new instace of IfcMechanicalFastener and returns object of this class to interact with
        /// </summary>
        public static new IfcMechanicalFastener Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMechanicalFastener"); Debug.Assert(inst != 0); return inst; }

        public double? NominalDiameter
            {
            get { return get_double("NominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? NominalLength
            {
            get { return get_double("NominalLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMechanicalFastener"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMechanicalFastenerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMechanicalFastenerType : IfcFastenerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMechanicalFastenerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMechanicalFastenerType(SdaiInstance instance) : base(instance) { }
        public IfcMechanicalFastenerType() : base(0) { }

        public static implicit operator IfcMechanicalFastenerType(SdaiInstance instance) => new IfcMechanicalFastenerType(instance);

        /// <summary>
        /// Create new instace of IfcMechanicalFastenerType and returns object of this class to interact with
        /// </summary>
        public static new IfcMechanicalFastenerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMechanicalFastenerType"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcMechanicalFastenerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMechanicalSteelMaterialProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMechanicalSteelMaterialProperties : IfcMechanicalMaterialProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMechanicalSteelMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMechanicalSteelMaterialProperties(SdaiInstance instance) : base(instance) { }
        public IfcMechanicalSteelMaterialProperties() : base(0) { }

        public static implicit operator IfcMechanicalSteelMaterialProperties(SdaiInstance instance) => new IfcMechanicalSteelMaterialProperties(instance);

        /// <summary>
        /// Create new instace of IfcMechanicalSteelMaterialProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcMechanicalSteelMaterialProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMechanicalSteelMaterialProperties"); Debug.Assert(inst != 0); return inst; }

        public double? YieldStress
            {
            get { return get_double("YieldStress", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YieldStress", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? UltimateStress
            {
            get { return get_double("UltimateStress", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "UltimateStress", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? UltimateStrain
            {
            get { return get_double("UltimateStrain", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "UltimateStrain", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? HardeningModule
            {
            get { return get_double("HardeningModule", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HardeningModule", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ProportionalStress
            {
            get { return get_double("ProportionalStress", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ProportionalStress", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PlasticStrain
            {
            get { return get_double("PlasticStrain", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PlasticStrain", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public SetOfIfcRelaxation Relaxations { get { return (new SetOfIfcRelaxationSerializer()).FromAttr(m_instance, "Relaxations"); } }
        public void put_Relaxations(IEnumerable<IfcRelaxation> lst) { (new SetOfIfcRelaxationSerializer()).ToSdaiAggr(lst, m_instance, "Relaxations"); }
        public void put_Relaxations_untyped(IEnumerable lst) { (new SetOfIfcRelaxationSerializer()).ToSdaiAggr(lst, m_instance, "Relaxations"); }

        protected override TextValue WrapperEntityName() { return "IfcMechanicalSteelMaterialProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMember
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMember : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMember(SdaiInstance instance) : base(instance) { }
        public IfcMember() : base(0) { }

        public static implicit operator IfcMember(SdaiInstance instance) => new IfcMember(instance);

        /// <summary>
        /// Create new instace of IfcMember and returns object of this class to interact with
        /// </summary>
        public static new IfcMember Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMember"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcMember"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMemberType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMemberType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMemberType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMemberType(SdaiInstance instance) : base(instance) { }
        public IfcMemberType() : base(0) { }

        public static implicit operator IfcMemberType(SdaiInstance instance) => new IfcMemberType(instance);

        /// <summary>
        /// Create new instace of IfcMemberType and returns object of this class to interact with
        /// </summary>
        public static new IfcMemberType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMemberType"); Debug.Assert(inst != 0); return inst; }

        public IfcMemberTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMemberTypeEnum_); return EnumValue<IfcMemberTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMemberTypeEnum>.FromValue(value.Value, EnumNames.IfcMemberTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMemberType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMetric
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMetric : IfcConstraint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMetric
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMetric(SdaiInstance instance) : base(instance) { }
        public IfcMetric() : base(0) { }

        public static implicit operator IfcMetric(SdaiInstance instance) => new IfcMetric(instance);

        /// <summary>
        /// Create new instace of IfcMetric and returns object of this class to interact with
        /// </summary>
        public static new IfcMetric Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMetric"); Debug.Assert(inst != 0); return inst; }

        public IfcBenchmarkEnum? Benchmark 
            { 
            get { var str = get_string("Benchmark", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBenchmarkEnum_); return EnumValue<IfcBenchmarkEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBenchmarkEnum>.FromValue(value.Value, EnumNames.IfcBenchmarkEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Benchmark", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue ValueSource
            {
            get { return get_string("ValueSource", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ValueSource", ifcengine.sdaiSTRING, value); }
            }

        public IfcMetricValueSelect DataValue
            {
            get { return new IfcMetricValueSelect(m_instance, "DataValue", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMetric"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMonetaryUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMonetaryUnit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMonetaryUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMonetaryUnit(SdaiInstance instance) : base(instance) { }
        public IfcMonetaryUnit() : base(0) { }

        public static implicit operator IfcMonetaryUnit(SdaiInstance instance) => new IfcMonetaryUnit(instance);

        /// <summary>
        /// Create new instace of IfcMonetaryUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcMonetaryUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMonetaryUnit"); Debug.Assert(inst != 0); return inst; }

        public IfcCurrencyEnum? Currency 
            { 
            get { var str = get_string("Currency", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCurrencyEnum_); return EnumValue<IfcCurrencyEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCurrencyEnum>.FromValue(value.Value, EnumNames.IfcCurrencyEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Currency", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMonetaryUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMotorConnectionType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMotorConnectionType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMotorConnectionType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMotorConnectionType(SdaiInstance instance) : base(instance) { }
        public IfcMotorConnectionType() : base(0) { }

        public static implicit operator IfcMotorConnectionType(SdaiInstance instance) => new IfcMotorConnectionType(instance);

        /// <summary>
        /// Create new instace of IfcMotorConnectionType and returns object of this class to interact with
        /// </summary>
        public static new IfcMotorConnectionType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMotorConnectionType"); Debug.Assert(inst != 0); return inst; }

        public IfcMotorConnectionTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMotorConnectionTypeEnum_); return EnumValue<IfcMotorConnectionTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMotorConnectionTypeEnum>.FromValue(value.Value, EnumNames.IfcMotorConnectionTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcMotorConnectionType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProcess
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProcess : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProcess
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProcess(SdaiInstance instance) : base(instance) { }
        public IfcProcess() : base(0) { }

        public static implicit operator IfcProcess(SdaiInstance instance) => new IfcProcess(instance);

        public SetOfIfcRelAssignsToProcess OperatesOn { get { return (new SetOfIfcRelAssignsToProcessSerializer()).FromAttr(m_instance, "OperatesOn"); } }
        public SetOfIfcRelSequence IsSuccessorFrom { get { return (new SetOfIfcRelSequenceSerializer()).FromAttr(m_instance, "IsSuccessorFrom"); } }
        public SetOfIfcRelSequence IsPredecessorTo { get { return (new SetOfIfcRelSequenceSerializer()).FromAttr(m_instance, "IsPredecessorTo"); } }

        protected override TextValue WrapperEntityName() { return "IfcProcess"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTask
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTask : IfcProcess
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTask
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTask(SdaiInstance instance) : base(instance) { }
        public IfcTask() : base(0) { }

        public static implicit operator IfcTask(SdaiInstance instance) => new IfcTask(instance);

        /// <summary>
        /// Create new instace of IfcTask and returns object of this class to interact with
        /// </summary>
        public static new IfcTask Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTask"); Debug.Assert(inst != 0); return inst; }

        public TextValue TaskId
            {
            get { return get_string("TaskId", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TaskId", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Status
            {
            get { return get_string("Status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Status", ifcengine.sdaiSTRING, value); }
            }
        public TextValue WorkMethod
            {
            get { return get_string("WorkMethod", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "WorkMethod", ifcengine.sdaiSTRING, value); }
            }
        public bool? IsMilestone
            {
            get { return get_bool("IsMilestone", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsMilestone", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Priority
            {
            get { return get_IntValue("Priority", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Priority", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTask"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMove
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMove : IfcTask
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMove
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMove(SdaiInstance instance) : base(instance) { }
        public IfcMove() : base(0) { }

        public static implicit operator IfcMove(SdaiInstance instance) => new IfcMove(instance);

        /// <summary>
        /// Create new instace of IfcMove and returns object of this class to interact with
        /// </summary>
        public static new IfcMove Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMove"); Debug.Assert(inst != 0); return inst; }

        public IfcSpatialStructureElement MoveFrom 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MoveFrom", ifcengine.sdaiINSTANCE, out inst); return new IfcSpatialStructureElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MoveFrom", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcSpatialStructureElement MoveTo 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MoveTo", ifcengine.sdaiINSTANCE, out inst); return new IfcSpatialStructureElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MoveTo", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcText PunchList { get { return (new ListOfIfcTextSerializer()).FromAttr(m_instance, "PunchList"); } }
        public void put_PunchList(IEnumerable<TextValue> lst) { (new ListOfIfcTextSerializer()).ToSdaiAggr(lst, m_instance, "PunchList"); }
        public void put_PunchList_untyped(IEnumerable lst) { (new ListOfIfcTextSerializer()).ToSdaiAggr(lst, m_instance, "PunchList"); }

        protected override TextValue WrapperEntityName() { return "IfcMove"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcObjective
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcObjective : IfcConstraint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcObjective
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcObjective(SdaiInstance instance) : base(instance) { }
        public IfcObjective() : base(0) { }

        public static implicit operator IfcObjective(SdaiInstance instance) => new IfcObjective(instance);

        /// <summary>
        /// Create new instace of IfcObjective and returns object of this class to interact with
        /// </summary>
        public static new IfcObjective Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcObjective"); Debug.Assert(inst != 0); return inst; }

        public IfcMetric BenchmarkValues 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BenchmarkValues", ifcengine.sdaiINSTANCE, out inst); return new IfcMetric(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BenchmarkValues", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcMetric ResultValues 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ResultValues", ifcengine.sdaiINSTANCE, out inst); return new IfcMetric(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ResultValues", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcObjectiveEnum? ObjectiveQualifier 
            { 
            get { var str = get_string("ObjectiveQualifier", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcObjectiveEnum_); return EnumValue<IfcObjectiveEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcObjectiveEnum>.FromValue(value.Value, EnumNames.IfcObjectiveEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ObjectiveQualifier", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedQualifier
            {
            get { return get_string("UserDefinedQualifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedQualifier", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcObjective"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOccupant
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOccupant : IfcActor
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOccupant
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOccupant(SdaiInstance instance) : base(instance) { }
        public IfcOccupant() : base(0) { }

        public static implicit operator IfcOccupant(SdaiInstance instance) => new IfcOccupant(instance);

        /// <summary>
        /// Create new instace of IfcOccupant and returns object of this class to interact with
        /// </summary>
        public static new IfcOccupant Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOccupant"); Debug.Assert(inst != 0); return inst; }

        public IfcOccupantTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcOccupantTypeEnum_); return EnumValue<IfcOccupantTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcOccupantTypeEnum>.FromValue(value.Value, EnumNames.IfcOccupantTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcOccupant"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOffsetCurve2D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOffsetCurve2D : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOffsetCurve2D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOffsetCurve2D(SdaiInstance instance) : base(instance) { }
        public IfcOffsetCurve2D() : base(0) { }

        public static implicit operator IfcOffsetCurve2D(SdaiInstance instance) => new IfcOffsetCurve2D(instance);

        /// <summary>
        /// Create new instace of IfcOffsetCurve2D and returns object of this class to interact with
        /// </summary>
        public static new IfcOffsetCurve2D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOffsetCurve2D"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve BasisCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Distance
            {
            get { return get_double("Distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? SelfIntersect 
            { 
            get { var str = get_string("SelfIntersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "SelfIntersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcOffsetCurve2D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOffsetCurve3D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOffsetCurve3D : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOffsetCurve3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOffsetCurve3D(SdaiInstance instance) : base(instance) { }
        public IfcOffsetCurve3D() : base(0) { }

        public static implicit operator IfcOffsetCurve3D(SdaiInstance instance) => new IfcOffsetCurve3D(instance);

        /// <summary>
        /// Create new instace of IfcOffsetCurve3D and returns object of this class to interact with
        /// </summary>
        public static new IfcOffsetCurve3D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOffsetCurve3D"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve BasisCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Distance
            {
            get { return get_double("Distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? SelfIntersect 
            { 
            get { var str = get_string("SelfIntersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "SelfIntersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDirection RefDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcOffsetCurve3D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOneDirectionRepeatFactor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOneDirectionRepeatFactor : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOneDirectionRepeatFactor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOneDirectionRepeatFactor(SdaiInstance instance) : base(instance) { }
        public IfcOneDirectionRepeatFactor() : base(0) { }

        public static implicit operator IfcOneDirectionRepeatFactor(SdaiInstance instance) => new IfcOneDirectionRepeatFactor(instance);

        /// <summary>
        /// Create new instace of IfcOneDirectionRepeatFactor and returns object of this class to interact with
        /// </summary>
        public static new IfcOneDirectionRepeatFactor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOneDirectionRepeatFactor"); Debug.Assert(inst != 0); return inst; }

        public IfcVector RepeatFactor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RepeatFactor", ifcengine.sdaiINSTANCE, out inst); return new IfcVector(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RepeatFactor", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcOneDirectionRepeatFactor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOpeningElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOpeningElement : IfcFeatureElementSubtraction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOpeningElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOpeningElement(SdaiInstance instance) : base(instance) { }
        public IfcOpeningElement() : base(0) { }

        public static implicit operator IfcOpeningElement(SdaiInstance instance) => new IfcOpeningElement(instance);

        /// <summary>
        /// Create new instace of IfcOpeningElement and returns object of this class to interact with
        /// </summary>
        public static new IfcOpeningElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOpeningElement"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcRelFillsElement HasFillings { get { return (new SetOfIfcRelFillsElementSerializer()).FromAttr(m_instance, "HasFillings"); } }

        protected override TextValue WrapperEntityName() { return "IfcOpeningElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOpenShell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOpenShell : IfcConnectedFaceSet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOpenShell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOpenShell(SdaiInstance instance) : base(instance) { }
        public IfcOpenShell() : base(0) { }

        public static implicit operator IfcOpenShell(SdaiInstance instance) => new IfcOpenShell(instance);

        /// <summary>
        /// Create new instace of IfcOpenShell and returns object of this class to interact with
        /// </summary>
        public static new IfcOpenShell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOpenShell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcOpenShell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOpticalMaterialProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOpticalMaterialProperties : IfcMaterialProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOpticalMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOpticalMaterialProperties(SdaiInstance instance) : base(instance) { }
        public IfcOpticalMaterialProperties() : base(0) { }

        public static implicit operator IfcOpticalMaterialProperties(SdaiInstance instance) => new IfcOpticalMaterialProperties(instance);

        /// <summary>
        /// Create new instace of IfcOpticalMaterialProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcOpticalMaterialProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOpticalMaterialProperties"); Debug.Assert(inst != 0); return inst; }

        public double? VisibleTransmittance
            {
            get { return get_double("VisibleTransmittance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "VisibleTransmittance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SolarTransmittance
            {
            get { return get_double("SolarTransmittance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SolarTransmittance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ThermalIrTransmittance
            {
            get { return get_double("ThermalIrTransmittance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThermalIrTransmittance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ThermalIrEmissivityBack
            {
            get { return get_double("ThermalIrEmissivityBack", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThermalIrEmissivityBack", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ThermalIrEmissivityFront
            {
            get { return get_double("ThermalIrEmissivityFront", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThermalIrEmissivityFront", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? VisibleReflectanceBack
            {
            get { return get_double("VisibleReflectanceBack", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "VisibleReflectanceBack", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? VisibleReflectanceFront
            {
            get { return get_double("VisibleReflectanceFront", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "VisibleReflectanceFront", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SolarReflectanceFront
            {
            get { return get_double("SolarReflectanceFront", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SolarReflectanceFront", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SolarReflectanceBack
            {
            get { return get_double("SolarReflectanceBack", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SolarReflectanceBack", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcOpticalMaterialProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOrderAction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOrderAction : IfcTask
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOrderAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOrderAction(SdaiInstance instance) : base(instance) { }
        public IfcOrderAction() : base(0) { }

        public static implicit operator IfcOrderAction(SdaiInstance instance) => new IfcOrderAction(instance);

        /// <summary>
        /// Create new instace of IfcOrderAction and returns object of this class to interact with
        /// </summary>
        public static new IfcOrderAction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOrderAction"); Debug.Assert(inst != 0); return inst; }

        public TextValue ActionID
            {
            get { return get_string("ActionID", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ActionID", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcOrderAction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOrganization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOrganization : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOrganization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOrganization(SdaiInstance instance) : base(instance) { }
        public IfcOrganization() : base(0) { }

        public static implicit operator IfcOrganization(SdaiInstance instance) => new IfcOrganization(instance);

        /// <summary>
        /// Create new instace of IfcOrganization and returns object of this class to interact with
        /// </summary>
        public static new IfcOrganization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOrganization"); Debug.Assert(inst != 0); return inst; }

        public TextValue Id
            {
            get { return get_string("Id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcActorRole Roles { get { return (new ListOfIfcActorRoleSerializer()).FromAttr(m_instance, "Roles"); } }
        public void put_Roles(IEnumerable<IfcActorRole> lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }
        public void put_Roles_untyped(IEnumerable lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }
        public ListOfIfcAddress Addresses { get { return (new ListOfIfcAddressSerializer()).FromAttr(m_instance, "Addresses"); } }
        public void put_Addresses(IEnumerable<IfcAddress> lst) { (new ListOfIfcAddressSerializer()).ToSdaiAggr(lst, m_instance, "Addresses"); }
        public void put_Addresses_untyped(IEnumerable lst) { (new ListOfIfcAddressSerializer()).ToSdaiAggr(lst, m_instance, "Addresses"); }
        public SetOfIfcOrganizationRelationship IsRelatedBy { get { return (new SetOfIfcOrganizationRelationshipSerializer()).FromAttr(m_instance, "IsRelatedBy"); } }
        public SetOfIfcOrganizationRelationship Relates { get { return (new SetOfIfcOrganizationRelationshipSerializer()).FromAttr(m_instance, "Relates"); } }
        public SetOfIfcPersonAndOrganization Engages { get { return (new SetOfIfcPersonAndOrganizationSerializer()).FromAttr(m_instance, "Engages"); } }

        protected override TextValue WrapperEntityName() { return "IfcOrganization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOrganizationRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOrganizationRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOrganizationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOrganizationRelationship(SdaiInstance instance) : base(instance) { }
        public IfcOrganizationRelationship() : base(0) { }

        public static implicit operator IfcOrganizationRelationship(SdaiInstance instance) => new IfcOrganizationRelationship(instance);

        /// <summary>
        /// Create new instace of IfcOrganizationRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcOrganizationRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOrganizationRelationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public IfcOrganization RelatingOrganization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingOrganization", ifcengine.sdaiINSTANCE, out inst); return new IfcOrganization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingOrganization", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcOrganization RelatedOrganizations { get { return (new SetOfIfcOrganizationSerializer()).FromAttr(m_instance, "RelatedOrganizations"); } }
        public void put_RelatedOrganizations(IEnumerable<IfcOrganization> lst) { (new SetOfIfcOrganizationSerializer()).ToSdaiAggr(lst, m_instance, "RelatedOrganizations"); }
        public void put_RelatedOrganizations_untyped(IEnumerable lst) { (new SetOfIfcOrganizationSerializer()).ToSdaiAggr(lst, m_instance, "RelatedOrganizations"); }

        protected override TextValue WrapperEntityName() { return "IfcOrganizationRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOrientedEdge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOrientedEdge : IfcEdge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOrientedEdge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOrientedEdge(SdaiInstance instance) : base(instance) { }
        public IfcOrientedEdge() : base(0) { }

        public static implicit operator IfcOrientedEdge(SdaiInstance instance) => new IfcOrientedEdge(instance);

        /// <summary>
        /// Create new instace of IfcOrientedEdge and returns object of this class to interact with
        /// </summary>
        public static new IfcOrientedEdge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOrientedEdge"); Debug.Assert(inst != 0); return inst; }

        public IfcEdge EdgeElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EdgeElement", ifcengine.sdaiINSTANCE, out inst); return new IfcEdge(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeElement", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? Orientation
            {
            get { return get_bool("Orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcOrientedEdge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOutletType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOutletType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOutletType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOutletType(SdaiInstance instance) : base(instance) { }
        public IfcOutletType() : base(0) { }

        public static implicit operator IfcOutletType(SdaiInstance instance) => new IfcOutletType(instance);

        /// <summary>
        /// Create new instace of IfcOutletType and returns object of this class to interact with
        /// </summary>
        public static new IfcOutletType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOutletType"); Debug.Assert(inst != 0); return inst; }

        public IfcOutletTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcOutletTypeEnum_); return EnumValue<IfcOutletTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcOutletTypeEnum>.FromValue(value.Value, EnumNames.IfcOutletTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcOutletType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOwnerHistory
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOwnerHistory : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOwnerHistory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOwnerHistory(SdaiInstance instance) : base(instance) { }
        public IfcOwnerHistory() : base(0) { }

        public static implicit operator IfcOwnerHistory(SdaiInstance instance) => new IfcOwnerHistory(instance);

        /// <summary>
        /// Create new instace of IfcOwnerHistory and returns object of this class to interact with
        /// </summary>
        public static new IfcOwnerHistory Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOwnerHistory"); Debug.Assert(inst != 0); return inst; }

        public IfcPersonAndOrganization OwningUser 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OwningUser", ifcengine.sdaiINSTANCE, out inst); return new IfcPersonAndOrganization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OwningUser", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcApplication OwningApplication 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OwningApplication", ifcengine.sdaiINSTANCE, out inst); return new IfcApplication(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OwningApplication", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcStateEnum? State 
            { 
            get { var str = get_string("State", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStateEnum_); return EnumValue<IfcStateEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStateEnum>.FromValue(value.Value, EnumNames.IfcStateEnum_); ifcengine.sdaiPutAttrBN(m_instance, "State", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcChangeActionEnum? ChangeAction 
            { 
            get { var str = get_string("ChangeAction", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcChangeActionEnum_); return EnumValue<IfcChangeActionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcChangeActionEnum>.FromValue(value.Value, EnumNames.IfcChangeActionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ChangeAction", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? LastModifiedDate
            {
            get { return get_IntValue("LastModifiedDate", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LastModifiedDate", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IfcPersonAndOrganization LastModifyingUser 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LastModifyingUser", ifcengine.sdaiINSTANCE, out inst); return new IfcPersonAndOrganization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LastModifyingUser", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcApplication LastModifyingApplication 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LastModifyingApplication", ifcengine.sdaiINSTANCE, out inst); return new IfcApplication(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LastModifyingApplication", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? CreationDate
            {
            get { return get_IntValue("CreationDate", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CreationDate", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcOwnerHistory"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPath
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPath : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPath
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPath(SdaiInstance instance) : base(instance) { }
        public IfcPath() : base(0) { }

        public static implicit operator IfcPath(SdaiInstance instance) => new IfcPath(instance);

        /// <summary>
        /// Create new instace of IfcPath and returns object of this class to interact with
        /// </summary>
        public static new IfcPath Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPath"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcOrientedEdge EdgeList { get { return (new ListOfIfcOrientedEdgeSerializer()).FromAttr(m_instance, "EdgeList"); } }
        public void put_EdgeList(IEnumerable<IfcOrientedEdge> lst) { (new ListOfIfcOrientedEdgeSerializer()).ToSdaiAggr(lst, m_instance, "EdgeList"); }
        public void put_EdgeList_untyped(IEnumerable lst) { (new ListOfIfcOrientedEdgeSerializer()).ToSdaiAggr(lst, m_instance, "EdgeList"); }

        protected override TextValue WrapperEntityName() { return "IfcPath"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPerformanceHistory
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPerformanceHistory : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPerformanceHistory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPerformanceHistory(SdaiInstance instance) : base(instance) { }
        public IfcPerformanceHistory() : base(0) { }

        public static implicit operator IfcPerformanceHistory(SdaiInstance instance) => new IfcPerformanceHistory(instance);

        /// <summary>
        /// Create new instace of IfcPerformanceHistory and returns object of this class to interact with
        /// </summary>
        public static new IfcPerformanceHistory Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPerformanceHistory"); Debug.Assert(inst != 0); return inst; }

        public TextValue LifeCyclePhase
            {
            get { return get_string("LifeCyclePhase", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LifeCyclePhase", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPerformanceHistory"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPermeableCoveringProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPermeableCoveringProperties : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPermeableCoveringProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPermeableCoveringProperties(SdaiInstance instance) : base(instance) { }
        public IfcPermeableCoveringProperties() : base(0) { }

        public static implicit operator IfcPermeableCoveringProperties(SdaiInstance instance) => new IfcPermeableCoveringProperties(instance);

        /// <summary>
        /// Create new instace of IfcPermeableCoveringProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcPermeableCoveringProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPermeableCoveringProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcPermeableCoveringOperationEnum? OperationType 
            { 
            get { var str = get_string("OperationType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPermeableCoveringOperationEnum_); return EnumValue<IfcPermeableCoveringOperationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPermeableCoveringOperationEnum>.FromValue(value.Value, EnumNames.IfcPermeableCoveringOperationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "OperationType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcWindowPanelPositionEnum? PanelPosition 
            { 
            get { var str = get_string("PanelPosition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowPanelPositionEnum_); return EnumValue<IfcWindowPanelPositionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowPanelPositionEnum>.FromValue(value.Value, EnumNames.IfcWindowPanelPositionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PanelPosition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? FrameDepth
            {
            get { return get_double("FrameDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FrameDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FrameThickness
            {
            get { return get_double("FrameThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FrameThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcShapeAspect ShapeAspectStyle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPermeableCoveringProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPermit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPermit : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPermit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPermit(SdaiInstance instance) : base(instance) { }
        public IfcPermit() : base(0) { }

        public static implicit operator IfcPermit(SdaiInstance instance) => new IfcPermit(instance);

        /// <summary>
        /// Create new instace of IfcPermit and returns object of this class to interact with
        /// </summary>
        public static new IfcPermit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPermit"); Debug.Assert(inst != 0); return inst; }

        public TextValue PermitID
            {
            get { return get_string("PermitID", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "PermitID", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPermit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPerson
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPerson : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPerson
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPerson(SdaiInstance instance) : base(instance) { }
        public IfcPerson() : base(0) { }

        public static implicit operator IfcPerson(SdaiInstance instance) => new IfcPerson(instance);

        /// <summary>
        /// Create new instace of IfcPerson and returns object of this class to interact with
        /// </summary>
        public static new IfcPerson Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPerson"); Debug.Assert(inst != 0); return inst; }

        public TextValue Id
            {
            get { return get_string("Id", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Id", ifcengine.sdaiSTRING, value); }
            }
        public TextValue FamilyName
            {
            get { return get_string("FamilyName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FamilyName", ifcengine.sdaiSTRING, value); }
            }
        public TextValue GivenName
            {
            get { return get_string("GivenName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "GivenName", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcLabel MiddleNames { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "MiddleNames"); } }
        public void put_MiddleNames(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "MiddleNames"); }
        public void put_MiddleNames_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "MiddleNames"); }
        public ListOfIfcLabel PrefixTitles { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "PrefixTitles"); } }
        public void put_PrefixTitles(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "PrefixTitles"); }
        public void put_PrefixTitles_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "PrefixTitles"); }
        public ListOfIfcLabel SuffixTitles { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "SuffixTitles"); } }
        public void put_SuffixTitles(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "SuffixTitles"); }
        public void put_SuffixTitles_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "SuffixTitles"); }
        public ListOfIfcActorRole Roles { get { return (new ListOfIfcActorRoleSerializer()).FromAttr(m_instance, "Roles"); } }
        public void put_Roles(IEnumerable<IfcActorRole> lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }
        public void put_Roles_untyped(IEnumerable lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }
        public ListOfIfcAddress Addresses { get { return (new ListOfIfcAddressSerializer()).FromAttr(m_instance, "Addresses"); } }
        public void put_Addresses(IEnumerable<IfcAddress> lst) { (new ListOfIfcAddressSerializer()).ToSdaiAggr(lst, m_instance, "Addresses"); }
        public void put_Addresses_untyped(IEnumerable lst) { (new ListOfIfcAddressSerializer()).ToSdaiAggr(lst, m_instance, "Addresses"); }
        public SetOfIfcPersonAndOrganization EngagedIn { get { return (new SetOfIfcPersonAndOrganizationSerializer()).FromAttr(m_instance, "EngagedIn"); } }

        protected override TextValue WrapperEntityName() { return "IfcPerson"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPersonAndOrganization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPersonAndOrganization : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPersonAndOrganization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPersonAndOrganization(SdaiInstance instance) : base(instance) { }
        public IfcPersonAndOrganization() : base(0) { }

        public static implicit operator IfcPersonAndOrganization(SdaiInstance instance) => new IfcPersonAndOrganization(instance);

        /// <summary>
        /// Create new instace of IfcPersonAndOrganization and returns object of this class to interact with
        /// </summary>
        public static new IfcPersonAndOrganization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPersonAndOrganization"); Debug.Assert(inst != 0); return inst; }

        public IfcPerson ThePerson 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ThePerson", ifcengine.sdaiINSTANCE, out inst); return new IfcPerson(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ThePerson", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcOrganization TheOrganization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TheOrganization", ifcengine.sdaiINSTANCE, out inst); return new IfcOrganization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TheOrganization", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcActorRole Roles { get { return (new ListOfIfcActorRoleSerializer()).FromAttr(m_instance, "Roles"); } }
        public void put_Roles(IEnumerable<IfcActorRole> lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }
        public void put_Roles_untyped(IEnumerable lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }

        protected override TextValue WrapperEntityName() { return "IfcPersonAndOrganization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPhysicalQuantity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPhysicalQuantity : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPhysicalQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPhysicalQuantity(SdaiInstance instance) : base(instance) { }
        public IfcPhysicalQuantity() : base(0) { }

        public static implicit operator IfcPhysicalQuantity(SdaiInstance instance) => new IfcPhysicalQuantity(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcPhysicalComplexQuantity PartOfComplex { get { return (new SetOfIfcPhysicalComplexQuantitySerializer()).FromAttr(m_instance, "PartOfComplex"); } }

        protected override TextValue WrapperEntityName() { return "IfcPhysicalQuantity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPhysicalComplexQuantity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPhysicalComplexQuantity : IfcPhysicalQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPhysicalComplexQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPhysicalComplexQuantity(SdaiInstance instance) : base(instance) { }
        public IfcPhysicalComplexQuantity() : base(0) { }

        public static implicit operator IfcPhysicalComplexQuantity(SdaiInstance instance) => new IfcPhysicalComplexQuantity(instance);

        /// <summary>
        /// Create new instace of IfcPhysicalComplexQuantity and returns object of this class to interact with
        /// </summary>
        public static new IfcPhysicalComplexQuantity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPhysicalComplexQuantity"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcPhysicalQuantity HasQuantities { get { return (new SetOfIfcPhysicalQuantitySerializer()).FromAttr(m_instance, "HasQuantities"); } }
        public void put_HasQuantities(IEnumerable<IfcPhysicalQuantity> lst) { (new SetOfIfcPhysicalQuantitySerializer()).ToSdaiAggr(lst, m_instance, "HasQuantities"); }
        public void put_HasQuantities_untyped(IEnumerable lst) { (new SetOfIfcPhysicalQuantitySerializer()).ToSdaiAggr(lst, m_instance, "HasQuantities"); }
        public TextValue Discrimination
            {
            get { return get_string("Discrimination", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Discrimination", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Quality
            {
            get { return get_string("Quality", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Quality", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Usage
            {
            get { return get_string("Usage", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Usage", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPhysicalComplexQuantity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPhysicalSimpleQuantity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPhysicalSimpleQuantity : IfcPhysicalQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPhysicalSimpleQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPhysicalSimpleQuantity(SdaiInstance instance) : base(instance) { }
        public IfcPhysicalSimpleQuantity() : base(0) { }

        public static implicit operator IfcPhysicalSimpleQuantity(SdaiInstance instance) => new IfcPhysicalSimpleQuantity(instance);

        public IfcNamedUnit Unit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Unit", ifcengine.sdaiINSTANCE, out inst); return new IfcNamedUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Unit", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPhysicalSimpleQuantity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPile : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPile(SdaiInstance instance) : base(instance) { }
        public IfcPile() : base(0) { }

        public static implicit operator IfcPile(SdaiInstance instance) => new IfcPile(instance);

        /// <summary>
        /// Create new instace of IfcPile and returns object of this class to interact with
        /// </summary>
        public static new IfcPile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPile"); Debug.Assert(inst != 0); return inst; }

        public IfcPileTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPileTypeEnum_); return EnumValue<IfcPileTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPileTypeEnum>.FromValue(value.Value, EnumNames.IfcPileTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcPileConstructionEnum? ConstructionType 
            { 
            get { var str = get_string("ConstructionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPileConstructionEnum_); return EnumValue<IfcPileConstructionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPileConstructionEnum>.FromValue(value.Value, EnumNames.IfcPileConstructionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ConstructionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPipeFittingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPipeFittingType : IfcFlowFittingType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPipeFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPipeFittingType(SdaiInstance instance) : base(instance) { }
        public IfcPipeFittingType() : base(0) { }

        public static implicit operator IfcPipeFittingType(SdaiInstance instance) => new IfcPipeFittingType(instance);

        /// <summary>
        /// Create new instace of IfcPipeFittingType and returns object of this class to interact with
        /// </summary>
        public static new IfcPipeFittingType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPipeFittingType"); Debug.Assert(inst != 0); return inst; }

        public IfcPipeFittingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPipeFittingTypeEnum_); return EnumValue<IfcPipeFittingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPipeFittingTypeEnum>.FromValue(value.Value, EnumNames.IfcPipeFittingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPipeFittingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPipeSegmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPipeSegmentType : IfcFlowSegmentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPipeSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPipeSegmentType(SdaiInstance instance) : base(instance) { }
        public IfcPipeSegmentType() : base(0) { }

        public static implicit operator IfcPipeSegmentType(SdaiInstance instance) => new IfcPipeSegmentType(instance);

        /// <summary>
        /// Create new instace of IfcPipeSegmentType and returns object of this class to interact with
        /// </summary>
        public static new IfcPipeSegmentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPipeSegmentType"); Debug.Assert(inst != 0); return inst; }

        public IfcPipeSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPipeSegmentTypeEnum_); return EnumValue<IfcPipeSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPipeSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcPipeSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPipeSegmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPixelTexture
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPixelTexture : IfcSurfaceTexture
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPixelTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPixelTexture(SdaiInstance instance) : base(instance) { }
        public IfcPixelTexture() : base(0) { }

        public static implicit operator IfcPixelTexture(SdaiInstance instance) => new IfcPixelTexture(instance);

        /// <summary>
        /// Create new instace of IfcPixelTexture and returns object of this class to interact with
        /// </summary>
        public static new IfcPixelTexture Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPixelTexture"); Debug.Assert(inst != 0); return inst; }

        public IntValue? Width
            {
            get { return get_IntValue("Width", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Width", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Height
            {
            get { return get_IntValue("Height", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Height", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? ColourComponents
            {
            get { return get_IntValue("ColourComponents", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ColourComponents", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public ListOfTextValue Pixel { get { return (new ListOfTextValueSerializer()).FromAttr(m_instance, "Pixel"); } }
        public void put_Pixel(IEnumerable<TextValue> lst) { (new ListOfTextValueSerializer()).ToSdaiAggr(lst, m_instance, "Pixel"); }
        public void put_Pixel_untyped(IEnumerable lst) { (new ListOfTextValueSerializer()).ToSdaiAggr(lst, m_instance, "Pixel"); }

        protected override TextValue WrapperEntityName() { return "IfcPixelTexture"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlanarExtent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlanarExtent : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlanarExtent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlanarExtent(SdaiInstance instance) : base(instance) { }
        public IfcPlanarExtent() : base(0) { }

        public static implicit operator IfcPlanarExtent(SdaiInstance instance) => new IfcPlanarExtent(instance);

        /// <summary>
        /// Create new instace of IfcPlanarExtent and returns object of this class to interact with
        /// </summary>
        public static new IfcPlanarExtent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPlanarExtent"); Debug.Assert(inst != 0); return inst; }

        public double? SizeInX
            {
            get { return get_double("SizeInX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SizeInX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SizeInY
            {
            get { return get_double("SizeInY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SizeInY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPlanarExtent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlanarBox
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlanarBox : IfcPlanarExtent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlanarBox
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlanarBox(SdaiInstance instance) : base(instance) { }
        public IfcPlanarBox() : base(0) { }

        public static implicit operator IfcPlanarBox(SdaiInstance instance) => new IfcPlanarBox(instance);

        /// <summary>
        /// Create new instace of IfcPlanarBox and returns object of this class to interact with
        /// </summary>
        public static new IfcPlanarBox Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPlanarBox"); Debug.Assert(inst != 0); return inst; }


        public IfcAxis2Placement Placement
            {
            get { return new IfcAxis2Placement(m_instance, "Placement", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPlanarBox"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlane
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlane : IfcElementarySurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlane(SdaiInstance instance) : base(instance) { }
        public IfcPlane() : base(0) { }

        public static implicit operator IfcPlane(SdaiInstance instance) => new IfcPlane(instance);

        /// <summary>
        /// Create new instace of IfcPlane and returns object of this class to interact with
        /// </summary>
        public static new IfcPlane Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPlane"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcPlane"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlate
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlate : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlate(SdaiInstance instance) : base(instance) { }
        public IfcPlate() : base(0) { }

        public static implicit operator IfcPlate(SdaiInstance instance) => new IfcPlate(instance);

        /// <summary>
        /// Create new instace of IfcPlate and returns object of this class to interact with
        /// </summary>
        public static new IfcPlate Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPlate"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcPlate"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlateType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlateType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlateType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlateType(SdaiInstance instance) : base(instance) { }
        public IfcPlateType() : base(0) { }

        public static implicit operator IfcPlateType(SdaiInstance instance) => new IfcPlateType(instance);

        /// <summary>
        /// Create new instace of IfcPlateType and returns object of this class to interact with
        /// </summary>
        public static new IfcPlateType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPlateType"); Debug.Assert(inst != 0); return inst; }

        public IfcPlateTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPlateTypeEnum_); return EnumValue<IfcPlateTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPlateTypeEnum>.FromValue(value.Value, EnumNames.IfcPlateTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPlateType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPointOnCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPointOnCurve : IfcPoint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPointOnCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPointOnCurve(SdaiInstance instance) : base(instance) { }
        public IfcPointOnCurve() : base(0) { }

        public static implicit operator IfcPointOnCurve(SdaiInstance instance) => new IfcPointOnCurve(instance);

        /// <summary>
        /// Create new instace of IfcPointOnCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcPointOnCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPointOnCurve"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve BasisCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public double? PointParameter
            {
            get { return get_double("PointParameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PointParameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcPointOnCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPointOnSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPointOnSurface : IfcPoint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPointOnSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPointOnSurface(SdaiInstance instance) : base(instance) { }
        public IfcPointOnSurface() : base(0) { }

        public static implicit operator IfcPointOnSurface(SdaiInstance instance) => new IfcPointOnSurface(instance);

        /// <summary>
        /// Create new instace of IfcPointOnSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcPointOnSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPointOnSurface"); Debug.Assert(inst != 0); return inst; }

        public IfcSurface BasisSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public double? PointParameterU
            {
            get { return get_double("PointParameterU", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PointParameterU", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PointParameterV
            {
            get { return get_double("PointParameterV", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PointParameterV", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcPointOnSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPolygonalBoundedHalfSpace
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPolygonalBoundedHalfSpace : IfcHalfSpaceSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPolygonalBoundedHalfSpace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPolygonalBoundedHalfSpace(SdaiInstance instance) : base(instance) { }
        public IfcPolygonalBoundedHalfSpace() : base(0) { }

        public static implicit operator IfcPolygonalBoundedHalfSpace(SdaiInstance instance) => new IfcPolygonalBoundedHalfSpace(instance);

        /// <summary>
        /// Create new instace of IfcPolygonalBoundedHalfSpace and returns object of this class to interact with
        /// </summary>
        public static new IfcPolygonalBoundedHalfSpace Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPolygonalBoundedHalfSpace"); Debug.Assert(inst != 0); return inst; }

        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcBoundedCurve PolygonalBoundary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PolygonalBoundary", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundedCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PolygonalBoundary", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPolygonalBoundedHalfSpace"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPolyline
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPolyline : IfcBoundedCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPolyline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPolyline(SdaiInstance instance) : base(instance) { }
        public IfcPolyline() : base(0) { }

        public static implicit operator IfcPolyline(SdaiInstance instance) => new IfcPolyline(instance);

        /// <summary>
        /// Create new instace of IfcPolyline and returns object of this class to interact with
        /// </summary>
        public static new IfcPolyline Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPolyline"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcCartesianPoint Points { get { return (new ListOfIfcCartesianPointSerializer()).FromAttr(m_instance, "Points"); } }
        public void put_Points(IEnumerable<IfcCartesianPoint> lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "Points"); }
        public void put_Points_untyped(IEnumerable lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "Points"); }

        protected override TextValue WrapperEntityName() { return "IfcPolyline"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPolyLoop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPolyLoop : IfcLoop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPolyLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPolyLoop(SdaiInstance instance) : base(instance) { }
        public IfcPolyLoop() : base(0) { }

        public static implicit operator IfcPolyLoop(SdaiInstance instance) => new IfcPolyLoop(instance);

        /// <summary>
        /// Create new instace of IfcPolyLoop and returns object of this class to interact with
        /// </summary>
        public static new IfcPolyLoop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPolyLoop"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcCartesianPoint Polygon { get { return (new ListOfIfcCartesianPointSerializer()).FromAttr(m_instance, "Polygon"); } }
        public void put_Polygon(IEnumerable<IfcCartesianPoint> lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "Polygon"); }
        public void put_Polygon_untyped(IEnumerable lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "Polygon"); }

        protected override TextValue WrapperEntityName() { return "IfcPolyLoop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPostalAddress
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPostalAddress : IfcAddress
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPostalAddress
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPostalAddress(SdaiInstance instance) : base(instance) { }
        public IfcPostalAddress() : base(0) { }

        public static implicit operator IfcPostalAddress(SdaiInstance instance) => new IfcPostalAddress(instance);

        /// <summary>
        /// Create new instace of IfcPostalAddress and returns object of this class to interact with
        /// </summary>
        public static new IfcPostalAddress Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPostalAddress"); Debug.Assert(inst != 0); return inst; }

        public TextValue InternalLocation
            {
            get { return get_string("InternalLocation", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "InternalLocation", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcLabel AddressLines { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "AddressLines"); } }
        public void put_AddressLines(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "AddressLines"); }
        public void put_AddressLines_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "AddressLines"); }
        public TextValue PostalBox
            {
            get { return get_string("PostalBox", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "PostalBox", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Town
            {
            get { return get_string("Town", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Town", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Region
            {
            get { return get_string("Region", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Region", ifcengine.sdaiSTRING, value); }
            }
        public TextValue PostalCode
            {
            get { return get_string("PostalCode", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "PostalCode", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Country
            {
            get { return get_string("Country", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Country", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPostalAddress"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedSymbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedSymbol : IfcPreDefinedItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedSymbol(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedSymbol() : base(0) { }

        public static implicit operator IfcPreDefinedSymbol(SdaiInstance instance) => new IfcPreDefinedSymbol(instance);


        protected override TextValue WrapperEntityName() { return "IfcPreDefinedSymbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedDimensionSymbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedDimensionSymbol : IfcPreDefinedSymbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedDimensionSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedDimensionSymbol(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedDimensionSymbol() : base(0) { }

        public static implicit operator IfcPreDefinedDimensionSymbol(SdaiInstance instance) => new IfcPreDefinedDimensionSymbol(instance);

        /// <summary>
        /// Create new instace of IfcPreDefinedDimensionSymbol and returns object of this class to interact with
        /// </summary>
        public static new IfcPreDefinedDimensionSymbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPreDefinedDimensionSymbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcPreDefinedDimensionSymbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedPointMarkerSymbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedPointMarkerSymbol : IfcPreDefinedSymbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedPointMarkerSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedPointMarkerSymbol(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedPointMarkerSymbol() : base(0) { }

        public static implicit operator IfcPreDefinedPointMarkerSymbol(SdaiInstance instance) => new IfcPreDefinedPointMarkerSymbol(instance);

        /// <summary>
        /// Create new instace of IfcPreDefinedPointMarkerSymbol and returns object of this class to interact with
        /// </summary>
        public static new IfcPreDefinedPointMarkerSymbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPreDefinedPointMarkerSymbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcPreDefinedPointMarkerSymbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedTerminatorSymbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedTerminatorSymbol : IfcPreDefinedSymbol
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedTerminatorSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedTerminatorSymbol(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedTerminatorSymbol() : base(0) { }

        public static implicit operator IfcPreDefinedTerminatorSymbol(SdaiInstance instance) => new IfcPreDefinedTerminatorSymbol(instance);

        /// <summary>
        /// Create new instace of IfcPreDefinedTerminatorSymbol and returns object of this class to interact with
        /// </summary>
        public static new IfcPreDefinedTerminatorSymbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPreDefinedTerminatorSymbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcPreDefinedTerminatorSymbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPresentationLayerAssignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPresentationLayerAssignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPresentationLayerAssignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPresentationLayerAssignment(SdaiInstance instance) : base(instance) { }
        public IfcPresentationLayerAssignment() : base(0) { }

        public static implicit operator IfcPresentationLayerAssignment(SdaiInstance instance) => new IfcPresentationLayerAssignment(instance);

        /// <summary>
        /// Create new instace of IfcPresentationLayerAssignment and returns object of this class to interact with
        /// </summary>
        public static new IfcPresentationLayerAssignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPresentationLayerAssignment"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcLayeredItem AssignedItems { get { return (new SetOfIfcLayeredItemSerializer()).FromAttr(m_instance, "AssignedItems"); } }
        public void put_AssignedItems(IEnumerable<IfcLayeredItem> lst) { (new SetOfIfcLayeredItemSerializer()).ToSdaiAggr(lst, m_instance, "AssignedItems"); }
        public void put_AssignedItems_untyped(IEnumerable lst) { (new SetOfIfcLayeredItemSerializer()).ToSdaiAggr(lst, m_instance, "AssignedItems"); }
        public TextValue Identifier
            {
            get { return get_string("Identifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identifier", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPresentationLayerAssignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPresentationLayerWithStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPresentationLayerWithStyle : IfcPresentationLayerAssignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPresentationLayerWithStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPresentationLayerWithStyle(SdaiInstance instance) : base(instance) { }
        public IfcPresentationLayerWithStyle() : base(0) { }

        public static implicit operator IfcPresentationLayerWithStyle(SdaiInstance instance) => new IfcPresentationLayerWithStyle(instance);

        /// <summary>
        /// Create new instace of IfcPresentationLayerWithStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcPresentationLayerWithStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPresentationLayerWithStyle"); Debug.Assert(inst != 0); return inst; }

        public LOGICAL_VALUE? LayerOn 
            { 
            get { var str = get_string("LayerOn", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "LayerOn", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? LayerFrozen 
            { 
            get { var str = get_string("LayerFrozen", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "LayerFrozen", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? LayerBlocked 
            { 
            get { var str = get_string("LayerBlocked", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "LayerBlocked", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcPresentationStyleSelect LayerStyles { get { return (new SetOfIfcPresentationStyleSelectSerializer()).FromAttr(m_instance, "LayerStyles"); } }
        public void put_LayerStyles(IEnumerable<IfcPresentationStyleSelect> lst) { (new SetOfIfcPresentationStyleSelectSerializer()).ToSdaiAggr(lst, m_instance, "LayerStyles"); }
        public void put_LayerStyles_untyped(IEnumerable lst) { (new SetOfIfcPresentationStyleSelectSerializer()).ToSdaiAggr(lst, m_instance, "LayerStyles"); }

        protected override TextValue WrapperEntityName() { return "IfcPresentationLayerWithStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPresentationStyleAssignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPresentationStyleAssignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPresentationStyleAssignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPresentationStyleAssignment(SdaiInstance instance) : base(instance) { }
        public IfcPresentationStyleAssignment() : base(0) { }

        public static implicit operator IfcPresentationStyleAssignment(SdaiInstance instance) => new IfcPresentationStyleAssignment(instance);

        /// <summary>
        /// Create new instace of IfcPresentationStyleAssignment and returns object of this class to interact with
        /// </summary>
        public static new IfcPresentationStyleAssignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPresentationStyleAssignment"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcPresentationStyleSelect Styles { get { return (new SetOfIfcPresentationStyleSelectSerializer()).FromAttr(m_instance, "Styles"); } }
        public void put_Styles(IEnumerable<IfcPresentationStyleSelect> lst) { (new SetOfIfcPresentationStyleSelectSerializer()).ToSdaiAggr(lst, m_instance, "Styles"); }
        public void put_Styles_untyped(IEnumerable lst) { (new SetOfIfcPresentationStyleSelectSerializer()).ToSdaiAggr(lst, m_instance, "Styles"); }

        protected override TextValue WrapperEntityName() { return "IfcPresentationStyleAssignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProcedure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProcedure : IfcProcess
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProcedure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProcedure(SdaiInstance instance) : base(instance) { }
        public IfcProcedure() : base(0) { }

        public static implicit operator IfcProcedure(SdaiInstance instance) => new IfcProcedure(instance);

        /// <summary>
        /// Create new instace of IfcProcedure and returns object of this class to interact with
        /// </summary>
        public static new IfcProcedure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProcedure"); Debug.Assert(inst != 0); return inst; }

        public TextValue ProcedureID
            {
            get { return get_string("ProcedureID", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ProcedureID", ifcengine.sdaiSTRING, value); }
            }
        public IfcProcedureTypeEnum? ProcedureType 
            { 
            get { var str = get_string("ProcedureType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProcedureTypeEnum_); return EnumValue<IfcProcedureTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProcedureTypeEnum>.FromValue(value.Value, EnumNames.IfcProcedureTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ProcedureType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedProcedureType
            {
            get { return get_string("UserDefinedProcedureType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedProcedureType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcProcedure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProductDefinitionShape
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProductDefinitionShape : IfcProductRepresentation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProductDefinitionShape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProductDefinitionShape(SdaiInstance instance) : base(instance) { }
        public IfcProductDefinitionShape() : base(0) { }

        public static implicit operator IfcProductDefinitionShape(SdaiInstance instance) => new IfcProductDefinitionShape(instance);

        /// <summary>
        /// Create new instace of IfcProductDefinitionShape and returns object of this class to interact with
        /// </summary>
        public static new IfcProductDefinitionShape Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProductDefinitionShape"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProduct ShapeOfProduct { get { return (new SetOfIfcProductSerializer()).FromAttr(m_instance, "ShapeOfProduct"); } }
        public SetOfIfcShapeAspect HasShapeAspects { get { return (new SetOfIfcShapeAspectSerializer()).FromAttr(m_instance, "HasShapeAspects"); } }

        protected override TextValue WrapperEntityName() { return "IfcProductDefinitionShape"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProductsOfCombustionProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProductsOfCombustionProperties : IfcMaterialProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProductsOfCombustionProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProductsOfCombustionProperties(SdaiInstance instance) : base(instance) { }
        public IfcProductsOfCombustionProperties() : base(0) { }

        public static implicit operator IfcProductsOfCombustionProperties(SdaiInstance instance) => new IfcProductsOfCombustionProperties(instance);

        /// <summary>
        /// Create new instace of IfcProductsOfCombustionProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcProductsOfCombustionProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProductsOfCombustionProperties"); Debug.Assert(inst != 0); return inst; }

        public double? SpecificHeatCapacity
            {
            get { return get_double("SpecificHeatCapacity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SpecificHeatCapacity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? N20Content
            {
            get { return get_double("N20Content", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "N20Content", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? COContent
            {
            get { return get_double("COContent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "COContent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CO2Content
            {
            get { return get_double("CO2Content", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CO2Content", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcProductsOfCombustionProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProject
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProject : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProject
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProject(SdaiInstance instance) : base(instance) { }
        public IfcProject() : base(0) { }

        public static implicit operator IfcProject(SdaiInstance instance) => new IfcProject(instance);

        /// <summary>
        /// Create new instace of IfcProject and returns object of this class to interact with
        /// </summary>
        public static new IfcProject Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProject"); Debug.Assert(inst != 0); return inst; }

        public TextValue LongName
            {
            get { return get_string("LongName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongName", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Phase
            {
            get { return get_string("Phase", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Phase", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRepresentationContext RepresentationContexts { get { return (new SetOfIfcRepresentationContextSerializer()).FromAttr(m_instance, "RepresentationContexts"); } }
        public void put_RepresentationContexts(IEnumerable<IfcRepresentationContext> lst) { (new SetOfIfcRepresentationContextSerializer()).ToSdaiAggr(lst, m_instance, "RepresentationContexts"); }
        public void put_RepresentationContexts_untyped(IEnumerable lst) { (new SetOfIfcRepresentationContextSerializer()).ToSdaiAggr(lst, m_instance, "RepresentationContexts"); }
        public IfcUnitAssignment UnitsInContext 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "UnitsInContext", ifcengine.sdaiINSTANCE, out inst); return new IfcUnitAssignment(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "UnitsInContext", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcProject"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProjectionCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProjectionCurve : IfcAnnotationCurveOccurrence
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProjectionCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProjectionCurve(SdaiInstance instance) : base(instance) { }
        public IfcProjectionCurve() : base(0) { }

        public static implicit operator IfcProjectionCurve(SdaiInstance instance) => new IfcProjectionCurve(instance);

        /// <summary>
        /// Create new instace of IfcProjectionCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcProjectionCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProjectionCurve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcProjectionCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProjectionElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProjectionElement : IfcFeatureElementAddition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProjectionElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProjectionElement(SdaiInstance instance) : base(instance) { }
        public IfcProjectionElement() : base(0) { }

        public static implicit operator IfcProjectionElement(SdaiInstance instance) => new IfcProjectionElement(instance);

        /// <summary>
        /// Create new instace of IfcProjectionElement and returns object of this class to interact with
        /// </summary>
        public static new IfcProjectionElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProjectionElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcProjectionElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProjectOrder
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProjectOrder : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProjectOrder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProjectOrder(SdaiInstance instance) : base(instance) { }
        public IfcProjectOrder() : base(0) { }

        public static implicit operator IfcProjectOrder(SdaiInstance instance) => new IfcProjectOrder(instance);

        /// <summary>
        /// Create new instace of IfcProjectOrder and returns object of this class to interact with
        /// </summary>
        public static new IfcProjectOrder Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProjectOrder"); Debug.Assert(inst != 0); return inst; }

        public TextValue ID
            {
            get { return get_string("ID", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ID", ifcengine.sdaiSTRING, value); }
            }
        public IfcProjectOrderTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProjectOrderTypeEnum_); return EnumValue<IfcProjectOrderTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProjectOrderTypeEnum>.FromValue(value.Value, EnumNames.IfcProjectOrderTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue Status
            {
            get { return get_string("Status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Status", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcProjectOrder"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProjectOrderRecord
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProjectOrderRecord : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProjectOrderRecord
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProjectOrderRecord(SdaiInstance instance) : base(instance) { }
        public IfcProjectOrderRecord() : base(0) { }

        public static implicit operator IfcProjectOrderRecord(SdaiInstance instance) => new IfcProjectOrderRecord(instance);

        /// <summary>
        /// Create new instace of IfcProjectOrderRecord and returns object of this class to interact with
        /// </summary>
        public static new IfcProjectOrderRecord Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProjectOrderRecord"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcRelAssignsToProjectOrder Records { get { return (new ListOfIfcRelAssignsToProjectOrderSerializer()).FromAttr(m_instance, "Records"); } }
        public void put_Records(IEnumerable<IfcRelAssignsToProjectOrder> lst) { (new ListOfIfcRelAssignsToProjectOrderSerializer()).ToSdaiAggr(lst, m_instance, "Records"); }
        public void put_Records_untyped(IEnumerable lst) { (new ListOfIfcRelAssignsToProjectOrderSerializer()).ToSdaiAggr(lst, m_instance, "Records"); }
        public IfcProjectOrderRecordTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProjectOrderRecordTypeEnum_); return EnumValue<IfcProjectOrderRecordTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProjectOrderRecordTypeEnum>.FromValue(value.Value, EnumNames.IfcProjectOrderRecordTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcProjectOrderRecord"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSimpleProperty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSimpleProperty : IfcProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSimpleProperty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSimpleProperty(SdaiInstance instance) : base(instance) { }
        public IfcSimpleProperty() : base(0) { }

        public static implicit operator IfcSimpleProperty(SdaiInstance instance) => new IfcSimpleProperty(instance);


        protected override TextValue WrapperEntityName() { return "IfcSimpleProperty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyBoundedValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyBoundedValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyBoundedValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyBoundedValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertyBoundedValue() : base(0) { }

        public static implicit operator IfcPropertyBoundedValue(SdaiInstance instance) => new IfcPropertyBoundedValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertyBoundedValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyBoundedValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyBoundedValue"); Debug.Assert(inst != 0); return inst; }


        public IfcValue UpperBoundValue
            {
            get { return new IfcValue(m_instance, "UpperBoundValue", 0); }
            }

        public IfcValue LowerBoundValue
            {
            get { return new IfcValue(m_instance, "LowerBoundValue", 0); }
            }

        public IfcUnit Unit
            {
            get { return new IfcUnit(m_instance, "Unit", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPropertyBoundedValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyConstraintRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyConstraintRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyConstraintRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyConstraintRelationship(SdaiInstance instance) : base(instance) { }
        public IfcPropertyConstraintRelationship() : base(0) { }

        public static implicit operator IfcPropertyConstraintRelationship(SdaiInstance instance) => new IfcPropertyConstraintRelationship(instance);

        /// <summary>
        /// Create new instace of IfcPropertyConstraintRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyConstraintRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyConstraintRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcConstraint RelatingConstraint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, out inst); return new IfcConstraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcProperty RelatedProperties { get { return (new SetOfIfcPropertySerializer()).FromAttr(m_instance, "RelatedProperties"); } }
        public void put_RelatedProperties(IEnumerable<IfcProperty> lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "RelatedProperties"); }
        public void put_RelatedProperties_untyped(IEnumerable lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "RelatedProperties"); }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPropertyConstraintRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyDependencyRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyDependencyRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyDependencyRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyDependencyRelationship(SdaiInstance instance) : base(instance) { }
        public IfcPropertyDependencyRelationship() : base(0) { }

        public static implicit operator IfcPropertyDependencyRelationship(SdaiInstance instance) => new IfcPropertyDependencyRelationship(instance);

        /// <summary>
        /// Create new instace of IfcPropertyDependencyRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyDependencyRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyDependencyRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcProperty DependingProperty 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DependingProperty", ifcengine.sdaiINSTANCE, out inst); return new IfcProperty(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DependingProperty", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcProperty DependantProperty 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DependantProperty", ifcengine.sdaiINSTANCE, out inst); return new IfcProperty(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DependantProperty", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Expression
            {
            get { return get_string("Expression", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Expression", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPropertyDependencyRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyEnumeratedValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyEnumeratedValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyEnumeratedValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyEnumeratedValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertyEnumeratedValue() : base(0) { }

        public static implicit operator IfcPropertyEnumeratedValue(SdaiInstance instance) => new IfcPropertyEnumeratedValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertyEnumeratedValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyEnumeratedValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyEnumeratedValue"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcValue EnumerationValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "EnumerationValues"); } }
        public void put_EnumerationValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "EnumerationValues"); }
        public void put_EnumerationValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "EnumerationValues"); }
        public IfcPropertyEnumeration EnumerationReference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EnumerationReference", ifcengine.sdaiINSTANCE, out inst); return new IfcPropertyEnumeration(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EnumerationReference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPropertyEnumeratedValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyEnumeration
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyEnumeration : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyEnumeration
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyEnumeration(SdaiInstance instance) : base(instance) { }
        public IfcPropertyEnumeration() : base(0) { }

        public static implicit operator IfcPropertyEnumeration(SdaiInstance instance) => new IfcPropertyEnumeration(instance);

        /// <summary>
        /// Create new instace of IfcPropertyEnumeration and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyEnumeration Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyEnumeration"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcValue EnumerationValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "EnumerationValues"); } }
        public void put_EnumerationValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "EnumerationValues"); }
        public void put_EnumerationValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "EnumerationValues"); }

        public IfcUnit Unit
            {
            get { return new IfcUnit(m_instance, "Unit", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPropertyEnumeration"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyListValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyListValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyListValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyListValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertyListValue() : base(0) { }

        public static implicit operator IfcPropertyListValue(SdaiInstance instance) => new IfcPropertyListValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertyListValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyListValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyListValue"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcValue ListValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "ListValues"); } }
        public void put_ListValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }
        public void put_ListValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }

        public IfcUnit Unit
            {
            get { return new IfcUnit(m_instance, "Unit", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPropertyListValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyReferenceValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyReferenceValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyReferenceValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyReferenceValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertyReferenceValue() : base(0) { }

        public static implicit operator IfcPropertyReferenceValue(SdaiInstance instance) => new IfcPropertyReferenceValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertyReferenceValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyReferenceValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyReferenceValue"); Debug.Assert(inst != 0); return inst; }

        public TextValue UsageName
            {
            get { return get_string("UsageName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UsageName", ifcengine.sdaiSTRING, value); }
            }

        public IfcObjectReferenceSelect PropertyReference
            {
            get { return new IfcObjectReferenceSelect(m_instance, "PropertyReference", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPropertyReferenceValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertySet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertySet : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertySet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertySet(SdaiInstance instance) : base(instance) { }
        public IfcPropertySet() : base(0) { }

        public static implicit operator IfcPropertySet(SdaiInstance instance) => new IfcPropertySet(instance);

        /// <summary>
        /// Create new instace of IfcPropertySet and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertySet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertySet"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProperty HasProperties { get { return (new SetOfIfcPropertySerializer()).FromAttr(m_instance, "HasProperties"); } }
        public void put_HasProperties(IEnumerable<IfcProperty> lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "HasProperties"); }
        public void put_HasProperties_untyped(IEnumerable lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "HasProperties"); }

        protected override TextValue WrapperEntityName() { return "IfcPropertySet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertySingleValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertySingleValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertySingleValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertySingleValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertySingleValue() : base(0) { }

        public static implicit operator IfcPropertySingleValue(SdaiInstance instance) => new IfcPropertySingleValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertySingleValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertySingleValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertySingleValue"); Debug.Assert(inst != 0); return inst; }


        public IfcValue NominalValue
            {
            get { return new IfcValue(m_instance, "NominalValue", 0); }
            }

        public IfcUnit Unit
            {
            get { return new IfcUnit(m_instance, "Unit", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPropertySingleValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyTableValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyTableValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyTableValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyTableValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertyTableValue() : base(0) { }

        public static implicit operator IfcPropertyTableValue(SdaiInstance instance) => new IfcPropertyTableValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertyTableValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyTableValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyTableValue"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcValue DefiningValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "DefiningValues"); } }
        public void put_DefiningValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "DefiningValues"); }
        public void put_DefiningValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "DefiningValues"); }
        public ListOfIfcValue DefinedValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "DefinedValues"); } }
        public void put_DefinedValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "DefinedValues"); }
        public void put_DefinedValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "DefinedValues"); }
        public TextValue Expression
            {
            get { return get_string("Expression", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Expression", ifcengine.sdaiSTRING, value); }
            }

        public IfcUnit DefiningUnit
            {
            get { return new IfcUnit(m_instance, "DefiningUnit", 0); }
            }

        public IfcUnit DefinedUnit
            {
            get { return new IfcUnit(m_instance, "DefinedUnit", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPropertyTableValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProtectiveDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProtectiveDeviceType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProtectiveDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProtectiveDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcProtectiveDeviceType() : base(0) { }

        public static implicit operator IfcProtectiveDeviceType(SdaiInstance instance) => new IfcProtectiveDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcProtectiveDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcProtectiveDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProtectiveDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcProtectiveDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProtectiveDeviceTypeEnum_); return EnumValue<IfcProtectiveDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProtectiveDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcProtectiveDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcProtectiveDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProxy
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProxy : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProxy
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProxy(SdaiInstance instance) : base(instance) { }
        public IfcProxy() : base(0) { }

        public static implicit operator IfcProxy(SdaiInstance instance) => new IfcProxy(instance);

        /// <summary>
        /// Create new instace of IfcProxy and returns object of this class to interact with
        /// </summary>
        public static new IfcProxy Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProxy"); Debug.Assert(inst != 0); return inst; }

        public IfcObjectTypeEnum? ProxyType 
            { 
            get { var str = get_string("ProxyType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcObjectTypeEnum_); return EnumValue<IfcObjectTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcObjectTypeEnum>.FromValue(value.Value, EnumNames.IfcObjectTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ProxyType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue Tag
            {
            get { return get_string("Tag", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Tag", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcProxy"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPumpType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPumpType : IfcFlowMovingDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPumpType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPumpType(SdaiInstance instance) : base(instance) { }
        public IfcPumpType() : base(0) { }

        public static implicit operator IfcPumpType(SdaiInstance instance) => new IfcPumpType(instance);

        /// <summary>
        /// Create new instace of IfcPumpType and returns object of this class to interact with
        /// </summary>
        public static new IfcPumpType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPumpType"); Debug.Assert(inst != 0); return inst; }

        public IfcPumpTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPumpTypeEnum_); return EnumValue<IfcPumpTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPumpTypeEnum>.FromValue(value.Value, EnumNames.IfcPumpTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcPumpType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityArea
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityArea : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityArea
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityArea(SdaiInstance instance) : base(instance) { }
        public IfcQuantityArea() : base(0) { }

        public static implicit operator IfcQuantityArea(SdaiInstance instance) => new IfcQuantityArea(instance);

        /// <summary>
        /// Create new instace of IfcQuantityArea and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityArea Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityArea"); Debug.Assert(inst != 0); return inst; }

        public double? AreaValue
            {
            get { return get_double("AreaValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AreaValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcQuantityArea"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityCount
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityCount : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityCount
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityCount(SdaiInstance instance) : base(instance) { }
        public IfcQuantityCount() : base(0) { }

        public static implicit operator IfcQuantityCount(SdaiInstance instance) => new IfcQuantityCount(instance);

        /// <summary>
        /// Create new instace of IfcQuantityCount and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityCount Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityCount"); Debug.Assert(inst != 0); return inst; }

        public double? CountValue
            {
            get { return get_double("CountValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CountValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcQuantityCount"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityLength
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityLength : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityLength
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityLength(SdaiInstance instance) : base(instance) { }
        public IfcQuantityLength() : base(0) { }

        public static implicit operator IfcQuantityLength(SdaiInstance instance) => new IfcQuantityLength(instance);

        /// <summary>
        /// Create new instace of IfcQuantityLength and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityLength Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityLength"); Debug.Assert(inst != 0); return inst; }

        public double? LengthValue
            {
            get { return get_double("LengthValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LengthValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcQuantityLength"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityTime
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityTime : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityTime(SdaiInstance instance) : base(instance) { }
        public IfcQuantityTime() : base(0) { }

        public static implicit operator IfcQuantityTime(SdaiInstance instance) => new IfcQuantityTime(instance);

        /// <summary>
        /// Create new instace of IfcQuantityTime and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityTime Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityTime"); Debug.Assert(inst != 0); return inst; }

        public double? TimeValue
            {
            get { return get_double("TimeValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TimeValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcQuantityTime"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityVolume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityVolume : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityVolume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityVolume(SdaiInstance instance) : base(instance) { }
        public IfcQuantityVolume() : base(0) { }

        public static implicit operator IfcQuantityVolume(SdaiInstance instance) => new IfcQuantityVolume(instance);

        /// <summary>
        /// Create new instace of IfcQuantityVolume and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityVolume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityVolume"); Debug.Assert(inst != 0); return inst; }

        public double? VolumeValue
            {
            get { return get_double("VolumeValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "VolumeValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcQuantityVolume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityWeight
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityWeight : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityWeight
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityWeight(SdaiInstance instance) : base(instance) { }
        public IfcQuantityWeight() : base(0) { }

        public static implicit operator IfcQuantityWeight(SdaiInstance instance) => new IfcQuantityWeight(instance);

        /// <summary>
        /// Create new instace of IfcQuantityWeight and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityWeight Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityWeight"); Debug.Assert(inst != 0); return inst; }

        public double? WeightValue
            {
            get { return get_double("WeightValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WeightValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcQuantityWeight"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRadiusDimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRadiusDimension : IfcDimensionCurveDirectedCallout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRadiusDimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRadiusDimension(SdaiInstance instance) : base(instance) { }
        public IfcRadiusDimension() : base(0) { }

        public static implicit operator IfcRadiusDimension(SdaiInstance instance) => new IfcRadiusDimension(instance);

        /// <summary>
        /// Create new instace of IfcRadiusDimension and returns object of this class to interact with
        /// </summary>
        public static new IfcRadiusDimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRadiusDimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcRadiusDimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRailing
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRailing : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRailing
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRailing(SdaiInstance instance) : base(instance) { }
        public IfcRailing() : base(0) { }

        public static implicit operator IfcRailing(SdaiInstance instance) => new IfcRailing(instance);

        /// <summary>
        /// Create new instace of IfcRailing and returns object of this class to interact with
        /// </summary>
        public static new IfcRailing Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRailing"); Debug.Assert(inst != 0); return inst; }

        public IfcRailingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRailingTypeEnum_); return EnumValue<IfcRailingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRailingTypeEnum>.FromValue(value.Value, EnumNames.IfcRailingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRailing"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRailingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRailingType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRailingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRailingType(SdaiInstance instance) : base(instance) { }
        public IfcRailingType() : base(0) { }

        public static implicit operator IfcRailingType(SdaiInstance instance) => new IfcRailingType(instance);

        /// <summary>
        /// Create new instace of IfcRailingType and returns object of this class to interact with
        /// </summary>
        public static new IfcRailingType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRailingType"); Debug.Assert(inst != 0); return inst; }

        public IfcRailingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRailingTypeEnum_); return EnumValue<IfcRailingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRailingTypeEnum>.FromValue(value.Value, EnumNames.IfcRailingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRailingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRamp
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRamp : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRamp
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRamp(SdaiInstance instance) : base(instance) { }
        public IfcRamp() : base(0) { }

        public static implicit operator IfcRamp(SdaiInstance instance) => new IfcRamp(instance);

        /// <summary>
        /// Create new instace of IfcRamp and returns object of this class to interact with
        /// </summary>
        public static new IfcRamp Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRamp"); Debug.Assert(inst != 0); return inst; }

        public IfcRampTypeEnum? ShapeType 
            { 
            get { var str = get_string("ShapeType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRampTypeEnum_); return EnumValue<IfcRampTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRampTypeEnum>.FromValue(value.Value, EnumNames.IfcRampTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ShapeType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRamp"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRampFlight
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRampFlight : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRampFlight
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRampFlight(SdaiInstance instance) : base(instance) { }
        public IfcRampFlight() : base(0) { }

        public static implicit operator IfcRampFlight(SdaiInstance instance) => new IfcRampFlight(instance);

        /// <summary>
        /// Create new instace of IfcRampFlight and returns object of this class to interact with
        /// </summary>
        public static new IfcRampFlight Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRampFlight"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcRampFlight"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRampFlightType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRampFlightType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRampFlightType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRampFlightType(SdaiInstance instance) : base(instance) { }
        public IfcRampFlightType() : base(0) { }

        public static implicit operator IfcRampFlightType(SdaiInstance instance) => new IfcRampFlightType(instance);

        /// <summary>
        /// Create new instace of IfcRampFlightType and returns object of this class to interact with
        /// </summary>
        public static new IfcRampFlightType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRampFlightType"); Debug.Assert(inst != 0); return inst; }

        public IfcRampFlightTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRampFlightTypeEnum_); return EnumValue<IfcRampFlightTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRampFlightTypeEnum>.FromValue(value.Value, EnumNames.IfcRampFlightTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRampFlightType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRationalBezierCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRationalBezierCurve : IfcBezierCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRationalBezierCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRationalBezierCurve(SdaiInstance instance) : base(instance) { }
        public IfcRationalBezierCurve() : base(0) { }

        public static implicit operator IfcRationalBezierCurve(SdaiInstance instance) => new IfcRationalBezierCurve(instance);

        /// <summary>
        /// Create new instace of IfcRationalBezierCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcRationalBezierCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRationalBezierCurve"); Debug.Assert(inst != 0); return inst; }

        public list_of_double WeightsData { get { return (new list_of_doubleSerializer()).FromAttr(m_instance, "WeightsData"); } }
        public void put_WeightsData(IEnumerable<double> lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "WeightsData"); }
        public void put_WeightsData_untyped(IEnumerable lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "WeightsData"); }
        public array_of_double Weights { get { return (new array_of_doubleSerializer()).FromAttr(m_instance, "Weights"); } }

        protected override TextValue WrapperEntityName() { return "IfcRationalBezierCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRectangleProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRectangleProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRectangleProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRectangleProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcRectangleProfileDef() : base(0) { }

        public static implicit operator IfcRectangleProfileDef(SdaiInstance instance) => new IfcRectangleProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcRectangleProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcRectangleProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRectangleProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? XDim
            {
            get { return get_double("XDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "XDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? YDim
            {
            get { return get_double("YDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRectangleProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRectangleHollowProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRectangleHollowProfileDef : IfcRectangleProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRectangleHollowProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRectangleHollowProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcRectangleHollowProfileDef() : base(0) { }

        public static implicit operator IfcRectangleHollowProfileDef(SdaiInstance instance) => new IfcRectangleHollowProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcRectangleHollowProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcRectangleHollowProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRectangleHollowProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? WallThickness
            {
            get { return get_double("WallThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WallThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? InnerFilletRadius
            {
            get { return get_double("InnerFilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InnerFilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OuterFilletRadius
            {
            get { return get_double("OuterFilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OuterFilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRectangleHollowProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRectangularPyramid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRectangularPyramid : IfcCsgPrimitive3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRectangularPyramid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRectangularPyramid(SdaiInstance instance) : base(instance) { }
        public IfcRectangularPyramid() : base(0) { }

        public static implicit operator IfcRectangularPyramid(SdaiInstance instance) => new IfcRectangularPyramid(instance);

        /// <summary>
        /// Create new instace of IfcRectangularPyramid and returns object of this class to interact with
        /// </summary>
        public static new IfcRectangularPyramid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRectangularPyramid"); Debug.Assert(inst != 0); return inst; }

        public double? XLength
            {
            get { return get_double("XLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "XLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? YLength
            {
            get { return get_double("YLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Height
            {
            get { return get_double("Height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRectangularPyramid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRectangularTrimmedSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRectangularTrimmedSurface : IfcBoundedSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRectangularTrimmedSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRectangularTrimmedSurface(SdaiInstance instance) : base(instance) { }
        public IfcRectangularTrimmedSurface() : base(0) { }

        public static implicit operator IfcRectangularTrimmedSurface(SdaiInstance instance) => new IfcRectangularTrimmedSurface(instance);

        /// <summary>
        /// Create new instace of IfcRectangularTrimmedSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcRectangularTrimmedSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRectangularTrimmedSurface"); Debug.Assert(inst != 0); return inst; }

        public IfcSurface BasisSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public double? U1
            {
            get { return get_double("U1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "U1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? V1
            {
            get { return get_double("V1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "V1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? U2
            {
            get { return get_double("U2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "U2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? V2
            {
            get { return get_double("V2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "V2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public bool? Usense
            {
            get { return get_bool("Usense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Usense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? Vsense
            {
            get { return get_bool("Vsense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Vsense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcRectangularTrimmedSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReferencesValueDocument
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReferencesValueDocument : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReferencesValueDocument
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReferencesValueDocument(SdaiInstance instance) : base(instance) { }
        public IfcReferencesValueDocument() : base(0) { }

        public static implicit operator IfcReferencesValueDocument(SdaiInstance instance) => new IfcReferencesValueDocument(instance);

        /// <summary>
        /// Create new instace of IfcReferencesValueDocument and returns object of this class to interact with
        /// </summary>
        public static new IfcReferencesValueDocument Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReferencesValueDocument"); Debug.Assert(inst != 0); return inst; }


        public IfcDocumentSelect ReferencedDocument
            {
            get { return new IfcDocumentSelect(m_instance, "ReferencedDocument", 0); }
            }
        public SetOfIfcAppliedValue ReferencingValues { get { return (new SetOfIfcAppliedValueSerializer()).FromAttr(m_instance, "ReferencingValues"); } }
        public void put_ReferencingValues(IEnumerable<IfcAppliedValue> lst) { (new SetOfIfcAppliedValueSerializer()).ToSdaiAggr(lst, m_instance, "ReferencingValues"); }
        public void put_ReferencingValues_untyped(IEnumerable lst) { (new SetOfIfcAppliedValueSerializer()).ToSdaiAggr(lst, m_instance, "ReferencingValues"); }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcReferencesValueDocument"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRegularTimeSeries
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRegularTimeSeries : IfcTimeSeries
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRegularTimeSeries
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRegularTimeSeries(SdaiInstance instance) : base(instance) { }
        public IfcRegularTimeSeries() : base(0) { }

        public static implicit operator IfcRegularTimeSeries(SdaiInstance instance) => new IfcRegularTimeSeries(instance);

        /// <summary>
        /// Create new instace of IfcRegularTimeSeries and returns object of this class to interact with
        /// </summary>
        public static new IfcRegularTimeSeries Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRegularTimeSeries"); Debug.Assert(inst != 0); return inst; }

        public double? TimeStep
            {
            get { return get_double("TimeStep", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TimeStep", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public ListOfIfcTimeSeriesValue Values { get { return (new ListOfIfcTimeSeriesValueSerializer()).FromAttr(m_instance, "Values"); } }
        public void put_Values(IEnumerable<IfcTimeSeriesValue> lst) { (new ListOfIfcTimeSeriesValueSerializer()).ToSdaiAggr(lst, m_instance, "Values"); }
        public void put_Values_untyped(IEnumerable lst) { (new ListOfIfcTimeSeriesValueSerializer()).ToSdaiAggr(lst, m_instance, "Values"); }

        protected override TextValue WrapperEntityName() { return "IfcRegularTimeSeries"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcementBarProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcementBarProperties : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcementBarProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcementBarProperties(SdaiInstance instance) : base(instance) { }
        public IfcReinforcementBarProperties() : base(0) { }

        public static implicit operator IfcReinforcementBarProperties(SdaiInstance instance) => new IfcReinforcementBarProperties(instance);

        /// <summary>
        /// Create new instace of IfcReinforcementBarProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcReinforcementBarProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReinforcementBarProperties"); Debug.Assert(inst != 0); return inst; }

        public double? TotalCrossSectionArea
            {
            get { return get_double("TotalCrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TotalCrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue SteelGrade
            {
            get { return get_string("SteelGrade", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "SteelGrade", ifcengine.sdaiSTRING, value); }
            }
        public IfcReinforcingBarSurfaceEnum? BarSurface 
            { 
            get { var str = get_string("BarSurface", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingBarSurfaceEnum_); return EnumValue<IfcReinforcingBarSurfaceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingBarSurfaceEnum>.FromValue(value.Value, EnumNames.IfcReinforcingBarSurfaceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "BarSurface", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? EffectiveDepth
            {
            get { return get_double("EffectiveDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EffectiveDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? NominalBarDiameter
            {
            get { return get_double("NominalBarDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalBarDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BarCount
            {
            get { return get_double("BarCount", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BarCount", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcReinforcementBarProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcementDefinitionProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcementDefinitionProperties : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcementDefinitionProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcementDefinitionProperties(SdaiInstance instance) : base(instance) { }
        public IfcReinforcementDefinitionProperties() : base(0) { }

        public static implicit operator IfcReinforcementDefinitionProperties(SdaiInstance instance) => new IfcReinforcementDefinitionProperties(instance);

        /// <summary>
        /// Create new instace of IfcReinforcementDefinitionProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcReinforcementDefinitionProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReinforcementDefinitionProperties"); Debug.Assert(inst != 0); return inst; }

        public TextValue DefinitionType
            {
            get { return get_string("DefinitionType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "DefinitionType", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcSectionReinforcementProperties ReinforcementSectionDefinitions { get { return (new ListOfIfcSectionReinforcementPropertiesSerializer()).FromAttr(m_instance, "ReinforcementSectionDefinitions"); } }
        public void put_ReinforcementSectionDefinitions(IEnumerable<IfcSectionReinforcementProperties> lst) { (new ListOfIfcSectionReinforcementPropertiesSerializer()).ToSdaiAggr(lst, m_instance, "ReinforcementSectionDefinitions"); }
        public void put_ReinforcementSectionDefinitions_untyped(IEnumerable lst) { (new ListOfIfcSectionReinforcementPropertiesSerializer()).ToSdaiAggr(lst, m_instance, "ReinforcementSectionDefinitions"); }

        protected override TextValue WrapperEntityName() { return "IfcReinforcementDefinitionProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcingElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcingElement : IfcBuildingElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcingElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcingElement(SdaiInstance instance) : base(instance) { }
        public IfcReinforcingElement() : base(0) { }

        public static implicit operator IfcReinforcingElement(SdaiInstance instance) => new IfcReinforcingElement(instance);

        public TextValue SteelGrade
            {
            get { return get_string("SteelGrade", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "SteelGrade", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcReinforcingElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcingBar
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcingBar : IfcReinforcingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcingBar
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcingBar(SdaiInstance instance) : base(instance) { }
        public IfcReinforcingBar() : base(0) { }

        public static implicit operator IfcReinforcingBar(SdaiInstance instance) => new IfcReinforcingBar(instance);

        /// <summary>
        /// Create new instace of IfcReinforcingBar and returns object of this class to interact with
        /// </summary>
        public static new IfcReinforcingBar Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReinforcingBar"); Debug.Assert(inst != 0); return inst; }

        public double? NominalDiameter
            {
            get { return get_double("NominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CrossSectionArea
            {
            get { return get_double("CrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BarLength
            {
            get { return get_double("BarLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BarLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcReinforcingBarRoleEnum? BarRole 
            { 
            get { var str = get_string("BarRole", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingBarRoleEnum_); return EnumValue<IfcReinforcingBarRoleEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingBarRoleEnum>.FromValue(value.Value, EnumNames.IfcReinforcingBarRoleEnum_); ifcengine.sdaiPutAttrBN(m_instance, "BarRole", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcReinforcingBarSurfaceEnum? BarSurface 
            { 
            get { var str = get_string("BarSurface", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingBarSurfaceEnum_); return EnumValue<IfcReinforcingBarSurfaceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingBarSurfaceEnum>.FromValue(value.Value, EnumNames.IfcReinforcingBarSurfaceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "BarSurface", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcReinforcingBar"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcingMesh
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcingMesh : IfcReinforcingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcingMesh
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcingMesh(SdaiInstance instance) : base(instance) { }
        public IfcReinforcingMesh() : base(0) { }

        public static implicit operator IfcReinforcingMesh(SdaiInstance instance) => new IfcReinforcingMesh(instance);

        /// <summary>
        /// Create new instace of IfcReinforcingMesh and returns object of this class to interact with
        /// </summary>
        public static new IfcReinforcingMesh Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReinforcingMesh"); Debug.Assert(inst != 0); return inst; }

        public double? MeshLength
            {
            get { return get_double("MeshLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MeshLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MeshWidth
            {
            get { return get_double("MeshWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MeshWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LongitudinalBarNominalDiameter
            {
            get { return get_double("LongitudinalBarNominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalBarNominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransverseBarNominalDiameter
            {
            get { return get_double("TransverseBarNominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransverseBarNominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LongitudinalBarCrossSectionArea
            {
            get { return get_double("LongitudinalBarCrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalBarCrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransverseBarCrossSectionArea
            {
            get { return get_double("TransverseBarCrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransverseBarCrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LongitudinalBarSpacing
            {
            get { return get_double("LongitudinalBarSpacing", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalBarSpacing", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransverseBarSpacing
            {
            get { return get_double("TransverseBarSpacing", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransverseBarSpacing", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcReinforcingMesh"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelationship : IfcRoot
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelationship(SdaiInstance instance) : base(instance) { }
        public IfcRelationship() : base(0) { }

        public static implicit operator IfcRelationship(SdaiInstance instance) => new IfcRelationship(instance);


        protected override TextValue WrapperEntityName() { return "IfcRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelDecomposes
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelDecomposes : IfcRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelDecomposes
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelDecomposes(SdaiInstance instance) : base(instance) { }
        public IfcRelDecomposes() : base(0) { }

        public static implicit operator IfcRelDecomposes(SdaiInstance instance) => new IfcRelDecomposes(instance);

        public IfcObjectDefinition RelatingObject 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingObject", ifcengine.sdaiINSTANCE, out inst); return new IfcObjectDefinition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingObject", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcObjectDefinition RelatedObjects { get { return (new SetOfIfcObjectDefinitionSerializer()).FromAttr(m_instance, "RelatedObjects"); } }
        public void put_RelatedObjects(IEnumerable<IfcObjectDefinition> lst) { (new SetOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public void put_RelatedObjects_untyped(IEnumerable lst) { (new SetOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }

        protected override TextValue WrapperEntityName() { return "IfcRelDecomposes"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAggregates
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAggregates : IfcRelDecomposes
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAggregates
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAggregates(SdaiInstance instance) : base(instance) { }
        public IfcRelAggregates() : base(0) { }

        public static implicit operator IfcRelAggregates(SdaiInstance instance) => new IfcRelAggregates(instance);

        /// <summary>
        /// Create new instace of IfcRelAggregates and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAggregates Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAggregates"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcRelAggregates"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssigns
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssigns : IfcRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssigns
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssigns(SdaiInstance instance) : base(instance) { }
        public IfcRelAssigns() : base(0) { }

        public static implicit operator IfcRelAssigns(SdaiInstance instance) => new IfcRelAssigns(instance);

        public SetOfIfcObjectDefinition RelatedObjects { get { return (new SetOfIfcObjectDefinitionSerializer()).FromAttr(m_instance, "RelatedObjects"); } }
        public void put_RelatedObjects(IEnumerable<IfcObjectDefinition> lst) { (new SetOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public void put_RelatedObjects_untyped(IEnumerable lst) { (new SetOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public IfcObjectTypeEnum? RelatedObjectsType 
            { 
            get { var str = get_string("RelatedObjectsType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcObjectTypeEnum_); return EnumValue<IfcObjectTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcObjectTypeEnum>.FromValue(value.Value, EnumNames.IfcObjectTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "RelatedObjectsType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssigns"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToControl
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToControl : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToControl(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToControl() : base(0) { }

        public static implicit operator IfcRelAssignsToControl(SdaiInstance instance) => new IfcRelAssignsToControl(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToControl and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToControl Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToControl"); Debug.Assert(inst != 0); return inst; }

        public IfcControl RelatingControl 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingControl", ifcengine.sdaiINSTANCE, out inst); return new IfcControl(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingControl", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssignsToControl"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsTasks
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsTasks : IfcRelAssignsToControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsTasks
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsTasks(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsTasks() : base(0) { }

        public static implicit operator IfcRelAssignsTasks(SdaiInstance instance) => new IfcRelAssignsTasks(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsTasks and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsTasks Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsTasks"); Debug.Assert(inst != 0); return inst; }

        public IfcScheduleTimeControl TimeForTask 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TimeForTask", ifcengine.sdaiINSTANCE, out inst); return new IfcScheduleTimeControl(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TimeForTask", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssignsTasks"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToActor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToActor : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToActor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToActor(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToActor() : base(0) { }

        public static implicit operator IfcRelAssignsToActor(SdaiInstance instance) => new IfcRelAssignsToActor(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToActor and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToActor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToActor"); Debug.Assert(inst != 0); return inst; }

        public IfcActor RelatingActor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingActor", ifcengine.sdaiINSTANCE, out inst); return new IfcActor(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingActor", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcActorRole ActingRole 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ActingRole", ifcengine.sdaiINSTANCE, out inst); return new IfcActorRole(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ActingRole", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssignsToActor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToGroup
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToGroup : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToGroup(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToGroup() : base(0) { }

        public static implicit operator IfcRelAssignsToGroup(SdaiInstance instance) => new IfcRelAssignsToGroup(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToGroup and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToGroup Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToGroup"); Debug.Assert(inst != 0); return inst; }

        public IfcGroup RelatingGroup 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingGroup", ifcengine.sdaiINSTANCE, out inst); return new IfcGroup(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingGroup", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssignsToGroup"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToProcess
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToProcess : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToProcess
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToProcess(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToProcess() : base(0) { }

        public static implicit operator IfcRelAssignsToProcess(SdaiInstance instance) => new IfcRelAssignsToProcess(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToProcess and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToProcess Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToProcess"); Debug.Assert(inst != 0); return inst; }

        public IfcProcess RelatingProcess 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingProcess", ifcengine.sdaiINSTANCE, out inst); return new IfcProcess(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingProcess", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcMeasureWithUnit QuantityInProcess 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "QuantityInProcess", ifcengine.sdaiINSTANCE, out inst); return new IfcMeasureWithUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "QuantityInProcess", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssignsToProcess"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToProduct
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToProduct : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToProduct
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToProduct(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToProduct() : base(0) { }

        public static implicit operator IfcRelAssignsToProduct(SdaiInstance instance) => new IfcRelAssignsToProduct(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToProduct and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToProduct Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToProduct"); Debug.Assert(inst != 0); return inst; }

        public IfcProduct RelatingProduct 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingProduct", ifcengine.sdaiINSTANCE, out inst); return new IfcProduct(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingProduct", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssignsToProduct"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToProjectOrder
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToProjectOrder : IfcRelAssignsToControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToProjectOrder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToProjectOrder(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToProjectOrder() : base(0) { }

        public static implicit operator IfcRelAssignsToProjectOrder(SdaiInstance instance) => new IfcRelAssignsToProjectOrder(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToProjectOrder and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToProjectOrder Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToProjectOrder"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcRelAssignsToProjectOrder"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToResource : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToResource(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToResource() : base(0) { }

        public static implicit operator IfcRelAssignsToResource(SdaiInstance instance) => new IfcRelAssignsToResource(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToResource and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToResource"); Debug.Assert(inst != 0); return inst; }

        public IfcResource RelatingResource 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingResource", ifcengine.sdaiINSTANCE, out inst); return new IfcResource(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingResource", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssignsToResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociates
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociates : IfcRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociates
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociates(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociates() : base(0) { }

        public static implicit operator IfcRelAssociates(SdaiInstance instance) => new IfcRelAssociates(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociates and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociates Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociates"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcRoot RelatedObjects { get { return (new SetOfIfcRootSerializer()).FromAttr(m_instance, "RelatedObjects"); } }
        public void put_RelatedObjects(IEnumerable<IfcRoot> lst) { (new SetOfIfcRootSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public void put_RelatedObjects_untyped(IEnumerable lst) { (new SetOfIfcRootSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }

        protected override TextValue WrapperEntityName() { return "IfcRelAssociates"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesAppliedValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesAppliedValue : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesAppliedValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesAppliedValue(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesAppliedValue() : base(0) { }

        public static implicit operator IfcRelAssociatesAppliedValue(SdaiInstance instance) => new IfcRelAssociatesAppliedValue(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesAppliedValue and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesAppliedValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesAppliedValue"); Debug.Assert(inst != 0); return inst; }

        public IfcAppliedValue RelatingAppliedValue 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingAppliedValue", ifcengine.sdaiINSTANCE, out inst); return new IfcAppliedValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingAppliedValue", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssociatesAppliedValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesApproval
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesApproval : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesApproval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesApproval(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesApproval() : base(0) { }

        public static implicit operator IfcRelAssociatesApproval(SdaiInstance instance) => new IfcRelAssociatesApproval(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesApproval and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesApproval Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesApproval"); Debug.Assert(inst != 0); return inst; }

        public IfcApproval RelatingApproval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingApproval", ifcengine.sdaiINSTANCE, out inst); return new IfcApproval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingApproval", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssociatesApproval"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesClassification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesClassification : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesClassification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesClassification(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesClassification() : base(0) { }

        public static implicit operator IfcRelAssociatesClassification(SdaiInstance instance) => new IfcRelAssociatesClassification(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesClassification and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesClassification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesClassification"); Debug.Assert(inst != 0); return inst; }


        public IfcClassificationNotationSelect RelatingClassification
            {
            get { return new IfcClassificationNotationSelect(m_instance, "RelatingClassification", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssociatesClassification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesConstraint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesConstraint : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesConstraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesConstraint(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesConstraint() : base(0) { }

        public static implicit operator IfcRelAssociatesConstraint(SdaiInstance instance) => new IfcRelAssociatesConstraint(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesConstraint and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesConstraint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesConstraint"); Debug.Assert(inst != 0); return inst; }

        public TextValue Intent
            {
            get { return get_string("Intent", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Intent", ifcengine.sdaiSTRING, value); }
            }
        public IfcConstraint RelatingConstraint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, out inst); return new IfcConstraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssociatesConstraint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesDocument
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesDocument : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesDocument
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesDocument(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesDocument() : base(0) { }

        public static implicit operator IfcRelAssociatesDocument(SdaiInstance instance) => new IfcRelAssociatesDocument(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesDocument and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesDocument Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesDocument"); Debug.Assert(inst != 0); return inst; }


        public IfcDocumentSelect RelatingDocument
            {
            get { return new IfcDocumentSelect(m_instance, "RelatingDocument", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssociatesDocument"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesLibrary
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesLibrary : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesLibrary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesLibrary(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesLibrary() : base(0) { }

        public static implicit operator IfcRelAssociatesLibrary(SdaiInstance instance) => new IfcRelAssociatesLibrary(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesLibrary and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesLibrary Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesLibrary"); Debug.Assert(inst != 0); return inst; }


        public IfcLibrarySelect RelatingLibrary
            {
            get { return new IfcLibrarySelect(m_instance, "RelatingLibrary", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssociatesLibrary"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesMaterial
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesMaterial : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesMaterial
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesMaterial(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesMaterial() : base(0) { }

        public static implicit operator IfcRelAssociatesMaterial(SdaiInstance instance) => new IfcRelAssociatesMaterial(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesMaterial and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesMaterial Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesMaterial"); Debug.Assert(inst != 0); return inst; }


        public IfcMaterialSelect RelatingMaterial
            {
            get { return new IfcMaterialSelect(m_instance, "RelatingMaterial", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssociatesMaterial"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesProfileProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesProfileProperties : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesProfileProperties(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesProfileProperties() : base(0) { }

        public static implicit operator IfcRelAssociatesProfileProperties(SdaiInstance instance) => new IfcRelAssociatesProfileProperties(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesProfileProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesProfileProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesProfileProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcProfileProperties RelatingProfileProperties 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingProfileProperties", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileProperties(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingProfileProperties", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcShapeAspect ProfileSectionLocation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ProfileSectionLocation", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ProfileSectionLocation", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcOrientationSelect ProfileOrientation
            {
            get { return new IfcOrientationSelect(m_instance, "ProfileOrientation", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelAssociatesProfileProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelaxation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelaxation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelaxation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelaxation(SdaiInstance instance) : base(instance) { }
        public IfcRelaxation() : base(0) { }

        public static implicit operator IfcRelaxation(SdaiInstance instance) => new IfcRelaxation(instance);

        /// <summary>
        /// Create new instace of IfcRelaxation and returns object of this class to interact with
        /// </summary>
        public static new IfcRelaxation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelaxation"); Debug.Assert(inst != 0); return inst; }

        public double? RelaxationValue
            {
            get { return get_double("RelaxationValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RelaxationValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? InitialStress
            {
            get { return get_double("InitialStress", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InitialStress", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelaxation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnects
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnects : IfcRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnects
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnects(SdaiInstance instance) : base(instance) { }
        public IfcRelConnects() : base(0) { }

        public static implicit operator IfcRelConnects(SdaiInstance instance) => new IfcRelConnects(instance);


        protected override TextValue WrapperEntityName() { return "IfcRelConnects"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsElements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsElements : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsElements(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsElements() : base(0) { }

        public static implicit operator IfcRelConnectsElements(SdaiInstance instance) => new IfcRelConnectsElements(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsElements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsElements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsElements"); Debug.Assert(inst != 0); return inst; }

        public IfcConnectionGeometry ConnectionGeometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ConnectionGeometry", ifcengine.sdaiINSTANCE, out inst); return new IfcConnectionGeometry(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ConnectionGeometry", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcElement RelatingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcElement RelatedElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelConnectsElements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsPathElements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsPathElements : IfcRelConnectsElements
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsPathElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsPathElements(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsPathElements() : base(0) { }

        public static implicit operator IfcRelConnectsPathElements(SdaiInstance instance) => new IfcRelConnectsPathElements(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsPathElements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsPathElements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsPathElements"); Debug.Assert(inst != 0); return inst; }

        public ListOfIntValue RelatingPriorities { get { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "RelatingPriorities"); } }
        public void put_RelatingPriorities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "RelatingPriorities"); }
        public void put_RelatingPriorities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "RelatingPriorities"); }
        public ListOfIntValue RelatedPriorities { get { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "RelatedPriorities"); } }
        public void put_RelatedPriorities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "RelatedPriorities"); }
        public void put_RelatedPriorities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "RelatedPriorities"); }
        public IfcConnectionTypeEnum? RelatedConnectionType 
            { 
            get { var str = get_string("RelatedConnectionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConnectionTypeEnum_); return EnumValue<IfcConnectionTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConnectionTypeEnum>.FromValue(value.Value, EnumNames.IfcConnectionTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "RelatedConnectionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcConnectionTypeEnum? RelatingConnectionType 
            { 
            get { var str = get_string("RelatingConnectionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConnectionTypeEnum_); return EnumValue<IfcConnectionTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConnectionTypeEnum>.FromValue(value.Value, EnumNames.IfcConnectionTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "RelatingConnectionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelConnectsPathElements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsPorts
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsPorts : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsPorts
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsPorts(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsPorts() : base(0) { }

        public static implicit operator IfcRelConnectsPorts(SdaiInstance instance) => new IfcRelConnectsPorts(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsPorts and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsPorts Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsPorts"); Debug.Assert(inst != 0); return inst; }

        public IfcPort RelatingPort 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingPort", ifcengine.sdaiINSTANCE, out inst); return new IfcPort(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingPort", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcPort RelatedPort 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedPort", ifcengine.sdaiINSTANCE, out inst); return new IfcPort(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedPort", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcElement RealizingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RealizingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RealizingElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelConnectsPorts"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsPortToElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsPortToElement : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsPortToElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsPortToElement(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsPortToElement() : base(0) { }

        public static implicit operator IfcRelConnectsPortToElement(SdaiInstance instance) => new IfcRelConnectsPortToElement(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsPortToElement and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsPortToElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsPortToElement"); Debug.Assert(inst != 0); return inst; }

        public IfcPort RelatingPort 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingPort", ifcengine.sdaiINSTANCE, out inst); return new IfcPort(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingPort", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcElement RelatedElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelConnectsPortToElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsStructuralActivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsStructuralActivity : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsStructuralActivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsStructuralActivity(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsStructuralActivity() : base(0) { }

        public static implicit operator IfcRelConnectsStructuralActivity(SdaiInstance instance) => new IfcRelConnectsStructuralActivity(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsStructuralActivity and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsStructuralActivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsStructuralActivity"); Debug.Assert(inst != 0); return inst; }


        public IfcStructuralActivityAssignmentSelect RelatingElement
            {
            get { return new IfcStructuralActivityAssignmentSelect(m_instance, "RelatingElement", 0); }
            }
        public IfcStructuralActivity RelatedStructuralActivity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedStructuralActivity", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralActivity(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedStructuralActivity", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelConnectsStructuralActivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsStructuralElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsStructuralElement : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsStructuralElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsStructuralElement(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsStructuralElement() : base(0) { }

        public static implicit operator IfcRelConnectsStructuralElement(SdaiInstance instance) => new IfcRelConnectsStructuralElement(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsStructuralElement and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsStructuralElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsStructuralElement"); Debug.Assert(inst != 0); return inst; }

        public IfcElement RelatingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcStructuralMember RelatedStructuralMember 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedStructuralMember", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralMember(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedStructuralMember", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelConnectsStructuralElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsStructuralMember
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsStructuralMember : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsStructuralMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsStructuralMember(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsStructuralMember() : base(0) { }

        public static implicit operator IfcRelConnectsStructuralMember(SdaiInstance instance) => new IfcRelConnectsStructuralMember(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsStructuralMember and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsStructuralMember Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsStructuralMember"); Debug.Assert(inst != 0); return inst; }

        public IfcStructuralMember RelatingStructuralMember 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingStructuralMember", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralMember(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingStructuralMember", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcStructuralConnection RelatedStructuralConnection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedStructuralConnection", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralConnection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedStructuralConnection", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcBoundaryCondition AppliedCondition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AppliedCondition", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundaryCondition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AppliedCondition", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcStructuralConnectionCondition AdditionalConditions 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AdditionalConditions", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralConnectionCondition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AdditionalConditions", ifcengine.sdaiINSTANCE, i); }
            }
        public double? SupportedLength
            {
            get { return get_double("SupportedLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SupportedLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcAxis2Placement3D ConditionCoordinateSystem 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ConditionCoordinateSystem", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ConditionCoordinateSystem", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelConnectsStructuralMember"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsWithEccentricity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsWithEccentricity : IfcRelConnectsStructuralMember
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsWithEccentricity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsWithEccentricity(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsWithEccentricity() : base(0) { }

        public static implicit operator IfcRelConnectsWithEccentricity(SdaiInstance instance) => new IfcRelConnectsWithEccentricity(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsWithEccentricity and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsWithEccentricity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsWithEccentricity"); Debug.Assert(inst != 0); return inst; }

        public IfcConnectionGeometry ConnectionConstraint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ConnectionConstraint", ifcengine.sdaiINSTANCE, out inst); return new IfcConnectionGeometry(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ConnectionConstraint", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelConnectsWithEccentricity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsWithRealizingElements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsWithRealizingElements : IfcRelConnectsElements
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsWithRealizingElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsWithRealizingElements(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsWithRealizingElements() : base(0) { }

        public static implicit operator IfcRelConnectsWithRealizingElements(SdaiInstance instance) => new IfcRelConnectsWithRealizingElements(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsWithRealizingElements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsWithRealizingElements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsWithRealizingElements"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcElement RealizingElements { get { return (new SetOfIfcElementSerializer()).FromAttr(m_instance, "RealizingElements"); } }
        public void put_RealizingElements(IEnumerable<IfcElement> lst) { (new SetOfIfcElementSerializer()).ToSdaiAggr(lst, m_instance, "RealizingElements"); }
        public void put_RealizingElements_untyped(IEnumerable lst) { (new SetOfIfcElementSerializer()).ToSdaiAggr(lst, m_instance, "RealizingElements"); }
        public TextValue ConnectionType
            {
            get { return get_string("ConnectionType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ConnectionType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelConnectsWithRealizingElements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelContainedInSpatialStructure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelContainedInSpatialStructure : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelContainedInSpatialStructure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelContainedInSpatialStructure(SdaiInstance instance) : base(instance) { }
        public IfcRelContainedInSpatialStructure() : base(0) { }

        public static implicit operator IfcRelContainedInSpatialStructure(SdaiInstance instance) => new IfcRelContainedInSpatialStructure(instance);

        /// <summary>
        /// Create new instace of IfcRelContainedInSpatialStructure and returns object of this class to interact with
        /// </summary>
        public static new IfcRelContainedInSpatialStructure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelContainedInSpatialStructure"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProduct RelatedElements { get { return (new SetOfIfcProductSerializer()).FromAttr(m_instance, "RelatedElements"); } }
        public void put_RelatedElements(IEnumerable<IfcProduct> lst) { (new SetOfIfcProductSerializer()).ToSdaiAggr(lst, m_instance, "RelatedElements"); }
        public void put_RelatedElements_untyped(IEnumerable lst) { (new SetOfIfcProductSerializer()).ToSdaiAggr(lst, m_instance, "RelatedElements"); }
        public IfcSpatialStructureElement RelatingStructure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingStructure", ifcengine.sdaiINSTANCE, out inst); return new IfcSpatialStructureElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingStructure", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelContainedInSpatialStructure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelCoversBldgElements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelCoversBldgElements : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelCoversBldgElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelCoversBldgElements(SdaiInstance instance) : base(instance) { }
        public IfcRelCoversBldgElements() : base(0) { }

        public static implicit operator IfcRelCoversBldgElements(SdaiInstance instance) => new IfcRelCoversBldgElements(instance);

        /// <summary>
        /// Create new instace of IfcRelCoversBldgElements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelCoversBldgElements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelCoversBldgElements"); Debug.Assert(inst != 0); return inst; }

        public IfcElement RelatingBuildingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingBuildingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingBuildingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcCovering RelatedCoverings { get { return (new SetOfIfcCoveringSerializer()).FromAttr(m_instance, "RelatedCoverings"); } }
        public void put_RelatedCoverings(IEnumerable<IfcCovering> lst) { (new SetOfIfcCoveringSerializer()).ToSdaiAggr(lst, m_instance, "RelatedCoverings"); }
        public void put_RelatedCoverings_untyped(IEnumerable lst) { (new SetOfIfcCoveringSerializer()).ToSdaiAggr(lst, m_instance, "RelatedCoverings"); }

        protected override TextValue WrapperEntityName() { return "IfcRelCoversBldgElements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelCoversSpaces
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelCoversSpaces : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelCoversSpaces
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelCoversSpaces(SdaiInstance instance) : base(instance) { }
        public IfcRelCoversSpaces() : base(0) { }

        public static implicit operator IfcRelCoversSpaces(SdaiInstance instance) => new IfcRelCoversSpaces(instance);

        /// <summary>
        /// Create new instace of IfcRelCoversSpaces and returns object of this class to interact with
        /// </summary>
        public static new IfcRelCoversSpaces Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelCoversSpaces"); Debug.Assert(inst != 0); return inst; }

        public IfcSpace RelatedSpace 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedSpace", ifcengine.sdaiINSTANCE, out inst); return new IfcSpace(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedSpace", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcCovering RelatedCoverings { get { return (new SetOfIfcCoveringSerializer()).FromAttr(m_instance, "RelatedCoverings"); } }
        public void put_RelatedCoverings(IEnumerable<IfcCovering> lst) { (new SetOfIfcCoveringSerializer()).ToSdaiAggr(lst, m_instance, "RelatedCoverings"); }
        public void put_RelatedCoverings_untyped(IEnumerable lst) { (new SetOfIfcCoveringSerializer()).ToSdaiAggr(lst, m_instance, "RelatedCoverings"); }

        protected override TextValue WrapperEntityName() { return "IfcRelCoversSpaces"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelDefines
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelDefines : IfcRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelDefines
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelDefines(SdaiInstance instance) : base(instance) { }
        public IfcRelDefines() : base(0) { }

        public static implicit operator IfcRelDefines(SdaiInstance instance) => new IfcRelDefines(instance);

        public SetOfIfcObject RelatedObjects { get { return (new SetOfIfcObjectSerializer()).FromAttr(m_instance, "RelatedObjects"); } }
        public void put_RelatedObjects(IEnumerable<IfcObject> lst) { (new SetOfIfcObjectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public void put_RelatedObjects_untyped(IEnumerable lst) { (new SetOfIfcObjectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }

        protected override TextValue WrapperEntityName() { return "IfcRelDefines"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelDefinesByProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelDefinesByProperties : IfcRelDefines
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelDefinesByProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelDefinesByProperties(SdaiInstance instance) : base(instance) { }
        public IfcRelDefinesByProperties() : base(0) { }

        public static implicit operator IfcRelDefinesByProperties(SdaiInstance instance) => new IfcRelDefinesByProperties(instance);

        /// <summary>
        /// Create new instace of IfcRelDefinesByProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcRelDefinesByProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelDefinesByProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcPropertySetDefinition RelatingPropertyDefinition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingPropertyDefinition", ifcengine.sdaiINSTANCE, out inst); return new IfcPropertySetDefinition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingPropertyDefinition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelDefinesByProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelDefinesByType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelDefinesByType : IfcRelDefines
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelDefinesByType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelDefinesByType(SdaiInstance instance) : base(instance) { }
        public IfcRelDefinesByType() : base(0) { }

        public static implicit operator IfcRelDefinesByType(SdaiInstance instance) => new IfcRelDefinesByType(instance);

        /// <summary>
        /// Create new instace of IfcRelDefinesByType and returns object of this class to interact with
        /// </summary>
        public static new IfcRelDefinesByType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelDefinesByType"); Debug.Assert(inst != 0); return inst; }

        public IfcTypeObject RelatingType 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingType", ifcengine.sdaiINSTANCE, out inst); return new IfcTypeObject(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingType", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelDefinesByType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelFillsElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelFillsElement : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelFillsElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelFillsElement(SdaiInstance instance) : base(instance) { }
        public IfcRelFillsElement() : base(0) { }

        public static implicit operator IfcRelFillsElement(SdaiInstance instance) => new IfcRelFillsElement(instance);

        /// <summary>
        /// Create new instace of IfcRelFillsElement and returns object of this class to interact with
        /// </summary>
        public static new IfcRelFillsElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelFillsElement"); Debug.Assert(inst != 0); return inst; }

        public IfcOpeningElement RelatingOpeningElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingOpeningElement", ifcengine.sdaiINSTANCE, out inst); return new IfcOpeningElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingOpeningElement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcElement RelatedBuildingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedBuildingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedBuildingElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelFillsElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelFlowControlElements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelFlowControlElements : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelFlowControlElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelFlowControlElements(SdaiInstance instance) : base(instance) { }
        public IfcRelFlowControlElements() : base(0) { }

        public static implicit operator IfcRelFlowControlElements(SdaiInstance instance) => new IfcRelFlowControlElements(instance);

        /// <summary>
        /// Create new instace of IfcRelFlowControlElements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelFlowControlElements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelFlowControlElements"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcDistributionControlElement RelatedControlElements { get { return (new SetOfIfcDistributionControlElementSerializer()).FromAttr(m_instance, "RelatedControlElements"); } }
        public void put_RelatedControlElements(IEnumerable<IfcDistributionControlElement> lst) { (new SetOfIfcDistributionControlElementSerializer()).ToSdaiAggr(lst, m_instance, "RelatedControlElements"); }
        public void put_RelatedControlElements_untyped(IEnumerable lst) { (new SetOfIfcDistributionControlElementSerializer()).ToSdaiAggr(lst, m_instance, "RelatedControlElements"); }
        public IfcDistributionFlowElement RelatingFlowElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingFlowElement", ifcengine.sdaiINSTANCE, out inst); return new IfcDistributionFlowElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingFlowElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelFlowControlElements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelInteractionRequirements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelInteractionRequirements : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelInteractionRequirements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelInteractionRequirements(SdaiInstance instance) : base(instance) { }
        public IfcRelInteractionRequirements() : base(0) { }

        public static implicit operator IfcRelInteractionRequirements(SdaiInstance instance) => new IfcRelInteractionRequirements(instance);

        /// <summary>
        /// Create new instace of IfcRelInteractionRequirements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelInteractionRequirements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelInteractionRequirements"); Debug.Assert(inst != 0); return inst; }

        public double? DailyInteraction
            {
            get { return get_double("DailyInteraction", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DailyInteraction", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ImportanceRating
            {
            get { return get_double("ImportanceRating", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ImportanceRating", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcSpatialStructureElement LocationOfInteraction 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LocationOfInteraction", ifcengine.sdaiINSTANCE, out inst); return new IfcSpatialStructureElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LocationOfInteraction", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcSpaceProgram RelatedSpaceProgram 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedSpaceProgram", ifcengine.sdaiINSTANCE, out inst); return new IfcSpaceProgram(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedSpaceProgram", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcSpaceProgram RelatingSpaceProgram 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingSpaceProgram", ifcengine.sdaiINSTANCE, out inst); return new IfcSpaceProgram(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingSpaceProgram", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelInteractionRequirements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelNests
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelNests : IfcRelDecomposes
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelNests
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelNests(SdaiInstance instance) : base(instance) { }
        public IfcRelNests() : base(0) { }

        public static implicit operator IfcRelNests(SdaiInstance instance) => new IfcRelNests(instance);

        /// <summary>
        /// Create new instace of IfcRelNests and returns object of this class to interact with
        /// </summary>
        public static new IfcRelNests Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelNests"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcRelNests"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelOccupiesSpaces
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelOccupiesSpaces : IfcRelAssignsToActor
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelOccupiesSpaces
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelOccupiesSpaces(SdaiInstance instance) : base(instance) { }
        public IfcRelOccupiesSpaces() : base(0) { }

        public static implicit operator IfcRelOccupiesSpaces(SdaiInstance instance) => new IfcRelOccupiesSpaces(instance);

        /// <summary>
        /// Create new instace of IfcRelOccupiesSpaces and returns object of this class to interact with
        /// </summary>
        public static new IfcRelOccupiesSpaces Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelOccupiesSpaces"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcRelOccupiesSpaces"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelOverridesProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelOverridesProperties : IfcRelDefinesByProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelOverridesProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelOverridesProperties(SdaiInstance instance) : base(instance) { }
        public IfcRelOverridesProperties() : base(0) { }

        public static implicit operator IfcRelOverridesProperties(SdaiInstance instance) => new IfcRelOverridesProperties(instance);

        /// <summary>
        /// Create new instace of IfcRelOverridesProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcRelOverridesProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelOverridesProperties"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProperty OverridingProperties { get { return (new SetOfIfcPropertySerializer()).FromAttr(m_instance, "OverridingProperties"); } }
        public void put_OverridingProperties(IEnumerable<IfcProperty> lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "OverridingProperties"); }
        public void put_OverridingProperties_untyped(IEnumerable lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "OverridingProperties"); }

        protected override TextValue WrapperEntityName() { return "IfcRelOverridesProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelProjectsElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelProjectsElement : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelProjectsElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelProjectsElement(SdaiInstance instance) : base(instance) { }
        public IfcRelProjectsElement() : base(0) { }

        public static implicit operator IfcRelProjectsElement(SdaiInstance instance) => new IfcRelProjectsElement(instance);

        /// <summary>
        /// Create new instace of IfcRelProjectsElement and returns object of this class to interact with
        /// </summary>
        public static new IfcRelProjectsElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelProjectsElement"); Debug.Assert(inst != 0); return inst; }

        public IfcElement RelatingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcFeatureElementAddition RelatedFeatureElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedFeatureElement", ifcengine.sdaiINSTANCE, out inst); return new IfcFeatureElementAddition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedFeatureElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelProjectsElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelReferencedInSpatialStructure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelReferencedInSpatialStructure : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelReferencedInSpatialStructure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelReferencedInSpatialStructure(SdaiInstance instance) : base(instance) { }
        public IfcRelReferencedInSpatialStructure() : base(0) { }

        public static implicit operator IfcRelReferencedInSpatialStructure(SdaiInstance instance) => new IfcRelReferencedInSpatialStructure(instance);

        /// <summary>
        /// Create new instace of IfcRelReferencedInSpatialStructure and returns object of this class to interact with
        /// </summary>
        public static new IfcRelReferencedInSpatialStructure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelReferencedInSpatialStructure"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProduct RelatedElements { get { return (new SetOfIfcProductSerializer()).FromAttr(m_instance, "RelatedElements"); } }
        public void put_RelatedElements(IEnumerable<IfcProduct> lst) { (new SetOfIfcProductSerializer()).ToSdaiAggr(lst, m_instance, "RelatedElements"); }
        public void put_RelatedElements_untyped(IEnumerable lst) { (new SetOfIfcProductSerializer()).ToSdaiAggr(lst, m_instance, "RelatedElements"); }
        public IfcSpatialStructureElement RelatingStructure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingStructure", ifcengine.sdaiINSTANCE, out inst); return new IfcSpatialStructureElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingStructure", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelReferencedInSpatialStructure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelSchedulesCostItems
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelSchedulesCostItems : IfcRelAssignsToControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelSchedulesCostItems
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelSchedulesCostItems(SdaiInstance instance) : base(instance) { }
        public IfcRelSchedulesCostItems() : base(0) { }

        public static implicit operator IfcRelSchedulesCostItems(SdaiInstance instance) => new IfcRelSchedulesCostItems(instance);

        /// <summary>
        /// Create new instace of IfcRelSchedulesCostItems and returns object of this class to interact with
        /// </summary>
        public static new IfcRelSchedulesCostItems Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelSchedulesCostItems"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcRelSchedulesCostItems"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelSequence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelSequence : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelSequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelSequence(SdaiInstance instance) : base(instance) { }
        public IfcRelSequence() : base(0) { }

        public static implicit operator IfcRelSequence(SdaiInstance instance) => new IfcRelSequence(instance);

        /// <summary>
        /// Create new instace of IfcRelSequence and returns object of this class to interact with
        /// </summary>
        public static new IfcRelSequence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelSequence"); Debug.Assert(inst != 0); return inst; }

        public IfcProcess RelatingProcess 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingProcess", ifcengine.sdaiINSTANCE, out inst); return new IfcProcess(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingProcess", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcProcess RelatedProcess 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedProcess", ifcengine.sdaiINSTANCE, out inst); return new IfcProcess(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedProcess", ifcengine.sdaiINSTANCE, i); }
            }
        public double? TimeLag
            {
            get { return get_double("TimeLag", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TimeLag", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcSequenceEnum? SequenceType 
            { 
            get { var str = get_string("SequenceType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSequenceEnum_); return EnumValue<IfcSequenceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSequenceEnum>.FromValue(value.Value, EnumNames.IfcSequenceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "SequenceType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelSequence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelServicesBuildings
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelServicesBuildings : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelServicesBuildings
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelServicesBuildings(SdaiInstance instance) : base(instance) { }
        public IfcRelServicesBuildings() : base(0) { }

        public static implicit operator IfcRelServicesBuildings(SdaiInstance instance) => new IfcRelServicesBuildings(instance);

        /// <summary>
        /// Create new instace of IfcRelServicesBuildings and returns object of this class to interact with
        /// </summary>
        public static new IfcRelServicesBuildings Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelServicesBuildings"); Debug.Assert(inst != 0); return inst; }

        public IfcSystem RelatingSystem 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingSystem", ifcengine.sdaiINSTANCE, out inst); return new IfcSystem(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingSystem", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcSpatialStructureElement RelatedBuildings { get { return (new SetOfIfcSpatialStructureElementSerializer()).FromAttr(m_instance, "RelatedBuildings"); } }
        public void put_RelatedBuildings(IEnumerable<IfcSpatialStructureElement> lst) { (new SetOfIfcSpatialStructureElementSerializer()).ToSdaiAggr(lst, m_instance, "RelatedBuildings"); }
        public void put_RelatedBuildings_untyped(IEnumerable lst) { (new SetOfIfcSpatialStructureElementSerializer()).ToSdaiAggr(lst, m_instance, "RelatedBuildings"); }

        protected override TextValue WrapperEntityName() { return "IfcRelServicesBuildings"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelSpaceBoundary
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelSpaceBoundary : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelSpaceBoundary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelSpaceBoundary(SdaiInstance instance) : base(instance) { }
        public IfcRelSpaceBoundary() : base(0) { }

        public static implicit operator IfcRelSpaceBoundary(SdaiInstance instance) => new IfcRelSpaceBoundary(instance);

        /// <summary>
        /// Create new instace of IfcRelSpaceBoundary and returns object of this class to interact with
        /// </summary>
        public static new IfcRelSpaceBoundary Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelSpaceBoundary"); Debug.Assert(inst != 0); return inst; }

        public IfcSpace RelatingSpace 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingSpace", ifcengine.sdaiINSTANCE, out inst); return new IfcSpace(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingSpace", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcElement RelatedBuildingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedBuildingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedBuildingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcConnectionGeometry ConnectionGeometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ConnectionGeometry", ifcengine.sdaiINSTANCE, out inst); return new IfcConnectionGeometry(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ConnectionGeometry", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcPhysicalOrVirtualEnum? PhysicalOrVirtualBoundary 
            { 
            get { var str = get_string("PhysicalOrVirtualBoundary", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPhysicalOrVirtualEnum_); return EnumValue<IfcPhysicalOrVirtualEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPhysicalOrVirtualEnum>.FromValue(value.Value, EnumNames.IfcPhysicalOrVirtualEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PhysicalOrVirtualBoundary", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcInternalOrExternalEnum? InternalOrExternalBoundary 
            { 
            get { var str = get_string("InternalOrExternalBoundary", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcInternalOrExternalEnum_); return EnumValue<IfcInternalOrExternalEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcInternalOrExternalEnum>.FromValue(value.Value, EnumNames.IfcInternalOrExternalEnum_); ifcengine.sdaiPutAttrBN(m_instance, "InternalOrExternalBoundary", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelSpaceBoundary"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelVoidsElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelVoidsElement : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelVoidsElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelVoidsElement(SdaiInstance instance) : base(instance) { }
        public IfcRelVoidsElement() : base(0) { }

        public static implicit operator IfcRelVoidsElement(SdaiInstance instance) => new IfcRelVoidsElement(instance);

        /// <summary>
        /// Create new instace of IfcRelVoidsElement and returns object of this class to interact with
        /// </summary>
        public static new IfcRelVoidsElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelVoidsElement"); Debug.Assert(inst != 0); return inst; }

        public IfcElement RelatingBuildingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingBuildingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingBuildingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcFeatureElementSubtraction RelatedOpeningElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedOpeningElement", ifcengine.sdaiINSTANCE, out inst); return new IfcFeatureElementSubtraction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedOpeningElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRelVoidsElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRepresentation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcRepresentation() : base(0) { }

        public static implicit operator IfcRepresentation(SdaiInstance instance) => new IfcRepresentation(instance);

        /// <summary>
        /// Create new instace of IfcRepresentation and returns object of this class to interact with
        /// </summary>
        public static new IfcRepresentation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRepresentation"); Debug.Assert(inst != 0); return inst; }

        public IfcRepresentationContext ContextOfItems 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ContextOfItems", ifcengine.sdaiINSTANCE, out inst); return new IfcRepresentationContext(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ContextOfItems", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue RepresentationIdentifier
            {
            get { return get_string("RepresentationIdentifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RepresentationIdentifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue RepresentationType
            {
            get { return get_string("RepresentationType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RepresentationType", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRepresentationItem Items { get { return (new SetOfIfcRepresentationItemSerializer()).FromAttr(m_instance, "Items"); } }
        public void put_Items(IEnumerable<IfcRepresentationItem> lst) { (new SetOfIfcRepresentationItemSerializer()).ToSdaiAggr(lst, m_instance, "Items"); }
        public void put_Items_untyped(IEnumerable lst) { (new SetOfIfcRepresentationItemSerializer()).ToSdaiAggr(lst, m_instance, "Items"); }
        public SetOfIfcRepresentationMap RepresentationMap { get { return (new SetOfIfcRepresentationMapSerializer()).FromAttr(m_instance, "RepresentationMap"); } }
        public SetOfIfcPresentationLayerAssignment LayerAssignments { get { return (new SetOfIfcPresentationLayerAssignmentSerializer()).FromAttr(m_instance, "LayerAssignments"); } }
        public SetOfIfcProductRepresentation OfProductRepresentation { get { return (new SetOfIfcProductRepresentationSerializer()).FromAttr(m_instance, "OfProductRepresentation"); } }

        protected override TextValue WrapperEntityName() { return "IfcRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRepresentationMap
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRepresentationMap : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRepresentationMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRepresentationMap(SdaiInstance instance) : base(instance) { }
        public IfcRepresentationMap() : base(0) { }

        public static implicit operator IfcRepresentationMap(SdaiInstance instance) => new IfcRepresentationMap(instance);

        /// <summary>
        /// Create new instace of IfcRepresentationMap and returns object of this class to interact with
        /// </summary>
        public static new IfcRepresentationMap Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRepresentationMap"); Debug.Assert(inst != 0); return inst; }


        public IfcAxis2Placement MappingOrigin
            {
            get { return new IfcAxis2Placement(m_instance, "MappingOrigin", 0); }
            }
        public IfcRepresentation MappedRepresentation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MappedRepresentation", ifcengine.sdaiINSTANCE, out inst); return new IfcRepresentation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MappedRepresentation", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcMappedItem MapUsage { get { return (new SetOfIfcMappedItemSerializer()).FromAttr(m_instance, "MapUsage"); } }

        protected override TextValue WrapperEntityName() { return "IfcRepresentationMap"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRevolvedAreaSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRevolvedAreaSolid : IfcSweptAreaSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRevolvedAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRevolvedAreaSolid(SdaiInstance instance) : base(instance) { }
        public IfcRevolvedAreaSolid() : base(0) { }

        public static implicit operator IfcRevolvedAreaSolid(SdaiInstance instance) => new IfcRevolvedAreaSolid(instance);

        /// <summary>
        /// Create new instace of IfcRevolvedAreaSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcRevolvedAreaSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRevolvedAreaSolid"); Debug.Assert(inst != 0); return inst; }

        public IfcAxis1Placement Axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis1Placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Angle
            {
            get { return get_double("Angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcLine AxisLine { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AxisLine", ifcengine.sdaiINSTANCE, out inst); return new IfcLine(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcRevolvedAreaSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRibPlateProfileProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRibPlateProfileProperties : IfcProfileProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRibPlateProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRibPlateProfileProperties(SdaiInstance instance) : base(instance) { }
        public IfcRibPlateProfileProperties() : base(0) { }

        public static implicit operator IfcRibPlateProfileProperties(SdaiInstance instance) => new IfcRibPlateProfileProperties(instance);

        /// <summary>
        /// Create new instace of IfcRibPlateProfileProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcRibPlateProfileProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRibPlateProfileProperties"); Debug.Assert(inst != 0); return inst; }

        public double? Thickness
            {
            get { return get_double("Thickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Thickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RibHeight
            {
            get { return get_double("RibHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RibHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RibWidth
            {
            get { return get_double("RibWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RibWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RibSpacing
            {
            get { return get_double("RibSpacing", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RibSpacing", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcRibPlateDirectionEnum? Direction 
            { 
            get { var str = get_string("Direction", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRibPlateDirectionEnum_); return EnumValue<IfcRibPlateDirectionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRibPlateDirectionEnum>.FromValue(value.Value, EnumNames.IfcRibPlateDirectionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Direction", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRibPlateProfileProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRightCircularCone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRightCircularCone : IfcCsgPrimitive3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRightCircularCone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRightCircularCone(SdaiInstance instance) : base(instance) { }
        public IfcRightCircularCone() : base(0) { }

        public static implicit operator IfcRightCircularCone(SdaiInstance instance) => new IfcRightCircularCone(instance);

        /// <summary>
        /// Create new instace of IfcRightCircularCone and returns object of this class to interact with
        /// </summary>
        public static new IfcRightCircularCone Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRightCircularCone"); Debug.Assert(inst != 0); return inst; }

        public double? Height
            {
            get { return get_double("Height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BottomRadius
            {
            get { return get_double("BottomRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BottomRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRightCircularCone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRightCircularCylinder
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRightCircularCylinder : IfcCsgPrimitive3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRightCircularCylinder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRightCircularCylinder(SdaiInstance instance) : base(instance) { }
        public IfcRightCircularCylinder() : base(0) { }

        public static implicit operator IfcRightCircularCylinder(SdaiInstance instance) => new IfcRightCircularCylinder(instance);

        /// <summary>
        /// Create new instace of IfcRightCircularCylinder and returns object of this class to interact with
        /// </summary>
        public static new IfcRightCircularCylinder Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRightCircularCylinder"); Debug.Assert(inst != 0); return inst; }

        public double? Height
            {
            get { return get_double("Height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRightCircularCylinder"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRoof
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRoof : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRoof
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRoof(SdaiInstance instance) : base(instance) { }
        public IfcRoof() : base(0) { }

        public static implicit operator IfcRoof(SdaiInstance instance) => new IfcRoof(instance);

        /// <summary>
        /// Create new instace of IfcRoof and returns object of this class to interact with
        /// </summary>
        public static new IfcRoof Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRoof"); Debug.Assert(inst != 0); return inst; }

        public IfcRoofTypeEnum? ShapeType 
            { 
            get { var str = get_string("ShapeType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRoofTypeEnum_); return EnumValue<IfcRoofTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRoofTypeEnum>.FromValue(value.Value, EnumNames.IfcRoofTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ShapeType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRoof"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRoundedEdgeFeature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRoundedEdgeFeature : IfcEdgeFeature
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRoundedEdgeFeature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRoundedEdgeFeature(SdaiInstance instance) : base(instance) { }
        public IfcRoundedEdgeFeature() : base(0) { }

        public static implicit operator IfcRoundedEdgeFeature(SdaiInstance instance) => new IfcRoundedEdgeFeature(instance);

        /// <summary>
        /// Create new instace of IfcRoundedEdgeFeature and returns object of this class to interact with
        /// </summary>
        public static new IfcRoundedEdgeFeature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRoundedEdgeFeature"); Debug.Assert(inst != 0); return inst; }

        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRoundedEdgeFeature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRoundedRectangleProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRoundedRectangleProfileDef : IfcRectangleProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRoundedRectangleProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRoundedRectangleProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcRoundedRectangleProfileDef() : base(0) { }

        public static implicit operator IfcRoundedRectangleProfileDef(SdaiInstance instance) => new IfcRoundedRectangleProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcRoundedRectangleProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcRoundedRectangleProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRoundedRectangleProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? RoundingRadius
            {
            get { return get_double("RoundingRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RoundingRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcRoundedRectangleProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSanitaryTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSanitaryTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSanitaryTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSanitaryTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcSanitaryTerminalType() : base(0) { }

        public static implicit operator IfcSanitaryTerminalType(SdaiInstance instance) => new IfcSanitaryTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcSanitaryTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcSanitaryTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSanitaryTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcSanitaryTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSanitaryTerminalTypeEnum_); return EnumValue<IfcSanitaryTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSanitaryTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcSanitaryTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSanitaryTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcScheduleTimeControl
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcScheduleTimeControl : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcScheduleTimeControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcScheduleTimeControl(SdaiInstance instance) : base(instance) { }
        public IfcScheduleTimeControl() : base(0) { }

        public static implicit operator IfcScheduleTimeControl(SdaiInstance instance) => new IfcScheduleTimeControl(instance);

        /// <summary>
        /// Create new instace of IfcScheduleTimeControl and returns object of this class to interact with
        /// </summary>
        public static new IfcScheduleTimeControl Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcScheduleTimeControl"); Debug.Assert(inst != 0); return inst; }


        public IfcDateTimeSelect ActualStart
            {
            get { return new IfcDateTimeSelect(m_instance, "ActualStart", 0); }
            }

        public IfcDateTimeSelect EarlyStart
            {
            get { return new IfcDateTimeSelect(m_instance, "EarlyStart", 0); }
            }

        public IfcDateTimeSelect LateStart
            {
            get { return new IfcDateTimeSelect(m_instance, "LateStart", 0); }
            }

        public IfcDateTimeSelect ScheduleStart
            {
            get { return new IfcDateTimeSelect(m_instance, "ScheduleStart", 0); }
            }

        public IfcDateTimeSelect ActualFinish
            {
            get { return new IfcDateTimeSelect(m_instance, "ActualFinish", 0); }
            }

        public IfcDateTimeSelect EarlyFinish
            {
            get { return new IfcDateTimeSelect(m_instance, "EarlyFinish", 0); }
            }

        public IfcDateTimeSelect LateFinish
            {
            get { return new IfcDateTimeSelect(m_instance, "LateFinish", 0); }
            }

        public IfcDateTimeSelect ScheduleFinish
            {
            get { return new IfcDateTimeSelect(m_instance, "ScheduleFinish", 0); }
            }
        public double? ScheduleDuration
            {
            get { return get_double("ScheduleDuration", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ScheduleDuration", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ActualDuration
            {
            get { return get_double("ActualDuration", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ActualDuration", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RemainingTime
            {
            get { return get_double("RemainingTime", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RemainingTime", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FreeFloat
            {
            get { return get_double("FreeFloat", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FreeFloat", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TotalFloat
            {
            get { return get_double("TotalFloat", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TotalFloat", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public bool? IsCritical
            {
            get { return get_bool("IsCritical", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsCritical", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        public IfcDateTimeSelect StatusTime
            {
            get { return new IfcDateTimeSelect(m_instance, "StatusTime", 0); }
            }
        public double? StartFloat
            {
            get { return get_double("StartFloat", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartFloat", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FinishFloat
            {
            get { return get_double("FinishFloat", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FinishFloat", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Completion
            {
            get { return get_double("Completion", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Completion", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcRelAssignsTasks ScheduleTimeControlAssigned { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ScheduleTimeControlAssigned", ifcengine.sdaiINSTANCE, out inst); return new IfcRelAssignsTasks(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcScheduleTimeControl"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSectionedSpine
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSectionedSpine : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSectionedSpine
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSectionedSpine(SdaiInstance instance) : base(instance) { }
        public IfcSectionedSpine() : base(0) { }

        public static implicit operator IfcSectionedSpine(SdaiInstance instance) => new IfcSectionedSpine(instance);

        /// <summary>
        /// Create new instace of IfcSectionedSpine and returns object of this class to interact with
        /// </summary>
        public static new IfcSectionedSpine Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSectionedSpine"); Debug.Assert(inst != 0); return inst; }

        public IfcCompositeCurve SpineCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SpineCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCompositeCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SpineCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcProfileDef CrossSections { get { return (new ListOfIfcProfileDefSerializer()).FromAttr(m_instance, "CrossSections"); } }
        public void put_CrossSections(IEnumerable<IfcProfileDef> lst) { (new ListOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "CrossSections"); }
        public void put_CrossSections_untyped(IEnumerable lst) { (new ListOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "CrossSections"); }
        public ListOfIfcAxis2Placement3D CrossSectionPositions { get { return (new ListOfIfcAxis2Placement3DSerializer()).FromAttr(m_instance, "CrossSectionPositions"); } }
        public void put_CrossSectionPositions(IEnumerable<IfcAxis2Placement3D> lst) { (new ListOfIfcAxis2Placement3DSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionPositions"); }
        public void put_CrossSectionPositions_untyped(IEnumerable lst) { (new ListOfIfcAxis2Placement3DSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionPositions"); }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcSectionedSpine"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSectionProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSectionProperties : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSectionProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSectionProperties(SdaiInstance instance) : base(instance) { }
        public IfcSectionProperties() : base(0) { }

        public static implicit operator IfcSectionProperties(SdaiInstance instance) => new IfcSectionProperties(instance);

        /// <summary>
        /// Create new instace of IfcSectionProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcSectionProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSectionProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcSectionTypeEnum? SectionType 
            { 
            get { var str = get_string("SectionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSectionTypeEnum_); return EnumValue<IfcSectionTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSectionTypeEnum>.FromValue(value.Value, EnumNames.IfcSectionTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "SectionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcProfileDef StartProfile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "StartProfile", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "StartProfile", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcProfileDef EndProfile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EndProfile", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EndProfile", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSectionProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSectionReinforcementProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSectionReinforcementProperties : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSectionReinforcementProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSectionReinforcementProperties(SdaiInstance instance) : base(instance) { }
        public IfcSectionReinforcementProperties() : base(0) { }

        public static implicit operator IfcSectionReinforcementProperties(SdaiInstance instance) => new IfcSectionReinforcementProperties(instance);

        /// <summary>
        /// Create new instace of IfcSectionReinforcementProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcSectionReinforcementProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSectionReinforcementProperties"); Debug.Assert(inst != 0); return inst; }

        public double? LongitudinalStartPosition
            {
            get { return get_double("LongitudinalStartPosition", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalStartPosition", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LongitudinalEndPosition
            {
            get { return get_double("LongitudinalEndPosition", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalEndPosition", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransversePosition
            {
            get { return get_double("TransversePosition", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransversePosition", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcReinforcingBarRoleEnum? ReinforcementRole 
            { 
            get { var str = get_string("ReinforcementRole", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingBarRoleEnum_); return EnumValue<IfcReinforcingBarRoleEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingBarRoleEnum>.FromValue(value.Value, EnumNames.IfcReinforcingBarRoleEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ReinforcementRole", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcSectionProperties SectionDefinition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SectionDefinition", ifcengine.sdaiINSTANCE, out inst); return new IfcSectionProperties(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SectionDefinition", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcReinforcementBarProperties CrossSectionReinforcementDefinitions { get { return (new SetOfIfcReinforcementBarPropertiesSerializer()).FromAttr(m_instance, "CrossSectionReinforcementDefinitions"); } }
        public void put_CrossSectionReinforcementDefinitions(IEnumerable<IfcReinforcementBarProperties> lst) { (new SetOfIfcReinforcementBarPropertiesSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionReinforcementDefinitions"); }
        public void put_CrossSectionReinforcementDefinitions_untyped(IEnumerable lst) { (new SetOfIfcReinforcementBarPropertiesSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionReinforcementDefinitions"); }

        protected override TextValue WrapperEntityName() { return "IfcSectionReinforcementProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSensorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSensorType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSensorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSensorType(SdaiInstance instance) : base(instance) { }
        public IfcSensorType() : base(0) { }

        public static implicit operator IfcSensorType(SdaiInstance instance) => new IfcSensorType(instance);

        /// <summary>
        /// Create new instace of IfcSensorType and returns object of this class to interact with
        /// </summary>
        public static new IfcSensorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSensorType"); Debug.Assert(inst != 0); return inst; }

        public IfcSensorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSensorTypeEnum_); return EnumValue<IfcSensorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSensorTypeEnum>.FromValue(value.Value, EnumNames.IfcSensorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSensorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcServiceLife
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcServiceLife : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcServiceLife
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcServiceLife(SdaiInstance instance) : base(instance) { }
        public IfcServiceLife() : base(0) { }

        public static implicit operator IfcServiceLife(SdaiInstance instance) => new IfcServiceLife(instance);

        /// <summary>
        /// Create new instace of IfcServiceLife and returns object of this class to interact with
        /// </summary>
        public static new IfcServiceLife Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcServiceLife"); Debug.Assert(inst != 0); return inst; }

        public IfcServiceLifeTypeEnum? ServiceLifeType 
            { 
            get { var str = get_string("ServiceLifeType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcServiceLifeTypeEnum_); return EnumValue<IfcServiceLifeTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcServiceLifeTypeEnum>.FromValue(value.Value, EnumNames.IfcServiceLifeTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ServiceLifeType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? ServiceLifeDuration
            {
            get { return get_double("ServiceLifeDuration", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ServiceLifeDuration", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcServiceLife"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcServiceLifeFactor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcServiceLifeFactor : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcServiceLifeFactor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcServiceLifeFactor(SdaiInstance instance) : base(instance) { }
        public IfcServiceLifeFactor() : base(0) { }

        public static implicit operator IfcServiceLifeFactor(SdaiInstance instance) => new IfcServiceLifeFactor(instance);

        /// <summary>
        /// Create new instace of IfcServiceLifeFactor and returns object of this class to interact with
        /// </summary>
        public static new IfcServiceLifeFactor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcServiceLifeFactor"); Debug.Assert(inst != 0); return inst; }

        public IfcServiceLifeFactorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcServiceLifeFactorTypeEnum_); return EnumValue<IfcServiceLifeFactorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcServiceLifeFactorTypeEnum>.FromValue(value.Value, EnumNames.IfcServiceLifeFactorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public IfcMeasureValue UpperValue
            {
            get { return new IfcMeasureValue(m_instance, "UpperValue", 0); }
            }

        public IfcMeasureValue MostUsedValue
            {
            get { return new IfcMeasureValue(m_instance, "MostUsedValue", 0); }
            }

        public IfcMeasureValue LowerValue
            {
            get { return new IfcMeasureValue(m_instance, "LowerValue", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcServiceLifeFactor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcShapeAspect
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcShapeAspect : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcShapeAspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcShapeAspect(SdaiInstance instance) : base(instance) { }
        public IfcShapeAspect() : base(0) { }

        public static implicit operator IfcShapeAspect(SdaiInstance instance) => new IfcShapeAspect(instance);

        /// <summary>
        /// Create new instace of IfcShapeAspect and returns object of this class to interact with
        /// </summary>
        public static new IfcShapeAspect Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcShapeAspect"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcShapeModel ShapeRepresentations { get { return (new ListOfIfcShapeModelSerializer()).FromAttr(m_instance, "ShapeRepresentations"); } }
        public void put_ShapeRepresentations(IEnumerable<IfcShapeModel> lst) { (new ListOfIfcShapeModelSerializer()).ToSdaiAggr(lst, m_instance, "ShapeRepresentations"); }
        public void put_ShapeRepresentations_untyped(IEnumerable lst) { (new ListOfIfcShapeModelSerializer()).ToSdaiAggr(lst, m_instance, "ShapeRepresentations"); }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public LOGICAL_VALUE? ProductDefinitional 
            { 
            get { var str = get_string("ProductDefinitional", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "ProductDefinitional", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcProductDefinitionShape PartOfProductDefinitionShape 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PartOfProductDefinitionShape", ifcengine.sdaiINSTANCE, out inst); return new IfcProductDefinitionShape(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PartOfProductDefinitionShape", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcShapeAspect"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcShapeModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcShapeModel : IfcRepresentation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcShapeModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcShapeModel(SdaiInstance instance) : base(instance) { }
        public IfcShapeModel() : base(0) { }

        public static implicit operator IfcShapeModel(SdaiInstance instance) => new IfcShapeModel(instance);

        public SetOfIfcShapeAspect OfShapeAspect { get { return (new SetOfIfcShapeAspectSerializer()).FromAttr(m_instance, "OfShapeAspect"); } }

        protected override TextValue WrapperEntityName() { return "IfcShapeModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcShapeRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcShapeRepresentation : IfcShapeModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcShapeRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcShapeRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcShapeRepresentation() : base(0) { }

        public static implicit operator IfcShapeRepresentation(SdaiInstance instance) => new IfcShapeRepresentation(instance);

        /// <summary>
        /// Create new instace of IfcShapeRepresentation and returns object of this class to interact with
        /// </summary>
        public static new IfcShapeRepresentation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcShapeRepresentation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcShapeRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcShellBasedSurfaceModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcShellBasedSurfaceModel : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcShellBasedSurfaceModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcShellBasedSurfaceModel(SdaiInstance instance) : base(instance) { }
        public IfcShellBasedSurfaceModel() : base(0) { }

        public static implicit operator IfcShellBasedSurfaceModel(SdaiInstance instance) => new IfcShellBasedSurfaceModel(instance);

        /// <summary>
        /// Create new instace of IfcShellBasedSurfaceModel and returns object of this class to interact with
        /// </summary>
        public static new IfcShellBasedSurfaceModel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcShellBasedSurfaceModel"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcShell SbsmBoundary { get { return (new SetOfIfcShellSerializer()).FromAttr(m_instance, "SbsmBoundary"); } }
        public void put_SbsmBoundary(IEnumerable<IfcShell> lst) { (new SetOfIfcShellSerializer()).ToSdaiAggr(lst, m_instance, "SbsmBoundary"); }
        public void put_SbsmBoundary_untyped(IEnumerable lst) { (new SetOfIfcShellSerializer()).ToSdaiAggr(lst, m_instance, "SbsmBoundary"); }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcShellBasedSurfaceModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSite
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSite : IfcSpatialStructureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSite
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSite(SdaiInstance instance) : base(instance) { }
        public IfcSite() : base(0) { }

        public static implicit operator IfcSite(SdaiInstance instance) => new IfcSite(instance);

        /// <summary>
        /// Create new instace of IfcSite and returns object of this class to interact with
        /// </summary>
        public static new IfcSite Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSite"); Debug.Assert(inst != 0); return inst; }

        public IfcCompoundPlaneAngleMeasure RefLatitude { get { return (new IfcCompoundPlaneAngleMeasureSerializer()).FromAttr(m_instance, "RefLatitude"); } }
        public void put_RefLatitude(IEnumerable<IntValue> lst) { (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "RefLatitude"); }
        public void put_RefLatitude_untyped(IEnumerable lst) { (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "RefLatitude"); }
        public IfcCompoundPlaneAngleMeasure RefLongitude { get { return (new IfcCompoundPlaneAngleMeasureSerializer()).FromAttr(m_instance, "RefLongitude"); } }
        public void put_RefLongitude(IEnumerable<IntValue> lst) { (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "RefLongitude"); }
        public void put_RefLongitude_untyped(IEnumerable lst) { (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "RefLongitude"); }
        public double? RefElevation
            {
            get { return get_double("RefElevation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RefElevation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue LandTitleNumber
            {
            get { return get_string("LandTitleNumber", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LandTitleNumber", ifcengine.sdaiSTRING, value); }
            }
        public IfcPostalAddress SiteAddress 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SiteAddress", ifcengine.sdaiINSTANCE, out inst); return new IfcPostalAddress(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SiteAddress", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSite"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSIUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSIUnit : IfcNamedUnit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSIUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSIUnit(SdaiInstance instance) : base(instance) { }
        public IfcSIUnit() : base(0) { }

        public static implicit operator IfcSIUnit(SdaiInstance instance) => new IfcSIUnit(instance);

        /// <summary>
        /// Create new instace of IfcSIUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcSIUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSIUnit"); Debug.Assert(inst != 0); return inst; }

        public IfcSIPrefix? Prefix 
            { 
            get { var str = get_string("Prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSIPrefix_); return EnumValue<IfcSIPrefix>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSIPrefix>.FromValue(value.Value, EnumNames.IfcSIPrefix_); ifcengine.sdaiPutAttrBN(m_instance, "Prefix", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcSIUnitName? Name 
            { 
            get { var str = get_string("Name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSIUnitName_); return EnumValue<IfcSIUnitName>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSIUnitName>.FromValue(value.Value, EnumNames.IfcSIUnitName_); ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSIUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSlab
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSlab : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSlab
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSlab(SdaiInstance instance) : base(instance) { }
        public IfcSlab() : base(0) { }

        public static implicit operator IfcSlab(SdaiInstance instance) => new IfcSlab(instance);

        /// <summary>
        /// Create new instace of IfcSlab and returns object of this class to interact with
        /// </summary>
        public static new IfcSlab Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSlab"); Debug.Assert(inst != 0); return inst; }

        public IfcSlabTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSlabTypeEnum_); return EnumValue<IfcSlabTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSlabTypeEnum>.FromValue(value.Value, EnumNames.IfcSlabTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSlab"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSlabType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSlabType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSlabType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSlabType(SdaiInstance instance) : base(instance) { }
        public IfcSlabType() : base(0) { }

        public static implicit operator IfcSlabType(SdaiInstance instance) => new IfcSlabType(instance);

        /// <summary>
        /// Create new instace of IfcSlabType and returns object of this class to interact with
        /// </summary>
        public static new IfcSlabType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSlabType"); Debug.Assert(inst != 0); return inst; }

        public IfcSlabTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSlabTypeEnum_); return EnumValue<IfcSlabTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSlabTypeEnum>.FromValue(value.Value, EnumNames.IfcSlabTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSlabType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSlippageConnectionCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSlippageConnectionCondition : IfcStructuralConnectionCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSlippageConnectionCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSlippageConnectionCondition(SdaiInstance instance) : base(instance) { }
        public IfcSlippageConnectionCondition() : base(0) { }

        public static implicit operator IfcSlippageConnectionCondition(SdaiInstance instance) => new IfcSlippageConnectionCondition(instance);

        /// <summary>
        /// Create new instace of IfcSlippageConnectionCondition and returns object of this class to interact with
        /// </summary>
        public static new IfcSlippageConnectionCondition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSlippageConnectionCondition"); Debug.Assert(inst != 0); return inst; }

        public double? SlippageX
            {
            get { return get_double("SlippageX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SlippageX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SlippageY
            {
            get { return get_double("SlippageY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SlippageY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SlippageZ
            {
            get { return get_double("SlippageZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SlippageZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSlippageConnectionCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSoundProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSoundProperties : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSoundProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSoundProperties(SdaiInstance instance) : base(instance) { }
        public IfcSoundProperties() : base(0) { }

        public static implicit operator IfcSoundProperties(SdaiInstance instance) => new IfcSoundProperties(instance);

        /// <summary>
        /// Create new instace of IfcSoundProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcSoundProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSoundProperties"); Debug.Assert(inst != 0); return inst; }

        public bool? IsAttenuating
            {
            get { return get_bool("IsAttenuating", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsAttenuating", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IfcSoundScaleEnum? SoundScale 
            { 
            get { var str = get_string("SoundScale", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSoundScaleEnum_); return EnumValue<IfcSoundScaleEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSoundScaleEnum>.FromValue(value.Value, EnumNames.IfcSoundScaleEnum_); ifcengine.sdaiPutAttrBN(m_instance, "SoundScale", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public ListOfIfcSoundValue SoundValues { get { return (new ListOfIfcSoundValueSerializer()).FromAttr(m_instance, "SoundValues"); } }
        public void put_SoundValues(IEnumerable<IfcSoundValue> lst) { (new ListOfIfcSoundValueSerializer()).ToSdaiAggr(lst, m_instance, "SoundValues"); }
        public void put_SoundValues_untyped(IEnumerable lst) { (new ListOfIfcSoundValueSerializer()).ToSdaiAggr(lst, m_instance, "SoundValues"); }

        protected override TextValue WrapperEntityName() { return "IfcSoundProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSoundValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSoundValue : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSoundValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSoundValue(SdaiInstance instance) : base(instance) { }
        public IfcSoundValue() : base(0) { }

        public static implicit operator IfcSoundValue(SdaiInstance instance) => new IfcSoundValue(instance);

        /// <summary>
        /// Create new instace of IfcSoundValue and returns object of this class to interact with
        /// </summary>
        public static new IfcSoundValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSoundValue"); Debug.Assert(inst != 0); return inst; }

        public IfcTimeSeries SoundLevelTimeSeries 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SoundLevelTimeSeries", ifcengine.sdaiINSTANCE, out inst); return new IfcTimeSeries(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SoundLevelTimeSeries", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Frequency
            {
            get { return get_double("Frequency", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Frequency", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        public IfcDerivedMeasureValue SoundLevelSingleValue
            {
            get { return new IfcDerivedMeasureValue(m_instance, "SoundLevelSingleValue", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSoundValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpace
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpace : IfcSpatialStructureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpace(SdaiInstance instance) : base(instance) { }
        public IfcSpace() : base(0) { }

        public static implicit operator IfcSpace(SdaiInstance instance) => new IfcSpace(instance);

        /// <summary>
        /// Create new instace of IfcSpace and returns object of this class to interact with
        /// </summary>
        public static new IfcSpace Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSpace"); Debug.Assert(inst != 0); return inst; }

        public IfcInternalOrExternalEnum? InteriorOrExteriorSpace 
            { 
            get { var str = get_string("InteriorOrExteriorSpace", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcInternalOrExternalEnum_); return EnumValue<IfcInternalOrExternalEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcInternalOrExternalEnum>.FromValue(value.Value, EnumNames.IfcInternalOrExternalEnum_); ifcengine.sdaiPutAttrBN(m_instance, "InteriorOrExteriorSpace", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? ElevationWithFlooring
            {
            get { return get_double("ElevationWithFlooring", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ElevationWithFlooring", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public SetOfIfcRelCoversSpaces HasCoverings { get { return (new SetOfIfcRelCoversSpacesSerializer()).FromAttr(m_instance, "HasCoverings"); } }
        public SetOfIfcRelSpaceBoundary BoundedBy { get { return (new SetOfIfcRelSpaceBoundarySerializer()).FromAttr(m_instance, "BoundedBy"); } }

        protected override TextValue WrapperEntityName() { return "IfcSpace"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpaceHeaterType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpaceHeaterType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpaceHeaterType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpaceHeaterType(SdaiInstance instance) : base(instance) { }
        public IfcSpaceHeaterType() : base(0) { }

        public static implicit operator IfcSpaceHeaterType(SdaiInstance instance) => new IfcSpaceHeaterType(instance);

        /// <summary>
        /// Create new instace of IfcSpaceHeaterType and returns object of this class to interact with
        /// </summary>
        public static new IfcSpaceHeaterType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSpaceHeaterType"); Debug.Assert(inst != 0); return inst; }

        public IfcSpaceHeaterTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSpaceHeaterTypeEnum_); return EnumValue<IfcSpaceHeaterTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSpaceHeaterTypeEnum>.FromValue(value.Value, EnumNames.IfcSpaceHeaterTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSpaceHeaterType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpaceProgram
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpaceProgram : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpaceProgram
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpaceProgram(SdaiInstance instance) : base(instance) { }
        public IfcSpaceProgram() : base(0) { }

        public static implicit operator IfcSpaceProgram(SdaiInstance instance) => new IfcSpaceProgram(instance);

        /// <summary>
        /// Create new instace of IfcSpaceProgram and returns object of this class to interact with
        /// </summary>
        public static new IfcSpaceProgram Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSpaceProgram"); Debug.Assert(inst != 0); return inst; }

        public TextValue SpaceProgramIdentifier
            {
            get { return get_string("SpaceProgramIdentifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "SpaceProgramIdentifier", ifcengine.sdaiSTRING, value); }
            }
        public double? MaxRequiredArea
            {
            get { return get_double("MaxRequiredArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MaxRequiredArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MinRequiredArea
            {
            get { return get_double("MinRequiredArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MinRequiredArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcSpatialStructureElement RequestedLocation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RequestedLocation", ifcengine.sdaiINSTANCE, out inst); return new IfcSpatialStructureElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RequestedLocation", ifcengine.sdaiINSTANCE, i); }
            }
        public double? StandardRequiredArea
            {
            get { return get_double("StandardRequiredArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StandardRequiredArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public SetOfIfcRelInteractionRequirements HasInteractionReqsFrom { get { return (new SetOfIfcRelInteractionRequirementsSerializer()).FromAttr(m_instance, "HasInteractionReqsFrom"); } }
        public SetOfIfcRelInteractionRequirements HasInteractionReqsTo { get { return (new SetOfIfcRelInteractionRequirementsSerializer()).FromAttr(m_instance, "HasInteractionReqsTo"); } }

        protected override TextValue WrapperEntityName() { return "IfcSpaceProgram"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpaceThermalLoadProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpaceThermalLoadProperties : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpaceThermalLoadProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpaceThermalLoadProperties(SdaiInstance instance) : base(instance) { }
        public IfcSpaceThermalLoadProperties() : base(0) { }

        public static implicit operator IfcSpaceThermalLoadProperties(SdaiInstance instance) => new IfcSpaceThermalLoadProperties(instance);

        /// <summary>
        /// Create new instace of IfcSpaceThermalLoadProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcSpaceThermalLoadProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSpaceThermalLoadProperties"); Debug.Assert(inst != 0); return inst; }

        public double? ApplicableValueRatio
            {
            get { return get_double("ApplicableValueRatio", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ApplicableValueRatio", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcThermalLoadSourceEnum? ThermalLoadSource 
            { 
            get { var str = get_string("ThermalLoadSource", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcThermalLoadSourceEnum_); return EnumValue<IfcThermalLoadSourceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcThermalLoadSourceEnum>.FromValue(value.Value, EnumNames.IfcThermalLoadSourceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ThermalLoadSource", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcPropertySourceEnum? PropertySource 
            { 
            get { var str = get_string("PropertySource", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPropertySourceEnum_); return EnumValue<IfcPropertySourceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPropertySourceEnum>.FromValue(value.Value, EnumNames.IfcPropertySourceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PropertySource", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue SourceDescription
            {
            get { return get_string("SourceDescription", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "SourceDescription", ifcengine.sdaiSTRING, value); }
            }
        public double? MaximumValue
            {
            get { return get_double("MaximumValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MaximumValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MinimumValue
            {
            get { return get_double("MinimumValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MinimumValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcTimeSeries ThermalLoadTimeSeriesValues 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ThermalLoadTimeSeriesValues", ifcengine.sdaiINSTANCE, out inst); return new IfcTimeSeries(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ThermalLoadTimeSeriesValues", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue UserDefinedThermalLoadSource
            {
            get { return get_string("UserDefinedThermalLoadSource", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedThermalLoadSource", ifcengine.sdaiSTRING, value); }
            }
        public TextValue UserDefinedPropertySource
            {
            get { return get_string("UserDefinedPropertySource", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedPropertySource", ifcengine.sdaiSTRING, value); }
            }
        public IfcThermalLoadTypeEnum? ThermalLoadType 
            { 
            get { var str = get_string("ThermalLoadType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcThermalLoadTypeEnum_); return EnumValue<IfcThermalLoadTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcThermalLoadTypeEnum>.FromValue(value.Value, EnumNames.IfcThermalLoadTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ThermalLoadType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSpaceThermalLoadProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpatialStructureElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpatialStructureElementType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpatialStructureElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpatialStructureElementType(SdaiInstance instance) : base(instance) { }
        public IfcSpatialStructureElementType() : base(0) { }

        public static implicit operator IfcSpatialStructureElementType(SdaiInstance instance) => new IfcSpatialStructureElementType(instance);


        protected override TextValue WrapperEntityName() { return "IfcSpatialStructureElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpaceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpaceType : IfcSpatialStructureElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpaceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpaceType(SdaiInstance instance) : base(instance) { }
        public IfcSpaceType() : base(0) { }

        public static implicit operator IfcSpaceType(SdaiInstance instance) => new IfcSpaceType(instance);

        /// <summary>
        /// Create new instace of IfcSpaceType and returns object of this class to interact with
        /// </summary>
        public static new IfcSpaceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSpaceType"); Debug.Assert(inst != 0); return inst; }

        public IfcSpaceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSpaceTypeEnum_); return EnumValue<IfcSpaceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSpaceTypeEnum>.FromValue(value.Value, EnumNames.IfcSpaceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSpaceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSphere
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSphere : IfcCsgPrimitive3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSphere
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSphere(SdaiInstance instance) : base(instance) { }
        public IfcSphere() : base(0) { }

        public static implicit operator IfcSphere(SdaiInstance instance) => new IfcSphere(instance);

        /// <summary>
        /// Create new instace of IfcSphere and returns object of this class to interact with
        /// </summary>
        public static new IfcSphere Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSphere"); Debug.Assert(inst != 0); return inst; }

        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSphere"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStackTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStackTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStackTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStackTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcStackTerminalType() : base(0) { }

        public static implicit operator IfcStackTerminalType(SdaiInstance instance) => new IfcStackTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcStackTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcStackTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStackTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcStackTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStackTerminalTypeEnum_); return EnumValue<IfcStackTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStackTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcStackTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStackTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStair : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStair(SdaiInstance instance) : base(instance) { }
        public IfcStair() : base(0) { }

        public static implicit operator IfcStair(SdaiInstance instance) => new IfcStair(instance);

        /// <summary>
        /// Create new instace of IfcStair and returns object of this class to interact with
        /// </summary>
        public static new IfcStair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStair"); Debug.Assert(inst != 0); return inst; }

        public IfcStairTypeEnum? ShapeType 
            { 
            get { var str = get_string("ShapeType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStairTypeEnum_); return EnumValue<IfcStairTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStairTypeEnum>.FromValue(value.Value, EnumNames.IfcStairTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ShapeType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStairFlight
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStairFlight : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStairFlight
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStairFlight(SdaiInstance instance) : base(instance) { }
        public IfcStairFlight() : base(0) { }

        public static implicit operator IfcStairFlight(SdaiInstance instance) => new IfcStairFlight(instance);

        /// <summary>
        /// Create new instace of IfcStairFlight and returns object of this class to interact with
        /// </summary>
        public static new IfcStairFlight Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStairFlight"); Debug.Assert(inst != 0); return inst; }

        public IntValue? NumberOfRiser
            {
            get { return get_IntValue("NumberOfRiser", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NumberOfRiser", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? NumberOfTreads
            {
            get { return get_IntValue("NumberOfTreads", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NumberOfTreads", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public double? RiserHeight
            {
            get { return get_double("RiserHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RiserHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TreadLength
            {
            get { return get_double("TreadLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TreadLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStairFlight"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStairFlightType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStairFlightType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStairFlightType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStairFlightType(SdaiInstance instance) : base(instance) { }
        public IfcStairFlightType() : base(0) { }

        public static implicit operator IfcStairFlightType(SdaiInstance instance) => new IfcStairFlightType(instance);

        /// <summary>
        /// Create new instace of IfcStairFlightType and returns object of this class to interact with
        /// </summary>
        public static new IfcStairFlightType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStairFlightType"); Debug.Assert(inst != 0); return inst; }

        public IfcStairFlightTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStairFlightTypeEnum_); return EnumValue<IfcStairFlightTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStairFlightTypeEnum>.FromValue(value.Value, EnumNames.IfcStairFlightTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStairFlightType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralActivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralActivity : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralActivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralActivity(SdaiInstance instance) : base(instance) { }
        public IfcStructuralActivity() : base(0) { }

        public static implicit operator IfcStructuralActivity(SdaiInstance instance) => new IfcStructuralActivity(instance);

        public IfcStructuralLoad AppliedLoad 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AppliedLoad", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralLoad(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AppliedLoad", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcGlobalOrLocalEnum? GlobalOrLocal 
            { 
            get { var str = get_string("GlobalOrLocal", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcGlobalOrLocalEnum_); return EnumValue<IfcGlobalOrLocalEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcGlobalOrLocalEnum>.FromValue(value.Value, EnumNames.IfcGlobalOrLocalEnum_); ifcengine.sdaiPutAttrBN(m_instance, "GlobalOrLocal", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcRelConnectsStructuralActivity AssignedToStructuralItem { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AssignedToStructuralItem", ifcengine.sdaiINSTANCE, out inst); return new IfcRelConnectsStructuralActivity(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcStructuralActivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralAction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralAction : IfcStructuralActivity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralAction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralAction() : base(0) { }

        public static implicit operator IfcStructuralAction(SdaiInstance instance) => new IfcStructuralAction(instance);

        public bool? DestabilizingLoad
            {
            get { return get_bool("DestabilizingLoad", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DestabilizingLoad", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IfcStructuralReaction CausedBy 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "CausedBy", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralReaction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "CausedBy", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralAction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralAnalysisModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralAnalysisModel : IfcSystem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralAnalysisModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralAnalysisModel(SdaiInstance instance) : base(instance) { }
        public IfcStructuralAnalysisModel() : base(0) { }

        public static implicit operator IfcStructuralAnalysisModel(SdaiInstance instance) => new IfcStructuralAnalysisModel(instance);

        /// <summary>
        /// Create new instace of IfcStructuralAnalysisModel and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralAnalysisModel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralAnalysisModel"); Debug.Assert(inst != 0); return inst; }

        public IfcAnalysisModelTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAnalysisModelTypeEnum_); return EnumValue<IfcAnalysisModelTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAnalysisModelTypeEnum>.FromValue(value.Value, EnumNames.IfcAnalysisModelTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcAxis2Placement3D OrientationOf2DPlane 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OrientationOf2DPlane", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OrientationOf2DPlane", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcStructuralLoadGroup LoadedBy { get { return (new SetOfIfcStructuralLoadGroupSerializer()).FromAttr(m_instance, "LoadedBy"); } }
        public void put_LoadedBy(IEnumerable<IfcStructuralLoadGroup> lst) { (new SetOfIfcStructuralLoadGroupSerializer()).ToSdaiAggr(lst, m_instance, "LoadedBy"); }
        public void put_LoadedBy_untyped(IEnumerable lst) { (new SetOfIfcStructuralLoadGroupSerializer()).ToSdaiAggr(lst, m_instance, "LoadedBy"); }
        public SetOfIfcStructuralResultGroup HasResults { get { return (new SetOfIfcStructuralResultGroupSerializer()).FromAttr(m_instance, "HasResults"); } }
        public void put_HasResults(IEnumerable<IfcStructuralResultGroup> lst) { (new SetOfIfcStructuralResultGroupSerializer()).ToSdaiAggr(lst, m_instance, "HasResults"); }
        public void put_HasResults_untyped(IEnumerable lst) { (new SetOfIfcStructuralResultGroupSerializer()).ToSdaiAggr(lst, m_instance, "HasResults"); }

        protected override TextValue WrapperEntityName() { return "IfcStructuralAnalysisModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralItem : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralItem(SdaiInstance instance) : base(instance) { }
        public IfcStructuralItem() : base(0) { }

        public static implicit operator IfcStructuralItem(SdaiInstance instance) => new IfcStructuralItem(instance);

        public SetOfIfcRelConnectsStructuralActivity AssignedStructuralActivity { get { return (new SetOfIfcRelConnectsStructuralActivitySerializer()).FromAttr(m_instance, "AssignedStructuralActivity"); } }

        protected override TextValue WrapperEntityName() { return "IfcStructuralItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralConnection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralConnection : IfcStructuralItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralConnection(SdaiInstance instance) : base(instance) { }
        public IfcStructuralConnection() : base(0) { }

        public static implicit operator IfcStructuralConnection(SdaiInstance instance) => new IfcStructuralConnection(instance);

        public IfcBoundaryCondition AppliedCondition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AppliedCondition", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundaryCondition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AppliedCondition", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcRelConnectsStructuralMember ConnectsStructuralMembers { get { return (new SetOfIfcRelConnectsStructuralMemberSerializer()).FromAttr(m_instance, "ConnectsStructuralMembers"); } }

        protected override TextValue WrapperEntityName() { return "IfcStructuralConnection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralCurveConnection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralCurveConnection : IfcStructuralConnection
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralCurveConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralCurveConnection(SdaiInstance instance) : base(instance) { }
        public IfcStructuralCurveConnection() : base(0) { }

        public static implicit operator IfcStructuralCurveConnection(SdaiInstance instance) => new IfcStructuralCurveConnection(instance);

        /// <summary>
        /// Create new instace of IfcStructuralCurveConnection and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralCurveConnection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralCurveConnection"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcStructuralCurveConnection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralMember
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralMember : IfcStructuralItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralMember(SdaiInstance instance) : base(instance) { }
        public IfcStructuralMember() : base(0) { }

        public static implicit operator IfcStructuralMember(SdaiInstance instance) => new IfcStructuralMember(instance);

        public SetOfIfcRelConnectsStructuralElement ReferencesElement { get { return (new SetOfIfcRelConnectsStructuralElementSerializer()).FromAttr(m_instance, "ReferencesElement"); } }
        public SetOfIfcRelConnectsStructuralMember ConnectedBy { get { return (new SetOfIfcRelConnectsStructuralMemberSerializer()).FromAttr(m_instance, "ConnectedBy"); } }

        protected override TextValue WrapperEntityName() { return "IfcStructuralMember"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralCurveMember
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralCurveMember : IfcStructuralMember
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralCurveMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralCurveMember(SdaiInstance instance) : base(instance) { }
        public IfcStructuralCurveMember() : base(0) { }

        public static implicit operator IfcStructuralCurveMember(SdaiInstance instance) => new IfcStructuralCurveMember(instance);

        /// <summary>
        /// Create new instace of IfcStructuralCurveMember and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralCurveMember Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralCurveMember"); Debug.Assert(inst != 0); return inst; }

        public IfcStructuralCurveTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStructuralCurveTypeEnum_); return EnumValue<IfcStructuralCurveTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStructuralCurveTypeEnum>.FromValue(value.Value, EnumNames.IfcStructuralCurveTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralCurveMember"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralCurveMemberVarying
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralCurveMemberVarying : IfcStructuralCurveMember
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralCurveMemberVarying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralCurveMemberVarying(SdaiInstance instance) : base(instance) { }
        public IfcStructuralCurveMemberVarying() : base(0) { }

        public static implicit operator IfcStructuralCurveMemberVarying(SdaiInstance instance) => new IfcStructuralCurveMemberVarying(instance);

        /// <summary>
        /// Create new instace of IfcStructuralCurveMemberVarying and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralCurveMemberVarying Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralCurveMemberVarying"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcStructuralCurveMemberVarying"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLinearAction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLinearAction : IfcStructuralAction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLinearAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLinearAction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLinearAction() : base(0) { }

        public static implicit operator IfcStructuralLinearAction(SdaiInstance instance) => new IfcStructuralLinearAction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLinearAction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLinearAction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLinearAction"); Debug.Assert(inst != 0); return inst; }

        public IfcProjectedOrTrueLengthEnum? ProjectedOrTrue 
            { 
            get { var str = get_string("ProjectedOrTrue", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProjectedOrTrueLengthEnum_); return EnumValue<IfcProjectedOrTrueLengthEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProjectedOrTrueLengthEnum>.FromValue(value.Value, EnumNames.IfcProjectedOrTrueLengthEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ProjectedOrTrue", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralLinearAction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLinearActionVarying
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLinearActionVarying : IfcStructuralLinearAction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLinearActionVarying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLinearActionVarying(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLinearActionVarying() : base(0) { }

        public static implicit operator IfcStructuralLinearActionVarying(SdaiInstance instance) => new IfcStructuralLinearActionVarying(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLinearActionVarying and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLinearActionVarying Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLinearActionVarying"); Debug.Assert(inst != 0); return inst; }

        public IfcShapeAspect VaryingAppliedLoadLocation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "VaryingAppliedLoadLocation", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "VaryingAppliedLoadLocation", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcStructuralLoad SubsequentAppliedLoads { get { return (new ListOfIfcStructuralLoadSerializer()).FromAttr(m_instance, "SubsequentAppliedLoads"); } }
        public void put_SubsequentAppliedLoads(IEnumerable<IfcStructuralLoad> lst) { (new ListOfIfcStructuralLoadSerializer()).ToSdaiAggr(lst, m_instance, "SubsequentAppliedLoads"); }
        public void put_SubsequentAppliedLoads_untyped(IEnumerable lst) { (new ListOfIfcStructuralLoadSerializer()).ToSdaiAggr(lst, m_instance, "SubsequentAppliedLoads"); }
        public ListOfIfcStructuralLoad VaryingAppliedLoads { get { return (new ListOfIfcStructuralLoadSerializer()).FromAttr(m_instance, "VaryingAppliedLoads"); } }

        protected override TextValue WrapperEntityName() { return "IfcStructuralLinearActionVarying"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoad
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoad : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoad
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoad(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoad() : base(0) { }

        public static implicit operator IfcStructuralLoad(SdaiInstance instance) => new IfcStructuralLoad(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralLoad"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadGroup
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadGroup : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadGroup(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadGroup() : base(0) { }

        public static implicit operator IfcStructuralLoadGroup(SdaiInstance instance) => new IfcStructuralLoadGroup(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadGroup and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadGroup Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadGroup"); Debug.Assert(inst != 0); return inst; }

        public IfcLoadGroupTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLoadGroupTypeEnum_); return EnumValue<IfcLoadGroupTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLoadGroupTypeEnum>.FromValue(value.Value, EnumNames.IfcLoadGroupTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcActionTypeEnum? ActionType 
            { 
            get { var str = get_string("ActionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcActionTypeEnum_); return EnumValue<IfcActionTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcActionTypeEnum>.FromValue(value.Value, EnumNames.IfcActionTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ActionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcActionSourceTypeEnum? ActionSource 
            { 
            get { var str = get_string("ActionSource", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcActionSourceTypeEnum_); return EnumValue<IfcActionSourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcActionSourceTypeEnum>.FromValue(value.Value, EnumNames.IfcActionSourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ActionSource", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? Coefficient
            {
            get { return get_double("Coefficient", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Coefficient", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue Purpose
            {
            get { return get_string("Purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Purpose", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcStructuralResultGroup SourceOfResultGroup { get { return (new SetOfIfcStructuralResultGroupSerializer()).FromAttr(m_instance, "SourceOfResultGroup"); } }
        public SetOfIfcStructuralAnalysisModel LoadGroupFor { get { return (new SetOfIfcStructuralAnalysisModelSerializer()).FromAttr(m_instance, "LoadGroupFor"); } }

        protected override TextValue WrapperEntityName() { return "IfcStructuralLoadGroup"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadStatic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadStatic : IfcStructuralLoad
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadStatic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadStatic(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadStatic() : base(0) { }

        public static implicit operator IfcStructuralLoadStatic(SdaiInstance instance) => new IfcStructuralLoadStatic(instance);


        protected override TextValue WrapperEntityName() { return "IfcStructuralLoadStatic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadLinearForce
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadLinearForce : IfcStructuralLoadStatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadLinearForce
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadLinearForce(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadLinearForce() : base(0) { }

        public static implicit operator IfcStructuralLoadLinearForce(SdaiInstance instance) => new IfcStructuralLoadLinearForce(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadLinearForce and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadLinearForce Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadLinearForce"); Debug.Assert(inst != 0); return inst; }

        public double? LinearForceX
            {
            get { return get_double("LinearForceX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearForceX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearForceY
            {
            get { return get_double("LinearForceY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearForceY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearForceZ
            {
            get { return get_double("LinearForceZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearForceZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearMomentX
            {
            get { return get_double("LinearMomentX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearMomentX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearMomentY
            {
            get { return get_double("LinearMomentY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearMomentY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearMomentZ
            {
            get { return get_double("LinearMomentZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearMomentZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralLoadLinearForce"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadPlanarForce
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadPlanarForce : IfcStructuralLoadStatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadPlanarForce
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadPlanarForce(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadPlanarForce() : base(0) { }

        public static implicit operator IfcStructuralLoadPlanarForce(SdaiInstance instance) => new IfcStructuralLoadPlanarForce(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadPlanarForce and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadPlanarForce Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadPlanarForce"); Debug.Assert(inst != 0); return inst; }

        public double? PlanarForceX
            {
            get { return get_double("PlanarForceX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PlanarForceX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PlanarForceY
            {
            get { return get_double("PlanarForceY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PlanarForceY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PlanarForceZ
            {
            get { return get_double("PlanarForceZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PlanarForceZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralLoadPlanarForce"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleDisplacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadSingleDisplacement : IfcStructuralLoadStatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadSingleDisplacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadSingleDisplacement(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadSingleDisplacement() : base(0) { }

        public static implicit operator IfcStructuralLoadSingleDisplacement(SdaiInstance instance) => new IfcStructuralLoadSingleDisplacement(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadSingleDisplacement and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadSingleDisplacement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleDisplacement"); Debug.Assert(inst != 0); return inst; }

        public double? DisplacementX
            {
            get { return get_double("DisplacementX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DisplacementX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DisplacementY
            {
            get { return get_double("DisplacementY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DisplacementY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DisplacementZ
            {
            get { return get_double("DisplacementZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DisplacementZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalDisplacementRX
            {
            get { return get_double("RotationalDisplacementRX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalDisplacementRX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalDisplacementRY
            {
            get { return get_double("RotationalDisplacementRY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalDisplacementRY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalDisplacementRZ
            {
            get { return get_double("RotationalDisplacementRZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalDisplacementRZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralLoadSingleDisplacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleDisplacementDistortion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadSingleDisplacementDistortion : IfcStructuralLoadSingleDisplacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadSingleDisplacementDistortion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadSingleDisplacementDistortion(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadSingleDisplacementDistortion() : base(0) { }

        public static implicit operator IfcStructuralLoadSingleDisplacementDistortion(SdaiInstance instance) => new IfcStructuralLoadSingleDisplacementDistortion(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadSingleDisplacementDistortion and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadSingleDisplacementDistortion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleDisplacementDistortion"); Debug.Assert(inst != 0); return inst; }

        public double? Distortion
            {
            get { return get_double("Distortion", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Distortion", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralLoadSingleDisplacementDistortion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleForce
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadSingleForce : IfcStructuralLoadStatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadSingleForce
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadSingleForce(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadSingleForce() : base(0) { }

        public static implicit operator IfcStructuralLoadSingleForce(SdaiInstance instance) => new IfcStructuralLoadSingleForce(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadSingleForce and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadSingleForce Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleForce"); Debug.Assert(inst != 0); return inst; }

        public double? ForceX
            {
            get { return get_double("ForceX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ForceX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ForceY
            {
            get { return get_double("ForceY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ForceY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ForceZ
            {
            get { return get_double("ForceZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ForceZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MomentX
            {
            get { return get_double("MomentX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MomentX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MomentY
            {
            get { return get_double("MomentY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MomentY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MomentZ
            {
            get { return get_double("MomentZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MomentZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralLoadSingleForce"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleForceWarping
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadSingleForceWarping : IfcStructuralLoadSingleForce
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadSingleForceWarping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadSingleForceWarping(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadSingleForceWarping() : base(0) { }

        public static implicit operator IfcStructuralLoadSingleForceWarping(SdaiInstance instance) => new IfcStructuralLoadSingleForceWarping(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadSingleForceWarping and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadSingleForceWarping Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleForceWarping"); Debug.Assert(inst != 0); return inst; }

        public double? WarpingMoment
            {
            get { return get_double("WarpingMoment", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WarpingMoment", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralLoadSingleForceWarping"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadTemperature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadTemperature : IfcStructuralLoadStatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadTemperature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadTemperature(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadTemperature() : base(0) { }

        public static implicit operator IfcStructuralLoadTemperature(SdaiInstance instance) => new IfcStructuralLoadTemperature(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadTemperature and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadTemperature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadTemperature"); Debug.Assert(inst != 0); return inst; }

        public double? DeltaT_Constant
            {
            get { return get_double("DeltaT_Constant", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DeltaT_Constant", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DeltaT_Y
            {
            get { return get_double("DeltaT_Y", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DeltaT_Y", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DeltaT_Z
            {
            get { return get_double("DeltaT_Z", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DeltaT_Z", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralLoadTemperature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralPlanarAction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralPlanarAction : IfcStructuralAction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralPlanarAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralPlanarAction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralPlanarAction() : base(0) { }

        public static implicit operator IfcStructuralPlanarAction(SdaiInstance instance) => new IfcStructuralPlanarAction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralPlanarAction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralPlanarAction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralPlanarAction"); Debug.Assert(inst != 0); return inst; }

        public IfcProjectedOrTrueLengthEnum? ProjectedOrTrue 
            { 
            get { var str = get_string("ProjectedOrTrue", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProjectedOrTrueLengthEnum_); return EnumValue<IfcProjectedOrTrueLengthEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProjectedOrTrueLengthEnum>.FromValue(value.Value, EnumNames.IfcProjectedOrTrueLengthEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ProjectedOrTrue", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralPlanarAction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralPlanarActionVarying
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralPlanarActionVarying : IfcStructuralPlanarAction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralPlanarActionVarying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralPlanarActionVarying(SdaiInstance instance) : base(instance) { }
        public IfcStructuralPlanarActionVarying() : base(0) { }

        public static implicit operator IfcStructuralPlanarActionVarying(SdaiInstance instance) => new IfcStructuralPlanarActionVarying(instance);

        /// <summary>
        /// Create new instace of IfcStructuralPlanarActionVarying and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralPlanarActionVarying Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralPlanarActionVarying"); Debug.Assert(inst != 0); return inst; }

        public IfcShapeAspect VaryingAppliedLoadLocation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "VaryingAppliedLoadLocation", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "VaryingAppliedLoadLocation", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcStructuralLoad SubsequentAppliedLoads { get { return (new ListOfIfcStructuralLoadSerializer()).FromAttr(m_instance, "SubsequentAppliedLoads"); } }
        public void put_SubsequentAppliedLoads(IEnumerable<IfcStructuralLoad> lst) { (new ListOfIfcStructuralLoadSerializer()).ToSdaiAggr(lst, m_instance, "SubsequentAppliedLoads"); }
        public void put_SubsequentAppliedLoads_untyped(IEnumerable lst) { (new ListOfIfcStructuralLoadSerializer()).ToSdaiAggr(lst, m_instance, "SubsequentAppliedLoads"); }
        public ListOfIfcStructuralLoad VaryingAppliedLoads { get { return (new ListOfIfcStructuralLoadSerializer()).FromAttr(m_instance, "VaryingAppliedLoads"); } }

        protected override TextValue WrapperEntityName() { return "IfcStructuralPlanarActionVarying"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralPointAction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralPointAction : IfcStructuralAction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralPointAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralPointAction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralPointAction() : base(0) { }

        public static implicit operator IfcStructuralPointAction(SdaiInstance instance) => new IfcStructuralPointAction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralPointAction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralPointAction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralPointAction"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcStructuralPointAction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralPointConnection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralPointConnection : IfcStructuralConnection
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralPointConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralPointConnection(SdaiInstance instance) : base(instance) { }
        public IfcStructuralPointConnection() : base(0) { }

        public static implicit operator IfcStructuralPointConnection(SdaiInstance instance) => new IfcStructuralPointConnection(instance);

        /// <summary>
        /// Create new instace of IfcStructuralPointConnection and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralPointConnection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralPointConnection"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcStructuralPointConnection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralReaction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralReaction : IfcStructuralActivity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralReaction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralReaction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralReaction() : base(0) { }

        public static implicit operator IfcStructuralReaction(SdaiInstance instance) => new IfcStructuralReaction(instance);

        public SetOfIfcStructuralAction Causes { get { return (new SetOfIfcStructuralActionSerializer()).FromAttr(m_instance, "Causes"); } }

        protected override TextValue WrapperEntityName() { return "IfcStructuralReaction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralPointReaction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralPointReaction : IfcStructuralReaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralPointReaction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralPointReaction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralPointReaction() : base(0) { }

        public static implicit operator IfcStructuralPointReaction(SdaiInstance instance) => new IfcStructuralPointReaction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralPointReaction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralPointReaction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralPointReaction"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcStructuralPointReaction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralProfileProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralProfileProperties : IfcGeneralProfileProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralProfileProperties(SdaiInstance instance) : base(instance) { }
        public IfcStructuralProfileProperties() : base(0) { }

        public static implicit operator IfcStructuralProfileProperties(SdaiInstance instance) => new IfcStructuralProfileProperties(instance);

        /// <summary>
        /// Create new instace of IfcStructuralProfileProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralProfileProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralProfileProperties"); Debug.Assert(inst != 0); return inst; }

        public double? TorsionalConstantX
            {
            get { return get_double("TorsionalConstantX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TorsionalConstantX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MomentOfInertiaYZ
            {
            get { return get_double("MomentOfInertiaYZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MomentOfInertiaYZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MomentOfInertiaY
            {
            get { return get_double("MomentOfInertiaY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MomentOfInertiaY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MomentOfInertiaZ
            {
            get { return get_double("MomentOfInertiaZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MomentOfInertiaZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WarpingConstant
            {
            get { return get_double("WarpingConstant", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WarpingConstant", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ShearCentreZ
            {
            get { return get_double("ShearCentreZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ShearCentreZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ShearCentreY
            {
            get { return get_double("ShearCentreY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ShearCentreY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ShearDeformationAreaZ
            {
            get { return get_double("ShearDeformationAreaZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ShearDeformationAreaZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ShearDeformationAreaY
            {
            get { return get_double("ShearDeformationAreaY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ShearDeformationAreaY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MaximumSectionModulusY
            {
            get { return get_double("MaximumSectionModulusY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MaximumSectionModulusY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MinimumSectionModulusY
            {
            get { return get_double("MinimumSectionModulusY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MinimumSectionModulusY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MaximumSectionModulusZ
            {
            get { return get_double("MaximumSectionModulusZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MaximumSectionModulusZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MinimumSectionModulusZ
            {
            get { return get_double("MinimumSectionModulusZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MinimumSectionModulusZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TorsionalSectionModulus
            {
            get { return get_double("TorsionalSectionModulus", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TorsionalSectionModulus", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CentreOfGravityInX
            {
            get { return get_double("CentreOfGravityInX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CentreOfGravityInX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CentreOfGravityInY
            {
            get { return get_double("CentreOfGravityInY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CentreOfGravityInY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralProfileProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralResultGroup
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralResultGroup : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralResultGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralResultGroup(SdaiInstance instance) : base(instance) { }
        public IfcStructuralResultGroup() : base(0) { }

        public static implicit operator IfcStructuralResultGroup(SdaiInstance instance) => new IfcStructuralResultGroup(instance);

        /// <summary>
        /// Create new instace of IfcStructuralResultGroup and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralResultGroup Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralResultGroup"); Debug.Assert(inst != 0); return inst; }

        public IfcAnalysisTheoryTypeEnum? TheoryType 
            { 
            get { var str = get_string("TheoryType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAnalysisTheoryTypeEnum_); return EnumValue<IfcAnalysisTheoryTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAnalysisTheoryTypeEnum>.FromValue(value.Value, EnumNames.IfcAnalysisTheoryTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "TheoryType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcStructuralLoadGroup ResultForLoadGroup 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ResultForLoadGroup", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralLoadGroup(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ResultForLoadGroup", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? IsLinear
            {
            get { return get_bool("IsLinear", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsLinear", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public SetOfIfcStructuralAnalysisModel ResultGroupFor { get { return (new SetOfIfcStructuralAnalysisModelSerializer()).FromAttr(m_instance, "ResultGroupFor"); } }

        protected override TextValue WrapperEntityName() { return "IfcStructuralResultGroup"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralSteelProfileProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralSteelProfileProperties : IfcStructuralProfileProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralSteelProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralSteelProfileProperties(SdaiInstance instance) : base(instance) { }
        public IfcStructuralSteelProfileProperties() : base(0) { }

        public static implicit operator IfcStructuralSteelProfileProperties(SdaiInstance instance) => new IfcStructuralSteelProfileProperties(instance);

        /// <summary>
        /// Create new instace of IfcStructuralSteelProfileProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralSteelProfileProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralSteelProfileProperties"); Debug.Assert(inst != 0); return inst; }

        public double? ShearAreaZ
            {
            get { return get_double("ShearAreaZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ShearAreaZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ShearAreaY
            {
            get { return get_double("ShearAreaY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ShearAreaY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PlasticShapeFactorY
            {
            get { return get_double("PlasticShapeFactorY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PlasticShapeFactorY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PlasticShapeFactorZ
            {
            get { return get_double("PlasticShapeFactorZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PlasticShapeFactorZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralSteelProfileProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralSurfaceConnection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralSurfaceConnection : IfcStructuralConnection
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralSurfaceConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralSurfaceConnection(SdaiInstance instance) : base(instance) { }
        public IfcStructuralSurfaceConnection() : base(0) { }

        public static implicit operator IfcStructuralSurfaceConnection(SdaiInstance instance) => new IfcStructuralSurfaceConnection(instance);

        /// <summary>
        /// Create new instace of IfcStructuralSurfaceConnection and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralSurfaceConnection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralSurfaceConnection"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcStructuralSurfaceConnection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralSurfaceMember
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralSurfaceMember : IfcStructuralMember
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralSurfaceMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralSurfaceMember(SdaiInstance instance) : base(instance) { }
        public IfcStructuralSurfaceMember() : base(0) { }

        public static implicit operator IfcStructuralSurfaceMember(SdaiInstance instance) => new IfcStructuralSurfaceMember(instance);

        /// <summary>
        /// Create new instace of IfcStructuralSurfaceMember and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralSurfaceMember Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralSurfaceMember"); Debug.Assert(inst != 0); return inst; }

        public IfcStructuralSurfaceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStructuralSurfaceTypeEnum_); return EnumValue<IfcStructuralSurfaceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStructuralSurfaceTypeEnum>.FromValue(value.Value, EnumNames.IfcStructuralSurfaceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? Thickness
            {
            get { return get_double("Thickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Thickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcStructuralSurfaceMember"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralSurfaceMemberVarying
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralSurfaceMemberVarying : IfcStructuralSurfaceMember
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralSurfaceMemberVarying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralSurfaceMemberVarying(SdaiInstance instance) : base(instance) { }
        public IfcStructuralSurfaceMemberVarying() : base(0) { }

        public static implicit operator IfcStructuralSurfaceMemberVarying(SdaiInstance instance) => new IfcStructuralSurfaceMemberVarying(instance);

        /// <summary>
        /// Create new instace of IfcStructuralSurfaceMemberVarying and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralSurfaceMemberVarying Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralSurfaceMemberVarying"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcPositiveLengthMeasure SubsequentThickness { get { return (new ListOfIfcPositiveLengthMeasureSerializer()).FromAttr(m_instance, "SubsequentThickness"); } }
        public void put_SubsequentThickness(IEnumerable<double> lst) { (new ListOfIfcPositiveLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SubsequentThickness"); }
        public void put_SubsequentThickness_untyped(IEnumerable lst) { (new ListOfIfcPositiveLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SubsequentThickness"); }
        public IfcShapeAspect VaryingThicknessLocation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "VaryingThicknessLocation", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "VaryingThicknessLocation", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcPositiveLengthMeasure VaryingThickness { get { return (new ListOfIfcPositiveLengthMeasureSerializer()).FromAttr(m_instance, "VaryingThickness"); } }

        protected override TextValue WrapperEntityName() { return "IfcStructuralSurfaceMemberVarying"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuredDimensionCallout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuredDimensionCallout : IfcDraughtingCallout
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuredDimensionCallout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuredDimensionCallout(SdaiInstance instance) : base(instance) { }
        public IfcStructuredDimensionCallout() : base(0) { }

        public static implicit operator IfcStructuredDimensionCallout(SdaiInstance instance) => new IfcStructuredDimensionCallout(instance);

        /// <summary>
        /// Create new instace of IfcStructuredDimensionCallout and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuredDimensionCallout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuredDimensionCallout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcStructuredDimensionCallout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStyleModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStyleModel : IfcRepresentation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStyleModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStyleModel(SdaiInstance instance) : base(instance) { }
        public IfcStyleModel() : base(0) { }

        public static implicit operator IfcStyleModel(SdaiInstance instance) => new IfcStyleModel(instance);


        protected override TextValue WrapperEntityName() { return "IfcStyleModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStyledRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStyledRepresentation : IfcStyleModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStyledRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStyledRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcStyledRepresentation() : base(0) { }

        public static implicit operator IfcStyledRepresentation(SdaiInstance instance) => new IfcStyledRepresentation(instance);

        /// <summary>
        /// Create new instace of IfcStyledRepresentation and returns object of this class to interact with
        /// </summary>
        public static new IfcStyledRepresentation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStyledRepresentation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcStyledRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSubContractResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSubContractResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSubContractResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSubContractResource(SdaiInstance instance) : base(instance) { }
        public IfcSubContractResource() : base(0) { }

        public static implicit operator IfcSubContractResource(SdaiInstance instance) => new IfcSubContractResource(instance);

        /// <summary>
        /// Create new instace of IfcSubContractResource and returns object of this class to interact with
        /// </summary>
        public static new IfcSubContractResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSubContractResource"); Debug.Assert(inst != 0); return inst; }


        public IfcActorSelect SubContractor
            {
            get { return new IfcActorSelect(m_instance, "SubContractor", 0); }
            }
        public TextValue JobDescription
            {
            get { return get_string("JobDescription", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "JobDescription", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSubContractResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSubedge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSubedge : IfcEdge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSubedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSubedge(SdaiInstance instance) : base(instance) { }
        public IfcSubedge() : base(0) { }

        public static implicit operator IfcSubedge(SdaiInstance instance) => new IfcSubedge(instance);

        /// <summary>
        /// Create new instace of IfcSubedge and returns object of this class to interact with
        /// </summary>
        public static new IfcSubedge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSubedge"); Debug.Assert(inst != 0); return inst; }

        public IfcEdge ParentEdge 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ParentEdge", ifcengine.sdaiINSTANCE, out inst); return new IfcEdge(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ParentEdge", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSubedge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceCurveSweptAreaSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceCurveSweptAreaSolid : IfcSweptAreaSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceCurveSweptAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceCurveSweptAreaSolid(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceCurveSweptAreaSolid() : base(0) { }

        public static implicit operator IfcSurfaceCurveSweptAreaSolid(SdaiInstance instance) => new IfcSurfaceCurveSweptAreaSolid(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceCurveSweptAreaSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceCurveSweptAreaSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceCurveSweptAreaSolid"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve Directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, i); }
            }
        public double? StartParam
            {
            get { return get_double("StartParam", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartParam", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EndParam
            {
            get { return get_double("EndParam", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EndParam", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcSurface ReferenceSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ReferenceSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ReferenceSurface", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSurfaceCurveSweptAreaSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSweptSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSweptSurface : IfcSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSweptSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSweptSurface(SdaiInstance instance) : base(instance) { }
        public IfcSweptSurface() : base(0) { }

        public static implicit operator IfcSweptSurface(SdaiInstance instance) => new IfcSweptSurface(instance);

        public IfcProfileDef SweptCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SweptCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SweptCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcSweptSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceOfLinearExtrusion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceOfLinearExtrusion : IfcSweptSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceOfLinearExtrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceOfLinearExtrusion(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceOfLinearExtrusion() : base(0) { }

        public static implicit operator IfcSurfaceOfLinearExtrusion(SdaiInstance instance) => new IfcSurfaceOfLinearExtrusion(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceOfLinearExtrusion and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceOfLinearExtrusion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceOfLinearExtrusion"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection ExtrudedDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ExtrudedDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ExtrudedDirection", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcVector ExtrusionAxis { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ExtrusionAxis", ifcengine.sdaiINSTANCE, out inst); return new IfcVector(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcSurfaceOfLinearExtrusion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceOfRevolution
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceOfRevolution : IfcSweptSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceOfRevolution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceOfRevolution(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceOfRevolution() : base(0) { }

        public static implicit operator IfcSurfaceOfRevolution(SdaiInstance instance) => new IfcSurfaceOfRevolution(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceOfRevolution and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceOfRevolution Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceOfRevolution"); Debug.Assert(inst != 0); return inst; }

        public IfcAxis1Placement AxisPosition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AxisPosition", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis1Placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AxisPosition", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcLine AxisLine { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AxisLine", ifcengine.sdaiINSTANCE, out inst); return new IfcLine(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcSurfaceOfRevolution"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyle : IfcPresentationStyle
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyle(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyle() : base(0) { }

        public static implicit operator IfcSurfaceStyle(SdaiInstance instance) => new IfcSurfaceStyle(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyle"); Debug.Assert(inst != 0); return inst; }

        public IfcSurfaceSide? Side 
            { 
            get { var str = get_string("Side", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSurfaceSide_); return EnumValue<IfcSurfaceSide>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSurfaceSide>.FromValue(value.Value, EnumNames.IfcSurfaceSide_); ifcengine.sdaiPutAttrBN(m_instance, "Side", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcSurfaceStyleElementSelect Styles { get { return (new SetOfIfcSurfaceStyleElementSelectSerializer()).FromAttr(m_instance, "Styles"); } }
        public void put_Styles(IEnumerable<IfcSurfaceStyleElementSelect> lst) { (new SetOfIfcSurfaceStyleElementSelectSerializer()).ToSdaiAggr(lst, m_instance, "Styles"); }
        public void put_Styles_untyped(IEnumerable lst) { (new SetOfIfcSurfaceStyleElementSelectSerializer()).ToSdaiAggr(lst, m_instance, "Styles"); }

        protected override TextValue WrapperEntityName() { return "IfcSurfaceStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyleLighting
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyleLighting : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyleLighting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyleLighting(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyleLighting() : base(0) { }

        public static implicit operator IfcSurfaceStyleLighting(SdaiInstance instance) => new IfcSurfaceStyleLighting(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyleLighting and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyleLighting Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyleLighting"); Debug.Assert(inst != 0); return inst; }

        public IfcColourRgb DiffuseTransmissionColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DiffuseTransmissionColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DiffuseTransmissionColour", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcColourRgb DiffuseReflectionColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DiffuseReflectionColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DiffuseReflectionColour", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcColourRgb TransmissionColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TransmissionColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TransmissionColour", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcColourRgb ReflectanceColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ReflectanceColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ReflectanceColour", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSurfaceStyleLighting"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyleRefraction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyleRefraction : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyleRefraction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyleRefraction(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyleRefraction() : base(0) { }

        public static implicit operator IfcSurfaceStyleRefraction(SdaiInstance instance) => new IfcSurfaceStyleRefraction(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyleRefraction and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyleRefraction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyleRefraction"); Debug.Assert(inst != 0); return inst; }

        public double? RefractionIndex
            {
            get { return get_double("RefractionIndex", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RefractionIndex", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DispersionFactor
            {
            get { return get_double("DispersionFactor", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DispersionFactor", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSurfaceStyleRefraction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyleShading
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyleShading : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyleShading
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyleShading(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyleShading() : base(0) { }

        public static implicit operator IfcSurfaceStyleShading(SdaiInstance instance) => new IfcSurfaceStyleShading(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyleShading and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyleShading Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyleShading"); Debug.Assert(inst != 0); return inst; }

        public IfcColourRgb SurfaceColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SurfaceColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SurfaceColour", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSurfaceStyleShading"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyleRendering
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyleRendering : IfcSurfaceStyleShading
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyleRendering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyleRendering(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyleRendering() : base(0) { }

        public static implicit operator IfcSurfaceStyleRendering(SdaiInstance instance) => new IfcSurfaceStyleRendering(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyleRendering and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyleRendering Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyleRendering"); Debug.Assert(inst != 0); return inst; }

        public double? Transparency
            {
            get { return get_double("Transparency", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Transparency", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        public IfcColourOrFactor DiffuseColour
            {
            get { return new IfcColourOrFactor(m_instance, "DiffuseColour", 0); }
            }

        public IfcColourOrFactor TransmissionColour
            {
            get { return new IfcColourOrFactor(m_instance, "TransmissionColour", 0); }
            }

        public IfcColourOrFactor DiffuseTransmissionColour
            {
            get { return new IfcColourOrFactor(m_instance, "DiffuseTransmissionColour", 0); }
            }

        public IfcColourOrFactor ReflectionColour
            {
            get { return new IfcColourOrFactor(m_instance, "ReflectionColour", 0); }
            }

        public IfcColourOrFactor SpecularColour
            {
            get { return new IfcColourOrFactor(m_instance, "SpecularColour", 0); }
            }

        public IfcSpecularHighlightSelect SpecularHighlight
            {
            get { return new IfcSpecularHighlightSelect(m_instance, "SpecularHighlight", 0); }
            }
        public IfcReflectanceMethodEnum? ReflectanceMethod 
            { 
            get { var str = get_string("ReflectanceMethod", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReflectanceMethodEnum_); return EnumValue<IfcReflectanceMethodEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReflectanceMethodEnum>.FromValue(value.Value, EnumNames.IfcReflectanceMethodEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ReflectanceMethod", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSurfaceStyleRendering"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyleWithTextures
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyleWithTextures : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyleWithTextures
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyleWithTextures(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyleWithTextures() : base(0) { }

        public static implicit operator IfcSurfaceStyleWithTextures(SdaiInstance instance) => new IfcSurfaceStyleWithTextures(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyleWithTextures and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyleWithTextures Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyleWithTextures"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcSurfaceTexture Textures { get { return (new ListOfIfcSurfaceTextureSerializer()).FromAttr(m_instance, "Textures"); } }
        public void put_Textures(IEnumerable<IfcSurfaceTexture> lst) { (new ListOfIfcSurfaceTextureSerializer()).ToSdaiAggr(lst, m_instance, "Textures"); }
        public void put_Textures_untyped(IEnumerable lst) { (new ListOfIfcSurfaceTextureSerializer()).ToSdaiAggr(lst, m_instance, "Textures"); }

        protected override TextValue WrapperEntityName() { return "IfcSurfaceStyleWithTextures"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSweptDiskSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSweptDiskSolid : IfcSolidModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSweptDiskSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSweptDiskSolid(SdaiInstance instance) : base(instance) { }
        public IfcSweptDiskSolid() : base(0) { }

        public static implicit operator IfcSweptDiskSolid(SdaiInstance instance) => new IfcSweptDiskSolid(instance);

        /// <summary>
        /// Create new instace of IfcSweptDiskSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcSweptDiskSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSweptDiskSolid"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve Directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? InnerRadius
            {
            get { return get_double("InnerRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InnerRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? StartParam
            {
            get { return get_double("StartParam", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartParam", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EndParam
            {
            get { return get_double("EndParam", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EndParam", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSweptDiskSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSwitchingDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSwitchingDeviceType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSwitchingDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSwitchingDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcSwitchingDeviceType() : base(0) { }

        public static implicit operator IfcSwitchingDeviceType(SdaiInstance instance) => new IfcSwitchingDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcSwitchingDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcSwitchingDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSwitchingDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcSwitchingDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSwitchingDeviceTypeEnum_); return EnumValue<IfcSwitchingDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSwitchingDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcSwitchingDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSwitchingDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSymbolStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSymbolStyle : IfcPresentationStyle
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSymbolStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSymbolStyle(SdaiInstance instance) : base(instance) { }
        public IfcSymbolStyle() : base(0) { }

        public static implicit operator IfcSymbolStyle(SdaiInstance instance) => new IfcSymbolStyle(instance);

        /// <summary>
        /// Create new instace of IfcSymbolStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcSymbolStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSymbolStyle"); Debug.Assert(inst != 0); return inst; }


        public IfcSymbolStyleSelect StyleOfSymbol
            {
            get { return new IfcSymbolStyleSelect(m_instance, "StyleOfSymbol", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcSymbolStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSystemFurnitureElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSystemFurnitureElementType : IfcFurnishingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSystemFurnitureElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSystemFurnitureElementType(SdaiInstance instance) : base(instance) { }
        public IfcSystemFurnitureElementType() : base(0) { }

        public static implicit operator IfcSystemFurnitureElementType(SdaiInstance instance) => new IfcSystemFurnitureElementType(instance);

        /// <summary>
        /// Create new instace of IfcSystemFurnitureElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcSystemFurnitureElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSystemFurnitureElementType"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcSystemFurnitureElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTable : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTable(SdaiInstance instance) : base(instance) { }
        public IfcTable() : base(0) { }

        public static implicit operator IfcTable(SdaiInstance instance) => new IfcTable(instance);

        /// <summary>
        /// Create new instace of IfcTable and returns object of this class to interact with
        /// </summary>
        public static new IfcTable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTable"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcTableRow Rows { get { return (new ListOfIfcTableRowSerializer()).FromAttr(m_instance, "Rows"); } }
        public void put_Rows(IEnumerable<IfcTableRow> lst) { (new ListOfIfcTableRowSerializer()).ToSdaiAggr(lst, m_instance, "Rows"); }
        public void put_Rows_untyped(IEnumerable lst) { (new ListOfIfcTableRowSerializer()).ToSdaiAggr(lst, m_instance, "Rows"); }
        public IntValue? NumberOfCellsInRow { get { return get_IntValue("NumberOfCellsInRow", ifcengine.sdaiINTEGER); } }
        public IntValue? NumberOfHeadings { get { return get_IntValue("NumberOfHeadings", ifcengine.sdaiINTEGER); } }
        public IntValue? NumberOfDataRows { get { return get_IntValue("NumberOfDataRows", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcTable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTableRow
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTableRow : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTableRow
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTableRow(SdaiInstance instance) : base(instance) { }
        public IfcTableRow() : base(0) { }

        public static implicit operator IfcTableRow(SdaiInstance instance) => new IfcTableRow(instance);

        /// <summary>
        /// Create new instace of IfcTableRow and returns object of this class to interact with
        /// </summary>
        public static new IfcTableRow Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTableRow"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcValue RowCells { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "RowCells"); } }
        public void put_RowCells(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "RowCells"); }
        public void put_RowCells_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "RowCells"); }
        public bool? IsHeading
            {
            get { return get_bool("IsHeading", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsHeading", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IfcTable OfTable { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OfTable", ifcengine.sdaiINSTANCE, out inst); return new IfcTable(inst); } }

        protected override TextValue WrapperEntityName() { return "IfcTableRow"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTankType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTankType : IfcFlowStorageDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTankType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTankType(SdaiInstance instance) : base(instance) { }
        public IfcTankType() : base(0) { }

        public static implicit operator IfcTankType(SdaiInstance instance) => new IfcTankType(instance);

        /// <summary>
        /// Create new instace of IfcTankType and returns object of this class to interact with
        /// </summary>
        public static new IfcTankType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTankType"); Debug.Assert(inst != 0); return inst; }

        public IfcTankTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTankTypeEnum_); return EnumValue<IfcTankTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTankTypeEnum>.FromValue(value.Value, EnumNames.IfcTankTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTankType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTelecomAddress
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTelecomAddress : IfcAddress
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTelecomAddress
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTelecomAddress(SdaiInstance instance) : base(instance) { }
        public IfcTelecomAddress() : base(0) { }

        public static implicit operator IfcTelecomAddress(SdaiInstance instance) => new IfcTelecomAddress(instance);

        /// <summary>
        /// Create new instace of IfcTelecomAddress and returns object of this class to interact with
        /// </summary>
        public static new IfcTelecomAddress Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTelecomAddress"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcLabel TelephoneNumbers { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "TelephoneNumbers"); } }
        public void put_TelephoneNumbers(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "TelephoneNumbers"); }
        public void put_TelephoneNumbers_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "TelephoneNumbers"); }
        public ListOfIfcLabel FacsimileNumbers { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "FacsimileNumbers"); } }
        public void put_FacsimileNumbers(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "FacsimileNumbers"); }
        public void put_FacsimileNumbers_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "FacsimileNumbers"); }
        public TextValue PagerNumber
            {
            get { return get_string("PagerNumber", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "PagerNumber", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcLabel ElectronicMailAddresses { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "ElectronicMailAddresses"); } }
        public void put_ElectronicMailAddresses(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "ElectronicMailAddresses"); }
        public void put_ElectronicMailAddresses_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "ElectronicMailAddresses"); }
        public TextValue WWWHomePageURL
            {
            get { return get_string("WWWHomePageURL", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "WWWHomePageURL", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTelecomAddress"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTendon
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTendon : IfcReinforcingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTendon
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTendon(SdaiInstance instance) : base(instance) { }
        public IfcTendon() : base(0) { }

        public static implicit operator IfcTendon(SdaiInstance instance) => new IfcTendon(instance);

        /// <summary>
        /// Create new instace of IfcTendon and returns object of this class to interact with
        /// </summary>
        public static new IfcTendon Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTendon"); Debug.Assert(inst != 0); return inst; }

        public IfcTendonTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTendonTypeEnum_); return EnumValue<IfcTendonTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTendonTypeEnum>.FromValue(value.Value, EnumNames.IfcTendonTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? NominalDiameter
            {
            get { return get_double("NominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CrossSectionArea
            {
            get { return get_double("CrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TensionForce
            {
            get { return get_double("TensionForce", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TensionForce", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PreStress
            {
            get { return get_double("PreStress", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PreStress", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FrictionCoefficient
            {
            get { return get_double("FrictionCoefficient", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FrictionCoefficient", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? AnchorageSlip
            {
            get { return get_double("AnchorageSlip", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AnchorageSlip", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MinCurvatureRadius
            {
            get { return get_double("MinCurvatureRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MinCurvatureRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTendon"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTendonAnchor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTendonAnchor : IfcReinforcingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTendonAnchor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTendonAnchor(SdaiInstance instance) : base(instance) { }
        public IfcTendonAnchor() : base(0) { }

        public static implicit operator IfcTendonAnchor(SdaiInstance instance) => new IfcTendonAnchor(instance);

        /// <summary>
        /// Create new instace of IfcTendonAnchor and returns object of this class to interact with
        /// </summary>
        public static new IfcTendonAnchor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTendonAnchor"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcTendonAnchor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextLiteral
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextLiteral : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextLiteral
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextLiteral(SdaiInstance instance) : base(instance) { }
        public IfcTextLiteral() : base(0) { }

        public static implicit operator IfcTextLiteral(SdaiInstance instance) => new IfcTextLiteral(instance);

        /// <summary>
        /// Create new instace of IfcTextLiteral and returns object of this class to interact with
        /// </summary>
        public static new IfcTextLiteral Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextLiteral"); Debug.Assert(inst != 0); return inst; }

        public TextValue Literal
            {
            get { return get_string("Literal", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Literal", ifcengine.sdaiSTRING, value); }
            }

        public IfcAxis2Placement Placement
            {
            get { return new IfcAxis2Placement(m_instance, "Placement", 0); }
            }
        public IfcTextPath? Path 
            { 
            get { var str = get_string("Path", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTextPath_); return EnumValue<IfcTextPath>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTextPath>.FromValue(value.Value, EnumNames.IfcTextPath_); ifcengine.sdaiPutAttrBN(m_instance, "Path", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTextLiteral"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextLiteralWithExtent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextLiteralWithExtent : IfcTextLiteral
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextLiteralWithExtent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextLiteralWithExtent(SdaiInstance instance) : base(instance) { }
        public IfcTextLiteralWithExtent() : base(0) { }

        public static implicit operator IfcTextLiteralWithExtent(SdaiInstance instance) => new IfcTextLiteralWithExtent(instance);

        /// <summary>
        /// Create new instace of IfcTextLiteralWithExtent and returns object of this class to interact with
        /// </summary>
        public static new IfcTextLiteralWithExtent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextLiteralWithExtent"); Debug.Assert(inst != 0); return inst; }

        public IfcPlanarExtent Extent 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Extent", ifcengine.sdaiINSTANCE, out inst); return new IfcPlanarExtent(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Extent", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue BoxAlignment
            {
            get { return get_string("BoxAlignment", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "BoxAlignment", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTextLiteralWithExtent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextStyle : IfcPresentationStyle
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextStyle(SdaiInstance instance) : base(instance) { }
        public IfcTextStyle() : base(0) { }

        public static implicit operator IfcTextStyle(SdaiInstance instance) => new IfcTextStyle(instance);

        /// <summary>
        /// Create new instace of IfcTextStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcTextStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextStyle"); Debug.Assert(inst != 0); return inst; }


        public IfcCharacterStyleSelect TextCharacterAppearance
            {
            get { return new IfcCharacterStyleSelect(m_instance, "TextCharacterAppearance", 0); }
            }

        public IfcTextStyleSelect TextStyle
            {
            get { return new IfcTextStyleSelect(m_instance, "TextStyle", 0); }
            }

        public IfcTextFontSelect TextFontStyle
            {
            get { return new IfcTextFontSelect(m_instance, "TextFontStyle", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTextStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextStyleFontModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextStyleFontModel : IfcPreDefinedTextFont
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextStyleFontModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextStyleFontModel(SdaiInstance instance) : base(instance) { }
        public IfcTextStyleFontModel() : base(0) { }

        public static implicit operator IfcTextStyleFontModel(SdaiInstance instance) => new IfcTextStyleFontModel(instance);

        /// <summary>
        /// Create new instace of IfcTextStyleFontModel and returns object of this class to interact with
        /// </summary>
        public static new IfcTextStyleFontModel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextStyleFontModel"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcTextFontName FontFamily { get { return (new ListOfIfcTextFontNameSerializer()).FromAttr(m_instance, "FontFamily"); } }
        public void put_FontFamily(IEnumerable<TextValue> lst) { (new ListOfIfcTextFontNameSerializer()).ToSdaiAggr(lst, m_instance, "FontFamily"); }
        public void put_FontFamily_untyped(IEnumerable lst) { (new ListOfIfcTextFontNameSerializer()).ToSdaiAggr(lst, m_instance, "FontFamily"); }
        public TextValue FontStyle
            {
            get { return get_string("FontStyle", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FontStyle", ifcengine.sdaiSTRING, value); }
            }
        public TextValue FontVariant
            {
            get { return get_string("FontVariant", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FontVariant", ifcengine.sdaiSTRING, value); }
            }
        public TextValue FontWeight
            {
            get { return get_string("FontWeight", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FontWeight", ifcengine.sdaiSTRING, value); }
            }

        public IfcSizeSelect FontSize
            {
            get { return new IfcSizeSelect(m_instance, "FontSize", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTextStyleFontModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextStyleForDefinedFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextStyleForDefinedFont : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextStyleForDefinedFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextStyleForDefinedFont(SdaiInstance instance) : base(instance) { }
        public IfcTextStyleForDefinedFont() : base(0) { }

        public static implicit operator IfcTextStyleForDefinedFont(SdaiInstance instance) => new IfcTextStyleForDefinedFont(instance);

        /// <summary>
        /// Create new instace of IfcTextStyleForDefinedFont and returns object of this class to interact with
        /// </summary>
        public static new IfcTextStyleForDefinedFont Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextStyleForDefinedFont"); Debug.Assert(inst != 0); return inst; }


        public IfcColour Colour
            {
            get { return new IfcColour(m_instance, "Colour", 0); }
            }

        public IfcColour BackgroundColour
            {
            get { return new IfcColour(m_instance, "BackgroundColour", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTextStyleForDefinedFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextStyleTextModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextStyleTextModel : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextStyleTextModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextStyleTextModel(SdaiInstance instance) : base(instance) { }
        public IfcTextStyleTextModel() : base(0) { }

        public static implicit operator IfcTextStyleTextModel(SdaiInstance instance) => new IfcTextStyleTextModel(instance);

        /// <summary>
        /// Create new instace of IfcTextStyleTextModel and returns object of this class to interact with
        /// </summary>
        public static new IfcTextStyleTextModel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextStyleTextModel"); Debug.Assert(inst != 0); return inst; }


        public IfcSizeSelect TextIndent
            {
            get { return new IfcSizeSelect(m_instance, "TextIndent", 0); }
            }
        public TextValue TextAlign
            {
            get { return get_string("TextAlign", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TextAlign", ifcengine.sdaiSTRING, value); }
            }
        public TextValue TextDecoration
            {
            get { return get_string("TextDecoration", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TextDecoration", ifcengine.sdaiSTRING, value); }
            }

        public IfcSizeSelect LetterSpacing
            {
            get { return new IfcSizeSelect(m_instance, "LetterSpacing", 0); }
            }

        public IfcSizeSelect WordSpacing
            {
            get { return new IfcSizeSelect(m_instance, "WordSpacing", 0); }
            }
        public TextValue TextTransform
            {
            get { return get_string("TextTransform", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TextTransform", ifcengine.sdaiSTRING, value); }
            }

        public IfcSizeSelect LineHeight
            {
            get { return new IfcSizeSelect(m_instance, "LineHeight", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTextStyleTextModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextStyleWithBoxCharacteristics
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextStyleWithBoxCharacteristics : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextStyleWithBoxCharacteristics
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextStyleWithBoxCharacteristics(SdaiInstance instance) : base(instance) { }
        public IfcTextStyleWithBoxCharacteristics() : base(0) { }

        public static implicit operator IfcTextStyleWithBoxCharacteristics(SdaiInstance instance) => new IfcTextStyleWithBoxCharacteristics(instance);

        /// <summary>
        /// Create new instace of IfcTextStyleWithBoxCharacteristics and returns object of this class to interact with
        /// </summary>
        public static new IfcTextStyleWithBoxCharacteristics Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextStyleWithBoxCharacteristics"); Debug.Assert(inst != 0); return inst; }

        public double? BoxHeight
            {
            get { return get_double("BoxHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BoxHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BoxWidth
            {
            get { return get_double("BoxWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BoxWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BoxSlantAngle
            {
            get { return get_double("BoxSlantAngle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BoxSlantAngle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BoxRotateAngle
            {
            get { return get_double("BoxRotateAngle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BoxRotateAngle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        public IfcSizeSelect CharacterSpacing
            {
            get { return new IfcSizeSelect(m_instance, "CharacterSpacing", 0); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTextStyleWithBoxCharacteristics"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextureCoordinate
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextureCoordinate : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextureCoordinate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextureCoordinate(SdaiInstance instance) : base(instance) { }
        public IfcTextureCoordinate() : base(0) { }

        public static implicit operator IfcTextureCoordinate(SdaiInstance instance) => new IfcTextureCoordinate(instance);

        public SetOfIfcAnnotationSurface AnnotatedSurface { get { return (new SetOfIfcAnnotationSurfaceSerializer()).FromAttr(m_instance, "AnnotatedSurface"); } }

        protected override TextValue WrapperEntityName() { return "IfcTextureCoordinate"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextureCoordinateGenerator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextureCoordinateGenerator : IfcTextureCoordinate
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextureCoordinateGenerator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextureCoordinateGenerator(SdaiInstance instance) : base(instance) { }
        public IfcTextureCoordinateGenerator() : base(0) { }

        public static implicit operator IfcTextureCoordinateGenerator(SdaiInstance instance) => new IfcTextureCoordinateGenerator(instance);

        /// <summary>
        /// Create new instace of IfcTextureCoordinateGenerator and returns object of this class to interact with
        /// </summary>
        public static new IfcTextureCoordinateGenerator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextureCoordinateGenerator"); Debug.Assert(inst != 0); return inst; }

        public TextValue Mode
            {
            get { return get_string("Mode", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Mode", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcSimpleValue Parameter { get { return (new ListOfIfcSimpleValueSerializer()).FromAttr(m_instance, "Parameter"); } }
        public void put_Parameter(IEnumerable<IfcSimpleValue> lst) { (new ListOfIfcSimpleValueSerializer()).ToSdaiAggr(lst, m_instance, "Parameter"); }
        public void put_Parameter_untyped(IEnumerable lst) { (new ListOfIfcSimpleValueSerializer()).ToSdaiAggr(lst, m_instance, "Parameter"); }

        protected override TextValue WrapperEntityName() { return "IfcTextureCoordinateGenerator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextureMap
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextureMap : IfcTextureCoordinate
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextureMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextureMap(SdaiInstance instance) : base(instance) { }
        public IfcTextureMap() : base(0) { }

        public static implicit operator IfcTextureMap(SdaiInstance instance) => new IfcTextureMap(instance);

        /// <summary>
        /// Create new instace of IfcTextureMap and returns object of this class to interact with
        /// </summary>
        public static new IfcTextureMap Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextureMap"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcVertexBasedTextureMap TextureMaps { get { return (new SetOfIfcVertexBasedTextureMapSerializer()).FromAttr(m_instance, "TextureMaps"); } }
        public void put_TextureMaps(IEnumerable<IfcVertexBasedTextureMap> lst) { (new SetOfIfcVertexBasedTextureMapSerializer()).ToSdaiAggr(lst, m_instance, "TextureMaps"); }
        public void put_TextureMaps_untyped(IEnumerable lst) { (new SetOfIfcVertexBasedTextureMapSerializer()).ToSdaiAggr(lst, m_instance, "TextureMaps"); }

        protected override TextValue WrapperEntityName() { return "IfcTextureMap"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextureVertex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextureVertex : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextureVertex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextureVertex(SdaiInstance instance) : base(instance) { }
        public IfcTextureVertex() : base(0) { }

        public static implicit operator IfcTextureVertex(SdaiInstance instance) => new IfcTextureVertex(instance);

        /// <summary>
        /// Create new instace of IfcTextureVertex and returns object of this class to interact with
        /// </summary>
        public static new IfcTextureVertex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextureVertex"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcParameterValue Coordinates { get { return (new ListOfIfcParameterValueSerializer()).FromAttr(m_instance, "Coordinates"); } }
        public void put_Coordinates(IEnumerable<double> lst) { (new ListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "Coordinates"); }
        public void put_Coordinates_untyped(IEnumerable lst) { (new ListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "Coordinates"); }

        protected override TextValue WrapperEntityName() { return "IfcTextureVertex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcThermalMaterialProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcThermalMaterialProperties : IfcMaterialProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcThermalMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcThermalMaterialProperties(SdaiInstance instance) : base(instance) { }
        public IfcThermalMaterialProperties() : base(0) { }

        public static implicit operator IfcThermalMaterialProperties(SdaiInstance instance) => new IfcThermalMaterialProperties(instance);

        /// <summary>
        /// Create new instace of IfcThermalMaterialProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcThermalMaterialProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcThermalMaterialProperties"); Debug.Assert(inst != 0); return inst; }

        public double? SpecificHeatCapacity
            {
            get { return get_double("SpecificHeatCapacity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SpecificHeatCapacity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BoilingPoint
            {
            get { return get_double("BoilingPoint", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BoilingPoint", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FreezingPoint
            {
            get { return get_double("FreezingPoint", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FreezingPoint", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ThermalConductivity
            {
            get { return get_double("ThermalConductivity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThermalConductivity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcThermalMaterialProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTimeSeriesReferenceRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTimeSeriesReferenceRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTimeSeriesReferenceRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTimeSeriesReferenceRelationship(SdaiInstance instance) : base(instance) { }
        public IfcTimeSeriesReferenceRelationship() : base(0) { }

        public static implicit operator IfcTimeSeriesReferenceRelationship(SdaiInstance instance) => new IfcTimeSeriesReferenceRelationship(instance);

        /// <summary>
        /// Create new instace of IfcTimeSeriesReferenceRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcTimeSeriesReferenceRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTimeSeriesReferenceRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcTimeSeries ReferencedTimeSeries 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ReferencedTimeSeries", ifcengine.sdaiINSTANCE, out inst); return new IfcTimeSeries(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ReferencedTimeSeries", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcDocumentSelect TimeSeriesReferences { get { return (new SetOfIfcDocumentSelectSerializer()).FromAttr(m_instance, "TimeSeriesReferences"); } }
        public void put_TimeSeriesReferences(IEnumerable<IfcDocumentSelect> lst) { (new SetOfIfcDocumentSelectSerializer()).ToSdaiAggr(lst, m_instance, "TimeSeriesReferences"); }
        public void put_TimeSeriesReferences_untyped(IEnumerable lst) { (new SetOfIfcDocumentSelectSerializer()).ToSdaiAggr(lst, m_instance, "TimeSeriesReferences"); }

        protected override TextValue WrapperEntityName() { return "IfcTimeSeriesReferenceRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTimeSeriesSchedule
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTimeSeriesSchedule : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTimeSeriesSchedule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTimeSeriesSchedule(SdaiInstance instance) : base(instance) { }
        public IfcTimeSeriesSchedule() : base(0) { }

        public static implicit operator IfcTimeSeriesSchedule(SdaiInstance instance) => new IfcTimeSeriesSchedule(instance);

        /// <summary>
        /// Create new instace of IfcTimeSeriesSchedule and returns object of this class to interact with
        /// </summary>
        public static new IfcTimeSeriesSchedule Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTimeSeriesSchedule"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcDateTimeSelect ApplicableDates { get { return (new ListOfIfcDateTimeSelectSerializer()).FromAttr(m_instance, "ApplicableDates"); } }
        public void put_ApplicableDates(IEnumerable<IfcDateTimeSelect> lst) { (new ListOfIfcDateTimeSelectSerializer()).ToSdaiAggr(lst, m_instance, "ApplicableDates"); }
        public void put_ApplicableDates_untyped(IEnumerable lst) { (new ListOfIfcDateTimeSelectSerializer()).ToSdaiAggr(lst, m_instance, "ApplicableDates"); }
        public IfcTimeSeriesScheduleTypeEnum? TimeSeriesScheduleType 
            { 
            get { var str = get_string("TimeSeriesScheduleType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTimeSeriesScheduleTypeEnum_); return EnumValue<IfcTimeSeriesScheduleTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTimeSeriesScheduleTypeEnum>.FromValue(value.Value, EnumNames.IfcTimeSeriesScheduleTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "TimeSeriesScheduleType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcTimeSeries TimeSeries 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TimeSeries", ifcengine.sdaiINSTANCE, out inst); return new IfcTimeSeries(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TimeSeries", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTimeSeriesSchedule"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTimeSeriesValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTimeSeriesValue : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTimeSeriesValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTimeSeriesValue(SdaiInstance instance) : base(instance) { }
        public IfcTimeSeriesValue() : base(0) { }

        public static implicit operator IfcTimeSeriesValue(SdaiInstance instance) => new IfcTimeSeriesValue(instance);

        /// <summary>
        /// Create new instace of IfcTimeSeriesValue and returns object of this class to interact with
        /// </summary>
        public static new IfcTimeSeriesValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTimeSeriesValue"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcValue ListValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "ListValues"); } }
        public void put_ListValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }
        public void put_ListValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }

        protected override TextValue WrapperEntityName() { return "IfcTimeSeriesValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTopologyRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTopologyRepresentation : IfcShapeModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTopologyRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTopologyRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcTopologyRepresentation() : base(0) { }

        public static implicit operator IfcTopologyRepresentation(SdaiInstance instance) => new IfcTopologyRepresentation(instance);

        /// <summary>
        /// Create new instace of IfcTopologyRepresentation and returns object of this class to interact with
        /// </summary>
        public static new IfcTopologyRepresentation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTopologyRepresentation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcTopologyRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTransformerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTransformerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTransformerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTransformerType(SdaiInstance instance) : base(instance) { }
        public IfcTransformerType() : base(0) { }

        public static implicit operator IfcTransformerType(SdaiInstance instance) => new IfcTransformerType(instance);

        /// <summary>
        /// Create new instace of IfcTransformerType and returns object of this class to interact with
        /// </summary>
        public static new IfcTransformerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTransformerType"); Debug.Assert(inst != 0); return inst; }

        public IfcTransformerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTransformerTypeEnum_); return EnumValue<IfcTransformerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTransformerTypeEnum>.FromValue(value.Value, EnumNames.IfcTransformerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTransformerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTransportElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTransportElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTransportElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTransportElement(SdaiInstance instance) : base(instance) { }
        public IfcTransportElement() : base(0) { }

        public static implicit operator IfcTransportElement(SdaiInstance instance) => new IfcTransportElement(instance);

        /// <summary>
        /// Create new instace of IfcTransportElement and returns object of this class to interact with
        /// </summary>
        public static new IfcTransportElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTransportElement"); Debug.Assert(inst != 0); return inst; }

        public IfcTransportElementTypeEnum? OperationType 
            { 
            get { var str = get_string("OperationType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTransportElementTypeEnum_); return EnumValue<IfcTransportElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTransportElementTypeEnum>.FromValue(value.Value, EnumNames.IfcTransportElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "OperationType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? CapacityByWeight
            {
            get { return get_double("CapacityByWeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CapacityByWeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CapacityByNumber
            {
            get { return get_double("CapacityByNumber", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CapacityByNumber", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTransportElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTransportElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTransportElementType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTransportElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTransportElementType(SdaiInstance instance) : base(instance) { }
        public IfcTransportElementType() : base(0) { }

        public static implicit operator IfcTransportElementType(SdaiInstance instance) => new IfcTransportElementType(instance);

        /// <summary>
        /// Create new instace of IfcTransportElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcTransportElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTransportElementType"); Debug.Assert(inst != 0); return inst; }

        public IfcTransportElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTransportElementTypeEnum_); return EnumValue<IfcTransportElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTransportElementTypeEnum>.FromValue(value.Value, EnumNames.IfcTransportElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTransportElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTrapeziumProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTrapeziumProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTrapeziumProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTrapeziumProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcTrapeziumProfileDef() : base(0) { }

        public static implicit operator IfcTrapeziumProfileDef(SdaiInstance instance) => new IfcTrapeziumProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcTrapeziumProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcTrapeziumProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTrapeziumProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? BottomXDim
            {
            get { return get_double("BottomXDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BottomXDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TopXDim
            {
            get { return get_double("TopXDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopXDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? YDim
            {
            get { return get_double("YDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TopXOffset
            {
            get { return get_double("TopXOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopXOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTrapeziumProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTrimmedCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTrimmedCurve : IfcBoundedCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTrimmedCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTrimmedCurve(SdaiInstance instance) : base(instance) { }
        public IfcTrimmedCurve() : base(0) { }

        public static implicit operator IfcTrimmedCurve(SdaiInstance instance) => new IfcTrimmedCurve(instance);

        /// <summary>
        /// Create new instace of IfcTrimmedCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcTrimmedCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTrimmedCurve"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve BasisCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcTrimmingSelect Trim1 { get { return (new SetOfIfcTrimmingSelectSerializer()).FromAttr(m_instance, "Trim1"); } }
        public void put_Trim1(IEnumerable<IfcTrimmingSelect> lst) { (new SetOfIfcTrimmingSelectSerializer()).ToSdaiAggr(lst, m_instance, "Trim1"); }
        public void put_Trim1_untyped(IEnumerable lst) { (new SetOfIfcTrimmingSelectSerializer()).ToSdaiAggr(lst, m_instance, "Trim1"); }
        public SetOfIfcTrimmingSelect Trim2 { get { return (new SetOfIfcTrimmingSelectSerializer()).FromAttr(m_instance, "Trim2"); } }
        public void put_Trim2(IEnumerable<IfcTrimmingSelect> lst) { (new SetOfIfcTrimmingSelectSerializer()).ToSdaiAggr(lst, m_instance, "Trim2"); }
        public void put_Trim2_untyped(IEnumerable lst) { (new SetOfIfcTrimmingSelectSerializer()).ToSdaiAggr(lst, m_instance, "Trim2"); }
        public bool? SenseAgreement
            {
            get { return get_bool("SenseAgreement", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SenseAgreement", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IfcTrimmingPreference? MasterRepresentation 
            { 
            get { var str = get_string("MasterRepresentation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTrimmingPreference_); return EnumValue<IfcTrimmingPreference>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTrimmingPreference>.FromValue(value.Value, EnumNames.IfcTrimmingPreference_); ifcengine.sdaiPutAttrBN(m_instance, "MasterRepresentation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTrimmedCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcTShapeProfileDef() : base(0) { }

        public static implicit operator IfcTShapeProfileDef(SdaiInstance instance) => new IfcTShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcTShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcTShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeWidth
            {
            get { return get_double("FlangeWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebThickness
            {
            get { return get_double("WebThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeThickness
            {
            get { return get_double("FlangeThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FilletRadius
            {
            get { return get_double("FilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeEdgeRadius
            {
            get { return get_double("FlangeEdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeEdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebEdgeRadius
            {
            get { return get_double("WebEdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebEdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebSlope
            {
            get { return get_double("WebSlope", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebSlope", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeSlope
            {
            get { return get_double("FlangeSlope", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeSlope", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CentreOfGravityInY
            {
            get { return get_double("CentreOfGravityInY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CentreOfGravityInY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTubeBundleType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTubeBundleType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTubeBundleType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTubeBundleType(SdaiInstance instance) : base(instance) { }
        public IfcTubeBundleType() : base(0) { }

        public static implicit operator IfcTubeBundleType(SdaiInstance instance) => new IfcTubeBundleType(instance);

        /// <summary>
        /// Create new instace of IfcTubeBundleType and returns object of this class to interact with
        /// </summary>
        public static new IfcTubeBundleType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTubeBundleType"); Debug.Assert(inst != 0); return inst; }

        public IfcTubeBundleTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTubeBundleTypeEnum_); return EnumValue<IfcTubeBundleTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTubeBundleTypeEnum>.FromValue(value.Value, EnumNames.IfcTubeBundleTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTubeBundleType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTwoDirectionRepeatFactor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTwoDirectionRepeatFactor : IfcOneDirectionRepeatFactor
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTwoDirectionRepeatFactor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTwoDirectionRepeatFactor(SdaiInstance instance) : base(instance) { }
        public IfcTwoDirectionRepeatFactor() : base(0) { }

        public static implicit operator IfcTwoDirectionRepeatFactor(SdaiInstance instance) => new IfcTwoDirectionRepeatFactor(instance);

        /// <summary>
        /// Create new instace of IfcTwoDirectionRepeatFactor and returns object of this class to interact with
        /// </summary>
        public static new IfcTwoDirectionRepeatFactor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTwoDirectionRepeatFactor"); Debug.Assert(inst != 0); return inst; }

        public IfcVector SecondRepeatFactor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SecondRepeatFactor", ifcengine.sdaiINSTANCE, out inst); return new IfcVector(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SecondRepeatFactor", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcTwoDirectionRepeatFactor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcUnitaryEquipmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcUnitaryEquipmentType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcUnitaryEquipmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcUnitaryEquipmentType(SdaiInstance instance) : base(instance) { }
        public IfcUnitaryEquipmentType() : base(0) { }

        public static implicit operator IfcUnitaryEquipmentType(SdaiInstance instance) => new IfcUnitaryEquipmentType(instance);

        /// <summary>
        /// Create new instace of IfcUnitaryEquipmentType and returns object of this class to interact with
        /// </summary>
        public static new IfcUnitaryEquipmentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcUnitaryEquipmentType"); Debug.Assert(inst != 0); return inst; }

        public IfcUnitaryEquipmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcUnitaryEquipmentTypeEnum_); return EnumValue<IfcUnitaryEquipmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcUnitaryEquipmentTypeEnum>.FromValue(value.Value, EnumNames.IfcUnitaryEquipmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcUnitaryEquipmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcUnitAssignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcUnitAssignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcUnitAssignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcUnitAssignment(SdaiInstance instance) : base(instance) { }
        public IfcUnitAssignment() : base(0) { }

        public static implicit operator IfcUnitAssignment(SdaiInstance instance) => new IfcUnitAssignment(instance);

        /// <summary>
        /// Create new instace of IfcUnitAssignment and returns object of this class to interact with
        /// </summary>
        public static new IfcUnitAssignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcUnitAssignment"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcUnit Units { get { return (new SetOfIfcUnitSerializer()).FromAttr(m_instance, "Units"); } }
        public void put_Units(IEnumerable<IfcUnit> lst) { (new SetOfIfcUnitSerializer()).ToSdaiAggr(lst, m_instance, "Units"); }
        public void put_Units_untyped(IEnumerable lst) { (new SetOfIfcUnitSerializer()).ToSdaiAggr(lst, m_instance, "Units"); }

        protected override TextValue WrapperEntityName() { return "IfcUnitAssignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcUShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcUShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcUShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcUShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcUShapeProfileDef() : base(0) { }

        public static implicit operator IfcUShapeProfileDef(SdaiInstance instance) => new IfcUShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcUShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcUShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcUShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeWidth
            {
            get { return get_double("FlangeWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebThickness
            {
            get { return get_double("WebThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeThickness
            {
            get { return get_double("FlangeThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FilletRadius
            {
            get { return get_double("FilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EdgeRadius
            {
            get { return get_double("EdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeSlope
            {
            get { return get_double("FlangeSlope", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeSlope", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CentreOfGravityInX
            {
            get { return get_double("CentreOfGravityInX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CentreOfGravityInX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcUShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcValveType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcValveType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcValveType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcValveType(SdaiInstance instance) : base(instance) { }
        public IfcValveType() : base(0) { }

        public static implicit operator IfcValveType(SdaiInstance instance) => new IfcValveType(instance);

        /// <summary>
        /// Create new instace of IfcValveType and returns object of this class to interact with
        /// </summary>
        public static new IfcValveType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcValveType"); Debug.Assert(inst != 0); return inst; }

        public IfcValveTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcValveTypeEnum_); return EnumValue<IfcValveTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcValveTypeEnum>.FromValue(value.Value, EnumNames.IfcValveTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcValveType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVector
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVector : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVector
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVector(SdaiInstance instance) : base(instance) { }
        public IfcVector() : base(0) { }

        public static implicit operator IfcVector(SdaiInstance instance) => new IfcVector(instance);

        /// <summary>
        /// Create new instace of IfcVector and returns object of this class to interact with
        /// </summary>
        public static new IfcVector Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVector"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Orientation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Magnitude
            {
            get { return get_double("Magnitude", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Magnitude", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Dim { get { return get_IntValue("Dim", ifcengine.sdaiINTEGER); } }

        protected override TextValue WrapperEntityName() { return "IfcVector"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVertex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVertex : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVertex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVertex(SdaiInstance instance) : base(instance) { }
        public IfcVertex() : base(0) { }

        public static implicit operator IfcVertex(SdaiInstance instance) => new IfcVertex(instance);

        /// <summary>
        /// Create new instace of IfcVertex and returns object of this class to interact with
        /// </summary>
        public static new IfcVertex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVertex"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcVertex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVertexBasedTextureMap
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVertexBasedTextureMap : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVertexBasedTextureMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVertexBasedTextureMap(SdaiInstance instance) : base(instance) { }
        public IfcVertexBasedTextureMap() : base(0) { }

        public static implicit operator IfcVertexBasedTextureMap(SdaiInstance instance) => new IfcVertexBasedTextureMap(instance);

        /// <summary>
        /// Create new instace of IfcVertexBasedTextureMap and returns object of this class to interact with
        /// </summary>
        public static new IfcVertexBasedTextureMap Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVertexBasedTextureMap"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcTextureVertex TextureVertices { get { return (new ListOfIfcTextureVertexSerializer()).FromAttr(m_instance, "TextureVertices"); } }
        public void put_TextureVertices(IEnumerable<IfcTextureVertex> lst) { (new ListOfIfcTextureVertexSerializer()).ToSdaiAggr(lst, m_instance, "TextureVertices"); }
        public void put_TextureVertices_untyped(IEnumerable lst) { (new ListOfIfcTextureVertexSerializer()).ToSdaiAggr(lst, m_instance, "TextureVertices"); }
        public ListOfIfcCartesianPoint TexturePoints { get { return (new ListOfIfcCartesianPointSerializer()).FromAttr(m_instance, "TexturePoints"); } }
        public void put_TexturePoints(IEnumerable<IfcCartesianPoint> lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "TexturePoints"); }
        public void put_TexturePoints_untyped(IEnumerable lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "TexturePoints"); }

        protected override TextValue WrapperEntityName() { return "IfcVertexBasedTextureMap"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVertexLoop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVertexLoop : IfcLoop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVertexLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVertexLoop(SdaiInstance instance) : base(instance) { }
        public IfcVertexLoop() : base(0) { }

        public static implicit operator IfcVertexLoop(SdaiInstance instance) => new IfcVertexLoop(instance);

        /// <summary>
        /// Create new instace of IfcVertexLoop and returns object of this class to interact with
        /// </summary>
        public static new IfcVertexLoop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVertexLoop"); Debug.Assert(inst != 0); return inst; }

        public IfcVertex LoopVertex 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LoopVertex", ifcengine.sdaiINSTANCE, out inst); return new IfcVertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LoopVertex", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcVertexLoop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVertexPoint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVertexPoint : IfcVertex
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVertexPoint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVertexPoint(SdaiInstance instance) : base(instance) { }
        public IfcVertexPoint() : base(0) { }

        public static implicit operator IfcVertexPoint(SdaiInstance instance) => new IfcVertexPoint(instance);

        /// <summary>
        /// Create new instace of IfcVertexPoint and returns object of this class to interact with
        /// </summary>
        public static new IfcVertexPoint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVertexPoint"); Debug.Assert(inst != 0); return inst; }

        public IfcPoint VertexGeometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "VertexGeometry", ifcengine.sdaiINSTANCE, out inst); return new IfcPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "VertexGeometry", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcVertexPoint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVibrationIsolatorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVibrationIsolatorType : IfcDiscreteAccessoryType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVibrationIsolatorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVibrationIsolatorType(SdaiInstance instance) : base(instance) { }
        public IfcVibrationIsolatorType() : base(0) { }

        public static implicit operator IfcVibrationIsolatorType(SdaiInstance instance) => new IfcVibrationIsolatorType(instance);

        /// <summary>
        /// Create new instace of IfcVibrationIsolatorType and returns object of this class to interact with
        /// </summary>
        public static new IfcVibrationIsolatorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVibrationIsolatorType"); Debug.Assert(inst != 0); return inst; }

        public IfcVibrationIsolatorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcVibrationIsolatorTypeEnum_); return EnumValue<IfcVibrationIsolatorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcVibrationIsolatorTypeEnum>.FromValue(value.Value, EnumNames.IfcVibrationIsolatorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcVibrationIsolatorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVirtualElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVirtualElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVirtualElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVirtualElement(SdaiInstance instance) : base(instance) { }
        public IfcVirtualElement() : base(0) { }

        public static implicit operator IfcVirtualElement(SdaiInstance instance) => new IfcVirtualElement(instance);

        /// <summary>
        /// Create new instace of IfcVirtualElement and returns object of this class to interact with
        /// </summary>
        public static new IfcVirtualElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVirtualElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcVirtualElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVirtualGridIntersection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVirtualGridIntersection : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVirtualGridIntersection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVirtualGridIntersection(SdaiInstance instance) : base(instance) { }
        public IfcVirtualGridIntersection() : base(0) { }

        public static implicit operator IfcVirtualGridIntersection(SdaiInstance instance) => new IfcVirtualGridIntersection(instance);

        /// <summary>
        /// Create new instace of IfcVirtualGridIntersection and returns object of this class to interact with
        /// </summary>
        public static new IfcVirtualGridIntersection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVirtualGridIntersection"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcGridAxis IntersectingAxes { get { return (new ListOfIfcGridAxisSerializer()).FromAttr(m_instance, "IntersectingAxes"); } }
        public void put_IntersectingAxes(IEnumerable<IfcGridAxis> lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "IntersectingAxes"); }
        public void put_IntersectingAxes_untyped(IEnumerable lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "IntersectingAxes"); }
        public ListOfIfcLengthMeasure OffsetDistances { get { return (new ListOfIfcLengthMeasureSerializer()).FromAttr(m_instance, "OffsetDistances"); } }
        public void put_OffsetDistances(IEnumerable<double> lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "OffsetDistances"); }
        public void put_OffsetDistances_untyped(IEnumerable lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "OffsetDistances"); }

        protected override TextValue WrapperEntityName() { return "IfcVirtualGridIntersection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWall
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWall : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWall
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWall(SdaiInstance instance) : base(instance) { }
        public IfcWall() : base(0) { }

        public static implicit operator IfcWall(SdaiInstance instance) => new IfcWall(instance);

        /// <summary>
        /// Create new instace of IfcWall and returns object of this class to interact with
        /// </summary>
        public static new IfcWall Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWall"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcWall"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWallStandardCase
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWallStandardCase : IfcWall
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWallStandardCase
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWallStandardCase(SdaiInstance instance) : base(instance) { }
        public IfcWallStandardCase() : base(0) { }

        public static implicit operator IfcWallStandardCase(SdaiInstance instance) => new IfcWallStandardCase(instance);

        /// <summary>
        /// Create new instace of IfcWallStandardCase and returns object of this class to interact with
        /// </summary>
        public static new IfcWallStandardCase Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWallStandardCase"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcWallStandardCase"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWallType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWallType : IfcBuildingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWallType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWallType(SdaiInstance instance) : base(instance) { }
        public IfcWallType() : base(0) { }

        public static implicit operator IfcWallType(SdaiInstance instance) => new IfcWallType(instance);

        /// <summary>
        /// Create new instace of IfcWallType and returns object of this class to interact with
        /// </summary>
        public static new IfcWallType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWallType"); Debug.Assert(inst != 0); return inst; }

        public IfcWallTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWallTypeEnum_); return EnumValue<IfcWallTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWallTypeEnum>.FromValue(value.Value, EnumNames.IfcWallTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcWallType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWasteTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWasteTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWasteTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWasteTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcWasteTerminalType() : base(0) { }

        public static implicit operator IfcWasteTerminalType(SdaiInstance instance) => new IfcWasteTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcWasteTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcWasteTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWasteTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcWasteTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWasteTerminalTypeEnum_); return EnumValue<IfcWasteTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWasteTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcWasteTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcWasteTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWaterProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWaterProperties : IfcMaterialProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWaterProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWaterProperties(SdaiInstance instance) : base(instance) { }
        public IfcWaterProperties() : base(0) { }

        public static implicit operator IfcWaterProperties(SdaiInstance instance) => new IfcWaterProperties(instance);

        /// <summary>
        /// Create new instace of IfcWaterProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcWaterProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWaterProperties"); Debug.Assert(inst != 0); return inst; }

        public bool? IsPotable
            {
            get { return get_bool("IsPotable", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsPotable", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public double? Hardness
            {
            get { return get_double("Hardness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Hardness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? AlkalinityConcentration
            {
            get { return get_double("AlkalinityConcentration", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AlkalinityConcentration", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? AcidityConcentration
            {
            get { return get_double("AcidityConcentration", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AcidityConcentration", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ImpuritiesContent
            {
            get { return get_double("ImpuritiesContent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ImpuritiesContent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PHLevel
            {
            get { return get_double("PHLevel", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PHLevel", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DissolvedSolidsContent
            {
            get { return get_double("DissolvedSolidsContent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DissolvedSolidsContent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcWaterProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWindow
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWindow : IfcBuildingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWindow
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWindow(SdaiInstance instance) : base(instance) { }
        public IfcWindow() : base(0) { }

        public static implicit operator IfcWindow(SdaiInstance instance) => new IfcWindow(instance);

        /// <summary>
        /// Create new instace of IfcWindow and returns object of this class to interact with
        /// </summary>
        public static new IfcWindow Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWindow"); Debug.Assert(inst != 0); return inst; }

        public double? OverallHeight
            {
            get { return get_double("OverallHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OverallWidth
            {
            get { return get_double("OverallWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcWindow"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWindowLiningProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWindowLiningProperties : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWindowLiningProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWindowLiningProperties(SdaiInstance instance) : base(instance) { }
        public IfcWindowLiningProperties() : base(0) { }

        public static implicit operator IfcWindowLiningProperties(SdaiInstance instance) => new IfcWindowLiningProperties(instance);

        /// <summary>
        /// Create new instace of IfcWindowLiningProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcWindowLiningProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWindowLiningProperties"); Debug.Assert(inst != 0); return inst; }

        public double? LiningDepth
            {
            get { return get_double("LiningDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LiningThickness
            {
            get { return get_double("LiningThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransomThickness
            {
            get { return get_double("TransomThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransomThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MullionThickness
            {
            get { return get_double("MullionThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MullionThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FirstTransomOffset
            {
            get { return get_double("FirstTransomOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FirstTransomOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SecondTransomOffset
            {
            get { return get_double("SecondTransomOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SecondTransomOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FirstMullionOffset
            {
            get { return get_double("FirstMullionOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FirstMullionOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SecondMullionOffset
            {
            get { return get_double("SecondMullionOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SecondMullionOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcShapeAspect ShapeAspectStyle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcWindowLiningProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWindowPanelProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWindowPanelProperties : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWindowPanelProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWindowPanelProperties(SdaiInstance instance) : base(instance) { }
        public IfcWindowPanelProperties() : base(0) { }

        public static implicit operator IfcWindowPanelProperties(SdaiInstance instance) => new IfcWindowPanelProperties(instance);

        /// <summary>
        /// Create new instace of IfcWindowPanelProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcWindowPanelProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWindowPanelProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcWindowPanelOperationEnum? OperationType 
            { 
            get { var str = get_string("OperationType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowPanelOperationEnum_); return EnumValue<IfcWindowPanelOperationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowPanelOperationEnum>.FromValue(value.Value, EnumNames.IfcWindowPanelOperationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "OperationType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcWindowPanelPositionEnum? PanelPosition 
            { 
            get { var str = get_string("PanelPosition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowPanelPositionEnum_); return EnumValue<IfcWindowPanelPositionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowPanelPositionEnum>.FromValue(value.Value, EnumNames.IfcWindowPanelPositionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PanelPosition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? FrameDepth
            {
            get { return get_double("FrameDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FrameDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FrameThickness
            {
            get { return get_double("FrameThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FrameThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcShapeAspect ShapeAspectStyle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue WrapperEntityName() { return "IfcWindowPanelProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWindowStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWindowStyle : IfcTypeProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWindowStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWindowStyle(SdaiInstance instance) : base(instance) { }
        public IfcWindowStyle() : base(0) { }

        public static implicit operator IfcWindowStyle(SdaiInstance instance) => new IfcWindowStyle(instance);

        /// <summary>
        /// Create new instace of IfcWindowStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcWindowStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWindowStyle"); Debug.Assert(inst != 0); return inst; }

        public IfcWindowStyleConstructionEnum? ConstructionType 
            { 
            get { var str = get_string("ConstructionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowStyleConstructionEnum_); return EnumValue<IfcWindowStyleConstructionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowStyleConstructionEnum>.FromValue(value.Value, EnumNames.IfcWindowStyleConstructionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ConstructionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcWindowStyleOperationEnum? OperationType 
            { 
            get { var str = get_string("OperationType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowStyleOperationEnum_); return EnumValue<IfcWindowStyleOperationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowStyleOperationEnum>.FromValue(value.Value, EnumNames.IfcWindowStyleOperationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "OperationType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? ParameterTakesPrecedence
            {
            get { return get_bool("ParameterTakesPrecedence", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ParameterTakesPrecedence", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? Sizeable
            {
            get { return get_bool("Sizeable", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Sizeable", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcWindowStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWorkControl
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWorkControl : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWorkControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWorkControl(SdaiInstance instance) : base(instance) { }
        public IfcWorkControl() : base(0) { }

        public static implicit operator IfcWorkControl(SdaiInstance instance) => new IfcWorkControl(instance);

        public TextValue Identifier
            {
            get { return get_string("Identifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identifier", ifcengine.sdaiSTRING, value); }
            }

        public IfcDateTimeSelect CreationDate
            {
            get { return new IfcDateTimeSelect(m_instance, "CreationDate", 0); }
            }
        public SetOfIfcPerson Creators { get { return (new SetOfIfcPersonSerializer()).FromAttr(m_instance, "Creators"); } }
        public void put_Creators(IEnumerable<IfcPerson> lst) { (new SetOfIfcPersonSerializer()).ToSdaiAggr(lst, m_instance, "Creators"); }
        public void put_Creators_untyped(IEnumerable lst) { (new SetOfIfcPersonSerializer()).ToSdaiAggr(lst, m_instance, "Creators"); }
        public TextValue Purpose
            {
            get { return get_string("Purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Purpose", ifcengine.sdaiSTRING, value); }
            }
        public double? Duration
            {
            get { return get_double("Duration", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Duration", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TotalFloat
            {
            get { return get_double("TotalFloat", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TotalFloat", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        public IfcDateTimeSelect StartTime
            {
            get { return new IfcDateTimeSelect(m_instance, "StartTime", 0); }
            }

        public IfcDateTimeSelect FinishTime
            {
            get { return new IfcDateTimeSelect(m_instance, "FinishTime", 0); }
            }
        public IfcWorkControlTypeEnum? WorkControlType 
            { 
            get { var str = get_string("WorkControlType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWorkControlTypeEnum_); return EnumValue<IfcWorkControlTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWorkControlTypeEnum>.FromValue(value.Value, EnumNames.IfcWorkControlTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "WorkControlType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedControlType
            {
            get { return get_string("UserDefinedControlType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedControlType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue WrapperEntityName() { return "IfcWorkControl"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWorkPlan
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWorkPlan : IfcWorkControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWorkPlan
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWorkPlan(SdaiInstance instance) : base(instance) { }
        public IfcWorkPlan() : base(0) { }

        public static implicit operator IfcWorkPlan(SdaiInstance instance) => new IfcWorkPlan(instance);

        /// <summary>
        /// Create new instace of IfcWorkPlan and returns object of this class to interact with
        /// </summary>
        public static new IfcWorkPlan Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWorkPlan"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcWorkPlan"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWorkSchedule
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWorkSchedule : IfcWorkControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWorkSchedule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWorkSchedule(SdaiInstance instance) : base(instance) { }
        public IfcWorkSchedule() : base(0) { }

        public static implicit operator IfcWorkSchedule(SdaiInstance instance) => new IfcWorkSchedule(instance);

        /// <summary>
        /// Create new instace of IfcWorkSchedule and returns object of this class to interact with
        /// </summary>
        public static new IfcWorkSchedule Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWorkSchedule"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcWorkSchedule"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcZone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcZone : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcZone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcZone(SdaiInstance instance) : base(instance) { }
        public IfcZone() : base(0) { }

        public static implicit operator IfcZone(SdaiInstance instance) => new IfcZone(instance);

        /// <summary>
        /// Create new instace of IfcZone and returns object of this class to interact with
        /// </summary>
        public static new IfcZone Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcZone"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue WrapperEntityName() { return "IfcZone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcZShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcZShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcZShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcZShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcZShapeProfileDef() : base(0) { }

        public static implicit operator IfcZShapeProfileDef(SdaiInstance instance) => new IfcZShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcZShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcZShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcZShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeWidth
            {
            get { return get_double("FlangeWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebThickness
            {
            get { return get_double("WebThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeThickness
            {
            get { return get_double("FlangeThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FilletRadius
            {
            get { return get_double("FilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EdgeRadius
            {
            get { return get_double("EdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue WrapperEntityName() { return "IfcZShapeProfileDef"; }
    };

}

