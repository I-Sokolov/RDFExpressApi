//
// Early-binding C# API for SDAI (CE wrappers)
//

#pragma warning disable CS1587
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Collections;
using System.Collections.Generic;
using RDF;

#if _WIN64
        using int_t = System.Int64;
#else
		using int_t = System.Int32;
#endif

namespace IFC4x3
    {
    using SdaiModel = int_t;
    using SdaiInstance = int_t;
    using SdaiAggr = int_t;

    using IntValue = int_t;
    using TextValue = String;

    /// <summary>
    /// 
    /// </summary>
    class EnumValue<TEnum> where TEnum : struct, Enum
        {
        static public TEnum? FromIndex(int index)
            {
            var values = System.Enum.GetValues<TEnum>();
            if (index >= 0 && index < values.Length)
                {
                return values[index];
                }
            else
                {
                return null;
                }
            }
        }

    class EnumIndex
        {
        static public int FromString(TextValue value, TextValue[] allStrings)
            {
            for (int i = 0; i < allStrings.Length; i++)
                {
                if (value == allStrings[i])
                    return i;
                }
            return -1;
            }
        }

    class EnumString<TEnum> where TEnum : struct, Enum, IComparable
        {
        public static TextValue FromValue(TEnum value, TextValue[] allStrings)
            {
            var values = System.Enum.GetValues<TEnum>();

            for (int i = 0; i < values.Length; i++)
                {
                if (values[i].Equals(value))
                    {
                    if (i < allStrings.Length)
                        {
                        return allStrings[i];
                        }
                    else
                        {
                        Debug.Assert(false);
                        return null;
                        }
                    }
                }

            Debug.Assert(false);
            return null;
            }
        }

    /// <summary>
    /// Helper class to handle and access SELECT instance data
    /// </summary>
    public class Select
        {
        protected SdaiInstance m_instance;
        protected TextValue m_attrName;

        private IntValue m_adb;
        private Select m_outerSelect;

        public IntValue ADB()
            {
            if (m_outerSelect != null)
                {
                return m_outerSelect.ADB();
                }

            if (m_adb == 0 && m_instance != 0 && m_attrName != null)
                {
                if (0 == ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiADB, out m_adb))
                    {
                    ifcengine.sdaiDeleteADB(m_adb);
                    m_adb = 0;
                    }
                }

            return m_adb;
            }

        protected Select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0)
            {
            Init(instance, attrName, adb);
            }

        protected Select(Select outer)
            {
            m_instance = 0;
            m_attrName = null;
            m_adb = 0;
            m_outerSelect = outer;
            if (m_outerSelect != null)
                {
                m_instance = m_outerSelect.m_instance;
                }
            }

        public void Init(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0)
            {
            Debug.Assert(instance != 0);
            m_instance = instance;
            m_attrName = attrName;
            m_adb = adb;
            m_outerSelect = null;
            }

        protected void SetADB(IntValue adb)
            {
            if (m_outerSelect != null)
                {
                m_outerSelect.SetADB(adb);
                }
            else
                {
                //???sdaiDeleteADB(m_adb);
                m_adb = adb;

                if (m_instance != 0 && m_attrName != null)
                    {
                    ifcengine.sdaiPutAttrBN(m_instance, m_attrName, ifcengine.sdaiADB, m_adb);
                    }
                }
            }

        private bool CheckADBType(IntValue adb, TextValue typeName)
            {
            if (adb == 0)
                {
                return false;
                }

            if (typeName == null)
                {
                return true; //any suitable
                }

            var pPath = ifcengine.sdaiGetADBTypePath(adb, 0);
            var path = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(pPath);

            return path != null && path == typeName;
            }

        public TextValue TypePath
            { get
                {
                var adb = ADB();
                if (adb == 0)
                    {
                    return null;
                    }
                else
                    {
                    return ifcengine.sdaiGetADBTypePathx(adb, 0);
                    }
                }
            }

        //
        //
        protected IntValue? get_IntValue(TextValue typeName, IntValue sdaiType)
            {
            IntValue? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                IntValue val = 0;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        protected void put_IntValue(TextValue typeName, IntValue sdaiType, IntValue? value)
            {
            if (value.HasValue)
                {
                IntValue v = value.Value;
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected double? get_double(TextValue typeName, IntValue sdaiType)
            {
            double? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                double val = 0;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }
        protected bool? get_bool(TextValue typeName, IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiBOOLEAN);
            bool? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                bool val = false;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        //
        protected void put_double(TextValue typeName, IntValue sdaiType, double? value)
            {
            if (value.HasValue)
                {
                double v = value.Value;
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }
        protected void put_bool(TextValue typeName, IntValue sdaiType, bool? value)
            {
            if (value.HasValue)
                {
                bool v = value.Value;
                Debug.Assert(sdaiType == ifcengine.sdaiBOOLEAN);
                var adb = ifcengine.sdaiCreateADB(sdaiType, ref v);
                ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected TextValue getTextValue(TextValue typeName, IntValue sdaiType)
            {
            TextValue ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                string val;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                    {
                    ret = val;
                    }
                }
            return ret;
            }

        //
        protected void putTextValue(TextValue typeName, IntValue sdaiType, TextValue value)
            {
            var adb = ifcengine.sdaiCreateADB(sdaiType, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected int getEnumerationIndex(TextValue typeName, TextValue[] rEnumValues)
            {
            int ret = -1;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                string value;
                if (0 != ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiENUM, out value))
                    {
                    ret = EnumIndex.FromString(value, rEnumValues);
                    }
                }
            return ret;
            }

        //
        protected void putEnumerationValue(TextValue typeName, TextValue value)
            {
            var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiENUM, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected SdaiInstance getEntityInstance(TextValue typeName)
            {
            SdaiInstance ret = 0;
            var adb = ADB();
            if (adb != 0)
                {
                SdaiInstance inst = 0;
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiINSTANCE, out inst) != 0)
                    {
                    if (typeName == null || ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                        {
                        ret = inst;
                        }
                    }
                }
            return ret;
            }

        //
        protected void putEntityInstance(TextValue typeName, SdaiInstance inst)
            {
            if (inst == 0 || ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                {
                var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiINSTANCE, inst);
                SetADB(adb);
                }
            else
                {
                Debug.Assert(false);
                }
            }

        //
        protected SdaiAggr getAggrValue(TextValue typeName)
            {
            SdaiAggr ret = 0;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
                {
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiAGGR, out ret) == 0)
                    {
                    ret = 0;
                    }
                }
            return ret;
            }

        //
        protected void putAggrValue(TextValue typeName, SdaiAggr value)
            {
            var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiAGGR, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
            }

        //
        protected bool IsADBType(TextValue typeName)
            {
            var adb = ADB();
            return CheckADBType(adb, typeName);
            }

        protected bool IsADBEntity(TextValue typeName)
            {
            var adb = ADB();
            if (adb != 0)
                {
                SdaiInstance inst = 0;
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiINSTANCE, out inst) != 0)
                    {
                    if (ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                        {
                        return true;
                        }
                    }
                }
            return false;
            }
        };

    /// <summary>
    /// Aggregations templates
    /// </summary>
    /// 
    interface IAggrSerializerObj
        {
        public abstract IList FromSdaiAggrUntyped(SdaiInstance inst, SdaiAggr aggr);
        public abstract SdaiAggr ToSdaiAggr(IEnumerable lst, SdaiInstance instance, TextValue attrName);

        }

    abstract class AggrSerializer<TElem, TList> : IAggrSerializerObj
        where TList : List<TElem>, new()
        {
        //
        public TList FromAttr(SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = 0;
            ifcengine.sdaiGetAttrBN(instance, attrName, ifcengine.sdaiAGGR, out aggr);
            return FromSdaiAggr(instance, aggr);
            }

        //
        public TList FromSdaiAggr(SdaiInstance inst, SdaiAggr aggr)
            {
            var ret = new TList();
            IntValue cnt = ifcengine.sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++)
                {
                TElem elem;
                if (GetAggrElement(inst, aggr, i, out elem))
                    {
                    ret.Add(elem);
                    }
                }
            return ret;
            }

        public SdaiAggr ToSdaiAggr(IEnumerable<TElem> lst, SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = ifcengine.sdaiCreateAggrBN(instance, attrName);
            foreach (var v in lst)
                {
                AppendAggrElement(instance, aggr, v);
                }
            return aggr;
            }

        public SdaiAggr ToSdaiAggr(IEnumerable lst, SdaiInstance instance, TextValue attrName)
            {
            SdaiAggr aggr = ifcengine.sdaiCreateAggrBN(instance, attrName);
            foreach (var v in lst)
                {
                AppendAggrElement(instance, aggr, (TElem)v);
                }
            return aggr;
            }

        protected abstract bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TElem elem);
        protected abstract void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TElem elem);

        IList IAggrSerializerObj.FromSdaiAggrUntyped(SdaiInstance inst, SdaiAggr aggr)
            {
            return FromSdaiAggr(inst, aggr);
            }
        }

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_IntValue<TElem, TList> : AggrSerializer<IntValue, TList>
        where TList : List<IntValue>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out IntValue elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiINTEGER, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiINTEGER, ref elem);
            }
        };

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_double<TElem, TList> : AggrSerializer<double, TList>
        where TList : List<double>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out double elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiREAL, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, double elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiREAL, ref elem);
            }
        };

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_bool<TElem, TList> : AggrSerializer<bool, TList>
        where TList : List<bool>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out bool elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiBOOLEAN, out elem);
            return true;
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, bool elem)
            {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiBOOLEAN, ref elem);
            }
        };

    class AggrSerializerText<TElem, TList> : AggrSerializer<TextValue, TList>
        where TList : List<TextValue>, new()
        {
        private IntValue m_sdaiType;

        public AggrSerializerText(IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiSTRING || sdaiType == ifcengine.sdaiBINARY);
            m_sdaiType = sdaiType;
            }
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TextValue elem)
            {
            ifcengine.sdaiGetAggrByIndex(aggr, i, m_sdaiType, out elem);
            return (elem != null);
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TextValue elem)
            {
            ifcengine.sdaiAppend(aggr, m_sdaiType, elem);
            }
        };

    class AggrSerializerInstance<TElem, TList> : AggrSerializer<TElem, TList>
        where TElem : Entity, new()
        where TList : List<TElem>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TElem elem)
            {
            SdaiInstance val = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiINSTANCE, out val);
            elem = new TElem();
            elem.Set(val);
            return (elem != 0);
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TElem elem)
            {
            SdaiInstance v = elem;
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiINSTANCE, v);
            }
        };

    class AggrSerializerEnum<TEnum, TList> : AggrSerializer<TEnum, TList>
        where TEnum : struct, Enum
        where TList : List<TEnum>, new()
        {
        private IntValue m_sdaiType;
        private TextValue[] m_EnumValues;

        public AggrSerializerEnum(TextValue[] enumValues, IntValue sdaiType)
            {
            Debug.Assert(sdaiType == ifcengine.sdaiENUM || sdaiType == ifcengine.sdaiLOGICAL);
            m_EnumValues = enumValues;
            m_sdaiType = sdaiType;
            }

        //
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TEnum elem)
            {
            string value;
            ifcengine.sdaiGetAggrByIndex(aggr, i, m_sdaiType, out value);
            var ind = EnumIndex.FromString(value, m_EnumValues);
            var val = EnumValue<TEnum>.FromIndex(ind);
            if (val.HasValue)
                {
                elem = val.Value;
                return true;
                }
            else
                {
                elem = EnumValue<TEnum>.FromIndex(0).Value;
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TEnum elem)
            {
            var value = EnumString<TEnum>.FromValue(elem, m_EnumValues);
            ifcengine.sdaiAppend(aggr, m_sdaiType, value);
            }
        }
    /// <summary>
    /// 
    /// </summary>
    class AggrSerializerAggr<TNestedAggr, TNestedSerializer, TList> : AggrSerializer<TNestedAggr, TList>
                    where TNestedAggr : IEnumerable
                    where TNestedSerializer : IAggrSerializerObj, new()
                    where TList : List<TNestedAggr>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TNestedAggr elem)
            {
            SdaiAggr nested = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiAGGR, out nested);
            if (nested != 0)
                {
                var nestedSerializer = new TNestedSerializer();
                elem = (TNestedAggr)nestedSerializer.FromSdaiAggrUntyped(inst, nested);
                return true;
                }
            else
                {
                elem = default(TNestedAggr);
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TNestedAggr elem)
            {
            var nestedSerializer = new TNestedSerializer();
            SdaiAggr nested = nestedSerializer.ToSdaiAggr(elem, inst, null);
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiAGGR, nested);
            }
        };

    class AggrSerializerSelect<TSelect, TList> : AggrSerializer<TSelect, TList>
        where TSelect : Select, new()
        where TList : List<TSelect>, new()
        {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TSelect elem)
            {
            IntValue adb = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiADB, out adb);
            if (adb != 0)
                {
                elem = new TSelect();
                elem.Init(inst, null, adb);
                return true;
                }
            else
                {
                elem = null;
                return false;
                }
            }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TSelect elem)
            {
            var adb = elem.ADB();
            if (adb != 0)
                {
                ifcengine.sdaiAppend((IntValue)aggr, ifcengine.sdaiADB, adb);
                }
            }
        };

    /// <summary>
    /// Provides utility methods to interact with a generic SDAI instnace
    /// You also can use object of this class instead of SdaiInstance handle in any place where the handle is required
    /// </summary>
    public abstract class Entity : IEquatable<Entity>, IComparable, IComparable<Entity>
        {
        public static Entity Create(SdaiModel model) { System.Diagnostics.Debug.Assert(false); return null; }

        //
        public long _stepID { get { return m_instance != 0 ? ifcengine.internalGetP21Line(m_instance) : 0; } }
        public string _entityName { get
                {
                if (m_instance != 0)
                    {
                    var type = ifcengine.sdaiGetInstanceType(m_instance);
                    if (type != 0)
                        return ifcengine.engiGetEntityName(type);
                    }
                return null;
                } }

        //
        protected SdaiInstance m_instance = 0;

        public Entity(SdaiInstance instance)
            {
            Set(instance);
            }

        public void Set(SdaiInstance instance)
            {
            m_instance = instance;

            if (m_instance != 0)
                {
                if (ifcengine.sdaiIsKindOfBN(m_instance, EntityName()) == 0)
                    {
                    m_instance = 0;
                    }
                }
            }

        protected abstract TextValue EntityName();

        /// <summary>
        /// Conversion to instance handle, so the object of the class can be used anywhere where a handle required
        /// </summary>
        public static implicit operator SdaiInstance(Entity instance) => instance.m_instance;

        protected TextValue get_string(TextValue attrName, IntValue sdaiType)
            {
            string value;
            if (0 != ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out value))
                {
                return value;
                }
            else
                {
                return null;
                }
            }
        public double? get_double(TextValue attrName, IntValue sdaiType)
            {
            double val = 0;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }
        public IntValue? get_IntValue(TextValue attrName, IntValue sdaiType)
            {
            IntValue val = 0;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }
        public bool? get_bool(TextValue attrName, IntValue sdaiType)
            {
            bool val = false;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
            }

        /// <summary>
        /// 
        /// </summary>
        public static bool operator ==(Entity i1, Entity i2) => (Equals(i1, i2));
        public static bool operator !=(Entity i1, Entity i2) => (!(i1 == i2));
        public override bool Equals(Object obj)
            {
            return Equals(obj as Entity);
            }
        public bool Equals(Entity other)
            {
            return (other == null) ? false : (other.m_instance == m_instance);
            }
        public int CompareTo(object obj)
            {
            return CompareTo(obj as Entity);
            }
        public int CompareTo(Entity other)
            {
            return (other == null) ? 1 : m_instance.CompareTo(other.m_instance);
            }
        public override int GetHashCode()
            {
            return m_instance.GetHashCode();
            }
        }


    //
    // Enumerations
    //
    public enum LOGICAL_VALUE { False = 0, True = 1, Unknown = 2 };

    public enum IfcActionRequestTypeEnum
        {
        EMAIL = 0,
        FAX = 1,
        PHONE = 2,
        POST = 3,
        VERBAL = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcActionSourceTypeEnum
        {
        BRAKES = 0,
        BUOYANCY = 1,
        COMPLETION_G1 = 2,
        CREEP = 3,
        CURRENT = 4,
        DEAD_LOAD_G = 5,
        EARTHQUAKE_E = 6,
        ERECTION = 7,
        FIRE = 8,
        ICE = 9,
        IMPACT = 10,
        IMPULSE = 11,
        LACK_OF_FIT = 12,
        LIVE_LOAD_Q = 13,
        PRESTRESSING_P = 14,
        PROPPING = 15,
        RAIN = 16,
        SETTLEMENT_U = 17,
        SHRINKAGE = 18,
        SNOW_S = 19,
        SYSTEM_IMPERFECTION = 20,
        TEMPERATURE_T = 21,
        TRANSPORT = 22,
        WAVE = 23,
        WIND_W = 24,
        USERDEFINED = 25,
        NOTDEFINED = 26,
        };

    public enum IfcActionTypeEnum
        {
        EXTRAORDINARY_A = 0,
        PERMANENT_G = 1,
        VARIABLE_Q = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcActuatorTypeEnum
        {
        ELECTRICACTUATOR = 0,
        HANDOPERATEDACTUATOR = 1,
        HYDRAULICACTUATOR = 2,
        PNEUMATICACTUATOR = 3,
        THERMOSTATICACTUATOR = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcAddressTypeEnum
        {
        DISTRIBUTIONPOINT = 0,
        HOME = 1,
        OFFICE = 2,
        SITE = 3,
        USERDEFINED = 4,
        };

    public enum IfcAirTerminalBoxTypeEnum
        {
        CONSTANTFLOW = 0,
        VARIABLEFLOWPRESSUREDEPENDANT = 1,
        VARIABLEFLOWPRESSUREINDEPENDANT = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcAirTerminalTypeEnum
        {
        DIFFUSER = 0,
        GRILLE = 1,
        LOUVRE = 2,
        REGISTER = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcAirToAirHeatRecoveryTypeEnum
        {
        FIXEDPLATECOUNTERFLOWEXCHANGER = 0,
        FIXEDPLATECROSSFLOWEXCHANGER = 1,
        FIXEDPLATEPARALLELFLOWEXCHANGER = 2,
        HEATPIPE = 3,
        ROTARYWHEEL = 4,
        RUNAROUNDCOILLOOP = 5,
        THERMOSIPHONCOILTYPEHEATEXCHANGERS = 6,
        THERMOSIPHONSEALEDTUBEHEATEXCHANGERS = 7,
        TWINTOWERENTHALPYRECOVERYLOOPS = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcAlarmTypeEnum
        {
        BELL = 0,
        BREAKGLASSBUTTON = 1,
        LIGHT = 2,
        MANUALPULLBOX = 3,
        RAILWAYCROCODILE = 4,
        RAILWAYDETONATOR = 5,
        SIREN = 6,
        WHISTLE = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcAlignmentCantSegmentTypeEnum
        {
        BLOSSCURVE = 0,
        CONSTANTCANT = 1,
        COSINECURVE = 2,
        HELMERTCURVE = 3,
        LINEARTRANSITION = 4,
        SINECURVE = 5,
        VIENNESEBEND = 6,
        };

    public enum IfcAlignmentHorizontalSegmentTypeEnum
        {
        BLOSSCURVE = 0,
        CIRCULARARC = 1,
        CLOTHOID = 2,
        COSINECURVE = 3,
        CUBIC = 4,
        HELMERTCURVE = 5,
        LINE = 6,
        SINECURVE = 7,
        VIENNESEBEND = 8,
        };

    public enum IfcAlignmentTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcAlignmentVerticalSegmentTypeEnum
        {
        CIRCULARARC = 0,
        CLOTHOID = 1,
        CONSTANTGRADIENT = 2,
        PARABOLICARC = 3,
        };

    public enum IfcAnalysisModelTypeEnum
        {
        IN_PLANE_LOADING_2D = 0,
        LOADING_3D = 1,
        OUT_PLANE_LOADING_2D = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcAnalysisTheoryTypeEnum
        {
        FIRST_ORDER_THEORY = 0,
        FULL_NONLINEAR_THEORY = 1,
        SECOND_ORDER_THEORY = 2,
        THIRD_ORDER_THEORY = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcAnnotationTypeEnum
        {
        CONTOURLINE = 0,
        DIMENSION = 1,
        ISOBAR = 2,
        ISOLUX = 3,
        ISOTHERM = 4,
        LEADER = 5,
        SURVEY = 6,
        SYMBOL = 7,
        TEXT = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcArithmeticOperatorEnum
        {
        ADD = 0,
        DIVIDE = 1,
        MODULO = 2,
        MULTIPLY = 3,
        SUBTRACT = 4,
        };

    public enum IfcAssemblyPlaceEnum
        {
        FACTORY = 0,
        SITE = 1,
        NOTDEFINED = 2,
        };

    public enum IfcAudioVisualApplianceTypeEnum
        {
        AMPLIFIER = 0,
        CAMERA = 1,
        COMMUNICATIONTERMINAL = 2,
        DISPLAY = 3,
        MICROPHONE = 4,
        PLAYER = 5,
        PROJECTOR = 6,
        RECEIVER = 7,
        RECORDINGEQUIPMENT = 8,
        SPEAKER = 9,
        SWITCHER = 10,
        TELEPHONE = 11,
        TUNER = 12,
        USERDEFINED = 13,
        NOTDEFINED = 14,
        };

    public enum IfcBeamTypeEnum
        {
        BEAM = 0,
        CORNICE = 1,
        DIAPHRAGM = 2,
        EDGEBEAM = 3,
        GIRDER_SEGMENT = 4,
        HATSTONE = 5,
        HOLLOWCORE = 6,
        JOIST = 7,
        LINTEL = 8,
        PIERCAP = 9,
        SPANDREL = 10,
        T_BEAM = 11,
        USERDEFINED = 12,
        NOTDEFINED = 13,
        };

    public enum IfcBearingTypeEnum
        {
        CYLINDRICAL = 0,
        DISK = 1,
        ELASTOMERIC = 2,
        GUIDE = 3,
        POT = 4,
        ROCKER = 5,
        ROLLER = 6,
        SPHERICAL = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcBenchmarkEnum
        {
        EQUALTO = 0,
        GREATERTHAN = 1,
        GREATERTHANOREQUALTO = 2,
        INCLUDEDIN = 3,
        INCLUDES = 4,
        LESSTHAN = 5,
        LESSTHANOREQUALTO = 6,
        NOTEQUALTO = 7,
        NOTINCLUDEDIN = 8,
        NOTINCLUDES = 9,
        };

    public enum IfcBoilerTypeEnum
        {
        STEAM = 0,
        WATER = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcBooleanOperator
        {
        DIFFERENCE = 0,
        INTERSECTION = 1,
        UNION = 2,
        };

    public enum IfcBridgePartTypeEnum
        {
        ABUTMENT = 0,
        DECK = 1,
        DECK_SEGMENT = 2,
        FOUNDATION = 3,
        PIER = 4,
        PIER_SEGMENT = 5,
        PYLON = 6,
        SUBSTRUCTURE = 7,
        SUPERSTRUCTURE = 8,
        SURFACESTRUCTURE = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        };

    public enum IfcBridgeTypeEnum
        {
        ARCHED = 0,
        CABLE_STAYED = 1,
        CANTILEVER = 2,
        CULVERT = 3,
        FRAMEWORK = 4,
        GIRDER = 5,
        SUSPENSION = 6,
        TRUSS = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcBSplineCurveForm
        {
        CIRCULAR_ARC = 0,
        ELLIPTIC_ARC = 1,
        HYPERBOLIC_ARC = 2,
        PARABOLIC_ARC = 3,
        POLYLINE_FORM = 4,
        UNSPECIFIED = 5,
        };

    public enum IfcBSplineSurfaceForm
        {
        CONICAL_SURF = 0,
        CYLINDRICAL_SURF = 1,
        GENERALISED_CONE = 2,
        PLANE_SURF = 3,
        QUADRIC_SURF = 4,
        RULED_SURF = 5,
        SPHERICAL_SURF = 6,
        SURF_OF_LINEAR_EXTRUSION = 7,
        SURF_OF_REVOLUTION = 8,
        TOROIDAL_SURF = 9,
        UNSPECIFIED = 10,
        };

    public enum IfcBuildingElementPartTypeEnum
        {
        APRON = 0,
        ARMOURUNIT = 1,
        INSULATION = 2,
        PRECASTPANEL = 3,
        SAFETYCAGE = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcBuildingElementProxyTypeEnum
        {
        COMPLEX = 0,
        ELEMENT = 1,
        PARTIAL = 2,
        PROVISIONFORSPACE = 3,
        PROVISIONFORVOID = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcBuildingSystemTypeEnum
        {
        FENESTRATION = 0,
        FOUNDATION = 1,
        LOADBEARING = 2,
        OUTERSHELL = 3,
        SHADING = 4,
        TRANSPORT = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcBuiltSystemTypeEnum
        {
        EROSIONPREVENTION = 0,
        FENESTRATION = 1,
        FOUNDATION = 2,
        LOADBEARING = 3,
        MOORING = 4,
        OUTERSHELL = 5,
        PRESTRESSING = 6,
        RAILWAYLINE = 7,
        RAILWAYTRACK = 8,
        REINFORCING = 9,
        SHADING = 10,
        TRACKCIRCUIT = 11,
        TRANSPORT = 12,
        USERDEFINED = 13,
        NOTDEFINED = 14,
        };

    public enum IfcBurnerTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcCableCarrierFittingTypeEnum
        {
        BEND = 0,
        CONNECTOR = 1,
        CROSS = 2,
        JUNCTION = 3,
        REDUCER = 4,
        TEE = 5,
        TRANSITION = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcCableCarrierSegmentTypeEnum
        {
        CABLEBRACKET = 0,
        CABLELADDERSEGMENT = 1,
        CABLETRAYSEGMENT = 2,
        CABLETRUNKINGSEGMENT = 3,
        CATENARYWIRE = 4,
        CONDUITSEGMENT = 5,
        DROPPER = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcCableFittingTypeEnum
        {
        CONNECTOR = 0,
        ENTRY = 1,
        EXIT = 2,
        FANOUT = 3,
        JUNCTION = 4,
        TRANSITION = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcCableSegmentTypeEnum
        {
        BUSBARSEGMENT = 0,
        CABLESEGMENT = 1,
        CONDUCTORSEGMENT = 2,
        CONTACTWIRESEGMENT = 3,
        CORESEGMENT = 4,
        FIBERSEGMENT = 5,
        FIBERTUBE = 6,
        OPTICALCABLESEGMENT = 7,
        STITCHWIRE = 8,
        WIREPAIRSEGMENT = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        };

    public enum IfcCaissonFoundationTypeEnum
        {
        CAISSON = 0,
        WELL = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcChangeActionEnum
        {
        ADDED = 0,
        DELETED = 1,
        MODIFIED = 2,
        NOCHANGE = 3,
        NOTDEFINED = 4,
        };

    public enum IfcChillerTypeEnum
        {
        AIRCOOLED = 0,
        HEATRECOVERY = 1,
        WATERCOOLED = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcChimneyTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcCoilTypeEnum
        {
        DXCOOLINGCOIL = 0,
        ELECTRICHEATINGCOIL = 1,
        GASHEATINGCOIL = 2,
        HYDRONICCOIL = 3,
        STEAMHEATINGCOIL = 4,
        WATERCOOLINGCOIL = 5,
        WATERHEATINGCOIL = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcColumnTypeEnum
        {
        COLUMN = 0,
        PIERSTEM = 1,
        PIERSTEM_SEGMENT = 2,
        PILASTER = 3,
        STANDCOLUMN = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcCommunicationsApplianceTypeEnum
        {
        ANTENNA = 0,
        AUTOMATON = 1,
        COMPUTER = 2,
        FAX = 3,
        GATEWAY = 4,
        INTELLIGENTPERIPHERAL = 5,
        IPNETWORKEQUIPMENT = 6,
        LINESIDEELECTRONICUNIT = 7,
        MODEM = 8,
        NETWORKAPPLIANCE = 9,
        NETWORKBRIDGE = 10,
        NETWORKHUB = 11,
        OPTICALLINETERMINAL = 12,
        OPTICALNETWORKUNIT = 13,
        PRINTER = 14,
        RADIOBLOCKCENTER = 15,
        REPEATER = 16,
        ROUTER = 17,
        SCANNER = 18,
        TELECOMMAND = 19,
        TELEPHONYEXCHANGE = 20,
        TRANSITIONCOMPONENT = 21,
        TRANSPONDER = 22,
        TRANSPORTEQUIPMENT = 23,
        USERDEFINED = 24,
        NOTDEFINED = 25,
        };

    public enum IfcComplexPropertyTemplateTypeEnum
        {
        P_COMPLEX = 0,
        Q_COMPLEX = 1,
        };

    public enum IfcCompressorTypeEnum
        {
        BOOSTER = 0,
        DYNAMIC = 1,
        HERMETIC = 2,
        OPENTYPE = 3,
        RECIPROCATING = 4,
        ROLLINGPISTON = 5,
        ROTARY = 6,
        ROTARYVANE = 7,
        SCROLL = 8,
        SEMIHERMETIC = 9,
        SINGLESCREW = 10,
        SINGLESTAGE = 11,
        TROCHOIDAL = 12,
        TWINSCREW = 13,
        WELDEDSHELLHERMETIC = 14,
        USERDEFINED = 15,
        NOTDEFINED = 16,
        };

    public enum IfcCondenserTypeEnum
        {
        AIRCOOLED = 0,
        EVAPORATIVECOOLED = 1,
        WATERCOOLED = 2,
        WATERCOOLEDBRAZEDPLATE = 3,
        WATERCOOLEDSHELLCOIL = 4,
        WATERCOOLEDSHELLTUBE = 5,
        WATERCOOLEDTUBEINTUBE = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcConnectionTypeEnum
        {
        ATEND = 0,
        ATPATH = 1,
        ATSTART = 2,
        NOTDEFINED = 3,
        };

    public enum IfcConstraintEnum
        {
        ADVISORY = 0,
        HARD = 1,
        SOFT = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcConstructionEquipmentResourceTypeEnum
        {
        DEMOLISHING = 0,
        EARTHMOVING = 1,
        ERECTING = 2,
        HEATING = 3,
        LIGHTING = 4,
        PAVING = 5,
        PUMPING = 6,
        TRANSPORTING = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcConstructionMaterialResourceTypeEnum
        {
        AGGREGATES = 0,
        CONCRETE = 1,
        DRYWALL = 2,
        FUEL = 3,
        GYPSUM = 4,
        MASONRY = 5,
        METAL = 6,
        PLASTIC = 7,
        WOOD = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcConstructionProductResourceTypeEnum
        {
        ASSEMBLY = 0,
        FORMWORK = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcControllerTypeEnum
        {
        FLOATING = 0,
        MULTIPOSITION = 1,
        PROGRAMMABLE = 2,
        PROPORTIONAL = 3,
        TWOPOSITION = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcConveyorSegmentTypeEnum
        {
        BELTCONVEYOR = 0,
        BUCKETCONVEYOR = 1,
        CHUTECONVEYOR = 2,
        SCREWCONVEYOR = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcCooledBeamTypeEnum
        {
        ACTIVE = 0,
        PASSIVE = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcCoolingTowerTypeEnum
        {
        MECHANICALFORCEDDRAFT = 0,
        MECHANICALINDUCEDDRAFT = 1,
        NATURALDRAFT = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcCostItemTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcCostScheduleTypeEnum
        {
        BUDGET = 0,
        COSTPLAN = 1,
        ESTIMATE = 2,
        PRICEDBILLOFQUANTITIES = 3,
        SCHEDULEOFRATES = 4,
        TENDER = 5,
        UNPRICEDBILLOFQUANTITIES = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcCourseTypeEnum
        {
        ARMOUR = 0,
        BALLASTBED = 1,
        CORE = 2,
        FILTER = 3,
        PAVEMENT = 4,
        PROTECTION = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcCoveringTypeEnum
        {
        CEILING = 0,
        CLADDING = 1,
        COPING = 2,
        FLOORING = 3,
        INSULATION = 4,
        MEMBRANE = 5,
        MOLDING = 6,
        ROOFING = 7,
        SKIRTINGBOARD = 8,
        SLEEVING = 9,
        TOPPING = 10,
        WRAPPING = 11,
        USERDEFINED = 12,
        NOTDEFINED = 13,
        };

    public enum IfcCrewResourceTypeEnum
        {
        OFFICE = 0,
        SITE = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcCurtainWallTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcCurveInterpolationEnum
        {
        LINEAR = 0,
        LOG_LINEAR = 1,
        LOG_LOG = 2,
        NOTDEFINED = 3,
        };

    public enum IfcDamperTypeEnum
        {
        BACKDRAFTDAMPER = 0,
        BALANCINGDAMPER = 1,
        BLASTDAMPER = 2,
        CONTROLDAMPER = 3,
        FIREDAMPER = 4,
        FIRESMOKEDAMPER = 5,
        FUMEHOODEXHAUST = 6,
        GRAVITYDAMPER = 7,
        GRAVITYRELIEFDAMPER = 8,
        RELIEFDAMPER = 9,
        SMOKEDAMPER = 10,
        USERDEFINED = 11,
        NOTDEFINED = 12,
        };

    public enum IfcDataOriginEnum
        {
        MEASURED = 0,
        PREDICTED = 1,
        SIMULATED = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcDerivedUnitEnum
        {
        ACCELERATIONUNIT = 0,
        ANGULARVELOCITYUNIT = 1,
        AREADENSITYUNIT = 2,
        COMPOUNDPLANEANGLEUNIT = 3,
        CURVATUREUNIT = 4,
        DYNAMICVISCOSITYUNIT = 5,
        HEATFLUXDENSITYUNIT = 6,
        HEATINGVALUEUNIT = 7,
        INTEGERCOUNTRATEUNIT = 8,
        IONCONCENTRATIONUNIT = 9,
        ISOTHERMALMOISTURECAPACITYUNIT = 10,
        KINEMATICVISCOSITYUNIT = 11,
        LINEARFORCEUNIT = 12,
        LINEARMOMENTUNIT = 13,
        LINEARSTIFFNESSUNIT = 14,
        LINEARVELOCITYUNIT = 15,
        LUMINOUSINTENSITYDISTRIBUTIONUNIT = 16,
        MASSDENSITYUNIT = 17,
        MASSFLOWRATEUNIT = 18,
        MASSPERLENGTHUNIT = 19,
        MODULUSOFELASTICITYUNIT = 20,
        MODULUSOFLINEARSUBGRADEREACTIONUNIT = 21,
        MODULUSOFROTATIONALSUBGRADEREACTIONUNIT = 22,
        MODULUSOFSUBGRADEREACTIONUNIT = 23,
        MOISTUREDIFFUSIVITYUNIT = 24,
        MOLECULARWEIGHTUNIT = 25,
        MOMENTOFINERTIAUNIT = 26,
        PHUNIT = 27,
        PLANARFORCEUNIT = 28,
        ROTATIONALFREQUENCYUNIT = 29,
        ROTATIONALMASSUNIT = 30,
        ROTATIONALSTIFFNESSUNIT = 31,
        SECTIONAREAINTEGRALUNIT = 32,
        SECTIONMODULUSUNIT = 33,
        SHEARMODULUSUNIT = 34,
        SOUNDPOWERLEVELUNIT = 35,
        SOUNDPOWERUNIT = 36,
        SOUNDPRESSURELEVELUNIT = 37,
        SOUNDPRESSUREUNIT = 38,
        SPECIFICHEATCAPACITYUNIT = 39,
        TEMPERATUREGRADIENTUNIT = 40,
        TEMPERATURERATEOFCHANGEUNIT = 41,
        THERMALADMITTANCEUNIT = 42,
        THERMALCONDUCTANCEUNIT = 43,
        THERMALEXPANSIONCOEFFICIENTUNIT = 44,
        THERMALRESISTANCEUNIT = 45,
        THERMALTRANSMITTANCEUNIT = 46,
        TORQUEUNIT = 47,
        VAPORPERMEABILITYUNIT = 48,
        VOLUMETRICFLOWRATEUNIT = 49,
        WARPINGCONSTANTUNIT = 50,
        WARPINGMOMENTUNIT = 51,
        USERDEFINED = 52,
        };

    public enum IfcDirectionSenseEnum
        {
        NEGATIVE = 0,
        POSITIVE = 1,
        };

    public enum IfcDiscreteAccessoryTypeEnum
        {
        ANCHORPLATE = 0,
        BIRDPROTECTION = 1,
        BRACKET = 2,
        CABLEARRANGER = 3,
        ELASTIC_CUSHION = 4,
        EXPANSION_JOINT_DEVICE = 5,
        FILLER = 6,
        FLASHING = 7,
        INSULATOR = 8,
        LOCK = 9,
        PANEL_STRENGTHENING = 10,
        POINTMACHINEMOUNTINGDEVICE = 11,
        POINT_MACHINE_LOCKING_DEVICE = 12,
        RAILBRACE = 13,
        RAILPAD = 14,
        RAIL_LUBRICATION = 15,
        RAIL_MECHANICAL_EQUIPMENT = 16,
        SHOE = 17,
        SLIDINGCHAIR = 18,
        SOUNDABSORPTION = 19,
        TENSIONINGEQUIPMENT = 20,
        USERDEFINED = 21,
        NOTDEFINED = 22,
        };

    public enum IfcDistributionBoardTypeEnum
        {
        CONSUMERUNIT = 0,
        DISPATCHINGBOARD = 1,
        DISTRIBUTIONBOARD = 2,
        DISTRIBUTIONFRAME = 3,
        MOTORCONTROLCENTRE = 4,
        SWITCHBOARD = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcDistributionChamberElementTypeEnum
        {
        FORMEDDUCT = 0,
        INSPECTIONCHAMBER = 1,
        INSPECTIONPIT = 2,
        MANHOLE = 3,
        METERCHAMBER = 4,
        SUMP = 5,
        TRENCH = 6,
        VALVECHAMBER = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcDistributionPortTypeEnum
        {
        CABLE = 0,
        CABLECARRIER = 1,
        DUCT = 2,
        PIPE = 3,
        WIRELESS = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcDistributionSystemEnum
        {
        AIRCONDITIONING = 0,
        AUDIOVISUAL = 1,
        CATENARY_SYSTEM = 2,
        CHEMICAL = 3,
        CHILLEDWATER = 4,
        COMMUNICATION = 5,
        COMPRESSEDAIR = 6,
        CONDENSERWATER = 7,
        CONTROL = 8,
        CONVEYING = 9,
        DATA = 10,
        DISPOSAL = 11,
        DOMESTICCOLDWATER = 12,
        DOMESTICHOTWATER = 13,
        DRAINAGE = 14,
        EARTHING = 15,
        ELECTRICAL = 16,
        ELECTROACOUSTIC = 17,
        EXHAUST = 18,
        FIREPROTECTION = 19,
        FIXEDTRANSMISSIONNETWORK = 20,
        FUEL = 21,
        GAS = 22,
        HAZARDOUS = 23,
        HEATING = 24,
        LIGHTING = 25,
        LIGHTNINGPROTECTION = 26,
        MOBILENETWORK = 27,
        MONITORINGSYSTEM = 28,
        MUNICIPALSOLIDWASTE = 29,
        OIL = 30,
        OPERATIONAL = 31,
        OPERATIONALTELEPHONYSYSTEM = 32,
        OVERHEAD_CONTACTLINE_SYSTEM = 33,
        POWERGENERATION = 34,
        RAINWATER = 35,
        REFRIGERATION = 36,
        RETURN_CIRCUIT = 37,
        SECURITY = 38,
        SEWAGE = 39,
        SIGNAL = 40,
        STORMWATER = 41,
        TELEPHONE = 42,
        TV = 43,
        VACUUM = 44,
        VENT = 45,
        VENTILATION = 46,
        WASTEWATER = 47,
        WATERSUPPLY = 48,
        USERDEFINED = 49,
        NOTDEFINED = 50,
        };

    public enum IfcDocumentConfidentialityEnum
        {
        CONFIDENTIAL = 0,
        PERSONAL = 1,
        PUBLIC = 2,
        RESTRICTED = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcDocumentStatusEnum
        {
        DRAFT = 0,
        FINAL = 1,
        FINALDRAFT = 2,
        REVISION = 3,
        NOTDEFINED = 4,
        };

    public enum IfcDoorPanelOperationEnum
        {
        DOUBLE_ACTING = 0,
        FIXEDPANEL = 1,
        FOLDING = 2,
        REVOLVING = 3,
        ROLLINGUP = 4,
        SLIDING = 5,
        SWINGING = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcDoorPanelPositionEnum
        {
        LEFT = 0,
        MIDDLE = 1,
        RIGHT = 2,
        NOTDEFINED = 3,
        };

    public enum IfcDoorTypeEnum
        {
        BOOM_BARRIER = 0,
        DOOR = 1,
        GATE = 2,
        TRAPDOOR = 3,
        TURNSTILE = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcDoorTypeOperationEnum
        {
        DOUBLE_DOOR_DOUBLE_SWING = 0,
        DOUBLE_DOOR_FOLDING = 1,
        DOUBLE_DOOR_LIFTING_VERTICAL = 2,
        DOUBLE_DOOR_SINGLE_SWING = 3,
        DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT = 4,
        DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT = 5,
        DOUBLE_DOOR_SLIDING = 6,
        DOUBLE_SWING_LEFT = 7,
        DOUBLE_SWING_RIGHT = 8,
        FOLDING_TO_LEFT = 9,
        FOLDING_TO_RIGHT = 10,
        LIFTING_HORIZONTAL = 11,
        LIFTING_VERTICAL_LEFT = 12,
        LIFTING_VERTICAL_RIGHT = 13,
        REVOLVING = 14,
        REVOLVING_VERTICAL = 15,
        ROLLINGUP = 16,
        SINGLE_SWING_LEFT = 17,
        SINGLE_SWING_RIGHT = 18,
        SLIDING_TO_LEFT = 19,
        SLIDING_TO_RIGHT = 20,
        SWING_FIXED_LEFT = 21,
        SWING_FIXED_RIGHT = 22,
        USERDEFINED = 23,
        NOTDEFINED = 24,
        };

    public enum IfcDuctFittingTypeEnum
        {
        BEND = 0,
        CONNECTOR = 1,
        ENTRY = 2,
        EXIT = 3,
        JUNCTION = 4,
        OBSTRUCTION = 5,
        TRANSITION = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcDuctSegmentTypeEnum
        {
        FLEXIBLESEGMENT = 0,
        RIGIDSEGMENT = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcDuctSilencerTypeEnum
        {
        FLATOVAL = 0,
        RECTANGULAR = 1,
        ROUND = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcEarthworksCutTypeEnum
        {
        BASE_EXCAVATION = 0,
        CUT = 1,
        DREDGING = 2,
        EXCAVATION = 3,
        OVEREXCAVATION = 4,
        PAVEMENTMILLING = 5,
        STEPEXCAVATION = 6,
        TOPSOILREMOVAL = 7,
        TRENCH = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcEarthworksFillTypeEnum
        {
        BACKFILL = 0,
        COUNTERWEIGHT = 1,
        EMBANKMENT = 2,
        SLOPEFILL = 3,
        SUBGRADE = 4,
        SUBGRADEBED = 5,
        TRANSITIONSECTION = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcElectricApplianceTypeEnum
        {
        DISHWASHER = 0,
        ELECTRICCOOKER = 1,
        FREESTANDINGELECTRICHEATER = 2,
        FREESTANDINGFAN = 3,
        FREESTANDINGWATERCOOLER = 4,
        FREESTANDINGWATERHEATER = 5,
        FREEZER = 6,
        FRIDGE_FREEZER = 7,
        HANDDRYER = 8,
        KITCHENMACHINE = 9,
        MICROWAVE = 10,
        PHOTOCOPIER = 11,
        REFRIGERATOR = 12,
        TUMBLEDRYER = 13,
        VENDINGMACHINE = 14,
        WASHINGMACHINE = 15,
        USERDEFINED = 16,
        NOTDEFINED = 17,
        };

    public enum IfcElectricDistributionBoardTypeEnum
        {
        CONSUMERUNIT = 0,
        DISTRIBUTIONBOARD = 1,
        MOTORCONTROLCENTRE = 2,
        SWITCHBOARD = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcElectricFlowStorageDeviceTypeEnum
        {
        BATTERY = 0,
        CAPACITOR = 1,
        CAPACITORBANK = 2,
        COMPENSATOR = 3,
        HARMONICFILTER = 4,
        INDUCTOR = 5,
        INDUCTORBANK = 6,
        RECHARGER = 7,
        UPS = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcElectricFlowTreatmentDeviceTypeEnum
        {
        ELECTRONICFILTER = 0,
        USERDEFINED = 1,
        NOTDEFINED = 2,
        };

    public enum IfcElectricGeneratorTypeEnum
        {
        CHP = 0,
        ENGINEGENERATOR = 1,
        STANDALONE = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcElectricMotorTypeEnum
        {
        DC = 0,
        INDUCTION = 1,
        POLYPHASE = 2,
        RELUCTANCESYNCHRONOUS = 3,
        SYNCHRONOUS = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcElectricTimeControlTypeEnum
        {
        RELAY = 0,
        TIMECLOCK = 1,
        TIMEDELAY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcElementAssemblyTypeEnum
        {
        ABUTMENT = 0,
        ACCESSORY_ASSEMBLY = 1,
        ARCH = 2,
        BEAM_GRID = 3,
        BRACED_FRAME = 4,
        CROSS_BRACING = 5,
        DECK = 6,
        DILATATIONPANEL = 7,
        ENTRANCEWORKS = 8,
        GIRDER = 9,
        GRID = 10,
        MAST = 11,
        PIER = 12,
        PYLON = 13,
        RAIL_MECHANICAL_EQUIPMENT_ASSEMBLY = 14,
        REINFORCEMENT_UNIT = 15,
        RIGID_FRAME = 16,
        SHELTER = 17,
        SIGNALASSEMBLY = 18,
        SLAB_FIELD = 19,
        SUMPBUSTER = 20,
        SUPPORTINGASSEMBLY = 21,
        SUSPENSIONASSEMBLY = 22,
        TRACKPANEL = 23,
        TRACTION_SWITCHING_ASSEMBLY = 24,
        TRAFFIC_CALMING_DEVICE = 25,
        TRUSS = 26,
        TURNOUTPANEL = 27,
        USERDEFINED = 28,
        NOTDEFINED = 29,
        };

    public enum IfcElementCompositionEnum
        {
        COMPLEX = 0,
        ELEMENT = 1,
        PARTIAL = 2,
        };

    public enum IfcEngineTypeEnum
        {
        EXTERNALCOMBUSTION = 0,
        INTERNALCOMBUSTION = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcEvaporativeCoolerTypeEnum
        {
        DIRECTEVAPORATIVEAIRWASHER = 0,
        DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER = 1,
        DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER = 2,
        DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER = 3,
        DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER = 4,
        INDIRECTDIRECTCOMBINATION = 5,
        INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER = 6,
        INDIRECTEVAPORATIVEPACKAGEAIRCOOLER = 7,
        INDIRECTEVAPORATIVEWETCOIL = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcEvaporatorTypeEnum
        {
        DIRECTEXPANSION = 0,
        DIRECTEXPANSIONBRAZEDPLATE = 1,
        DIRECTEXPANSIONSHELLANDTUBE = 2,
        DIRECTEXPANSIONTUBEINTUBE = 3,
        FLOODEDSHELLANDTUBE = 4,
        SHELLANDCOIL = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcEventTriggerTypeEnum
        {
        EVENTCOMPLEX = 0,
        EVENTMESSAGE = 1,
        EVENTRULE = 2,
        EVENTTIME = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcEventTypeEnum
        {
        ENDEVENT = 0,
        INTERMEDIATEEVENT = 1,
        STARTEVENT = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcExternalSpatialElementTypeEnum
        {
        EXTERNAL = 0,
        EXTERNAL_EARTH = 1,
        EXTERNAL_FIRE = 2,
        EXTERNAL_WATER = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcFacilityPartCommonTypeEnum
        {
        ABOVEGROUND = 0,
        BELOWGROUND = 1,
        JUNCTION = 2,
        LEVELCROSSING = 3,
        SEGMENT = 4,
        SUBSTRUCTURE = 5,
        SUPERSTRUCTURE = 6,
        TERMINAL = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcFacilityUsageEnum
        {
        LATERAL = 0,
        LONGITUDINAL = 1,
        REGION = 2,
        VERTICAL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcFanTypeEnum
        {
        CENTRIFUGALAIRFOIL = 0,
        CENTRIFUGALBACKWARDINCLINEDCURVED = 1,
        CENTRIFUGALFORWARDCURVED = 2,
        CENTRIFUGALRADIAL = 3,
        PROPELLORAXIAL = 4,
        TUBEAXIAL = 5,
        VANEAXIAL = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcFastenerTypeEnum
        {
        GLUE = 0,
        MORTAR = 1,
        WELD = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcFilterTypeEnum
        {
        AIRPARTICLEFILTER = 0,
        COMPRESSEDAIRFILTER = 1,
        ODORFILTER = 2,
        OILFILTER = 3,
        STRAINER = 4,
        WATERFILTER = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcFireSuppressionTerminalTypeEnum
        {
        BREECHINGINLET = 0,
        FIREHYDRANT = 1,
        FIREMONITOR = 2,
        HOSEREEL = 3,
        SPRINKLER = 4,
        SPRINKLERDEFLECTOR = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcFlowDirectionEnum
        {
        SINK = 0,
        SOURCE = 1,
        SOURCEANDSINK = 2,
        NOTDEFINED = 3,
        };

    public enum IfcFlowInstrumentTypeEnum
        {
        AMMETER = 0,
        COMBINED = 1,
        FREQUENCYMETER = 2,
        PHASEANGLEMETER = 3,
        POWERFACTORMETER = 4,
        PRESSUREGAUGE = 5,
        THERMOMETER = 6,
        VOLTMETER = 7,
        VOLTMETER_PEAK = 8,
        VOLTMETER_RMS = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        };

    public enum IfcFlowMeterTypeEnum
        {
        ENERGYMETER = 0,
        GASMETER = 1,
        OILMETER = 2,
        WATERMETER = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcFootingTypeEnum
        {
        CAISSON_FOUNDATION = 0,
        FOOTING_BEAM = 1,
        PAD_FOOTING = 2,
        PILE_CAP = 3,
        STRIP_FOOTING = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcFurnitureTypeEnum
        {
        BED = 0,
        CHAIR = 1,
        DESK = 2,
        FILECABINET = 3,
        SHELF = 4,
        SOFA = 5,
        TABLE = 6,
        TECHNICALCABINET = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcGeographicElementTypeEnum
        {
        SOIL_BORING_POINT = 0,
        TERRAIN = 1,
        VEGETATION = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcGeometricProjectionEnum
        {
        ELEVATION_VIEW = 0,
        GRAPH_VIEW = 1,
        MODEL_VIEW = 2,
        PLAN_VIEW = 3,
        REFLECTED_PLAN_VIEW = 4,
        SECTION_VIEW = 5,
        SKETCH_VIEW = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcGeotechnicalStratumTypeEnum
        {
        SOLID = 0,
        VOID = 1,
        WATER = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcGlobalOrLocalEnum
        {
        GLOBAL_COORDS = 0,
        LOCAL_COORDS = 1,
        };

    public enum IfcGridTypeEnum
        {
        IRREGULAR = 0,
        RADIAL = 1,
        RECTANGULAR = 2,
        TRIANGULAR = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcHeatExchangerTypeEnum
        {
        PLATE = 0,
        SHELLANDTUBE = 1,
        TURNOUTHEATING = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcHumidifierTypeEnum
        {
        ADIABATICAIRWASHER = 0,
        ADIABATICATOMIZING = 1,
        ADIABATICCOMPRESSEDAIRNOZZLE = 2,
        ADIABATICPAN = 3,
        ADIABATICRIGIDMEDIA = 4,
        ADIABATICULTRASONIC = 5,
        ADIABATICWETTEDELEMENT = 6,
        ASSISTEDBUTANE = 7,
        ASSISTEDELECTRIC = 8,
        ASSISTEDNATURALGAS = 9,
        ASSISTEDPROPANE = 10,
        ASSISTEDSTEAM = 11,
        STEAMINJECTION = 12,
        USERDEFINED = 13,
        NOTDEFINED = 14,
        };

    public enum IfcImpactProtectionDeviceTypeEnum
        {
        BUMPER = 0,
        CRASHCUSHION = 1,
        DAMPINGSYSTEM = 2,
        FENDER = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcInterceptorTypeEnum
        {
        CYCLONIC = 0,
        GREASE = 1,
        OIL = 2,
        PETROL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcInternalOrExternalEnum
        {
        EXTERNAL = 0,
        EXTERNAL_EARTH = 1,
        EXTERNAL_FIRE = 2,
        EXTERNAL_WATER = 3,
        INTERNAL = 4,
        NOTDEFINED = 5,
        };

    public enum IfcInventoryTypeEnum
        {
        ASSETINVENTORY = 0,
        FURNITUREINVENTORY = 1,
        SPACEINVENTORY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcJunctionBoxTypeEnum
        {
        DATA = 0,
        POWER = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcKerbTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcKnotType
        {
        PIECEWISE_BEZIER_KNOTS = 0,
        QUASI_UNIFORM_KNOTS = 1,
        UNIFORM_KNOTS = 2,
        UNSPECIFIED = 3,
        };

    public enum IfcLaborResourceTypeEnum
        {
        ADMINISTRATION = 0,
        CARPENTRY = 1,
        CLEANING = 2,
        CONCRETE = 3,
        DRYWALL = 4,
        ELECTRIC = 5,
        FINISHING = 6,
        FLOORING = 7,
        GENERAL = 8,
        HVAC = 9,
        LANDSCAPING = 10,
        MASONRY = 11,
        PAINTING = 12,
        PAVING = 13,
        PLUMBING = 14,
        ROOFING = 15,
        SITEGRADING = 16,
        STEELWORK = 17,
        SURVEYING = 18,
        USERDEFINED = 19,
        NOTDEFINED = 20,
        };

    public enum IfcLampTypeEnum
        {
        COMPACTFLUORESCENT = 0,
        FLUORESCENT = 1,
        HALOGEN = 2,
        HIGHPRESSUREMERCURY = 3,
        HIGHPRESSURESODIUM = 4,
        LED = 5,
        METALHALIDE = 6,
        OLED = 7,
        TUNGSTENFILAMENT = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcLayerSetDirectionEnum
        {
        AXIS1 = 0,
        AXIS2 = 1,
        AXIS3 = 2,
        };

    public enum IfcLightDistributionCurveEnum
        {
        TYPE_A = 0,
        TYPE_B = 1,
        TYPE_C = 2,
        NOTDEFINED = 3,
        };

    public enum IfcLightEmissionSourceEnum
        {
        COMPACTFLUORESCENT = 0,
        FLUORESCENT = 1,
        HIGHPRESSUREMERCURY = 2,
        HIGHPRESSURESODIUM = 3,
        LIGHTEMITTINGDIODE = 4,
        LOWPRESSURESODIUM = 5,
        LOWVOLTAGEHALOGEN = 6,
        MAINVOLTAGEHALOGEN = 7,
        METALHALIDE = 8,
        TUNGSTENFILAMENT = 9,
        NOTDEFINED = 10,
        };

    public enum IfcLightFixtureTypeEnum
        {
        DIRECTIONSOURCE = 0,
        POINTSOURCE = 1,
        SECURITYLIGHTING = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcLiquidTerminalTypeEnum
        {
        HOSEREEL = 0,
        LOADINGARM = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcLoadGroupTypeEnum
        {
        LOAD_CASE = 0,
        LOAD_COMBINATION = 1,
        LOAD_GROUP = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcLogicalOperatorEnum
        {
        LOGICALAND = 0,
        LOGICALNOTAND = 1,
        LOGICALNOTOR = 2,
        LOGICALOR = 3,
        LOGICALXOR = 4,
        };

    public enum IfcMarineFacilityTypeEnum
        {
        BARRIERBEACH = 0,
        BREAKWATER = 1,
        CANAL = 2,
        DRYDOCK = 3,
        FLOATINGDOCK = 4,
        HYDROLIFT = 5,
        JETTY = 6,
        LAUNCHRECOVERY = 7,
        MARINEDEFENCE = 8,
        NAVIGATIONALCHANNEL = 9,
        PORT = 10,
        QUAY = 11,
        REVETMENT = 12,
        SHIPLIFT = 13,
        SHIPLOCK = 14,
        SHIPYARD = 15,
        SLIPWAY = 16,
        WATERWAY = 17,
        WATERWAYSHIPLIFT = 18,
        USERDEFINED = 19,
        NOTDEFINED = 20,
        };

    public enum IfcMarinePartTypeEnum
        {
        ABOVEWATERLINE = 0,
        ANCHORAGE = 1,
        APPROACHCHANNEL = 2,
        BELOWWATERLINE = 3,
        BERTHINGSTRUCTURE = 4,
        CHAMBER = 5,
        CILL_LEVEL = 6,
        COPELEVEL = 7,
        CORE = 8,
        CREST = 9,
        GATEHEAD = 10,
        GUDINGSTRUCTURE = 11,
        HIGHWATERLINE = 12,
        LANDFIELD = 13,
        LEEWARDSIDE = 14,
        LOWWATERLINE = 15,
        MANUFACTURING = 16,
        NAVIGATIONALAREA = 17,
        PROTECTION = 18,
        SHIPTRANSFER = 19,
        STORAGEAREA = 20,
        VEHICLESERVICING = 21,
        WATERFIELD = 22,
        WEATHERSIDE = 23,
        USERDEFINED = 24,
        NOTDEFINED = 25,
        };

    public enum IfcMechanicalFastenerTypeEnum
        {
        ANCHORBOLT = 0,
        BOLT = 1,
        CHAIN = 2,
        COUPLER = 3,
        DOWEL = 4,
        NAIL = 5,
        NAILPLATE = 6,
        RAILFASTENING = 7,
        RAILJOINT = 8,
        RIVET = 9,
        ROPE = 10,
        SCREW = 11,
        SHEARCONNECTOR = 12,
        STAPLE = 13,
        STUDSHEARCONNECTOR = 14,
        USERDEFINED = 15,
        NOTDEFINED = 16,
        };

    public enum IfcMedicalDeviceTypeEnum
        {
        AIRSTATION = 0,
        FEEDAIRUNIT = 1,
        OXYGENGENERATOR = 2,
        OXYGENPLANT = 3,
        VACUUMSTATION = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcMemberTypeEnum
        {
        ARCH_SEGMENT = 0,
        BRACE = 1,
        CHORD = 2,
        COLLAR = 3,
        MEMBER = 4,
        MULLION = 5,
        PLATE = 6,
        POST = 7,
        PURLIN = 8,
        RAFTER = 9,
        STAY_CABLE = 10,
        STIFFENING_RIB = 11,
        STRINGER = 12,
        STRUCTURALCABLE = 13,
        STRUT = 14,
        STUD = 15,
        SUSPENDER = 16,
        SUSPENSION_CABLE = 17,
        TIEBAR = 18,
        USERDEFINED = 19,
        NOTDEFINED = 20,
        };

    public enum IfcMobileTelecommunicationsApplianceTypeEnum
        {
        ACCESSPOINT = 0,
        BASEBANDUNIT = 1,
        BASETRANSCEIVERSTATION = 2,
        E_UTRAN_NODE_B = 3,
        GATEWAY_GPRS_SUPPORT_NODE = 4,
        MASTERUNIT = 5,
        MOBILESWITCHINGCENTER = 6,
        MSCSERVER = 7,
        PACKETCONTROLUNIT = 8,
        REMOTERADIOUNIT = 9,
        REMOTEUNIT = 10,
        SERVICE_GPRS_SUPPORT_NODE = 11,
        SUBSCRIBERSERVER = 12,
        USERDEFINED = 13,
        NOTDEFINED = 14,
        };

    public enum IfcMooringDeviceTypeEnum
        {
        BOLLARD = 0,
        LINETENSIONER = 1,
        MAGNETICDEVICE = 2,
        MOORINGHOOKS = 3,
        VACUUMDEVICE = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcMotorConnectionTypeEnum
        {
        BELTDRIVE = 0,
        COUPLING = 1,
        DIRECTDRIVE = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcNavigationElementTypeEnum
        {
        BEACON = 0,
        BUOY = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcObjectiveEnum
        {
        CODECOMPLIANCE = 0,
        CODEWAIVER = 1,
        DESIGNINTENT = 2,
        EXTERNAL = 3,
        HEALTHANDSAFETY = 4,
        MERGECONFLICT = 5,
        MODELVIEW = 6,
        PARAMETER = 7,
        REQUIREMENT = 8,
        SPECIFICATION = 9,
        TRIGGERCONDITION = 10,
        USERDEFINED = 11,
        NOTDEFINED = 12,
        };

    public enum IfcOccupantTypeEnum
        {
        ASSIGNEE = 0,
        ASSIGNOR = 1,
        LESSEE = 2,
        LESSOR = 3,
        LETTINGAGENT = 4,
        OWNER = 5,
        TENANT = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcOpeningElementTypeEnum
        {
        OPENING = 0,
        RECESS = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcOutletTypeEnum
        {
        AUDIOVISUALOUTLET = 0,
        COMMUNICATIONSOUTLET = 1,
        DATAOUTLET = 2,
        POWEROUTLET = 3,
        TELEPHONEOUTLET = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcPavementTypeEnum
        {
        FLEXIBLE = 0,
        RIGID = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcPerformanceHistoryTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcPermeableCoveringOperationEnum
        {
        GRILL = 0,
        LOUVER = 1,
        SCREEN = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcPermitTypeEnum
        {
        ACCESS = 0,
        BUILDING = 1,
        WORK = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcPhysicalOrVirtualEnum
        {
        PHYSICAL = 0,
        VIRTUAL = 1,
        NOTDEFINED = 2,
        };

    public enum IfcPileConstructionEnum
        {
        CAST_IN_PLACE = 0,
        COMPOSITE = 1,
        PRECAST_CONCRETE = 2,
        PREFAB_STEEL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcPileTypeEnum
        {
        BORED = 0,
        COHESION = 1,
        DRIVEN = 2,
        FRICTION = 3,
        JETGROUTING = 4,
        SUPPORT = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcPipeFittingTypeEnum
        {
        BEND = 0,
        CONNECTOR = 1,
        ENTRY = 2,
        EXIT = 3,
        JUNCTION = 4,
        OBSTRUCTION = 5,
        TRANSITION = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcPipeSegmentTypeEnum
        {
        CULVERT = 0,
        FLEXIBLESEGMENT = 1,
        GUTTER = 2,
        RIGIDSEGMENT = 3,
        SPOOL = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcPlateTypeEnum
        {
        BASE_PLATE = 0,
        COVER_PLATE = 1,
        CURTAIN_PANEL = 2,
        FLANGE_PLATE = 3,
        GUSSET_PLATE = 4,
        SHEET = 5,
        SPLICE_PLATE = 6,
        STIFFENER_PLATE = 7,
        WEB_PLATE = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcPreferredSurfaceCurveRepresentation
        {
        CURVE3D = 0,
        PCURVE_S1 = 1,
        PCURVE_S2 = 2,
        };

    public enum IfcProcedureTypeEnum
        {
        ADVICE_CAUTION = 0,
        ADVICE_NOTE = 1,
        ADVICE_WARNING = 2,
        CALIBRATION = 3,
        DIAGNOSTIC = 4,
        SHUTDOWN = 5,
        STARTUP = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcProfileTypeEnum
        {
        AREA = 0,
        CURVE = 1,
        };

    public enum IfcProjectedOrTrueLengthEnum
        {
        PROJECTED_LENGTH = 0,
        TRUE_LENGTH = 1,
        };

    public enum IfcProjectionElementTypeEnum
        {
        BLISTER = 0,
        DEVIATOR = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcProjectOrderTypeEnum
        {
        CHANGEORDER = 0,
        MAINTENANCEWORKORDER = 1,
        MOVEORDER = 2,
        PURCHASEORDER = 3,
        WORKORDER = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcPropertySetTemplateTypeEnum
        {
        PSET_MATERIALDRIVEN = 0,
        PSET_OCCURRENCEDRIVEN = 1,
        PSET_PERFORMANCEDRIVEN = 2,
        PSET_PROFILEDRIVEN = 3,
        PSET_TYPEDRIVENONLY = 4,
        PSET_TYPEDRIVENOVERRIDE = 5,
        QTO_OCCURRENCEDRIVEN = 6,
        QTO_TYPEDRIVENONLY = 7,
        QTO_TYPEDRIVENOVERRIDE = 8,
        NOTDEFINED = 9,
        };

    public enum IfcProtectiveDeviceTrippingUnitTypeEnum
        {
        ELECTROMAGNETIC = 0,
        ELECTRONIC = 1,
        RESIDUALCURRENT = 2,
        THERMAL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcProtectiveDeviceTypeEnum
        {
        ANTI_ARCING_DEVICE = 0,
        CIRCUITBREAKER = 1,
        EARTHINGSWITCH = 2,
        EARTHLEAKAGECIRCUITBREAKER = 3,
        FUSEDISCONNECTOR = 4,
        RESIDUALCURRENTCIRCUITBREAKER = 5,
        RESIDUALCURRENTSWITCH = 6,
        SPARKGAP = 7,
        VARISTOR = 8,
        VOLTAGELIMITER = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        };

    public enum IfcPumpTypeEnum
        {
        CIRCULATOR = 0,
        ENDSUCTION = 1,
        SPLITCASE = 2,
        SUBMERSIBLEPUMP = 3,
        SUMPPUMP = 4,
        VERTICALINLINE = 5,
        VERTICALTURBINE = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcRailingTypeEnum
        {
        BALUSTRADE = 0,
        FENCE = 1,
        GUARDRAIL = 2,
        HANDRAIL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcRailTypeEnum
        {
        BLADE = 0,
        CHECKRAIL = 1,
        GUARDRAIL = 2,
        RACKRAIL = 3,
        RAIL = 4,
        STOCKRAIL = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcRailwayPartTypeEnum
        {
        ABOVETRACK = 0,
        DILATIONTRACK = 1,
        LINESIDE = 2,
        LINESIDEPART = 3,
        PLAINTRACK = 4,
        SUBSTRUCTURE = 5,
        TRACK = 6,
        TRACKPART = 7,
        TURNOUTTRACK = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcRailwayTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcRampFlightTypeEnum
        {
        SPIRAL = 0,
        STRAIGHT = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcRampTypeEnum
        {
        HALF_TURN_RAMP = 0,
        QUARTER_TURN_RAMP = 1,
        SPIRAL_RAMP = 2,
        STRAIGHT_RUN_RAMP = 3,
        TWO_QUARTER_TURN_RAMP = 4,
        TWO_STRAIGHT_RUN_RAMP = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcRecurrenceTypeEnum
        {
        BY_DAY_COUNT = 0,
        BY_WEEKDAY_COUNT = 1,
        DAILY = 2,
        MONTHLY_BY_DAY_OF_MONTH = 3,
        MONTHLY_BY_POSITION = 4,
        WEEKLY = 5,
        YEARLY_BY_DAY_OF_MONTH = 6,
        YEARLY_BY_POSITION = 7,
        };

    public enum IfcReferentTypeEnum
        {
        BOUNDARY = 0,
        INTERSECTION = 1,
        KILOPOINT = 2,
        LANDMARK = 3,
        MILEPOINT = 4,
        POSITION = 5,
        REFERENCEMARKER = 6,
        STATION = 7,
        SUPERELEVATIONEVENT = 8,
        WIDTHEVENT = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        };

    public enum IfcReflectanceMethodEnum
        {
        BLINN = 0,
        FLAT = 1,
        GLASS = 2,
        MATT = 3,
        METAL = 4,
        MIRROR = 5,
        PHONG = 6,
        PHYSICAL = 7,
        PLASTIC = 8,
        STRAUSS = 9,
        NOTDEFINED = 10,
        };

    public enum IfcReinforcedSoilTypeEnum
        {
        DYNAMICALLYCOMPACTED = 0,
        GROUTED = 1,
        REPLACED = 2,
        ROLLERCOMPACTED = 3,
        SURCHARGEPRELOADED = 4,
        VERTICALLYDRAINED = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcReinforcingBarRoleEnum
        {
        ANCHORING = 0,
        EDGE = 1,
        LIGATURE = 2,
        MAIN = 3,
        PUNCHING = 4,
        RING = 5,
        SHEAR = 6,
        STUD = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcReinforcingBarSurfaceEnum
        {
        PLAIN = 0,
        TEXTURED = 1,
        };

    public enum IfcReinforcingBarTypeEnum
        {
        ANCHORING = 0,
        EDGE = 1,
        LIGATURE = 2,
        MAIN = 3,
        PUNCHING = 4,
        RING = 5,
        SHEAR = 6,
        SPACEBAR = 7,
        STUD = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcReinforcingMeshTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcRoadPartTypeEnum
        {
        BICYCLECROSSING = 0,
        BUS_STOP = 1,
        CARRIAGEWAY = 2,
        CENTRALISLAND = 3,
        CENTRALRESERVE = 4,
        HARDSHOULDER = 5,
        INTERSECTION = 6,
        LAYBY = 7,
        PARKINGBAY = 8,
        PASSINGBAY = 9,
        PEDESTRIAN_CROSSING = 10,
        RAILWAYCROSSING = 11,
        REFUGEISLAND = 12,
        ROADSEGMENT = 13,
        ROADSIDE = 14,
        ROADSIDEPART = 15,
        ROADWAYPLATEAU = 16,
        ROUNDABOUT = 17,
        SHOULDER = 18,
        SIDEWALK = 19,
        SOFTSHOULDER = 20,
        TOLLPLAZA = 21,
        TRAFFICISLAND = 22,
        TRAFFICLANE = 23,
        USERDEFINED = 24,
        NOTDEFINED = 25,
        };

    public enum IfcRoadTypeEnum
        {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        };

    public enum IfcRoleEnum
        {
        ARCHITECT = 0,
        BUILDINGOPERATOR = 1,
        BUILDINGOWNER = 2,
        CIVILENGINEER = 3,
        CLIENT = 4,
        COMMISSIONINGENGINEER = 5,
        CONSTRUCTIONMANAGER = 6,
        CONSULTANT = 7,
        CONTRACTOR = 8,
        COSTENGINEER = 9,
        ELECTRICALENGINEER = 10,
        ENGINEER = 11,
        FACILITIESMANAGER = 12,
        FIELDCONSTRUCTIONMANAGER = 13,
        MANUFACTURER = 14,
        MECHANICALENGINEER = 15,
        OWNER = 16,
        PROJECTMANAGER = 17,
        RESELLER = 18,
        STRUCTURALENGINEER = 19,
        SUBCONTRACTOR = 20,
        SUPPLIER = 21,
        USERDEFINED = 22,
        };

    public enum IfcRoofTypeEnum
        {
        BARREL_ROOF = 0,
        BUTTERFLY_ROOF = 1,
        DOME_ROOF = 2,
        FLAT_ROOF = 3,
        FREEFORM = 4,
        GABLE_ROOF = 5,
        GAMBREL_ROOF = 6,
        HIPPED_GABLE_ROOF = 7,
        HIP_ROOF = 8,
        MANSARD_ROOF = 9,
        PAVILION_ROOF = 10,
        RAINBOW_ROOF = 11,
        SHED_ROOF = 12,
        USERDEFINED = 13,
        NOTDEFINED = 14,
        };

    public enum IfcSanitaryTerminalTypeEnum
        {
        BATH = 0,
        BIDET = 1,
        CISTERN = 2,
        SANITARYFOUNTAIN = 3,
        SHOWER = 4,
        SINK = 5,
        TOILETPAN = 6,
        URINAL = 7,
        WASHHANDBASIN = 8,
        WCSEAT = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        };

    public enum IfcSectionTypeEnum
        {
        TAPERED = 0,
        UNIFORM = 1,
        };

    public enum IfcSensorTypeEnum
        {
        CO2SENSOR = 0,
        CONDUCTANCESENSOR = 1,
        CONTACTSENSOR = 2,
        COSENSOR = 3,
        EARTHQUAKESENSOR = 4,
        FIRESENSOR = 5,
        FLOWSENSOR = 6,
        FOREIGNOBJECTDETECTIONSENSOR = 7,
        FROSTSENSOR = 8,
        GASSENSOR = 9,
        HEATSENSOR = 10,
        HUMIDITYSENSOR = 11,
        IDENTIFIERSENSOR = 12,
        IONCONCENTRATIONSENSOR = 13,
        LEVELSENSOR = 14,
        LIGHTSENSOR = 15,
        MOISTURESENSOR = 16,
        MOVEMENTSENSOR = 17,
        OBSTACLESENSOR = 18,
        PHSENSOR = 19,
        PRESSURESENSOR = 20,
        RADIATIONSENSOR = 21,
        RADIOACTIVITYSENSOR = 22,
        RAINSENSOR = 23,
        SMOKESENSOR = 24,
        SNOWDEPTHSENSOR = 25,
        SOUNDSENSOR = 26,
        TEMPERATURESENSOR = 27,
        TRAINSENSOR = 28,
        TURNOUTCLOSURESENSOR = 29,
        WHEELSENSOR = 30,
        WINDSENSOR = 31,
        USERDEFINED = 32,
        NOTDEFINED = 33,
        };

    public enum IfcSequenceEnum
        {
        FINISH_FINISH = 0,
        FINISH_START = 1,
        START_FINISH = 2,
        START_START = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcShadingDeviceTypeEnum
        {
        AWNING = 0,
        JALOUSIE = 1,
        SHUTTER = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcSignalTypeEnum
        {
        AUDIO = 0,
        MIXED = 1,
        VISUAL = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcSignTypeEnum
        {
        MARKER = 0,
        MIRROR = 1,
        PICTORAL = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcSimplePropertyTemplateTypeEnum
        {
        P_BOUNDEDVALUE = 0,
        P_ENUMERATEDVALUE = 1,
        P_LISTVALUE = 2,
        P_REFERENCEVALUE = 3,
        P_SINGLEVALUE = 4,
        P_TABLEVALUE = 5,
        Q_AREA = 6,
        Q_COUNT = 7,
        Q_LENGTH = 8,
        Q_NUMBER = 9,
        Q_TIME = 10,
        Q_VOLUME = 11,
        Q_WEIGHT = 12,
        };

    public enum IfcSIPrefix
        {
        ATTO = 0,
        CENTI = 1,
        DECA = 2,
        DECI = 3,
        EXA = 4,
        FEMTO = 5,
        GIGA = 6,
        HECTO = 7,
        KILO = 8,
        MEGA = 9,
        MICRO = 10,
        MILLI = 11,
        NANO = 12,
        PETA = 13,
        PICO = 14,
        TERA = 15,
        };

    public enum IfcSIUnitName
        {
        AMPERE = 0,
        BECQUEREL = 1,
        CANDELA = 2,
        COULOMB = 3,
        CUBIC_METRE = 4,
        DEGREE_CELSIUS = 5,
        FARAD = 6,
        GRAM = 7,
        GRAY = 8,
        HENRY = 9,
        HERTZ = 10,
        JOULE = 11,
        KELVIN = 12,
        LUMEN = 13,
        LUX = 14,
        METRE = 15,
        MOLE = 16,
        NEWTON = 17,
        OHM = 18,
        PASCAL = 19,
        RADIAN = 20,
        SECOND = 21,
        SIEMENS = 22,
        SIEVERT = 23,
        SQUARE_METRE = 24,
        STERADIAN = 25,
        TESLA = 26,
        VOLT = 27,
        WATT = 28,
        WEBER = 29,
        };

    public enum IfcSlabTypeEnum
        {
        APPROACH_SLAB = 0,
        BASESLAB = 1,
        FLOOR = 2,
        LANDING = 3,
        PAVING = 4,
        ROOF = 5,
        SIDEWALK = 6,
        TRACKSLAB = 7,
        WEARING = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcSolarDeviceTypeEnum
        {
        SOLARCOLLECTOR = 0,
        SOLARPANEL = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcSpaceHeaterTypeEnum
        {
        CONVECTOR = 0,
        RADIATOR = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcSpaceTypeEnum
        {
        BERTH = 0,
        EXTERNAL = 1,
        GFA = 2,
        INTERNAL = 3,
        PARKING = 4,
        SPACE = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcSpatialZoneTypeEnum
        {
        CONSTRUCTION = 0,
        FIRESAFETY = 1,
        INTERFERENCE = 2,
        LIGHTING = 3,
        OCCUPANCY = 4,
        RESERVATION = 5,
        SECURITY = 6,
        THERMAL = 7,
        TRANSPORT = 8,
        VENTILATION = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        };

    public enum IfcStackTerminalTypeEnum
        {
        BIRDCAGE = 0,
        COWL = 1,
        RAINWATERHOPPER = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcStairFlightTypeEnum
        {
        CURVED = 0,
        FREEFORM = 1,
        SPIRAL = 2,
        STRAIGHT = 3,
        WINDER = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcStairTypeEnum
        {
        CURVED_RUN_STAIR = 0,
        DOUBLE_RETURN_STAIR = 1,
        HALF_TURN_STAIR = 2,
        HALF_WINDING_STAIR = 3,
        LADDER = 4,
        QUARTER_TURN_STAIR = 5,
        QUARTER_WINDING_STAIR = 6,
        SPIRAL_STAIR = 7,
        STRAIGHT_RUN_STAIR = 8,
        THREE_QUARTER_TURN_STAIR = 9,
        THREE_QUARTER_WINDING_STAIR = 10,
        TWO_CURVED_RUN_STAIR = 11,
        TWO_QUARTER_TURN_STAIR = 12,
        TWO_QUARTER_WINDING_STAIR = 13,
        TWO_STRAIGHT_RUN_STAIR = 14,
        USERDEFINED = 15,
        NOTDEFINED = 16,
        };

    public enum IfcStateEnum
        {
        LOCKED = 0,
        READONLY = 1,
        READONLYLOCKED = 2,
        READWRITE = 3,
        READWRITELOCKED = 4,
        };

    public enum IfcStructuralCurveActivityTypeEnum
        {
        CONST_ = 0,
        DISCRETE = 1,
        EQUIDISTANT = 2,
        LINEAR = 3,
        PARABOLA = 4,
        POLYGONAL = 5,
        SINUS = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcStructuralCurveMemberTypeEnum
        {
        CABLE = 0,
        COMPRESSION_MEMBER = 1,
        PIN_JOINED_MEMBER = 2,
        RIGID_JOINED_MEMBER = 3,
        TENSION_MEMBER = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcStructuralSurfaceActivityTypeEnum
        {
        BILINEAR = 0,
        CONST_ = 1,
        DISCRETE = 2,
        ISOCONTOUR = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcStructuralSurfaceMemberTypeEnum
        {
        BENDING_ELEMENT = 0,
        MEMBRANE_ELEMENT = 1,
        SHELL = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcSubContractResourceTypeEnum
        {
        PURCHASE = 0,
        WORK = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        };

    public enum IfcSurfaceFeatureTypeEnum
        {
        DEFECT = 0,
        HATCHMARKING = 1,
        LINEMARKING = 2,
        MARK = 3,
        NONSKIDSURFACING = 4,
        PAVEMENTSURFACEMARKING = 5,
        RUMBLESTRIP = 6,
        SYMBOLMARKING = 7,
        TAG = 8,
        TRANSVERSERUMBLESTRIP = 9,
        TREATMENT = 10,
        USERDEFINED = 11,
        NOTDEFINED = 12,
        };

    public enum IfcSurfaceSide
        {
        BOTH = 0,
        NEGATIVE = 1,
        POSITIVE = 2,
        };

    public enum IfcSwitchingDeviceTypeEnum
        {
        CONTACTOR = 0,
        DIMMERSWITCH = 1,
        EMERGENCYSTOP = 2,
        KEYPAD = 3,
        MOMENTARYSWITCH = 4,
        RELAY = 5,
        SELECTORSWITCH = 6,
        STARTER = 7,
        START_AND_STOP_EQUIPMENT = 8,
        SWITCHDISCONNECTOR = 9,
        TOGGLESWITCH = 10,
        USERDEFINED = 11,
        NOTDEFINED = 12,
        };

    public enum IfcSystemFurnitureElementTypeEnum
        {
        PANEL = 0,
        SUBRACK = 1,
        WORKSURFACE = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcTankTypeEnum
        {
        BASIN = 0,
        BREAKPRESSURE = 1,
        EXPANSION = 2,
        FEEDANDEXPANSION = 3,
        OILRETENTIONTRAY = 4,
        PRESSUREVESSEL = 5,
        STORAGE = 6,
        VESSEL = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcTaskDurationEnum
        {
        ELAPSEDTIME = 0,
        WORKTIME = 1,
        NOTDEFINED = 2,
        };

    public enum IfcTaskTypeEnum
        {
        ADJUSTMENT = 0,
        ATTENDANCE = 1,
        CALIBRATION = 2,
        CONSTRUCTION = 3,
        DEMOLITION = 4,
        DISMANTLE = 5,
        DISPOSAL = 6,
        EMERGENCY = 7,
        INSPECTION = 8,
        INSTALLATION = 9,
        LOGISTIC = 10,
        MAINTENANCE = 11,
        MOVE = 12,
        OPERATION = 13,
        REMOVAL = 14,
        RENOVATION = 15,
        SAFETY = 16,
        SHUTDOWN = 17,
        STARTUP = 18,
        TESTING = 19,
        TROUBLESHOOTING = 20,
        USERDEFINED = 21,
        NOTDEFINED = 22,
        };

    public enum IfcTendonAnchorTypeEnum
        {
        COUPLER = 0,
        FIXED_END = 1,
        TENSIONING_END = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcTendonConduitTypeEnum
        {
        COUPLER = 0,
        DIABOLO = 1,
        DUCT = 2,
        GROUTING_DUCT = 3,
        TRUMPET = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcTendonTypeEnum
        {
        BAR = 0,
        COATED = 1,
        STRAND = 2,
        WIRE = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        };

    public enum IfcTextPath
        {
        DOWN = 0,
        LEFT = 1,
        RIGHT = 2,
        UP = 3,
        };

    public enum IfcTimeSeriesDataTypeEnum
        {
        CONTINUOUS = 0,
        DISCRETE = 1,
        DISCRETEBINARY = 2,
        PIECEWISEBINARY = 3,
        PIECEWISECONSTANT = 4,
        PIECEWISECONTINUOUS = 5,
        NOTDEFINED = 6,
        };

    public enum IfcTrackElementTypeEnum
        {
        BLOCKINGDEVICE = 0,
        DERAILER = 1,
        FROG = 2,
        HALF_SET_OF_BLADES = 3,
        SLEEPER = 4,
        SPEEDREGULATOR = 5,
        TRACKENDOFALIGNMENT = 6,
        VEHICLESTOP = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        };

    public enum IfcTransformerTypeEnum
        {
        CHOPPER = 0,
        COMBINED = 1,
        CURRENT = 2,
        FREQUENCY = 3,
        INVERTER = 4,
        RECTIFIER = 5,
        VOLTAGE = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcTransitionCode
        {
        CONTINUOUS = 0,
        CONTSAMEGRADIENT = 1,
        CONTSAMEGRADIENTSAMECURVATURE = 2,
        DISCONTINUOUS = 3,
        };

    public enum IfcTransportElementTypeEnum
        {
        CRANEWAY = 0,
        ELEVATOR = 1,
        ESCALATOR = 2,
        HAULINGGEAR = 3,
        LIFTINGGEAR = 4,
        MOVINGWALKWAY = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcTrimmingPreference
        {
        CARTESIAN = 0,
        PARAMETER = 1,
        UNSPECIFIED = 2,
        };

    public enum IfcTubeBundleTypeEnum
        {
        FINNED = 0,
        USERDEFINED = 1,
        NOTDEFINED = 2,
        };

    public enum IfcUnitaryControlElementTypeEnum
        {
        ALARMPANEL = 0,
        BASESTATIONCONTROLLER = 1,
        COMBINED = 2,
        CONTROLPANEL = 3,
        GASDETECTIONPANEL = 4,
        HUMIDISTAT = 5,
        INDICATORPANEL = 6,
        MIMICPANEL = 7,
        THERMOSTAT = 8,
        WEATHERSTATION = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        };

    public enum IfcUnitaryEquipmentTypeEnum
        {
        AIRCONDITIONINGUNIT = 0,
        AIRHANDLER = 1,
        DEHUMIDIFIER = 2,
        ROOFTOPUNIT = 3,
        SPLITSYSTEM = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        };

    public enum IfcUnitEnum
        {
        ABSORBEDDOSEUNIT = 0,
        AMOUNTOFSUBSTANCEUNIT = 1,
        AREAUNIT = 2,
        DOSEEQUIVALENTUNIT = 3,
        ELECTRICCAPACITANCEUNIT = 4,
        ELECTRICCHARGEUNIT = 5,
        ELECTRICCONDUCTANCEUNIT = 6,
        ELECTRICCURRENTUNIT = 7,
        ELECTRICRESISTANCEUNIT = 8,
        ELECTRICVOLTAGEUNIT = 9,
        ENERGYUNIT = 10,
        FORCEUNIT = 11,
        FREQUENCYUNIT = 12,
        ILLUMINANCEUNIT = 13,
        INDUCTANCEUNIT = 14,
        LENGTHUNIT = 15,
        LUMINOUSFLUXUNIT = 16,
        LUMINOUSINTENSITYUNIT = 17,
        MAGNETICFLUXDENSITYUNIT = 18,
        MAGNETICFLUXUNIT = 19,
        MASSUNIT = 20,
        PLANEANGLEUNIT = 21,
        POWERUNIT = 22,
        PRESSUREUNIT = 23,
        RADIOACTIVITYUNIT = 24,
        SOLIDANGLEUNIT = 25,
        THERMODYNAMICTEMPERATUREUNIT = 26,
        TIMEUNIT = 27,
        VOLUMEUNIT = 28,
        USERDEFINED = 29,
        };

    public enum IfcValveTypeEnum
        {
        AIRRELEASE = 0,
        ANTIVACUUM = 1,
        CHANGEOVER = 2,
        CHECK = 3,
        COMMISSIONING = 4,
        DIVERTING = 5,
        DOUBLECHECK = 6,
        DOUBLEREGULATING = 7,
        DRAWOFFCOCK = 8,
        FAUCET = 9,
        FLUSHING = 10,
        GASCOCK = 11,
        GASTAP = 12,
        ISOLATING = 13,
        MIXING = 14,
        PRESSUREREDUCING = 15,
        PRESSURERELIEF = 16,
        REGULATING = 17,
        SAFETYCUTOFF = 18,
        STEAMTRAP = 19,
        STOPCOCK = 20,
        USERDEFINED = 21,
        NOTDEFINED = 22,
        };

    public enum IfcVehicleTypeEnum
        {
        CARGO = 0,
        ROLLINGSTOCK = 1,
        VEHICLE = 2,
        VEHICLEAIR = 3,
        VEHICLEMARINE = 4,
        VEHICLETRACKED = 5,
        VEHICLEWHEELED = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcVibrationDamperTypeEnum
        {
        AXIAL_YIELD = 0,
        BENDING_YIELD = 1,
        FRICTION = 2,
        RUBBER = 3,
        SHEAR_YIELD = 4,
        VISCOUS = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcVibrationIsolatorTypeEnum
        {
        BASE = 0,
        COMPRESSION = 1,
        SPRING = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcVirtualElementTypeEnum
        {
        BOUNDARY = 0,
        CLEARANCE = 1,
        PROVISIONFORVOID = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcVoidingFeatureTypeEnum
        {
        CHAMFER = 0,
        CUTOUT = 1,
        EDGE = 2,
        HOLE = 3,
        MITER = 4,
        NOTCH = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        };

    public enum IfcWallTypeEnum
        {
        ELEMENTEDWALL = 0,
        MOVABLE = 1,
        PARAPET = 2,
        PARTITIONING = 3,
        PLUMBINGWALL = 4,
        POLYGONAL = 5,
        RETAININGWALL = 6,
        SHEAR = 7,
        SOLIDWALL = 8,
        STANDARD = 9,
        WAVEWALL = 10,
        USERDEFINED = 11,
        NOTDEFINED = 12,
        };

    public enum IfcWasteTerminalTypeEnum
        {
        FLOORTRAP = 0,
        FLOORWASTE = 1,
        GULLYSUMP = 2,
        GULLYTRAP = 3,
        ROOFDRAIN = 4,
        WASTEDISPOSALUNIT = 5,
        WASTETRAP = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        };

    public enum IfcWindowPanelOperationEnum
        {
        BOTTOMHUNG = 0,
        FIXEDCASEMENT = 1,
        OTHEROPERATION = 2,
        PIVOTHORIZONTAL = 3,
        PIVOTVERTICAL = 4,
        REMOVABLECASEMENT = 5,
        SIDEHUNGLEFTHAND = 6,
        SIDEHUNGRIGHTHAND = 7,
        SLIDINGHORIZONTAL = 8,
        SLIDINGVERTICAL = 9,
        TILTANDTURNLEFTHAND = 10,
        TILTANDTURNRIGHTHAND = 11,
        TOPHUNG = 12,
        NOTDEFINED = 13,
        };

    public enum IfcWindowPanelPositionEnum
        {
        BOTTOM = 0,
        LEFT = 1,
        MIDDLE = 2,
        RIGHT = 3,
        TOP = 4,
        NOTDEFINED = 5,
        };

    public enum IfcWindowTypeEnum
        {
        LIGHTDOME = 0,
        SKYLIGHT = 1,
        WINDOW = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcWindowTypePartitioningEnum
        {
        DOUBLE_PANEL_HORIZONTAL = 0,
        DOUBLE_PANEL_VERTICAL = 1,
        SINGLE_PANEL = 2,
        TRIPLE_PANEL_BOTTOM = 3,
        TRIPLE_PANEL_HORIZONTAL = 4,
        TRIPLE_PANEL_LEFT = 5,
        TRIPLE_PANEL_RIGHT = 6,
        TRIPLE_PANEL_TOP = 7,
        TRIPLE_PANEL_VERTICAL = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        };

    public enum IfcWorkCalendarTypeEnum
        {
        FIRSTSHIFT = 0,
        SECONDSHIFT = 1,
        THIRDSHIFT = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcWorkPlanTypeEnum
        {
        ACTUAL = 0,
        BASELINE = 1,
        PLANNED = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };

    public enum IfcWorkScheduleTypeEnum
        {
        ACTUAL = 0,
        BASELINE = 1,
        PLANNED = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        };
    //
    class EnumNames
        {
        public static TextValue[] LOGICAL_VALUE_ = { "F", "T", "U" };
        public static TextValue[] IfcActionRequestTypeEnum_ = { "EMAIL", "FAX", "PHONE", "POST", "VERBAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcActionSourceTypeEnum_ = { "BRAKES", "BUOYANCY", "COMPLETION_G1", "CREEP", "CURRENT", "DEAD_LOAD_G", "EARTHQUAKE_E", "ERECTION", "FIRE", "ICE", "IMPACT", "IMPULSE", "LACK_OF_FIT", "LIVE_LOAD_Q", "PRESTRESSING_P", "PROPPING", "RAIN", "SETTLEMENT_U", "SHRINKAGE", "SNOW_S", "SYSTEM_IMPERFECTION", "TEMPERATURE_T", "TRANSPORT", "WAVE", "WIND_W", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcActionTypeEnum_ = { "EXTRAORDINARY_A", "PERMANENT_G", "VARIABLE_Q", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcActuatorTypeEnum_ = { "ELECTRICACTUATOR", "HANDOPERATEDACTUATOR", "HYDRAULICACTUATOR", "PNEUMATICACTUATOR", "THERMOSTATICACTUATOR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAddressTypeEnum_ = { "DISTRIBUTIONPOINT", "HOME", "OFFICE", "SITE", "USERDEFINED" };
        public static TextValue[] IfcAirTerminalBoxTypeEnum_ = { "CONSTANTFLOW", "VARIABLEFLOWPRESSUREDEPENDANT", "VARIABLEFLOWPRESSUREINDEPENDANT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAirTerminalTypeEnum_ = { "DIFFUSER", "GRILLE", "LOUVRE", "REGISTER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAirToAirHeatRecoveryTypeEnum_ = { "FIXEDPLATECOUNTERFLOWEXCHANGER", "FIXEDPLATECROSSFLOWEXCHANGER", "FIXEDPLATEPARALLELFLOWEXCHANGER", "HEATPIPE", "ROTARYWHEEL", "RUNAROUNDCOILLOOP", "THERMOSIPHONCOILTYPEHEATEXCHANGERS", "THERMOSIPHONSEALEDTUBEHEATEXCHANGERS", "TWINTOWERENTHALPYRECOVERYLOOPS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAlarmTypeEnum_ = { "BELL", "BREAKGLASSBUTTON", "LIGHT", "MANUALPULLBOX", "RAILWAYCROCODILE", "RAILWAYDETONATOR", "SIREN", "WHISTLE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAlignmentCantSegmentTypeEnum_ = { "BLOSSCURVE", "CONSTANTCANT", "COSINECURVE", "HELMERTCURVE", "LINEARTRANSITION", "SINECURVE", "VIENNESEBEND" };
        public static TextValue[] IfcAlignmentHorizontalSegmentTypeEnum_ = { "BLOSSCURVE", "CIRCULARARC", "CLOTHOID", "COSINECURVE", "CUBIC", "HELMERTCURVE", "LINE", "SINECURVE", "VIENNESEBEND" };
        public static TextValue[] IfcAlignmentTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAlignmentVerticalSegmentTypeEnum_ = { "CIRCULARARC", "CLOTHOID", "CONSTANTGRADIENT", "PARABOLICARC" };
        public static TextValue[] IfcAnalysisModelTypeEnum_ = { "IN_PLANE_LOADING_2D", "LOADING_3D", "OUT_PLANE_LOADING_2D", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAnalysisTheoryTypeEnum_ = { "FIRST_ORDER_THEORY", "FULL_NONLINEAR_THEORY", "SECOND_ORDER_THEORY", "THIRD_ORDER_THEORY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcAnnotationTypeEnum_ = { "CONTOURLINE", "DIMENSION", "ISOBAR", "ISOLUX", "ISOTHERM", "LEADER", "SURVEY", "SYMBOL", "TEXT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcArithmeticOperatorEnum_ = { "ADD", "DIVIDE", "MODULO", "MULTIPLY", "SUBTRACT" };
        public static TextValue[] IfcAssemblyPlaceEnum_ = { "FACTORY", "SITE", "NOTDEFINED" };
        public static TextValue[] IfcAudioVisualApplianceTypeEnum_ = { "AMPLIFIER", "CAMERA", "COMMUNICATIONTERMINAL", "DISPLAY", "MICROPHONE", "PLAYER", "PROJECTOR", "RECEIVER", "RECORDINGEQUIPMENT", "SPEAKER", "SWITCHER", "TELEPHONE", "TUNER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBeamTypeEnum_ = { "BEAM", "CORNICE", "DIAPHRAGM", "EDGEBEAM", "GIRDER_SEGMENT", "HATSTONE", "HOLLOWCORE", "JOIST", "LINTEL", "PIERCAP", "SPANDREL", "T_BEAM", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBearingTypeEnum_ = { "CYLINDRICAL", "DISK", "ELASTOMERIC", "GUIDE", "POT", "ROCKER", "ROLLER", "SPHERICAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBenchmarkEnum_ = { "EQUALTO", "GREATERTHAN", "GREATERTHANOREQUALTO", "INCLUDEDIN", "INCLUDES", "LESSTHAN", "LESSTHANOREQUALTO", "NOTEQUALTO", "NOTINCLUDEDIN", "NOTINCLUDES" };
        public static TextValue[] IfcBoilerTypeEnum_ = { "STEAM", "WATER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBooleanOperator_ = { "DIFFERENCE", "INTERSECTION", "UNION" };
        public static TextValue[] IfcBridgePartTypeEnum_ = { "ABUTMENT", "DECK", "DECK_SEGMENT", "FOUNDATION", "PIER", "PIER_SEGMENT", "PYLON", "SUBSTRUCTURE", "SUPERSTRUCTURE", "SURFACESTRUCTURE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBridgeTypeEnum_ = { "ARCHED", "CABLE_STAYED", "CANTILEVER", "CULVERT", "FRAMEWORK", "GIRDER", "SUSPENSION", "TRUSS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBSplineCurveForm_ = { "CIRCULAR_ARC", "ELLIPTIC_ARC", "HYPERBOLIC_ARC", "PARABOLIC_ARC", "POLYLINE_FORM", "UNSPECIFIED" };
        public static TextValue[] IfcBSplineSurfaceForm_ = { "CONICAL_SURF", "CYLINDRICAL_SURF", "GENERALISED_CONE", "PLANE_SURF", "QUADRIC_SURF", "RULED_SURF", "SPHERICAL_SURF", "SURF_OF_LINEAR_EXTRUSION", "SURF_OF_REVOLUTION", "TOROIDAL_SURF", "UNSPECIFIED" };
        public static TextValue[] IfcBuildingElementPartTypeEnum_ = { "APRON", "ARMOURUNIT", "INSULATION", "PRECASTPANEL", "SAFETYCAGE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBuildingElementProxyTypeEnum_ = { "COMPLEX", "ELEMENT", "PARTIAL", "PROVISIONFORSPACE", "PROVISIONFORVOID", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBuildingSystemTypeEnum_ = { "FENESTRATION", "FOUNDATION", "LOADBEARING", "OUTERSHELL", "SHADING", "TRANSPORT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBuiltSystemTypeEnum_ = { "EROSIONPREVENTION", "FENESTRATION", "FOUNDATION", "LOADBEARING", "MOORING", "OUTERSHELL", "PRESTRESSING", "RAILWAYLINE", "RAILWAYTRACK", "REINFORCING", "SHADING", "TRACKCIRCUIT", "TRANSPORT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcBurnerTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCableCarrierFittingTypeEnum_ = { "BEND", "CONNECTOR", "CROSS", "JUNCTION", "REDUCER", "TEE", "TRANSITION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCableCarrierSegmentTypeEnum_ = { "CABLEBRACKET", "CABLELADDERSEGMENT", "CABLETRAYSEGMENT", "CABLETRUNKINGSEGMENT", "CATENARYWIRE", "CONDUITSEGMENT", "DROPPER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCableFittingTypeEnum_ = { "CONNECTOR", "ENTRY", "EXIT", "FANOUT", "JUNCTION", "TRANSITION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCableSegmentTypeEnum_ = { "BUSBARSEGMENT", "CABLESEGMENT", "CONDUCTORSEGMENT", "CONTACTWIRESEGMENT", "CORESEGMENT", "FIBERSEGMENT", "FIBERTUBE", "OPTICALCABLESEGMENT", "STITCHWIRE", "WIREPAIRSEGMENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCaissonFoundationTypeEnum_ = { "CAISSON", "WELL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcChangeActionEnum_ = { "ADDED", "DELETED", "MODIFIED", "NOCHANGE", "NOTDEFINED" };
        public static TextValue[] IfcChillerTypeEnum_ = { "AIRCOOLED", "HEATRECOVERY", "WATERCOOLED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcChimneyTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCoilTypeEnum_ = { "DXCOOLINGCOIL", "ELECTRICHEATINGCOIL", "GASHEATINGCOIL", "HYDRONICCOIL", "STEAMHEATINGCOIL", "WATERCOOLINGCOIL", "WATERHEATINGCOIL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcColumnTypeEnum_ = { "COLUMN", "PIERSTEM", "PIERSTEM_SEGMENT", "PILASTER", "STANDCOLUMN", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCommunicationsApplianceTypeEnum_ = { "ANTENNA", "AUTOMATON", "COMPUTER", "FAX", "GATEWAY", "INTELLIGENTPERIPHERAL", "IPNETWORKEQUIPMENT", "LINESIDEELECTRONICUNIT", "MODEM", "NETWORKAPPLIANCE", "NETWORKBRIDGE", "NETWORKHUB", "OPTICALLINETERMINAL", "OPTICALNETWORKUNIT", "PRINTER", "RADIOBLOCKCENTER", "REPEATER", "ROUTER", "SCANNER", "TELECOMMAND", "TELEPHONYEXCHANGE", "TRANSITIONCOMPONENT", "TRANSPONDER", "TRANSPORTEQUIPMENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcComplexPropertyTemplateTypeEnum_ = { "P_COMPLEX", "Q_COMPLEX" };
        public static TextValue[] IfcCompressorTypeEnum_ = { "BOOSTER", "DYNAMIC", "HERMETIC", "OPENTYPE", "RECIPROCATING", "ROLLINGPISTON", "ROTARY", "ROTARYVANE", "SCROLL", "SEMIHERMETIC", "SINGLESCREW", "SINGLESTAGE", "TROCHOIDAL", "TWINSCREW", "WELDEDSHELLHERMETIC", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCondenserTypeEnum_ = { "AIRCOOLED", "EVAPORATIVECOOLED", "WATERCOOLED", "WATERCOOLEDBRAZEDPLATE", "WATERCOOLEDSHELLCOIL", "WATERCOOLEDSHELLTUBE", "WATERCOOLEDTUBEINTUBE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcConnectionTypeEnum_ = { "ATEND", "ATPATH", "ATSTART", "NOTDEFINED" };
        public static TextValue[] IfcConstraintEnum_ = { "ADVISORY", "HARD", "SOFT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcConstructionEquipmentResourceTypeEnum_ = { "DEMOLISHING", "EARTHMOVING", "ERECTING", "HEATING", "LIGHTING", "PAVING", "PUMPING", "TRANSPORTING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcConstructionMaterialResourceTypeEnum_ = { "AGGREGATES", "CONCRETE", "DRYWALL", "FUEL", "GYPSUM", "MASONRY", "METAL", "PLASTIC", "WOOD", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcConstructionProductResourceTypeEnum_ = { "ASSEMBLY", "FORMWORK", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcControllerTypeEnum_ = { "FLOATING", "MULTIPOSITION", "PROGRAMMABLE", "PROPORTIONAL", "TWOPOSITION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcConveyorSegmentTypeEnum_ = { "BELTCONVEYOR", "BUCKETCONVEYOR", "CHUTECONVEYOR", "SCREWCONVEYOR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCooledBeamTypeEnum_ = { "ACTIVE", "PASSIVE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCoolingTowerTypeEnum_ = { "MECHANICALFORCEDDRAFT", "MECHANICALINDUCEDDRAFT", "NATURALDRAFT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCostItemTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCostScheduleTypeEnum_ = { "BUDGET", "COSTPLAN", "ESTIMATE", "PRICEDBILLOFQUANTITIES", "SCHEDULEOFRATES", "TENDER", "UNPRICEDBILLOFQUANTITIES", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCourseTypeEnum_ = { "ARMOUR", "BALLASTBED", "CORE", "FILTER", "PAVEMENT", "PROTECTION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCoveringTypeEnum_ = { "CEILING", "CLADDING", "COPING", "FLOORING", "INSULATION", "MEMBRANE", "MOLDING", "ROOFING", "SKIRTINGBOARD", "SLEEVING", "TOPPING", "WRAPPING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCrewResourceTypeEnum_ = { "OFFICE", "SITE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCurtainWallTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcCurveInterpolationEnum_ = { "LINEAR", "LOG_LINEAR", "LOG_LOG", "NOTDEFINED" };
        public static TextValue[] IfcDamperTypeEnum_ = { "BACKDRAFTDAMPER", "BALANCINGDAMPER", "BLASTDAMPER", "CONTROLDAMPER", "FIREDAMPER", "FIRESMOKEDAMPER", "FUMEHOODEXHAUST", "GRAVITYDAMPER", "GRAVITYRELIEFDAMPER", "RELIEFDAMPER", "SMOKEDAMPER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDataOriginEnum_ = { "MEASURED", "PREDICTED", "SIMULATED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDerivedUnitEnum_ = { "ACCELERATIONUNIT", "ANGULARVELOCITYUNIT", "AREADENSITYUNIT", "COMPOUNDPLANEANGLEUNIT", "CURVATUREUNIT", "DYNAMICVISCOSITYUNIT", "HEATFLUXDENSITYUNIT", "HEATINGVALUEUNIT", "INTEGERCOUNTRATEUNIT", "IONCONCENTRATIONUNIT", "ISOTHERMALMOISTURECAPACITYUNIT", "KINEMATICVISCOSITYUNIT", "LINEARFORCEUNIT", "LINEARMOMENTUNIT", "LINEARSTIFFNESSUNIT", "LINEARVELOCITYUNIT", "LUMINOUSINTENSITYDISTRIBUTIONUNIT", "MASSDENSITYUNIT", "MASSFLOWRATEUNIT", "MASSPERLENGTHUNIT", "MODULUSOFELASTICITYUNIT", "MODULUSOFLINEARSUBGRADEREACTIONUNIT", "MODULUSOFROTATIONALSUBGRADEREACTIONUNIT", "MODULUSOFSUBGRADEREACTIONUNIT", "MOISTUREDIFFUSIVITYUNIT", "MOLECULARWEIGHTUNIT", "MOMENTOFINERTIAUNIT", "PHUNIT", "PLANARFORCEUNIT", "ROTATIONALFREQUENCYUNIT", "ROTATIONALMASSUNIT", "ROTATIONALSTIFFNESSUNIT", "SECTIONAREAINTEGRALUNIT", "SECTIONMODULUSUNIT", "SHEARMODULUSUNIT", "SOUNDPOWERLEVELUNIT", "SOUNDPOWERUNIT", "SOUNDPRESSURELEVELUNIT", "SOUNDPRESSUREUNIT", "SPECIFICHEATCAPACITYUNIT", "TEMPERATUREGRADIENTUNIT", "TEMPERATURERATEOFCHANGEUNIT", "THERMALADMITTANCEUNIT", "THERMALCONDUCTANCEUNIT", "THERMALEXPANSIONCOEFFICIENTUNIT", "THERMALRESISTANCEUNIT", "THERMALTRANSMITTANCEUNIT", "TORQUEUNIT", "VAPORPERMEABILITYUNIT", "VOLUMETRICFLOWRATEUNIT", "WARPINGCONSTANTUNIT", "WARPINGMOMENTUNIT", "USERDEFINED" };
        public static TextValue[] IfcDirectionSenseEnum_ = { "NEGATIVE", "POSITIVE" };
        public static TextValue[] IfcDiscreteAccessoryTypeEnum_ = { "ANCHORPLATE", "BIRDPROTECTION", "BRACKET", "CABLEARRANGER", "ELASTIC_CUSHION", "EXPANSION_JOINT_DEVICE", "FILLER", "FLASHING", "INSULATOR", "LOCK", "PANEL_STRENGTHENING", "POINTMACHINEMOUNTINGDEVICE", "POINT_MACHINE_LOCKING_DEVICE", "RAILBRACE", "RAILPAD", "RAIL_LUBRICATION", "RAIL_MECHANICAL_EQUIPMENT", "SHOE", "SLIDINGCHAIR", "SOUNDABSORPTION", "TENSIONINGEQUIPMENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDistributionBoardTypeEnum_ = { "CONSUMERUNIT", "DISPATCHINGBOARD", "DISTRIBUTIONBOARD", "DISTRIBUTIONFRAME", "MOTORCONTROLCENTRE", "SWITCHBOARD", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDistributionChamberElementTypeEnum_ = { "FORMEDDUCT", "INSPECTIONCHAMBER", "INSPECTIONPIT", "MANHOLE", "METERCHAMBER", "SUMP", "TRENCH", "VALVECHAMBER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDistributionPortTypeEnum_ = { "CABLE", "CABLECARRIER", "DUCT", "PIPE", "WIRELESS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDistributionSystemEnum_ = { "AIRCONDITIONING", "AUDIOVISUAL", "CATENARY_SYSTEM", "CHEMICAL", "CHILLEDWATER", "COMMUNICATION", "COMPRESSEDAIR", "CONDENSERWATER", "CONTROL", "CONVEYING", "DATA", "DISPOSAL", "DOMESTICCOLDWATER", "DOMESTICHOTWATER", "DRAINAGE", "EARTHING", "ELECTRICAL", "ELECTROACOUSTIC", "EXHAUST", "FIREPROTECTION", "FIXEDTRANSMISSIONNETWORK", "FUEL", "GAS", "HAZARDOUS", "HEATING", "LIGHTING", "LIGHTNINGPROTECTION", "MOBILENETWORK", "MONITORINGSYSTEM", "MUNICIPALSOLIDWASTE", "OIL", "OPERATIONAL", "OPERATIONALTELEPHONYSYSTEM", "OVERHEAD_CONTACTLINE_SYSTEM", "POWERGENERATION", "RAINWATER", "REFRIGERATION", "RETURN_CIRCUIT", "SECURITY", "SEWAGE", "SIGNAL", "STORMWATER", "TELEPHONE", "TV", "VACUUM", "VENT", "VENTILATION", "WASTEWATER", "WATERSUPPLY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDocumentConfidentialityEnum_ = { "CONFIDENTIAL", "PERSONAL", "PUBLIC", "RESTRICTED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDocumentStatusEnum_ = { "DRAFT", "FINAL", "FINALDRAFT", "REVISION", "NOTDEFINED" };
        public static TextValue[] IfcDoorPanelOperationEnum_ = { "DOUBLE_ACTING", "FIXEDPANEL", "FOLDING", "REVOLVING", "ROLLINGUP", "SLIDING", "SWINGING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDoorPanelPositionEnum_ = { "LEFT", "MIDDLE", "RIGHT", "NOTDEFINED" };
        public static TextValue[] IfcDoorTypeEnum_ = { "BOOM_BARRIER", "DOOR", "GATE", "TRAPDOOR", "TURNSTILE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDoorTypeOperationEnum_ = { "DOUBLE_DOOR_DOUBLE_SWING", "DOUBLE_DOOR_FOLDING", "DOUBLE_DOOR_LIFTING_VERTICAL", "DOUBLE_DOOR_SINGLE_SWING", "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT", "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT", "DOUBLE_DOOR_SLIDING", "DOUBLE_SWING_LEFT", "DOUBLE_SWING_RIGHT", "FOLDING_TO_LEFT", "FOLDING_TO_RIGHT", "LIFTING_HORIZONTAL", "LIFTING_VERTICAL_LEFT", "LIFTING_VERTICAL_RIGHT", "REVOLVING", "REVOLVING_VERTICAL", "ROLLINGUP", "SINGLE_SWING_LEFT", "SINGLE_SWING_RIGHT", "SLIDING_TO_LEFT", "SLIDING_TO_RIGHT", "SWING_FIXED_LEFT", "SWING_FIXED_RIGHT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDuctFittingTypeEnum_ = { "BEND", "CONNECTOR", "ENTRY", "EXIT", "JUNCTION", "OBSTRUCTION", "TRANSITION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDuctSegmentTypeEnum_ = { "FLEXIBLESEGMENT", "RIGIDSEGMENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcDuctSilencerTypeEnum_ = { "FLATOVAL", "RECTANGULAR", "ROUND", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcEarthworksCutTypeEnum_ = { "BASE_EXCAVATION", "CUT", "DREDGING", "EXCAVATION", "OVEREXCAVATION", "PAVEMENTMILLING", "STEPEXCAVATION", "TOPSOILREMOVAL", "TRENCH", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcEarthworksFillTypeEnum_ = { "BACKFILL", "COUNTERWEIGHT", "EMBANKMENT", "SLOPEFILL", "SUBGRADE", "SUBGRADEBED", "TRANSITIONSECTION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricApplianceTypeEnum_ = { "DISHWASHER", "ELECTRICCOOKER", "FREESTANDINGELECTRICHEATER", "FREESTANDINGFAN", "FREESTANDINGWATERCOOLER", "FREESTANDINGWATERHEATER", "FREEZER", "FRIDGE_FREEZER", "HANDDRYER", "KITCHENMACHINE", "MICROWAVE", "PHOTOCOPIER", "REFRIGERATOR", "TUMBLEDRYER", "VENDINGMACHINE", "WASHINGMACHINE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricDistributionBoardTypeEnum_ = { "CONSUMERUNIT", "DISTRIBUTIONBOARD", "MOTORCONTROLCENTRE", "SWITCHBOARD", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricFlowStorageDeviceTypeEnum_ = { "BATTERY", "CAPACITOR", "CAPACITORBANK", "COMPENSATOR", "HARMONICFILTER", "INDUCTOR", "INDUCTORBANK", "RECHARGER", "UPS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricFlowTreatmentDeviceTypeEnum_ = { "ELECTRONICFILTER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricGeneratorTypeEnum_ = { "CHP", "ENGINEGENERATOR", "STANDALONE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricMotorTypeEnum_ = { "DC", "INDUCTION", "POLYPHASE", "RELUCTANCESYNCHRONOUS", "SYNCHRONOUS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElectricTimeControlTypeEnum_ = { "RELAY", "TIMECLOCK", "TIMEDELAY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElementAssemblyTypeEnum_ = { "ABUTMENT", "ACCESSORY_ASSEMBLY", "ARCH", "BEAM_GRID", "BRACED_FRAME", "CROSS_BRACING", "DECK", "DILATATIONPANEL", "ENTRANCEWORKS", "GIRDER", "GRID", "MAST", "PIER", "PYLON", "RAIL_MECHANICAL_EQUIPMENT_ASSEMBLY", "REINFORCEMENT_UNIT", "RIGID_FRAME", "SHELTER", "SIGNALASSEMBLY", "SLAB_FIELD", "SUMPBUSTER", "SUPPORTINGASSEMBLY", "SUSPENSIONASSEMBLY", "TRACKPANEL", "TRACTION_SWITCHING_ASSEMBLY", "TRAFFIC_CALMING_DEVICE", "TRUSS", "TURNOUTPANEL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcElementCompositionEnum_ = { "COMPLEX", "ELEMENT", "PARTIAL" };
        public static TextValue[] IfcEngineTypeEnum_ = { "EXTERNALCOMBUSTION", "INTERNALCOMBUSTION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcEvaporativeCoolerTypeEnum_ = { "DIRECTEVAPORATIVEAIRWASHER", "DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER", "DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER", "DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER", "DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER", "INDIRECTDIRECTCOMBINATION", "INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER", "INDIRECTEVAPORATIVEPACKAGEAIRCOOLER", "INDIRECTEVAPORATIVEWETCOIL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcEvaporatorTypeEnum_ = { "DIRECTEXPANSION", "DIRECTEXPANSIONBRAZEDPLATE", "DIRECTEXPANSIONSHELLANDTUBE", "DIRECTEXPANSIONTUBEINTUBE", "FLOODEDSHELLANDTUBE", "SHELLANDCOIL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcEventTriggerTypeEnum_ = { "EVENTCOMPLEX", "EVENTMESSAGE", "EVENTRULE", "EVENTTIME", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcEventTypeEnum_ = { "ENDEVENT", "INTERMEDIATEEVENT", "STARTEVENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcExternalSpatialElementTypeEnum_ = { "EXTERNAL", "EXTERNAL_EARTH", "EXTERNAL_FIRE", "EXTERNAL_WATER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFacilityPartCommonTypeEnum_ = { "ABOVEGROUND", "BELOWGROUND", "JUNCTION", "LEVELCROSSING", "SEGMENT", "SUBSTRUCTURE", "SUPERSTRUCTURE", "TERMINAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFacilityUsageEnum_ = { "LATERAL", "LONGITUDINAL", "REGION", "VERTICAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFanTypeEnum_ = { "CENTRIFUGALAIRFOIL", "CENTRIFUGALBACKWARDINCLINEDCURVED", "CENTRIFUGALFORWARDCURVED", "CENTRIFUGALRADIAL", "PROPELLORAXIAL", "TUBEAXIAL", "VANEAXIAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFastenerTypeEnum_ = { "GLUE", "MORTAR", "WELD", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFilterTypeEnum_ = { "AIRPARTICLEFILTER", "COMPRESSEDAIRFILTER", "ODORFILTER", "OILFILTER", "STRAINER", "WATERFILTER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFireSuppressionTerminalTypeEnum_ = { "BREECHINGINLET", "FIREHYDRANT", "FIREMONITOR", "HOSEREEL", "SPRINKLER", "SPRINKLERDEFLECTOR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFlowDirectionEnum_ = { "SINK", "SOURCE", "SOURCEANDSINK", "NOTDEFINED" };
        public static TextValue[] IfcFlowInstrumentTypeEnum_ = { "AMMETER", "COMBINED", "FREQUENCYMETER", "PHASEANGLEMETER", "POWERFACTORMETER", "PRESSUREGAUGE", "THERMOMETER", "VOLTMETER", "VOLTMETER_PEAK", "VOLTMETER_RMS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFlowMeterTypeEnum_ = { "ENERGYMETER", "GASMETER", "OILMETER", "WATERMETER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFootingTypeEnum_ = { "CAISSON_FOUNDATION", "FOOTING_BEAM", "PAD_FOOTING", "PILE_CAP", "STRIP_FOOTING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcFurnitureTypeEnum_ = { "BED", "CHAIR", "DESK", "FILECABINET", "SHELF", "SOFA", "TABLE", "TECHNICALCABINET", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcGeographicElementTypeEnum_ = { "SOIL_BORING_POINT", "TERRAIN", "VEGETATION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcGeometricProjectionEnum_ = { "ELEVATION_VIEW", "GRAPH_VIEW", "MODEL_VIEW", "PLAN_VIEW", "REFLECTED_PLAN_VIEW", "SECTION_VIEW", "SKETCH_VIEW", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcGeotechnicalStratumTypeEnum_ = { "SOLID", "VOID", "WATER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcGlobalOrLocalEnum_ = { "GLOBAL_COORDS", "LOCAL_COORDS" };
        public static TextValue[] IfcGridTypeEnum_ = { "IRREGULAR", "RADIAL", "RECTANGULAR", "TRIANGULAR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcHeatExchangerTypeEnum_ = { "PLATE", "SHELLANDTUBE", "TURNOUTHEATING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcHumidifierTypeEnum_ = { "ADIABATICAIRWASHER", "ADIABATICATOMIZING", "ADIABATICCOMPRESSEDAIRNOZZLE", "ADIABATICPAN", "ADIABATICRIGIDMEDIA", "ADIABATICULTRASONIC", "ADIABATICWETTEDELEMENT", "ASSISTEDBUTANE", "ASSISTEDELECTRIC", "ASSISTEDNATURALGAS", "ASSISTEDPROPANE", "ASSISTEDSTEAM", "STEAMINJECTION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcImpactProtectionDeviceTypeEnum_ = { "BUMPER", "CRASHCUSHION", "DAMPINGSYSTEM", "FENDER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcInterceptorTypeEnum_ = { "CYCLONIC", "GREASE", "OIL", "PETROL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcInternalOrExternalEnum_ = { "EXTERNAL", "EXTERNAL_EARTH", "EXTERNAL_FIRE", "EXTERNAL_WATER", "INTERNAL", "NOTDEFINED" };
        public static TextValue[] IfcInventoryTypeEnum_ = { "ASSETINVENTORY", "FURNITUREINVENTORY", "SPACEINVENTORY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcJunctionBoxTypeEnum_ = { "DATA", "POWER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcKerbTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcKnotType_ = { "PIECEWISE_BEZIER_KNOTS", "QUASI_UNIFORM_KNOTS", "UNIFORM_KNOTS", "UNSPECIFIED" };
        public static TextValue[] IfcLaborResourceTypeEnum_ = { "ADMINISTRATION", "CARPENTRY", "CLEANING", "CONCRETE", "DRYWALL", "ELECTRIC", "FINISHING", "FLOORING", "GENERAL", "HVAC", "LANDSCAPING", "MASONRY", "PAINTING", "PAVING", "PLUMBING", "ROOFING", "SITEGRADING", "STEELWORK", "SURVEYING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcLampTypeEnum_ = { "COMPACTFLUORESCENT", "FLUORESCENT", "HALOGEN", "HIGHPRESSUREMERCURY", "HIGHPRESSURESODIUM", "LED", "METALHALIDE", "OLED", "TUNGSTENFILAMENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcLayerSetDirectionEnum_ = { "AXIS1", "AXIS2", "AXIS3" };
        public static TextValue[] IfcLightDistributionCurveEnum_ = { "TYPE_A", "TYPE_B", "TYPE_C", "NOTDEFINED" };
        public static TextValue[] IfcLightEmissionSourceEnum_ = { "COMPACTFLUORESCENT", "FLUORESCENT", "HIGHPRESSUREMERCURY", "HIGHPRESSURESODIUM", "LIGHTEMITTINGDIODE", "LOWPRESSURESODIUM", "LOWVOLTAGEHALOGEN", "MAINVOLTAGEHALOGEN", "METALHALIDE", "TUNGSTENFILAMENT", "NOTDEFINED" };
        public static TextValue[] IfcLightFixtureTypeEnum_ = { "DIRECTIONSOURCE", "POINTSOURCE", "SECURITYLIGHTING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcLiquidTerminalTypeEnum_ = { "HOSEREEL", "LOADINGARM", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcLoadGroupTypeEnum_ = { "LOAD_CASE", "LOAD_COMBINATION", "LOAD_GROUP", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcLogicalOperatorEnum_ = { "LOGICALAND", "LOGICALNOTAND", "LOGICALNOTOR", "LOGICALOR", "LOGICALXOR" };
        public static TextValue[] IfcMarineFacilityTypeEnum_ = { "BARRIERBEACH", "BREAKWATER", "CANAL", "DRYDOCK", "FLOATINGDOCK", "HYDROLIFT", "JETTY", "LAUNCHRECOVERY", "MARINEDEFENCE", "NAVIGATIONALCHANNEL", "PORT", "QUAY", "REVETMENT", "SHIPLIFT", "SHIPLOCK", "SHIPYARD", "SLIPWAY", "WATERWAY", "WATERWAYSHIPLIFT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcMarinePartTypeEnum_ = { "ABOVEWATERLINE", "ANCHORAGE", "APPROACHCHANNEL", "BELOWWATERLINE", "BERTHINGSTRUCTURE", "CHAMBER", "CILL_LEVEL", "COPELEVEL", "CORE", "CREST", "GATEHEAD", "GUDINGSTRUCTURE", "HIGHWATERLINE", "LANDFIELD", "LEEWARDSIDE", "LOWWATERLINE", "MANUFACTURING", "NAVIGATIONALAREA", "PROTECTION", "SHIPTRANSFER", "STORAGEAREA", "VEHICLESERVICING", "WATERFIELD", "WEATHERSIDE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcMechanicalFastenerTypeEnum_ = { "ANCHORBOLT", "BOLT", "CHAIN", "COUPLER", "DOWEL", "NAIL", "NAILPLATE", "RAILFASTENING", "RAILJOINT", "RIVET", "ROPE", "SCREW", "SHEARCONNECTOR", "STAPLE", "STUDSHEARCONNECTOR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcMedicalDeviceTypeEnum_ = { "AIRSTATION", "FEEDAIRUNIT", "OXYGENGENERATOR", "OXYGENPLANT", "VACUUMSTATION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcMemberTypeEnum_ = { "ARCH_SEGMENT", "BRACE", "CHORD", "COLLAR", "MEMBER", "MULLION", "PLATE", "POST", "PURLIN", "RAFTER", "STAY_CABLE", "STIFFENING_RIB", "STRINGER", "STRUCTURALCABLE", "STRUT", "STUD", "SUSPENDER", "SUSPENSION_CABLE", "TIEBAR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcMobileTelecommunicationsApplianceTypeEnum_ = { "ACCESSPOINT", "BASEBANDUNIT", "BASETRANSCEIVERSTATION", "E_UTRAN_NODE_B", "GATEWAY_GPRS_SUPPORT_NODE", "MASTERUNIT", "MOBILESWITCHINGCENTER", "MSCSERVER", "PACKETCONTROLUNIT", "REMOTERADIOUNIT", "REMOTEUNIT", "SERVICE_GPRS_SUPPORT_NODE", "SUBSCRIBERSERVER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcMooringDeviceTypeEnum_ = { "BOLLARD", "LINETENSIONER", "MAGNETICDEVICE", "MOORINGHOOKS", "VACUUMDEVICE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcMotorConnectionTypeEnum_ = { "BELTDRIVE", "COUPLING", "DIRECTDRIVE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcNavigationElementTypeEnum_ = { "BEACON", "BUOY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcObjectiveEnum_ = { "CODECOMPLIANCE", "CODEWAIVER", "DESIGNINTENT", "EXTERNAL", "HEALTHANDSAFETY", "MERGECONFLICT", "MODELVIEW", "PARAMETER", "REQUIREMENT", "SPECIFICATION", "TRIGGERCONDITION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcOccupantTypeEnum_ = { "ASSIGNEE", "ASSIGNOR", "LESSEE", "LESSOR", "LETTINGAGENT", "OWNER", "TENANT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcOpeningElementTypeEnum_ = { "OPENING", "RECESS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcOutletTypeEnum_ = { "AUDIOVISUALOUTLET", "COMMUNICATIONSOUTLET", "DATAOUTLET", "POWEROUTLET", "TELEPHONEOUTLET", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPavementTypeEnum_ = { "FLEXIBLE", "RIGID", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPerformanceHistoryTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPermeableCoveringOperationEnum_ = { "GRILL", "LOUVER", "SCREEN", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPermitTypeEnum_ = { "ACCESS", "BUILDING", "WORK", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPhysicalOrVirtualEnum_ = { "PHYSICAL", "VIRTUAL", "NOTDEFINED" };
        public static TextValue[] IfcPileConstructionEnum_ = { "CAST_IN_PLACE", "COMPOSITE", "PRECAST_CONCRETE", "PREFAB_STEEL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPileTypeEnum_ = { "BORED", "COHESION", "DRIVEN", "FRICTION", "JETGROUTING", "SUPPORT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPipeFittingTypeEnum_ = { "BEND", "CONNECTOR", "ENTRY", "EXIT", "JUNCTION", "OBSTRUCTION", "TRANSITION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPipeSegmentTypeEnum_ = { "CULVERT", "FLEXIBLESEGMENT", "GUTTER", "RIGIDSEGMENT", "SPOOL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPlateTypeEnum_ = { "BASE_PLATE", "COVER_PLATE", "CURTAIN_PANEL", "FLANGE_PLATE", "GUSSET_PLATE", "SHEET", "SPLICE_PLATE", "STIFFENER_PLATE", "WEB_PLATE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPreferredSurfaceCurveRepresentation_ = { "CURVE3D", "PCURVE_S1", "PCURVE_S2" };
        public static TextValue[] IfcProcedureTypeEnum_ = { "ADVICE_CAUTION", "ADVICE_NOTE", "ADVICE_WARNING", "CALIBRATION", "DIAGNOSTIC", "SHUTDOWN", "STARTUP", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcProfileTypeEnum_ = { "AREA", "CURVE" };
        public static TextValue[] IfcProjectedOrTrueLengthEnum_ = { "PROJECTED_LENGTH", "TRUE_LENGTH" };
        public static TextValue[] IfcProjectionElementTypeEnum_ = { "BLISTER", "DEVIATOR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcProjectOrderTypeEnum_ = { "CHANGEORDER", "MAINTENANCEWORKORDER", "MOVEORDER", "PURCHASEORDER", "WORKORDER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPropertySetTemplateTypeEnum_ = { "PSET_MATERIALDRIVEN", "PSET_OCCURRENCEDRIVEN", "PSET_PERFORMANCEDRIVEN", "PSET_PROFILEDRIVEN", "PSET_TYPEDRIVENONLY", "PSET_TYPEDRIVENOVERRIDE", "QTO_OCCURRENCEDRIVEN", "QTO_TYPEDRIVENONLY", "QTO_TYPEDRIVENOVERRIDE", "NOTDEFINED" };
        public static TextValue[] IfcProtectiveDeviceTrippingUnitTypeEnum_ = { "ELECTROMAGNETIC", "ELECTRONIC", "RESIDUALCURRENT", "THERMAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcProtectiveDeviceTypeEnum_ = { "ANTI_ARCING_DEVICE", "CIRCUITBREAKER", "EARTHINGSWITCH", "EARTHLEAKAGECIRCUITBREAKER", "FUSEDISCONNECTOR", "RESIDUALCURRENTCIRCUITBREAKER", "RESIDUALCURRENTSWITCH", "SPARKGAP", "VARISTOR", "VOLTAGELIMITER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcPumpTypeEnum_ = { "CIRCULATOR", "ENDSUCTION", "SPLITCASE", "SUBMERSIBLEPUMP", "SUMPPUMP", "VERTICALINLINE", "VERTICALTURBINE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRailingTypeEnum_ = { "BALUSTRADE", "FENCE", "GUARDRAIL", "HANDRAIL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRailTypeEnum_ = { "BLADE", "CHECKRAIL", "GUARDRAIL", "RACKRAIL", "RAIL", "STOCKRAIL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRailwayPartTypeEnum_ = { "ABOVETRACK", "DILATIONTRACK", "LINESIDE", "LINESIDEPART", "PLAINTRACK", "SUBSTRUCTURE", "TRACK", "TRACKPART", "TURNOUTTRACK", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRailwayTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRampFlightTypeEnum_ = { "SPIRAL", "STRAIGHT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRampTypeEnum_ = { "HALF_TURN_RAMP", "QUARTER_TURN_RAMP", "SPIRAL_RAMP", "STRAIGHT_RUN_RAMP", "TWO_QUARTER_TURN_RAMP", "TWO_STRAIGHT_RUN_RAMP", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRecurrenceTypeEnum_ = { "BY_DAY_COUNT", "BY_WEEKDAY_COUNT", "DAILY", "MONTHLY_BY_DAY_OF_MONTH", "MONTHLY_BY_POSITION", "WEEKLY", "YEARLY_BY_DAY_OF_MONTH", "YEARLY_BY_POSITION" };
        public static TextValue[] IfcReferentTypeEnum_ = { "BOUNDARY", "INTERSECTION", "KILOPOINT", "LANDMARK", "MILEPOINT", "POSITION", "REFERENCEMARKER", "STATION", "SUPERELEVATIONEVENT", "WIDTHEVENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcReflectanceMethodEnum_ = { "BLINN", "FLAT", "GLASS", "MATT", "METAL", "MIRROR", "PHONG", "PHYSICAL", "PLASTIC", "STRAUSS", "NOTDEFINED" };
        public static TextValue[] IfcReinforcedSoilTypeEnum_ = { "DYNAMICALLYCOMPACTED", "GROUTED", "REPLACED", "ROLLERCOMPACTED", "SURCHARGEPRELOADED", "VERTICALLYDRAINED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcReinforcingBarRoleEnum_ = { "ANCHORING", "EDGE", "LIGATURE", "MAIN", "PUNCHING", "RING", "SHEAR", "STUD", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcReinforcingBarSurfaceEnum_ = { "PLAIN", "TEXTURED" };
        public static TextValue[] IfcReinforcingBarTypeEnum_ = { "ANCHORING", "EDGE", "LIGATURE", "MAIN", "PUNCHING", "RING", "SHEAR", "SPACEBAR", "STUD", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcReinforcingMeshTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRoadPartTypeEnum_ = { "BICYCLECROSSING", "BUS_STOP", "CARRIAGEWAY", "CENTRALISLAND", "CENTRALRESERVE", "HARDSHOULDER", "INTERSECTION", "LAYBY", "PARKINGBAY", "PASSINGBAY", "PEDESTRIAN_CROSSING", "RAILWAYCROSSING", "REFUGEISLAND", "ROADSEGMENT", "ROADSIDE", "ROADSIDEPART", "ROADWAYPLATEAU", "ROUNDABOUT", "SHOULDER", "SIDEWALK", "SOFTSHOULDER", "TOLLPLAZA", "TRAFFICISLAND", "TRAFFICLANE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRoadTypeEnum_ = { "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcRoleEnum_ = { "ARCHITECT", "BUILDINGOPERATOR", "BUILDINGOWNER", "CIVILENGINEER", "CLIENT", "COMMISSIONINGENGINEER", "CONSTRUCTIONMANAGER", "CONSULTANT", "CONTRACTOR", "COSTENGINEER", "ELECTRICALENGINEER", "ENGINEER", "FACILITIESMANAGER", "FIELDCONSTRUCTIONMANAGER", "MANUFACTURER", "MECHANICALENGINEER", "OWNER", "PROJECTMANAGER", "RESELLER", "STRUCTURALENGINEER", "SUBCONTRACTOR", "SUPPLIER", "USERDEFINED" };
        public static TextValue[] IfcRoofTypeEnum_ = { "BARREL_ROOF", "BUTTERFLY_ROOF", "DOME_ROOF", "FLAT_ROOF", "FREEFORM", "GABLE_ROOF", "GAMBREL_ROOF", "HIPPED_GABLE_ROOF", "HIP_ROOF", "MANSARD_ROOF", "PAVILION_ROOF", "RAINBOW_ROOF", "SHED_ROOF", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSanitaryTerminalTypeEnum_ = { "BATH", "BIDET", "CISTERN", "SANITARYFOUNTAIN", "SHOWER", "SINK", "TOILETPAN", "URINAL", "WASHHANDBASIN", "WCSEAT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSectionTypeEnum_ = { "TAPERED", "UNIFORM" };
        public static TextValue[] IfcSensorTypeEnum_ = { "CO2SENSOR", "CONDUCTANCESENSOR", "CONTACTSENSOR", "COSENSOR", "EARTHQUAKESENSOR", "FIRESENSOR", "FLOWSENSOR", "FOREIGNOBJECTDETECTIONSENSOR", "FROSTSENSOR", "GASSENSOR", "HEATSENSOR", "HUMIDITYSENSOR", "IDENTIFIERSENSOR", "IONCONCENTRATIONSENSOR", "LEVELSENSOR", "LIGHTSENSOR", "MOISTURESENSOR", "MOVEMENTSENSOR", "OBSTACLESENSOR", "PHSENSOR", "PRESSURESENSOR", "RADIATIONSENSOR", "RADIOACTIVITYSENSOR", "RAINSENSOR", "SMOKESENSOR", "SNOWDEPTHSENSOR", "SOUNDSENSOR", "TEMPERATURESENSOR", "TRAINSENSOR", "TURNOUTCLOSURESENSOR", "WHEELSENSOR", "WINDSENSOR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSequenceEnum_ = { "FINISH_FINISH", "FINISH_START", "START_FINISH", "START_START", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcShadingDeviceTypeEnum_ = { "AWNING", "JALOUSIE", "SHUTTER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSignalTypeEnum_ = { "AUDIO", "MIXED", "VISUAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSignTypeEnum_ = { "MARKER", "MIRROR", "PICTORAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSimplePropertyTemplateTypeEnum_ = { "P_BOUNDEDVALUE", "P_ENUMERATEDVALUE", "P_LISTVALUE", "P_REFERENCEVALUE", "P_SINGLEVALUE", "P_TABLEVALUE", "Q_AREA", "Q_COUNT", "Q_LENGTH", "Q_NUMBER", "Q_TIME", "Q_VOLUME", "Q_WEIGHT" };
        public static TextValue[] IfcSIPrefix_ = { "ATTO", "CENTI", "DECA", "DECI", "EXA", "FEMTO", "GIGA", "HECTO", "KILO", "MEGA", "MICRO", "MILLI", "NANO", "PETA", "PICO", "TERA" };
        public static TextValue[] IfcSIUnitName_ = { "AMPERE", "BECQUEREL", "CANDELA", "COULOMB", "CUBIC_METRE", "DEGREE_CELSIUS", "FARAD", "GRAM", "GRAY", "HENRY", "HERTZ", "JOULE", "KELVIN", "LUMEN", "LUX", "METRE", "MOLE", "NEWTON", "OHM", "PASCAL", "RADIAN", "SECOND", "SIEMENS", "SIEVERT", "SQUARE_METRE", "STERADIAN", "TESLA", "VOLT", "WATT", "WEBER" };
        public static TextValue[] IfcSlabTypeEnum_ = { "APPROACH_SLAB", "BASESLAB", "FLOOR", "LANDING", "PAVING", "ROOF", "SIDEWALK", "TRACKSLAB", "WEARING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSolarDeviceTypeEnum_ = { "SOLARCOLLECTOR", "SOLARPANEL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSpaceHeaterTypeEnum_ = { "CONVECTOR", "RADIATOR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSpaceTypeEnum_ = { "BERTH", "EXTERNAL", "GFA", "INTERNAL", "PARKING", "SPACE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSpatialZoneTypeEnum_ = { "CONSTRUCTION", "FIRESAFETY", "INTERFERENCE", "LIGHTING", "OCCUPANCY", "RESERVATION", "SECURITY", "THERMAL", "TRANSPORT", "VENTILATION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStackTerminalTypeEnum_ = { "BIRDCAGE", "COWL", "RAINWATERHOPPER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStairFlightTypeEnum_ = { "CURVED", "FREEFORM", "SPIRAL", "STRAIGHT", "WINDER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStairTypeEnum_ = { "CURVED_RUN_STAIR", "DOUBLE_RETURN_STAIR", "HALF_TURN_STAIR", "HALF_WINDING_STAIR", "LADDER", "QUARTER_TURN_STAIR", "QUARTER_WINDING_STAIR", "SPIRAL_STAIR", "STRAIGHT_RUN_STAIR", "THREE_QUARTER_TURN_STAIR", "THREE_QUARTER_WINDING_STAIR", "TWO_CURVED_RUN_STAIR", "TWO_QUARTER_TURN_STAIR", "TWO_QUARTER_WINDING_STAIR", "TWO_STRAIGHT_RUN_STAIR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStateEnum_ = { "LOCKED", "READONLY", "READONLYLOCKED", "READWRITE", "READWRITELOCKED" };
        public static TextValue[] IfcStructuralCurveActivityTypeEnum_ = { "CONST", "DISCRETE", "EQUIDISTANT", "LINEAR", "PARABOLA", "POLYGONAL", "SINUS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStructuralCurveMemberTypeEnum_ = { "CABLE", "COMPRESSION_MEMBER", "PIN_JOINED_MEMBER", "RIGID_JOINED_MEMBER", "TENSION_MEMBER", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStructuralSurfaceActivityTypeEnum_ = { "BILINEAR", "CONST", "DISCRETE", "ISOCONTOUR", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcStructuralSurfaceMemberTypeEnum_ = { "BENDING_ELEMENT", "MEMBRANE_ELEMENT", "SHELL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSubContractResourceTypeEnum_ = { "PURCHASE", "WORK", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSurfaceFeatureTypeEnum_ = { "DEFECT", "HATCHMARKING", "LINEMARKING", "MARK", "NONSKIDSURFACING", "PAVEMENTSURFACEMARKING", "RUMBLESTRIP", "SYMBOLMARKING", "TAG", "TRANSVERSERUMBLESTRIP", "TREATMENT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSurfaceSide_ = { "BOTH", "NEGATIVE", "POSITIVE" };
        public static TextValue[] IfcSwitchingDeviceTypeEnum_ = { "CONTACTOR", "DIMMERSWITCH", "EMERGENCYSTOP", "KEYPAD", "MOMENTARYSWITCH", "RELAY", "SELECTORSWITCH", "STARTER", "START_AND_STOP_EQUIPMENT", "SWITCHDISCONNECTOR", "TOGGLESWITCH", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcSystemFurnitureElementTypeEnum_ = { "PANEL", "SUBRACK", "WORKSURFACE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTankTypeEnum_ = { "BASIN", "BREAKPRESSURE", "EXPANSION", "FEEDANDEXPANSION", "OILRETENTIONTRAY", "PRESSUREVESSEL", "STORAGE", "VESSEL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTaskDurationEnum_ = { "ELAPSEDTIME", "WORKTIME", "NOTDEFINED" };
        public static TextValue[] IfcTaskTypeEnum_ = { "ADJUSTMENT", "ATTENDANCE", "CALIBRATION", "CONSTRUCTION", "DEMOLITION", "DISMANTLE", "DISPOSAL", "EMERGENCY", "INSPECTION", "INSTALLATION", "LOGISTIC", "MAINTENANCE", "MOVE", "OPERATION", "REMOVAL", "RENOVATION", "SAFETY", "SHUTDOWN", "STARTUP", "TESTING", "TROUBLESHOOTING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTendonAnchorTypeEnum_ = { "COUPLER", "FIXED_END", "TENSIONING_END", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTendonConduitTypeEnum_ = { "COUPLER", "DIABOLO", "DUCT", "GROUTING_DUCT", "TRUMPET", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTendonTypeEnum_ = { "BAR", "COATED", "STRAND", "WIRE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTextPath_ = { "DOWN", "LEFT", "RIGHT", "UP" };
        public static TextValue[] IfcTimeSeriesDataTypeEnum_ = { "CONTINUOUS", "DISCRETE", "DISCRETEBINARY", "PIECEWISEBINARY", "PIECEWISECONSTANT", "PIECEWISECONTINUOUS", "NOTDEFINED" };
        public static TextValue[] IfcTrackElementTypeEnum_ = { "BLOCKINGDEVICE", "DERAILER", "FROG", "HALF_SET_OF_BLADES", "SLEEPER", "SPEEDREGULATOR", "TRACKENDOFALIGNMENT", "VEHICLESTOP", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTransformerTypeEnum_ = { "CHOPPER", "COMBINED", "CURRENT", "FREQUENCY", "INVERTER", "RECTIFIER", "VOLTAGE", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTransitionCode_ = { "CONTINUOUS", "CONTSAMEGRADIENT", "CONTSAMEGRADIENTSAMECURVATURE", "DISCONTINUOUS" };
        public static TextValue[] IfcTransportElementTypeEnum_ = { "CRANEWAY", "ELEVATOR", "ESCALATOR", "HAULINGGEAR", "LIFTINGGEAR", "MOVINGWALKWAY", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcTrimmingPreference_ = { "CARTESIAN", "PARAMETER", "UNSPECIFIED" };
        public static TextValue[] IfcTubeBundleTypeEnum_ = { "FINNED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcUnitaryControlElementTypeEnum_ = { "ALARMPANEL", "BASESTATIONCONTROLLER", "COMBINED", "CONTROLPANEL", "GASDETECTIONPANEL", "HUMIDISTAT", "INDICATORPANEL", "MIMICPANEL", "THERMOSTAT", "WEATHERSTATION", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcUnitaryEquipmentTypeEnum_ = { "AIRCONDITIONINGUNIT", "AIRHANDLER", "DEHUMIDIFIER", "ROOFTOPUNIT", "SPLITSYSTEM", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcUnitEnum_ = { "ABSORBEDDOSEUNIT", "AMOUNTOFSUBSTANCEUNIT", "AREAUNIT", "DOSEEQUIVALENTUNIT", "ELECTRICCAPACITANCEUNIT", "ELECTRICCHARGEUNIT", "ELECTRICCONDUCTANCEUNIT", "ELECTRICCURRENTUNIT", "ELECTRICRESISTANCEUNIT", "ELECTRICVOLTAGEUNIT", "ENERGYUNIT", "FORCEUNIT", "FREQUENCYUNIT", "ILLUMINANCEUNIT", "INDUCTANCEUNIT", "LENGTHUNIT", "LUMINOUSFLUXUNIT", "LUMINOUSINTENSITYUNIT", "MAGNETICFLUXDENSITYUNIT", "MAGNETICFLUXUNIT", "MASSUNIT", "PLANEANGLEUNIT", "POWERUNIT", "PRESSUREUNIT", "RADIOACTIVITYUNIT", "SOLIDANGLEUNIT", "THERMODYNAMICTEMPERATUREUNIT", "TIMEUNIT", "VOLUMEUNIT", "USERDEFINED" };
        public static TextValue[] IfcValveTypeEnum_ = { "AIRRELEASE", "ANTIVACUUM", "CHANGEOVER", "CHECK", "COMMISSIONING", "DIVERTING", "DOUBLECHECK", "DOUBLEREGULATING", "DRAWOFFCOCK", "FAUCET", "FLUSHING", "GASCOCK", "GASTAP", "ISOLATING", "MIXING", "PRESSUREREDUCING", "PRESSURERELIEF", "REGULATING", "SAFETYCUTOFF", "STEAMTRAP", "STOPCOCK", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcVehicleTypeEnum_ = { "CARGO", "ROLLINGSTOCK", "VEHICLE", "VEHICLEAIR", "VEHICLEMARINE", "VEHICLETRACKED", "VEHICLEWHEELED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcVibrationDamperTypeEnum_ = { "AXIAL_YIELD", "BENDING_YIELD", "FRICTION", "RUBBER", "SHEAR_YIELD", "VISCOUS", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcVibrationIsolatorTypeEnum_ = { "BASE", "COMPRESSION", "SPRING", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcVirtualElementTypeEnum_ = { "BOUNDARY", "CLEARANCE", "PROVISIONFORVOID", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcVoidingFeatureTypeEnum_ = { "CHAMFER", "CUTOUT", "EDGE", "HOLE", "MITER", "NOTCH", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcWallTypeEnum_ = { "ELEMENTEDWALL", "MOVABLE", "PARAPET", "PARTITIONING", "PLUMBINGWALL", "POLYGONAL", "RETAININGWALL", "SHEAR", "SOLIDWALL", "STANDARD", "WAVEWALL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcWasteTerminalTypeEnum_ = { "FLOORTRAP", "FLOORWASTE", "GULLYSUMP", "GULLYTRAP", "ROOFDRAIN", "WASTEDISPOSALUNIT", "WASTETRAP", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcWindowPanelOperationEnum_ = { "BOTTOMHUNG", "FIXEDCASEMENT", "OTHEROPERATION", "PIVOTHORIZONTAL", "PIVOTVERTICAL", "REMOVABLECASEMENT", "SIDEHUNGLEFTHAND", "SIDEHUNGRIGHTHAND", "SLIDINGHORIZONTAL", "SLIDINGVERTICAL", "TILTANDTURNLEFTHAND", "TILTANDTURNRIGHTHAND", "TOPHUNG", "NOTDEFINED" };
        public static TextValue[] IfcWindowPanelPositionEnum_ = { "BOTTOM", "LEFT", "MIDDLE", "RIGHT", "TOP", "NOTDEFINED" };
        public static TextValue[] IfcWindowTypeEnum_ = { "LIGHTDOME", "SKYLIGHT", "WINDOW", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcWindowTypePartitioningEnum_ = { "DOUBLE_PANEL_HORIZONTAL", "DOUBLE_PANEL_VERTICAL", "SINGLE_PANEL", "TRIPLE_PANEL_BOTTOM", "TRIPLE_PANEL_HORIZONTAL", "TRIPLE_PANEL_LEFT", "TRIPLE_PANEL_RIGHT", "TRIPLE_PANEL_TOP", "TRIPLE_PANEL_VERTICAL", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcWorkCalendarTypeEnum_ = { "FIRSTSHIFT", "SECONDSHIFT", "THIRDSHIFT", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcWorkPlanTypeEnum_ = { "ACTUAL", "BASELINE", "PLANNED", "USERDEFINED", "NOTDEFINED" };
        public static TextValue[] IfcWorkScheduleTypeEnum_ = { "ACTUAL", "BASELINE", "PLANNED", "USERDEFINED", "NOTDEFINED" };
        }


    //
    // Defined types
    // 
    public class IfcArcIndex : List<IntValue> { }
    class IfcArcIndexSerializer : AggrSerializer_IntValue<IntValue, IfcArcIndex> { }
    public class IfcComplexNumber : List<double> { }
    class IfcComplexNumberSerializer : AggrSerializer_double<double, IfcComplexNumber> { }
    public class IfcCompoundPlaneAngleMeasure : List<IntValue> { }
    class IfcCompoundPlaneAngleMeasureSerializer : AggrSerializer_IntValue<IntValue, IfcCompoundPlaneAngleMeasure> { }
    public class IfcLineIndex : List<IntValue> { }
    class IfcLineIndexSerializer : AggrSerializer_IntValue<IntValue, IfcLineIndex> { }
    public class IfcPropertySetDefinitionSet : List<IfcPropertySetDefinition> { }
    class IfcPropertySetDefinitionSetSerializer : AggrSerializerInstance<IfcPropertySetDefinition, IfcPropertySetDefinitionSet> { }

    public class IfcActorSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcActorSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcActorSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcActorSelect() : base(null) { }

        public bool is_IfcOrganization { get { return IsADBEntity("IfcOrganization"); } }
        public IfcOrganization IfcOrganization
            {
            set { putEntityInstance("IFCORGANIZATION", value); }
            get { return new IfcOrganization(getEntityInstance("IFCORGANIZATION")); } 
            }
        public bool is_IfcPerson { get { return IsADBEntity("IfcPerson"); } }
        public IfcPerson IfcPerson
            {
            set { putEntityInstance("IFCPERSON", value); }
            get { return new IfcPerson(getEntityInstance("IFCPERSON")); } 
            }
        public bool is_IfcPersonAndOrganization { get { return IsADBEntity("IfcPersonAndOrganization"); } }
        public IfcPersonAndOrganization IfcPersonAndOrganization
            {
            set { putEntityInstance("IFCPERSONANDORGANIZATION", value); }
            get { return new IfcPersonAndOrganization(getEntityInstance("IFCPERSONANDORGANIZATION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcActorSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcActorSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcActorSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcActorSelect_get() : base(null) { }

        public bool is_IfcOrganization { get { return IsADBEntity("IfcOrganization"); } }
        public IfcOrganization IfcOrganization
            {
            get { return new IfcOrganization(getEntityInstance("IFCORGANIZATION")); }
            }
        public bool is_IfcPerson { get { return IsADBEntity("IfcPerson"); } }
        public IfcPerson IfcPerson
            {
            get { return new IfcPerson(getEntityInstance("IFCPERSON")); }
            }
        public bool is_IfcPersonAndOrganization { get { return IsADBEntity("IfcPersonAndOrganization"); } }
        public IfcPersonAndOrganization IfcPersonAndOrganization
            {
            get { return new IfcPersonAndOrganization(getEntityInstance("IFCPERSONANDORGANIZATION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDerivedMeasureValue : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDerivedMeasureValue(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDerivedMeasureValue(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDerivedMeasureValue() : base(null) { }

        public bool is_IfcAbsorbedDoseMeasure { get { return IsADBType("IFCABSORBEDDOSEMEASURE"); } }
        public double? IfcAbsorbedDoseMeasure
            {
            set { put_double("IFCABSORBEDDOSEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCABSORBEDDOSEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAccelerationMeasure { get { return IsADBType("IFCACCELERATIONMEASURE"); } }
        public double? IfcAccelerationMeasure
            {
            set { put_double("IFCACCELERATIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCACCELERATIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAngularVelocityMeasure { get { return IsADBType("IFCANGULARVELOCITYMEASURE"); } }
        public double? IfcAngularVelocityMeasure
            {
            set { put_double("IFCANGULARVELOCITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCANGULARVELOCITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAreaDensityMeasure { get { return IsADBType("IFCAREADENSITYMEASURE"); } }
        public double? IfcAreaDensityMeasure
            {
            set { put_double("IFCAREADENSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCAREADENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcCompoundPlaneAngleMeasure { get { return IsADBType("IFCCOMPOUNDPLANEANGLEMEASURE"); } }
        public IfcCompoundPlaneAngleMeasure IfcCompoundPlaneAngleMeasure { get { SdaiAggr aggr = getAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE"); return (new IfcCompoundPlaneAngleMeasureSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_IfcCompoundPlaneAngleMeasure(IEnumerable<IntValue> lst) { SdaiAggr aggr = (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE", aggr); }
        public void put_IfcCompoundPlaneAngleMeasure(IEnumerable lst) { SdaiAggr aggr = (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE", aggr); }
        public bool is_IfcCurvatureMeasure { get { return IsADBType("IFCCURVATUREMEASURE"); } }
        public double? IfcCurvatureMeasure
            {
            set { put_double("IFCCURVATUREMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCCURVATUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDoseEquivalentMeasure { get { return IsADBType("IFCDOSEEQUIVALENTMEASURE"); } }
        public double? IfcDoseEquivalentMeasure
            {
            set { put_double("IFCDOSEEQUIVALENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCDOSEEQUIVALENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDynamicViscosityMeasure { get { return IsADBType("IFCDYNAMICVISCOSITYMEASURE"); } }
        public double? IfcDynamicViscosityMeasure
            {
            set { put_double("IFCDYNAMICVISCOSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCDYNAMICVISCOSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricCapacitanceMeasure { get { return IsADBType("IFCELECTRICCAPACITANCEMEASURE"); } }
        public double? IfcElectricCapacitanceMeasure
            {
            set { put_double("IFCELECTRICCAPACITANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICCAPACITANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricChargeMeasure { get { return IsADBType("IFCELECTRICCHARGEMEASURE"); } }
        public double? IfcElectricChargeMeasure
            {
            set { put_double("IFCELECTRICCHARGEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICCHARGEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricConductanceMeasure { get { return IsADBType("IFCELECTRICCONDUCTANCEMEASURE"); } }
        public double? IfcElectricConductanceMeasure
            {
            set { put_double("IFCELECTRICCONDUCTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICCONDUCTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricResistanceMeasure { get { return IsADBType("IFCELECTRICRESISTANCEMEASURE"); } }
        public double? IfcElectricResistanceMeasure
            {
            set { put_double("IFCELECTRICRESISTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICRESISTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricVoltageMeasure { get { return IsADBType("IFCELECTRICVOLTAGEMEASURE"); } }
        public double? IfcElectricVoltageMeasure
            {
            set { put_double("IFCELECTRICVOLTAGEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICVOLTAGEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcEnergyMeasure { get { return IsADBType("IFCENERGYMEASURE"); } }
        public double? IfcEnergyMeasure
            {
            set { put_double("IFCENERGYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCENERGYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcForceMeasure { get { return IsADBType("IFCFORCEMEASURE"); } }
        public double? IfcForceMeasure
            {
            set { put_double("IFCFORCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcFrequencyMeasure { get { return IsADBType("IFCFREQUENCYMEASURE"); } }
        public double? IfcFrequencyMeasure
            {
            set { put_double("IFCFREQUENCYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCFREQUENCYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcHeatFluxDensityMeasure { get { return IsADBType("IFCHEATFLUXDENSITYMEASURE"); } }
        public double? IfcHeatFluxDensityMeasure
            {
            set { put_double("IFCHEATFLUXDENSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCHEATFLUXDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcHeatingValueMeasure { get { return IsADBType("IFCHEATINGVALUEMEASURE"); } }
        public double? IfcHeatingValueMeasure
            {
            set { put_double("IFCHEATINGVALUEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCHEATINGVALUEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIlluminanceMeasure { get { return IsADBType("IFCILLUMINANCEMEASURE"); } }
        public double? IfcIlluminanceMeasure
            {
            set { put_double("IFCILLUMINANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCILLUMINANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcInductanceMeasure { get { return IsADBType("IFCINDUCTANCEMEASURE"); } }
        public double? IfcInductanceMeasure
            {
            set { put_double("IFCINDUCTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCINDUCTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIntegerCountRateMeasure { get { return IsADBType("IFCINTEGERCOUNTRATEMEASURE"); } }
        public IntValue? IfcIntegerCountRateMeasure
            {
            set { put_IntValue("IFCINTEGERCOUNTRATEMEASURE", ifcengine.sdaiINTEGER, value); }
            get { return get_IntValue("IFCINTEGERCOUNTRATEMEASURE", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcIonConcentrationMeasure { get { return IsADBType("IFCIONCONCENTRATIONMEASURE"); } }
        public double? IfcIonConcentrationMeasure
            {
            set { put_double("IFCIONCONCENTRATIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCIONCONCENTRATIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIsothermalMoistureCapacityMeasure { get { return IsADBType("IFCISOTHERMALMOISTURECAPACITYMEASURE"); } }
        public double? IfcIsothermalMoistureCapacityMeasure
            {
            set { put_double("IFCISOTHERMALMOISTURECAPACITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCISOTHERMALMOISTURECAPACITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcKinematicViscosityMeasure { get { return IsADBType("IFCKINEMATICVISCOSITYMEASURE"); } }
        public double? IfcKinematicViscosityMeasure
            {
            set { put_double("IFCKINEMATICVISCOSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCKINEMATICVISCOSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearForceMeasure { get { return IsADBType("IFCLINEARFORCEMEASURE"); } }
        public double? IfcLinearForceMeasure
            {
            set { put_double("IFCLINEARFORCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLINEARFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearMomentMeasure { get { return IsADBType("IFCLINEARMOMENTMEASURE"); } }
        public double? IfcLinearMomentMeasure
            {
            set { put_double("IFCLINEARMOMENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLINEARMOMENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearStiffnessMeasure { get { return IsADBType("IFCLINEARSTIFFNESSMEASURE"); } }
        public double? IfcLinearStiffnessMeasure
            {
            set { put_double("IFCLINEARSTIFFNESSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLINEARSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearVelocityMeasure { get { return IsADBType("IFCLINEARVELOCITYMEASURE"); } }
        public double? IfcLinearVelocityMeasure
            {
            set { put_double("IFCLINEARVELOCITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLINEARVELOCITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousFluxMeasure { get { return IsADBType("IFCLUMINOUSFLUXMEASURE"); } }
        public double? IfcLuminousFluxMeasure
            {
            set { put_double("IFCLUMINOUSFLUXMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLUMINOUSFLUXMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousIntensityDistributionMeasure { get { return IsADBType("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE"); } }
        public double? IfcLuminousIntensityDistributionMeasure
            {
            set { put_double("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMagneticFluxDensityMeasure { get { return IsADBType("IFCMAGNETICFLUXDENSITYMEASURE"); } }
        public double? IfcMagneticFluxDensityMeasure
            {
            set { put_double("IFCMAGNETICFLUXDENSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMAGNETICFLUXDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMagneticFluxMeasure { get { return IsADBType("IFCMAGNETICFLUXMEASURE"); } }
        public double? IfcMagneticFluxMeasure
            {
            set { put_double("IFCMAGNETICFLUXMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMAGNETICFLUXMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassDensityMeasure { get { return IsADBType("IFCMASSDENSITYMEASURE"); } }
        public double? IfcMassDensityMeasure
            {
            set { put_double("IFCMASSDENSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMASSDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassFlowRateMeasure { get { return IsADBType("IFCMASSFLOWRATEMEASURE"); } }
        public double? IfcMassFlowRateMeasure
            {
            set { put_double("IFCMASSFLOWRATEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMASSFLOWRATEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassPerLengthMeasure { get { return IsADBType("IFCMASSPERLENGTHMEASURE"); } }
        public double? IfcMassPerLengthMeasure
            {
            set { put_double("IFCMASSPERLENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMASSPERLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfElasticityMeasure { get { return IsADBType("IFCMODULUSOFELASTICITYMEASURE"); } }
        public double? IfcModulusOfElasticityMeasure
            {
            set { put_double("IFCMODULUSOFELASTICITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMODULUSOFELASTICITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfLinearSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfLinearSubgradeReactionMeasure
            {
            set { put_double("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfRotationalSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfRotationalSubgradeReactionMeasure
            {
            set { put_double("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfSubgradeReactionMeasure
            {
            set { put_double("IFCMODULUSOFSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMODULUSOFSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMoistureDiffusivityMeasure { get { return IsADBType("IFCMOISTUREDIFFUSIVITYMEASURE"); } }
        public double? IfcMoistureDiffusivityMeasure
            {
            set { put_double("IFCMOISTUREDIFFUSIVITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMOISTUREDIFFUSIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMolecularWeightMeasure { get { return IsADBType("IFCMOLECULARWEIGHTMEASURE"); } }
        public double? IfcMolecularWeightMeasure
            {
            set { put_double("IFCMOLECULARWEIGHTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMOLECULARWEIGHTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMomentOfInertiaMeasure { get { return IsADBType("IFCMOMENTOFINERTIAMEASURE"); } }
        public double? IfcMomentOfInertiaMeasure
            {
            set { put_double("IFCMOMENTOFINERTIAMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMOMENTOFINERTIAMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMonetaryMeasure { get { return IsADBType("IFCMONETARYMEASURE"); } }
        public double? IfcMonetaryMeasure
            {
            set { put_double("IFCMONETARYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMONETARYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPHMeasure { get { return IsADBType("IFCPHMEASURE"); } }
        public double? IfcPHMeasure
            {
            set { put_double("IFCPHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPlanarForceMeasure { get { return IsADBType("IFCPLANARFORCEMEASURE"); } }
        public double? IfcPlanarForceMeasure
            {
            set { put_double("IFCPLANARFORCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPLANARFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPowerMeasure { get { return IsADBType("IFCPOWERMEASURE"); } }
        public double? IfcPowerMeasure
            {
            set { put_double("IFCPOWERMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOWERMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPressureMeasure { get { return IsADBType("IFCPRESSUREMEASURE"); } }
        public double? IfcPressureMeasure
            {
            set { put_double("IFCPRESSUREMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPRESSUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRadioActivityMeasure { get { return IsADBType("IFCRADIOACTIVITYMEASURE"); } }
        public double? IfcRadioActivityMeasure
            {
            set { put_double("IFCRADIOACTIVITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCRADIOACTIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalFrequencyMeasure { get { return IsADBType("IFCROTATIONALFREQUENCYMEASURE"); } }
        public double? IfcRotationalFrequencyMeasure
            {
            set { put_double("IFCROTATIONALFREQUENCYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCROTATIONALFREQUENCYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalMassMeasure { get { return IsADBType("IFCROTATIONALMASSMEASURE"); } }
        public double? IfcRotationalMassMeasure
            {
            set { put_double("IFCROTATIONALMASSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCROTATIONALMASSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalStiffnessMeasure { get { return IsADBType("IFCROTATIONALSTIFFNESSMEASURE"); } }
        public double? IfcRotationalStiffnessMeasure
            {
            set { put_double("IFCROTATIONALSTIFFNESSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCROTATIONALSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSectionModulusMeasure { get { return IsADBType("IFCSECTIONMODULUSMEASURE"); } }
        public double? IfcSectionModulusMeasure
            {
            set { put_double("IFCSECTIONMODULUSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSECTIONMODULUSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSectionalAreaIntegralMeasure { get { return IsADBType("IFCSECTIONALAREAINTEGRALMEASURE"); } }
        public double? IfcSectionalAreaIntegralMeasure
            {
            set { put_double("IFCSECTIONALAREAINTEGRALMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSECTIONALAREAINTEGRALMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcShearModulusMeasure { get { return IsADBType("IFCSHEARMODULUSMEASURE"); } }
        public double? IfcShearModulusMeasure
            {
            set { put_double("IFCSHEARMODULUSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSHEARMODULUSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPowerLevelMeasure { get { return IsADBType("IFCSOUNDPOWERLEVELMEASURE"); } }
        public double? IfcSoundPowerLevelMeasure
            {
            set { put_double("IFCSOUNDPOWERLEVELMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSOUNDPOWERLEVELMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPowerMeasure { get { return IsADBType("IFCSOUNDPOWERMEASURE"); } }
        public double? IfcSoundPowerMeasure
            {
            set { put_double("IFCSOUNDPOWERMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSOUNDPOWERMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPressureLevelMeasure { get { return IsADBType("IFCSOUNDPRESSURELEVELMEASURE"); } }
        public double? IfcSoundPressureLevelMeasure
            {
            set { put_double("IFCSOUNDPRESSURELEVELMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSOUNDPRESSURELEVELMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPressureMeasure { get { return IsADBType("IFCSOUNDPRESSUREMEASURE"); } }
        public double? IfcSoundPressureMeasure
            {
            set { put_double("IFCSOUNDPRESSUREMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSOUNDPRESSUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSpecificHeatCapacityMeasure { get { return IsADBType("IFCSPECIFICHEATCAPACITYMEASURE"); } }
        public double? IfcSpecificHeatCapacityMeasure
            {
            set { put_double("IFCSPECIFICHEATCAPACITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSPECIFICHEATCAPACITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTemperatureGradientMeasure { get { return IsADBType("IFCTEMPERATUREGRADIENTMEASURE"); } }
        public double? IfcTemperatureGradientMeasure
            {
            set { put_double("IFCTEMPERATUREGRADIENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTEMPERATUREGRADIENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTemperatureRateOfChangeMeasure { get { return IsADBType("IFCTEMPERATURERATEOFCHANGEMEASURE"); } }
        public double? IfcTemperatureRateOfChangeMeasure
            {
            set { put_double("IFCTEMPERATURERATEOFCHANGEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTEMPERATURERATEOFCHANGEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalAdmittanceMeasure { get { return IsADBType("IFCTHERMALADMITTANCEMEASURE"); } }
        public double? IfcThermalAdmittanceMeasure
            {
            set { put_double("IFCTHERMALADMITTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMALADMITTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalConductivityMeasure { get { return IsADBType("IFCTHERMALCONDUCTIVITYMEASURE"); } }
        public double? IfcThermalConductivityMeasure
            {
            set { put_double("IFCTHERMALCONDUCTIVITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMALCONDUCTIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalExpansionCoefficientMeasure { get { return IsADBType("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE"); } }
        public double? IfcThermalExpansionCoefficientMeasure
            {
            set { put_double("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalResistanceMeasure { get { return IsADBType("IFCTHERMALRESISTANCEMEASURE"); } }
        public double? IfcThermalResistanceMeasure
            {
            set { put_double("IFCTHERMALRESISTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMALRESISTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalTransmittanceMeasure { get { return IsADBType("IFCTHERMALTRANSMITTANCEMEASURE"); } }
        public double? IfcThermalTransmittanceMeasure
            {
            set { put_double("IFCTHERMALTRANSMITTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMALTRANSMITTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTorqueMeasure { get { return IsADBType("IFCTORQUEMEASURE"); } }
        public double? IfcTorqueMeasure
            {
            set { put_double("IFCTORQUEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTORQUEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcVaporPermeabilityMeasure { get { return IsADBType("IFCVAPORPERMEABILITYMEASURE"); } }
        public double? IfcVaporPermeabilityMeasure
            {
            set { put_double("IFCVAPORPERMEABILITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCVAPORPERMEABILITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcVolumetricFlowRateMeasure { get { return IsADBType("IFCVOLUMETRICFLOWRATEMEASURE"); } }
        public double? IfcVolumetricFlowRateMeasure
            {
            set { put_double("IFCVOLUMETRICFLOWRATEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCVOLUMETRICFLOWRATEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcWarpingConstantMeasure { get { return IsADBType("IFCWARPINGCONSTANTMEASURE"); } }
        public double? IfcWarpingConstantMeasure
            {
            set { put_double("IFCWARPINGCONSTANTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCWARPINGCONSTANTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcWarpingMomentMeasure { get { return IsADBType("IFCWARPINGMOMENTMEASURE"); } }
        public double? IfcWarpingMomentMeasure
            {
            set { put_double("IFCWARPINGMOMENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCWARPINGMOMENTMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        };


    public class IfcDerivedMeasureValue_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDerivedMeasureValue_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDerivedMeasureValue_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDerivedMeasureValue_get() : base(null) { }

        public bool is_IfcAbsorbedDoseMeasure { get { return IsADBType("IFCABSORBEDDOSEMEASURE"); } }
        public double? IfcAbsorbedDoseMeasure
            {
            get { return get_double("IFCABSORBEDDOSEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAccelerationMeasure { get { return IsADBType("IFCACCELERATIONMEASURE"); } }
        public double? IfcAccelerationMeasure
            {
            get { return get_double("IFCACCELERATIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAngularVelocityMeasure { get { return IsADBType("IFCANGULARVELOCITYMEASURE"); } }
        public double? IfcAngularVelocityMeasure
            {
            get { return get_double("IFCANGULARVELOCITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAreaDensityMeasure { get { return IsADBType("IFCAREADENSITYMEASURE"); } }
        public double? IfcAreaDensityMeasure
            {
            get { return get_double("IFCAREADENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcCompoundPlaneAngleMeasure { get { return IsADBType("IFCCOMPOUNDPLANEANGLEMEASURE"); } }
        public IfcCompoundPlaneAngleMeasure IfcCompoundPlaneAngleMeasure { get { SdaiAggr aggr = getAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE"); return (new IfcCompoundPlaneAngleMeasureSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public bool is_IfcCurvatureMeasure { get { return IsADBType("IFCCURVATUREMEASURE"); } }
        public double? IfcCurvatureMeasure
            {
            get { return get_double("IFCCURVATUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDoseEquivalentMeasure { get { return IsADBType("IFCDOSEEQUIVALENTMEASURE"); } }
        public double? IfcDoseEquivalentMeasure
            {
            get { return get_double("IFCDOSEEQUIVALENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcDynamicViscosityMeasure { get { return IsADBType("IFCDYNAMICVISCOSITYMEASURE"); } }
        public double? IfcDynamicViscosityMeasure
            {
            get { return get_double("IFCDYNAMICVISCOSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricCapacitanceMeasure { get { return IsADBType("IFCELECTRICCAPACITANCEMEASURE"); } }
        public double? IfcElectricCapacitanceMeasure
            {
            get { return get_double("IFCELECTRICCAPACITANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricChargeMeasure { get { return IsADBType("IFCELECTRICCHARGEMEASURE"); } }
        public double? IfcElectricChargeMeasure
            {
            get { return get_double("IFCELECTRICCHARGEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricConductanceMeasure { get { return IsADBType("IFCELECTRICCONDUCTANCEMEASURE"); } }
        public double? IfcElectricConductanceMeasure
            {
            get { return get_double("IFCELECTRICCONDUCTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricResistanceMeasure { get { return IsADBType("IFCELECTRICRESISTANCEMEASURE"); } }
        public double? IfcElectricResistanceMeasure
            {
            get { return get_double("IFCELECTRICRESISTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcElectricVoltageMeasure { get { return IsADBType("IFCELECTRICVOLTAGEMEASURE"); } }
        public double? IfcElectricVoltageMeasure
            {
            get { return get_double("IFCELECTRICVOLTAGEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcEnergyMeasure { get { return IsADBType("IFCENERGYMEASURE"); } }
        public double? IfcEnergyMeasure
            {
            get { return get_double("IFCENERGYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcForceMeasure { get { return IsADBType("IFCFORCEMEASURE"); } }
        public double? IfcForceMeasure
            {
            get { return get_double("IFCFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcFrequencyMeasure { get { return IsADBType("IFCFREQUENCYMEASURE"); } }
        public double? IfcFrequencyMeasure
            {
            get { return get_double("IFCFREQUENCYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcHeatFluxDensityMeasure { get { return IsADBType("IFCHEATFLUXDENSITYMEASURE"); } }
        public double? IfcHeatFluxDensityMeasure
            {
            get { return get_double("IFCHEATFLUXDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcHeatingValueMeasure { get { return IsADBType("IFCHEATINGVALUEMEASURE"); } }
        public double? IfcHeatingValueMeasure
            {
            get { return get_double("IFCHEATINGVALUEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIlluminanceMeasure { get { return IsADBType("IFCILLUMINANCEMEASURE"); } }
        public double? IfcIlluminanceMeasure
            {
            get { return get_double("IFCILLUMINANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcInductanceMeasure { get { return IsADBType("IFCINDUCTANCEMEASURE"); } }
        public double? IfcInductanceMeasure
            {
            get { return get_double("IFCINDUCTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIntegerCountRateMeasure { get { return IsADBType("IFCINTEGERCOUNTRATEMEASURE"); } }
        public IntValue? IfcIntegerCountRateMeasure
            {
            get { return get_IntValue("IFCINTEGERCOUNTRATEMEASURE", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcIonConcentrationMeasure { get { return IsADBType("IFCIONCONCENTRATIONMEASURE"); } }
        public double? IfcIonConcentrationMeasure
            {
            get { return get_double("IFCIONCONCENTRATIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcIsothermalMoistureCapacityMeasure { get { return IsADBType("IFCISOTHERMALMOISTURECAPACITYMEASURE"); } }
        public double? IfcIsothermalMoistureCapacityMeasure
            {
            get { return get_double("IFCISOTHERMALMOISTURECAPACITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcKinematicViscosityMeasure { get { return IsADBType("IFCKINEMATICVISCOSITYMEASURE"); } }
        public double? IfcKinematicViscosityMeasure
            {
            get { return get_double("IFCKINEMATICVISCOSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearForceMeasure { get { return IsADBType("IFCLINEARFORCEMEASURE"); } }
        public double? IfcLinearForceMeasure
            {
            get { return get_double("IFCLINEARFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearMomentMeasure { get { return IsADBType("IFCLINEARMOMENTMEASURE"); } }
        public double? IfcLinearMomentMeasure
            {
            get { return get_double("IFCLINEARMOMENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearStiffnessMeasure { get { return IsADBType("IFCLINEARSTIFFNESSMEASURE"); } }
        public double? IfcLinearStiffnessMeasure
            {
            get { return get_double("IFCLINEARSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLinearVelocityMeasure { get { return IsADBType("IFCLINEARVELOCITYMEASURE"); } }
        public double? IfcLinearVelocityMeasure
            {
            get { return get_double("IFCLINEARVELOCITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousFluxMeasure { get { return IsADBType("IFCLUMINOUSFLUXMEASURE"); } }
        public double? IfcLuminousFluxMeasure
            {
            get { return get_double("IFCLUMINOUSFLUXMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousIntensityDistributionMeasure { get { return IsADBType("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE"); } }
        public double? IfcLuminousIntensityDistributionMeasure
            {
            get { return get_double("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMagneticFluxDensityMeasure { get { return IsADBType("IFCMAGNETICFLUXDENSITYMEASURE"); } }
        public double? IfcMagneticFluxDensityMeasure
            {
            get { return get_double("IFCMAGNETICFLUXDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMagneticFluxMeasure { get { return IsADBType("IFCMAGNETICFLUXMEASURE"); } }
        public double? IfcMagneticFluxMeasure
            {
            get { return get_double("IFCMAGNETICFLUXMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassDensityMeasure { get { return IsADBType("IFCMASSDENSITYMEASURE"); } }
        public double? IfcMassDensityMeasure
            {
            get { return get_double("IFCMASSDENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassFlowRateMeasure { get { return IsADBType("IFCMASSFLOWRATEMEASURE"); } }
        public double? IfcMassFlowRateMeasure
            {
            get { return get_double("IFCMASSFLOWRATEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassPerLengthMeasure { get { return IsADBType("IFCMASSPERLENGTHMEASURE"); } }
        public double? IfcMassPerLengthMeasure
            {
            get { return get_double("IFCMASSPERLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfElasticityMeasure { get { return IsADBType("IFCMODULUSOFELASTICITYMEASURE"); } }
        public double? IfcModulusOfElasticityMeasure
            {
            get { return get_double("IFCMODULUSOFELASTICITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfLinearSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfLinearSubgradeReactionMeasure
            {
            get { return get_double("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfRotationalSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfRotationalSubgradeReactionMeasure
            {
            get { return get_double("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcModulusOfSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfSubgradeReactionMeasure
            {
            get { return get_double("IFCMODULUSOFSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMoistureDiffusivityMeasure { get { return IsADBType("IFCMOISTUREDIFFUSIVITYMEASURE"); } }
        public double? IfcMoistureDiffusivityMeasure
            {
            get { return get_double("IFCMOISTUREDIFFUSIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMolecularWeightMeasure { get { return IsADBType("IFCMOLECULARWEIGHTMEASURE"); } }
        public double? IfcMolecularWeightMeasure
            {
            get { return get_double("IFCMOLECULARWEIGHTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMomentOfInertiaMeasure { get { return IsADBType("IFCMOMENTOFINERTIAMEASURE"); } }
        public double? IfcMomentOfInertiaMeasure
            {
            get { return get_double("IFCMOMENTOFINERTIAMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMonetaryMeasure { get { return IsADBType("IFCMONETARYMEASURE"); } }
        public double? IfcMonetaryMeasure
            {
            get { return get_double("IFCMONETARYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPHMeasure { get { return IsADBType("IFCPHMEASURE"); } }
        public double? IfcPHMeasure
            {
            get { return get_double("IFCPHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPlanarForceMeasure { get { return IsADBType("IFCPLANARFORCEMEASURE"); } }
        public double? IfcPlanarForceMeasure
            {
            get { return get_double("IFCPLANARFORCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPowerMeasure { get { return IsADBType("IFCPOWERMEASURE"); } }
        public double? IfcPowerMeasure
            {
            get { return get_double("IFCPOWERMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPressureMeasure { get { return IsADBType("IFCPRESSUREMEASURE"); } }
        public double? IfcPressureMeasure
            {
            get { return get_double("IFCPRESSUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRadioActivityMeasure { get { return IsADBType("IFCRADIOACTIVITYMEASURE"); } }
        public double? IfcRadioActivityMeasure
            {
            get { return get_double("IFCRADIOACTIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalFrequencyMeasure { get { return IsADBType("IFCROTATIONALFREQUENCYMEASURE"); } }
        public double? IfcRotationalFrequencyMeasure
            {
            get { return get_double("IFCROTATIONALFREQUENCYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalMassMeasure { get { return IsADBType("IFCROTATIONALMASSMEASURE"); } }
        public double? IfcRotationalMassMeasure
            {
            get { return get_double("IFCROTATIONALMASSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRotationalStiffnessMeasure { get { return IsADBType("IFCROTATIONALSTIFFNESSMEASURE"); } }
        public double? IfcRotationalStiffnessMeasure
            {
            get { return get_double("IFCROTATIONALSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSectionModulusMeasure { get { return IsADBType("IFCSECTIONMODULUSMEASURE"); } }
        public double? IfcSectionModulusMeasure
            {
            get { return get_double("IFCSECTIONMODULUSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSectionalAreaIntegralMeasure { get { return IsADBType("IFCSECTIONALAREAINTEGRALMEASURE"); } }
        public double? IfcSectionalAreaIntegralMeasure
            {
            get { return get_double("IFCSECTIONALAREAINTEGRALMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcShearModulusMeasure { get { return IsADBType("IFCSHEARMODULUSMEASURE"); } }
        public double? IfcShearModulusMeasure
            {
            get { return get_double("IFCSHEARMODULUSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPowerLevelMeasure { get { return IsADBType("IFCSOUNDPOWERLEVELMEASURE"); } }
        public double? IfcSoundPowerLevelMeasure
            {
            get { return get_double("IFCSOUNDPOWERLEVELMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPowerMeasure { get { return IsADBType("IFCSOUNDPOWERMEASURE"); } }
        public double? IfcSoundPowerMeasure
            {
            get { return get_double("IFCSOUNDPOWERMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPressureLevelMeasure { get { return IsADBType("IFCSOUNDPRESSURELEVELMEASURE"); } }
        public double? IfcSoundPressureLevelMeasure
            {
            get { return get_double("IFCSOUNDPRESSURELEVELMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSoundPressureMeasure { get { return IsADBType("IFCSOUNDPRESSUREMEASURE"); } }
        public double? IfcSoundPressureMeasure
            {
            get { return get_double("IFCSOUNDPRESSUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSpecificHeatCapacityMeasure { get { return IsADBType("IFCSPECIFICHEATCAPACITYMEASURE"); } }
        public double? IfcSpecificHeatCapacityMeasure
            {
            get { return get_double("IFCSPECIFICHEATCAPACITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTemperatureGradientMeasure { get { return IsADBType("IFCTEMPERATUREGRADIENTMEASURE"); } }
        public double? IfcTemperatureGradientMeasure
            {
            get { return get_double("IFCTEMPERATUREGRADIENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTemperatureRateOfChangeMeasure { get { return IsADBType("IFCTEMPERATURERATEOFCHANGEMEASURE"); } }
        public double? IfcTemperatureRateOfChangeMeasure
            {
            get { return get_double("IFCTEMPERATURERATEOFCHANGEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalAdmittanceMeasure { get { return IsADBType("IFCTHERMALADMITTANCEMEASURE"); } }
        public double? IfcThermalAdmittanceMeasure
            {
            get { return get_double("IFCTHERMALADMITTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalConductivityMeasure { get { return IsADBType("IFCTHERMALCONDUCTIVITYMEASURE"); } }
        public double? IfcThermalConductivityMeasure
            {
            get { return get_double("IFCTHERMALCONDUCTIVITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalExpansionCoefficientMeasure { get { return IsADBType("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE"); } }
        public double? IfcThermalExpansionCoefficientMeasure
            {
            get { return get_double("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalResistanceMeasure { get { return IsADBType("IFCTHERMALRESISTANCEMEASURE"); } }
        public double? IfcThermalResistanceMeasure
            {
            get { return get_double("IFCTHERMALRESISTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermalTransmittanceMeasure { get { return IsADBType("IFCTHERMALTRANSMITTANCEMEASURE"); } }
        public double? IfcThermalTransmittanceMeasure
            {
            get { return get_double("IFCTHERMALTRANSMITTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTorqueMeasure { get { return IsADBType("IFCTORQUEMEASURE"); } }
        public double? IfcTorqueMeasure
            {
            get { return get_double("IFCTORQUEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcVaporPermeabilityMeasure { get { return IsADBType("IFCVAPORPERMEABILITYMEASURE"); } }
        public double? IfcVaporPermeabilityMeasure
            {
            get { return get_double("IFCVAPORPERMEABILITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcVolumetricFlowRateMeasure { get { return IsADBType("IFCVOLUMETRICFLOWRATEMEASURE"); } }
        public double? IfcVolumetricFlowRateMeasure
            {
            get { return get_double("IFCVOLUMETRICFLOWRATEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcWarpingConstantMeasure { get { return IsADBType("IFCWARPINGCONSTANTMEASURE"); } }
        public double? IfcWarpingConstantMeasure
            {
            get { return get_double("IFCWARPINGCONSTANTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcWarpingMomentMeasure { get { return IsADBType("IFCWARPINGMOMENTMEASURE"); } }
        public double? IfcWarpingMomentMeasure
            {
            get { return get_double("IFCWARPINGMOMENTMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        };


    public class IfcMeasureValue : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMeasureValue(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMeasureValue(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMeasureValue() : base(null) { }

        public bool is_IfcAmountOfSubstanceMeasure { get { return IsADBType("IFCAMOUNTOFSUBSTANCEMEASURE"); } }
        public double? IfcAmountOfSubstanceMeasure
            {
            set { put_double("IFCAMOUNTOFSUBSTANCEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCAMOUNTOFSUBSTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAreaMeasure { get { return IsADBType("IFCAREAMEASURE"); } }
        public double? IfcAreaMeasure
            {
            set { put_double("IFCAREAMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCAREAMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcComplexNumber { get { return IsADBType("IFCCOMPLEXNUMBER"); } }
        public IfcComplexNumber IfcComplexNumber { get { SdaiAggr aggr = getAggrValue("IFCCOMPLEXNUMBER"); return (new IfcComplexNumberSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_IfcComplexNumber(IEnumerable<double> lst) { SdaiAggr aggr = (new IfcComplexNumberSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCCOMPLEXNUMBER", aggr); }
        public void put_IfcComplexNumber(IEnumerable lst) { SdaiAggr aggr = (new IfcComplexNumberSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCCOMPLEXNUMBER", aggr); }
        public bool is_IfcContextDependentMeasure { get { return IsADBType("IFCCONTEXTDEPENDENTMEASURE"); } }
        public double? IfcContextDependentMeasure
            {
            set { put_double("IFCCONTEXTDEPENDENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCCONTEXTDEPENDENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcCountMeasure { get { return IsADBType("IFCCOUNTMEASURE"); } }
        public IntValue? IfcCountMeasure
            {
            set { put_IntValue("IFCCOUNTMEASURE", ifcengine.sdaiINTEGER, value); }
            get { return get_IntValue("IFCCOUNTMEASURE", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcDescriptiveMeasure { get { return IsADBType("IFCDESCRIPTIVEMEASURE"); } }
        public TextValue IfcDescriptiveMeasure { 
            set { putTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcElectricCurrentMeasure { get { return IsADBType("IFCELECTRICCURRENTMEASURE"); } }
        public double? IfcElectricCurrentMeasure
            {
            set { put_double("IFCELECTRICCURRENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCELECTRICCURRENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            set { put_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousIntensityMeasure { get { return IsADBType("IFCLUMINOUSINTENSITYMEASURE"); } }
        public double? IfcLuminousIntensityMeasure
            {
            set { put_double("IFCLUMINOUSINTENSITYMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLUMINOUSINTENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassMeasure { get { return IsADBType("IFCMASSMEASURE"); } }
        public double? IfcMassMeasure
            {
            set { put_double("IFCMASSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMASSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNonNegativeLengthMeasure { get { return IsADBType("IFCNONNEGATIVELENGTHMEASURE"); } }
        public double? IfcNonNegativeLengthMeasure
            {
            set { put_double("IFCNONNEGATIVELENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCNONNEGATIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            set { put_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNumericMeasure { get { return IsADBType("IFCNUMERICMEASURE"); } }
        public double? IfcNumericMeasure
            {
            set { put_double("IFCNUMERICMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCNUMERICMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcParameterValue { get { return IsADBType("IFCPARAMETERVALUE"); } }
        public double? IfcParameterValue
            {
            set { put_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPlaneAngleMeasure { get { return IsADBType("IFCPLANEANGLEMEASURE"); } }
        public double? IfcPlaneAngleMeasure
            {
            set { put_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            set { put_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositivePlaneAngleMeasure { get { return IsADBType("IFCPOSITIVEPLANEANGLEMEASURE"); } }
        public double? IfcPositivePlaneAngleMeasure
            {
            set { put_double("IFCPOSITIVEPLANEANGLEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVEPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveRatioMeasure { get { return IsADBType("IFCPOSITIVERATIOMEASURE"); } }
        public double? IfcPositiveRatioMeasure
            {
            set { put_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            set { put_double("IFCRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSolidAngleMeasure { get { return IsADBType("IFCSOLIDANGLEMEASURE"); } }
        public double? IfcSolidAngleMeasure
            {
            set { put_double("IFCSOLIDANGLEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSOLIDANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermodynamicTemperatureMeasure { get { return IsADBType("IFCTHERMODYNAMICTEMPERATUREMEASURE"); } }
        public double? IfcThermodynamicTemperatureMeasure
            {
            set { put_double("IFCTHERMODYNAMICTEMPERATUREMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTHERMODYNAMICTEMPERATUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTimeMeasure { get { return IsADBType("IFCTIMEMEASURE"); } }
        public double? IfcTimeMeasure
            {
            set { put_double("IFCTIMEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCTIMEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcVolumeMeasure { get { return IsADBType("IFCVOLUMEMEASURE"); } }
        public double? IfcVolumeMeasure
            {
            set { put_double("IFCVOLUMEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCVOLUMEMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class IfcMeasureValue_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMeasureValue_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMeasureValue_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMeasureValue_get() : base(null) { }

        public bool is_IfcAmountOfSubstanceMeasure { get { return IsADBType("IFCAMOUNTOFSUBSTANCEMEASURE"); } }
        public double? IfcAmountOfSubstanceMeasure
            {
            get { return get_double("IFCAMOUNTOFSUBSTANCEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcAreaMeasure { get { return IsADBType("IFCAREAMEASURE"); } }
        public double? IfcAreaMeasure
            {
            get { return get_double("IFCAREAMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcComplexNumber { get { return IsADBType("IFCCOMPLEXNUMBER"); } }
        public IfcComplexNumber IfcComplexNumber { get { SdaiAggr aggr = getAggrValue("IFCCOMPLEXNUMBER"); return (new IfcComplexNumberSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public bool is_IfcContextDependentMeasure { get { return IsADBType("IFCCONTEXTDEPENDENTMEASURE"); } }
        public double? IfcContextDependentMeasure
            {
            get { return get_double("IFCCONTEXTDEPENDENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcCountMeasure { get { return IsADBType("IFCCOUNTMEASURE"); } }
        public IntValue? IfcCountMeasure
            {
            get { return get_IntValue("IFCCOUNTMEASURE", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcDescriptiveMeasure { get { return IsADBType("IFCDESCRIPTIVEMEASURE"); } }
        public TextValue IfcDescriptiveMeasure
            {
            get { return getTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcElectricCurrentMeasure { get { return IsADBType("IFCELECTRICCURRENTMEASURE"); } }
        public double? IfcElectricCurrentMeasure
            {
            get { return get_double("IFCELECTRICCURRENTMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcLuminousIntensityMeasure { get { return IsADBType("IFCLUMINOUSINTENSITYMEASURE"); } }
        public double? IfcLuminousIntensityMeasure
            {
            get { return get_double("IFCLUMINOUSINTENSITYMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcMassMeasure { get { return IsADBType("IFCMASSMEASURE"); } }
        public double? IfcMassMeasure
            {
            get { return get_double("IFCMASSMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNonNegativeLengthMeasure { get { return IsADBType("IFCNONNEGATIVELENGTHMEASURE"); } }
        public double? IfcNonNegativeLengthMeasure
            {
            get { return get_double("IFCNONNEGATIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNumericMeasure { get { return IsADBType("IFCNUMERICMEASURE"); } }
        public double? IfcNumericMeasure
            {
            get { return get_double("IFCNUMERICMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcParameterValue { get { return IsADBType("IFCPARAMETERVALUE"); } }
        public double? IfcParameterValue
            {
            get { return get_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPlaneAngleMeasure { get { return IsADBType("IFCPLANEANGLEMEASURE"); } }
        public double? IfcPlaneAngleMeasure
            {
            get { return get_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositivePlaneAngleMeasure { get { return IsADBType("IFCPOSITIVEPLANEANGLEMEASURE"); } }
        public double? IfcPositivePlaneAngleMeasure
            {
            get { return get_double("IFCPOSITIVEPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveRatioMeasure { get { return IsADBType("IFCPOSITIVERATIOMEASURE"); } }
        public double? IfcPositiveRatioMeasure
            {
            get { return get_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSolidAngleMeasure { get { return IsADBType("IFCSOLIDANGLEMEASURE"); } }
        public double? IfcSolidAngleMeasure
            {
            get { return get_double("IFCSOLIDANGLEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcThermodynamicTemperatureMeasure { get { return IsADBType("IFCTHERMODYNAMICTEMPERATUREMEASURE"); } }
        public double? IfcThermodynamicTemperatureMeasure
            {
            get { return get_double("IFCTHERMODYNAMICTEMPERATUREMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcTimeMeasure { get { return IsADBType("IFCTIMEMEASURE"); } }
        public double? IfcTimeMeasure
            {
            get { return get_double("IFCTIMEMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcVolumeMeasure { get { return IsADBType("IFCVOLUMEMEASURE"); } }
        public double? IfcVolumeMeasure
            {
            get { return get_double("IFCVOLUMEMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        };


    public class IfcSimpleValue : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSimpleValue(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSimpleValue(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSimpleValue() : base(null) { }

        public bool is_IfcBinary { get { return IsADBType("IFCBINARY"); } }
        public TextValue IfcBinary { 
            set { putTextValue("IFCBINARY", ifcengine.sdaiBINARY, value); }
            get { return getTextValue("IFCBINARY", ifcengine.sdaiBINARY); } 
            }
        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            set { put_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN, value); }
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcDate { get { return IsADBType("IFCDATE"); } }
        public TextValue IfcDate { 
            set { putTextValue("IFCDATE", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCDATE", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcDateTime { get { return IsADBType("IFCDATETIME"); } }
        public TextValue IfcDateTime { 
            set { putTextValue("IFCDATETIME", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCDATETIME", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcDuration { get { return IsADBType("IFCDURATION"); } }
        public TextValue IfcDuration { 
            set { putTextValue("IFCDURATION", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCDURATION", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcIdentifier { get { return IsADBType("IFCIDENTIFIER"); } }
        public TextValue IfcIdentifier { 
            set { putTextValue("IFCIDENTIFIER", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCIDENTIFIER", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcInteger { get { return IsADBType("IFCINTEGER"); } }
        public IntValue? IfcInteger
            {
            set { put_IntValue("IFCINTEGER", ifcengine.sdaiINTEGER, value); }
            get { return get_IntValue("IFCINTEGER", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcLabel { get { return IsADBType("IFCLABEL"); } }
        public TextValue IfcLabel { 
            set { putTextValue("IFCLABEL", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCLABEL", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcLogical { get { return IsADBType("IFCLOGICAL"); } }
        public LOGICAL_VALUE? IfcLogical 
            { 
            set {
                if (value.HasValue)
                    {
                    TextValue val = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); putEnumerationValue("IFCLOGICAL", val);
                    }
                else
                    {
                    Debug.Assert(false);
                    }
                }
            get { 
                int ind = getEnumerationIndex("IFCLOGICAL", EnumNames.LOGICAL_VALUE_); 
                return EnumValue<LOGICAL_VALUE>.FromIndex(ind); 
                } 
            }
        public bool is_IfcPositiveInteger { get { return IsADBType("IFCPOSITIVEINTEGER"); } }
        public IntValue? IfcPositiveInteger
            {
            set { put_IntValue("IFCPOSITIVEINTEGER", ifcengine.sdaiINTEGER, value); }
            get { return get_IntValue("IFCPOSITIVEINTEGER", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcReal { get { return IsADBType("IFCREAL"); } }
        public double? IfcReal
            {
            set { put_double("IFCREAL", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCREAL", ifcengine.sdaiREAL); }
            }
        public bool is_IfcText { get { return IsADBType("IFCTEXT"); } }
        public TextValue IfcText { 
            set { putTextValue("IFCTEXT", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCTEXT", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcTime { get { return IsADBType("IFCTIME"); } }
        public TextValue IfcTime { 
            set { putTextValue("IFCTIME", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCTIME", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcTimeStamp { get { return IsADBType("IFCTIMESTAMP"); } }
        public IntValue? IfcTimeStamp
            {
            set { put_IntValue("IFCTIMESTAMP", ifcengine.sdaiINTEGER, value); }
            get { return get_IntValue("IFCTIMESTAMP", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcURIReference { get { return IsADBType("IFCURIREFERENCE"); } }
        public TextValue IfcURIReference { 
            set { putTextValue("IFCURIREFERENCE", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCURIREFERENCE", ifcengine.sdaiSTRING); } 
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcSimpleValue_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSimpleValue_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSimpleValue_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSimpleValue_get() : base(null) { }

        public bool is_IfcBinary { get { return IsADBType("IFCBINARY"); } }
        public TextValue IfcBinary
            {
            get { return getTextValue("IFCBINARY", ifcengine.sdaiBINARY); }
            }
        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcDate { get { return IsADBType("IFCDATE"); } }
        public TextValue IfcDate
            {
            get { return getTextValue("IFCDATE", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcDateTime { get { return IsADBType("IFCDATETIME"); } }
        public TextValue IfcDateTime
            {
            get { return getTextValue("IFCDATETIME", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcDuration { get { return IsADBType("IFCDURATION"); } }
        public TextValue IfcDuration
            {
            get { return getTextValue("IFCDURATION", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcIdentifier { get { return IsADBType("IFCIDENTIFIER"); } }
        public TextValue IfcIdentifier
            {
            get { return getTextValue("IFCIDENTIFIER", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcInteger { get { return IsADBType("IFCINTEGER"); } }
        public IntValue? IfcInteger
            {
            get { return get_IntValue("IFCINTEGER", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcLabel { get { return IsADBType("IFCLABEL"); } }
        public TextValue IfcLabel
            {
            get { return getTextValue("IFCLABEL", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcLogical { get { return IsADBType("IFCLOGICAL"); } }
        public LOGICAL_VALUE? IfcLogical
            {
            get
                {
                int ind = getEnumerationIndex("IFCLOGICAL", EnumNames.LOGICAL_VALUE_);
                return EnumValue<LOGICAL_VALUE>.FromIndex(ind);
                }
            }
        public bool is_IfcPositiveInteger { get { return IsADBType("IFCPOSITIVEINTEGER"); } }
        public IntValue? IfcPositiveInteger
            {
            get { return get_IntValue("IFCPOSITIVEINTEGER", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcReal { get { return IsADBType("IFCREAL"); } }
        public double? IfcReal
            {
            get { return get_double("IFCREAL", ifcengine.sdaiREAL); }
            }
        public bool is_IfcText { get { return IsADBType("IFCTEXT"); } }
        public TextValue IfcText
            {
            get { return getTextValue("IFCTEXT", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcTime { get { return IsADBType("IFCTIME"); } }
        public TextValue IfcTime
            {
            get { return getTextValue("IFCTIME", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcTimeStamp { get { return IsADBType("IFCTIMESTAMP"); } }
        public IntValue? IfcTimeStamp
            {
            get { return get_IntValue("IFCTIMESTAMP", ifcengine.sdaiINTEGER); }
            }
        public bool is_IfcURIReference { get { return IsADBType("IFCURIREFERENCE"); } }
        public TextValue IfcURIReference
            {
            get { return getTextValue("IFCURIREFERENCE", ifcengine.sdaiSTRING); }
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcValue : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcValue(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcValue(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcValue() : base(null) { }

        public IfcDerivedMeasureValue IfcDerivedMeasureValue { get { return new IfcDerivedMeasureValue(this); } }
        public IfcMeasureValue IfcMeasureValue { get { return new IfcMeasureValue(this); } }
        public IfcSimpleValue IfcSimpleValue { get { return new IfcSimpleValue(this); } }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        };


    public class IfcValue_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcValue_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcValue_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcValue_get() : base(null) { }

        public IfcDerivedMeasureValue_get IfcDerivedMeasureValue { get { return new IfcDerivedMeasureValue_get(this); } }
        public IfcMeasureValue_get IfcMeasureValue { get { return new IfcMeasureValue_get(this); } }
        public IfcSimpleValue_get IfcSimpleValue { get { return new IfcSimpleValue_get(this); } }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        };


    public class IfcAppliedValueSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcAppliedValueSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcAppliedValueSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcAppliedValueSelect() : base(null) { }

        public bool is_IfcMeasureWithUnit { get { return IsADBEntity("IfcMeasureWithUnit"); } }
        public IfcMeasureWithUnit IfcMeasureWithUnit
            {
            set { putEntityInstance("IFCMEASUREWITHUNIT", value); }
            get { return new IfcMeasureWithUnit(getEntityInstance("IFCMEASUREWITHUNIT")); } 
            }
        public bool is_IfcReference { get { return IsADBEntity("IfcReference"); } }
        public IfcReference IfcReference
            {
            set { putEntityInstance("IFCREFERENCE", value); }
            get { return new IfcReference(getEntityInstance("IFCREFERENCE")); } 
            }
        public IfcValue IfcValue { get { return new IfcValue(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        };


    public class IfcAppliedValueSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcAppliedValueSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcAppliedValueSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcAppliedValueSelect_get() : base(null) { }

        public bool is_IfcMeasureWithUnit { get { return IsADBEntity("IfcMeasureWithUnit"); } }
        public IfcMeasureWithUnit IfcMeasureWithUnit
            {
            get { return new IfcMeasureWithUnit(getEntityInstance("IFCMEASUREWITHUNIT")); }
            }
        public bool is_IfcReference { get { return IsADBEntity("IfcReference"); } }
        public IfcReference IfcReference
            {
            get { return new IfcReference(getEntityInstance("IFCREFERENCE")); }
            }
        public IfcValue_get IfcValue { get { return new IfcValue_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        };


    public class IfcAxis2Placement : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcAxis2Placement(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcAxis2Placement(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcAxis2Placement() : base(null) { }

        public bool is_IfcAxis2Placement2D { get { return IsADBEntity("IfcAxis2Placement2D"); } }
        public IfcAxis2Placement2D IfcAxis2Placement2D
            {
            set { putEntityInstance("IFCAXIS2PLACEMENT2D", value); }
            get { return new IfcAxis2Placement2D(getEntityInstance("IFCAXIS2PLACEMENT2D")); } 
            }
        public bool is_IfcAxis2Placement3D { get { return IsADBEntity("IfcAxis2Placement3D"); } }
        public IfcAxis2Placement3D IfcAxis2Placement3D
            {
            set { putEntityInstance("IFCAXIS2PLACEMENT3D", value); }
            get { return new IfcAxis2Placement3D(getEntityInstance("IFCAXIS2PLACEMENT3D")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcAxis2Placement_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcAxis2Placement_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcAxis2Placement_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcAxis2Placement_get() : base(null) { }

        public bool is_IfcAxis2Placement2D { get { return IsADBEntity("IfcAxis2Placement2D"); } }
        public IfcAxis2Placement2D IfcAxis2Placement2D
            {
            get { return new IfcAxis2Placement2D(getEntityInstance("IFCAXIS2PLACEMENT2D")); }
            }
        public bool is_IfcAxis2Placement3D { get { return IsADBEntity("IfcAxis2Placement3D"); } }
        public IfcAxis2Placement3D IfcAxis2Placement3D
            {
            get { return new IfcAxis2Placement3D(getEntityInstance("IFCAXIS2PLACEMENT3D")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcBendingParameterSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcBendingParameterSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcBendingParameterSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcBendingParameterSelect() : base(null) { }

        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            set { put_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPlaneAngleMeasure { get { return IsADBType("IFCPLANEANGLEMEASURE"); } }
        public double? IfcPlaneAngleMeasure
            {
            set { put_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcBendingParameterSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcBendingParameterSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcBendingParameterSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcBendingParameterSelect_get() : base(null) { }

        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPlaneAngleMeasure { get { return IsADBType("IFCPLANEANGLEMEASURE"); } }
        public double? IfcPlaneAngleMeasure
            {
            get { return get_double("IFCPLANEANGLEMEASURE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcBooleanOperand : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcBooleanOperand(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcBooleanOperand(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcBooleanOperand() : base(null) { }

        public bool is_IfcBooleanResult { get { return IsADBEntity("IfcBooleanResult"); } }
        public IfcBooleanResult IfcBooleanResult
            {
            set { putEntityInstance("IFCBOOLEANRESULT", value); }
            get { return new IfcBooleanResult(getEntityInstance("IFCBOOLEANRESULT")); } 
            }
        public bool is_IfcCsgPrimitive3D { get { return IsADBEntity("IfcCsgPrimitive3D"); } }
        public IfcCsgPrimitive3D IfcCsgPrimitive3D
            {
            set { putEntityInstance("IFCCSGPRIMITIVE3D", value); }
            get { return new IfcCsgPrimitive3D(getEntityInstance("IFCCSGPRIMITIVE3D")); } 
            }
        public bool is_IfcHalfSpaceSolid { get { return IsADBEntity("IfcHalfSpaceSolid"); } }
        public IfcHalfSpaceSolid IfcHalfSpaceSolid
            {
            set { putEntityInstance("IFCHALFSPACESOLID", value); }
            get { return new IfcHalfSpaceSolid(getEntityInstance("IFCHALFSPACESOLID")); } 
            }
        public bool is_IfcSolidModel { get { return IsADBEntity("IfcSolidModel"); } }
        public IfcSolidModel IfcSolidModel
            {
            set { putEntityInstance("IFCSOLIDMODEL", value); }
            get { return new IfcSolidModel(getEntityInstance("IFCSOLIDMODEL")); } 
            }
        public bool is_IfcTessellatedFaceSet { get { return IsADBEntity("IfcTessellatedFaceSet"); } }
        public IfcTessellatedFaceSet IfcTessellatedFaceSet
            {
            set { putEntityInstance("IFCTESSELLATEDFACESET", value); }
            get { return new IfcTessellatedFaceSet(getEntityInstance("IFCTESSELLATEDFACESET")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcBooleanOperand_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcBooleanOperand_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcBooleanOperand_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcBooleanOperand_get() : base(null) { }

        public bool is_IfcBooleanResult { get { return IsADBEntity("IfcBooleanResult"); } }
        public IfcBooleanResult IfcBooleanResult
            {
            get { return new IfcBooleanResult(getEntityInstance("IFCBOOLEANRESULT")); }
            }
        public bool is_IfcCsgPrimitive3D { get { return IsADBEntity("IfcCsgPrimitive3D"); } }
        public IfcCsgPrimitive3D IfcCsgPrimitive3D
            {
            get { return new IfcCsgPrimitive3D(getEntityInstance("IFCCSGPRIMITIVE3D")); }
            }
        public bool is_IfcHalfSpaceSolid { get { return IsADBEntity("IfcHalfSpaceSolid"); } }
        public IfcHalfSpaceSolid IfcHalfSpaceSolid
            {
            get { return new IfcHalfSpaceSolid(getEntityInstance("IFCHALFSPACESOLID")); }
            }
        public bool is_IfcSolidModel { get { return IsADBEntity("IfcSolidModel"); } }
        public IfcSolidModel IfcSolidModel
            {
            get { return new IfcSolidModel(getEntityInstance("IFCSOLIDMODEL")); }
            }
        public bool is_IfcTessellatedFaceSet { get { return IsADBEntity("IfcTessellatedFaceSet"); } }
        public IfcTessellatedFaceSet IfcTessellatedFaceSet
            {
            get { return new IfcTessellatedFaceSet(getEntityInstance("IFCTESSELLATEDFACESET")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcClassificationReferenceSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcClassificationReferenceSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcClassificationReferenceSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcClassificationReferenceSelect() : base(null) { }

        public bool is_IfcClassification { get { return IsADBEntity("IfcClassification"); } }
        public IfcClassification IfcClassification
            {
            set { putEntityInstance("IFCCLASSIFICATION", value); }
            get { return new IfcClassification(getEntityInstance("IFCCLASSIFICATION")); } 
            }
        public bool is_IfcClassificationReference { get { return IsADBEntity("IfcClassificationReference"); } }
        public IfcClassificationReference IfcClassificationReference
            {
            set { putEntityInstance("IFCCLASSIFICATIONREFERENCE", value); }
            get { return new IfcClassificationReference(getEntityInstance("IFCCLASSIFICATIONREFERENCE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcClassificationReferenceSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcClassificationReferenceSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcClassificationReferenceSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcClassificationReferenceSelect_get() : base(null) { }

        public bool is_IfcClassification { get { return IsADBEntity("IfcClassification"); } }
        public IfcClassification IfcClassification
            {
            get { return new IfcClassification(getEntityInstance("IFCCLASSIFICATION")); }
            }
        public bool is_IfcClassificationReference { get { return IsADBEntity("IfcClassificationReference"); } }
        public IfcClassificationReference IfcClassificationReference
            {
            get { return new IfcClassificationReference(getEntityInstance("IFCCLASSIFICATIONREFERENCE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcClassificationSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcClassificationSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcClassificationSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcClassificationSelect() : base(null) { }

        public bool is_IfcClassification { get { return IsADBEntity("IfcClassification"); } }
        public IfcClassification IfcClassification
            {
            set { putEntityInstance("IFCCLASSIFICATION", value); }
            get { return new IfcClassification(getEntityInstance("IFCCLASSIFICATION")); } 
            }
        public bool is_IfcClassificationReference { get { return IsADBEntity("IfcClassificationReference"); } }
        public IfcClassificationReference IfcClassificationReference
            {
            set { putEntityInstance("IFCCLASSIFICATIONREFERENCE", value); }
            get { return new IfcClassificationReference(getEntityInstance("IFCCLASSIFICATIONREFERENCE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcClassificationSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcClassificationSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcClassificationSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcClassificationSelect_get() : base(null) { }

        public bool is_IfcClassification { get { return IsADBEntity("IfcClassification"); } }
        public IfcClassification IfcClassification
            {
            get { return new IfcClassification(getEntityInstance("IFCCLASSIFICATION")); }
            }
        public bool is_IfcClassificationReference { get { return IsADBEntity("IfcClassificationReference"); } }
        public IfcClassificationReference IfcClassificationReference
            {
            get { return new IfcClassificationReference(getEntityInstance("IFCCLASSIFICATIONREFERENCE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcColour : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcColour(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcColour(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcColour() : base(null) { }

        public bool is_IfcColourSpecification { get { return IsADBEntity("IfcColourSpecification"); } }
        public IfcColourSpecification IfcColourSpecification
            {
            set { putEntityInstance("IFCCOLOURSPECIFICATION", value); }
            get { return new IfcColourSpecification(getEntityInstance("IFCCOLOURSPECIFICATION")); } 
            }
        public bool is_IfcPreDefinedColour { get { return IsADBEntity("IfcPreDefinedColour"); } }
        public IfcPreDefinedColour IfcPreDefinedColour
            {
            set { putEntityInstance("IFCPREDEFINEDCOLOUR", value); }
            get { return new IfcPreDefinedColour(getEntityInstance("IFCPREDEFINEDCOLOUR")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcColour_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcColour_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcColour_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcColour_get() : base(null) { }

        public bool is_IfcColourSpecification { get { return IsADBEntity("IfcColourSpecification"); } }
        public IfcColourSpecification IfcColourSpecification
            {
            get { return new IfcColourSpecification(getEntityInstance("IFCCOLOURSPECIFICATION")); }
            }
        public bool is_IfcPreDefinedColour { get { return IsADBEntity("IfcPreDefinedColour"); } }
        public IfcPreDefinedColour IfcPreDefinedColour
            {
            get { return new IfcPreDefinedColour(getEntityInstance("IFCPREDEFINEDCOLOUR")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcColourOrFactor : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcColourOrFactor(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcColourOrFactor(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcColourOrFactor() : base(null) { }

        public bool is_IfcColourRgb { get { return IsADBEntity("IfcColourRgb"); } }
        public IfcColourRgb IfcColourRgb
            {
            set { putEntityInstance("IFCCOLOURRGB", value); }
            get { return new IfcColourRgb(getEntityInstance("IFCCOLOURRGB")); } 
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            set { put_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcColourOrFactor_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcColourOrFactor_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcColourOrFactor_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcColourOrFactor_get() : base(null) { }

        public bool is_IfcColourRgb { get { return IsADBEntity("IfcColourRgb"); } }
        public IfcColourRgb IfcColourRgb
            {
            get { return new IfcColourRgb(getEntityInstance("IFCCOLOURRGB")); }
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcCoordinateReferenceSystemSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCoordinateReferenceSystemSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCoordinateReferenceSystemSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCoordinateReferenceSystemSelect() : base(null) { }

        public bool is_IfcCoordinateReferenceSystem { get { return IsADBEntity("IfcCoordinateReferenceSystem"); } }
        public IfcCoordinateReferenceSystem IfcCoordinateReferenceSystem
            {
            set { putEntityInstance("IFCCOORDINATEREFERENCESYSTEM", value); }
            get { return new IfcCoordinateReferenceSystem(getEntityInstance("IFCCOORDINATEREFERENCESYSTEM")); } 
            }
        public bool is_IfcGeometricRepresentationContext { get { return IsADBEntity("IfcGeometricRepresentationContext"); } }
        public IfcGeometricRepresentationContext IfcGeometricRepresentationContext
            {
            set { putEntityInstance("IFCGEOMETRICREPRESENTATIONCONTEXT", value); }
            get { return new IfcGeometricRepresentationContext(getEntityInstance("IFCGEOMETRICREPRESENTATIONCONTEXT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCoordinateReferenceSystemSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCoordinateReferenceSystemSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCoordinateReferenceSystemSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCoordinateReferenceSystemSelect_get() : base(null) { }

        public bool is_IfcCoordinateReferenceSystem { get { return IsADBEntity("IfcCoordinateReferenceSystem"); } }
        public IfcCoordinateReferenceSystem IfcCoordinateReferenceSystem
            {
            get { return new IfcCoordinateReferenceSystem(getEntityInstance("IFCCOORDINATEREFERENCESYSTEM")); }
            }
        public bool is_IfcGeometricRepresentationContext { get { return IsADBEntity("IfcGeometricRepresentationContext"); } }
        public IfcGeometricRepresentationContext IfcGeometricRepresentationContext
            {
            get { return new IfcGeometricRepresentationContext(getEntityInstance("IFCGEOMETRICREPRESENTATIONCONTEXT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCsgSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCsgSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCsgSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCsgSelect() : base(null) { }

        public bool is_IfcBooleanResult { get { return IsADBEntity("IfcBooleanResult"); } }
        public IfcBooleanResult IfcBooleanResult
            {
            set { putEntityInstance("IFCBOOLEANRESULT", value); }
            get { return new IfcBooleanResult(getEntityInstance("IFCBOOLEANRESULT")); } 
            }
        public bool is_IfcCsgPrimitive3D { get { return IsADBEntity("IfcCsgPrimitive3D"); } }
        public IfcCsgPrimitive3D IfcCsgPrimitive3D
            {
            set { putEntityInstance("IFCCSGPRIMITIVE3D", value); }
            get { return new IfcCsgPrimitive3D(getEntityInstance("IFCCSGPRIMITIVE3D")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCsgSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCsgSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCsgSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCsgSelect_get() : base(null) { }

        public bool is_IfcBooleanResult { get { return IsADBEntity("IfcBooleanResult"); } }
        public IfcBooleanResult IfcBooleanResult
            {
            get { return new IfcBooleanResult(getEntityInstance("IFCBOOLEANRESULT")); }
            }
        public bool is_IfcCsgPrimitive3D { get { return IsADBEntity("IfcCsgPrimitive3D"); } }
        public IfcCsgPrimitive3D IfcCsgPrimitive3D
            {
            get { return new IfcCsgPrimitive3D(getEntityInstance("IFCCSGPRIMITIVE3D")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveStyleFontSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveStyleFontSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveStyleFontSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveStyleFontSelect() : base(null) { }

        public bool is_IfcCurveStyleFont { get { return IsADBEntity("IfcCurveStyleFont"); } }
        public IfcCurveStyleFont IfcCurveStyleFont
            {
            set { putEntityInstance("IFCCURVESTYLEFONT", value); }
            get { return new IfcCurveStyleFont(getEntityInstance("IFCCURVESTYLEFONT")); } 
            }
        public bool is_IfcPreDefinedCurveFont { get { return IsADBEntity("IfcPreDefinedCurveFont"); } }
        public IfcPreDefinedCurveFont IfcPreDefinedCurveFont
            {
            set { putEntityInstance("IFCPREDEFINEDCURVEFONT", value); }
            get { return new IfcPreDefinedCurveFont(getEntityInstance("IFCPREDEFINEDCURVEFONT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveStyleFontSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveStyleFontSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveStyleFontSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveStyleFontSelect_get() : base(null) { }

        public bool is_IfcCurveStyleFont { get { return IsADBEntity("IfcCurveStyleFont"); } }
        public IfcCurveStyleFont IfcCurveStyleFont
            {
            get { return new IfcCurveStyleFont(getEntityInstance("IFCCURVESTYLEFONT")); }
            }
        public bool is_IfcPreDefinedCurveFont { get { return IsADBEntity("IfcPreDefinedCurveFont"); } }
        public IfcPreDefinedCurveFont IfcPreDefinedCurveFont
            {
            get { return new IfcPreDefinedCurveFont(getEntityInstance("IFCPREDEFINEDCURVEFONT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveFontOrScaledCurveFontSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveFontOrScaledCurveFontSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveFontOrScaledCurveFontSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveFontOrScaledCurveFontSelect() : base(null) { }

        public bool is_IfcCurveStyleFontAndScaling { get { return IsADBEntity("IfcCurveStyleFontAndScaling"); } }
        public IfcCurveStyleFontAndScaling IfcCurveStyleFontAndScaling
            {
            set { putEntityInstance("IFCCURVESTYLEFONTANDSCALING", value); }
            get { return new IfcCurveStyleFontAndScaling(getEntityInstance("IFCCURVESTYLEFONTANDSCALING")); } 
            }
        public IfcCurveStyleFontSelect IfcCurveStyleFontSelect { get { return new IfcCurveStyleFontSelect(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveFontOrScaledCurveFontSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveFontOrScaledCurveFontSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveFontOrScaledCurveFontSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveFontOrScaledCurveFontSelect_get() : base(null) { }

        public bool is_IfcCurveStyleFontAndScaling { get { return IsADBEntity("IfcCurveStyleFontAndScaling"); } }
        public IfcCurveStyleFontAndScaling IfcCurveStyleFontAndScaling
            {
            get { return new IfcCurveStyleFontAndScaling(getEntityInstance("IFCCURVESTYLEFONTANDSCALING")); }
            }
        public IfcCurveStyleFontSelect_get IfcCurveStyleFontSelect { get { return new IfcCurveStyleFontSelect_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveMeasureSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveMeasureSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveMeasureSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveMeasureSelect() : base(null) { }

        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            set { put_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcParameterValue { get { return IsADBType("IFCPARAMETERVALUE"); } }
        public double? IfcParameterValue
            {
            set { put_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcCurveMeasureSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveMeasureSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveMeasureSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveMeasureSelect_get() : base(null) { }

        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcParameterValue { get { return IsADBType("IFCPARAMETERVALUE"); } }
        public double? IfcParameterValue
            {
            get { return get_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcCurveOnSurface : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveOnSurface(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveOnSurface(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveOnSurface() : base(null) { }

        public bool is_IfcCompositeCurveOnSurface { get { return IsADBEntity("IfcCompositeCurveOnSurface"); } }
        public IfcCompositeCurveOnSurface IfcCompositeCurveOnSurface
            {
            set { putEntityInstance("IFCCOMPOSITECURVEONSURFACE", value); }
            get { return new IfcCompositeCurveOnSurface(getEntityInstance("IFCCOMPOSITECURVEONSURFACE")); } 
            }
        public bool is_IfcPcurve { get { return IsADBEntity("IfcPcurve"); } }
        public IfcPcurve IfcPcurve
            {
            set { putEntityInstance("IFCPCURVE", value); }
            get { return new IfcPcurve(getEntityInstance("IFCPCURVE")); } 
            }
        public bool is_IfcSurfaceCurve { get { return IsADBEntity("IfcSurfaceCurve"); } }
        public IfcSurfaceCurve IfcSurfaceCurve
            {
            set { putEntityInstance("IFCSURFACECURVE", value); }
            get { return new IfcSurfaceCurve(getEntityInstance("IFCSURFACECURVE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveOnSurface_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveOnSurface_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveOnSurface_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveOnSurface_get() : base(null) { }

        public bool is_IfcCompositeCurveOnSurface { get { return IsADBEntity("IfcCompositeCurveOnSurface"); } }
        public IfcCompositeCurveOnSurface IfcCompositeCurveOnSurface
            {
            get { return new IfcCompositeCurveOnSurface(getEntityInstance("IFCCOMPOSITECURVEONSURFACE")); }
            }
        public bool is_IfcPcurve { get { return IsADBEntity("IfcPcurve"); } }
        public IfcPcurve IfcPcurve
            {
            get { return new IfcPcurve(getEntityInstance("IFCPCURVE")); }
            }
        public bool is_IfcSurfaceCurve { get { return IsADBEntity("IfcSurfaceCurve"); } }
        public IfcSurfaceCurve IfcSurfaceCurve
            {
            get { return new IfcSurfaceCurve(getEntityInstance("IFCSURFACECURVE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveOrEdgeCurve : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveOrEdgeCurve(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveOrEdgeCurve(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveOrEdgeCurve() : base(null) { }

        public bool is_IfcBoundedCurve { get { return IsADBEntity("IfcBoundedCurve"); } }
        public IfcBoundedCurve IfcBoundedCurve
            {
            set { putEntityInstance("IFCBOUNDEDCURVE", value); }
            get { return new IfcBoundedCurve(getEntityInstance("IFCBOUNDEDCURVE")); } 
            }
        public bool is_IfcEdgeCurve { get { return IsADBEntity("IfcEdgeCurve"); } }
        public IfcEdgeCurve IfcEdgeCurve
            {
            set { putEntityInstance("IFCEDGECURVE", value); }
            get { return new IfcEdgeCurve(getEntityInstance("IFCEDGECURVE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcCurveOrEdgeCurve_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcCurveOrEdgeCurve_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcCurveOrEdgeCurve_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcCurveOrEdgeCurve_get() : base(null) { }

        public bool is_IfcBoundedCurve { get { return IsADBEntity("IfcBoundedCurve"); } }
        public IfcBoundedCurve IfcBoundedCurve
            {
            get { return new IfcBoundedCurve(getEntityInstance("IFCBOUNDEDCURVE")); }
            }
        public bool is_IfcEdgeCurve { get { return IsADBEntity("IfcEdgeCurve"); } }
        public IfcEdgeCurve IfcEdgeCurve
            {
            get { return new IfcEdgeCurve(getEntityInstance("IFCEDGECURVE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDefinitionSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDefinitionSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDefinitionSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDefinitionSelect() : base(null) { }

        public bool is_IfcObjectDefinition { get { return IsADBEntity("IfcObjectDefinition"); } }
        public IfcObjectDefinition IfcObjectDefinition
            {
            set { putEntityInstance("IFCOBJECTDEFINITION", value); }
            get { return new IfcObjectDefinition(getEntityInstance("IFCOBJECTDEFINITION")); } 
            }
        public bool is_IfcPropertyDefinition { get { return IsADBEntity("IfcPropertyDefinition"); } }
        public IfcPropertyDefinition IfcPropertyDefinition
            {
            set { putEntityInstance("IFCPROPERTYDEFINITION", value); }
            get { return new IfcPropertyDefinition(getEntityInstance("IFCPROPERTYDEFINITION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDefinitionSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDefinitionSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDefinitionSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDefinitionSelect_get() : base(null) { }

        public bool is_IfcObjectDefinition { get { return IsADBEntity("IfcObjectDefinition"); } }
        public IfcObjectDefinition IfcObjectDefinition
            {
            get { return new IfcObjectDefinition(getEntityInstance("IFCOBJECTDEFINITION")); }
            }
        public bool is_IfcPropertyDefinition { get { return IsADBEntity("IfcPropertyDefinition"); } }
        public IfcPropertyDefinition IfcPropertyDefinition
            {
            get { return new IfcPropertyDefinition(getEntityInstance("IFCPROPERTYDEFINITION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDocumentSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDocumentSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDocumentSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDocumentSelect() : base(null) { }

        public bool is_IfcDocumentInformation { get { return IsADBEntity("IfcDocumentInformation"); } }
        public IfcDocumentInformation IfcDocumentInformation
            {
            set { putEntityInstance("IFCDOCUMENTINFORMATION", value); }
            get { return new IfcDocumentInformation(getEntityInstance("IFCDOCUMENTINFORMATION")); } 
            }
        public bool is_IfcDocumentReference { get { return IsADBEntity("IfcDocumentReference"); } }
        public IfcDocumentReference IfcDocumentReference
            {
            set { putEntityInstance("IFCDOCUMENTREFERENCE", value); }
            get { return new IfcDocumentReference(getEntityInstance("IFCDOCUMENTREFERENCE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcDocumentSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcDocumentSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcDocumentSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcDocumentSelect_get() : base(null) { }

        public bool is_IfcDocumentInformation { get { return IsADBEntity("IfcDocumentInformation"); } }
        public IfcDocumentInformation IfcDocumentInformation
            {
            get { return new IfcDocumentInformation(getEntityInstance("IFCDOCUMENTINFORMATION")); }
            }
        public bool is_IfcDocumentReference { get { return IsADBEntity("IfcDocumentReference"); } }
        public IfcDocumentReference IfcDocumentReference
            {
            get { return new IfcDocumentReference(getEntityInstance("IFCDOCUMENTREFERENCE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcFillStyleSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcFillStyleSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcFillStyleSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcFillStyleSelect() : base(null) { }

        public IfcColour IfcColour { get { return new IfcColour(this); } }
        public bool is_IfcExternallyDefinedHatchStyle { get { return IsADBEntity("IfcExternallyDefinedHatchStyle"); } }
        public IfcExternallyDefinedHatchStyle IfcExternallyDefinedHatchStyle
            {
            set { putEntityInstance("IFCEXTERNALLYDEFINEDHATCHSTYLE", value); }
            get { return new IfcExternallyDefinedHatchStyle(getEntityInstance("IFCEXTERNALLYDEFINEDHATCHSTYLE")); } 
            }
        public bool is_IfcFillAreaStyleHatching { get { return IsADBEntity("IfcFillAreaStyleHatching"); } }
        public IfcFillAreaStyleHatching IfcFillAreaStyleHatching
            {
            set { putEntityInstance("IFCFILLAREASTYLEHATCHING", value); }
            get { return new IfcFillAreaStyleHatching(getEntityInstance("IFCFILLAREASTYLEHATCHING")); } 
            }
        public bool is_IfcFillAreaStyleTiles { get { return IsADBEntity("IfcFillAreaStyleTiles"); } }
        public IfcFillAreaStyleTiles IfcFillAreaStyleTiles
            {
            set { putEntityInstance("IFCFILLAREASTYLETILES", value); }
            get { return new IfcFillAreaStyleTiles(getEntityInstance("IFCFILLAREASTYLETILES")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcFillStyleSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcFillStyleSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcFillStyleSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcFillStyleSelect_get() : base(null) { }

        public IfcColour_get IfcColour { get { return new IfcColour_get(this); } }
        public bool is_IfcExternallyDefinedHatchStyle { get { return IsADBEntity("IfcExternallyDefinedHatchStyle"); } }
        public IfcExternallyDefinedHatchStyle IfcExternallyDefinedHatchStyle
            {
            get { return new IfcExternallyDefinedHatchStyle(getEntityInstance("IFCEXTERNALLYDEFINEDHATCHSTYLE")); }
            }
        public bool is_IfcFillAreaStyleHatching { get { return IsADBEntity("IfcFillAreaStyleHatching"); } }
        public IfcFillAreaStyleHatching IfcFillAreaStyleHatching
            {
            get { return new IfcFillAreaStyleHatching(getEntityInstance("IFCFILLAREASTYLEHATCHING")); }
            }
        public bool is_IfcFillAreaStyleTiles { get { return IsADBEntity("IfcFillAreaStyleTiles"); } }
        public IfcFillAreaStyleTiles IfcFillAreaStyleTiles
            {
            get { return new IfcFillAreaStyleTiles(getEntityInstance("IFCFILLAREASTYLETILES")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcGeometricSetSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcGeometricSetSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcGeometricSetSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcGeometricSetSelect() : base(null) { }

        public bool is_IfcCurve { get { return IsADBEntity("IfcCurve"); } }
        public IfcCurve IfcCurve
            {
            set { putEntityInstance("IFCCURVE", value); }
            get { return new IfcCurve(getEntityInstance("IFCCURVE")); } 
            }
        public bool is_IfcPoint { get { return IsADBEntity("IfcPoint"); } }
        public IfcPoint IfcPoint
            {
            set { putEntityInstance("IFCPOINT", value); }
            get { return new IfcPoint(getEntityInstance("IFCPOINT")); } 
            }
        public bool is_IfcSurface { get { return IsADBEntity("IfcSurface"); } }
        public IfcSurface IfcSurface
            {
            set { putEntityInstance("IFCSURFACE", value); }
            get { return new IfcSurface(getEntityInstance("IFCSURFACE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcGeometricSetSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcGeometricSetSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcGeometricSetSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcGeometricSetSelect_get() : base(null) { }

        public bool is_IfcCurve { get { return IsADBEntity("IfcCurve"); } }
        public IfcCurve IfcCurve
            {
            get { return new IfcCurve(getEntityInstance("IFCCURVE")); }
            }
        public bool is_IfcPoint { get { return IsADBEntity("IfcPoint"); } }
        public IfcPoint IfcPoint
            {
            get { return new IfcPoint(getEntityInstance("IFCPOINT")); }
            }
        public bool is_IfcSurface { get { return IsADBEntity("IfcSurface"); } }
        public IfcSurface IfcSurface
            {
            get { return new IfcSurface(getEntityInstance("IFCSURFACE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcGridPlacementDirectionSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcGridPlacementDirectionSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcGridPlacementDirectionSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcGridPlacementDirectionSelect() : base(null) { }

        public bool is_IfcDirection { get { return IsADBEntity("IfcDirection"); } }
        public IfcDirection IfcDirection
            {
            set { putEntityInstance("IFCDIRECTION", value); }
            get { return new IfcDirection(getEntityInstance("IFCDIRECTION")); } 
            }
        public bool is_IfcVirtualGridIntersection { get { return IsADBEntity("IfcVirtualGridIntersection"); } }
        public IfcVirtualGridIntersection IfcVirtualGridIntersection
            {
            set { putEntityInstance("IFCVIRTUALGRIDINTERSECTION", value); }
            get { return new IfcVirtualGridIntersection(getEntityInstance("IFCVIRTUALGRIDINTERSECTION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcGridPlacementDirectionSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcGridPlacementDirectionSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcGridPlacementDirectionSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcGridPlacementDirectionSelect_get() : base(null) { }

        public bool is_IfcDirection { get { return IsADBEntity("IfcDirection"); } }
        public IfcDirection IfcDirection
            {
            get { return new IfcDirection(getEntityInstance("IFCDIRECTION")); }
            }
        public bool is_IfcVirtualGridIntersection { get { return IsADBEntity("IfcVirtualGridIntersection"); } }
        public IfcVirtualGridIntersection IfcVirtualGridIntersection
            {
            get { return new IfcVirtualGridIntersection(getEntityInstance("IFCVIRTUALGRIDINTERSECTION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcHatchLineDistanceSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcHatchLineDistanceSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcHatchLineDistanceSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcHatchLineDistanceSelect() : base(null) { }

        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            set { put_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcVector { get { return IsADBEntity("IfcVector"); } }
        public IfcVector IfcVector
            {
            set { putEntityInstance("IFCVECTOR", value); }
            get { return new IfcVector(getEntityInstance("IFCVECTOR")); } 
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcHatchLineDistanceSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcHatchLineDistanceSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcHatchLineDistanceSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcHatchLineDistanceSelect_get() : base(null) { }

        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcVector { get { return IsADBEntity("IfcVector"); } }
        public IfcVector IfcVector
            {
            get { return new IfcVector(getEntityInstance("IFCVECTOR")); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcInterferenceSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcInterferenceSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcInterferenceSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcInterferenceSelect() : base(null) { }

        public bool is_IfcElement { get { return IsADBEntity("IfcElement"); } }
        public IfcElement IfcElement
            {
            set { putEntityInstance("IFCELEMENT", value); }
            get { return new IfcElement(getEntityInstance("IFCELEMENT")); } 
            }
        public bool is_IfcSpatialElement { get { return IsADBEntity("IfcSpatialElement"); } }
        public IfcSpatialElement IfcSpatialElement
            {
            set { putEntityInstance("IFCSPATIALELEMENT", value); }
            get { return new IfcSpatialElement(getEntityInstance("IFCSPATIALELEMENT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcInterferenceSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcInterferenceSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcInterferenceSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcInterferenceSelect_get() : base(null) { }

        public bool is_IfcElement { get { return IsADBEntity("IfcElement"); } }
        public IfcElement IfcElement
            {
            get { return new IfcElement(getEntityInstance("IFCELEMENT")); }
            }
        public bool is_IfcSpatialElement { get { return IsADBEntity("IfcSpatialElement"); } }
        public IfcSpatialElement IfcSpatialElement
            {
            get { return new IfcSpatialElement(getEntityInstance("IFCSPATIALELEMENT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcLayeredItem : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLayeredItem(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLayeredItem(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLayeredItem() : base(null) { }

        public bool is_IfcRepresentation { get { return IsADBEntity("IfcRepresentation"); } }
        public IfcRepresentation IfcRepresentation
            {
            set { putEntityInstance("IFCREPRESENTATION", value); }
            get { return new IfcRepresentation(getEntityInstance("IFCREPRESENTATION")); } 
            }
        public bool is_IfcRepresentationItem { get { return IsADBEntity("IfcRepresentationItem"); } }
        public IfcRepresentationItem IfcRepresentationItem
            {
            set { putEntityInstance("IFCREPRESENTATIONITEM", value); }
            get { return new IfcRepresentationItem(getEntityInstance("IFCREPRESENTATIONITEM")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcLayeredItem_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLayeredItem_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLayeredItem_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLayeredItem_get() : base(null) { }

        public bool is_IfcRepresentation { get { return IsADBEntity("IfcRepresentation"); } }
        public IfcRepresentation IfcRepresentation
            {
            get { return new IfcRepresentation(getEntityInstance("IFCREPRESENTATION")); }
            }
        public bool is_IfcRepresentationItem { get { return IsADBEntity("IfcRepresentationItem"); } }
        public IfcRepresentationItem IfcRepresentationItem
            {
            get { return new IfcRepresentationItem(getEntityInstance("IFCREPRESENTATIONITEM")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcLibrarySelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLibrarySelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLibrarySelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLibrarySelect() : base(null) { }

        public bool is_IfcLibraryInformation { get { return IsADBEntity("IfcLibraryInformation"); } }
        public IfcLibraryInformation IfcLibraryInformation
            {
            set { putEntityInstance("IFCLIBRARYINFORMATION", value); }
            get { return new IfcLibraryInformation(getEntityInstance("IFCLIBRARYINFORMATION")); } 
            }
        public bool is_IfcLibraryReference { get { return IsADBEntity("IfcLibraryReference"); } }
        public IfcLibraryReference IfcLibraryReference
            {
            set { putEntityInstance("IFCLIBRARYREFERENCE", value); }
            get { return new IfcLibraryReference(getEntityInstance("IFCLIBRARYREFERENCE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcLibrarySelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLibrarySelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLibrarySelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLibrarySelect_get() : base(null) { }

        public bool is_IfcLibraryInformation { get { return IsADBEntity("IfcLibraryInformation"); } }
        public IfcLibraryInformation IfcLibraryInformation
            {
            get { return new IfcLibraryInformation(getEntityInstance("IFCLIBRARYINFORMATION")); }
            }
        public bool is_IfcLibraryReference { get { return IsADBEntity("IfcLibraryReference"); } }
        public IfcLibraryReference IfcLibraryReference
            {
            get { return new IfcLibraryReference(getEntityInstance("IFCLIBRARYREFERENCE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcLightDistributionDataSourceSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLightDistributionDataSourceSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLightDistributionDataSourceSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLightDistributionDataSourceSelect() : base(null) { }

        public bool is_IfcExternalReference { get { return IsADBEntity("IfcExternalReference"); } }
        public IfcExternalReference IfcExternalReference
            {
            set { putEntityInstance("IFCEXTERNALREFERENCE", value); }
            get { return new IfcExternalReference(getEntityInstance("IFCEXTERNALREFERENCE")); } 
            }
        public bool is_IfcLightIntensityDistribution { get { return IsADBEntity("IfcLightIntensityDistribution"); } }
        public IfcLightIntensityDistribution IfcLightIntensityDistribution
            {
            set { putEntityInstance("IFCLIGHTINTENSITYDISTRIBUTION", value); }
            get { return new IfcLightIntensityDistribution(getEntityInstance("IFCLIGHTINTENSITYDISTRIBUTION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcLightDistributionDataSourceSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcLightDistributionDataSourceSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcLightDistributionDataSourceSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcLightDistributionDataSourceSelect_get() : base(null) { }

        public bool is_IfcExternalReference { get { return IsADBEntity("IfcExternalReference"); } }
        public IfcExternalReference IfcExternalReference
            {
            get { return new IfcExternalReference(getEntityInstance("IFCEXTERNALREFERENCE")); }
            }
        public bool is_IfcLightIntensityDistribution { get { return IsADBEntity("IfcLightIntensityDistribution"); } }
        public IfcLightIntensityDistribution IfcLightIntensityDistribution
            {
            get { return new IfcLightIntensityDistribution(getEntityInstance("IFCLIGHTINTENSITYDISTRIBUTION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcMaterialSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMaterialSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMaterialSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMaterialSelect() : base(null) { }

        public bool is_IfcMaterialDefinition { get { return IsADBEntity("IfcMaterialDefinition"); } }
        public IfcMaterialDefinition IfcMaterialDefinition
            {
            set { putEntityInstance("IFCMATERIALDEFINITION", value); }
            get { return new IfcMaterialDefinition(getEntityInstance("IFCMATERIALDEFINITION")); } 
            }
        public bool is_IfcMaterialList { get { return IsADBEntity("IfcMaterialList"); } }
        public IfcMaterialList IfcMaterialList
            {
            set { putEntityInstance("IFCMATERIALLIST", value); }
            get { return new IfcMaterialList(getEntityInstance("IFCMATERIALLIST")); } 
            }
        public bool is_IfcMaterialUsageDefinition { get { return IsADBEntity("IfcMaterialUsageDefinition"); } }
        public IfcMaterialUsageDefinition IfcMaterialUsageDefinition
            {
            set { putEntityInstance("IFCMATERIALUSAGEDEFINITION", value); }
            get { return new IfcMaterialUsageDefinition(getEntityInstance("IFCMATERIALUSAGEDEFINITION")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcMaterialSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMaterialSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMaterialSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMaterialSelect_get() : base(null) { }

        public bool is_IfcMaterialDefinition { get { return IsADBEntity("IfcMaterialDefinition"); } }
        public IfcMaterialDefinition IfcMaterialDefinition
            {
            get { return new IfcMaterialDefinition(getEntityInstance("IFCMATERIALDEFINITION")); }
            }
        public bool is_IfcMaterialList { get { return IsADBEntity("IfcMaterialList"); } }
        public IfcMaterialList IfcMaterialList
            {
            get { return new IfcMaterialList(getEntityInstance("IFCMATERIALLIST")); }
            }
        public bool is_IfcMaterialUsageDefinition { get { return IsADBEntity("IfcMaterialUsageDefinition"); } }
        public IfcMaterialUsageDefinition IfcMaterialUsageDefinition
            {
            get { return new IfcMaterialUsageDefinition(getEntityInstance("IFCMATERIALUSAGEDEFINITION")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcMetricValueSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMetricValueSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMetricValueSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMetricValueSelect() : base(null) { }

        public bool is_IfcAppliedValue { get { return IsADBEntity("IfcAppliedValue"); } }
        public IfcAppliedValue IfcAppliedValue
            {
            set { putEntityInstance("IFCAPPLIEDVALUE", value); }
            get { return new IfcAppliedValue(getEntityInstance("IFCAPPLIEDVALUE")); } 
            }
        public bool is_IfcMeasureWithUnit { get { return IsADBEntity("IfcMeasureWithUnit"); } }
        public IfcMeasureWithUnit IfcMeasureWithUnit
            {
            set { putEntityInstance("IFCMEASUREWITHUNIT", value); }
            get { return new IfcMeasureWithUnit(getEntityInstance("IFCMEASUREWITHUNIT")); } 
            }
        public bool is_IfcReference { get { return IsADBEntity("IfcReference"); } }
        public IfcReference IfcReference
            {
            set { putEntityInstance("IFCREFERENCE", value); }
            get { return new IfcReference(getEntityInstance("IFCREFERENCE")); } 
            }
        public bool is_IfcTable { get { return IsADBEntity("IfcTable"); } }
        public IfcTable IfcTable
            {
            set { putEntityInstance("IFCTABLE", value); }
            get { return new IfcTable(getEntityInstance("IFCTABLE")); } 
            }
        public bool is_IfcTimeSeries { get { return IsADBEntity("IfcTimeSeries"); } }
        public IfcTimeSeries IfcTimeSeries
            {
            set { putEntityInstance("IFCTIMESERIES", value); }
            get { return new IfcTimeSeries(getEntityInstance("IFCTIMESERIES")); } 
            }
        public IfcValue IfcValue { get { return new IfcValue(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        };


    public class IfcMetricValueSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcMetricValueSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcMetricValueSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcMetricValueSelect_get() : base(null) { }

        public bool is_IfcAppliedValue { get { return IsADBEntity("IfcAppliedValue"); } }
        public IfcAppliedValue IfcAppliedValue
            {
            get { return new IfcAppliedValue(getEntityInstance("IFCAPPLIEDVALUE")); }
            }
        public bool is_IfcMeasureWithUnit { get { return IsADBEntity("IfcMeasureWithUnit"); } }
        public IfcMeasureWithUnit IfcMeasureWithUnit
            {
            get { return new IfcMeasureWithUnit(getEntityInstance("IFCMEASUREWITHUNIT")); }
            }
        public bool is_IfcReference { get { return IsADBEntity("IfcReference"); } }
        public IfcReference IfcReference
            {
            get { return new IfcReference(getEntityInstance("IFCREFERENCE")); }
            }
        public bool is_IfcTable { get { return IsADBEntity("IfcTable"); } }
        public IfcTable IfcTable
            {
            get { return new IfcTable(getEntityInstance("IFCTABLE")); }
            }
        public bool is_IfcTimeSeries { get { return IsADBEntity("IfcTimeSeries"); } }
        public IfcTimeSeries IfcTimeSeries
            {
            get { return new IfcTimeSeries(getEntityInstance("IFCTIMESERIES")); }
            }
        public IfcValue_get IfcValue { get { return new IfcValue_get(this); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        public IntValue? as_int { get { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; } }
        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        };


    public class IfcModulusOfRotationalSubgradeReactionSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcModulusOfRotationalSubgradeReactionSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcModulusOfRotationalSubgradeReactionSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcModulusOfRotationalSubgradeReactionSelect() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            set { put_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN, value); }
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcModulusOfRotationalSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfRotationalSubgradeReactionMeasure
            {
            set { put_double("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcModulusOfRotationalSubgradeReactionSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcModulusOfRotationalSubgradeReactionSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcModulusOfRotationalSubgradeReactionSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcModulusOfRotationalSubgradeReactionSelect_get() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcModulusOfRotationalSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfRotationalSubgradeReactionMeasure
            {
            get { return get_double("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcModulusOfSubgradeReactionSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcModulusOfSubgradeReactionSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcModulusOfSubgradeReactionSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcModulusOfSubgradeReactionSelect() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            set { put_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN, value); }
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcModulusOfSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfSubgradeReactionMeasure
            {
            set { put_double("IFCMODULUSOFSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMODULUSOFSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcModulusOfSubgradeReactionSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcModulusOfSubgradeReactionSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcModulusOfSubgradeReactionSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcModulusOfSubgradeReactionSelect_get() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcModulusOfSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfSubgradeReactionMeasure
            {
            get { return get_double("IFCMODULUSOFSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcModulusOfTranslationalSubgradeReactionSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcModulusOfTranslationalSubgradeReactionSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcModulusOfTranslationalSubgradeReactionSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcModulusOfTranslationalSubgradeReactionSelect() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            set { put_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN, value); }
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcModulusOfLinearSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfLinearSubgradeReactionMeasure
            {
            set { put_double("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcModulusOfTranslationalSubgradeReactionSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcModulusOfTranslationalSubgradeReactionSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcModulusOfTranslationalSubgradeReactionSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcModulusOfTranslationalSubgradeReactionSelect_get() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcModulusOfLinearSubgradeReactionMeasure { get { return IsADBType("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE"); } }
        public double? IfcModulusOfLinearSubgradeReactionMeasure
            {
            get { return get_double("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcObjectReferenceSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcObjectReferenceSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcObjectReferenceSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcObjectReferenceSelect() : base(null) { }

        public bool is_IfcAddress { get { return IsADBEntity("IfcAddress"); } }
        public IfcAddress IfcAddress
            {
            set { putEntityInstance("IFCADDRESS", value); }
            get { return new IfcAddress(getEntityInstance("IFCADDRESS")); } 
            }
        public bool is_IfcAppliedValue { get { return IsADBEntity("IfcAppliedValue"); } }
        public IfcAppliedValue IfcAppliedValue
            {
            set { putEntityInstance("IFCAPPLIEDVALUE", value); }
            get { return new IfcAppliedValue(getEntityInstance("IFCAPPLIEDVALUE")); } 
            }
        public bool is_IfcExternalReference { get { return IsADBEntity("IfcExternalReference"); } }
        public IfcExternalReference IfcExternalReference
            {
            set { putEntityInstance("IFCEXTERNALREFERENCE", value); }
            get { return new IfcExternalReference(getEntityInstance("IFCEXTERNALREFERENCE")); } 
            }
        public bool is_IfcMaterialDefinition { get { return IsADBEntity("IfcMaterialDefinition"); } }
        public IfcMaterialDefinition IfcMaterialDefinition
            {
            set { putEntityInstance("IFCMATERIALDEFINITION", value); }
            get { return new IfcMaterialDefinition(getEntityInstance("IFCMATERIALDEFINITION")); } 
            }
        public bool is_IfcOrganization { get { return IsADBEntity("IfcOrganization"); } }
        public IfcOrganization IfcOrganization
            {
            set { putEntityInstance("IFCORGANIZATION", value); }
            get { return new IfcOrganization(getEntityInstance("IFCORGANIZATION")); } 
            }
        public bool is_IfcPerson { get { return IsADBEntity("IfcPerson"); } }
        public IfcPerson IfcPerson
            {
            set { putEntityInstance("IFCPERSON", value); }
            get { return new IfcPerson(getEntityInstance("IFCPERSON")); } 
            }
        public bool is_IfcPersonAndOrganization { get { return IsADBEntity("IfcPersonAndOrganization"); } }
        public IfcPersonAndOrganization IfcPersonAndOrganization
            {
            set { putEntityInstance("IFCPERSONANDORGANIZATION", value); }
            get { return new IfcPersonAndOrganization(getEntityInstance("IFCPERSONANDORGANIZATION")); } 
            }
        public bool is_IfcTable { get { return IsADBEntity("IfcTable"); } }
        public IfcTable IfcTable
            {
            set { putEntityInstance("IFCTABLE", value); }
            get { return new IfcTable(getEntityInstance("IFCTABLE")); } 
            }
        public bool is_IfcTimeSeries { get { return IsADBEntity("IfcTimeSeries"); } }
        public IfcTimeSeries IfcTimeSeries
            {
            set { putEntityInstance("IFCTIMESERIES", value); }
            get { return new IfcTimeSeries(getEntityInstance("IFCTIMESERIES")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcObjectReferenceSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcObjectReferenceSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcObjectReferenceSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcObjectReferenceSelect_get() : base(null) { }

        public bool is_IfcAddress { get { return IsADBEntity("IfcAddress"); } }
        public IfcAddress IfcAddress
            {
            get { return new IfcAddress(getEntityInstance("IFCADDRESS")); }
            }
        public bool is_IfcAppliedValue { get { return IsADBEntity("IfcAppliedValue"); } }
        public IfcAppliedValue IfcAppliedValue
            {
            get { return new IfcAppliedValue(getEntityInstance("IFCAPPLIEDVALUE")); }
            }
        public bool is_IfcExternalReference { get { return IsADBEntity("IfcExternalReference"); } }
        public IfcExternalReference IfcExternalReference
            {
            get { return new IfcExternalReference(getEntityInstance("IFCEXTERNALREFERENCE")); }
            }
        public bool is_IfcMaterialDefinition { get { return IsADBEntity("IfcMaterialDefinition"); } }
        public IfcMaterialDefinition IfcMaterialDefinition
            {
            get { return new IfcMaterialDefinition(getEntityInstance("IFCMATERIALDEFINITION")); }
            }
        public bool is_IfcOrganization { get { return IsADBEntity("IfcOrganization"); } }
        public IfcOrganization IfcOrganization
            {
            get { return new IfcOrganization(getEntityInstance("IFCORGANIZATION")); }
            }
        public bool is_IfcPerson { get { return IsADBEntity("IfcPerson"); } }
        public IfcPerson IfcPerson
            {
            get { return new IfcPerson(getEntityInstance("IFCPERSON")); }
            }
        public bool is_IfcPersonAndOrganization { get { return IsADBEntity("IfcPersonAndOrganization"); } }
        public IfcPersonAndOrganization IfcPersonAndOrganization
            {
            get { return new IfcPersonAndOrganization(getEntityInstance("IFCPERSONANDORGANIZATION")); }
            }
        public bool is_IfcTable { get { return IsADBEntity("IfcTable"); } }
        public IfcTable IfcTable
            {
            get { return new IfcTable(getEntityInstance("IFCTABLE")); }
            }
        public bool is_IfcTimeSeries { get { return IsADBEntity("IfcTimeSeries"); } }
        public IfcTimeSeries IfcTimeSeries
            {
            get { return new IfcTimeSeries(getEntityInstance("IFCTIMESERIES")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcPointOrVertexPoint : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcPointOrVertexPoint(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcPointOrVertexPoint(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcPointOrVertexPoint() : base(null) { }

        public bool is_IfcPoint { get { return IsADBEntity("IfcPoint"); } }
        public IfcPoint IfcPoint
            {
            set { putEntityInstance("IFCPOINT", value); }
            get { return new IfcPoint(getEntityInstance("IFCPOINT")); } 
            }
        public bool is_IfcVertexPoint { get { return IsADBEntity("IfcVertexPoint"); } }
        public IfcVertexPoint IfcVertexPoint
            {
            set { putEntityInstance("IFCVERTEXPOINT", value); }
            get { return new IfcVertexPoint(getEntityInstance("IFCVERTEXPOINT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcPointOrVertexPoint_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcPointOrVertexPoint_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcPointOrVertexPoint_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcPointOrVertexPoint_get() : base(null) { }

        public bool is_IfcPoint { get { return IsADBEntity("IfcPoint"); } }
        public IfcPoint IfcPoint
            {
            get { return new IfcPoint(getEntityInstance("IFCPOINT")); }
            }
        public bool is_IfcVertexPoint { get { return IsADBEntity("IfcVertexPoint"); } }
        public IfcVertexPoint IfcVertexPoint
            {
            get { return new IfcVertexPoint(getEntityInstance("IFCVERTEXPOINT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcProcessSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcProcessSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcProcessSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcProcessSelect() : base(null) { }

        public bool is_IfcProcess { get { return IsADBEntity("IfcProcess"); } }
        public IfcProcess IfcProcess
            {
            set { putEntityInstance("IFCPROCESS", value); }
            get { return new IfcProcess(getEntityInstance("IFCPROCESS")); } 
            }
        public bool is_IfcTypeProcess { get { return IsADBEntity("IfcTypeProcess"); } }
        public IfcTypeProcess IfcTypeProcess
            {
            set { putEntityInstance("IFCTYPEPROCESS", value); }
            get { return new IfcTypeProcess(getEntityInstance("IFCTYPEPROCESS")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcProcessSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcProcessSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcProcessSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcProcessSelect_get() : base(null) { }

        public bool is_IfcProcess { get { return IsADBEntity("IfcProcess"); } }
        public IfcProcess IfcProcess
            {
            get { return new IfcProcess(getEntityInstance("IFCPROCESS")); }
            }
        public bool is_IfcTypeProcess { get { return IsADBEntity("IfcTypeProcess"); } }
        public IfcTypeProcess IfcTypeProcess
            {
            get { return new IfcTypeProcess(getEntityInstance("IFCTYPEPROCESS")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcProductRepresentationSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcProductRepresentationSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcProductRepresentationSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcProductRepresentationSelect() : base(null) { }

        public bool is_IfcProductDefinitionShape { get { return IsADBEntity("IfcProductDefinitionShape"); } }
        public IfcProductDefinitionShape IfcProductDefinitionShape
            {
            set { putEntityInstance("IFCPRODUCTDEFINITIONSHAPE", value); }
            get { return new IfcProductDefinitionShape(getEntityInstance("IFCPRODUCTDEFINITIONSHAPE")); } 
            }
        public bool is_IfcRepresentationMap { get { return IsADBEntity("IfcRepresentationMap"); } }
        public IfcRepresentationMap IfcRepresentationMap
            {
            set { putEntityInstance("IFCREPRESENTATIONMAP", value); }
            get { return new IfcRepresentationMap(getEntityInstance("IFCREPRESENTATIONMAP")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcProductRepresentationSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcProductRepresentationSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcProductRepresentationSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcProductRepresentationSelect_get() : base(null) { }

        public bool is_IfcProductDefinitionShape { get { return IsADBEntity("IfcProductDefinitionShape"); } }
        public IfcProductDefinitionShape IfcProductDefinitionShape
            {
            get { return new IfcProductDefinitionShape(getEntityInstance("IFCPRODUCTDEFINITIONSHAPE")); }
            }
        public bool is_IfcRepresentationMap { get { return IsADBEntity("IfcRepresentationMap"); } }
        public IfcRepresentationMap IfcRepresentationMap
            {
            get { return new IfcRepresentationMap(getEntityInstance("IFCREPRESENTATIONMAP")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcProductSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcProductSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcProductSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcProductSelect() : base(null) { }

        public bool is_IfcProduct { get { return IsADBEntity("IfcProduct"); } }
        public IfcProduct IfcProduct
            {
            set { putEntityInstance("IFCPRODUCT", value); }
            get { return new IfcProduct(getEntityInstance("IFCPRODUCT")); } 
            }
        public bool is_IfcTypeProduct { get { return IsADBEntity("IfcTypeProduct"); } }
        public IfcTypeProduct IfcTypeProduct
            {
            set { putEntityInstance("IFCTYPEPRODUCT", value); }
            get { return new IfcTypeProduct(getEntityInstance("IFCTYPEPRODUCT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcProductSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcProductSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcProductSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcProductSelect_get() : base(null) { }

        public bool is_IfcProduct { get { return IsADBEntity("IfcProduct"); } }
        public IfcProduct IfcProduct
            {
            get { return new IfcProduct(getEntityInstance("IFCPRODUCT")); }
            }
        public bool is_IfcTypeProduct { get { return IsADBEntity("IfcTypeProduct"); } }
        public IfcTypeProduct IfcTypeProduct
            {
            get { return new IfcTypeProduct(getEntityInstance("IFCTYPEPRODUCT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcPropertySetDefinitionSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcPropertySetDefinitionSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcPropertySetDefinitionSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcPropertySetDefinitionSelect() : base(null) { }

        public bool is_IfcPropertySetDefinition { get { return IsADBEntity("IfcPropertySetDefinition"); } }
        public IfcPropertySetDefinition IfcPropertySetDefinition
            {
            set { putEntityInstance("IFCPROPERTYSETDEFINITION", value); }
            get { return new IfcPropertySetDefinition(getEntityInstance("IFCPROPERTYSETDEFINITION")); } 
            }
        public bool is_IfcPropertySetDefinitionSet { get { return IsADBType("IFCPROPERTYSETDEFINITIONSET"); } }
        public IfcPropertySetDefinitionSet IfcPropertySetDefinitionSet { get { SdaiAggr aggr = getAggrValue("IFCPROPERTYSETDEFINITIONSET"); return (new IfcPropertySetDefinitionSetSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_IfcPropertySetDefinitionSet(IEnumerable<IfcPropertySetDefinition> lst) { SdaiAggr aggr = (new IfcPropertySetDefinitionSetSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCPROPERTYSETDEFINITIONSET", aggr); }
        public void put_IfcPropertySetDefinitionSet(IEnumerable lst) { SdaiAggr aggr = (new IfcPropertySetDefinitionSetSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCPROPERTYSETDEFINITIONSET", aggr); }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcPropertySetDefinitionSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcPropertySetDefinitionSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcPropertySetDefinitionSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcPropertySetDefinitionSelect_get() : base(null) { }

        public bool is_IfcPropertySetDefinition { get { return IsADBEntity("IfcPropertySetDefinition"); } }
        public IfcPropertySetDefinition IfcPropertySetDefinition
            {
            get { return new IfcPropertySetDefinition(getEntityInstance("IFCPROPERTYSETDEFINITION")); }
            }
        public bool is_IfcPropertySetDefinitionSet { get { return IsADBType("IFCPROPERTYSETDEFINITIONSET"); } }
        public IfcPropertySetDefinitionSet IfcPropertySetDefinitionSet { get { SdaiAggr aggr = getAggrValue("IFCPROPERTYSETDEFINITIONSET"); return (new IfcPropertySetDefinitionSetSerializer()).FromSdaiAggr(m_instance, aggr); } }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcResourceObjectSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcResourceObjectSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcResourceObjectSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcResourceObjectSelect() : base(null) { }

        public bool is_IfcActorRole { get { return IsADBEntity("IfcActorRole"); } }
        public IfcActorRole IfcActorRole
            {
            set { putEntityInstance("IFCACTORROLE", value); }
            get { return new IfcActorRole(getEntityInstance("IFCACTORROLE")); } 
            }
        public bool is_IfcAppliedValue { get { return IsADBEntity("IfcAppliedValue"); } }
        public IfcAppliedValue IfcAppliedValue
            {
            set { putEntityInstance("IFCAPPLIEDVALUE", value); }
            get { return new IfcAppliedValue(getEntityInstance("IFCAPPLIEDVALUE")); } 
            }
        public bool is_IfcApproval { get { return IsADBEntity("IfcApproval"); } }
        public IfcApproval IfcApproval
            {
            set { putEntityInstance("IFCAPPROVAL", value); }
            get { return new IfcApproval(getEntityInstance("IFCAPPROVAL")); } 
            }
        public bool is_IfcConstraint { get { return IsADBEntity("IfcConstraint"); } }
        public IfcConstraint IfcConstraint
            {
            set { putEntityInstance("IFCCONSTRAINT", value); }
            get { return new IfcConstraint(getEntityInstance("IFCCONSTRAINT")); } 
            }
        public bool is_IfcContextDependentUnit { get { return IsADBEntity("IfcContextDependentUnit"); } }
        public IfcContextDependentUnit IfcContextDependentUnit
            {
            set { putEntityInstance("IFCCONTEXTDEPENDENTUNIT", value); }
            get { return new IfcContextDependentUnit(getEntityInstance("IFCCONTEXTDEPENDENTUNIT")); } 
            }
        public bool is_IfcConversionBasedUnit { get { return IsADBEntity("IfcConversionBasedUnit"); } }
        public IfcConversionBasedUnit IfcConversionBasedUnit
            {
            set { putEntityInstance("IFCCONVERSIONBASEDUNIT", value); }
            get { return new IfcConversionBasedUnit(getEntityInstance("IFCCONVERSIONBASEDUNIT")); } 
            }
        public bool is_IfcExternalInformation { get { return IsADBEntity("IfcExternalInformation"); } }
        public IfcExternalInformation IfcExternalInformation
            {
            set { putEntityInstance("IFCEXTERNALINFORMATION", value); }
            get { return new IfcExternalInformation(getEntityInstance("IFCEXTERNALINFORMATION")); } 
            }
        public bool is_IfcExternalReference { get { return IsADBEntity("IfcExternalReference"); } }
        public IfcExternalReference IfcExternalReference
            {
            set { putEntityInstance("IFCEXTERNALREFERENCE", value); }
            get { return new IfcExternalReference(getEntityInstance("IFCEXTERNALREFERENCE")); } 
            }
        public bool is_IfcMaterialDefinition { get { return IsADBEntity("IfcMaterialDefinition"); } }
        public IfcMaterialDefinition IfcMaterialDefinition
            {
            set { putEntityInstance("IFCMATERIALDEFINITION", value); }
            get { return new IfcMaterialDefinition(getEntityInstance("IFCMATERIALDEFINITION")); } 
            }
        public bool is_IfcOrganization { get { return IsADBEntity("IfcOrganization"); } }
        public IfcOrganization IfcOrganization
            {
            set { putEntityInstance("IFCORGANIZATION", value); }
            get { return new IfcOrganization(getEntityInstance("IFCORGANIZATION")); } 
            }
        public bool is_IfcPerson { get { return IsADBEntity("IfcPerson"); } }
        public IfcPerson IfcPerson
            {
            set { putEntityInstance("IFCPERSON", value); }
            get { return new IfcPerson(getEntityInstance("IFCPERSON")); } 
            }
        public bool is_IfcPersonAndOrganization { get { return IsADBEntity("IfcPersonAndOrganization"); } }
        public IfcPersonAndOrganization IfcPersonAndOrganization
            {
            set { putEntityInstance("IFCPERSONANDORGANIZATION", value); }
            get { return new IfcPersonAndOrganization(getEntityInstance("IFCPERSONANDORGANIZATION")); } 
            }
        public bool is_IfcPhysicalQuantity { get { return IsADBEntity("IfcPhysicalQuantity"); } }
        public IfcPhysicalQuantity IfcPhysicalQuantity
            {
            set { putEntityInstance("IFCPHYSICALQUANTITY", value); }
            get { return new IfcPhysicalQuantity(getEntityInstance("IFCPHYSICALQUANTITY")); } 
            }
        public bool is_IfcProfileDef { get { return IsADBEntity("IfcProfileDef"); } }
        public IfcProfileDef IfcProfileDef
            {
            set { putEntityInstance("IFCPROFILEDEF", value); }
            get { return new IfcProfileDef(getEntityInstance("IFCPROFILEDEF")); } 
            }
        public bool is_IfcPropertyAbstraction { get { return IsADBEntity("IfcPropertyAbstraction"); } }
        public IfcPropertyAbstraction IfcPropertyAbstraction
            {
            set { putEntityInstance("IFCPROPERTYABSTRACTION", value); }
            get { return new IfcPropertyAbstraction(getEntityInstance("IFCPROPERTYABSTRACTION")); } 
            }
        public bool is_IfcShapeAspect { get { return IsADBEntity("IfcShapeAspect"); } }
        public IfcShapeAspect IfcShapeAspect
            {
            set { putEntityInstance("IFCSHAPEASPECT", value); }
            get { return new IfcShapeAspect(getEntityInstance("IFCSHAPEASPECT")); } 
            }
        public bool is_IfcTimeSeries { get { return IsADBEntity("IfcTimeSeries"); } }
        public IfcTimeSeries IfcTimeSeries
            {
            set { putEntityInstance("IFCTIMESERIES", value); }
            get { return new IfcTimeSeries(getEntityInstance("IFCTIMESERIES")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcResourceObjectSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcResourceObjectSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcResourceObjectSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcResourceObjectSelect_get() : base(null) { }

        public bool is_IfcActorRole { get { return IsADBEntity("IfcActorRole"); } }
        public IfcActorRole IfcActorRole
            {
            get { return new IfcActorRole(getEntityInstance("IFCACTORROLE")); }
            }
        public bool is_IfcAppliedValue { get { return IsADBEntity("IfcAppliedValue"); } }
        public IfcAppliedValue IfcAppliedValue
            {
            get { return new IfcAppliedValue(getEntityInstance("IFCAPPLIEDVALUE")); }
            }
        public bool is_IfcApproval { get { return IsADBEntity("IfcApproval"); } }
        public IfcApproval IfcApproval
            {
            get { return new IfcApproval(getEntityInstance("IFCAPPROVAL")); }
            }
        public bool is_IfcConstraint { get { return IsADBEntity("IfcConstraint"); } }
        public IfcConstraint IfcConstraint
            {
            get { return new IfcConstraint(getEntityInstance("IFCCONSTRAINT")); }
            }
        public bool is_IfcContextDependentUnit { get { return IsADBEntity("IfcContextDependentUnit"); } }
        public IfcContextDependentUnit IfcContextDependentUnit
            {
            get { return new IfcContextDependentUnit(getEntityInstance("IFCCONTEXTDEPENDENTUNIT")); }
            }
        public bool is_IfcConversionBasedUnit { get { return IsADBEntity("IfcConversionBasedUnit"); } }
        public IfcConversionBasedUnit IfcConversionBasedUnit
            {
            get { return new IfcConversionBasedUnit(getEntityInstance("IFCCONVERSIONBASEDUNIT")); }
            }
        public bool is_IfcExternalInformation { get { return IsADBEntity("IfcExternalInformation"); } }
        public IfcExternalInformation IfcExternalInformation
            {
            get { return new IfcExternalInformation(getEntityInstance("IFCEXTERNALINFORMATION")); }
            }
        public bool is_IfcExternalReference { get { return IsADBEntity("IfcExternalReference"); } }
        public IfcExternalReference IfcExternalReference
            {
            get { return new IfcExternalReference(getEntityInstance("IFCEXTERNALREFERENCE")); }
            }
        public bool is_IfcMaterialDefinition { get { return IsADBEntity("IfcMaterialDefinition"); } }
        public IfcMaterialDefinition IfcMaterialDefinition
            {
            get { return new IfcMaterialDefinition(getEntityInstance("IFCMATERIALDEFINITION")); }
            }
        public bool is_IfcOrganization { get { return IsADBEntity("IfcOrganization"); } }
        public IfcOrganization IfcOrganization
            {
            get { return new IfcOrganization(getEntityInstance("IFCORGANIZATION")); }
            }
        public bool is_IfcPerson { get { return IsADBEntity("IfcPerson"); } }
        public IfcPerson IfcPerson
            {
            get { return new IfcPerson(getEntityInstance("IFCPERSON")); }
            }
        public bool is_IfcPersonAndOrganization { get { return IsADBEntity("IfcPersonAndOrganization"); } }
        public IfcPersonAndOrganization IfcPersonAndOrganization
            {
            get { return new IfcPersonAndOrganization(getEntityInstance("IFCPERSONANDORGANIZATION")); }
            }
        public bool is_IfcPhysicalQuantity { get { return IsADBEntity("IfcPhysicalQuantity"); } }
        public IfcPhysicalQuantity IfcPhysicalQuantity
            {
            get { return new IfcPhysicalQuantity(getEntityInstance("IFCPHYSICALQUANTITY")); }
            }
        public bool is_IfcProfileDef { get { return IsADBEntity("IfcProfileDef"); } }
        public IfcProfileDef IfcProfileDef
            {
            get { return new IfcProfileDef(getEntityInstance("IFCPROFILEDEF")); }
            }
        public bool is_IfcPropertyAbstraction { get { return IsADBEntity("IfcPropertyAbstraction"); } }
        public IfcPropertyAbstraction IfcPropertyAbstraction
            {
            get { return new IfcPropertyAbstraction(getEntityInstance("IFCPROPERTYABSTRACTION")); }
            }
        public bool is_IfcShapeAspect { get { return IsADBEntity("IfcShapeAspect"); } }
        public IfcShapeAspect IfcShapeAspect
            {
            get { return new IfcShapeAspect(getEntityInstance("IFCSHAPEASPECT")); }
            }
        public bool is_IfcTimeSeries { get { return IsADBEntity("IfcTimeSeries"); } }
        public IfcTimeSeries IfcTimeSeries
            {
            get { return new IfcTimeSeries(getEntityInstance("IFCTIMESERIES")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcResourceSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcResourceSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcResourceSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcResourceSelect() : base(null) { }

        public bool is_IfcResource { get { return IsADBEntity("IfcResource"); } }
        public IfcResource IfcResource
            {
            set { putEntityInstance("IFCRESOURCE", value); }
            get { return new IfcResource(getEntityInstance("IFCRESOURCE")); } 
            }
        public bool is_IfcTypeResource { get { return IsADBEntity("IfcTypeResource"); } }
        public IfcTypeResource IfcTypeResource
            {
            set { putEntityInstance("IFCTYPERESOURCE", value); }
            get { return new IfcTypeResource(getEntityInstance("IFCTYPERESOURCE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcResourceSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcResourceSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcResourceSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcResourceSelect_get() : base(null) { }

        public bool is_IfcResource { get { return IsADBEntity("IfcResource"); } }
        public IfcResource IfcResource
            {
            get { return new IfcResource(getEntityInstance("IFCRESOURCE")); }
            }
        public bool is_IfcTypeResource { get { return IsADBEntity("IfcTypeResource"); } }
        public IfcTypeResource IfcTypeResource
            {
            get { return new IfcTypeResource(getEntityInstance("IFCTYPERESOURCE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcRotationalStiffnessSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcRotationalStiffnessSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcRotationalStiffnessSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcRotationalStiffnessSelect() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            set { put_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN, value); }
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcRotationalStiffnessMeasure { get { return IsADBType("IFCROTATIONALSTIFFNESSMEASURE"); } }
        public double? IfcRotationalStiffnessMeasure
            {
            set { put_double("IFCROTATIONALSTIFFNESSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCROTATIONALSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcRotationalStiffnessSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcRotationalStiffnessSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcRotationalStiffnessSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcRotationalStiffnessSelect_get() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcRotationalStiffnessMeasure { get { return IsADBType("IFCROTATIONALSTIFFNESSMEASURE"); } }
        public double? IfcRotationalStiffnessMeasure
            {
            get { return get_double("IFCROTATIONALSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcSegmentIndexSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSegmentIndexSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSegmentIndexSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSegmentIndexSelect() : base(null) { }

        public bool is_IfcArcIndex { get { return IsADBType("IFCARCINDEX"); } }
        public IfcArcIndex IfcArcIndex { get { SdaiAggr aggr = getAggrValue("IFCARCINDEX"); return (new IfcArcIndexSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_IfcArcIndex(IEnumerable<IntValue> lst) { SdaiAggr aggr = (new IfcArcIndexSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCARCINDEX", aggr); }
        public void put_IfcArcIndex(IEnumerable lst) { SdaiAggr aggr = (new IfcArcIndexSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCARCINDEX", aggr); }
        public bool is_IfcLineIndex { get { return IsADBType("IFCLINEINDEX"); } }
        public IfcLineIndex IfcLineIndex { get { SdaiAggr aggr = getAggrValue("IFCLINEINDEX"); return (new IfcLineIndexSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public void put_IfcLineIndex(IEnumerable<IntValue> lst) { SdaiAggr aggr = (new IfcLineIndexSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCLINEINDEX", aggr); }
        public void put_IfcLineIndex(IEnumerable lst) { SdaiAggr aggr = (new IfcLineIndexSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("IFCLINEINDEX", aggr); }
        };


    public class IfcSegmentIndexSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSegmentIndexSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSegmentIndexSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSegmentIndexSelect_get() : base(null) { }

        public bool is_IfcArcIndex { get { return IsADBType("IFCARCINDEX"); } }
        public IfcArcIndex IfcArcIndex { get { SdaiAggr aggr = getAggrValue("IFCARCINDEX"); return (new IfcArcIndexSerializer()).FromSdaiAggr(m_instance, aggr); } }
        public bool is_IfcLineIndex { get { return IsADBType("IFCLINEINDEX"); } }
        public IfcLineIndex IfcLineIndex { get { SdaiAggr aggr = getAggrValue("IFCLINEINDEX"); return (new IfcLineIndexSerializer()).FromSdaiAggr(m_instance, aggr); } }
        };


    public class IfcShell : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcShell(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcShell(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcShell() : base(null) { }

        public bool is_IfcClosedShell { get { return IsADBEntity("IfcClosedShell"); } }
        public IfcClosedShell IfcClosedShell
            {
            set { putEntityInstance("IFCCLOSEDSHELL", value); }
            get { return new IfcClosedShell(getEntityInstance("IFCCLOSEDSHELL")); } 
            }
        public bool is_IfcOpenShell { get { return IsADBEntity("IfcOpenShell"); } }
        public IfcOpenShell IfcOpenShell
            {
            set { putEntityInstance("IFCOPENSHELL", value); }
            get { return new IfcOpenShell(getEntityInstance("IFCOPENSHELL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcShell_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcShell_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcShell_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcShell_get() : base(null) { }

        public bool is_IfcClosedShell { get { return IsADBEntity("IfcClosedShell"); } }
        public IfcClosedShell IfcClosedShell
            {
            get { return new IfcClosedShell(getEntityInstance("IFCCLOSEDSHELL")); }
            }
        public bool is_IfcOpenShell { get { return IsADBEntity("IfcOpenShell"); } }
        public IfcOpenShell IfcOpenShell
            {
            get { return new IfcOpenShell(getEntityInstance("IFCOPENSHELL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSizeSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSizeSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSizeSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSizeSelect() : base(null) { }

        public bool is_IfcDescriptiveMeasure { get { return IsADBType("IFCDESCRIPTIVEMEASURE"); } }
        public TextValue IfcDescriptiveMeasure { 
            set { putTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            set { put_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            set { put_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            set { put_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveRatioMeasure { get { return IsADBType("IFCPOSITIVERATIOMEASURE"); } }
        public double? IfcPositiveRatioMeasure
            {
            set { put_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            set { put_double("IFCRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcSizeSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSizeSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSizeSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSizeSelect_get() : base(null) { }

        public bool is_IfcDescriptiveMeasure { get { return IsADBType("IFCDESCRIPTIVEMEASURE"); } }
        public TextValue IfcDescriptiveMeasure
            {
            get { return getTextValue("IFCDESCRIPTIVEMEASURE", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcLengthMeasure { get { return IsADBType("IFCLENGTHMEASURE"); } }
        public double? IfcLengthMeasure
            {
            get { return get_double("IFCLENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcNormalisedRatioMeasure { get { return IsADBType("IFCNORMALISEDRATIOMEASURE"); } }
        public double? IfcNormalisedRatioMeasure
            {
            get { return get_double("IFCNORMALISEDRATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveLengthMeasure { get { return IsADBType("IFCPOSITIVELENGTHMEASURE"); } }
        public double? IfcPositiveLengthMeasure
            {
            get { return get_double("IFCPOSITIVELENGTHMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcPositiveRatioMeasure { get { return IsADBType("IFCPOSITIVERATIOMEASURE"); } }
        public double? IfcPositiveRatioMeasure
            {
            get { return get_double("IFCPOSITIVERATIOMEASURE", ifcengine.sdaiREAL); }
            }
        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcSolidOrShell : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSolidOrShell(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSolidOrShell(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSolidOrShell() : base(null) { }

        public bool is_IfcClosedShell { get { return IsADBEntity("IfcClosedShell"); } }
        public IfcClosedShell IfcClosedShell
            {
            set { putEntityInstance("IFCCLOSEDSHELL", value); }
            get { return new IfcClosedShell(getEntityInstance("IFCCLOSEDSHELL")); } 
            }
        public bool is_IfcSolidModel { get { return IsADBEntity("IfcSolidModel"); } }
        public IfcSolidModel IfcSolidModel
            {
            set { putEntityInstance("IFCSOLIDMODEL", value); }
            get { return new IfcSolidModel(getEntityInstance("IFCSOLIDMODEL")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSolidOrShell_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSolidOrShell_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSolidOrShell_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSolidOrShell_get() : base(null) { }

        public bool is_IfcClosedShell { get { return IsADBEntity("IfcClosedShell"); } }
        public IfcClosedShell IfcClosedShell
            {
            get { return new IfcClosedShell(getEntityInstance("IFCCLOSEDSHELL")); }
            }
        public bool is_IfcSolidModel { get { return IsADBEntity("IfcSolidModel"); } }
        public IfcSolidModel IfcSolidModel
            {
            get { return new IfcSolidModel(getEntityInstance("IFCSOLIDMODEL")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSpaceBoundarySelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSpaceBoundarySelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSpaceBoundarySelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSpaceBoundarySelect() : base(null) { }

        public bool is_IfcExternalSpatialElement { get { return IsADBEntity("IfcExternalSpatialElement"); } }
        public IfcExternalSpatialElement IfcExternalSpatialElement
            {
            set { putEntityInstance("IFCEXTERNALSPATIALELEMENT", value); }
            get { return new IfcExternalSpatialElement(getEntityInstance("IFCEXTERNALSPATIALELEMENT")); } 
            }
        public bool is_IfcSpace { get { return IsADBEntity("IfcSpace"); } }
        public IfcSpace IfcSpace
            {
            set { putEntityInstance("IFCSPACE", value); }
            get { return new IfcSpace(getEntityInstance("IFCSPACE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSpaceBoundarySelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSpaceBoundarySelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSpaceBoundarySelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSpaceBoundarySelect_get() : base(null) { }

        public bool is_IfcExternalSpatialElement { get { return IsADBEntity("IfcExternalSpatialElement"); } }
        public IfcExternalSpatialElement IfcExternalSpatialElement
            {
            get { return new IfcExternalSpatialElement(getEntityInstance("IFCEXTERNALSPATIALELEMENT")); }
            }
        public bool is_IfcSpace { get { return IsADBEntity("IfcSpace"); } }
        public IfcSpace IfcSpace
            {
            get { return new IfcSpace(getEntityInstance("IFCSPACE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSpatialReferenceSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSpatialReferenceSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSpatialReferenceSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSpatialReferenceSelect() : base(null) { }

        public bool is_IfcGroup { get { return IsADBEntity("IfcGroup"); } }
        public IfcGroup IfcGroup
            {
            set { putEntityInstance("IFCGROUP", value); }
            get { return new IfcGroup(getEntityInstance("IFCGROUP")); } 
            }
        public bool is_IfcProduct { get { return IsADBEntity("IfcProduct"); } }
        public IfcProduct IfcProduct
            {
            set { putEntityInstance("IFCPRODUCT", value); }
            get { return new IfcProduct(getEntityInstance("IFCPRODUCT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSpatialReferenceSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSpatialReferenceSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSpatialReferenceSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSpatialReferenceSelect_get() : base(null) { }

        public bool is_IfcGroup { get { return IsADBEntity("IfcGroup"); } }
        public IfcGroup IfcGroup
            {
            get { return new IfcGroup(getEntityInstance("IFCGROUP")); }
            }
        public bool is_IfcProduct { get { return IsADBEntity("IfcProduct"); } }
        public IfcProduct IfcProduct
            {
            get { return new IfcProduct(getEntityInstance("IFCPRODUCT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSpecularHighlightSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSpecularHighlightSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSpecularHighlightSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSpecularHighlightSelect() : base(null) { }

        public bool is_IfcSpecularExponent { get { return IsADBType("IFCSPECULAREXPONENT"); } }
        public double? IfcSpecularExponent
            {
            set { put_double("IFCSPECULAREXPONENT", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSPECULAREXPONENT", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSpecularRoughness { get { return IsADBType("IFCSPECULARROUGHNESS"); } }
        public double? IfcSpecularRoughness
            {
            set { put_double("IFCSPECULARROUGHNESS", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCSPECULARROUGHNESS", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcSpecularHighlightSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSpecularHighlightSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSpecularHighlightSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSpecularHighlightSelect_get() : base(null) { }

        public bool is_IfcSpecularExponent { get { return IsADBType("IFCSPECULAREXPONENT"); } }
        public double? IfcSpecularExponent
            {
            get { return get_double("IFCSPECULAREXPONENT", ifcengine.sdaiREAL); }
            }
        public bool is_IfcSpecularRoughness { get { return IsADBType("IFCSPECULARROUGHNESS"); } }
        public double? IfcSpecularRoughness
            {
            get { return get_double("IFCSPECULARROUGHNESS", ifcengine.sdaiREAL); }
            }

        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcStructuralActivityAssignmentSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcStructuralActivityAssignmentSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcStructuralActivityAssignmentSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcStructuralActivityAssignmentSelect() : base(null) { }

        public bool is_IfcElement { get { return IsADBEntity("IfcElement"); } }
        public IfcElement IfcElement
            {
            set { putEntityInstance("IFCELEMENT", value); }
            get { return new IfcElement(getEntityInstance("IFCELEMENT")); } 
            }
        public bool is_IfcStructuralItem { get { return IsADBEntity("IfcStructuralItem"); } }
        public IfcStructuralItem IfcStructuralItem
            {
            set { putEntityInstance("IFCSTRUCTURALITEM", value); }
            get { return new IfcStructuralItem(getEntityInstance("IFCSTRUCTURALITEM")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcStructuralActivityAssignmentSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcStructuralActivityAssignmentSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcStructuralActivityAssignmentSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcStructuralActivityAssignmentSelect_get() : base(null) { }

        public bool is_IfcElement { get { return IsADBEntity("IfcElement"); } }
        public IfcElement IfcElement
            {
            get { return new IfcElement(getEntityInstance("IFCELEMENT")); }
            }
        public bool is_IfcStructuralItem { get { return IsADBEntity("IfcStructuralItem"); } }
        public IfcStructuralItem IfcStructuralItem
            {
            get { return new IfcStructuralItem(getEntityInstance("IFCSTRUCTURALITEM")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSurfaceOrFaceSurface : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSurfaceOrFaceSurface(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSurfaceOrFaceSurface(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSurfaceOrFaceSurface() : base(null) { }

        public bool is_IfcFaceBasedSurfaceModel { get { return IsADBEntity("IfcFaceBasedSurfaceModel"); } }
        public IfcFaceBasedSurfaceModel IfcFaceBasedSurfaceModel
            {
            set { putEntityInstance("IFCFACEBASEDSURFACEMODEL", value); }
            get { return new IfcFaceBasedSurfaceModel(getEntityInstance("IFCFACEBASEDSURFACEMODEL")); } 
            }
        public bool is_IfcFaceSurface { get { return IsADBEntity("IfcFaceSurface"); } }
        public IfcFaceSurface IfcFaceSurface
            {
            set { putEntityInstance("IFCFACESURFACE", value); }
            get { return new IfcFaceSurface(getEntityInstance("IFCFACESURFACE")); } 
            }
        public bool is_IfcSurface { get { return IsADBEntity("IfcSurface"); } }
        public IfcSurface IfcSurface
            {
            set { putEntityInstance("IFCSURFACE", value); }
            get { return new IfcSurface(getEntityInstance("IFCSURFACE")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSurfaceOrFaceSurface_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSurfaceOrFaceSurface_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSurfaceOrFaceSurface_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSurfaceOrFaceSurface_get() : base(null) { }

        public bool is_IfcFaceBasedSurfaceModel { get { return IsADBEntity("IfcFaceBasedSurfaceModel"); } }
        public IfcFaceBasedSurfaceModel IfcFaceBasedSurfaceModel
            {
            get { return new IfcFaceBasedSurfaceModel(getEntityInstance("IFCFACEBASEDSURFACEMODEL")); }
            }
        public bool is_IfcFaceSurface { get { return IsADBEntity("IfcFaceSurface"); } }
        public IfcFaceSurface IfcFaceSurface
            {
            get { return new IfcFaceSurface(getEntityInstance("IFCFACESURFACE")); }
            }
        public bool is_IfcSurface { get { return IsADBEntity("IfcSurface"); } }
        public IfcSurface IfcSurface
            {
            get { return new IfcSurface(getEntityInstance("IFCSURFACE")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSurfaceStyleElementSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSurfaceStyleElementSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSurfaceStyleElementSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSurfaceStyleElementSelect() : base(null) { }

        public bool is_IfcExternallyDefinedSurfaceStyle { get { return IsADBEntity("IfcExternallyDefinedSurfaceStyle"); } }
        public IfcExternallyDefinedSurfaceStyle IfcExternallyDefinedSurfaceStyle
            {
            set { putEntityInstance("IFCEXTERNALLYDEFINEDSURFACESTYLE", value); }
            get { return new IfcExternallyDefinedSurfaceStyle(getEntityInstance("IFCEXTERNALLYDEFINEDSURFACESTYLE")); } 
            }
        public bool is_IfcSurfaceStyleLighting { get { return IsADBEntity("IfcSurfaceStyleLighting"); } }
        public IfcSurfaceStyleLighting IfcSurfaceStyleLighting
            {
            set { putEntityInstance("IFCSURFACESTYLELIGHTING", value); }
            get { return new IfcSurfaceStyleLighting(getEntityInstance("IFCSURFACESTYLELIGHTING")); } 
            }
        public bool is_IfcSurfaceStyleRefraction { get { return IsADBEntity("IfcSurfaceStyleRefraction"); } }
        public IfcSurfaceStyleRefraction IfcSurfaceStyleRefraction
            {
            set { putEntityInstance("IFCSURFACESTYLEREFRACTION", value); }
            get { return new IfcSurfaceStyleRefraction(getEntityInstance("IFCSURFACESTYLEREFRACTION")); } 
            }
        public bool is_IfcSurfaceStyleShading { get { return IsADBEntity("IfcSurfaceStyleShading"); } }
        public IfcSurfaceStyleShading IfcSurfaceStyleShading
            {
            set { putEntityInstance("IFCSURFACESTYLESHADING", value); }
            get { return new IfcSurfaceStyleShading(getEntityInstance("IFCSURFACESTYLESHADING")); } 
            }
        public bool is_IfcSurfaceStyleWithTextures { get { return IsADBEntity("IfcSurfaceStyleWithTextures"); } }
        public IfcSurfaceStyleWithTextures IfcSurfaceStyleWithTextures
            {
            set { putEntityInstance("IFCSURFACESTYLEWITHTEXTURES", value); }
            get { return new IfcSurfaceStyleWithTextures(getEntityInstance("IFCSURFACESTYLEWITHTEXTURES")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcSurfaceStyleElementSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcSurfaceStyleElementSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcSurfaceStyleElementSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcSurfaceStyleElementSelect_get() : base(null) { }

        public bool is_IfcExternallyDefinedSurfaceStyle { get { return IsADBEntity("IfcExternallyDefinedSurfaceStyle"); } }
        public IfcExternallyDefinedSurfaceStyle IfcExternallyDefinedSurfaceStyle
            {
            get { return new IfcExternallyDefinedSurfaceStyle(getEntityInstance("IFCEXTERNALLYDEFINEDSURFACESTYLE")); }
            }
        public bool is_IfcSurfaceStyleLighting { get { return IsADBEntity("IfcSurfaceStyleLighting"); } }
        public IfcSurfaceStyleLighting IfcSurfaceStyleLighting
            {
            get { return new IfcSurfaceStyleLighting(getEntityInstance("IFCSURFACESTYLELIGHTING")); }
            }
        public bool is_IfcSurfaceStyleRefraction { get { return IsADBEntity("IfcSurfaceStyleRefraction"); } }
        public IfcSurfaceStyleRefraction IfcSurfaceStyleRefraction
            {
            get { return new IfcSurfaceStyleRefraction(getEntityInstance("IFCSURFACESTYLEREFRACTION")); }
            }
        public bool is_IfcSurfaceStyleShading { get { return IsADBEntity("IfcSurfaceStyleShading"); } }
        public IfcSurfaceStyleShading IfcSurfaceStyleShading
            {
            get { return new IfcSurfaceStyleShading(getEntityInstance("IFCSURFACESTYLESHADING")); }
            }
        public bool is_IfcSurfaceStyleWithTextures { get { return IsADBEntity("IfcSurfaceStyleWithTextures"); } }
        public IfcSurfaceStyleWithTextures IfcSurfaceStyleWithTextures
            {
            get { return new IfcSurfaceStyleWithTextures(getEntityInstance("IFCSURFACESTYLEWITHTEXTURES")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcTextFontSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTextFontSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTextFontSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTextFontSelect() : base(null) { }

        public bool is_IfcExternallyDefinedTextFont { get { return IsADBEntity("IfcExternallyDefinedTextFont"); } }
        public IfcExternallyDefinedTextFont IfcExternallyDefinedTextFont
            {
            set { putEntityInstance("IFCEXTERNALLYDEFINEDTEXTFONT", value); }
            get { return new IfcExternallyDefinedTextFont(getEntityInstance("IFCEXTERNALLYDEFINEDTEXTFONT")); } 
            }
        public bool is_IfcPreDefinedTextFont { get { return IsADBEntity("IfcPreDefinedTextFont"); } }
        public IfcPreDefinedTextFont IfcPreDefinedTextFont
            {
            set { putEntityInstance("IFCPREDEFINEDTEXTFONT", value); }
            get { return new IfcPreDefinedTextFont(getEntityInstance("IFCPREDEFINEDTEXTFONT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcTextFontSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTextFontSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTextFontSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTextFontSelect_get() : base(null) { }

        public bool is_IfcExternallyDefinedTextFont { get { return IsADBEntity("IfcExternallyDefinedTextFont"); } }
        public IfcExternallyDefinedTextFont IfcExternallyDefinedTextFont
            {
            get { return new IfcExternallyDefinedTextFont(getEntityInstance("IFCEXTERNALLYDEFINEDTEXTFONT")); }
            }
        public bool is_IfcPreDefinedTextFont { get { return IsADBEntity("IfcPreDefinedTextFont"); } }
        public IfcPreDefinedTextFont IfcPreDefinedTextFont
            {
            get { return new IfcPreDefinedTextFont(getEntityInstance("IFCPREDEFINEDTEXTFONT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcTimeOrRatioSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTimeOrRatioSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTimeOrRatioSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTimeOrRatioSelect() : base(null) { }

        public bool is_IfcDuration { get { return IsADBType("IFCDURATION"); } }
        public TextValue IfcDuration { 
            set { putTextValue("IFCDURATION", ifcengine.sdaiSTRING, value); }
            get { return getTextValue("IFCDURATION", ifcengine.sdaiSTRING); } 
            }
        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            set { put_double("IFCRATIOMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcTimeOrRatioSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTimeOrRatioSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTimeOrRatioSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTimeOrRatioSelect_get() : base(null) { }

        public bool is_IfcDuration { get { return IsADBType("IFCDURATION"); } }
        public TextValue IfcDuration
            {
            get { return getTextValue("IFCDURATION", ifcengine.sdaiSTRING); }
            }
        public bool is_IfcRatioMeasure { get { return IsADBType("IFCRATIOMEASURE"); } }
        public double? IfcRatioMeasure
            {
            get { return get_double("IFCRATIOMEASURE", ifcengine.sdaiREAL); }
            }

        public TextValue as_text { get { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcTranslationalStiffnessSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTranslationalStiffnessSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTranslationalStiffnessSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTranslationalStiffnessSelect() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            set { put_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN, value); }
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcLinearStiffnessMeasure { get { return IsADBType("IFCLINEARSTIFFNESSMEASURE"); } }
        public double? IfcLinearStiffnessMeasure
            {
            set { put_double("IFCLINEARSTIFFNESSMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCLINEARSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcTranslationalStiffnessSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTranslationalStiffnessSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTranslationalStiffnessSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTranslationalStiffnessSelect_get() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcLinearStiffnessMeasure { get { return IsADBType("IFCLINEARSTIFFNESSMEASURE"); } }
        public double? IfcLinearStiffnessMeasure
            {
            get { return get_double("IFCLINEARSTIFFNESSMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcTrimmingSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTrimmingSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTrimmingSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTrimmingSelect() : base(null) { }

        public bool is_IfcCartesianPoint { get { return IsADBEntity("IfcCartesianPoint"); } }
        public IfcCartesianPoint IfcCartesianPoint
            {
            set { putEntityInstance("IFCCARTESIANPOINT", value); }
            get { return new IfcCartesianPoint(getEntityInstance("IFCCARTESIANPOINT")); } 
            }
        public bool is_IfcParameterValue { get { return IsADBType("IFCPARAMETERVALUE"); } }
        public double? IfcParameterValue
            {
            set { put_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcTrimmingSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcTrimmingSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcTrimmingSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcTrimmingSelect_get() : base(null) { }

        public bool is_IfcCartesianPoint { get { return IsADBEntity("IfcCartesianPoint"); } }
        public IfcCartesianPoint IfcCartesianPoint
            {
            get { return new IfcCartesianPoint(getEntityInstance("IFCCARTESIANPOINT")); }
            }
        public bool is_IfcParameterValue { get { return IsADBType("IFCPARAMETERVALUE"); } }
        public double? IfcParameterValue
            {
            get { return get_double("IFCPARAMETERVALUE", ifcengine.sdaiREAL); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcUnit : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcUnit(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcUnit(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcUnit() : base(null) { }

        public bool is_IfcDerivedUnit { get { return IsADBEntity("IfcDerivedUnit"); } }
        public IfcDerivedUnit IfcDerivedUnit
            {
            set { putEntityInstance("IFCDERIVEDUNIT", value); }
            get { return new IfcDerivedUnit(getEntityInstance("IFCDERIVEDUNIT")); } 
            }
        public bool is_IfcMonetaryUnit { get { return IsADBEntity("IfcMonetaryUnit"); } }
        public IfcMonetaryUnit IfcMonetaryUnit
            {
            set { putEntityInstance("IFCMONETARYUNIT", value); }
            get { return new IfcMonetaryUnit(getEntityInstance("IFCMONETARYUNIT")); } 
            }
        public bool is_IfcNamedUnit { get { return IsADBEntity("IfcNamedUnit"); } }
        public IfcNamedUnit IfcNamedUnit
            {
            set { putEntityInstance("IFCNAMEDUNIT", value); }
            get { return new IfcNamedUnit(getEntityInstance("IFCNAMEDUNIT")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcUnit_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcUnit_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcUnit_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcUnit_get() : base(null) { }

        public bool is_IfcDerivedUnit { get { return IsADBEntity("IfcDerivedUnit"); } }
        public IfcDerivedUnit IfcDerivedUnit
            {
            get { return new IfcDerivedUnit(getEntityInstance("IFCDERIVEDUNIT")); }
            }
        public bool is_IfcMonetaryUnit { get { return IsADBEntity("IfcMonetaryUnit"); } }
        public IfcMonetaryUnit IfcMonetaryUnit
            {
            get { return new IfcMonetaryUnit(getEntityInstance("IFCMONETARYUNIT")); }
            }
        public bool is_IfcNamedUnit { get { return IsADBEntity("IfcNamedUnit"); } }
        public IfcNamedUnit IfcNamedUnit
            {
            get { return new IfcNamedUnit(getEntityInstance("IFCNAMEDUNIT")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcVectorOrDirection : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcVectorOrDirection(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcVectorOrDirection(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcVectorOrDirection() : base(null) { }

        public bool is_IfcDirection { get { return IsADBEntity("IfcDirection"); } }
        public IfcDirection IfcDirection
            {
            set { putEntityInstance("IFCDIRECTION", value); }
            get { return new IfcDirection(getEntityInstance("IFCDIRECTION")); } 
            }
        public bool is_IfcVector { get { return IsADBEntity("IfcVector"); } }
        public IfcVector IfcVector
            {
            set { putEntityInstance("IFCVECTOR", value); }
            get { return new IfcVector(getEntityInstance("IFCVECTOR")); } 
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcVectorOrDirection_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcVectorOrDirection_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcVectorOrDirection_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcVectorOrDirection_get() : base(null) { }

        public bool is_IfcDirection { get { return IsADBEntity("IfcDirection"); } }
        public IfcDirection IfcDirection
            {
            get { return new IfcDirection(getEntityInstance("IFCDIRECTION")); }
            }
        public bool is_IfcVector { get { return IsADBEntity("IfcVector"); } }
        public IfcVector IfcVector
            {
            get { return new IfcVector(getEntityInstance("IFCVECTOR")); }
            }

        public SdaiInstance as_instance { get { return getEntityInstance(null); } }
        };


    public class IfcWarpingStiffnessSelect : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcWarpingStiffnessSelect(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcWarpingStiffnessSelect(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcWarpingStiffnessSelect() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            set { put_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN, value); }
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcWarpingMomentMeasure { get { return IsADBType("IFCWARPINGMOMENTMEASURE"); } }
        public double? IfcWarpingMomentMeasure
            {
            set { put_double("IFCWARPINGMOMENTMEASURE", ifcengine.sdaiREAL, value); }
            get { return get_double("IFCWARPINGMOMENTMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };


    public class IfcWarpingStiffnessSelect_get : Select
        {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public IfcWarpingStiffnessSelect_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public IfcWarpingStiffnessSelect_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public IfcWarpingStiffnessSelect_get() : base(null) { }

        public bool is_IfcBoolean { get { return IsADBType("IFCBOOLEAN"); } }
        public bool? IfcBoolean
            {
            get { return get_bool("IFCBOOLEAN", ifcengine.sdaiBOOLEAN); }
            }
        public bool is_IfcWarpingMomentMeasure { get { return IsADBType("IFCWARPINGMOMENTMEASURE"); } }
        public double? IfcWarpingMomentMeasure
            {
            get { return get_double("IFCWARPINGMOMENTMEASURE", ifcengine.sdaiREAL); }
            }

        public bool? as_bool { get { bool val = false; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiBOOLEAN, out val) != 0) return val; else return null; } }
        public double? as_double { get { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; } }
        };

    //
    // Unnamed aggregations
    //
    public class SetOfIfcRelAssigns : List<IfcRelAssigns> { }
    class SetOfIfcRelAssignsSerializer : AggrSerializerInstance<IfcRelAssigns, SetOfIfcRelAssigns> { }
    public class SetOfIfcRelNests : List<IfcRelNests> { }
    class SetOfIfcRelNestsSerializer : AggrSerializerInstance<IfcRelNests, SetOfIfcRelNests> { }
    public class SetOfIfcRelDeclares : List<IfcRelDeclares> { }
    class SetOfIfcRelDeclaresSerializer : AggrSerializerInstance<IfcRelDeclares, SetOfIfcRelDeclares> { }
    public class SetOfIfcRelAggregates : List<IfcRelAggregates> { }
    class SetOfIfcRelAggregatesSerializer : AggrSerializerInstance<IfcRelAggregates, SetOfIfcRelAggregates> { }
    public class SetOfIfcRelAssociates : List<IfcRelAssociates> { }
    class SetOfIfcRelAssociatesSerializer : AggrSerializerInstance<IfcRelAssociates, SetOfIfcRelAssociates> { }
    public class SetOfIfcRelDefinesByObject : List<IfcRelDefinesByObject> { }
    class SetOfIfcRelDefinesByObjectSerializer : AggrSerializerInstance<IfcRelDefinesByObject, SetOfIfcRelDefinesByObject> { }
    public class SetOfIfcRelDefinesByType : List<IfcRelDefinesByType> { }
    class SetOfIfcRelDefinesByTypeSerializer : AggrSerializerInstance<IfcRelDefinesByType, SetOfIfcRelDefinesByType> { }
    public class SetOfIfcRelDefinesByProperties : List<IfcRelDefinesByProperties> { }
    class SetOfIfcRelDefinesByPropertiesSerializer : AggrSerializerInstance<IfcRelDefinesByProperties, SetOfIfcRelDefinesByProperties> { }
    public class SetOfIfcRelAssignsToControl : List<IfcRelAssignsToControl> { }
    class SetOfIfcRelAssignsToControlSerializer : AggrSerializerInstance<IfcRelAssignsToControl, SetOfIfcRelAssignsToControl> { }
    public class SetOfIfcRelAssignsToActor : List<IfcRelAssignsToActor> { }
    class SetOfIfcRelAssignsToActorSerializer : AggrSerializerInstance<IfcRelAssignsToActor, SetOfIfcRelAssignsToActor> { }
    public class SetOfIfcExternalReferenceRelationship : List<IfcExternalReferenceRelationship> { }
    class SetOfIfcExternalReferenceRelationshipSerializer : AggrSerializerInstance<IfcExternalReferenceRelationship, SetOfIfcExternalReferenceRelationship> { }
    public class SetOfIfcRelAssignsToProduct : List<IfcRelAssignsToProduct> { }
    class SetOfIfcRelAssignsToProductSerializer : AggrSerializerInstance<IfcRelAssignsToProduct, SetOfIfcRelAssignsToProduct> { }
    public class SetOfIfcRelPositions : List<IfcRelPositions> { }
    class SetOfIfcRelPositionsSerializer : AggrSerializerInstance<IfcRelPositions, SetOfIfcRelPositions> { }
    public class SetOfIfcRelReferencedInSpatialStructure : List<IfcRelReferencedInSpatialStructure> { }
    class SetOfIfcRelReferencedInSpatialStructureSerializer : AggrSerializerInstance<IfcRelReferencedInSpatialStructure, SetOfIfcRelReferencedInSpatialStructure> { }
    public class SetOfIfcRelFillsElement : List<IfcRelFillsElement> { }
    class SetOfIfcRelFillsElementSerializer : AggrSerializerInstance<IfcRelFillsElement, SetOfIfcRelFillsElement> { }
    public class SetOfIfcRelConnectsElements : List<IfcRelConnectsElements> { }
    class SetOfIfcRelConnectsElementsSerializer : AggrSerializerInstance<IfcRelConnectsElements, SetOfIfcRelConnectsElements> { }
    public class SetOfIfcRelInterferesElements : List<IfcRelInterferesElements> { }
    class SetOfIfcRelInterferesElementsSerializer : AggrSerializerInstance<IfcRelInterferesElements, SetOfIfcRelInterferesElements> { }
    public class SetOfIfcRelProjectsElement : List<IfcRelProjectsElement> { }
    class SetOfIfcRelProjectsElementSerializer : AggrSerializerInstance<IfcRelProjectsElement, SetOfIfcRelProjectsElement> { }
    public class SetOfIfcRelVoidsElement : List<IfcRelVoidsElement> { }
    class SetOfIfcRelVoidsElementSerializer : AggrSerializerInstance<IfcRelVoidsElement, SetOfIfcRelVoidsElement> { }
    public class SetOfIfcRelConnectsWithRealizingElements : List<IfcRelConnectsWithRealizingElements> { }
    class SetOfIfcRelConnectsWithRealizingElementsSerializer : AggrSerializerInstance<IfcRelConnectsWithRealizingElements, SetOfIfcRelConnectsWithRealizingElements> { }
    public class SetOfIfcRelSpaceBoundary : List<IfcRelSpaceBoundary> { }
    class SetOfIfcRelSpaceBoundarySerializer : AggrSerializerInstance<IfcRelSpaceBoundary, SetOfIfcRelSpaceBoundary> { }
    public class SetOfIfcRelContainedInSpatialStructure : List<IfcRelContainedInSpatialStructure> { }
    class SetOfIfcRelContainedInSpatialStructureSerializer : AggrSerializerInstance<IfcRelContainedInSpatialStructure, SetOfIfcRelContainedInSpatialStructure> { }
    public class SetOfIfcRelCoversBldgElements : List<IfcRelCoversBldgElements> { }
    class SetOfIfcRelCoversBldgElementsSerializer : AggrSerializerInstance<IfcRelCoversBldgElements, SetOfIfcRelCoversBldgElements> { }
    public class SetOfIfcRelAdheresToElement : List<IfcRelAdheresToElement> { }
    class SetOfIfcRelAdheresToElementSerializer : AggrSerializerInstance<IfcRelAdheresToElement, SetOfIfcRelAdheresToElement> { }
    public class SetOfIfcRelConnectsPortToElement : List<IfcRelConnectsPortToElement> { }
    class SetOfIfcRelConnectsPortToElementSerializer : AggrSerializerInstance<IfcRelConnectsPortToElement, SetOfIfcRelConnectsPortToElement> { }
    public class SetOfIfcRelFlowControlElements : List<IfcRelFlowControlElements> { }
    class SetOfIfcRelFlowControlElementsSerializer : AggrSerializerInstance<IfcRelFlowControlElements, SetOfIfcRelFlowControlElements> { }
    public class SetOfIfcPropertySetDefinition : List<IfcPropertySetDefinition> { }
    class SetOfIfcPropertySetDefinitionSerializer : AggrSerializerInstance<IfcPropertySetDefinition, SetOfIfcPropertySetDefinition> { }
    public class ListOfIfcRepresentationMap : List<IfcRepresentationMap> { }
    class ListOfIfcRepresentationMapSerializer : AggrSerializerInstance<IfcRepresentationMap, ListOfIfcRepresentationMap> { }
    public class SetOfIfcPerson : List<IfcPerson> { }
    class SetOfIfcPersonSerializer : AggrSerializerInstance<IfcPerson, SetOfIfcPerson> { }
    public class SetOfIfcOrganization : List<IfcOrganization> { }
    class SetOfIfcOrganizationSerializer : AggrSerializerInstance<IfcOrganization, SetOfIfcOrganization> { }
    public class SetOfIfcPresentationLayerAssignment : List<IfcPresentationLayerAssignment> { }
    class SetOfIfcPresentationLayerAssignmentSerializer : AggrSerializerInstance<IfcPresentationLayerAssignment, SetOfIfcPresentationLayerAssignment> { }
    public class SetOfIfcStyledItem : List<IfcStyledItem> { }
    class SetOfIfcStyledItemSerializer : AggrSerializerInstance<IfcStyledItem, SetOfIfcStyledItem> { }
    public class SetOfIfcClosedShell : List<IfcClosedShell> { }
    class SetOfIfcClosedShellSerializer : AggrSerializerInstance<IfcClosedShell, SetOfIfcClosedShell> { }
    public class SetOfIfcFaceBound : List<IfcFaceBound> { }
    class SetOfIfcFaceBoundSerializer : AggrSerializerInstance<IfcFaceBound, SetOfIfcFaceBound> { }
    public class SetOfIfcTextureMap : List<IfcTextureMap> { }
    class SetOfIfcTextureMapSerializer : AggrSerializerInstance<IfcTextureMap, SetOfIfcTextureMap> { }
    public class SetOfIfcCurve : List<IfcCurve> { }
    class SetOfIfcCurveSerializer : AggrSerializerInstance<IfcCurve, SetOfIfcCurve> { }
    public class ListOfIfcAppliedValue : List<IfcAppliedValue> { }
    class ListOfIfcAppliedValueSerializer : AggrSerializerInstance<IfcAppliedValue, ListOfIfcAppliedValue> { }
    public class SetOfIfcRelAssociatesApproval : List<IfcRelAssociatesApproval> { }
    class SetOfIfcRelAssociatesApprovalSerializer : AggrSerializerInstance<IfcRelAssociatesApproval, SetOfIfcRelAssociatesApproval> { }
    public class SetOfIfcResourceApprovalRelationship : List<IfcResourceApprovalRelationship> { }
    class SetOfIfcResourceApprovalRelationshipSerializer : AggrSerializerInstance<IfcResourceApprovalRelationship, SetOfIfcResourceApprovalRelationship> { }
    public class SetOfIfcApprovalRelationship : List<IfcApprovalRelationship> { }
    class SetOfIfcApprovalRelationshipSerializer : AggrSerializerInstance<IfcApprovalRelationship, SetOfIfcApprovalRelationship> { }
    public class SetOfIfcApproval : List<IfcApproval> { }
    class SetOfIfcApprovalSerializer : AggrSerializerInstance<IfcApproval, SetOfIfcApproval> { }
    public class SetOfIfcProfileProperties : List<IfcProfileProperties> { }
    class SetOfIfcProfilePropertiesSerializer : AggrSerializerInstance<IfcProfileProperties, SetOfIfcProfileProperties> { }
    public class SetOfIfcRelAssignsToGroup : List<IfcRelAssignsToGroup> { }
    class SetOfIfcRelAssignsToGroupSerializer : AggrSerializerInstance<IfcRelAssignsToGroup, SetOfIfcRelAssignsToGroup> { }
    public class ListOfIfcIdentifier : List<TextValue> { }
    class ListOfIfcIdentifierSerializer : AggrSerializerText<TextValue, ListOfIfcIdentifier> { public ListOfIfcIdentifierSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class SetOfIfcTextureCoordinate : List<IfcTextureCoordinate> { }
    class SetOfIfcTextureCoordinateSerializer : AggrSerializerInstance<IfcTextureCoordinate, SetOfIfcTextureCoordinate> { }
    public class SetOfIfcSurfaceStyleWithTextures : List<IfcSurfaceStyleWithTextures> { }
    class SetOfIfcSurfaceStyleWithTexturesSerializer : AggrSerializerInstance<IfcSurfaceStyleWithTextures, SetOfIfcSurfaceStyleWithTextures> { }
    public class ListOfIfcSegment : List<IfcSegment> { }
    class ListOfIfcSegmentSerializer : AggrSerializerInstance<IfcSegment, ListOfIfcSegment> { }
    public class SetOfIfcRelServicesBuildings : List<IfcRelServicesBuildings> { }
    class SetOfIfcRelServicesBuildingsSerializer : AggrSerializerInstance<IfcRelServicesBuildings, SetOfIfcRelServicesBuildings> { }
    public class ListOfIfcCartesianPoint : List<IfcCartesianPoint> { }
    class ListOfIfcCartesianPointSerializer : AggrSerializerInstance<IfcCartesianPoint, ListOfIfcCartesianPoint> { }
    public class ListOfIfcInteger : List<IntValue> { }
    class ListOfIfcIntegerSerializer : AggrSerializer_IntValue<IntValue, ListOfIfcInteger> { }
    public class ListOfIfcParameterValue : List<double> { }
    class ListOfIfcParameterValueSerializer : AggrSerializer_double<double, ListOfIfcParameterValue> { }
    public class ListOfListOfIfcCartesianPoint : List<ListOfIfcCartesianPoint> { }
    class ListOfListOfIfcCartesianPointSerializer : AggrSerializerAggr<ListOfIfcCartesianPoint, ListOfIfcCartesianPointSerializer, ListOfListOfIfcCartesianPoint> { }
    public class ListOfIfcLengthMeasure : List<double> { }
    class ListOfIfcLengthMeasureSerializer : AggrSerializer_double<double, ListOfIfcLengthMeasure> { }
    public class ListOfListOfIfcLengthMeasure : List<ListOfIfcLengthMeasure> { }
    class ListOfListOfIfcLengthMeasureSerializer : AggrSerializerAggr<ListOfIfcLengthMeasure, ListOfIfcLengthMeasureSerializer, ListOfListOfIfcLengthMeasure> { }
    public class ListOfIfcLabel : List<TextValue> { }
    class ListOfIfcLabelSerializer : AggrSerializerText<TextValue, ListOfIfcLabel> { public ListOfIfcLabelSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class SetOfIfcRelAssociatesClassification : List<IfcRelAssociatesClassification> { }
    class SetOfIfcRelAssociatesClassificationSerializer : AggrSerializerInstance<IfcRelAssociatesClassification, SetOfIfcRelAssociatesClassification> { }
    public class SetOfIfcClassificationReference : List<IfcClassificationReference> { }
    class SetOfIfcClassificationReferenceSerializer : AggrSerializerInstance<IfcClassificationReference, SetOfIfcClassificationReference> { }
    public class SetOfIfcFace : List<IfcFace> { }
    class SetOfIfcFaceSerializer : AggrSerializerInstance<IfcFace, SetOfIfcFace> { }
    public class ListOfIfcNormalisedRatioMeasure : List<double> { }
    class ListOfIfcNormalisedRatioMeasureSerializer : AggrSerializer_double<double, ListOfIfcNormalisedRatioMeasure> { }
    public class ListOfListOfIfcNormalisedRatioMeasure : List<ListOfIfcNormalisedRatioMeasure> { }
    class ListOfListOfIfcNormalisedRatioMeasureSerializer : AggrSerializerAggr<ListOfIfcNormalisedRatioMeasure, ListOfIfcNormalisedRatioMeasureSerializer, ListOfListOfIfcNormalisedRatioMeasure> { }
    public class SetOfIfcPropertySet : List<IfcPropertySet> { }
    class SetOfIfcPropertySetSerializer : AggrSerializerInstance<IfcPropertySet, SetOfIfcPropertySet> { }
    public class SetOfIfcPropertyDependencyRelationship : List<IfcPropertyDependencyRelationship> { }
    class SetOfIfcPropertyDependencyRelationshipSerializer : AggrSerializerInstance<IfcPropertyDependencyRelationship, SetOfIfcPropertyDependencyRelationship> { }
    public class SetOfIfcComplexProperty : List<IfcComplexProperty> { }
    class SetOfIfcComplexPropertySerializer : AggrSerializerInstance<IfcComplexProperty, SetOfIfcComplexProperty> { }
    public class SetOfIfcResourceConstraintRelationship : List<IfcResourceConstraintRelationship> { }
    class SetOfIfcResourceConstraintRelationshipSerializer : AggrSerializerInstance<IfcResourceConstraintRelationship, SetOfIfcResourceConstraintRelationship> { }
    public class SetOfIfcProperty : List<IfcProperty> { }
    class SetOfIfcPropertySerializer : AggrSerializerInstance<IfcProperty, SetOfIfcProperty> { }
    public class SetOfIfcComplexPropertyTemplate : List<IfcComplexPropertyTemplate> { }
    class SetOfIfcComplexPropertyTemplateSerializer : AggrSerializerInstance<IfcComplexPropertyTemplate, SetOfIfcComplexPropertyTemplate> { }
    public class SetOfIfcPropertySetTemplate : List<IfcPropertySetTemplate> { }
    class SetOfIfcPropertySetTemplateSerializer : AggrSerializerInstance<IfcPropertySetTemplate, SetOfIfcPropertySetTemplate> { }
    public class SetOfIfcPropertyTemplate : List<IfcPropertyTemplate> { }
    class SetOfIfcPropertyTemplateSerializer : AggrSerializerInstance<IfcPropertyTemplate, SetOfIfcPropertyTemplate> { }
    public class SetOfIfcCompositeCurve : List<IfcCompositeCurve> { }
    class SetOfIfcCompositeCurveSerializer : AggrSerializerInstance<IfcCompositeCurve, SetOfIfcCompositeCurve> { }
    public class SetOfIfcProfileDef : List<IfcProfileDef> { }
    class SetOfIfcProfileDefSerializer : AggrSerializerInstance<IfcProfileDef, SetOfIfcProfileDef> { }
    public class SetOfIfcRelAssignsToResource : List<IfcRelAssignsToResource> { }
    class SetOfIfcRelAssignsToResourceSerializer : AggrSerializerInstance<IfcRelAssignsToResource, SetOfIfcRelAssignsToResource> { }
    public class SetOfIfcRepresentationContext : List<IfcRepresentationContext> { }
    class SetOfIfcRepresentationContextSerializer : AggrSerializerInstance<IfcRepresentationContext, SetOfIfcRepresentationContext> { }
    public class SetOfIfcCoordinateOperation : List<IfcCoordinateOperation> { }
    class SetOfIfcCoordinateOperationSerializer : AggrSerializerInstance<IfcCoordinateOperation, SetOfIfcCoordinateOperation> { }
    public class SetOfIfcWellKnownText : List<IfcWellKnownText> { }
    class SetOfIfcWellKnownTextSerializer : AggrSerializerInstance<IfcWellKnownText, SetOfIfcWellKnownText> { }
    public class ListOfIfcCostValue : List<IfcCostValue> { }
    class ListOfIfcCostValueSerializer : AggrSerializerInstance<IfcCostValue, ListOfIfcCostValue> { }
    public class ListOfIfcPhysicalQuantity : List<IfcPhysicalQuantity> { }
    class ListOfIfcPhysicalQuantitySerializer : AggrSerializerInstance<IfcPhysicalQuantity, ListOfIfcPhysicalQuantity> { }
    public class SetOfIfcRelCoversSpaces : List<IfcRelCoversSpaces> { }
    class SetOfIfcRelCoversSpacesSerializer : AggrSerializerInstance<IfcRelCoversSpaces, SetOfIfcRelCoversSpaces> { }
    public class SetOfIfcBoundaryCurve : List<IfcBoundaryCurve> { }
    class SetOfIfcBoundaryCurveSerializer : AggrSerializerInstance<IfcBoundaryCurve, SetOfIfcBoundaryCurve> { }
    public class ListOfIfcCurveStyleFontPattern : List<IfcCurveStyleFontPattern> { }
    class ListOfIfcCurveStyleFontPatternSerializer : AggrSerializerInstance<IfcCurveStyleFontPattern, ListOfIfcCurveStyleFontPattern> { }
    public class SetOfIfcDerivedUnitElement : List<IfcDerivedUnitElement> { }
    class SetOfIfcDerivedUnitElementSerializer : AggrSerializerInstance<IfcDerivedUnitElement, SetOfIfcDerivedUnitElement> { }
    public class ListOfIfcReal : List<double> { }
    class ListOfIfcRealSerializer : AggrSerializer_double<double, ListOfIfcReal> { }
    public class SetOfIfcRelConnectsPorts : List<IfcRelConnectsPorts> { }
    class SetOfIfcRelConnectsPortsSerializer : AggrSerializerInstance<IfcRelConnectsPorts, SetOfIfcRelConnectsPorts> { }
    public class SetOfIfcActorSelect : List<IfcActorSelect> { }
    class SetOfIfcActorSelectSerializer : AggrSerializerSelect<IfcActorSelect, SetOfIfcActorSelect> { }
    public class SetOfIfcRelAssociatesDocument : List<IfcRelAssociatesDocument> { }
    class SetOfIfcRelAssociatesDocumentSerializer : AggrSerializerInstance<IfcRelAssociatesDocument, SetOfIfcRelAssociatesDocument> { }
    public class SetOfIfcDocumentReference : List<IfcDocumentReference> { }
    class SetOfIfcDocumentReferenceSerializer : AggrSerializerInstance<IfcDocumentReference, SetOfIfcDocumentReference> { }
    public class SetOfIfcDocumentInformationRelationship : List<IfcDocumentInformationRelationship> { }
    class SetOfIfcDocumentInformationRelationshipSerializer : AggrSerializerInstance<IfcDocumentInformationRelationship, SetOfIfcDocumentInformationRelationship> { }
    public class SetOfIfcDocumentInformation : List<IfcDocumentInformation> { }
    class SetOfIfcDocumentInformationSerializer : AggrSerializerInstance<IfcDocumentInformation, SetOfIfcDocumentInformation> { }
    public class SetOfIfcTypeObject : List<IfcTypeObject> { }
    class SetOfIfcTypeObjectSerializer : AggrSerializerInstance<IfcTypeObject, SetOfIfcTypeObject> { }
    public class SetOfIfcRelDefinesByTemplate : List<IfcRelDefinesByTemplate> { }
    class SetOfIfcRelDefinesByTemplateSerializer : AggrSerializerInstance<IfcRelDefinesByTemplate, SetOfIfcRelDefinesByTemplate> { }
    public class ListOfIfcOrientedEdge : List<IfcOrientedEdge> { }
    class ListOfIfcOrientedEdgeSerializer : AggrSerializerInstance<IfcOrientedEdge, ListOfIfcOrientedEdge> { }
    public class SetOfIfcPhysicalQuantity : List<IfcPhysicalQuantity> { }
    class SetOfIfcPhysicalQuantitySerializer : AggrSerializerInstance<IfcPhysicalQuantity, SetOfIfcPhysicalQuantity> { }
    public class SetOfIfcRelSequence : List<IfcRelSequence> { }
    class SetOfIfcRelSequenceSerializer : AggrSerializerInstance<IfcRelSequence, SetOfIfcRelSequence> { }
    public class SetOfIfcRelAssignsToProcess : List<IfcRelAssignsToProcess> { }
    class SetOfIfcRelAssignsToProcessSerializer : AggrSerializerInstance<IfcRelAssignsToProcess, SetOfIfcRelAssignsToProcess> { }
    public class SetOfIfcResourceObjectSelect : List<IfcResourceObjectSelect> { }
    class SetOfIfcResourceObjectSelectSerializer : AggrSerializerSelect<IfcResourceObjectSelect, SetOfIfcResourceObjectSelect> { }
    public class SetOfIfcConnectedFaceSet : List<IfcConnectedFaceSet> { }
    class SetOfIfcConnectedFaceSetSerializer : AggrSerializerInstance<IfcConnectedFaceSet, SetOfIfcConnectedFaceSet> { }
    public class SetOfIfcFillStyleSelect : List<IfcFillStyleSelect> { }
    class SetOfIfcFillStyleSelectSerializer : AggrSerializerSelect<IfcFillStyleSelect, SetOfIfcFillStyleSelect> { }
    public class ListOfIfcVector : List<IfcVector> { }
    class ListOfIfcVectorSerializer : AggrSerializerInstance<IfcVector, ListOfIfcVector> { }
    public class SetOfIfcGeometricSetSelect : List<IfcGeometricSetSelect> { }
    class SetOfIfcGeometricSetSelectSerializer : AggrSerializerSelect<IfcGeometricSetSelect, SetOfIfcGeometricSetSelect> { }
    public class SetOfIfcRepresentation : List<IfcRepresentation> { }
    class SetOfIfcRepresentationSerializer : AggrSerializerInstance<IfcRepresentation, SetOfIfcRepresentation> { }
    public class SetOfIfcGeometricRepresentationSubContext : List<IfcGeometricRepresentationSubContext> { }
    class SetOfIfcGeometricRepresentationSubContextSerializer : AggrSerializerInstance<IfcGeometricRepresentationSubContext, SetOfIfcGeometricRepresentationSubContext> { }
    public class ListOfIfcGridAxis : List<IfcGridAxis> { }
    class ListOfIfcGridAxisSerializer : AggrSerializerInstance<IfcGridAxis, ListOfIfcGridAxis> { }
    public class SetOfIfcGrid : List<IfcGrid> { }
    class SetOfIfcGridSerializer : AggrSerializerInstance<IfcGrid, SetOfIfcGrid> { }
    public class SetOfIfcVirtualGridIntersection : List<IfcVirtualGridIntersection> { }
    class SetOfIfcVirtualGridIntersectionSerializer : AggrSerializerInstance<IfcVirtualGridIntersection, SetOfIfcVirtualGridIntersection> { }
    public class SetOfIfcProduct : List<IfcProduct> { }
    class SetOfIfcProductSerializer : AggrSerializerInstance<IfcProduct, SetOfIfcProduct> { }
    public class SetOfIfcObjectPlacement : List<IfcObjectPlacement> { }
    class SetOfIfcObjectPlacementSerializer : AggrSerializerInstance<IfcObjectPlacement, SetOfIfcObjectPlacement> { }
    public class ListOfIfcPositiveInteger : List<IntValue> { }
    class ListOfIfcPositiveIntegerSerializer : AggrSerializer_IntValue<IntValue, ListOfIfcPositiveInteger> { }
    public class ListOfIfcSegmentIndexSelect : List<IfcSegmentIndexSelect> { }
    class ListOfIfcSegmentIndexSelectSerializer : AggrSerializerSelect<IfcSegmentIndexSelect, ListOfIfcSegmentIndexSelect> { }
    public class SetOfIfcPolygonalFaceSet : List<IfcPolygonalFaceSet> { }
    class SetOfIfcPolygonalFaceSetSerializer : AggrSerializerInstance<IfcPolygonalFaceSet, SetOfIfcPolygonalFaceSet> { }
    public class SetOfIfcTextureCoordinateIndices : List<IfcTextureCoordinateIndices> { }
    class SetOfIfcTextureCoordinateIndicesSerializer : AggrSerializerInstance<IfcTextureCoordinateIndices, SetOfIfcTextureCoordinateIndices> { }
    public class ListOfListOfIfcPositiveInteger : List<ListOfIfcPositiveInteger> { }
    class ListOfListOfIfcPositiveIntegerSerializer : AggrSerializerAggr<ListOfIfcPositiveInteger, ListOfIfcPositiveIntegerSerializer, ListOfListOfIfcPositiveInteger> { }
    public class ListOfIfcSurfaceTexture : List<IfcSurfaceTexture> { }
    class ListOfIfcSurfaceTextureSerializer : AggrSerializerInstance<IfcSurfaceTexture, ListOfIfcSurfaceTexture> { }
    public class ListOfIfcPcurve : List<IfcPcurve> { }
    class ListOfIfcPcurveSerializer : AggrSerializerInstance<IfcPcurve, ListOfIfcPcurve> { }
    public class ListOfIfcIrregularTimeSeriesValue : List<IfcIrregularTimeSeriesValue> { }
    class ListOfIfcIrregularTimeSeriesValueSerializer : AggrSerializerInstance<IfcIrregularTimeSeriesValue, ListOfIfcIrregularTimeSeriesValue> { }
    public class ListOfIfcValue : List<IfcValue> { }
    class ListOfIfcValueSerializer : AggrSerializerSelect<IfcValue, ListOfIfcValue> { }
    public class SetOfIfcRelAssociatesLibrary : List<IfcRelAssociatesLibrary> { }
    class SetOfIfcRelAssociatesLibrarySerializer : AggrSerializerInstance<IfcRelAssociatesLibrary, SetOfIfcRelAssociatesLibrary> { }
    public class SetOfIfcLibraryReference : List<IfcLibraryReference> { }
    class SetOfIfcLibraryReferenceSerializer : AggrSerializerInstance<IfcLibraryReference, SetOfIfcLibraryReference> { }
    public class ListOfIfcPlaneAngleMeasure : List<double> { }
    class ListOfIfcPlaneAngleMeasureSerializer : AggrSerializer_double<double, ListOfIfcPlaneAngleMeasure> { }
    public class ListOfIfcLuminousIntensityDistributionMeasure : List<double> { }
    class ListOfIfcLuminousIntensityDistributionMeasureSerializer : AggrSerializer_double<double, ListOfIfcLuminousIntensityDistributionMeasure> { }
    public class ListOfIfcLightDistributionData : List<IfcLightDistributionData> { }
    class ListOfIfcLightDistributionDataSerializer : AggrSerializerInstance<IfcLightDistributionData, ListOfIfcLightDistributionData> { }
    public class SetOfIfcRelAssociatesMaterial : List<IfcRelAssociatesMaterial> { }
    class SetOfIfcRelAssociatesMaterialSerializer : AggrSerializerInstance<IfcRelAssociatesMaterial, SetOfIfcRelAssociatesMaterial> { }
    public class SetOfIfcMaterialProperties : List<IfcMaterialProperties> { }
    class SetOfIfcMaterialPropertiesSerializer : AggrSerializerInstance<IfcMaterialProperties, SetOfIfcMaterialProperties> { }
    public class SetOfIfcMaterialDefinitionRepresentation : List<IfcMaterialDefinitionRepresentation> { }
    class SetOfIfcMaterialDefinitionRepresentationSerializer : AggrSerializerInstance<IfcMaterialDefinitionRepresentation, SetOfIfcMaterialDefinitionRepresentation> { }
    public class SetOfIfcMaterialRelationship : List<IfcMaterialRelationship> { }
    class SetOfIfcMaterialRelationshipSerializer : AggrSerializerInstance<IfcMaterialRelationship, SetOfIfcMaterialRelationship> { }
    public class SetOfIfcClassificationSelect : List<IfcClassificationSelect> { }
    class SetOfIfcClassificationSelectSerializer : AggrSerializerSelect<IfcClassificationSelect, SetOfIfcClassificationSelect> { }
    public class SetOfIfcMaterialConstituent : List<IfcMaterialConstituent> { }
    class SetOfIfcMaterialConstituentSerializer : AggrSerializerInstance<IfcMaterialConstituent, SetOfIfcMaterialConstituent> { }
    public class ListOfIfcRepresentation : List<IfcRepresentation> { }
    class ListOfIfcRepresentationSerializer : AggrSerializerInstance<IfcRepresentation, ListOfIfcRepresentation> { }
    public class ListOfIfcMaterialLayer : List<IfcMaterialLayer> { }
    class ListOfIfcMaterialLayerSerializer : AggrSerializerInstance<IfcMaterialLayer, ListOfIfcMaterialLayer> { }
    public class ArrayOfIfcLengthMeasure : List<double> { }
    class ArrayOfIfcLengthMeasureSerializer : AggrSerializer_double<double, ArrayOfIfcLengthMeasure> { }
    public class ListOfIfcMaterial : List<IfcMaterial> { }
    class ListOfIfcMaterialSerializer : AggrSerializerInstance<IfcMaterial, ListOfIfcMaterial> { }
    public class ListOfIfcMaterialProfile : List<IfcMaterialProfile> { }
    class ListOfIfcMaterialProfileSerializer : AggrSerializerInstance<IfcMaterialProfile, ListOfIfcMaterialProfile> { }
    public class SetOfIfcMaterial : List<IfcMaterial> { }
    class SetOfIfcMaterialSerializer : AggrSerializerInstance<IfcMaterial, SetOfIfcMaterial> { }
    public class ListOfIfcConstraint : List<IfcConstraint> { }
    class ListOfIfcConstraintSerializer : AggrSerializerInstance<IfcConstraint, ListOfIfcConstraint> { }
    public class ListOfIfcPointByDistanceExpression : List<IfcPointByDistanceExpression> { }
    class ListOfIfcPointByDistanceExpressionSerializer : AggrSerializerInstance<IfcPointByDistanceExpression, ListOfIfcPointByDistanceExpression> { }
    public class ListOfIfcNonNegativeLengthMeasure : List<double> { }
    class ListOfIfcNonNegativeLengthMeasureSerializer : AggrSerializer_double<double, ListOfIfcNonNegativeLengthMeasure> { }
    public class ListOfIfcActorRole : List<IfcActorRole> { }
    class ListOfIfcActorRoleSerializer : AggrSerializerInstance<IfcActorRole, ListOfIfcActorRole> { }
    public class ListOfIfcAddress : List<IfcAddress> { }
    class ListOfIfcAddressSerializer : AggrSerializerInstance<IfcAddress, ListOfIfcAddress> { }
    public class SetOfIfcOrganizationRelationship : List<IfcOrganizationRelationship> { }
    class SetOfIfcOrganizationRelationshipSerializer : AggrSerializerInstance<IfcOrganizationRelationship, SetOfIfcOrganizationRelationship> { }
    public class SetOfIfcPersonAndOrganization : List<IfcPersonAndOrganization> { }
    class SetOfIfcPersonAndOrganizationSerializer : AggrSerializerInstance<IfcPersonAndOrganization, SetOfIfcPersonAndOrganization> { }
    public class SetOfIfcPhysicalComplexQuantity : List<IfcPhysicalComplexQuantity> { }
    class SetOfIfcPhysicalComplexQuantitySerializer : AggrSerializerInstance<IfcPhysicalComplexQuantity, SetOfIfcPhysicalComplexQuantity> { }
    public class ListOfIfcBinary : List<TextValue> { }
    class ListOfIfcBinarySerializer : AggrSerializerText<TextValue, ListOfIfcBinary> { public ListOfIfcBinarySerializer() : base(ifcengine.sdaiBINARY) { } }
    public class SetOfIfcIndexedColourMap : List<IfcIndexedColourMap> { }
    class SetOfIfcIndexedColourMapSerializer : AggrSerializerInstance<IfcIndexedColourMap, SetOfIfcIndexedColourMap> { }
    public class SetOfIfcIndexedTextureMap : List<IfcIndexedTextureMap> { }
    class SetOfIfcIndexedTextureMapSerializer : AggrSerializerInstance<IfcIndexedTextureMap, SetOfIfcIndexedTextureMap> { }
    public class ListOfIfcIndexedPolygonalFace : List<IfcIndexedPolygonalFace> { }
    class ListOfIfcIndexedPolygonalFaceSerializer : AggrSerializerInstance<IfcIndexedPolygonalFace, ListOfIfcIndexedPolygonalFace> { }
    public class SetOfIfcLayeredItem : List<IfcLayeredItem> { }
    class SetOfIfcLayeredItemSerializer : AggrSerializerSelect<IfcLayeredItem, SetOfIfcLayeredItem> { }
    public class SetOfIfcPresentationStyle : List<IfcPresentationStyle> { }
    class SetOfIfcPresentationStyleSerializer : AggrSerializerInstance<IfcPresentationStyle, SetOfIfcPresentationStyle> { }
    public class SetOfIfcShapeAspect : List<IfcShapeAspect> { }
    class SetOfIfcShapeAspectSerializer : AggrSerializerInstance<IfcShapeAspect, SetOfIfcShapeAspect> { }
    public class ListOfListOfIfcReal : List<ListOfIfcReal> { }
    class ListOfListOfIfcRealSerializer : AggrSerializerAggr<ListOfIfcReal, ListOfIfcRealSerializer, ListOfListOfIfcReal> { }
    public class SetOfIfcDayInMonthNumber : List<IntValue> { }
    class SetOfIfcDayInMonthNumberSerializer : AggrSerializer_IntValue<IntValue, SetOfIfcDayInMonthNumber> { }
    public class SetOfIfcDayInWeekNumber : List<IntValue> { }
    class SetOfIfcDayInWeekNumberSerializer : AggrSerializer_IntValue<IntValue, SetOfIfcDayInWeekNumber> { }
    public class SetOfIfcMonthInYearNumber : List<IntValue> { }
    class SetOfIfcMonthInYearNumberSerializer : AggrSerializer_IntValue<IntValue, SetOfIfcMonthInYearNumber> { }
    public class ListOfIfcTimePeriod : List<IfcTimePeriod> { }
    class ListOfIfcTimePeriodSerializer : AggrSerializerInstance<IfcTimePeriod, ListOfIfcTimePeriod> { }
    public class ListOfIfcTimeSeriesValue : List<IfcTimeSeriesValue> { }
    class ListOfIfcTimeSeriesValueSerializer : AggrSerializerInstance<IfcTimeSeriesValue, ListOfIfcTimeSeriesValue> { }
    public class ListOfIfcSectionReinforcementProperties : List<IfcSectionReinforcementProperties> { }
    class ListOfIfcSectionReinforcementPropertiesSerializer : AggrSerializerInstance<IfcSectionReinforcementProperties, ListOfIfcSectionReinforcementProperties> { }
    public class ListOfIfcBendingParameterSelect : List<IfcBendingParameterSelect> { }
    class ListOfIfcBendingParameterSelectSerializer : AggrSerializerSelect<IfcBendingParameterSelect, ListOfIfcBendingParameterSelect> { }
    public class SetOfIfcSurfaceFeature : List<IfcSurfaceFeature> { }
    class SetOfIfcSurfaceFeatureSerializer : AggrSerializerInstance<IfcSurfaceFeature, SetOfIfcSurfaceFeature> { }
    public class SetOfIfcObjectDefinition : List<IfcObjectDefinition> { }
    class SetOfIfcObjectDefinitionSerializer : AggrSerializerInstance<IfcObjectDefinition, SetOfIfcObjectDefinition> { }
    public class SetOfIfcDefinitionSelect : List<IfcDefinitionSelect> { }
    class SetOfIfcDefinitionSelectSerializer : AggrSerializerSelect<IfcDefinitionSelect, SetOfIfcDefinitionSelect> { }
    public class SetOfIfcElement : List<IfcElement> { }
    class SetOfIfcElementSerializer : AggrSerializerInstance<IfcElement, SetOfIfcElement> { }
    public class SetOfIfcCovering : List<IfcCovering> { }
    class SetOfIfcCoveringSerializer : AggrSerializerInstance<IfcCovering, SetOfIfcCovering> { }
    public class SetOfIfcObject : List<IfcObject> { }
    class SetOfIfcObjectSerializer : AggrSerializerInstance<IfcObject, SetOfIfcObject> { }
    public class SetOfIfcDistributionControlElement : List<IfcDistributionControlElement> { }
    class SetOfIfcDistributionControlElementSerializer : AggrSerializerInstance<IfcDistributionControlElement, SetOfIfcDistributionControlElement> { }
    public class ListOfIfcObjectDefinition : List<IfcObjectDefinition> { }
    class ListOfIfcObjectDefinitionSerializer : AggrSerializerInstance<IfcObjectDefinition, ListOfIfcObjectDefinition> { }
    public class SetOfIfcSpatialReferenceSelect : List<IfcSpatialReferenceSelect> { }
    class SetOfIfcSpatialReferenceSelectSerializer : AggrSerializerSelect<IfcSpatialReferenceSelect, SetOfIfcSpatialReferenceSelect> { }
    public class SetOfIfcSpatialElement : List<IfcSpatialElement> { }
    class SetOfIfcSpatialElementSerializer : AggrSerializerInstance<IfcSpatialElement, SetOfIfcSpatialElement> { }
    public class SetOfIfcRelSpaceBoundary1stLevel : List<IfcRelSpaceBoundary1stLevel> { }
    class SetOfIfcRelSpaceBoundary1stLevelSerializer : AggrSerializerInstance<IfcRelSpaceBoundary1stLevel, SetOfIfcRelSpaceBoundary1stLevel> { }
    public class SetOfIfcRelSpaceBoundary2ndLevel : List<IfcRelSpaceBoundary2ndLevel> { }
    class SetOfIfcRelSpaceBoundary2ndLevelSerializer : AggrSerializerInstance<IfcRelSpaceBoundary2ndLevel, SetOfIfcRelSpaceBoundary2ndLevel> { }
    public class SetOfIfcRepresentationItem : List<IfcRepresentationItem> { }
    class SetOfIfcRepresentationItemSerializer : AggrSerializerInstance<IfcRepresentationItem, SetOfIfcRepresentationItem> { }
    public class SetOfIfcRepresentationMap : List<IfcRepresentationMap> { }
    class SetOfIfcRepresentationMapSerializer : AggrSerializerInstance<IfcRepresentationMap, SetOfIfcRepresentationMap> { }
    public class SetOfIfcProductRepresentation : List<IfcProductRepresentation> { }
    class SetOfIfcProductRepresentationSerializer : AggrSerializerInstance<IfcProductRepresentation, SetOfIfcProductRepresentation> { }
    public class SetOfIfcMappedItem : List<IfcMappedItem> { }
    class SetOfIfcMappedItemSerializer : AggrSerializerInstance<IfcMappedItem, SetOfIfcMappedItem> { }
    public class ListOfIfcProfileDef : List<IfcProfileDef> { }
    class ListOfIfcProfileDefSerializer : AggrSerializerInstance<IfcProfileDef, ListOfIfcProfileDef> { }
    public class ListOfIfcAxis2PlacementLinear : List<IfcAxis2PlacementLinear> { }
    class ListOfIfcAxis2PlacementLinearSerializer : AggrSerializerInstance<IfcAxis2PlacementLinear, ListOfIfcAxis2PlacementLinear> { }
    public class ListOfIfcAxis2Placement3D : List<IfcAxis2Placement3D> { }
    class ListOfIfcAxis2Placement3DSerializer : AggrSerializerInstance<IfcAxis2Placement3D, ListOfIfcAxis2Placement3D> { }
    public class SetOfIfcReinforcementBarProperties : List<IfcReinforcementBarProperties> { }
    class SetOfIfcReinforcementBarPropertiesSerializer : AggrSerializerInstance<IfcReinforcementBarProperties, SetOfIfcReinforcementBarProperties> { }
    public class ListOfIfcShapeModel : List<IfcShapeModel> { }
    class ListOfIfcShapeModelSerializer : AggrSerializerInstance<IfcShapeModel, ListOfIfcShapeModel> { }
    public class SetOfIfcShell : List<IfcShell> { }
    class SetOfIfcShellSerializer : AggrSerializerSelect<IfcShell, SetOfIfcShell> { }
    public class SetOfIfcRelConnectsStructuralActivity : List<IfcRelConnectsStructuralActivity> { }
    class SetOfIfcRelConnectsStructuralActivitySerializer : AggrSerializerInstance<IfcRelConnectsStructuralActivity, SetOfIfcRelConnectsStructuralActivity> { }
    public class SetOfIfcStructuralLoadGroup : List<IfcStructuralLoadGroup> { }
    class SetOfIfcStructuralLoadGroupSerializer : AggrSerializerInstance<IfcStructuralLoadGroup, SetOfIfcStructuralLoadGroup> { }
    public class SetOfIfcStructuralResultGroup : List<IfcStructuralResultGroup> { }
    class SetOfIfcStructuralResultGroupSerializer : AggrSerializerInstance<IfcStructuralResultGroup, SetOfIfcStructuralResultGroup> { }
    public class SetOfIfcRelConnectsStructuralMember : List<IfcRelConnectsStructuralMember> { }
    class SetOfIfcRelConnectsStructuralMemberSerializer : AggrSerializerInstance<IfcRelConnectsStructuralMember, SetOfIfcRelConnectsStructuralMember> { }
    public class SetOfIfcStructuralAnalysisModel : List<IfcStructuralAnalysisModel> { }
    class SetOfIfcStructuralAnalysisModelSerializer : AggrSerializerInstance<IfcStructuralAnalysisModel, SetOfIfcStructuralAnalysisModel> { }
    public class ListOfIfcRatioMeasure : List<double> { }
    class ListOfIfcRatioMeasureSerializer : AggrSerializer_double<double, ListOfIfcRatioMeasure> { }
    public class ListOfIfcStructuralLoadOrResult : List<IfcStructuralLoadOrResult> { }
    class ListOfIfcStructuralLoadOrResultSerializer : AggrSerializerInstance<IfcStructuralLoadOrResult, ListOfIfcStructuralLoadOrResult> { }
    public class SetOfIfcSurfaceStyleElementSelect : List<IfcSurfaceStyleElementSelect> { }
    class SetOfIfcSurfaceStyleElementSelectSerializer : AggrSerializerSelect<IfcSurfaceStyleElementSelect, SetOfIfcSurfaceStyleElementSelect> { }
    public class ListOfIfcTableRow : List<IfcTableRow> { }
    class ListOfIfcTableRowSerializer : AggrSerializerInstance<IfcTableRow, ListOfIfcTableRow> { }
    public class ListOfIfcTableColumn : List<IfcTableColumn> { }
    class ListOfIfcTableColumnSerializer : AggrSerializerInstance<IfcTableColumn, ListOfIfcTableColumn> { }
    public class ListOfIfcURIReference : List<TextValue> { }
    class ListOfIfcURIReferenceSerializer : AggrSerializerText<TextValue, ListOfIfcURIReference> { public ListOfIfcURIReferenceSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class ListOfIfcTextFontName : List<TextValue> { }
    class ListOfIfcTextFontNameSerializer : AggrSerializerText<TextValue, ListOfIfcTextFontName> { public ListOfIfcTextFontNameSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class ListOfIfcTextureVertex : List<IfcTextureVertex> { }
    class ListOfIfcTextureVertexSerializer : AggrSerializerInstance<IfcTextureVertex, ListOfIfcTextureVertex> { }
    public class ListOfListOfIfcParameterValue : List<ListOfIfcParameterValue> { }
    class ListOfListOfIfcParameterValueSerializer : AggrSerializerAggr<ListOfIfcParameterValue, ListOfIfcParameterValueSerializer, ListOfListOfIfcParameterValue> { }
    public class SetOfIfcTrimmingSelect : List<IfcTrimmingSelect> { }
    class SetOfIfcTrimmingSelectSerializer : AggrSerializerSelect<IfcTrimmingSelect, SetOfIfcTrimmingSelect> { }
    public class SetOfIfcUnit : List<IfcUnit> { }
    class SetOfIfcUnitSerializer : AggrSerializerSelect<IfcUnit, SetOfIfcUnit> { }
    public class SetOfIfcWorkTime : List<IfcWorkTime> { }
    class SetOfIfcWorkTimeSerializer : AggrSerializerInstance<IfcWorkTime, SetOfIfcWorkTime> { }

    //
    // Entities
    // 


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRoot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRoot : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRoot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRoot(SdaiInstance instance) : base(instance) { }
        public IfcRoot() : base(0) { }

        public static implicit operator IfcRoot(SdaiInstance instance) => new IfcRoot(instance);

        public TextValue GlobalId
            {
            get { return get_string("GlobalId", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "GlobalId", ifcengine.sdaiSTRING, value); }
            }
        public IfcOwnerHistory OwnerHistory 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OwnerHistory", ifcengine.sdaiINSTANCE, out inst); return new IfcOwnerHistory(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OwnerHistory", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcRoot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcObjectDefinition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcObjectDefinition : IfcRoot
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcObjectDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcObjectDefinition(SdaiInstance instance) : base(instance) { }
        public IfcObjectDefinition() : base(0) { }

        public static implicit operator IfcObjectDefinition(SdaiInstance instance) => new IfcObjectDefinition(instance);

        public SetOfIfcRelAssigns HasAssignments { get { return (new SetOfIfcRelAssignsSerializer()).FromAttr(m_instance, "HasAssignments"); } }
        public SetOfIfcRelNests Nests { get { return (new SetOfIfcRelNestsSerializer()).FromAttr(m_instance, "Nests"); } }
        public SetOfIfcRelNests IsNestedBy { get { return (new SetOfIfcRelNestsSerializer()).FromAttr(m_instance, "IsNestedBy"); } }
        public SetOfIfcRelDeclares HasContext { get { return (new SetOfIfcRelDeclaresSerializer()).FromAttr(m_instance, "HasContext"); } }
        public SetOfIfcRelAggregates IsDecomposedBy { get { return (new SetOfIfcRelAggregatesSerializer()).FromAttr(m_instance, "IsDecomposedBy"); } }
        public SetOfIfcRelAggregates Decomposes { get { return (new SetOfIfcRelAggregatesSerializer()).FromAttr(m_instance, "Decomposes"); } }
        public SetOfIfcRelAssociates HasAssociations { get { return (new SetOfIfcRelAssociatesSerializer()).FromAttr(m_instance, "HasAssociations"); } }

        protected override TextValue EntityName() { return "IfcObjectDefinition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcObject
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcObject : IfcObjectDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcObject
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcObject(SdaiInstance instance) : base(instance) { }
        public IfcObject() : base(0) { }

        public static implicit operator IfcObject(SdaiInstance instance) => new IfcObject(instance);

        public TextValue ObjectType
            {
            get { return get_string("ObjectType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ObjectType", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelDefinesByObject IsDeclaredBy { get { return (new SetOfIfcRelDefinesByObjectSerializer()).FromAttr(m_instance, "IsDeclaredBy"); } }
        public SetOfIfcRelDefinesByObject Declares { get { return (new SetOfIfcRelDefinesByObjectSerializer()).FromAttr(m_instance, "Declares"); } }
        public SetOfIfcRelDefinesByType IsTypedBy { get { return (new SetOfIfcRelDefinesByTypeSerializer()).FromAttr(m_instance, "IsTypedBy"); } }
        public SetOfIfcRelDefinesByProperties IsDefinedBy { get { return (new SetOfIfcRelDefinesByPropertiesSerializer()).FromAttr(m_instance, "IsDefinedBy"); } }

        protected override TextValue EntityName() { return "IfcObject"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcControl
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcControl : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcControl(SdaiInstance instance) : base(instance) { }
        public IfcControl() : base(0) { }

        public static implicit operator IfcControl(SdaiInstance instance) => new IfcControl(instance);

        public TextValue Identification
            {
            get { return get_string("Identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identification", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelAssignsToControl Controls { get { return (new SetOfIfcRelAssignsToControlSerializer()).FromAttr(m_instance, "Controls"); } }

        protected override TextValue EntityName() { return "IfcControl"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcActionRequest
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcActionRequest : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcActionRequest
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcActionRequest(SdaiInstance instance) : base(instance) { }
        public IfcActionRequest() : base(0) { }

        public static implicit operator IfcActionRequest(SdaiInstance instance) => new IfcActionRequest(instance);

        /// <summary>
        /// Create new instace of IfcActionRequest and returns object of this class to interact with
        /// </summary>
        public static new IfcActionRequest Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcActionRequest"); Debug.Assert(inst != 0); return inst; }

        public IfcActionRequestTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcActionRequestTypeEnum_); return EnumValue<IfcActionRequestTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcActionRequestTypeEnum>.FromValue(value.Value, EnumNames.IfcActionRequestTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue Status
            {
            get { return get_string("Status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Status", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LongDescription
            {
            get { return get_string("LongDescription", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongDescription", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcActionRequest"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcActor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcActor : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcActor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcActor(SdaiInstance instance) : base(instance) { }
        public IfcActor() : base(0) { }

        public static implicit operator IfcActor(SdaiInstance instance) => new IfcActor(instance);

        /// <summary>
        /// Create new instace of IfcActor and returns object of this class to interact with
        /// </summary>
        public static new IfcActor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcActor"); Debug.Assert(inst != 0); return inst; }


        public IfcActorSelect TheActor
            {
            get { return new IfcActorSelect(m_instance, "TheActor", 0); }
            }
        public SetOfIfcRelAssignsToActor IsActingUpon { get { return (new SetOfIfcRelAssignsToActorSerializer()).FromAttr(m_instance, "IsActingUpon"); } }

        protected override TextValue EntityName() { return "IfcActor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcActorRole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcActorRole : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcActorRole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcActorRole(SdaiInstance instance) : base(instance) { }
        public IfcActorRole() : base(0) { }

        public static implicit operator IfcActorRole(SdaiInstance instance) => new IfcActorRole(instance);

        /// <summary>
        /// Create new instace of IfcActorRole and returns object of this class to interact with
        /// </summary>
        public static new IfcActorRole Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcActorRole"); Debug.Assert(inst != 0); return inst; }

        public IfcRoleEnum? Role 
            { 
            get { var str = get_string("Role", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRoleEnum_); return EnumValue<IfcRoleEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRoleEnum>.FromValue(value.Value, EnumNames.IfcRoleEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Role", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedRole
            {
            get { return get_string("UserDefinedRole", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedRole", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcExternalReferenceRelationship HasExternalReference { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReference"); } }

        protected override TextValue EntityName() { return "IfcActorRole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProduct
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProduct : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProduct
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProduct(SdaiInstance instance) : base(instance) { }
        public IfcProduct() : base(0) { }

        public static implicit operator IfcProduct(SdaiInstance instance) => new IfcProduct(instance);

        public IfcObjectPlacement ObjectPlacement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ObjectPlacement", ifcengine.sdaiINSTANCE, out inst); return new IfcObjectPlacement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ObjectPlacement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcProductRepresentation Representation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Representation", ifcengine.sdaiINSTANCE, out inst); return new IfcProductRepresentation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Representation", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcRelAssignsToProduct ReferencedBy { get { return (new SetOfIfcRelAssignsToProductSerializer()).FromAttr(m_instance, "ReferencedBy"); } }
        public SetOfIfcRelPositions PositionedRelativeTo { get { return (new SetOfIfcRelPositionsSerializer()).FromAttr(m_instance, "PositionedRelativeTo"); } }
        public SetOfIfcRelReferencedInSpatialStructure ReferencedInStructures { get { return (new SetOfIfcRelReferencedInSpatialStructureSerializer()).FromAttr(m_instance, "ReferencedInStructures"); } }

        protected override TextValue EntityName() { return "IfcProduct"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElement : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElement(SdaiInstance instance) : base(instance) { }
        public IfcElement() : base(0) { }

        public static implicit operator IfcElement(SdaiInstance instance) => new IfcElement(instance);

        public TextValue Tag
            {
            get { return get_string("Tag", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Tag", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelFillsElement FillsVoids { get { return (new SetOfIfcRelFillsElementSerializer()).FromAttr(m_instance, "FillsVoids"); } }
        public SetOfIfcRelConnectsElements ConnectedTo { get { return (new SetOfIfcRelConnectsElementsSerializer()).FromAttr(m_instance, "ConnectedTo"); } }
        public SetOfIfcRelInterferesElements IsInterferedByElements { get { return (new SetOfIfcRelInterferesElementsSerializer()).FromAttr(m_instance, "IsInterferedByElements"); } }
        public SetOfIfcRelInterferesElements InterferesElements { get { return (new SetOfIfcRelInterferesElementsSerializer()).FromAttr(m_instance, "InterferesElements"); } }
        public SetOfIfcRelProjectsElement HasProjections { get { return (new SetOfIfcRelProjectsElementSerializer()).FromAttr(m_instance, "HasProjections"); } }
        public SetOfIfcRelVoidsElement HasOpenings { get { return (new SetOfIfcRelVoidsElementSerializer()).FromAttr(m_instance, "HasOpenings"); } }
        public SetOfIfcRelConnectsWithRealizingElements IsConnectionRealization { get { return (new SetOfIfcRelConnectsWithRealizingElementsSerializer()).FromAttr(m_instance, "IsConnectionRealization"); } }
        public SetOfIfcRelSpaceBoundary ProvidesBoundaries { get { return (new SetOfIfcRelSpaceBoundarySerializer()).FromAttr(m_instance, "ProvidesBoundaries"); } }
        public SetOfIfcRelConnectsElements ConnectedFrom { get { return (new SetOfIfcRelConnectsElementsSerializer()).FromAttr(m_instance, "ConnectedFrom"); } }
        public SetOfIfcRelContainedInSpatialStructure ContainedInStructure { get { return (new SetOfIfcRelContainedInSpatialStructureSerializer()).FromAttr(m_instance, "ContainedInStructure"); } }
        public SetOfIfcRelCoversBldgElements HasCoverings { get { return (new SetOfIfcRelCoversBldgElementsSerializer()).FromAttr(m_instance, "HasCoverings"); } }
        public SetOfIfcRelAdheresToElement HasSurfaceFeatures { get { return (new SetOfIfcRelAdheresToElementSerializer()).FromAttr(m_instance, "HasSurfaceFeatures"); } }

        protected override TextValue EntityName() { return "IfcElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionElement(SdaiInstance instance) : base(instance) { }
        public IfcDistributionElement() : base(0) { }

        public static implicit operator IfcDistributionElement(SdaiInstance instance) => new IfcDistributionElement(instance);

        /// <summary>
        /// Create new instace of IfcDistributionElement and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionElement"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcRelConnectsPortToElement HasPorts { get { return (new SetOfIfcRelConnectsPortToElementSerializer()).FromAttr(m_instance, "HasPorts"); } }

        protected override TextValue EntityName() { return "IfcDistributionElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionControlElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionControlElement : IfcDistributionElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionControlElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionControlElement(SdaiInstance instance) : base(instance) { }
        public IfcDistributionControlElement() : base(0) { }

        public static implicit operator IfcDistributionControlElement(SdaiInstance instance) => new IfcDistributionControlElement(instance);

        /// <summary>
        /// Create new instace of IfcDistributionControlElement and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionControlElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionControlElement"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcRelFlowControlElements AssignedToFlowElement { get { return (new SetOfIfcRelFlowControlElementsSerializer()).FromAttr(m_instance, "AssignedToFlowElement"); } }

        protected override TextValue EntityName() { return "IfcDistributionControlElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcActuator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcActuator : IfcDistributionControlElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcActuator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcActuator(SdaiInstance instance) : base(instance) { }
        public IfcActuator() : base(0) { }

        public static implicit operator IfcActuator(SdaiInstance instance) => new IfcActuator(instance);

        /// <summary>
        /// Create new instace of IfcActuator and returns object of this class to interact with
        /// </summary>
        public static new IfcActuator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcActuator"); Debug.Assert(inst != 0); return inst; }

        public IfcActuatorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcActuatorTypeEnum_); return EnumValue<IfcActuatorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcActuatorTypeEnum>.FromValue(value.Value, EnumNames.IfcActuatorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcActuator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTypeObject
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTypeObject : IfcObjectDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTypeObject
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTypeObject(SdaiInstance instance) : base(instance) { }
        public IfcTypeObject() : base(0) { }

        public static implicit operator IfcTypeObject(SdaiInstance instance) => new IfcTypeObject(instance);

        /// <summary>
        /// Create new instace of IfcTypeObject and returns object of this class to interact with
        /// </summary>
        public static new IfcTypeObject Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTypeObject"); Debug.Assert(inst != 0); return inst; }

        public TextValue ApplicableOccurrence
            {
            get { return get_string("ApplicableOccurrence", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ApplicableOccurrence", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcPropertySetDefinition HasPropertySets { get { return (new SetOfIfcPropertySetDefinitionSerializer()).FromAttr(m_instance, "HasPropertySets"); } }
        public void put_HasPropertySets(IEnumerable<IfcPropertySetDefinition> lst) { (new SetOfIfcPropertySetDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "HasPropertySets"); }
        public void put_HasPropertySets_untyped(IEnumerable lst) { (new SetOfIfcPropertySetDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "HasPropertySets"); }
        public SetOfIfcRelDefinesByType Types { get { return (new SetOfIfcRelDefinesByTypeSerializer()).FromAttr(m_instance, "Types"); } }

        protected override TextValue EntityName() { return "IfcTypeObject"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTypeProduct
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTypeProduct : IfcTypeObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTypeProduct
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTypeProduct(SdaiInstance instance) : base(instance) { }
        public IfcTypeProduct() : base(0) { }

        public static implicit operator IfcTypeProduct(SdaiInstance instance) => new IfcTypeProduct(instance);

        /// <summary>
        /// Create new instace of IfcTypeProduct and returns object of this class to interact with
        /// </summary>
        public static new IfcTypeProduct Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTypeProduct"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcRepresentationMap RepresentationMaps { get { return (new ListOfIfcRepresentationMapSerializer()).FromAttr(m_instance, "RepresentationMaps"); } }
        public void put_RepresentationMaps(IEnumerable<IfcRepresentationMap> lst) { (new ListOfIfcRepresentationMapSerializer()).ToSdaiAggr(lst, m_instance, "RepresentationMaps"); }
        public void put_RepresentationMaps_untyped(IEnumerable lst) { (new ListOfIfcRepresentationMapSerializer()).ToSdaiAggr(lst, m_instance, "RepresentationMaps"); }
        public TextValue Tag
            {
            get { return get_string("Tag", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Tag", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelAssignsToProduct ReferencedBy { get { return (new SetOfIfcRelAssignsToProductSerializer()).FromAttr(m_instance, "ReferencedBy"); } }

        protected override TextValue EntityName() { return "IfcTypeProduct"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementType : IfcTypeProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementType(SdaiInstance instance) : base(instance) { }
        public IfcElementType() : base(0) { }

        public static implicit operator IfcElementType(SdaiInstance instance) => new IfcElementType(instance);

        public TextValue ElementType
            {
            get { return get_string("ElementType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ElementType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionElementType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionElementType(SdaiInstance instance) : base(instance) { }
        public IfcDistributionElementType() : base(0) { }

        public static implicit operator IfcDistributionElementType(SdaiInstance instance) => new IfcDistributionElementType(instance);

        /// <summary>
        /// Create new instace of IfcDistributionElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionElementType"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcDistributionElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionControlElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionControlElementType : IfcDistributionElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionControlElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionControlElementType(SdaiInstance instance) : base(instance) { }
        public IfcDistributionControlElementType() : base(0) { }

        public static implicit operator IfcDistributionControlElementType(SdaiInstance instance) => new IfcDistributionControlElementType(instance);


        protected override TextValue EntityName() { return "IfcDistributionControlElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcActuatorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcActuatorType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcActuatorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcActuatorType(SdaiInstance instance) : base(instance) { }
        public IfcActuatorType() : base(0) { }

        public static implicit operator IfcActuatorType(SdaiInstance instance) => new IfcActuatorType(instance);

        /// <summary>
        /// Create new instace of IfcActuatorType and returns object of this class to interact with
        /// </summary>
        public static new IfcActuatorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcActuatorType"); Debug.Assert(inst != 0); return inst; }

        public IfcActuatorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcActuatorTypeEnum_); return EnumValue<IfcActuatorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcActuatorTypeEnum>.FromValue(value.Value, EnumNames.IfcActuatorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcActuatorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAddress
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAddress : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAddress
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAddress(SdaiInstance instance) : base(instance) { }
        public IfcAddress() : base(0) { }

        public static implicit operator IfcAddress(SdaiInstance instance) => new IfcAddress(instance);

        public IfcAddressTypeEnum? Purpose 
            { 
            get { var str = get_string("Purpose", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAddressTypeEnum_); return EnumValue<IfcAddressTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAddressTypeEnum>.FromValue(value.Value, EnumNames.IfcAddressTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Purpose", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue UserDefinedPurpose
            {
            get { return get_string("UserDefinedPurpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedPurpose", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcPerson OfPerson { get { return (new SetOfIfcPersonSerializer()).FromAttr(m_instance, "OfPerson"); } }
        public SetOfIfcOrganization OfOrganization { get { return (new SetOfIfcOrganizationSerializer()).FromAttr(m_instance, "OfOrganization"); } }

        protected override TextValue EntityName() { return "IfcAddress"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRepresentationItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRepresentationItem : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRepresentationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRepresentationItem(SdaiInstance instance) : base(instance) { }
        public IfcRepresentationItem() : base(0) { }

        public static implicit operator IfcRepresentationItem(SdaiInstance instance) => new IfcRepresentationItem(instance);

        public SetOfIfcPresentationLayerAssignment LayerAssignment { get { return (new SetOfIfcPresentationLayerAssignmentSerializer()).FromAttr(m_instance, "LayerAssignment"); } }
        public SetOfIfcStyledItem StyledByItem { get { return (new SetOfIfcStyledItemSerializer()).FromAttr(m_instance, "StyledByItem"); } }

        protected override TextValue EntityName() { return "IfcRepresentationItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeometricRepresentationItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeometricRepresentationItem : IfcRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeometricRepresentationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeometricRepresentationItem(SdaiInstance instance) : base(instance) { }
        public IfcGeometricRepresentationItem() : base(0) { }

        public static implicit operator IfcGeometricRepresentationItem(SdaiInstance instance) => new IfcGeometricRepresentationItem(instance);


        protected override TextValue EntityName() { return "IfcGeometricRepresentationItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSolidModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSolidModel : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSolidModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSolidModel(SdaiInstance instance) : base(instance) { }
        public IfcSolidModel() : base(0) { }

        public static implicit operator IfcSolidModel(SdaiInstance instance) => new IfcSolidModel(instance);


        protected override TextValue EntityName() { return "IfcSolidModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcManifoldSolidBrep
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcManifoldSolidBrep : IfcSolidModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcManifoldSolidBrep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcManifoldSolidBrep(SdaiInstance instance) : base(instance) { }
        public IfcManifoldSolidBrep() : base(0) { }

        public static implicit operator IfcManifoldSolidBrep(SdaiInstance instance) => new IfcManifoldSolidBrep(instance);

        public IfcClosedShell Outer 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Outer", ifcengine.sdaiINSTANCE, out inst); return new IfcClosedShell(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Outer", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcManifoldSolidBrep"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAdvancedBrep
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAdvancedBrep : IfcManifoldSolidBrep
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAdvancedBrep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAdvancedBrep(SdaiInstance instance) : base(instance) { }
        public IfcAdvancedBrep() : base(0) { }

        public static implicit operator IfcAdvancedBrep(SdaiInstance instance) => new IfcAdvancedBrep(instance);

        /// <summary>
        /// Create new instace of IfcAdvancedBrep and returns object of this class to interact with
        /// </summary>
        public static new IfcAdvancedBrep Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAdvancedBrep"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcAdvancedBrep"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAdvancedBrepWithVoids
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAdvancedBrepWithVoids : IfcAdvancedBrep
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAdvancedBrepWithVoids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAdvancedBrepWithVoids(SdaiInstance instance) : base(instance) { }
        public IfcAdvancedBrepWithVoids() : base(0) { }

        public static implicit operator IfcAdvancedBrepWithVoids(SdaiInstance instance) => new IfcAdvancedBrepWithVoids(instance);

        /// <summary>
        /// Create new instace of IfcAdvancedBrepWithVoids and returns object of this class to interact with
        /// </summary>
        public static new IfcAdvancedBrepWithVoids Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAdvancedBrepWithVoids"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcClosedShell Voids { get { return (new SetOfIfcClosedShellSerializer()).FromAttr(m_instance, "Voids"); } }
        public void put_Voids(IEnumerable<IfcClosedShell> lst) { (new SetOfIfcClosedShellSerializer()).ToSdaiAggr(lst, m_instance, "Voids"); }
        public void put_Voids_untyped(IEnumerable lst) { (new SetOfIfcClosedShellSerializer()).ToSdaiAggr(lst, m_instance, "Voids"); }

        protected override TextValue EntityName() { return "IfcAdvancedBrepWithVoids"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTopologicalRepresentationItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTopologicalRepresentationItem : IfcRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTopologicalRepresentationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTopologicalRepresentationItem(SdaiInstance instance) : base(instance) { }
        public IfcTopologicalRepresentationItem() : base(0) { }

        public static implicit operator IfcTopologicalRepresentationItem(SdaiInstance instance) => new IfcTopologicalRepresentationItem(instance);


        protected override TextValue EntityName() { return "IfcTopologicalRepresentationItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFace
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFace : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFace(SdaiInstance instance) : base(instance) { }
        public IfcFace() : base(0) { }

        public static implicit operator IfcFace(SdaiInstance instance) => new IfcFace(instance);

        /// <summary>
        /// Create new instace of IfcFace and returns object of this class to interact with
        /// </summary>
        public static new IfcFace Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFace"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcFaceBound Bounds { get { return (new SetOfIfcFaceBoundSerializer()).FromAttr(m_instance, "Bounds"); } }
        public void put_Bounds(IEnumerable<IfcFaceBound> lst) { (new SetOfIfcFaceBoundSerializer()).ToSdaiAggr(lst, m_instance, "Bounds"); }
        public void put_Bounds_untyped(IEnumerable lst) { (new SetOfIfcFaceBoundSerializer()).ToSdaiAggr(lst, m_instance, "Bounds"); }
        public SetOfIfcTextureMap HasTextureMaps { get { return (new SetOfIfcTextureMapSerializer()).FromAttr(m_instance, "HasTextureMaps"); } }

        protected override TextValue EntityName() { return "IfcFace"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFaceSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFaceSurface : IfcFace
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFaceSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFaceSurface(SdaiInstance instance) : base(instance) { }
        public IfcFaceSurface() : base(0) { }

        public static implicit operator IfcFaceSurface(SdaiInstance instance) => new IfcFaceSurface(instance);

        /// <summary>
        /// Create new instace of IfcFaceSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcFaceSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFaceSurface"); Debug.Assert(inst != 0); return inst; }

        public IfcSurface FaceSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "FaceSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "FaceSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? SameSense
            {
            get { return get_bool("SameSense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SameSense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFaceSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAdvancedFace
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAdvancedFace : IfcFaceSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAdvancedFace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAdvancedFace(SdaiInstance instance) : base(instance) { }
        public IfcAdvancedFace() : base(0) { }

        public static implicit operator IfcAdvancedFace(SdaiInstance instance) => new IfcAdvancedFace(instance);

        /// <summary>
        /// Create new instace of IfcAdvancedFace and returns object of this class to interact with
        /// </summary>
        public static new IfcAdvancedFace Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAdvancedFace"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcAdvancedFace"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionFlowElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionFlowElement : IfcDistributionElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionFlowElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionFlowElement(SdaiInstance instance) : base(instance) { }
        public IfcDistributionFlowElement() : base(0) { }

        public static implicit operator IfcDistributionFlowElement(SdaiInstance instance) => new IfcDistributionFlowElement(instance);

        /// <summary>
        /// Create new instace of IfcDistributionFlowElement and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionFlowElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionFlowElement"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcRelFlowControlElements HasControlElements { get { return (new SetOfIfcRelFlowControlElementsSerializer()).FromAttr(m_instance, "HasControlElements"); } }

        protected override TextValue EntityName() { return "IfcDistributionFlowElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowTerminal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowTerminal : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowTerminal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowTerminal(SdaiInstance instance) : base(instance) { }
        public IfcFlowTerminal() : base(0) { }

        public static implicit operator IfcFlowTerminal(SdaiInstance instance) => new IfcFlowTerminal(instance);

        /// <summary>
        /// Create new instace of IfcFlowTerminal and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowTerminal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowTerminal"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFlowTerminal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAirTerminal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAirTerminal : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAirTerminal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAirTerminal(SdaiInstance instance) : base(instance) { }
        public IfcAirTerminal() : base(0) { }

        public static implicit operator IfcAirTerminal(SdaiInstance instance) => new IfcAirTerminal(instance);

        /// <summary>
        /// Create new instace of IfcAirTerminal and returns object of this class to interact with
        /// </summary>
        public static new IfcAirTerminal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAirTerminal"); Debug.Assert(inst != 0); return inst; }

        public IfcAirTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAirTerminalTypeEnum_); return EnumValue<IfcAirTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAirTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcAirTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAirTerminal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowController
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowController : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowController
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowController(SdaiInstance instance) : base(instance) { }
        public IfcFlowController() : base(0) { }

        public static implicit operator IfcFlowController(SdaiInstance instance) => new IfcFlowController(instance);

        /// <summary>
        /// Create new instace of IfcFlowController and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowController Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowController"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFlowController"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAirTerminalBox
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAirTerminalBox : IfcFlowController
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAirTerminalBox
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAirTerminalBox(SdaiInstance instance) : base(instance) { }
        public IfcAirTerminalBox() : base(0) { }

        public static implicit operator IfcAirTerminalBox(SdaiInstance instance) => new IfcAirTerminalBox(instance);

        /// <summary>
        /// Create new instace of IfcAirTerminalBox and returns object of this class to interact with
        /// </summary>
        public static new IfcAirTerminalBox Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAirTerminalBox"); Debug.Assert(inst != 0); return inst; }

        public IfcAirTerminalBoxTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAirTerminalBoxTypeEnum_); return EnumValue<IfcAirTerminalBoxTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAirTerminalBoxTypeEnum>.FromValue(value.Value, EnumNames.IfcAirTerminalBoxTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAirTerminalBox"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionFlowElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionFlowElementType : IfcDistributionElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionFlowElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionFlowElementType(SdaiInstance instance) : base(instance) { }
        public IfcDistributionFlowElementType() : base(0) { }

        public static implicit operator IfcDistributionFlowElementType(SdaiInstance instance) => new IfcDistributionFlowElementType(instance);


        protected override TextValue EntityName() { return "IfcDistributionFlowElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowControllerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowControllerType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowControllerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowControllerType(SdaiInstance instance) : base(instance) { }
        public IfcFlowControllerType() : base(0) { }

        public static implicit operator IfcFlowControllerType(SdaiInstance instance) => new IfcFlowControllerType(instance);


        protected override TextValue EntityName() { return "IfcFlowControllerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAirTerminalBoxType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAirTerminalBoxType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAirTerminalBoxType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAirTerminalBoxType(SdaiInstance instance) : base(instance) { }
        public IfcAirTerminalBoxType() : base(0) { }

        public static implicit operator IfcAirTerminalBoxType(SdaiInstance instance) => new IfcAirTerminalBoxType(instance);

        /// <summary>
        /// Create new instace of IfcAirTerminalBoxType and returns object of this class to interact with
        /// </summary>
        public static new IfcAirTerminalBoxType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAirTerminalBoxType"); Debug.Assert(inst != 0); return inst; }

        public IfcAirTerminalBoxTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAirTerminalBoxTypeEnum_); return EnumValue<IfcAirTerminalBoxTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAirTerminalBoxTypeEnum>.FromValue(value.Value, EnumNames.IfcAirTerminalBoxTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAirTerminalBoxType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowTerminalType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcFlowTerminalType() : base(0) { }

        public static implicit operator IfcFlowTerminalType(SdaiInstance instance) => new IfcFlowTerminalType(instance);


        protected override TextValue EntityName() { return "IfcFlowTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAirTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAirTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAirTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAirTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcAirTerminalType() : base(0) { }

        public static implicit operator IfcAirTerminalType(SdaiInstance instance) => new IfcAirTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcAirTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcAirTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAirTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcAirTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAirTerminalTypeEnum_); return EnumValue<IfcAirTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAirTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcAirTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAirTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEnergyConversionDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEnergyConversionDevice : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEnergyConversionDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEnergyConversionDevice(SdaiInstance instance) : base(instance) { }
        public IfcEnergyConversionDevice() : base(0) { }

        public static implicit operator IfcEnergyConversionDevice(SdaiInstance instance) => new IfcEnergyConversionDevice(instance);

        /// <summary>
        /// Create new instace of IfcEnergyConversionDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcEnergyConversionDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEnergyConversionDevice"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcEnergyConversionDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAirToAirHeatRecovery
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAirToAirHeatRecovery : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAirToAirHeatRecovery
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAirToAirHeatRecovery(SdaiInstance instance) : base(instance) { }
        public IfcAirToAirHeatRecovery() : base(0) { }

        public static implicit operator IfcAirToAirHeatRecovery(SdaiInstance instance) => new IfcAirToAirHeatRecovery(instance);

        /// <summary>
        /// Create new instace of IfcAirToAirHeatRecovery and returns object of this class to interact with
        /// </summary>
        public static new IfcAirToAirHeatRecovery Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAirToAirHeatRecovery"); Debug.Assert(inst != 0); return inst; }

        public IfcAirToAirHeatRecoveryTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAirToAirHeatRecoveryTypeEnum_); return EnumValue<IfcAirToAirHeatRecoveryTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAirToAirHeatRecoveryTypeEnum>.FromValue(value.Value, EnumNames.IfcAirToAirHeatRecoveryTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAirToAirHeatRecovery"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEnergyConversionDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEnergyConversionDeviceType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEnergyConversionDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEnergyConversionDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcEnergyConversionDeviceType() : base(0) { }

        public static implicit operator IfcEnergyConversionDeviceType(SdaiInstance instance) => new IfcEnergyConversionDeviceType(instance);


        protected override TextValue EntityName() { return "IfcEnergyConversionDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAirToAirHeatRecoveryType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAirToAirHeatRecoveryType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAirToAirHeatRecoveryType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAirToAirHeatRecoveryType(SdaiInstance instance) : base(instance) { }
        public IfcAirToAirHeatRecoveryType() : base(0) { }

        public static implicit operator IfcAirToAirHeatRecoveryType(SdaiInstance instance) => new IfcAirToAirHeatRecoveryType(instance);

        /// <summary>
        /// Create new instace of IfcAirToAirHeatRecoveryType and returns object of this class to interact with
        /// </summary>
        public static new IfcAirToAirHeatRecoveryType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAirToAirHeatRecoveryType"); Debug.Assert(inst != 0); return inst; }

        public IfcAirToAirHeatRecoveryTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAirToAirHeatRecoveryTypeEnum_); return EnumValue<IfcAirToAirHeatRecoveryTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAirToAirHeatRecoveryTypeEnum>.FromValue(value.Value, EnumNames.IfcAirToAirHeatRecoveryTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAirToAirHeatRecoveryType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlarm
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlarm : IfcDistributionControlElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlarm
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlarm(SdaiInstance instance) : base(instance) { }
        public IfcAlarm() : base(0) { }

        public static implicit operator IfcAlarm(SdaiInstance instance) => new IfcAlarm(instance);

        /// <summary>
        /// Create new instace of IfcAlarm and returns object of this class to interact with
        /// </summary>
        public static new IfcAlarm Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAlarm"); Debug.Assert(inst != 0); return inst; }

        public IfcAlarmTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAlarmTypeEnum_); return EnumValue<IfcAlarmTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAlarmTypeEnum>.FromValue(value.Value, EnumNames.IfcAlarmTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAlarm"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlarmType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlarmType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlarmType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlarmType(SdaiInstance instance) : base(instance) { }
        public IfcAlarmType() : base(0) { }

        public static implicit operator IfcAlarmType(SdaiInstance instance) => new IfcAlarmType(instance);

        /// <summary>
        /// Create new instace of IfcAlarmType and returns object of this class to interact with
        /// </summary>
        public static new IfcAlarmType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAlarmType"); Debug.Assert(inst != 0); return inst; }

        public IfcAlarmTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAlarmTypeEnum_); return EnumValue<IfcAlarmTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAlarmTypeEnum>.FromValue(value.Value, EnumNames.IfcAlarmTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAlarmType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPositioningElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPositioningElement : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPositioningElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPositioningElement(SdaiInstance instance) : base(instance) { }
        public IfcPositioningElement() : base(0) { }

        public static implicit operator IfcPositioningElement(SdaiInstance instance) => new IfcPositioningElement(instance);

        public SetOfIfcRelContainedInSpatialStructure ContainedInStructure { get { return (new SetOfIfcRelContainedInSpatialStructureSerializer()).FromAttr(m_instance, "ContainedInStructure"); } }
        public SetOfIfcRelPositions Positions { get { return (new SetOfIfcRelPositionsSerializer()).FromAttr(m_instance, "Positions"); } }

        protected override TextValue EntityName() { return "IfcPositioningElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLinearPositioningElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLinearPositioningElement : IfcPositioningElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLinearPositioningElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLinearPositioningElement(SdaiInstance instance) : base(instance) { }
        public IfcLinearPositioningElement() : base(0) { }

        public static implicit operator IfcLinearPositioningElement(SdaiInstance instance) => new IfcLinearPositioningElement(instance);

        /// <summary>
        /// Create new instace of IfcLinearPositioningElement and returns object of this class to interact with
        /// </summary>
        public static new IfcLinearPositioningElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLinearPositioningElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcLinearPositioningElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlignment : IfcLinearPositioningElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlignment(SdaiInstance instance) : base(instance) { }
        public IfcAlignment() : base(0) { }

        public static implicit operator IfcAlignment(SdaiInstance instance) => new IfcAlignment(instance);

        /// <summary>
        /// Create new instace of IfcAlignment and returns object of this class to interact with
        /// </summary>
        public static new IfcAlignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAlignment"); Debug.Assert(inst != 0); return inst; }

        public IfcAlignmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAlignmentTypeEnum_); return EnumValue<IfcAlignmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAlignmentTypeEnum>.FromValue(value.Value, EnumNames.IfcAlignmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAlignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLinearElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLinearElement : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLinearElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLinearElement(SdaiInstance instance) : base(instance) { }
        public IfcLinearElement() : base(0) { }

        public static implicit operator IfcLinearElement(SdaiInstance instance) => new IfcLinearElement(instance);

        /// <summary>
        /// Create new instace of IfcLinearElement and returns object of this class to interact with
        /// </summary>
        public static new IfcLinearElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLinearElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcLinearElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlignmentCant
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlignmentCant : IfcLinearElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlignmentCant
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlignmentCant(SdaiInstance instance) : base(instance) { }
        public IfcAlignmentCant() : base(0) { }

        public static implicit operator IfcAlignmentCant(SdaiInstance instance) => new IfcAlignmentCant(instance);

        /// <summary>
        /// Create new instace of IfcAlignmentCant and returns object of this class to interact with
        /// </summary>
        public static new IfcAlignmentCant Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAlignmentCant"); Debug.Assert(inst != 0); return inst; }

        public double? RailHeadDistance
            {
            get { return get_double("RailHeadDistance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RailHeadDistance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAlignmentCant"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlignmentParameterSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlignmentParameterSegment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlignmentParameterSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlignmentParameterSegment(SdaiInstance instance) : base(instance) { }
        public IfcAlignmentParameterSegment() : base(0) { }

        public static implicit operator IfcAlignmentParameterSegment(SdaiInstance instance) => new IfcAlignmentParameterSegment(instance);

        public TextValue StartTag
            {
            get { return get_string("StartTag", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "StartTag", ifcengine.sdaiSTRING, value); }
            }
        public TextValue EndTag
            {
            get { return get_string("EndTag", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "EndTag", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcAlignmentParameterSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlignmentCantSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlignmentCantSegment : IfcAlignmentParameterSegment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlignmentCantSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlignmentCantSegment(SdaiInstance instance) : base(instance) { }
        public IfcAlignmentCantSegment() : base(0) { }

        public static implicit operator IfcAlignmentCantSegment(SdaiInstance instance) => new IfcAlignmentCantSegment(instance);

        /// <summary>
        /// Create new instace of IfcAlignmentCantSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcAlignmentCantSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAlignmentCantSegment"); Debug.Assert(inst != 0); return inst; }

        public double? StartDistAlong
            {
            get { return get_double("StartDistAlong", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartDistAlong", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? HorizontalLength
            {
            get { return get_double("HorizontalLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HorizontalLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? StartCantLeft
            {
            get { return get_double("StartCantLeft", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartCantLeft", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EndCantLeft
            {
            get { return get_double("EndCantLeft", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EndCantLeft", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? StartCantRight
            {
            get { return get_double("StartCantRight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartCantRight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EndCantRight
            {
            get { return get_double("EndCantRight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EndCantRight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcAlignmentCantSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAlignmentCantSegmentTypeEnum_); return EnumValue<IfcAlignmentCantSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAlignmentCantSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcAlignmentCantSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAlignmentCantSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlignmentHorizontal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlignmentHorizontal : IfcLinearElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlignmentHorizontal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlignmentHorizontal(SdaiInstance instance) : base(instance) { }
        public IfcAlignmentHorizontal() : base(0) { }

        public static implicit operator IfcAlignmentHorizontal(SdaiInstance instance) => new IfcAlignmentHorizontal(instance);

        /// <summary>
        /// Create new instace of IfcAlignmentHorizontal and returns object of this class to interact with
        /// </summary>
        public static new IfcAlignmentHorizontal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAlignmentHorizontal"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcAlignmentHorizontal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlignmentHorizontalSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlignmentHorizontalSegment : IfcAlignmentParameterSegment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlignmentHorizontalSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlignmentHorizontalSegment(SdaiInstance instance) : base(instance) { }
        public IfcAlignmentHorizontalSegment() : base(0) { }

        public static implicit operator IfcAlignmentHorizontalSegment(SdaiInstance instance) => new IfcAlignmentHorizontalSegment(instance);

        /// <summary>
        /// Create new instace of IfcAlignmentHorizontalSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcAlignmentHorizontalSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAlignmentHorizontalSegment"); Debug.Assert(inst != 0); return inst; }

        public IfcCartesianPoint StartPoint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "StartPoint", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "StartPoint", ifcengine.sdaiINSTANCE, i); }
            }
        public double? StartDirection
            {
            get { return get_double("StartDirection", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartDirection", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? StartRadiusOfCurvature
            {
            get { return get_double("StartRadiusOfCurvature", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartRadiusOfCurvature", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EndRadiusOfCurvature
            {
            get { return get_double("EndRadiusOfCurvature", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EndRadiusOfCurvature", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SegmentLength
            {
            get { return get_double("SegmentLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SegmentLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? GravityCenterLineHeight
            {
            get { return get_double("GravityCenterLineHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "GravityCenterLineHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcAlignmentHorizontalSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAlignmentHorizontalSegmentTypeEnum_); return EnumValue<IfcAlignmentHorizontalSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAlignmentHorizontalSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcAlignmentHorizontalSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAlignmentHorizontalSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlignmentSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlignmentSegment : IfcLinearElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlignmentSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlignmentSegment(SdaiInstance instance) : base(instance) { }
        public IfcAlignmentSegment() : base(0) { }

        public static implicit operator IfcAlignmentSegment(SdaiInstance instance) => new IfcAlignmentSegment(instance);

        /// <summary>
        /// Create new instace of IfcAlignmentSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcAlignmentSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAlignmentSegment"); Debug.Assert(inst != 0); return inst; }

        public IfcAlignmentParameterSegment DesignParameters 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DesignParameters", ifcengine.sdaiINSTANCE, out inst); return new IfcAlignmentParameterSegment(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DesignParameters", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcAlignmentSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlignmentVertical
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlignmentVertical : IfcLinearElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlignmentVertical
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlignmentVertical(SdaiInstance instance) : base(instance) { }
        public IfcAlignmentVertical() : base(0) { }

        public static implicit operator IfcAlignmentVertical(SdaiInstance instance) => new IfcAlignmentVertical(instance);

        /// <summary>
        /// Create new instace of IfcAlignmentVertical and returns object of this class to interact with
        /// </summary>
        public static new IfcAlignmentVertical Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAlignmentVertical"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcAlignmentVertical"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAlignmentVerticalSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAlignmentVerticalSegment : IfcAlignmentParameterSegment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAlignmentVerticalSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAlignmentVerticalSegment(SdaiInstance instance) : base(instance) { }
        public IfcAlignmentVerticalSegment() : base(0) { }

        public static implicit operator IfcAlignmentVerticalSegment(SdaiInstance instance) => new IfcAlignmentVerticalSegment(instance);

        /// <summary>
        /// Create new instace of IfcAlignmentVerticalSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcAlignmentVerticalSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAlignmentVerticalSegment"); Debug.Assert(inst != 0); return inst; }

        public double? StartDistAlong
            {
            get { return get_double("StartDistAlong", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartDistAlong", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? HorizontalLength
            {
            get { return get_double("HorizontalLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HorizontalLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? StartHeight
            {
            get { return get_double("StartHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? StartGradient
            {
            get { return get_double("StartGradient", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartGradient", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EndGradient
            {
            get { return get_double("EndGradient", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EndGradient", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RadiusOfCurvature
            {
            get { return get_double("RadiusOfCurvature", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RadiusOfCurvature", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcAlignmentVerticalSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAlignmentVerticalSegmentTypeEnum_); return EnumValue<IfcAlignmentVerticalSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAlignmentVerticalSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcAlignmentVerticalSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAlignmentVerticalSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAnnotation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAnnotation : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAnnotation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAnnotation(SdaiInstance instance) : base(instance) { }
        public IfcAnnotation() : base(0) { }

        public static implicit operator IfcAnnotation(SdaiInstance instance) => new IfcAnnotation(instance);

        /// <summary>
        /// Create new instace of IfcAnnotation and returns object of this class to interact with
        /// </summary>
        public static new IfcAnnotation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAnnotation"); Debug.Assert(inst != 0); return inst; }

        public IfcAnnotationTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAnnotationTypeEnum_); return EnumValue<IfcAnnotationTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAnnotationTypeEnum>.FromValue(value.Value, EnumNames.IfcAnnotationTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcRelContainedInSpatialStructure ContainedInStructure { get { return (new SetOfIfcRelContainedInSpatialStructureSerializer()).FromAttr(m_instance, "ContainedInStructure"); } }

        protected override TextValue EntityName() { return "IfcAnnotation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAnnotationFillArea
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAnnotationFillArea : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAnnotationFillArea
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAnnotationFillArea(SdaiInstance instance) : base(instance) { }
        public IfcAnnotationFillArea() : base(0) { }

        public static implicit operator IfcAnnotationFillArea(SdaiInstance instance) => new IfcAnnotationFillArea(instance);

        /// <summary>
        /// Create new instace of IfcAnnotationFillArea and returns object of this class to interact with
        /// </summary>
        public static new IfcAnnotationFillArea Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAnnotationFillArea"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve OuterBoundary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OuterBoundary", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OuterBoundary", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcCurve InnerBoundaries { get { return (new SetOfIfcCurveSerializer()).FromAttr(m_instance, "InnerBoundaries"); } }
        public void put_InnerBoundaries(IEnumerable<IfcCurve> lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerBoundaries"); }
        public void put_InnerBoundaries_untyped(IEnumerable lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerBoundaries"); }

        protected override TextValue EntityName() { return "IfcAnnotationFillArea"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcApplication
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcApplication : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcApplication
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcApplication(SdaiInstance instance) : base(instance) { }
        public IfcApplication() : base(0) { }

        public static implicit operator IfcApplication(SdaiInstance instance) => new IfcApplication(instance);

        /// <summary>
        /// Create new instace of IfcApplication and returns object of this class to interact with
        /// </summary>
        public static new IfcApplication Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcApplication"); Debug.Assert(inst != 0); return inst; }

        public IfcOrganization ApplicationDeveloper 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ApplicationDeveloper", ifcengine.sdaiINSTANCE, out inst); return new IfcOrganization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ApplicationDeveloper", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue Version
            {
            get { return get_string("Version", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Version", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ApplicationFullName
            {
            get { return get_string("ApplicationFullName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ApplicationFullName", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ApplicationIdentifier
            {
            get { return get_string("ApplicationIdentifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ApplicationIdentifier", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcApplication"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAppliedValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAppliedValue : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAppliedValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAppliedValue(SdaiInstance instance) : base(instance) { }
        public IfcAppliedValue() : base(0) { }

        public static implicit operator IfcAppliedValue(SdaiInstance instance) => new IfcAppliedValue(instance);

        /// <summary>
        /// Create new instace of IfcAppliedValue and returns object of this class to interact with
        /// </summary>
        public static new IfcAppliedValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAppliedValue"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        public IfcAppliedValueSelect AppliedValue
            {
            get { return new IfcAppliedValueSelect(m_instance, "AppliedValue", 0); }
            }
        public IfcMeasureWithUnit UnitBasis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "UnitBasis", ifcengine.sdaiINSTANCE, out inst); return new IfcMeasureWithUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "UnitBasis", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue ApplicableDate
            {
            get { return get_string("ApplicableDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ApplicableDate", ifcengine.sdaiSTRING, value); }
            }
        public TextValue FixedUntilDate
            {
            get { return get_string("FixedUntilDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FixedUntilDate", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Category
            {
            get { return get_string("Category", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Category", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Condition
            {
            get { return get_string("Condition", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Condition", ifcengine.sdaiSTRING, value); }
            }
        public IfcArithmeticOperatorEnum? ArithmeticOperator 
            { 
            get { var str = get_string("ArithmeticOperator", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcArithmeticOperatorEnum_); return EnumValue<IfcArithmeticOperatorEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcArithmeticOperatorEnum>.FromValue(value.Value, EnumNames.IfcArithmeticOperatorEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ArithmeticOperator", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public ListOfIfcAppliedValue Components { get { return (new ListOfIfcAppliedValueSerializer()).FromAttr(m_instance, "Components"); } }
        public void put_Components(IEnumerable<IfcAppliedValue> lst) { (new ListOfIfcAppliedValueSerializer()).ToSdaiAggr(lst, m_instance, "Components"); }
        public void put_Components_untyped(IEnumerable lst) { (new ListOfIfcAppliedValueSerializer()).ToSdaiAggr(lst, m_instance, "Components"); }
        public SetOfIfcExternalReferenceRelationship HasExternalReference { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReference"); } }

        protected override TextValue EntityName() { return "IfcAppliedValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcApproval
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcApproval : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcApproval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcApproval(SdaiInstance instance) : base(instance) { }
        public IfcApproval() : base(0) { }

        public static implicit operator IfcApproval(SdaiInstance instance) => new IfcApproval(instance);

        /// <summary>
        /// Create new instace of IfcApproval and returns object of this class to interact with
        /// </summary>
        public static new IfcApproval Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcApproval"); Debug.Assert(inst != 0); return inst; }

        public TextValue Identifier
            {
            get { return get_string("Identifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue TimeOfApproval
            {
            get { return get_string("TimeOfApproval", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TimeOfApproval", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Status
            {
            get { return get_string("Status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Status", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Level
            {
            get { return get_string("Level", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Level", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Qualifier
            {
            get { return get_string("Qualifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Qualifier", ifcengine.sdaiSTRING, value); }
            }

        public IfcActorSelect RequestingApproval
            {
            get { return new IfcActorSelect(m_instance, "RequestingApproval", 0); }
            }

        public IfcActorSelect GivingApproval
            {
            get { return new IfcActorSelect(m_instance, "GivingApproval", 0); }
            }
        public SetOfIfcExternalReferenceRelationship HasExternalReferences { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReferences"); } }
        public SetOfIfcRelAssociatesApproval ApprovedObjects { get { return (new SetOfIfcRelAssociatesApprovalSerializer()).FromAttr(m_instance, "ApprovedObjects"); } }
        public SetOfIfcResourceApprovalRelationship ApprovedResources { get { return (new SetOfIfcResourceApprovalRelationshipSerializer()).FromAttr(m_instance, "ApprovedResources"); } }
        public SetOfIfcApprovalRelationship IsRelatedWith { get { return (new SetOfIfcApprovalRelationshipSerializer()).FromAttr(m_instance, "IsRelatedWith"); } }
        public SetOfIfcApprovalRelationship Relates { get { return (new SetOfIfcApprovalRelationshipSerializer()).FromAttr(m_instance, "Relates"); } }

        protected override TextValue EntityName() { return "IfcApproval"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcResourceLevelRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcResourceLevelRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcResourceLevelRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcResourceLevelRelationship(SdaiInstance instance) : base(instance) { }
        public IfcResourceLevelRelationship() : base(0) { }

        public static implicit operator IfcResourceLevelRelationship(SdaiInstance instance) => new IfcResourceLevelRelationship(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcResourceLevelRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcApprovalRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcApprovalRelationship : IfcResourceLevelRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcApprovalRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcApprovalRelationship(SdaiInstance instance) : base(instance) { }
        public IfcApprovalRelationship() : base(0) { }

        public static implicit operator IfcApprovalRelationship(SdaiInstance instance) => new IfcApprovalRelationship(instance);

        /// <summary>
        /// Create new instace of IfcApprovalRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcApprovalRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcApprovalRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcApproval RelatingApproval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingApproval", ifcengine.sdaiINSTANCE, out inst); return new IfcApproval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingApproval", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcApproval RelatedApprovals { get { return (new SetOfIfcApprovalSerializer()).FromAttr(m_instance, "RelatedApprovals"); } }
        public void put_RelatedApprovals(IEnumerable<IfcApproval> lst) { (new SetOfIfcApprovalSerializer()).ToSdaiAggr(lst, m_instance, "RelatedApprovals"); }
        public void put_RelatedApprovals_untyped(IEnumerable lst) { (new SetOfIfcApprovalSerializer()).ToSdaiAggr(lst, m_instance, "RelatedApprovals"); }

        protected override TextValue EntityName() { return "IfcApprovalRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProfileDef : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcProfileDef() : base(0) { }

        public static implicit operator IfcProfileDef(SdaiInstance instance) => new IfcProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProfileDef"); Debug.Assert(inst != 0); return inst; }

        public IfcProfileTypeEnum? ProfileType 
            { 
            get { var str = get_string("ProfileType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProfileTypeEnum_); return EnumValue<IfcProfileTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProfileTypeEnum>.FromValue(value.Value, EnumNames.IfcProfileTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ProfileType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue ProfileName
            {
            get { return get_string("ProfileName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ProfileName", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcExternalReferenceRelationship HasExternalReference { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReference"); } }
        public SetOfIfcProfileProperties HasProperties { get { return (new SetOfIfcProfilePropertiesSerializer()).FromAttr(m_instance, "HasProperties"); } }

        protected override TextValue EntityName() { return "IfcProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcArbitraryClosedProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcArbitraryClosedProfileDef : IfcProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcArbitraryClosedProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcArbitraryClosedProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcArbitraryClosedProfileDef() : base(0) { }

        public static implicit operator IfcArbitraryClosedProfileDef(SdaiInstance instance) => new IfcArbitraryClosedProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcArbitraryClosedProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcArbitraryClosedProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcArbitraryClosedProfileDef"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve OuterCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OuterCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OuterCurve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcArbitraryClosedProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcArbitraryOpenProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcArbitraryOpenProfileDef : IfcProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcArbitraryOpenProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcArbitraryOpenProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcArbitraryOpenProfileDef() : base(0) { }

        public static implicit operator IfcArbitraryOpenProfileDef(SdaiInstance instance) => new IfcArbitraryOpenProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcArbitraryOpenProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcArbitraryOpenProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcArbitraryOpenProfileDef"); Debug.Assert(inst != 0); return inst; }

        public IfcBoundedCurve Curve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Curve", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundedCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Curve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcArbitraryOpenProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcArbitraryProfileDefWithVoids
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcArbitraryProfileDefWithVoids : IfcArbitraryClosedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcArbitraryProfileDefWithVoids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcArbitraryProfileDefWithVoids(SdaiInstance instance) : base(instance) { }
        public IfcArbitraryProfileDefWithVoids() : base(0) { }

        public static implicit operator IfcArbitraryProfileDefWithVoids(SdaiInstance instance) => new IfcArbitraryProfileDefWithVoids(instance);

        /// <summary>
        /// Create new instace of IfcArbitraryProfileDefWithVoids and returns object of this class to interact with
        /// </summary>
        public static new IfcArbitraryProfileDefWithVoids Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcArbitraryProfileDefWithVoids"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcCurve InnerCurves { get { return (new SetOfIfcCurveSerializer()).FromAttr(m_instance, "InnerCurves"); } }
        public void put_InnerCurves(IEnumerable<IfcCurve> lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerCurves"); }
        public void put_InnerCurves_untyped(IEnumerable lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerCurves"); }

        protected override TextValue EntityName() { return "IfcArbitraryProfileDefWithVoids"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGroup
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGroup : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGroup(SdaiInstance instance) : base(instance) { }
        public IfcGroup() : base(0) { }

        public static implicit operator IfcGroup(SdaiInstance instance) => new IfcGroup(instance);

        /// <summary>
        /// Create new instace of IfcGroup and returns object of this class to interact with
        /// </summary>
        public static new IfcGroup Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGroup"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcRelAssignsToGroup IsGroupedBy { get { return (new SetOfIfcRelAssignsToGroupSerializer()).FromAttr(m_instance, "IsGroupedBy"); } }
        public SetOfIfcRelReferencedInSpatialStructure ReferencedInStructures { get { return (new SetOfIfcRelReferencedInSpatialStructureSerializer()).FromAttr(m_instance, "ReferencedInStructures"); } }

        protected override TextValue EntityName() { return "IfcGroup"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAsset
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAsset : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAsset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAsset(SdaiInstance instance) : base(instance) { }
        public IfcAsset() : base(0) { }

        public static implicit operator IfcAsset(SdaiInstance instance) => new IfcAsset(instance);

        /// <summary>
        /// Create new instace of IfcAsset and returns object of this class to interact with
        /// </summary>
        public static new IfcAsset Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAsset"); Debug.Assert(inst != 0); return inst; }

        public TextValue Identification
            {
            get { return get_string("Identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identification", ifcengine.sdaiSTRING, value); }
            }
        public IfcCostValue OriginalValue 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OriginalValue", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OriginalValue", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCostValue CurrentValue 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "CurrentValue", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "CurrentValue", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCostValue TotalReplacementCost 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TotalReplacementCost", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TotalReplacementCost", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcActorSelect Owner
            {
            get { return new IfcActorSelect(m_instance, "Owner", 0); }
            }

        public IfcActorSelect User
            {
            get { return new IfcActorSelect(m_instance, "User", 0); }
            }
        public IfcPerson ResponsiblePerson 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ResponsiblePerson", ifcengine.sdaiINSTANCE, out inst); return new IfcPerson(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ResponsiblePerson", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue IncorporationDate
            {
            get { return get_string("IncorporationDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "IncorporationDate", ifcengine.sdaiSTRING, value); }
            }
        public IfcCostValue DepreciatedValue 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DepreciatedValue", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DepreciatedValue", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcAsset"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcParameterizedProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcParameterizedProfileDef : IfcProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcParameterizedProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcParameterizedProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcParameterizedProfileDef() : base(0) { }

        public static implicit operator IfcParameterizedProfileDef(SdaiInstance instance) => new IfcParameterizedProfileDef(instance);

        public IfcAxis2Placement2D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement2D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcParameterizedProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAsymmetricIShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAsymmetricIShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAsymmetricIShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAsymmetricIShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcAsymmetricIShapeProfileDef() : base(0) { }

        public static implicit operator IfcAsymmetricIShapeProfileDef(SdaiInstance instance) => new IfcAsymmetricIShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcAsymmetricIShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcAsymmetricIShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAsymmetricIShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? BottomFlangeWidth
            {
            get { return get_double("BottomFlangeWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BottomFlangeWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OverallDepth
            {
            get { return get_double("OverallDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebThickness
            {
            get { return get_double("WebThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BottomFlangeThickness
            {
            get { return get_double("BottomFlangeThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BottomFlangeThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BottomFlangeFilletRadius
            {
            get { return get_double("BottomFlangeFilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BottomFlangeFilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TopFlangeWidth
            {
            get { return get_double("TopFlangeWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopFlangeWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TopFlangeThickness
            {
            get { return get_double("TopFlangeThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopFlangeThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TopFlangeFilletRadius
            {
            get { return get_double("TopFlangeFilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopFlangeFilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BottomFlangeEdgeRadius
            {
            get { return get_double("BottomFlangeEdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BottomFlangeEdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BottomFlangeSlope
            {
            get { return get_double("BottomFlangeSlope", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BottomFlangeSlope", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TopFlangeEdgeRadius
            {
            get { return get_double("TopFlangeEdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopFlangeEdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TopFlangeSlope
            {
            get { return get_double("TopFlangeSlope", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopFlangeSlope", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAsymmetricIShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAudioVisualAppliance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAudioVisualAppliance : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAudioVisualAppliance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAudioVisualAppliance(SdaiInstance instance) : base(instance) { }
        public IfcAudioVisualAppliance() : base(0) { }

        public static implicit operator IfcAudioVisualAppliance(SdaiInstance instance) => new IfcAudioVisualAppliance(instance);

        /// <summary>
        /// Create new instace of IfcAudioVisualAppliance and returns object of this class to interact with
        /// </summary>
        public static new IfcAudioVisualAppliance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAudioVisualAppliance"); Debug.Assert(inst != 0); return inst; }

        public IfcAudioVisualApplianceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAudioVisualApplianceTypeEnum_); return EnumValue<IfcAudioVisualApplianceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAudioVisualApplianceTypeEnum>.FromValue(value.Value, EnumNames.IfcAudioVisualApplianceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAudioVisualAppliance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAudioVisualApplianceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAudioVisualApplianceType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAudioVisualApplianceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAudioVisualApplianceType(SdaiInstance instance) : base(instance) { }
        public IfcAudioVisualApplianceType() : base(0) { }

        public static implicit operator IfcAudioVisualApplianceType(SdaiInstance instance) => new IfcAudioVisualApplianceType(instance);

        /// <summary>
        /// Create new instace of IfcAudioVisualApplianceType and returns object of this class to interact with
        /// </summary>
        public static new IfcAudioVisualApplianceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAudioVisualApplianceType"); Debug.Assert(inst != 0); return inst; }

        public IfcAudioVisualApplianceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAudioVisualApplianceTypeEnum_); return EnumValue<IfcAudioVisualApplianceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAudioVisualApplianceTypeEnum>.FromValue(value.Value, EnumNames.IfcAudioVisualApplianceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcAudioVisualApplianceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlacement : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlacement(SdaiInstance instance) : base(instance) { }
        public IfcPlacement() : base(0) { }

        public static implicit operator IfcPlacement(SdaiInstance instance) => new IfcPlacement(instance);

        public IfcPoint Location 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Location", ifcengine.sdaiINSTANCE, out inst); return new IfcPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Location", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcPlacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAxis1Placement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAxis1Placement : IfcPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAxis1Placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAxis1Placement(SdaiInstance instance) : base(instance) { }
        public IfcAxis1Placement() : base(0) { }

        public static implicit operator IfcAxis1Placement(SdaiInstance instance) => new IfcAxis1Placement(instance);

        /// <summary>
        /// Create new instace of IfcAxis1Placement and returns object of this class to interact with
        /// </summary>
        public static new IfcAxis1Placement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAxis1Placement"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcAxis1Placement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAxis2Placement2D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAxis2Placement2D : IfcPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAxis2Placement2D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAxis2Placement2D(SdaiInstance instance) : base(instance) { }
        public IfcAxis2Placement2D() : base(0) { }

        public static implicit operator IfcAxis2Placement2D(SdaiInstance instance) => new IfcAxis2Placement2D(instance);

        /// <summary>
        /// Create new instace of IfcAxis2Placement2D and returns object of this class to interact with
        /// </summary>
        public static new IfcAxis2Placement2D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAxis2Placement2D"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection RefDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcAxis2Placement2D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAxis2Placement3D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAxis2Placement3D : IfcPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAxis2Placement3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAxis2Placement3D(SdaiInstance instance) : base(instance) { }
        public IfcAxis2Placement3D() : base(0) { }

        public static implicit operator IfcAxis2Placement3D(SdaiInstance instance) => new IfcAxis2Placement3D(instance);

        /// <summary>
        /// Create new instace of IfcAxis2Placement3D and returns object of this class to interact with
        /// </summary>
        public static new IfcAxis2Placement3D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAxis2Placement3D"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcDirection RefDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcAxis2Placement3D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcAxis2PlacementLinear
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcAxis2PlacementLinear : IfcPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcAxis2PlacementLinear
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcAxis2PlacementLinear(SdaiInstance instance) : base(instance) { }
        public IfcAxis2PlacementLinear() : base(0) { }

        public static implicit operator IfcAxis2PlacementLinear(SdaiInstance instance) => new IfcAxis2PlacementLinear(instance);

        /// <summary>
        /// Create new instace of IfcAxis2PlacementLinear and returns object of this class to interact with
        /// </summary>
        public static new IfcAxis2PlacementLinear Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcAxis2PlacementLinear"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcDirection RefDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcAxis2PlacementLinear"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuiltElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuiltElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuiltElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuiltElement(SdaiInstance instance) : base(instance) { }
        public IfcBuiltElement() : base(0) { }

        public static implicit operator IfcBuiltElement(SdaiInstance instance) => new IfcBuiltElement(instance);

        /// <summary>
        /// Create new instace of IfcBuiltElement and returns object of this class to interact with
        /// </summary>
        public static new IfcBuiltElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuiltElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcBuiltElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBeam
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBeam : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBeam
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBeam(SdaiInstance instance) : base(instance) { }
        public IfcBeam() : base(0) { }

        public static implicit operator IfcBeam(SdaiInstance instance) => new IfcBeam(instance);

        /// <summary>
        /// Create new instace of IfcBeam and returns object of this class to interact with
        /// </summary>
        public static new IfcBeam Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBeam"); Debug.Assert(inst != 0); return inst; }

        public IfcBeamTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBeamTypeEnum_); return EnumValue<IfcBeamTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBeamTypeEnum>.FromValue(value.Value, EnumNames.IfcBeamTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBeam"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuiltElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuiltElementType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuiltElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuiltElementType(SdaiInstance instance) : base(instance) { }
        public IfcBuiltElementType() : base(0) { }

        public static implicit operator IfcBuiltElementType(SdaiInstance instance) => new IfcBuiltElementType(instance);

        /// <summary>
        /// Create new instace of IfcBuiltElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcBuiltElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuiltElementType"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcBuiltElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBeamType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBeamType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBeamType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBeamType(SdaiInstance instance) : base(instance) { }
        public IfcBeamType() : base(0) { }

        public static implicit operator IfcBeamType(SdaiInstance instance) => new IfcBeamType(instance);

        /// <summary>
        /// Create new instace of IfcBeamType and returns object of this class to interact with
        /// </summary>
        public static new IfcBeamType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBeamType"); Debug.Assert(inst != 0); return inst; }

        public IfcBeamTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBeamTypeEnum_); return EnumValue<IfcBeamTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBeamTypeEnum>.FromValue(value.Value, EnumNames.IfcBeamTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBeamType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBearing
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBearing : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBearing
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBearing(SdaiInstance instance) : base(instance) { }
        public IfcBearing() : base(0) { }

        public static implicit operator IfcBearing(SdaiInstance instance) => new IfcBearing(instance);

        /// <summary>
        /// Create new instace of IfcBearing and returns object of this class to interact with
        /// </summary>
        public static new IfcBearing Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBearing"); Debug.Assert(inst != 0); return inst; }

        public IfcBearingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBearingTypeEnum_); return EnumValue<IfcBearingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBearingTypeEnum>.FromValue(value.Value, EnumNames.IfcBearingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBearing"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBearingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBearingType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBearingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBearingType(SdaiInstance instance) : base(instance) { }
        public IfcBearingType() : base(0) { }

        public static implicit operator IfcBearingType(SdaiInstance instance) => new IfcBearingType(instance);

        /// <summary>
        /// Create new instace of IfcBearingType and returns object of this class to interact with
        /// </summary>
        public static new IfcBearingType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBearingType"); Debug.Assert(inst != 0); return inst; }

        public IfcBearingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBearingTypeEnum_); return EnumValue<IfcBearingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBearingTypeEnum>.FromValue(value.Value, EnumNames.IfcBearingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBearingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPresentationItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPresentationItem : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPresentationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPresentationItem(SdaiInstance instance) : base(instance) { }
        public IfcPresentationItem() : base(0) { }

        public static implicit operator IfcPresentationItem(SdaiInstance instance) => new IfcPresentationItem(instance);


        protected override TextValue EntityName() { return "IfcPresentationItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceTexture
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceTexture : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceTexture(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceTexture() : base(0) { }

        public static implicit operator IfcSurfaceTexture(SdaiInstance instance) => new IfcSurfaceTexture(instance);

        public bool? RepeatS
            {
            get { return get_bool("RepeatS", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RepeatS", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? RepeatT
            {
            get { return get_bool("RepeatT", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RepeatT", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public TextValue Mode
            {
            get { return get_string("Mode", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Mode", ifcengine.sdaiSTRING, value); }
            }
        public IfcCartesianTransformationOperator2D TextureTransform 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TextureTransform", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianTransformationOperator2D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TextureTransform", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcIdentifier Parameter { get { return (new ListOfIfcIdentifierSerializer()).FromAttr(m_instance, "Parameter"); } }
        public void put_Parameter(IEnumerable<TextValue> lst) { (new ListOfIfcIdentifierSerializer()).ToSdaiAggr(lst, m_instance, "Parameter"); }
        public void put_Parameter_untyped(IEnumerable lst) { (new ListOfIfcIdentifierSerializer()).ToSdaiAggr(lst, m_instance, "Parameter"); }
        public SetOfIfcTextureCoordinate IsMappedBy { get { return (new SetOfIfcTextureCoordinateSerializer()).FromAttr(m_instance, "IsMappedBy"); } }
        public SetOfIfcSurfaceStyleWithTextures UsedInStyles { get { return (new SetOfIfcSurfaceStyleWithTexturesSerializer()).FromAttr(m_instance, "UsedInStyles"); } }

        protected override TextValue EntityName() { return "IfcSurfaceTexture"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBlobTexture
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBlobTexture : IfcSurfaceTexture
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBlobTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBlobTexture(SdaiInstance instance) : base(instance) { }
        public IfcBlobTexture() : base(0) { }

        public static implicit operator IfcBlobTexture(SdaiInstance instance) => new IfcBlobTexture(instance);

        /// <summary>
        /// Create new instace of IfcBlobTexture and returns object of this class to interact with
        /// </summary>
        public static new IfcBlobTexture Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBlobTexture"); Debug.Assert(inst != 0); return inst; }

        public TextValue RasterFormat
            {
            get { return get_string("RasterFormat", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RasterFormat", ifcengine.sdaiSTRING, value); }
            }
        public TextValue RasterCode
            {
            get { return get_string("RasterCode", ifcengine.sdaiBINARY); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RasterCode", ifcengine.sdaiBINARY, value); }
            }

        protected override TextValue EntityName() { return "IfcBlobTexture"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCsgPrimitive3D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCsgPrimitive3D : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCsgPrimitive3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCsgPrimitive3D(SdaiInstance instance) : base(instance) { }
        public IfcCsgPrimitive3D() : base(0) { }

        public static implicit operator IfcCsgPrimitive3D(SdaiInstance instance) => new IfcCsgPrimitive3D(instance);

        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcCsgPrimitive3D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBlock
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBlock : IfcCsgPrimitive3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBlock
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBlock(SdaiInstance instance) : base(instance) { }
        public IfcBlock() : base(0) { }

        public static implicit operator IfcBlock(SdaiInstance instance) => new IfcBlock(instance);

        /// <summary>
        /// Create new instace of IfcBlock and returns object of this class to interact with
        /// </summary>
        public static new IfcBlock Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBlock"); Debug.Assert(inst != 0); return inst; }

        public double? XLength
            {
            get { return get_double("XLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "XLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? YLength
            {
            get { return get_double("YLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ZLength
            {
            get { return get_double("ZLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ZLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBlock"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoiler
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoiler : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoiler
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoiler(SdaiInstance instance) : base(instance) { }
        public IfcBoiler() : base(0) { }

        public static implicit operator IfcBoiler(SdaiInstance instance) => new IfcBoiler(instance);

        /// <summary>
        /// Create new instace of IfcBoiler and returns object of this class to interact with
        /// </summary>
        public static new IfcBoiler Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoiler"); Debug.Assert(inst != 0); return inst; }

        public IfcBoilerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBoilerTypeEnum_); return EnumValue<IfcBoilerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBoilerTypeEnum>.FromValue(value.Value, EnumNames.IfcBoilerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBoiler"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoilerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoilerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoilerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoilerType(SdaiInstance instance) : base(instance) { }
        public IfcBoilerType() : base(0) { }

        public static implicit operator IfcBoilerType(SdaiInstance instance) => new IfcBoilerType(instance);

        /// <summary>
        /// Create new instace of IfcBoilerType and returns object of this class to interact with
        /// </summary>
        public static new IfcBoilerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoilerType"); Debug.Assert(inst != 0); return inst; }

        public IfcBoilerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBoilerTypeEnum_); return EnumValue<IfcBoilerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBoilerTypeEnum>.FromValue(value.Value, EnumNames.IfcBoilerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBoilerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBooleanResult
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBooleanResult : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBooleanResult
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBooleanResult(SdaiInstance instance) : base(instance) { }
        public IfcBooleanResult() : base(0) { }

        public static implicit operator IfcBooleanResult(SdaiInstance instance) => new IfcBooleanResult(instance);

        /// <summary>
        /// Create new instace of IfcBooleanResult and returns object of this class to interact with
        /// </summary>
        public static new IfcBooleanResult Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBooleanResult"); Debug.Assert(inst != 0); return inst; }

        public IfcBooleanOperator? Operator 
            { 
            get { var str = get_string("Operator", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBooleanOperator_); return EnumValue<IfcBooleanOperator>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBooleanOperator>.FromValue(value.Value, EnumNames.IfcBooleanOperator_); ifcengine.sdaiPutAttrBN(m_instance, "Operator", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public IfcBooleanOperand FirstOperand
            {
            get { return new IfcBooleanOperand(m_instance, "FirstOperand", 0); }
            }

        public IfcBooleanOperand SecondOperand
            {
            get { return new IfcBooleanOperand(m_instance, "SecondOperand", 0); }
            }

        protected override TextValue EntityName() { return "IfcBooleanResult"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBooleanClippingResult
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBooleanClippingResult : IfcBooleanResult
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBooleanClippingResult
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBooleanClippingResult(SdaiInstance instance) : base(instance) { }
        public IfcBooleanClippingResult() : base(0) { }

        public static implicit operator IfcBooleanClippingResult(SdaiInstance instance) => new IfcBooleanClippingResult(instance);

        /// <summary>
        /// Create new instace of IfcBooleanClippingResult and returns object of this class to interact with
        /// </summary>
        public static new IfcBooleanClippingResult Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBooleanClippingResult"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcBooleanClippingResult"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeotechnicalElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeotechnicalElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeotechnicalElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeotechnicalElement(SdaiInstance instance) : base(instance) { }
        public IfcGeotechnicalElement() : base(0) { }

        public static implicit operator IfcGeotechnicalElement(SdaiInstance instance) => new IfcGeotechnicalElement(instance);


        protected override TextValue EntityName() { return "IfcGeotechnicalElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeotechnicalAssembly
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeotechnicalAssembly : IfcGeotechnicalElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeotechnicalAssembly
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeotechnicalAssembly(SdaiInstance instance) : base(instance) { }
        public IfcGeotechnicalAssembly() : base(0) { }

        public static implicit operator IfcGeotechnicalAssembly(SdaiInstance instance) => new IfcGeotechnicalAssembly(instance);


        protected override TextValue EntityName() { return "IfcGeotechnicalAssembly"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBorehole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBorehole : IfcGeotechnicalAssembly
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBorehole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBorehole(SdaiInstance instance) : base(instance) { }
        public IfcBorehole() : base(0) { }

        public static implicit operator IfcBorehole(SdaiInstance instance) => new IfcBorehole(instance);

        /// <summary>
        /// Create new instace of IfcBorehole and returns object of this class to interact with
        /// </summary>
        public static new IfcBorehole Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBorehole"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcBorehole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundaryCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundaryCondition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundaryCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundaryCondition(SdaiInstance instance) : base(instance) { }
        public IfcBoundaryCondition() : base(0) { }

        public static implicit operator IfcBoundaryCondition(SdaiInstance instance) => new IfcBoundaryCondition(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcBoundaryCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurve : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurve(SdaiInstance instance) : base(instance) { }
        public IfcCurve() : base(0) { }

        public static implicit operator IfcCurve(SdaiInstance instance) => new IfcCurve(instance);


        protected override TextValue EntityName() { return "IfcCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundedCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundedCurve : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundedCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundedCurve(SdaiInstance instance) : base(instance) { }
        public IfcBoundedCurve() : base(0) { }

        public static implicit operator IfcBoundedCurve(SdaiInstance instance) => new IfcBoundedCurve(instance);


        protected override TextValue EntityName() { return "IfcBoundedCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCompositeCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCompositeCurve : IfcBoundedCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCompositeCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCompositeCurve(SdaiInstance instance) : base(instance) { }
        public IfcCompositeCurve() : base(0) { }

        public static implicit operator IfcCompositeCurve(SdaiInstance instance) => new IfcCompositeCurve(instance);

        /// <summary>
        /// Create new instace of IfcCompositeCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcCompositeCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCompositeCurve"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcSegment Segments { get { return (new ListOfIfcSegmentSerializer()).FromAttr(m_instance, "Segments"); } }
        public void put_Segments(IEnumerable<IfcSegment> lst) { (new ListOfIfcSegmentSerializer()).ToSdaiAggr(lst, m_instance, "Segments"); }
        public void put_Segments_untyped(IEnumerable lst) { (new ListOfIfcSegmentSerializer()).ToSdaiAggr(lst, m_instance, "Segments"); }
        public LOGICAL_VALUE? SelfIntersect 
            { 
            get { var str = get_string("SelfIntersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "SelfIntersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCompositeCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCompositeCurveOnSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCompositeCurveOnSurface : IfcCompositeCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCompositeCurveOnSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCompositeCurveOnSurface(SdaiInstance instance) : base(instance) { }
        public IfcCompositeCurveOnSurface() : base(0) { }

        public static implicit operator IfcCompositeCurveOnSurface(SdaiInstance instance) => new IfcCompositeCurveOnSurface(instance);

        /// <summary>
        /// Create new instace of IfcCompositeCurveOnSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcCompositeCurveOnSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCompositeCurveOnSurface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcCompositeCurveOnSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundaryCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundaryCurve : IfcCompositeCurveOnSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundaryCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundaryCurve(SdaiInstance instance) : base(instance) { }
        public IfcBoundaryCurve() : base(0) { }

        public static implicit operator IfcBoundaryCurve(SdaiInstance instance) => new IfcBoundaryCurve(instance);

        /// <summary>
        /// Create new instace of IfcBoundaryCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundaryCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundaryCurve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcBoundaryCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundaryEdgeCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundaryEdgeCondition : IfcBoundaryCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundaryEdgeCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundaryEdgeCondition(SdaiInstance instance) : base(instance) { }
        public IfcBoundaryEdgeCondition() : base(0) { }

        public static implicit operator IfcBoundaryEdgeCondition(SdaiInstance instance) => new IfcBoundaryEdgeCondition(instance);

        /// <summary>
        /// Create new instace of IfcBoundaryEdgeCondition and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundaryEdgeCondition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundaryEdgeCondition"); Debug.Assert(inst != 0); return inst; }


        public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthX
            {
            get { return new IfcModulusOfTranslationalSubgradeReactionSelect(m_instance, "TranslationalStiffnessByLengthX", 0); }
            }

        public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthY
            {
            get { return new IfcModulusOfTranslationalSubgradeReactionSelect(m_instance, "TranslationalStiffnessByLengthY", 0); }
            }

        public IfcModulusOfTranslationalSubgradeReactionSelect TranslationalStiffnessByLengthZ
            {
            get { return new IfcModulusOfTranslationalSubgradeReactionSelect(m_instance, "TranslationalStiffnessByLengthZ", 0); }
            }

        public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthX
            {
            get { return new IfcModulusOfRotationalSubgradeReactionSelect(m_instance, "RotationalStiffnessByLengthX", 0); }
            }

        public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthY
            {
            get { return new IfcModulusOfRotationalSubgradeReactionSelect(m_instance, "RotationalStiffnessByLengthY", 0); }
            }

        public IfcModulusOfRotationalSubgradeReactionSelect RotationalStiffnessByLengthZ
            {
            get { return new IfcModulusOfRotationalSubgradeReactionSelect(m_instance, "RotationalStiffnessByLengthZ", 0); }
            }

        protected override TextValue EntityName() { return "IfcBoundaryEdgeCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundaryFaceCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundaryFaceCondition : IfcBoundaryCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundaryFaceCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundaryFaceCondition(SdaiInstance instance) : base(instance) { }
        public IfcBoundaryFaceCondition() : base(0) { }

        public static implicit operator IfcBoundaryFaceCondition(SdaiInstance instance) => new IfcBoundaryFaceCondition(instance);

        /// <summary>
        /// Create new instace of IfcBoundaryFaceCondition and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundaryFaceCondition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundaryFaceCondition"); Debug.Assert(inst != 0); return inst; }


        public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaX
            {
            get { return new IfcModulusOfSubgradeReactionSelect(m_instance, "TranslationalStiffnessByAreaX", 0); }
            }

        public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaY
            {
            get { return new IfcModulusOfSubgradeReactionSelect(m_instance, "TranslationalStiffnessByAreaY", 0); }
            }

        public IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaZ
            {
            get { return new IfcModulusOfSubgradeReactionSelect(m_instance, "TranslationalStiffnessByAreaZ", 0); }
            }

        protected override TextValue EntityName() { return "IfcBoundaryFaceCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundaryNodeCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundaryNodeCondition : IfcBoundaryCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundaryNodeCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundaryNodeCondition(SdaiInstance instance) : base(instance) { }
        public IfcBoundaryNodeCondition() : base(0) { }

        public static implicit operator IfcBoundaryNodeCondition(SdaiInstance instance) => new IfcBoundaryNodeCondition(instance);

        /// <summary>
        /// Create new instace of IfcBoundaryNodeCondition and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundaryNodeCondition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundaryNodeCondition"); Debug.Assert(inst != 0); return inst; }


        public IfcTranslationalStiffnessSelect TranslationalStiffnessX
            {
            get { return new IfcTranslationalStiffnessSelect(m_instance, "TranslationalStiffnessX", 0); }
            }

        public IfcTranslationalStiffnessSelect TranslationalStiffnessY
            {
            get { return new IfcTranslationalStiffnessSelect(m_instance, "TranslationalStiffnessY", 0); }
            }

        public IfcTranslationalStiffnessSelect TranslationalStiffnessZ
            {
            get { return new IfcTranslationalStiffnessSelect(m_instance, "TranslationalStiffnessZ", 0); }
            }

        public IfcRotationalStiffnessSelect RotationalStiffnessX
            {
            get { return new IfcRotationalStiffnessSelect(m_instance, "RotationalStiffnessX", 0); }
            }

        public IfcRotationalStiffnessSelect RotationalStiffnessY
            {
            get { return new IfcRotationalStiffnessSelect(m_instance, "RotationalStiffnessY", 0); }
            }

        public IfcRotationalStiffnessSelect RotationalStiffnessZ
            {
            get { return new IfcRotationalStiffnessSelect(m_instance, "RotationalStiffnessZ", 0); }
            }

        protected override TextValue EntityName() { return "IfcBoundaryNodeCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundaryNodeConditionWarping
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundaryNodeConditionWarping : IfcBoundaryNodeCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundaryNodeConditionWarping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundaryNodeConditionWarping(SdaiInstance instance) : base(instance) { }
        public IfcBoundaryNodeConditionWarping() : base(0) { }

        public static implicit operator IfcBoundaryNodeConditionWarping(SdaiInstance instance) => new IfcBoundaryNodeConditionWarping(instance);

        /// <summary>
        /// Create new instace of IfcBoundaryNodeConditionWarping and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundaryNodeConditionWarping Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundaryNodeConditionWarping"); Debug.Assert(inst != 0); return inst; }


        public IfcWarpingStiffnessSelect WarpingStiffness
            {
            get { return new IfcWarpingStiffnessSelect(m_instance, "WarpingStiffness", 0); }
            }

        protected override TextValue EntityName() { return "IfcBoundaryNodeConditionWarping"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurface : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurface(SdaiInstance instance) : base(instance) { }
        public IfcSurface() : base(0) { }

        public static implicit operator IfcSurface(SdaiInstance instance) => new IfcSurface(instance);


        protected override TextValue EntityName() { return "IfcSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundedSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundedSurface : IfcSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundedSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundedSurface(SdaiInstance instance) : base(instance) { }
        public IfcBoundedSurface() : base(0) { }

        public static implicit operator IfcBoundedSurface(SdaiInstance instance) => new IfcBoundedSurface(instance);


        protected override TextValue EntityName() { return "IfcBoundedSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoundingBox
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoundingBox : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoundingBox
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoundingBox(SdaiInstance instance) : base(instance) { }
        public IfcBoundingBox() : base(0) { }

        public static implicit operator IfcBoundingBox(SdaiInstance instance) => new IfcBoundingBox(instance);

        /// <summary>
        /// Create new instace of IfcBoundingBox and returns object of this class to interact with
        /// </summary>
        public static new IfcBoundingBox Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoundingBox"); Debug.Assert(inst != 0); return inst; }

        public IfcCartesianPoint Corner 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Corner", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Corner", ifcengine.sdaiINSTANCE, i); }
            }
        public double? XDim
            {
            get { return get_double("XDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "XDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? YDim
            {
            get { return get_double("YDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ZDim
            {
            get { return get_double("ZDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ZDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBoundingBox"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcHalfSpaceSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcHalfSpaceSolid : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcHalfSpaceSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcHalfSpaceSolid(SdaiInstance instance) : base(instance) { }
        public IfcHalfSpaceSolid() : base(0) { }

        public static implicit operator IfcHalfSpaceSolid(SdaiInstance instance) => new IfcHalfSpaceSolid(instance);

        /// <summary>
        /// Create new instace of IfcHalfSpaceSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcHalfSpaceSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcHalfSpaceSolid"); Debug.Assert(inst != 0); return inst; }

        public IfcSurface BaseSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BaseSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BaseSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? AgreementFlag
            {
            get { return get_bool("AgreementFlag", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AgreementFlag", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcHalfSpaceSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBoxedHalfSpace
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBoxedHalfSpace : IfcHalfSpaceSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBoxedHalfSpace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBoxedHalfSpace(SdaiInstance instance) : base(instance) { }
        public IfcBoxedHalfSpace() : base(0) { }

        public static implicit operator IfcBoxedHalfSpace(SdaiInstance instance) => new IfcBoxedHalfSpace(instance);

        /// <summary>
        /// Create new instace of IfcBoxedHalfSpace and returns object of this class to interact with
        /// </summary>
        public static new IfcBoxedHalfSpace Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBoxedHalfSpace"); Debug.Assert(inst != 0); return inst; }

        public IfcBoundingBox Enclosure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Enclosure", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundingBox(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Enclosure", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcBoxedHalfSpace"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpatialElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpatialElement : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpatialElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpatialElement(SdaiInstance instance) : base(instance) { }
        public IfcSpatialElement() : base(0) { }

        public static implicit operator IfcSpatialElement(SdaiInstance instance) => new IfcSpatialElement(instance);

        public TextValue LongName
            {
            get { return get_string("LongName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongName", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelContainedInSpatialStructure ContainsElements { get { return (new SetOfIfcRelContainedInSpatialStructureSerializer()).FromAttr(m_instance, "ContainsElements"); } }
        public SetOfIfcRelServicesBuildings ServicedBySystems { get { return (new SetOfIfcRelServicesBuildingsSerializer()).FromAttr(m_instance, "ServicedBySystems"); } }
        public SetOfIfcRelReferencedInSpatialStructure ReferencesElements { get { return (new SetOfIfcRelReferencedInSpatialStructureSerializer()).FromAttr(m_instance, "ReferencesElements"); } }
        public SetOfIfcRelInterferesElements IsInterferedByElements { get { return (new SetOfIfcRelInterferesElementsSerializer()).FromAttr(m_instance, "IsInterferedByElements"); } }
        public SetOfIfcRelInterferesElements InterferesElements { get { return (new SetOfIfcRelInterferesElementsSerializer()).FromAttr(m_instance, "InterferesElements"); } }

        protected override TextValue EntityName() { return "IfcSpatialElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpatialStructureElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpatialStructureElement : IfcSpatialElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpatialStructureElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpatialStructureElement(SdaiInstance instance) : base(instance) { }
        public IfcSpatialStructureElement() : base(0) { }

        public static implicit operator IfcSpatialStructureElement(SdaiInstance instance) => new IfcSpatialStructureElement(instance);

        public IfcElementCompositionEnum? CompositionType 
            { 
            get { var str = get_string("CompositionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElementCompositionEnum_); return EnumValue<IfcElementCompositionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElementCompositionEnum>.FromValue(value.Value, EnumNames.IfcElementCompositionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "CompositionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSpatialStructureElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFacility
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFacility : IfcSpatialStructureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFacility
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFacility(SdaiInstance instance) : base(instance) { }
        public IfcFacility() : base(0) { }

        public static implicit operator IfcFacility(SdaiInstance instance) => new IfcFacility(instance);

        /// <summary>
        /// Create new instace of IfcFacility and returns object of this class to interact with
        /// </summary>
        public static new IfcFacility Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFacility"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFacility"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBridge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBridge : IfcFacility
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBridge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBridge(SdaiInstance instance) : base(instance) { }
        public IfcBridge() : base(0) { }

        public static implicit operator IfcBridge(SdaiInstance instance) => new IfcBridge(instance);

        /// <summary>
        /// Create new instace of IfcBridge and returns object of this class to interact with
        /// </summary>
        public static new IfcBridge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBridge"); Debug.Assert(inst != 0); return inst; }

        public IfcBridgeTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBridgeTypeEnum_); return EnumValue<IfcBridgeTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBridgeTypeEnum>.FromValue(value.Value, EnumNames.IfcBridgeTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBridge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFacilityPart
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFacilityPart : IfcSpatialStructureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFacilityPart
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFacilityPart(SdaiInstance instance) : base(instance) { }
        public IfcFacilityPart() : base(0) { }

        public static implicit operator IfcFacilityPart(SdaiInstance instance) => new IfcFacilityPart(instance);

        public IfcFacilityUsageEnum? UsageType 
            { 
            get { var str = get_string("UsageType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFacilityUsageEnum_); return EnumValue<IfcFacilityUsageEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFacilityUsageEnum>.FromValue(value.Value, EnumNames.IfcFacilityUsageEnum_); ifcengine.sdaiPutAttrBN(m_instance, "UsageType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFacilityPart"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBridgePart
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBridgePart : IfcFacilityPart
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBridgePart
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBridgePart(SdaiInstance instance) : base(instance) { }
        public IfcBridgePart() : base(0) { }

        public static implicit operator IfcBridgePart(SdaiInstance instance) => new IfcBridgePart(instance);

        /// <summary>
        /// Create new instace of IfcBridgePart and returns object of this class to interact with
        /// </summary>
        public static new IfcBridgePart Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBridgePart"); Debug.Assert(inst != 0); return inst; }

        public IfcBridgePartTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBridgePartTypeEnum_); return EnumValue<IfcBridgePartTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBridgePartTypeEnum>.FromValue(value.Value, EnumNames.IfcBridgePartTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBridgePart"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBSplineCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBSplineCurve : IfcBoundedCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBSplineCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBSplineCurve(SdaiInstance instance) : base(instance) { }
        public IfcBSplineCurve() : base(0) { }

        public static implicit operator IfcBSplineCurve(SdaiInstance instance) => new IfcBSplineCurve(instance);

        public IntValue? Degree
            {
            get { return get_IntValue("Degree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Degree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public ListOfIfcCartesianPoint ControlPointsList { get { return (new ListOfIfcCartesianPointSerializer()).FromAttr(m_instance, "ControlPointsList"); } }
        public void put_ControlPointsList(IEnumerable<IfcCartesianPoint> lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "ControlPointsList"); }
        public void put_ControlPointsList_untyped(IEnumerable lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "ControlPointsList"); }
        public IfcBSplineCurveForm? CurveForm 
            { 
            get { var str = get_string("CurveForm", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBSplineCurveForm_); return EnumValue<IfcBSplineCurveForm>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBSplineCurveForm>.FromValue(value.Value, EnumNames.IfcBSplineCurveForm_); ifcengine.sdaiPutAttrBN(m_instance, "CurveForm", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? ClosedCurve 
            { 
            get { var str = get_string("ClosedCurve", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "ClosedCurve", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? SelfIntersect 
            { 
            get { var str = get_string("SelfIntersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "SelfIntersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBSplineCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBSplineCurveWithKnots
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBSplineCurveWithKnots : IfcBSplineCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBSplineCurveWithKnots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBSplineCurveWithKnots(SdaiInstance instance) : base(instance) { }
        public IfcBSplineCurveWithKnots() : base(0) { }

        public static implicit operator IfcBSplineCurveWithKnots(SdaiInstance instance) => new IfcBSplineCurveWithKnots(instance);

        /// <summary>
        /// Create new instace of IfcBSplineCurveWithKnots and returns object of this class to interact with
        /// </summary>
        public static new IfcBSplineCurveWithKnots Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBSplineCurveWithKnots"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcInteger KnotMultiplicities { get { return (new ListOfIfcIntegerSerializer()).FromAttr(m_instance, "KnotMultiplicities"); } }
        public void put_KnotMultiplicities(IEnumerable<IntValue> lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "KnotMultiplicities"); }
        public void put_KnotMultiplicities_untyped(IEnumerable lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "KnotMultiplicities"); }
        public ListOfIfcParameterValue Knots { get { return (new ListOfIfcParameterValueSerializer()).FromAttr(m_instance, "Knots"); } }
        public void put_Knots(IEnumerable<double> lst) { (new ListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "Knots"); }
        public void put_Knots_untyped(IEnumerable lst) { (new ListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "Knots"); }
        public IfcKnotType? KnotSpec 
            { 
            get { var str = get_string("KnotSpec", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcKnotType_); return EnumValue<IfcKnotType>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcKnotType>.FromValue(value.Value, EnumNames.IfcKnotType_); ifcengine.sdaiPutAttrBN(m_instance, "KnotSpec", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBSplineCurveWithKnots"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBSplineSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBSplineSurface : IfcBoundedSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBSplineSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBSplineSurface(SdaiInstance instance) : base(instance) { }
        public IfcBSplineSurface() : base(0) { }

        public static implicit operator IfcBSplineSurface(SdaiInstance instance) => new IfcBSplineSurface(instance);

        public IntValue? UDegree
            {
            get { return get_IntValue("UDegree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "UDegree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? VDegree
            {
            get { return get_IntValue("VDegree", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "VDegree", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public ListOfListOfIfcCartesianPoint ControlPointsList { get { return (new ListOfListOfIfcCartesianPointSerializer()).FromAttr(m_instance, "ControlPointsList"); } }
        public void put_ControlPointsList(IEnumerable<ListOfIfcCartesianPoint> lst) { (new ListOfListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "ControlPointsList"); }
        public void put_ControlPointsList_untyped(IEnumerable lst) { (new ListOfListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "ControlPointsList"); }
        public IfcBSplineSurfaceForm? SurfaceForm 
            { 
            get { var str = get_string("SurfaceForm", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBSplineSurfaceForm_); return EnumValue<IfcBSplineSurfaceForm>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBSplineSurfaceForm>.FromValue(value.Value, EnumNames.IfcBSplineSurfaceForm_); ifcengine.sdaiPutAttrBN(m_instance, "SurfaceForm", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? UClosed 
            { 
            get { var str = get_string("UClosed", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "UClosed", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? VClosed 
            { 
            get { var str = get_string("VClosed", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "VClosed", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? SelfIntersect 
            { 
            get { var str = get_string("SelfIntersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "SelfIntersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBSplineSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBSplineSurfaceWithKnots
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBSplineSurfaceWithKnots : IfcBSplineSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBSplineSurfaceWithKnots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBSplineSurfaceWithKnots(SdaiInstance instance) : base(instance) { }
        public IfcBSplineSurfaceWithKnots() : base(0) { }

        public static implicit operator IfcBSplineSurfaceWithKnots(SdaiInstance instance) => new IfcBSplineSurfaceWithKnots(instance);

        /// <summary>
        /// Create new instace of IfcBSplineSurfaceWithKnots and returns object of this class to interact with
        /// </summary>
        public static new IfcBSplineSurfaceWithKnots Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBSplineSurfaceWithKnots"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcInteger UMultiplicities { get { return (new ListOfIfcIntegerSerializer()).FromAttr(m_instance, "UMultiplicities"); } }
        public void put_UMultiplicities(IEnumerable<IntValue> lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "UMultiplicities"); }
        public void put_UMultiplicities_untyped(IEnumerable lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "UMultiplicities"); }
        public ListOfIfcInteger VMultiplicities { get { return (new ListOfIfcIntegerSerializer()).FromAttr(m_instance, "VMultiplicities"); } }
        public void put_VMultiplicities(IEnumerable<IntValue> lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "VMultiplicities"); }
        public void put_VMultiplicities_untyped(IEnumerable lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "VMultiplicities"); }
        public ListOfIfcParameterValue UKnots { get { return (new ListOfIfcParameterValueSerializer()).FromAttr(m_instance, "UKnots"); } }
        public void put_UKnots(IEnumerable<double> lst) { (new ListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "UKnots"); }
        public void put_UKnots_untyped(IEnumerable lst) { (new ListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "UKnots"); }
        public ListOfIfcParameterValue VKnots { get { return (new ListOfIfcParameterValueSerializer()).FromAttr(m_instance, "VKnots"); } }
        public void put_VKnots(IEnumerable<double> lst) { (new ListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "VKnots"); }
        public void put_VKnots_untyped(IEnumerable lst) { (new ListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "VKnots"); }
        public IfcKnotType? KnotSpec 
            { 
            get { var str = get_string("KnotSpec", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcKnotType_); return EnumValue<IfcKnotType>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcKnotType>.FromValue(value.Value, EnumNames.IfcKnotType_); ifcengine.sdaiPutAttrBN(m_instance, "KnotSpec", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBSplineSurfaceWithKnots"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuilding
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuilding : IfcFacility
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuilding
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuilding(SdaiInstance instance) : base(instance) { }
        public IfcBuilding() : base(0) { }

        public static implicit operator IfcBuilding(SdaiInstance instance) => new IfcBuilding(instance);

        /// <summary>
        /// Create new instace of IfcBuilding and returns object of this class to interact with
        /// </summary>
        public static new IfcBuilding Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuilding"); Debug.Assert(inst != 0); return inst; }

        public double? ElevationOfRefHeight
            {
            get { return get_double("ElevationOfRefHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ElevationOfRefHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ElevationOfTerrain
            {
            get { return get_double("ElevationOfTerrain", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ElevationOfTerrain", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcPostalAddress BuildingAddress 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BuildingAddress", ifcengine.sdaiINSTANCE, out inst); return new IfcPostalAddress(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BuildingAddress", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcBuilding"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementComponent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementComponent : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementComponent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementComponent(SdaiInstance instance) : base(instance) { }
        public IfcElementComponent() : base(0) { }

        public static implicit operator IfcElementComponent(SdaiInstance instance) => new IfcElementComponent(instance);


        protected override TextValue EntityName() { return "IfcElementComponent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingElementPart
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingElementPart : IfcElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingElementPart
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingElementPart(SdaiInstance instance) : base(instance) { }
        public IfcBuildingElementPart() : base(0) { }

        public static implicit operator IfcBuildingElementPart(SdaiInstance instance) => new IfcBuildingElementPart(instance);

        /// <summary>
        /// Create new instace of IfcBuildingElementPart and returns object of this class to interact with
        /// </summary>
        public static new IfcBuildingElementPart Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuildingElementPart"); Debug.Assert(inst != 0); return inst; }

        public IfcBuildingElementPartTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBuildingElementPartTypeEnum_); return EnumValue<IfcBuildingElementPartTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBuildingElementPartTypeEnum>.FromValue(value.Value, EnumNames.IfcBuildingElementPartTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBuildingElementPart"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementComponentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementComponentType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementComponentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementComponentType(SdaiInstance instance) : base(instance) { }
        public IfcElementComponentType() : base(0) { }

        public static implicit operator IfcElementComponentType(SdaiInstance instance) => new IfcElementComponentType(instance);


        protected override TextValue EntityName() { return "IfcElementComponentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingElementPartType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingElementPartType : IfcElementComponentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingElementPartType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingElementPartType(SdaiInstance instance) : base(instance) { }
        public IfcBuildingElementPartType() : base(0) { }

        public static implicit operator IfcBuildingElementPartType(SdaiInstance instance) => new IfcBuildingElementPartType(instance);

        /// <summary>
        /// Create new instace of IfcBuildingElementPartType and returns object of this class to interact with
        /// </summary>
        public static new IfcBuildingElementPartType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuildingElementPartType"); Debug.Assert(inst != 0); return inst; }

        public IfcBuildingElementPartTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBuildingElementPartTypeEnum_); return EnumValue<IfcBuildingElementPartTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBuildingElementPartTypeEnum>.FromValue(value.Value, EnumNames.IfcBuildingElementPartTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBuildingElementPartType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingElementProxy
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingElementProxy : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingElementProxy
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingElementProxy(SdaiInstance instance) : base(instance) { }
        public IfcBuildingElementProxy() : base(0) { }

        public static implicit operator IfcBuildingElementProxy(SdaiInstance instance) => new IfcBuildingElementProxy(instance);

        /// <summary>
        /// Create new instace of IfcBuildingElementProxy and returns object of this class to interact with
        /// </summary>
        public static new IfcBuildingElementProxy Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuildingElementProxy"); Debug.Assert(inst != 0); return inst; }

        public IfcBuildingElementProxyTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBuildingElementProxyTypeEnum_); return EnumValue<IfcBuildingElementProxyTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBuildingElementProxyTypeEnum>.FromValue(value.Value, EnumNames.IfcBuildingElementProxyTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBuildingElementProxy"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingElementProxyType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingElementProxyType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingElementProxyType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingElementProxyType(SdaiInstance instance) : base(instance) { }
        public IfcBuildingElementProxyType() : base(0) { }

        public static implicit operator IfcBuildingElementProxyType(SdaiInstance instance) => new IfcBuildingElementProxyType(instance);

        /// <summary>
        /// Create new instace of IfcBuildingElementProxyType and returns object of this class to interact with
        /// </summary>
        public static new IfcBuildingElementProxyType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuildingElementProxyType"); Debug.Assert(inst != 0); return inst; }

        public IfcBuildingElementProxyTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBuildingElementProxyTypeEnum_); return EnumValue<IfcBuildingElementProxyTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBuildingElementProxyTypeEnum>.FromValue(value.Value, EnumNames.IfcBuildingElementProxyTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBuildingElementProxyType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingStorey
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingStorey : IfcSpatialStructureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingStorey
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingStorey(SdaiInstance instance) : base(instance) { }
        public IfcBuildingStorey() : base(0) { }

        public static implicit operator IfcBuildingStorey(SdaiInstance instance) => new IfcBuildingStorey(instance);

        /// <summary>
        /// Create new instace of IfcBuildingStorey and returns object of this class to interact with
        /// </summary>
        public static new IfcBuildingStorey Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuildingStorey"); Debug.Assert(inst != 0); return inst; }

        public double? Elevation
            {
            get { return get_double("Elevation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Elevation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBuildingStorey"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSystem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSystem : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSystem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSystem(SdaiInstance instance) : base(instance) { }
        public IfcSystem() : base(0) { }

        public static implicit operator IfcSystem(SdaiInstance instance) => new IfcSystem(instance);

        /// <summary>
        /// Create new instace of IfcSystem and returns object of this class to interact with
        /// </summary>
        public static new IfcSystem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSystem"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcRelServicesBuildings ServicesBuildings { get { return (new SetOfIfcRelServicesBuildingsSerializer()).FromAttr(m_instance, "ServicesBuildings"); } }
        public SetOfIfcRelReferencedInSpatialStructure ServicesFacilities { get { return (new SetOfIfcRelReferencedInSpatialStructureSerializer()).FromAttr(m_instance, "ServicesFacilities"); } }

        protected override TextValue EntityName() { return "IfcSystem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuildingSystem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuildingSystem : IfcSystem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuildingSystem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuildingSystem(SdaiInstance instance) : base(instance) { }
        public IfcBuildingSystem() : base(0) { }

        public static implicit operator IfcBuildingSystem(SdaiInstance instance) => new IfcBuildingSystem(instance);

        /// <summary>
        /// Create new instace of IfcBuildingSystem and returns object of this class to interact with
        /// </summary>
        public static new IfcBuildingSystem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuildingSystem"); Debug.Assert(inst != 0); return inst; }

        public IfcBuildingSystemTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBuildingSystemTypeEnum_); return EnumValue<IfcBuildingSystemTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBuildingSystemTypeEnum>.FromValue(value.Value, EnumNames.IfcBuildingSystemTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue LongName
            {
            get { return get_string("LongName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongName", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcBuildingSystem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBuiltSystem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBuiltSystem : IfcSystem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBuiltSystem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBuiltSystem(SdaiInstance instance) : base(instance) { }
        public IfcBuiltSystem() : base(0) { }

        public static implicit operator IfcBuiltSystem(SdaiInstance instance) => new IfcBuiltSystem(instance);

        /// <summary>
        /// Create new instace of IfcBuiltSystem and returns object of this class to interact with
        /// </summary>
        public static new IfcBuiltSystem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBuiltSystem"); Debug.Assert(inst != 0); return inst; }

        public IfcBuiltSystemTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBuiltSystemTypeEnum_); return EnumValue<IfcBuiltSystemTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBuiltSystemTypeEnum>.FromValue(value.Value, EnumNames.IfcBuiltSystemTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue LongName
            {
            get { return get_string("LongName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongName", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcBuiltSystem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBurner
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBurner : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBurner
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBurner(SdaiInstance instance) : base(instance) { }
        public IfcBurner() : base(0) { }

        public static implicit operator IfcBurner(SdaiInstance instance) => new IfcBurner(instance);

        /// <summary>
        /// Create new instace of IfcBurner and returns object of this class to interact with
        /// </summary>
        public static new IfcBurner Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBurner"); Debug.Assert(inst != 0); return inst; }

        public IfcBurnerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBurnerTypeEnum_); return EnumValue<IfcBurnerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBurnerTypeEnum>.FromValue(value.Value, EnumNames.IfcBurnerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBurner"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcBurnerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcBurnerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcBurnerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcBurnerType(SdaiInstance instance) : base(instance) { }
        public IfcBurnerType() : base(0) { }

        public static implicit operator IfcBurnerType(SdaiInstance instance) => new IfcBurnerType(instance);

        /// <summary>
        /// Create new instace of IfcBurnerType and returns object of this class to interact with
        /// </summary>
        public static new IfcBurnerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcBurnerType"); Debug.Assert(inst != 0); return inst; }

        public IfcBurnerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBurnerTypeEnum_); return EnumValue<IfcBurnerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBurnerTypeEnum>.FromValue(value.Value, EnumNames.IfcBurnerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcBurnerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowFitting
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowFitting : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowFitting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowFitting(SdaiInstance instance) : base(instance) { }
        public IfcFlowFitting() : base(0) { }

        public static implicit operator IfcFlowFitting(SdaiInstance instance) => new IfcFlowFitting(instance);

        /// <summary>
        /// Create new instace of IfcFlowFitting and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowFitting Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowFitting"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFlowFitting"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCableCarrierFitting
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCableCarrierFitting : IfcFlowFitting
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCableCarrierFitting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCableCarrierFitting(SdaiInstance instance) : base(instance) { }
        public IfcCableCarrierFitting() : base(0) { }

        public static implicit operator IfcCableCarrierFitting(SdaiInstance instance) => new IfcCableCarrierFitting(instance);

        /// <summary>
        /// Create new instace of IfcCableCarrierFitting and returns object of this class to interact with
        /// </summary>
        public static new IfcCableCarrierFitting Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCableCarrierFitting"); Debug.Assert(inst != 0); return inst; }

        public IfcCableCarrierFittingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCableCarrierFittingTypeEnum_); return EnumValue<IfcCableCarrierFittingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCableCarrierFittingTypeEnum>.FromValue(value.Value, EnumNames.IfcCableCarrierFittingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCableCarrierFitting"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowFittingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowFittingType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowFittingType(SdaiInstance instance) : base(instance) { }
        public IfcFlowFittingType() : base(0) { }

        public static implicit operator IfcFlowFittingType(SdaiInstance instance) => new IfcFlowFittingType(instance);


        protected override TextValue EntityName() { return "IfcFlowFittingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCableCarrierFittingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCableCarrierFittingType : IfcFlowFittingType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCableCarrierFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCableCarrierFittingType(SdaiInstance instance) : base(instance) { }
        public IfcCableCarrierFittingType() : base(0) { }

        public static implicit operator IfcCableCarrierFittingType(SdaiInstance instance) => new IfcCableCarrierFittingType(instance);

        /// <summary>
        /// Create new instace of IfcCableCarrierFittingType and returns object of this class to interact with
        /// </summary>
        public static new IfcCableCarrierFittingType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCableCarrierFittingType"); Debug.Assert(inst != 0); return inst; }

        public IfcCableCarrierFittingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCableCarrierFittingTypeEnum_); return EnumValue<IfcCableCarrierFittingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCableCarrierFittingTypeEnum>.FromValue(value.Value, EnumNames.IfcCableCarrierFittingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCableCarrierFittingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowSegment : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowSegment(SdaiInstance instance) : base(instance) { }
        public IfcFlowSegment() : base(0) { }

        public static implicit operator IfcFlowSegment(SdaiInstance instance) => new IfcFlowSegment(instance);

        /// <summary>
        /// Create new instace of IfcFlowSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowSegment"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFlowSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCableCarrierSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCableCarrierSegment : IfcFlowSegment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCableCarrierSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCableCarrierSegment(SdaiInstance instance) : base(instance) { }
        public IfcCableCarrierSegment() : base(0) { }

        public static implicit operator IfcCableCarrierSegment(SdaiInstance instance) => new IfcCableCarrierSegment(instance);

        /// <summary>
        /// Create new instace of IfcCableCarrierSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcCableCarrierSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCableCarrierSegment"); Debug.Assert(inst != 0); return inst; }

        public IfcCableCarrierSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCableCarrierSegmentTypeEnum_); return EnumValue<IfcCableCarrierSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCableCarrierSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcCableCarrierSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCableCarrierSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowSegmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowSegmentType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowSegmentType(SdaiInstance instance) : base(instance) { }
        public IfcFlowSegmentType() : base(0) { }

        public static implicit operator IfcFlowSegmentType(SdaiInstance instance) => new IfcFlowSegmentType(instance);


        protected override TextValue EntityName() { return "IfcFlowSegmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCableCarrierSegmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCableCarrierSegmentType : IfcFlowSegmentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCableCarrierSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCableCarrierSegmentType(SdaiInstance instance) : base(instance) { }
        public IfcCableCarrierSegmentType() : base(0) { }

        public static implicit operator IfcCableCarrierSegmentType(SdaiInstance instance) => new IfcCableCarrierSegmentType(instance);

        /// <summary>
        /// Create new instace of IfcCableCarrierSegmentType and returns object of this class to interact with
        /// </summary>
        public static new IfcCableCarrierSegmentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCableCarrierSegmentType"); Debug.Assert(inst != 0); return inst; }

        public IfcCableCarrierSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCableCarrierSegmentTypeEnum_); return EnumValue<IfcCableCarrierSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCableCarrierSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcCableCarrierSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCableCarrierSegmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCableFitting
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCableFitting : IfcFlowFitting
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCableFitting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCableFitting(SdaiInstance instance) : base(instance) { }
        public IfcCableFitting() : base(0) { }

        public static implicit operator IfcCableFitting(SdaiInstance instance) => new IfcCableFitting(instance);

        /// <summary>
        /// Create new instace of IfcCableFitting and returns object of this class to interact with
        /// </summary>
        public static new IfcCableFitting Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCableFitting"); Debug.Assert(inst != 0); return inst; }

        public IfcCableFittingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCableFittingTypeEnum_); return EnumValue<IfcCableFittingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCableFittingTypeEnum>.FromValue(value.Value, EnumNames.IfcCableFittingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCableFitting"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCableFittingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCableFittingType : IfcFlowFittingType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCableFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCableFittingType(SdaiInstance instance) : base(instance) { }
        public IfcCableFittingType() : base(0) { }

        public static implicit operator IfcCableFittingType(SdaiInstance instance) => new IfcCableFittingType(instance);

        /// <summary>
        /// Create new instace of IfcCableFittingType and returns object of this class to interact with
        /// </summary>
        public static new IfcCableFittingType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCableFittingType"); Debug.Assert(inst != 0); return inst; }

        public IfcCableFittingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCableFittingTypeEnum_); return EnumValue<IfcCableFittingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCableFittingTypeEnum>.FromValue(value.Value, EnumNames.IfcCableFittingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCableFittingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCableSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCableSegment : IfcFlowSegment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCableSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCableSegment(SdaiInstance instance) : base(instance) { }
        public IfcCableSegment() : base(0) { }

        public static implicit operator IfcCableSegment(SdaiInstance instance) => new IfcCableSegment(instance);

        /// <summary>
        /// Create new instace of IfcCableSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcCableSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCableSegment"); Debug.Assert(inst != 0); return inst; }

        public IfcCableSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCableSegmentTypeEnum_); return EnumValue<IfcCableSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCableSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcCableSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCableSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCableSegmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCableSegmentType : IfcFlowSegmentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCableSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCableSegmentType(SdaiInstance instance) : base(instance) { }
        public IfcCableSegmentType() : base(0) { }

        public static implicit operator IfcCableSegmentType(SdaiInstance instance) => new IfcCableSegmentType(instance);

        /// <summary>
        /// Create new instace of IfcCableSegmentType and returns object of this class to interact with
        /// </summary>
        public static new IfcCableSegmentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCableSegmentType"); Debug.Assert(inst != 0); return inst; }

        public IfcCableSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCableSegmentTypeEnum_); return EnumValue<IfcCableSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCableSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcCableSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCableSegmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDeepFoundation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDeepFoundation : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDeepFoundation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDeepFoundation(SdaiInstance instance) : base(instance) { }
        public IfcDeepFoundation() : base(0) { }

        public static implicit operator IfcDeepFoundation(SdaiInstance instance) => new IfcDeepFoundation(instance);

        /// <summary>
        /// Create new instace of IfcDeepFoundation and returns object of this class to interact with
        /// </summary>
        public static new IfcDeepFoundation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDeepFoundation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcDeepFoundation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCaissonFoundation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCaissonFoundation : IfcDeepFoundation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCaissonFoundation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCaissonFoundation(SdaiInstance instance) : base(instance) { }
        public IfcCaissonFoundation() : base(0) { }

        public static implicit operator IfcCaissonFoundation(SdaiInstance instance) => new IfcCaissonFoundation(instance);

        /// <summary>
        /// Create new instace of IfcCaissonFoundation and returns object of this class to interact with
        /// </summary>
        public static new IfcCaissonFoundation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCaissonFoundation"); Debug.Assert(inst != 0); return inst; }

        public IfcCaissonFoundationTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCaissonFoundationTypeEnum_); return EnumValue<IfcCaissonFoundationTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCaissonFoundationTypeEnum>.FromValue(value.Value, EnumNames.IfcCaissonFoundationTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCaissonFoundation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDeepFoundationType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDeepFoundationType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDeepFoundationType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDeepFoundationType(SdaiInstance instance) : base(instance) { }
        public IfcDeepFoundationType() : base(0) { }

        public static implicit operator IfcDeepFoundationType(SdaiInstance instance) => new IfcDeepFoundationType(instance);

        /// <summary>
        /// Create new instace of IfcDeepFoundationType and returns object of this class to interact with
        /// </summary>
        public static new IfcDeepFoundationType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDeepFoundationType"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcDeepFoundationType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCaissonFoundationType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCaissonFoundationType : IfcDeepFoundationType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCaissonFoundationType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCaissonFoundationType(SdaiInstance instance) : base(instance) { }
        public IfcCaissonFoundationType() : base(0) { }

        public static implicit operator IfcCaissonFoundationType(SdaiInstance instance) => new IfcCaissonFoundationType(instance);

        /// <summary>
        /// Create new instace of IfcCaissonFoundationType and returns object of this class to interact with
        /// </summary>
        public static new IfcCaissonFoundationType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCaissonFoundationType"); Debug.Assert(inst != 0); return inst; }

        public IfcCaissonFoundationTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCaissonFoundationTypeEnum_); return EnumValue<IfcCaissonFoundationTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCaissonFoundationTypeEnum>.FromValue(value.Value, EnumNames.IfcCaissonFoundationTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCaissonFoundationType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPoint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPoint : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPoint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPoint(SdaiInstance instance) : base(instance) { }
        public IfcPoint() : base(0) { }

        public static implicit operator IfcPoint(SdaiInstance instance) => new IfcPoint(instance);


        protected override TextValue EntityName() { return "IfcPoint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianPoint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianPoint : IfcPoint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianPoint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianPoint(SdaiInstance instance) : base(instance) { }
        public IfcCartesianPoint() : base(0) { }

        public static implicit operator IfcCartesianPoint(SdaiInstance instance) => new IfcCartesianPoint(instance);

        /// <summary>
        /// Create new instace of IfcCartesianPoint and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianPoint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianPoint"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcLengthMeasure Coordinates { get { return (new ListOfIfcLengthMeasureSerializer()).FromAttr(m_instance, "Coordinates"); } }
        public void put_Coordinates(IEnumerable<double> lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "Coordinates"); }
        public void put_Coordinates_untyped(IEnumerable lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "Coordinates"); }

        protected override TextValue EntityName() { return "IfcCartesianPoint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianPointList
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianPointList : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianPointList
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianPointList(SdaiInstance instance) : base(instance) { }
        public IfcCartesianPointList() : base(0) { }

        public static implicit operator IfcCartesianPointList(SdaiInstance instance) => new IfcCartesianPointList(instance);


        protected override TextValue EntityName() { return "IfcCartesianPointList"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianPointList2D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianPointList2D : IfcCartesianPointList
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianPointList2D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianPointList2D(SdaiInstance instance) : base(instance) { }
        public IfcCartesianPointList2D() : base(0) { }

        public static implicit operator IfcCartesianPointList2D(SdaiInstance instance) => new IfcCartesianPointList2D(instance);

        /// <summary>
        /// Create new instace of IfcCartesianPointList2D and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianPointList2D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianPointList2D"); Debug.Assert(inst != 0); return inst; }

        public ListOfListOfIfcLengthMeasure CoordList { get { return (new ListOfListOfIfcLengthMeasureSerializer()).FromAttr(m_instance, "CoordList"); } }
        public void put_CoordList(IEnumerable<ListOfIfcLengthMeasure> lst) { (new ListOfListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "CoordList"); }
        public void put_CoordList_untyped(IEnumerable lst) { (new ListOfListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "CoordList"); }
        public ListOfIfcLabel TagList { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "TagList"); } }
        public void put_TagList(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "TagList"); }
        public void put_TagList_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "TagList"); }

        protected override TextValue EntityName() { return "IfcCartesianPointList2D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianPointList3D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianPointList3D : IfcCartesianPointList
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianPointList3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianPointList3D(SdaiInstance instance) : base(instance) { }
        public IfcCartesianPointList3D() : base(0) { }

        public static implicit operator IfcCartesianPointList3D(SdaiInstance instance) => new IfcCartesianPointList3D(instance);

        /// <summary>
        /// Create new instace of IfcCartesianPointList3D and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianPointList3D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianPointList3D"); Debug.Assert(inst != 0); return inst; }

        public ListOfListOfIfcLengthMeasure CoordList { get { return (new ListOfListOfIfcLengthMeasureSerializer()).FromAttr(m_instance, "CoordList"); } }
        public void put_CoordList(IEnumerable<ListOfIfcLengthMeasure> lst) { (new ListOfListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "CoordList"); }
        public void put_CoordList_untyped(IEnumerable lst) { (new ListOfListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "CoordList"); }
        public ListOfIfcLabel TagList { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "TagList"); } }
        public void put_TagList(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "TagList"); }
        public void put_TagList_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "TagList"); }

        protected override TextValue EntityName() { return "IfcCartesianPointList3D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianTransformationOperator : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianTransformationOperator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianTransformationOperator(SdaiInstance instance) : base(instance) { }
        public IfcCartesianTransformationOperator() : base(0) { }

        public static implicit operator IfcCartesianTransformationOperator(SdaiInstance instance) => new IfcCartesianTransformationOperator(instance);

        public IfcDirection Axis1 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis1", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis1", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcDirection Axis2 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis2", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis2", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCartesianPoint LocalOrigin 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LocalOrigin", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LocalOrigin", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Scale
            {
            get { return get_double("Scale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Scale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCartesianTransformationOperator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator2D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianTransformationOperator2D : IfcCartesianTransformationOperator
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianTransformationOperator2D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianTransformationOperator2D(SdaiInstance instance) : base(instance) { }
        public IfcCartesianTransformationOperator2D() : base(0) { }

        public static implicit operator IfcCartesianTransformationOperator2D(SdaiInstance instance) => new IfcCartesianTransformationOperator2D(instance);

        /// <summary>
        /// Create new instace of IfcCartesianTransformationOperator2D and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianTransformationOperator2D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator2D"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcCartesianTransformationOperator2D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator2DnonUniform
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianTransformationOperator2DnonUniform : IfcCartesianTransformationOperator2D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianTransformationOperator2DnonUniform
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianTransformationOperator2DnonUniform(SdaiInstance instance) : base(instance) { }
        public IfcCartesianTransformationOperator2DnonUniform() : base(0) { }

        public static implicit operator IfcCartesianTransformationOperator2DnonUniform(SdaiInstance instance) => new IfcCartesianTransformationOperator2DnonUniform(instance);

        /// <summary>
        /// Create new instace of IfcCartesianTransformationOperator2DnonUniform and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianTransformationOperator2DnonUniform Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator2DnonUniform"); Debug.Assert(inst != 0); return inst; }

        public double? Scale2
            {
            get { return get_double("Scale2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Scale2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCartesianTransformationOperator2DnonUniform"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator3D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianTransformationOperator3D : IfcCartesianTransformationOperator
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianTransformationOperator3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianTransformationOperator3D(SdaiInstance instance) : base(instance) { }
        public IfcCartesianTransformationOperator3D() : base(0) { }

        public static implicit operator IfcCartesianTransformationOperator3D(SdaiInstance instance) => new IfcCartesianTransformationOperator3D(instance);

        /// <summary>
        /// Create new instace of IfcCartesianTransformationOperator3D and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianTransformationOperator3D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator3D"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Axis3 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis3", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis3", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcCartesianTransformationOperator3D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator3DnonUniform
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCartesianTransformationOperator3DnonUniform : IfcCartesianTransformationOperator3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCartesianTransformationOperator3DnonUniform
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCartesianTransformationOperator3DnonUniform(SdaiInstance instance) : base(instance) { }
        public IfcCartesianTransformationOperator3DnonUniform() : base(0) { }

        public static implicit operator IfcCartesianTransformationOperator3DnonUniform(SdaiInstance instance) => new IfcCartesianTransformationOperator3DnonUniform(instance);

        /// <summary>
        /// Create new instace of IfcCartesianTransformationOperator3DnonUniform and returns object of this class to interact with
        /// </summary>
        public static new IfcCartesianTransformationOperator3DnonUniform Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator3DnonUniform"); Debug.Assert(inst != 0); return inst; }

        public double? Scale2
            {
            get { return get_double("Scale2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Scale2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Scale3
            {
            get { return get_double("Scale3", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Scale3", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCartesianTransformationOperator3DnonUniform"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCenterLineProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCenterLineProfileDef : IfcArbitraryOpenProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCenterLineProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCenterLineProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCenterLineProfileDef() : base(0) { }

        public static implicit operator IfcCenterLineProfileDef(SdaiInstance instance) => new IfcCenterLineProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCenterLineProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCenterLineProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCenterLineProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Thickness
            {
            get { return get_double("Thickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Thickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCenterLineProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcChiller
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcChiller : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcChiller
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcChiller(SdaiInstance instance) : base(instance) { }
        public IfcChiller() : base(0) { }

        public static implicit operator IfcChiller(SdaiInstance instance) => new IfcChiller(instance);

        /// <summary>
        /// Create new instace of IfcChiller and returns object of this class to interact with
        /// </summary>
        public static new IfcChiller Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcChiller"); Debug.Assert(inst != 0); return inst; }

        public IfcChillerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcChillerTypeEnum_); return EnumValue<IfcChillerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcChillerTypeEnum>.FromValue(value.Value, EnumNames.IfcChillerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcChiller"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcChillerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcChillerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcChillerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcChillerType(SdaiInstance instance) : base(instance) { }
        public IfcChillerType() : base(0) { }

        public static implicit operator IfcChillerType(SdaiInstance instance) => new IfcChillerType(instance);

        /// <summary>
        /// Create new instace of IfcChillerType and returns object of this class to interact with
        /// </summary>
        public static new IfcChillerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcChillerType"); Debug.Assert(inst != 0); return inst; }

        public IfcChillerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcChillerTypeEnum_); return EnumValue<IfcChillerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcChillerTypeEnum>.FromValue(value.Value, EnumNames.IfcChillerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcChillerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcChimney
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcChimney : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcChimney
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcChimney(SdaiInstance instance) : base(instance) { }
        public IfcChimney() : base(0) { }

        public static implicit operator IfcChimney(SdaiInstance instance) => new IfcChimney(instance);

        /// <summary>
        /// Create new instace of IfcChimney and returns object of this class to interact with
        /// </summary>
        public static new IfcChimney Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcChimney"); Debug.Assert(inst != 0); return inst; }

        public IfcChimneyTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcChimneyTypeEnum_); return EnumValue<IfcChimneyTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcChimneyTypeEnum>.FromValue(value.Value, EnumNames.IfcChimneyTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcChimney"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcChimneyType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcChimneyType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcChimneyType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcChimneyType(SdaiInstance instance) : base(instance) { }
        public IfcChimneyType() : base(0) { }

        public static implicit operator IfcChimneyType(SdaiInstance instance) => new IfcChimneyType(instance);

        /// <summary>
        /// Create new instace of IfcChimneyType and returns object of this class to interact with
        /// </summary>
        public static new IfcChimneyType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcChimneyType"); Debug.Assert(inst != 0); return inst; }

        public IfcChimneyTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcChimneyTypeEnum_); return EnumValue<IfcChimneyTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcChimneyTypeEnum>.FromValue(value.Value, EnumNames.IfcChimneyTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcChimneyType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConic : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConic(SdaiInstance instance) : base(instance) { }
        public IfcConic() : base(0) { }

        public static implicit operator IfcConic(SdaiInstance instance) => new IfcConic(instance);


        public IfcAxis2Placement Position
            {
            get { return new IfcAxis2Placement(m_instance, "Position", 0); }
            }

        protected override TextValue EntityName() { return "IfcConic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCircle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCircle : IfcConic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCircle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCircle(SdaiInstance instance) : base(instance) { }
        public IfcCircle() : base(0) { }

        public static implicit operator IfcCircle(SdaiInstance instance) => new IfcCircle(instance);

        /// <summary>
        /// Create new instace of IfcCircle and returns object of this class to interact with
        /// </summary>
        public static new IfcCircle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCircle"); Debug.Assert(inst != 0); return inst; }

        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCircle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCircleProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCircleProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCircleProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCircleProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCircleProfileDef() : base(0) { }

        public static implicit operator IfcCircleProfileDef(SdaiInstance instance) => new IfcCircleProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCircleProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCircleProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCircleProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCircleProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCircleHollowProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCircleHollowProfileDef : IfcCircleProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCircleHollowProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCircleHollowProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCircleHollowProfileDef() : base(0) { }

        public static implicit operator IfcCircleHollowProfileDef(SdaiInstance instance) => new IfcCircleHollowProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCircleHollowProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCircleHollowProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCircleHollowProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? WallThickness
            {
            get { return get_double("WallThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WallThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCircleHollowProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCivilElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCivilElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCivilElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCivilElement(SdaiInstance instance) : base(instance) { }
        public IfcCivilElement() : base(0) { }

        public static implicit operator IfcCivilElement(SdaiInstance instance) => new IfcCivilElement(instance);

        /// <summary>
        /// Create new instace of IfcCivilElement and returns object of this class to interact with
        /// </summary>
        public static new IfcCivilElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCivilElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcCivilElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCivilElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCivilElementType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCivilElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCivilElementType(SdaiInstance instance) : base(instance) { }
        public IfcCivilElementType() : base(0) { }

        public static implicit operator IfcCivilElementType(SdaiInstance instance) => new IfcCivilElementType(instance);

        /// <summary>
        /// Create new instace of IfcCivilElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcCivilElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCivilElementType"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcCivilElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternalInformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternalInformation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternalInformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternalInformation(SdaiInstance instance) : base(instance) { }
        public IfcExternalInformation() : base(0) { }

        public static implicit operator IfcExternalInformation(SdaiInstance instance) => new IfcExternalInformation(instance);


        protected override TextValue EntityName() { return "IfcExternalInformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcClassification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcClassification : IfcExternalInformation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcClassification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcClassification(SdaiInstance instance) : base(instance) { }
        public IfcClassification() : base(0) { }

        public static implicit operator IfcClassification(SdaiInstance instance) => new IfcClassification(instance);

        /// <summary>
        /// Create new instace of IfcClassification and returns object of this class to interact with
        /// </summary>
        public static new IfcClassification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcClassification"); Debug.Assert(inst != 0); return inst; }

        public TextValue Source
            {
            get { return get_string("Source", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Source", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Edition
            {
            get { return get_string("Edition", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Edition", ifcengine.sdaiSTRING, value); }
            }
        public TextValue EditionDate
            {
            get { return get_string("EditionDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "EditionDate", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Specification
            {
            get { return get_string("Specification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Specification", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcIdentifier ReferenceTokens { get { return (new ListOfIfcIdentifierSerializer()).FromAttr(m_instance, "ReferenceTokens"); } }
        public void put_ReferenceTokens(IEnumerable<TextValue> lst) { (new ListOfIfcIdentifierSerializer()).ToSdaiAggr(lst, m_instance, "ReferenceTokens"); }
        public void put_ReferenceTokens_untyped(IEnumerable lst) { (new ListOfIfcIdentifierSerializer()).ToSdaiAggr(lst, m_instance, "ReferenceTokens"); }
        public SetOfIfcRelAssociatesClassification ClassificationForObjects { get { return (new SetOfIfcRelAssociatesClassificationSerializer()).FromAttr(m_instance, "ClassificationForObjects"); } }
        public SetOfIfcClassificationReference HasReferences { get { return (new SetOfIfcClassificationReferenceSerializer()).FromAttr(m_instance, "HasReferences"); } }

        protected override TextValue EntityName() { return "IfcClassification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternalReference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternalReference : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternalReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternalReference(SdaiInstance instance) : base(instance) { }
        public IfcExternalReference() : base(0) { }

        public static implicit operator IfcExternalReference(SdaiInstance instance) => new IfcExternalReference(instance);

        public TextValue Location
            {
            get { return get_string("Location", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Location", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Identification
            {
            get { return get_string("Identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identification", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcExternalReferenceRelationship ExternalReferenceForResources { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "ExternalReferenceForResources"); } }

        protected override TextValue EntityName() { return "IfcExternalReference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcClassificationReference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcClassificationReference : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcClassificationReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcClassificationReference(SdaiInstance instance) : base(instance) { }
        public IfcClassificationReference() : base(0) { }

        public static implicit operator IfcClassificationReference(SdaiInstance instance) => new IfcClassificationReference(instance);

        /// <summary>
        /// Create new instace of IfcClassificationReference and returns object of this class to interact with
        /// </summary>
        public static new IfcClassificationReference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcClassificationReference"); Debug.Assert(inst != 0); return inst; }


        public IfcClassificationReferenceSelect ReferencedSource
            {
            get { return new IfcClassificationReferenceSelect(m_instance, "ReferencedSource", 0); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Sort
            {
            get { return get_string("Sort", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Sort", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelAssociatesClassification ClassificationRefForObjects { get { return (new SetOfIfcRelAssociatesClassificationSerializer()).FromAttr(m_instance, "ClassificationRefForObjects"); } }
        public SetOfIfcClassificationReference HasReferences { get { return (new SetOfIfcClassificationReferenceSerializer()).FromAttr(m_instance, "HasReferences"); } }

        protected override TextValue EntityName() { return "IfcClassificationReference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectedFaceSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectedFaceSet : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectedFaceSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectedFaceSet(SdaiInstance instance) : base(instance) { }
        public IfcConnectedFaceSet() : base(0) { }

        public static implicit operator IfcConnectedFaceSet(SdaiInstance instance) => new IfcConnectedFaceSet(instance);

        /// <summary>
        /// Create new instace of IfcConnectedFaceSet and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectedFaceSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectedFaceSet"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcFace CfsFaces { get { return (new SetOfIfcFaceSerializer()).FromAttr(m_instance, "CfsFaces"); } }
        public void put_CfsFaces(IEnumerable<IfcFace> lst) { (new SetOfIfcFaceSerializer()).ToSdaiAggr(lst, m_instance, "CfsFaces"); }
        public void put_CfsFaces_untyped(IEnumerable lst) { (new SetOfIfcFaceSerializer()).ToSdaiAggr(lst, m_instance, "CfsFaces"); }

        protected override TextValue EntityName() { return "IfcConnectedFaceSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcClosedShell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcClosedShell : IfcConnectedFaceSet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcClosedShell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcClosedShell(SdaiInstance instance) : base(instance) { }
        public IfcClosedShell() : base(0) { }

        public static implicit operator IfcClosedShell(SdaiInstance instance) => new IfcClosedShell(instance);

        /// <summary>
        /// Create new instace of IfcClosedShell and returns object of this class to interact with
        /// </summary>
        public static new IfcClosedShell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcClosedShell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcClosedShell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpiral
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpiral : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpiral
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpiral(SdaiInstance instance) : base(instance) { }
        public IfcSpiral() : base(0) { }

        public static implicit operator IfcSpiral(SdaiInstance instance) => new IfcSpiral(instance);


        public IfcAxis2Placement Position
            {
            get { return new IfcAxis2Placement(m_instance, "Position", 0); }
            }

        protected override TextValue EntityName() { return "IfcSpiral"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcClothoid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcClothoid : IfcSpiral
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcClothoid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcClothoid(SdaiInstance instance) : base(instance) { }
        public IfcClothoid() : base(0) { }

        public static implicit operator IfcClothoid(SdaiInstance instance) => new IfcClothoid(instance);

        /// <summary>
        /// Create new instace of IfcClothoid and returns object of this class to interact with
        /// </summary>
        public static new IfcClothoid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcClothoid"); Debug.Assert(inst != 0); return inst; }

        public double? ClothoidConstant
            {
            get { return get_double("ClothoidConstant", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ClothoidConstant", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcClothoid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCoil
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCoil : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCoil
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCoil(SdaiInstance instance) : base(instance) { }
        public IfcCoil() : base(0) { }

        public static implicit operator IfcCoil(SdaiInstance instance) => new IfcCoil(instance);

        /// <summary>
        /// Create new instace of IfcCoil and returns object of this class to interact with
        /// </summary>
        public static new IfcCoil Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCoil"); Debug.Assert(inst != 0); return inst; }

        public IfcCoilTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCoilTypeEnum_); return EnumValue<IfcCoilTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCoilTypeEnum>.FromValue(value.Value, EnumNames.IfcCoilTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCoil"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCoilType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCoilType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCoilType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCoilType(SdaiInstance instance) : base(instance) { }
        public IfcCoilType() : base(0) { }

        public static implicit operator IfcCoilType(SdaiInstance instance) => new IfcCoilType(instance);

        /// <summary>
        /// Create new instace of IfcCoilType and returns object of this class to interact with
        /// </summary>
        public static new IfcCoilType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCoilType"); Debug.Assert(inst != 0); return inst; }

        public IfcCoilTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCoilTypeEnum_); return EnumValue<IfcCoilTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCoilTypeEnum>.FromValue(value.Value, EnumNames.IfcCoilTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCoilType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcColourSpecification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcColourSpecification : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcColourSpecification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcColourSpecification(SdaiInstance instance) : base(instance) { }
        public IfcColourSpecification() : base(0) { }

        public static implicit operator IfcColourSpecification(SdaiInstance instance) => new IfcColourSpecification(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcColourSpecification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcColourRgb
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcColourRgb : IfcColourSpecification
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcColourRgb
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcColourRgb(SdaiInstance instance) : base(instance) { }
        public IfcColourRgb() : base(0) { }

        public static implicit operator IfcColourRgb(SdaiInstance instance) => new IfcColourRgb(instance);

        /// <summary>
        /// Create new instace of IfcColourRgb and returns object of this class to interact with
        /// </summary>
        public static new IfcColourRgb Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcColourRgb"); Debug.Assert(inst != 0); return inst; }

        public double? Red
            {
            get { return get_double("Red", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Red", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Green
            {
            get { return get_double("Green", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Green", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Blue
            {
            get { return get_double("Blue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Blue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcColourRgb"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcColourRgbList
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcColourRgbList : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcColourRgbList
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcColourRgbList(SdaiInstance instance) : base(instance) { }
        public IfcColourRgbList() : base(0) { }

        public static implicit operator IfcColourRgbList(SdaiInstance instance) => new IfcColourRgbList(instance);

        /// <summary>
        /// Create new instace of IfcColourRgbList and returns object of this class to interact with
        /// </summary>
        public static new IfcColourRgbList Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcColourRgbList"); Debug.Assert(inst != 0); return inst; }

        public ListOfListOfIfcNormalisedRatioMeasure ColourList { get { return (new ListOfListOfIfcNormalisedRatioMeasureSerializer()).FromAttr(m_instance, "ColourList"); } }
        public void put_ColourList(IEnumerable<ListOfIfcNormalisedRatioMeasure> lst) { (new ListOfListOfIfcNormalisedRatioMeasureSerializer()).ToSdaiAggr(lst, m_instance, "ColourList"); }
        public void put_ColourList_untyped(IEnumerable lst) { (new ListOfListOfIfcNormalisedRatioMeasureSerializer()).ToSdaiAggr(lst, m_instance, "ColourList"); }

        protected override TextValue EntityName() { return "IfcColourRgbList"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcColumn
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcColumn : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcColumn
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcColumn(SdaiInstance instance) : base(instance) { }
        public IfcColumn() : base(0) { }

        public static implicit operator IfcColumn(SdaiInstance instance) => new IfcColumn(instance);

        /// <summary>
        /// Create new instace of IfcColumn and returns object of this class to interact with
        /// </summary>
        public static new IfcColumn Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcColumn"); Debug.Assert(inst != 0); return inst; }

        public IfcColumnTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcColumnTypeEnum_); return EnumValue<IfcColumnTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcColumnTypeEnum>.FromValue(value.Value, EnumNames.IfcColumnTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcColumn"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcColumnType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcColumnType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcColumnType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcColumnType(SdaiInstance instance) : base(instance) { }
        public IfcColumnType() : base(0) { }

        public static implicit operator IfcColumnType(SdaiInstance instance) => new IfcColumnType(instance);

        /// <summary>
        /// Create new instace of IfcColumnType and returns object of this class to interact with
        /// </summary>
        public static new IfcColumnType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcColumnType"); Debug.Assert(inst != 0); return inst; }

        public IfcColumnTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcColumnTypeEnum_); return EnumValue<IfcColumnTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcColumnTypeEnum>.FromValue(value.Value, EnumNames.IfcColumnTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcColumnType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCommunicationsAppliance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCommunicationsAppliance : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCommunicationsAppliance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCommunicationsAppliance(SdaiInstance instance) : base(instance) { }
        public IfcCommunicationsAppliance() : base(0) { }

        public static implicit operator IfcCommunicationsAppliance(SdaiInstance instance) => new IfcCommunicationsAppliance(instance);

        /// <summary>
        /// Create new instace of IfcCommunicationsAppliance and returns object of this class to interact with
        /// </summary>
        public static new IfcCommunicationsAppliance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCommunicationsAppliance"); Debug.Assert(inst != 0); return inst; }

        public IfcCommunicationsApplianceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCommunicationsApplianceTypeEnum_); return EnumValue<IfcCommunicationsApplianceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCommunicationsApplianceTypeEnum>.FromValue(value.Value, EnumNames.IfcCommunicationsApplianceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCommunicationsAppliance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCommunicationsApplianceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCommunicationsApplianceType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCommunicationsApplianceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCommunicationsApplianceType(SdaiInstance instance) : base(instance) { }
        public IfcCommunicationsApplianceType() : base(0) { }

        public static implicit operator IfcCommunicationsApplianceType(SdaiInstance instance) => new IfcCommunicationsApplianceType(instance);

        /// <summary>
        /// Create new instace of IfcCommunicationsApplianceType and returns object of this class to interact with
        /// </summary>
        public static new IfcCommunicationsApplianceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCommunicationsApplianceType"); Debug.Assert(inst != 0); return inst; }

        public IfcCommunicationsApplianceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCommunicationsApplianceTypeEnum_); return EnumValue<IfcCommunicationsApplianceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCommunicationsApplianceTypeEnum>.FromValue(value.Value, EnumNames.IfcCommunicationsApplianceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCommunicationsApplianceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyAbstraction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyAbstraction : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyAbstraction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyAbstraction(SdaiInstance instance) : base(instance) { }
        public IfcPropertyAbstraction() : base(0) { }

        public static implicit operator IfcPropertyAbstraction(SdaiInstance instance) => new IfcPropertyAbstraction(instance);

        public SetOfIfcExternalReferenceRelationship HasExternalReferences { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReferences"); } }

        protected override TextValue EntityName() { return "IfcPropertyAbstraction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProperty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProperty : IfcPropertyAbstraction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProperty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProperty(SdaiInstance instance) : base(instance) { }
        public IfcProperty() : base(0) { }

        public static implicit operator IfcProperty(SdaiInstance instance) => new IfcProperty(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Specification
            {
            get { return get_string("Specification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Specification", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcPropertySet PartOfPset { get { return (new SetOfIfcPropertySetSerializer()).FromAttr(m_instance, "PartOfPset"); } }
        public SetOfIfcPropertyDependencyRelationship PropertyForDependance { get { return (new SetOfIfcPropertyDependencyRelationshipSerializer()).FromAttr(m_instance, "PropertyForDependance"); } }
        public SetOfIfcPropertyDependencyRelationship PropertyDependsOn { get { return (new SetOfIfcPropertyDependencyRelationshipSerializer()).FromAttr(m_instance, "PropertyDependsOn"); } }
        public SetOfIfcComplexProperty PartOfComplex { get { return (new SetOfIfcComplexPropertySerializer()).FromAttr(m_instance, "PartOfComplex"); } }
        public SetOfIfcResourceConstraintRelationship HasConstraints { get { return (new SetOfIfcResourceConstraintRelationshipSerializer()).FromAttr(m_instance, "HasConstraints"); } }
        public SetOfIfcResourceApprovalRelationship HasApprovals { get { return (new SetOfIfcResourceApprovalRelationshipSerializer()).FromAttr(m_instance, "HasApprovals"); } }

        protected override TextValue EntityName() { return "IfcProperty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcComplexProperty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcComplexProperty : IfcProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcComplexProperty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcComplexProperty(SdaiInstance instance) : base(instance) { }
        public IfcComplexProperty() : base(0) { }

        public static implicit operator IfcComplexProperty(SdaiInstance instance) => new IfcComplexProperty(instance);

        /// <summary>
        /// Create new instace of IfcComplexProperty and returns object of this class to interact with
        /// </summary>
        public static new IfcComplexProperty Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcComplexProperty"); Debug.Assert(inst != 0); return inst; }

        public TextValue UsageName
            {
            get { return get_string("UsageName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UsageName", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcProperty HasProperties { get { return (new SetOfIfcPropertySerializer()).FromAttr(m_instance, "HasProperties"); } }
        public void put_HasProperties(IEnumerable<IfcProperty> lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "HasProperties"); }
        public void put_HasProperties_untyped(IEnumerable lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "HasProperties"); }

        protected override TextValue EntityName() { return "IfcComplexProperty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyDefinition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyDefinition : IfcRoot
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyDefinition(SdaiInstance instance) : base(instance) { }
        public IfcPropertyDefinition() : base(0) { }

        public static implicit operator IfcPropertyDefinition(SdaiInstance instance) => new IfcPropertyDefinition(instance);

        public SetOfIfcRelDeclares HasContext { get { return (new SetOfIfcRelDeclaresSerializer()).FromAttr(m_instance, "HasContext"); } }
        public SetOfIfcRelAssociates HasAssociations { get { return (new SetOfIfcRelAssociatesSerializer()).FromAttr(m_instance, "HasAssociations"); } }

        protected override TextValue EntityName() { return "IfcPropertyDefinition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyTemplateDefinition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyTemplateDefinition : IfcPropertyDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyTemplateDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyTemplateDefinition(SdaiInstance instance) : base(instance) { }
        public IfcPropertyTemplateDefinition() : base(0) { }

        public static implicit operator IfcPropertyTemplateDefinition(SdaiInstance instance) => new IfcPropertyTemplateDefinition(instance);


        protected override TextValue EntityName() { return "IfcPropertyTemplateDefinition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyTemplate
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyTemplate : IfcPropertyTemplateDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyTemplate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyTemplate(SdaiInstance instance) : base(instance) { }
        public IfcPropertyTemplate() : base(0) { }

        public static implicit operator IfcPropertyTemplate(SdaiInstance instance) => new IfcPropertyTemplate(instance);

        public SetOfIfcComplexPropertyTemplate PartOfComplexTemplate { get { return (new SetOfIfcComplexPropertyTemplateSerializer()).FromAttr(m_instance, "PartOfComplexTemplate"); } }
        public SetOfIfcPropertySetTemplate PartOfPsetTemplate { get { return (new SetOfIfcPropertySetTemplateSerializer()).FromAttr(m_instance, "PartOfPsetTemplate"); } }

        protected override TextValue EntityName() { return "IfcPropertyTemplate"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcComplexPropertyTemplate
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcComplexPropertyTemplate : IfcPropertyTemplate
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcComplexPropertyTemplate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcComplexPropertyTemplate(SdaiInstance instance) : base(instance) { }
        public IfcComplexPropertyTemplate() : base(0) { }

        public static implicit operator IfcComplexPropertyTemplate(SdaiInstance instance) => new IfcComplexPropertyTemplate(instance);

        /// <summary>
        /// Create new instace of IfcComplexPropertyTemplate and returns object of this class to interact with
        /// </summary>
        public static new IfcComplexPropertyTemplate Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcComplexPropertyTemplate"); Debug.Assert(inst != 0); return inst; }

        public TextValue UsageName
            {
            get { return get_string("UsageName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UsageName", ifcengine.sdaiSTRING, value); }
            }
        public IfcComplexPropertyTemplateTypeEnum? TemplateType 
            { 
            get { var str = get_string("TemplateType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcComplexPropertyTemplateTypeEnum_); return EnumValue<IfcComplexPropertyTemplateTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcComplexPropertyTemplateTypeEnum>.FromValue(value.Value, EnumNames.IfcComplexPropertyTemplateTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "TemplateType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcPropertyTemplate HasPropertyTemplates { get { return (new SetOfIfcPropertyTemplateSerializer()).FromAttr(m_instance, "HasPropertyTemplates"); } }
        public void put_HasPropertyTemplates(IEnumerable<IfcPropertyTemplate> lst) { (new SetOfIfcPropertyTemplateSerializer()).ToSdaiAggr(lst, m_instance, "HasPropertyTemplates"); }
        public void put_HasPropertyTemplates_untyped(IEnumerable lst) { (new SetOfIfcPropertyTemplateSerializer()).ToSdaiAggr(lst, m_instance, "HasPropertyTemplates"); }

        protected override TextValue EntityName() { return "IfcComplexPropertyTemplate"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSegment : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSegment(SdaiInstance instance) : base(instance) { }
        public IfcSegment() : base(0) { }

        public static implicit operator IfcSegment(SdaiInstance instance) => new IfcSegment(instance);

        public IfcTransitionCode? Transition 
            { 
            get { var str = get_string("Transition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTransitionCode_); return EnumValue<IfcTransitionCode>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTransitionCode>.FromValue(value.Value, EnumNames.IfcTransitionCode_); ifcengine.sdaiPutAttrBN(m_instance, "Transition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcCompositeCurve UsingCurves { get { return (new SetOfIfcCompositeCurveSerializer()).FromAttr(m_instance, "UsingCurves"); } }

        protected override TextValue EntityName() { return "IfcSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCompositeCurveSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCompositeCurveSegment : IfcSegment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCompositeCurveSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCompositeCurveSegment(SdaiInstance instance) : base(instance) { }
        public IfcCompositeCurveSegment() : base(0) { }

        public static implicit operator IfcCompositeCurveSegment(SdaiInstance instance) => new IfcCompositeCurveSegment(instance);

        /// <summary>
        /// Create new instace of IfcCompositeCurveSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcCompositeCurveSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCompositeCurveSegment"); Debug.Assert(inst != 0); return inst; }

        public bool? SameSense
            {
            get { return get_bool("SameSense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SameSense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IfcCurve ParentCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ParentCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ParentCurve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcCompositeCurveSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCompositeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCompositeProfileDef : IfcProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCompositeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCompositeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCompositeProfileDef() : base(0) { }

        public static implicit operator IfcCompositeProfileDef(SdaiInstance instance) => new IfcCompositeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCompositeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCompositeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCompositeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProfileDef Profiles { get { return (new SetOfIfcProfileDefSerializer()).FromAttr(m_instance, "Profiles"); } }
        public void put_Profiles(IEnumerable<IfcProfileDef> lst) { (new SetOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "Profiles"); }
        public void put_Profiles_untyped(IEnumerable lst) { (new SetOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "Profiles"); }
        public TextValue Label
            {
            get { return get_string("Label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Label", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcCompositeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowMovingDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowMovingDevice : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowMovingDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowMovingDevice(SdaiInstance instance) : base(instance) { }
        public IfcFlowMovingDevice() : base(0) { }

        public static implicit operator IfcFlowMovingDevice(SdaiInstance instance) => new IfcFlowMovingDevice(instance);

        /// <summary>
        /// Create new instace of IfcFlowMovingDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowMovingDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowMovingDevice"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFlowMovingDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCompressor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCompressor : IfcFlowMovingDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCompressor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCompressor(SdaiInstance instance) : base(instance) { }
        public IfcCompressor() : base(0) { }

        public static implicit operator IfcCompressor(SdaiInstance instance) => new IfcCompressor(instance);

        /// <summary>
        /// Create new instace of IfcCompressor and returns object of this class to interact with
        /// </summary>
        public static new IfcCompressor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCompressor"); Debug.Assert(inst != 0); return inst; }

        public IfcCompressorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCompressorTypeEnum_); return EnumValue<IfcCompressorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCompressorTypeEnum>.FromValue(value.Value, EnumNames.IfcCompressorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCompressor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowMovingDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowMovingDeviceType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowMovingDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowMovingDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcFlowMovingDeviceType() : base(0) { }

        public static implicit operator IfcFlowMovingDeviceType(SdaiInstance instance) => new IfcFlowMovingDeviceType(instance);


        protected override TextValue EntityName() { return "IfcFlowMovingDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCompressorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCompressorType : IfcFlowMovingDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCompressorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCompressorType(SdaiInstance instance) : base(instance) { }
        public IfcCompressorType() : base(0) { }

        public static implicit operator IfcCompressorType(SdaiInstance instance) => new IfcCompressorType(instance);

        /// <summary>
        /// Create new instace of IfcCompressorType and returns object of this class to interact with
        /// </summary>
        public static new IfcCompressorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCompressorType"); Debug.Assert(inst != 0); return inst; }

        public IfcCompressorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCompressorTypeEnum_); return EnumValue<IfcCompressorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCompressorTypeEnum>.FromValue(value.Value, EnumNames.IfcCompressorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCompressorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCondenser
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCondenser : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCondenser
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCondenser(SdaiInstance instance) : base(instance) { }
        public IfcCondenser() : base(0) { }

        public static implicit operator IfcCondenser(SdaiInstance instance) => new IfcCondenser(instance);

        /// <summary>
        /// Create new instace of IfcCondenser and returns object of this class to interact with
        /// </summary>
        public static new IfcCondenser Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCondenser"); Debug.Assert(inst != 0); return inst; }

        public IfcCondenserTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCondenserTypeEnum_); return EnumValue<IfcCondenserTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCondenserTypeEnum>.FromValue(value.Value, EnumNames.IfcCondenserTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCondenser"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCondenserType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCondenserType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCondenserType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCondenserType(SdaiInstance instance) : base(instance) { }
        public IfcCondenserType() : base(0) { }

        public static implicit operator IfcCondenserType(SdaiInstance instance) => new IfcCondenserType(instance);

        /// <summary>
        /// Create new instace of IfcCondenserType and returns object of this class to interact with
        /// </summary>
        public static new IfcCondenserType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCondenserType"); Debug.Assert(inst != 0); return inst; }

        public IfcCondenserTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCondenserTypeEnum_); return EnumValue<IfcCondenserTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCondenserTypeEnum>.FromValue(value.Value, EnumNames.IfcCondenserTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCondenserType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionGeometry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionGeometry : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionGeometry(SdaiInstance instance) : base(instance) { }
        public IfcConnectionGeometry() : base(0) { }

        public static implicit operator IfcConnectionGeometry(SdaiInstance instance) => new IfcConnectionGeometry(instance);


        protected override TextValue EntityName() { return "IfcConnectionGeometry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionCurveGeometry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionCurveGeometry : IfcConnectionGeometry
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionCurveGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionCurveGeometry(SdaiInstance instance) : base(instance) { }
        public IfcConnectionCurveGeometry() : base(0) { }

        public static implicit operator IfcConnectionCurveGeometry(SdaiInstance instance) => new IfcConnectionCurveGeometry(instance);

        /// <summary>
        /// Create new instace of IfcConnectionCurveGeometry and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectionCurveGeometry Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectionCurveGeometry"); Debug.Assert(inst != 0); return inst; }


        public IfcCurveOrEdgeCurve CurveOnRelatingElement
            {
            get { return new IfcCurveOrEdgeCurve(m_instance, "CurveOnRelatingElement", 0); }
            }

        public IfcCurveOrEdgeCurve CurveOnRelatedElement
            {
            get { return new IfcCurveOrEdgeCurve(m_instance, "CurveOnRelatedElement", 0); }
            }

        protected override TextValue EntityName() { return "IfcConnectionCurveGeometry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionPointGeometry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionPointGeometry : IfcConnectionGeometry
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionPointGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionPointGeometry(SdaiInstance instance) : base(instance) { }
        public IfcConnectionPointGeometry() : base(0) { }

        public static implicit operator IfcConnectionPointGeometry(SdaiInstance instance) => new IfcConnectionPointGeometry(instance);

        /// <summary>
        /// Create new instace of IfcConnectionPointGeometry and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectionPointGeometry Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectionPointGeometry"); Debug.Assert(inst != 0); return inst; }


        public IfcPointOrVertexPoint PointOnRelatingElement
            {
            get { return new IfcPointOrVertexPoint(m_instance, "PointOnRelatingElement", 0); }
            }

        public IfcPointOrVertexPoint PointOnRelatedElement
            {
            get { return new IfcPointOrVertexPoint(m_instance, "PointOnRelatedElement", 0); }
            }

        protected override TextValue EntityName() { return "IfcConnectionPointGeometry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionPointEccentricity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionPointEccentricity : IfcConnectionPointGeometry
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionPointEccentricity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionPointEccentricity(SdaiInstance instance) : base(instance) { }
        public IfcConnectionPointEccentricity() : base(0) { }

        public static implicit operator IfcConnectionPointEccentricity(SdaiInstance instance) => new IfcConnectionPointEccentricity(instance);

        /// <summary>
        /// Create new instace of IfcConnectionPointEccentricity and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectionPointEccentricity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectionPointEccentricity"); Debug.Assert(inst != 0); return inst; }

        public double? EccentricityInX
            {
            get { return get_double("EccentricityInX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EccentricityInX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EccentricityInY
            {
            get { return get_double("EccentricityInY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EccentricityInY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EccentricityInZ
            {
            get { return get_double("EccentricityInZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EccentricityInZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcConnectionPointEccentricity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionSurfaceGeometry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionSurfaceGeometry : IfcConnectionGeometry
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionSurfaceGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionSurfaceGeometry(SdaiInstance instance) : base(instance) { }
        public IfcConnectionSurfaceGeometry() : base(0) { }

        public static implicit operator IfcConnectionSurfaceGeometry(SdaiInstance instance) => new IfcConnectionSurfaceGeometry(instance);

        /// <summary>
        /// Create new instace of IfcConnectionSurfaceGeometry and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectionSurfaceGeometry Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectionSurfaceGeometry"); Debug.Assert(inst != 0); return inst; }


        public IfcSurfaceOrFaceSurface SurfaceOnRelatingElement
            {
            get { return new IfcSurfaceOrFaceSurface(m_instance, "SurfaceOnRelatingElement", 0); }
            }

        public IfcSurfaceOrFaceSurface SurfaceOnRelatedElement
            {
            get { return new IfcSurfaceOrFaceSurface(m_instance, "SurfaceOnRelatedElement", 0); }
            }

        protected override TextValue EntityName() { return "IfcConnectionSurfaceGeometry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConnectionVolumeGeometry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConnectionVolumeGeometry : IfcConnectionGeometry
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConnectionVolumeGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConnectionVolumeGeometry(SdaiInstance instance) : base(instance) { }
        public IfcConnectionVolumeGeometry() : base(0) { }

        public static implicit operator IfcConnectionVolumeGeometry(SdaiInstance instance) => new IfcConnectionVolumeGeometry(instance);

        /// <summary>
        /// Create new instace of IfcConnectionVolumeGeometry and returns object of this class to interact with
        /// </summary>
        public static new IfcConnectionVolumeGeometry Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConnectionVolumeGeometry"); Debug.Assert(inst != 0); return inst; }


        public IfcSolidOrShell VolumeOnRelatingElement
            {
            get { return new IfcSolidOrShell(m_instance, "VolumeOnRelatingElement", 0); }
            }

        public IfcSolidOrShell VolumeOnRelatedElement
            {
            get { return new IfcSolidOrShell(m_instance, "VolumeOnRelatedElement", 0); }
            }

        protected override TextValue EntityName() { return "IfcConnectionVolumeGeometry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstraint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstraint : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstraint(SdaiInstance instance) : base(instance) { }
        public IfcConstraint() : base(0) { }

        public static implicit operator IfcConstraint(SdaiInstance instance) => new IfcConstraint(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public IfcConstraintEnum? ConstraintGrade 
            { 
            get { var str = get_string("ConstraintGrade", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConstraintEnum_); return EnumValue<IfcConstraintEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConstraintEnum>.FromValue(value.Value, EnumNames.IfcConstraintEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ConstraintGrade", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue ConstraintSource
            {
            get { return get_string("ConstraintSource", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ConstraintSource", ifcengine.sdaiSTRING, value); }
            }

        public IfcActorSelect CreatingActor
            {
            get { return new IfcActorSelect(m_instance, "CreatingActor", 0); }
            }
        public TextValue CreationTime
            {
            get { return get_string("CreationTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "CreationTime", ifcengine.sdaiSTRING, value); }
            }
        public TextValue UserDefinedGrade
            {
            get { return get_string("UserDefinedGrade", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedGrade", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcExternalReferenceRelationship HasExternalReferences { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReferences"); } }
        public SetOfIfcResourceConstraintRelationship PropertiesForConstraint { get { return (new SetOfIfcResourceConstraintRelationshipSerializer()).FromAttr(m_instance, "PropertiesForConstraint"); } }

        protected override TextValue EntityName() { return "IfcConstraint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcResource : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcResource(SdaiInstance instance) : base(instance) { }
        public IfcResource() : base(0) { }

        public static implicit operator IfcResource(SdaiInstance instance) => new IfcResource(instance);

        public TextValue Identification
            {
            get { return get_string("Identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identification", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LongDescription
            {
            get { return get_string("LongDescription", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongDescription", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelAssignsToResource ResourceOf { get { return (new SetOfIfcRelAssignsToResourceSerializer()).FromAttr(m_instance, "ResourceOf"); } }

        protected override TextValue EntityName() { return "IfcResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionResource : IfcResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionResource(SdaiInstance instance) : base(instance) { }
        public IfcConstructionResource() : base(0) { }

        public static implicit operator IfcConstructionResource(SdaiInstance instance) => new IfcConstructionResource(instance);

        public IfcResourceTime Usage 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Usage", ifcengine.sdaiINSTANCE, out inst); return new IfcResourceTime(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Usage", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcAppliedValue BaseCosts { get { return (new ListOfIfcAppliedValueSerializer()).FromAttr(m_instance, "BaseCosts"); } }
        public void put_BaseCosts(IEnumerable<IfcAppliedValue> lst) { (new ListOfIfcAppliedValueSerializer()).ToSdaiAggr(lst, m_instance, "BaseCosts"); }
        public void put_BaseCosts_untyped(IEnumerable lst) { (new ListOfIfcAppliedValueSerializer()).ToSdaiAggr(lst, m_instance, "BaseCosts"); }
        public IfcPhysicalQuantity BaseQuantity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BaseQuantity", ifcengine.sdaiINSTANCE, out inst); return new IfcPhysicalQuantity(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BaseQuantity", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcConstructionResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionEquipmentResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionEquipmentResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionEquipmentResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionEquipmentResource(SdaiInstance instance) : base(instance) { }
        public IfcConstructionEquipmentResource() : base(0) { }

        public static implicit operator IfcConstructionEquipmentResource(SdaiInstance instance) => new IfcConstructionEquipmentResource(instance);

        /// <summary>
        /// Create new instace of IfcConstructionEquipmentResource and returns object of this class to interact with
        /// </summary>
        public static new IfcConstructionEquipmentResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstructionEquipmentResource"); Debug.Assert(inst != 0); return inst; }

        public IfcConstructionEquipmentResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConstructionEquipmentResourceTypeEnum_); return EnumValue<IfcConstructionEquipmentResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConstructionEquipmentResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcConstructionEquipmentResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcConstructionEquipmentResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTypeResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTypeResource : IfcTypeObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTypeResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTypeResource(SdaiInstance instance) : base(instance) { }
        public IfcTypeResource() : base(0) { }

        public static implicit operator IfcTypeResource(SdaiInstance instance) => new IfcTypeResource(instance);

        public TextValue Identification
            {
            get { return get_string("Identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identification", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LongDescription
            {
            get { return get_string("LongDescription", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongDescription", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ResourceType
            {
            get { return get_string("ResourceType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ResourceType", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelAssignsToResource ResourceOf { get { return (new SetOfIfcRelAssignsToResourceSerializer()).FromAttr(m_instance, "ResourceOf"); } }

        protected override TextValue EntityName() { return "IfcTypeResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionResourceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionResourceType : IfcTypeResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionResourceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionResourceType(SdaiInstance instance) : base(instance) { }
        public IfcConstructionResourceType() : base(0) { }

        public static implicit operator IfcConstructionResourceType(SdaiInstance instance) => new IfcConstructionResourceType(instance);

        public ListOfIfcAppliedValue BaseCosts { get { return (new ListOfIfcAppliedValueSerializer()).FromAttr(m_instance, "BaseCosts"); } }
        public void put_BaseCosts(IEnumerable<IfcAppliedValue> lst) { (new ListOfIfcAppliedValueSerializer()).ToSdaiAggr(lst, m_instance, "BaseCosts"); }
        public void put_BaseCosts_untyped(IEnumerable lst) { (new ListOfIfcAppliedValueSerializer()).ToSdaiAggr(lst, m_instance, "BaseCosts"); }
        public IfcPhysicalQuantity BaseQuantity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BaseQuantity", ifcengine.sdaiINSTANCE, out inst); return new IfcPhysicalQuantity(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BaseQuantity", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcConstructionResourceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionEquipmentResourceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionEquipmentResourceType : IfcConstructionResourceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionEquipmentResourceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionEquipmentResourceType(SdaiInstance instance) : base(instance) { }
        public IfcConstructionEquipmentResourceType() : base(0) { }

        public static implicit operator IfcConstructionEquipmentResourceType(SdaiInstance instance) => new IfcConstructionEquipmentResourceType(instance);

        /// <summary>
        /// Create new instace of IfcConstructionEquipmentResourceType and returns object of this class to interact with
        /// </summary>
        public static new IfcConstructionEquipmentResourceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstructionEquipmentResourceType"); Debug.Assert(inst != 0); return inst; }

        public IfcConstructionEquipmentResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConstructionEquipmentResourceTypeEnum_); return EnumValue<IfcConstructionEquipmentResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConstructionEquipmentResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcConstructionEquipmentResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcConstructionEquipmentResourceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionMaterialResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionMaterialResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionMaterialResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionMaterialResource(SdaiInstance instance) : base(instance) { }
        public IfcConstructionMaterialResource() : base(0) { }

        public static implicit operator IfcConstructionMaterialResource(SdaiInstance instance) => new IfcConstructionMaterialResource(instance);

        /// <summary>
        /// Create new instace of IfcConstructionMaterialResource and returns object of this class to interact with
        /// </summary>
        public static new IfcConstructionMaterialResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstructionMaterialResource"); Debug.Assert(inst != 0); return inst; }

        public IfcConstructionMaterialResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConstructionMaterialResourceTypeEnum_); return EnumValue<IfcConstructionMaterialResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConstructionMaterialResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcConstructionMaterialResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcConstructionMaterialResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionMaterialResourceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionMaterialResourceType : IfcConstructionResourceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionMaterialResourceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionMaterialResourceType(SdaiInstance instance) : base(instance) { }
        public IfcConstructionMaterialResourceType() : base(0) { }

        public static implicit operator IfcConstructionMaterialResourceType(SdaiInstance instance) => new IfcConstructionMaterialResourceType(instance);

        /// <summary>
        /// Create new instace of IfcConstructionMaterialResourceType and returns object of this class to interact with
        /// </summary>
        public static new IfcConstructionMaterialResourceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstructionMaterialResourceType"); Debug.Assert(inst != 0); return inst; }

        public IfcConstructionMaterialResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConstructionMaterialResourceTypeEnum_); return EnumValue<IfcConstructionMaterialResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConstructionMaterialResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcConstructionMaterialResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcConstructionMaterialResourceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionProductResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionProductResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionProductResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionProductResource(SdaiInstance instance) : base(instance) { }
        public IfcConstructionProductResource() : base(0) { }

        public static implicit operator IfcConstructionProductResource(SdaiInstance instance) => new IfcConstructionProductResource(instance);

        /// <summary>
        /// Create new instace of IfcConstructionProductResource and returns object of this class to interact with
        /// </summary>
        public static new IfcConstructionProductResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstructionProductResource"); Debug.Assert(inst != 0); return inst; }

        public IfcConstructionProductResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConstructionProductResourceTypeEnum_); return EnumValue<IfcConstructionProductResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConstructionProductResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcConstructionProductResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcConstructionProductResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConstructionProductResourceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConstructionProductResourceType : IfcConstructionResourceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConstructionProductResourceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConstructionProductResourceType(SdaiInstance instance) : base(instance) { }
        public IfcConstructionProductResourceType() : base(0) { }

        public static implicit operator IfcConstructionProductResourceType(SdaiInstance instance) => new IfcConstructionProductResourceType(instance);

        /// <summary>
        /// Create new instace of IfcConstructionProductResourceType and returns object of this class to interact with
        /// </summary>
        public static new IfcConstructionProductResourceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConstructionProductResourceType"); Debug.Assert(inst != 0); return inst; }

        public IfcConstructionProductResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConstructionProductResourceTypeEnum_); return EnumValue<IfcConstructionProductResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConstructionProductResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcConstructionProductResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcConstructionProductResourceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcContext
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcContext : IfcObjectDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcContext
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcContext(SdaiInstance instance) : base(instance) { }
        public IfcContext() : base(0) { }

        public static implicit operator IfcContext(SdaiInstance instance) => new IfcContext(instance);

        public TextValue ObjectType
            {
            get { return get_string("ObjectType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ObjectType", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LongName
            {
            get { return get_string("LongName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongName", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Phase
            {
            get { return get_string("Phase", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Phase", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRepresentationContext RepresentationContexts { get { return (new SetOfIfcRepresentationContextSerializer()).FromAttr(m_instance, "RepresentationContexts"); } }
        public void put_RepresentationContexts(IEnumerable<IfcRepresentationContext> lst) { (new SetOfIfcRepresentationContextSerializer()).ToSdaiAggr(lst, m_instance, "RepresentationContexts"); }
        public void put_RepresentationContexts_untyped(IEnumerable lst) { (new SetOfIfcRepresentationContextSerializer()).ToSdaiAggr(lst, m_instance, "RepresentationContexts"); }
        public IfcUnitAssignment UnitsInContext 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "UnitsInContext", ifcengine.sdaiINSTANCE, out inst); return new IfcUnitAssignment(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "UnitsInContext", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcRelDefinesByProperties IsDefinedBy { get { return (new SetOfIfcRelDefinesByPropertiesSerializer()).FromAttr(m_instance, "IsDefinedBy"); } }
        public SetOfIfcRelDeclares Declares { get { return (new SetOfIfcRelDeclaresSerializer()).FromAttr(m_instance, "Declares"); } }

        protected override TextValue EntityName() { return "IfcContext"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcNamedUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcNamedUnit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcNamedUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcNamedUnit(SdaiInstance instance) : base(instance) { }
        public IfcNamedUnit() : base(0) { }

        public static implicit operator IfcNamedUnit(SdaiInstance instance) => new IfcNamedUnit(instance);

        public IfcDimensionalExponents Dimensions 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Dimensions", ifcengine.sdaiINSTANCE, out inst); return new IfcDimensionalExponents(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Dimensions", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcUnitEnum? UnitType 
            { 
            get { var str = get_string("UnitType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcUnitEnum_); return EnumValue<IfcUnitEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcUnitEnum>.FromValue(value.Value, EnumNames.IfcUnitEnum_); ifcengine.sdaiPutAttrBN(m_instance, "UnitType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcNamedUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcContextDependentUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcContextDependentUnit : IfcNamedUnit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcContextDependentUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcContextDependentUnit(SdaiInstance instance) : base(instance) { }
        public IfcContextDependentUnit() : base(0) { }

        public static implicit operator IfcContextDependentUnit(SdaiInstance instance) => new IfcContextDependentUnit(instance);

        /// <summary>
        /// Create new instace of IfcContextDependentUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcContextDependentUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcContextDependentUnit"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcExternalReferenceRelationship HasExternalReference { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReference"); } }

        protected override TextValue EntityName() { return "IfcContextDependentUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcController
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcController : IfcDistributionControlElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcController
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcController(SdaiInstance instance) : base(instance) { }
        public IfcController() : base(0) { }

        public static implicit operator IfcController(SdaiInstance instance) => new IfcController(instance);

        /// <summary>
        /// Create new instace of IfcController and returns object of this class to interact with
        /// </summary>
        public static new IfcController Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcController"); Debug.Assert(inst != 0); return inst; }

        public IfcControllerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcControllerTypeEnum_); return EnumValue<IfcControllerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcControllerTypeEnum>.FromValue(value.Value, EnumNames.IfcControllerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcController"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcControllerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcControllerType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcControllerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcControllerType(SdaiInstance instance) : base(instance) { }
        public IfcControllerType() : base(0) { }

        public static implicit operator IfcControllerType(SdaiInstance instance) => new IfcControllerType(instance);

        /// <summary>
        /// Create new instace of IfcControllerType and returns object of this class to interact with
        /// </summary>
        public static new IfcControllerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcControllerType"); Debug.Assert(inst != 0); return inst; }

        public IfcControllerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcControllerTypeEnum_); return EnumValue<IfcControllerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcControllerTypeEnum>.FromValue(value.Value, EnumNames.IfcControllerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcControllerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConversionBasedUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConversionBasedUnit : IfcNamedUnit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConversionBasedUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConversionBasedUnit(SdaiInstance instance) : base(instance) { }
        public IfcConversionBasedUnit() : base(0) { }

        public static implicit operator IfcConversionBasedUnit(SdaiInstance instance) => new IfcConversionBasedUnit(instance);

        /// <summary>
        /// Create new instace of IfcConversionBasedUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcConversionBasedUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConversionBasedUnit"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public IfcMeasureWithUnit ConversionFactor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ConversionFactor", ifcengine.sdaiINSTANCE, out inst); return new IfcMeasureWithUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ConversionFactor", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcExternalReferenceRelationship HasExternalReference { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReference"); } }

        protected override TextValue EntityName() { return "IfcConversionBasedUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConversionBasedUnitWithOffset
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConversionBasedUnitWithOffset : IfcConversionBasedUnit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConversionBasedUnitWithOffset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConversionBasedUnitWithOffset(SdaiInstance instance) : base(instance) { }
        public IfcConversionBasedUnitWithOffset() : base(0) { }

        public static implicit operator IfcConversionBasedUnitWithOffset(SdaiInstance instance) => new IfcConversionBasedUnitWithOffset(instance);

        /// <summary>
        /// Create new instace of IfcConversionBasedUnitWithOffset and returns object of this class to interact with
        /// </summary>
        public static new IfcConversionBasedUnitWithOffset Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConversionBasedUnitWithOffset"); Debug.Assert(inst != 0); return inst; }

        public double? ConversionOffset
            {
            get { return get_double("ConversionOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ConversionOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcConversionBasedUnitWithOffset"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConveyorSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConveyorSegment : IfcFlowSegment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConveyorSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConveyorSegment(SdaiInstance instance) : base(instance) { }
        public IfcConveyorSegment() : base(0) { }

        public static implicit operator IfcConveyorSegment(SdaiInstance instance) => new IfcConveyorSegment(instance);

        /// <summary>
        /// Create new instace of IfcConveyorSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcConveyorSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConveyorSegment"); Debug.Assert(inst != 0); return inst; }

        public IfcConveyorSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConveyorSegmentTypeEnum_); return EnumValue<IfcConveyorSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConveyorSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcConveyorSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcConveyorSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcConveyorSegmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcConveyorSegmentType : IfcFlowSegmentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcConveyorSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcConveyorSegmentType(SdaiInstance instance) : base(instance) { }
        public IfcConveyorSegmentType() : base(0) { }

        public static implicit operator IfcConveyorSegmentType(SdaiInstance instance) => new IfcConveyorSegmentType(instance);

        /// <summary>
        /// Create new instace of IfcConveyorSegmentType and returns object of this class to interact with
        /// </summary>
        public static new IfcConveyorSegmentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcConveyorSegmentType"); Debug.Assert(inst != 0); return inst; }

        public IfcConveyorSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConveyorSegmentTypeEnum_); return EnumValue<IfcConveyorSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConveyorSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcConveyorSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcConveyorSegmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCooledBeam
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCooledBeam : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCooledBeam
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCooledBeam(SdaiInstance instance) : base(instance) { }
        public IfcCooledBeam() : base(0) { }

        public static implicit operator IfcCooledBeam(SdaiInstance instance) => new IfcCooledBeam(instance);

        /// <summary>
        /// Create new instace of IfcCooledBeam and returns object of this class to interact with
        /// </summary>
        public static new IfcCooledBeam Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCooledBeam"); Debug.Assert(inst != 0); return inst; }

        public IfcCooledBeamTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCooledBeamTypeEnum_); return EnumValue<IfcCooledBeamTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCooledBeamTypeEnum>.FromValue(value.Value, EnumNames.IfcCooledBeamTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCooledBeam"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCooledBeamType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCooledBeamType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCooledBeamType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCooledBeamType(SdaiInstance instance) : base(instance) { }
        public IfcCooledBeamType() : base(0) { }

        public static implicit operator IfcCooledBeamType(SdaiInstance instance) => new IfcCooledBeamType(instance);

        /// <summary>
        /// Create new instace of IfcCooledBeamType and returns object of this class to interact with
        /// </summary>
        public static new IfcCooledBeamType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCooledBeamType"); Debug.Assert(inst != 0); return inst; }

        public IfcCooledBeamTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCooledBeamTypeEnum_); return EnumValue<IfcCooledBeamTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCooledBeamTypeEnum>.FromValue(value.Value, EnumNames.IfcCooledBeamTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCooledBeamType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCoolingTower
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCoolingTower : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCoolingTower
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCoolingTower(SdaiInstance instance) : base(instance) { }
        public IfcCoolingTower() : base(0) { }

        public static implicit operator IfcCoolingTower(SdaiInstance instance) => new IfcCoolingTower(instance);

        /// <summary>
        /// Create new instace of IfcCoolingTower and returns object of this class to interact with
        /// </summary>
        public static new IfcCoolingTower Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCoolingTower"); Debug.Assert(inst != 0); return inst; }

        public IfcCoolingTowerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCoolingTowerTypeEnum_); return EnumValue<IfcCoolingTowerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCoolingTowerTypeEnum>.FromValue(value.Value, EnumNames.IfcCoolingTowerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCoolingTower"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCoolingTowerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCoolingTowerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCoolingTowerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCoolingTowerType(SdaiInstance instance) : base(instance) { }
        public IfcCoolingTowerType() : base(0) { }

        public static implicit operator IfcCoolingTowerType(SdaiInstance instance) => new IfcCoolingTowerType(instance);

        /// <summary>
        /// Create new instace of IfcCoolingTowerType and returns object of this class to interact with
        /// </summary>
        public static new IfcCoolingTowerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCoolingTowerType"); Debug.Assert(inst != 0); return inst; }

        public IfcCoolingTowerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCoolingTowerTypeEnum_); return EnumValue<IfcCoolingTowerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCoolingTowerTypeEnum>.FromValue(value.Value, EnumNames.IfcCoolingTowerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCoolingTowerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCoordinateOperation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCoordinateOperation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCoordinateOperation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCoordinateOperation(SdaiInstance instance) : base(instance) { }
        public IfcCoordinateOperation() : base(0) { }

        public static implicit operator IfcCoordinateOperation(SdaiInstance instance) => new IfcCoordinateOperation(instance);


        public IfcCoordinateReferenceSystemSelect SourceCRS
            {
            get { return new IfcCoordinateReferenceSystemSelect(m_instance, "SourceCRS", 0); }
            }
        public IfcCoordinateReferenceSystem TargetCRS 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TargetCRS", ifcengine.sdaiINSTANCE, out inst); return new IfcCoordinateReferenceSystem(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TargetCRS", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcCoordinateOperation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCoordinateReferenceSystem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCoordinateReferenceSystem : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCoordinateReferenceSystem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCoordinateReferenceSystem(SdaiInstance instance) : base(instance) { }
        public IfcCoordinateReferenceSystem() : base(0) { }

        public static implicit operator IfcCoordinateReferenceSystem(SdaiInstance instance) => new IfcCoordinateReferenceSystem(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue GeodeticDatum
            {
            get { return get_string("GeodeticDatum", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "GeodeticDatum", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcCoordinateOperation HasCoordinateOperation { get { return (new SetOfIfcCoordinateOperationSerializer()).FromAttr(m_instance, "HasCoordinateOperation"); } }
        public SetOfIfcWellKnownText WellKnownText { get { return (new SetOfIfcWellKnownTextSerializer()).FromAttr(m_instance, "WellKnownText"); } }

        protected override TextValue EntityName() { return "IfcCoordinateReferenceSystem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCosineSpiral
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCosineSpiral : IfcSpiral
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCosineSpiral
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCosineSpiral(SdaiInstance instance) : base(instance) { }
        public IfcCosineSpiral() : base(0) { }

        public static implicit operator IfcCosineSpiral(SdaiInstance instance) => new IfcCosineSpiral(instance);

        /// <summary>
        /// Create new instace of IfcCosineSpiral and returns object of this class to interact with
        /// </summary>
        public static new IfcCosineSpiral Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCosineSpiral"); Debug.Assert(inst != 0); return inst; }

        public double? CosineTerm
            {
            get { return get_double("CosineTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CosineTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ConstantTerm
            {
            get { return get_double("ConstantTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ConstantTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCosineSpiral"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCostItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCostItem : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCostItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCostItem(SdaiInstance instance) : base(instance) { }
        public IfcCostItem() : base(0) { }

        public static implicit operator IfcCostItem(SdaiInstance instance) => new IfcCostItem(instance);

        /// <summary>
        /// Create new instace of IfcCostItem and returns object of this class to interact with
        /// </summary>
        public static new IfcCostItem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCostItem"); Debug.Assert(inst != 0); return inst; }

        public IfcCostItemTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCostItemTypeEnum_); return EnumValue<IfcCostItemTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCostItemTypeEnum>.FromValue(value.Value, EnumNames.IfcCostItemTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public ListOfIfcCostValue CostValues { get { return (new ListOfIfcCostValueSerializer()).FromAttr(m_instance, "CostValues"); } }
        public void put_CostValues(IEnumerable<IfcCostValue> lst) { (new ListOfIfcCostValueSerializer()).ToSdaiAggr(lst, m_instance, "CostValues"); }
        public void put_CostValues_untyped(IEnumerable lst) { (new ListOfIfcCostValueSerializer()).ToSdaiAggr(lst, m_instance, "CostValues"); }
        public ListOfIfcPhysicalQuantity CostQuantities { get { return (new ListOfIfcPhysicalQuantitySerializer()).FromAttr(m_instance, "CostQuantities"); } }
        public void put_CostQuantities(IEnumerable<IfcPhysicalQuantity> lst) { (new ListOfIfcPhysicalQuantitySerializer()).ToSdaiAggr(lst, m_instance, "CostQuantities"); }
        public void put_CostQuantities_untyped(IEnumerable lst) { (new ListOfIfcPhysicalQuantitySerializer()).ToSdaiAggr(lst, m_instance, "CostQuantities"); }

        protected override TextValue EntityName() { return "IfcCostItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCostSchedule
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCostSchedule : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCostSchedule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCostSchedule(SdaiInstance instance) : base(instance) { }
        public IfcCostSchedule() : base(0) { }

        public static implicit operator IfcCostSchedule(SdaiInstance instance) => new IfcCostSchedule(instance);

        /// <summary>
        /// Create new instace of IfcCostSchedule and returns object of this class to interact with
        /// </summary>
        public static new IfcCostSchedule Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCostSchedule"); Debug.Assert(inst != 0); return inst; }

        public IfcCostScheduleTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCostScheduleTypeEnum_); return EnumValue<IfcCostScheduleTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCostScheduleTypeEnum>.FromValue(value.Value, EnumNames.IfcCostScheduleTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue Status
            {
            get { return get_string("Status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Status", ifcengine.sdaiSTRING, value); }
            }
        public TextValue SubmittedOn
            {
            get { return get_string("SubmittedOn", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "SubmittedOn", ifcengine.sdaiSTRING, value); }
            }
        public TextValue UpdateDate
            {
            get { return get_string("UpdateDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UpdateDate", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcCostSchedule"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCostValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCostValue : IfcAppliedValue
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCostValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCostValue(SdaiInstance instance) : base(instance) { }
        public IfcCostValue() : base(0) { }

        public static implicit operator IfcCostValue(SdaiInstance instance) => new IfcCostValue(instance);

        /// <summary>
        /// Create new instace of IfcCostValue and returns object of this class to interact with
        /// </summary>
        public static new IfcCostValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCostValue"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcCostValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCourse
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCourse : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCourse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCourse(SdaiInstance instance) : base(instance) { }
        public IfcCourse() : base(0) { }

        public static implicit operator IfcCourse(SdaiInstance instance) => new IfcCourse(instance);

        /// <summary>
        /// Create new instace of IfcCourse and returns object of this class to interact with
        /// </summary>
        public static new IfcCourse Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCourse"); Debug.Assert(inst != 0); return inst; }

        public IfcCourseTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCourseTypeEnum_); return EnumValue<IfcCourseTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCourseTypeEnum>.FromValue(value.Value, EnumNames.IfcCourseTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCourse"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCourseType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCourseType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCourseType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCourseType(SdaiInstance instance) : base(instance) { }
        public IfcCourseType() : base(0) { }

        public static implicit operator IfcCourseType(SdaiInstance instance) => new IfcCourseType(instance);

        /// <summary>
        /// Create new instace of IfcCourseType and returns object of this class to interact with
        /// </summary>
        public static new IfcCourseType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCourseType"); Debug.Assert(inst != 0); return inst; }

        public IfcCourseTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCourseTypeEnum_); return EnumValue<IfcCourseTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCourseTypeEnum>.FromValue(value.Value, EnumNames.IfcCourseTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCourseType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCovering
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCovering : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCovering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCovering(SdaiInstance instance) : base(instance) { }
        public IfcCovering() : base(0) { }

        public static implicit operator IfcCovering(SdaiInstance instance) => new IfcCovering(instance);

        /// <summary>
        /// Create new instace of IfcCovering and returns object of this class to interact with
        /// </summary>
        public static new IfcCovering Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCovering"); Debug.Assert(inst != 0); return inst; }

        public IfcCoveringTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCoveringTypeEnum_); return EnumValue<IfcCoveringTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCoveringTypeEnum>.FromValue(value.Value, EnumNames.IfcCoveringTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcRelCoversSpaces CoversSpaces { get { return (new SetOfIfcRelCoversSpacesSerializer()).FromAttr(m_instance, "CoversSpaces"); } }
        public SetOfIfcRelCoversBldgElements CoversElements { get { return (new SetOfIfcRelCoversBldgElementsSerializer()).FromAttr(m_instance, "CoversElements"); } }

        protected override TextValue EntityName() { return "IfcCovering"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCoveringType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCoveringType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCoveringType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCoveringType(SdaiInstance instance) : base(instance) { }
        public IfcCoveringType() : base(0) { }

        public static implicit operator IfcCoveringType(SdaiInstance instance) => new IfcCoveringType(instance);

        /// <summary>
        /// Create new instace of IfcCoveringType and returns object of this class to interact with
        /// </summary>
        public static new IfcCoveringType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCoveringType"); Debug.Assert(inst != 0); return inst; }

        public IfcCoveringTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCoveringTypeEnum_); return EnumValue<IfcCoveringTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCoveringTypeEnum>.FromValue(value.Value, EnumNames.IfcCoveringTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCoveringType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCrewResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCrewResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCrewResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCrewResource(SdaiInstance instance) : base(instance) { }
        public IfcCrewResource() : base(0) { }

        public static implicit operator IfcCrewResource(SdaiInstance instance) => new IfcCrewResource(instance);

        /// <summary>
        /// Create new instace of IfcCrewResource and returns object of this class to interact with
        /// </summary>
        public static new IfcCrewResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCrewResource"); Debug.Assert(inst != 0); return inst; }

        public IfcCrewResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCrewResourceTypeEnum_); return EnumValue<IfcCrewResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCrewResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcCrewResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCrewResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCrewResourceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCrewResourceType : IfcConstructionResourceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCrewResourceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCrewResourceType(SdaiInstance instance) : base(instance) { }
        public IfcCrewResourceType() : base(0) { }

        public static implicit operator IfcCrewResourceType(SdaiInstance instance) => new IfcCrewResourceType(instance);

        /// <summary>
        /// Create new instace of IfcCrewResourceType and returns object of this class to interact with
        /// </summary>
        public static new IfcCrewResourceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCrewResourceType"); Debug.Assert(inst != 0); return inst; }

        public IfcCrewResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCrewResourceTypeEnum_); return EnumValue<IfcCrewResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCrewResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcCrewResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCrewResourceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCsgSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCsgSolid : IfcSolidModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCsgSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCsgSolid(SdaiInstance instance) : base(instance) { }
        public IfcCsgSolid() : base(0) { }

        public static implicit operator IfcCsgSolid(SdaiInstance instance) => new IfcCsgSolid(instance);

        /// <summary>
        /// Create new instace of IfcCsgSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcCsgSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCsgSolid"); Debug.Assert(inst != 0); return inst; }


        public IfcCsgSelect TreeRootExpression
            {
            get { return new IfcCsgSelect(m_instance, "TreeRootExpression", 0); }
            }

        protected override TextValue EntityName() { return "IfcCsgSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcCShapeProfileDef() : base(0) { }

        public static implicit operator IfcCShapeProfileDef(SdaiInstance instance) => new IfcCShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcCShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcCShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Width
            {
            get { return get_double("Width", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Width", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WallThickness
            {
            get { return get_double("WallThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WallThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Girth
            {
            get { return get_double("Girth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Girth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? InternalFilletRadius
            {
            get { return get_double("InternalFilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InternalFilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurrencyRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurrencyRelationship : IfcResourceLevelRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurrencyRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurrencyRelationship(SdaiInstance instance) : base(instance) { }
        public IfcCurrencyRelationship() : base(0) { }

        public static implicit operator IfcCurrencyRelationship(SdaiInstance instance) => new IfcCurrencyRelationship(instance);

        /// <summary>
        /// Create new instace of IfcCurrencyRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcCurrencyRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurrencyRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcMonetaryUnit RelatingMonetaryUnit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingMonetaryUnit", ifcengine.sdaiINSTANCE, out inst); return new IfcMonetaryUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingMonetaryUnit", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcMonetaryUnit RelatedMonetaryUnit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedMonetaryUnit", ifcengine.sdaiINSTANCE, out inst); return new IfcMonetaryUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedMonetaryUnit", ifcengine.sdaiINSTANCE, i); }
            }
        public double? ExchangeRate
            {
            get { return get_double("ExchangeRate", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ExchangeRate", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue RateDateTime
            {
            get { return get_string("RateDateTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RateDateTime", ifcengine.sdaiSTRING, value); }
            }
        public IfcLibraryInformation RateSource 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RateSource", ifcengine.sdaiINSTANCE, out inst); return new IfcLibraryInformation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RateSource", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcCurrencyRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurtainWall
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurtainWall : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurtainWall
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurtainWall(SdaiInstance instance) : base(instance) { }
        public IfcCurtainWall() : base(0) { }

        public static implicit operator IfcCurtainWall(SdaiInstance instance) => new IfcCurtainWall(instance);

        /// <summary>
        /// Create new instace of IfcCurtainWall and returns object of this class to interact with
        /// </summary>
        public static new IfcCurtainWall Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurtainWall"); Debug.Assert(inst != 0); return inst; }

        public IfcCurtainWallTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCurtainWallTypeEnum_); return EnumValue<IfcCurtainWallTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCurtainWallTypeEnum>.FromValue(value.Value, EnumNames.IfcCurtainWallTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCurtainWall"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurtainWallType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurtainWallType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurtainWallType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurtainWallType(SdaiInstance instance) : base(instance) { }
        public IfcCurtainWallType() : base(0) { }

        public static implicit operator IfcCurtainWallType(SdaiInstance instance) => new IfcCurtainWallType(instance);

        /// <summary>
        /// Create new instace of IfcCurtainWallType and returns object of this class to interact with
        /// </summary>
        public static new IfcCurtainWallType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurtainWallType"); Debug.Assert(inst != 0); return inst; }

        public IfcCurtainWallTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCurtainWallTypeEnum_); return EnumValue<IfcCurtainWallTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCurtainWallTypeEnum>.FromValue(value.Value, EnumNames.IfcCurtainWallTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCurtainWallType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveBoundedPlane
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveBoundedPlane : IfcBoundedSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveBoundedPlane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveBoundedPlane(SdaiInstance instance) : base(instance) { }
        public IfcCurveBoundedPlane() : base(0) { }

        public static implicit operator IfcCurveBoundedPlane(SdaiInstance instance) => new IfcCurveBoundedPlane(instance);

        /// <summary>
        /// Create new instace of IfcCurveBoundedPlane and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveBoundedPlane Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveBoundedPlane"); Debug.Assert(inst != 0); return inst; }

        public IfcPlane BasisSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcPlane(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCurve OuterBoundary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OuterBoundary", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OuterBoundary", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcCurve InnerBoundaries { get { return (new SetOfIfcCurveSerializer()).FromAttr(m_instance, "InnerBoundaries"); } }
        public void put_InnerBoundaries(IEnumerable<IfcCurve> lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerBoundaries"); }
        public void put_InnerBoundaries_untyped(IEnumerable lst) { (new SetOfIfcCurveSerializer()).ToSdaiAggr(lst, m_instance, "InnerBoundaries"); }

        protected override TextValue EntityName() { return "IfcCurveBoundedPlane"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveBoundedSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveBoundedSurface : IfcBoundedSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveBoundedSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveBoundedSurface(SdaiInstance instance) : base(instance) { }
        public IfcCurveBoundedSurface() : base(0) { }

        public static implicit operator IfcCurveBoundedSurface(SdaiInstance instance) => new IfcCurveBoundedSurface(instance);

        /// <summary>
        /// Create new instace of IfcCurveBoundedSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveBoundedSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveBoundedSurface"); Debug.Assert(inst != 0); return inst; }

        public IfcSurface BasisSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcBoundaryCurve Boundaries { get { return (new SetOfIfcBoundaryCurveSerializer()).FromAttr(m_instance, "Boundaries"); } }
        public void put_Boundaries(IEnumerable<IfcBoundaryCurve> lst) { (new SetOfIfcBoundaryCurveSerializer()).ToSdaiAggr(lst, m_instance, "Boundaries"); }
        public void put_Boundaries_untyped(IEnumerable lst) { (new SetOfIfcBoundaryCurveSerializer()).ToSdaiAggr(lst, m_instance, "Boundaries"); }
        public bool? ImplicitOuter
            {
            get { return get_bool("ImplicitOuter", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ImplicitOuter", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCurveBoundedSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveSegment : IfcSegment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveSegment(SdaiInstance instance) : base(instance) { }
        public IfcCurveSegment() : base(0) { }

        public static implicit operator IfcCurveSegment(SdaiInstance instance) => new IfcCurveSegment(instance);

        /// <summary>
        /// Create new instace of IfcCurveSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveSegment"); Debug.Assert(inst != 0); return inst; }

        public IfcPlacement Placement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Placement", ifcengine.sdaiINSTANCE, out inst); return new IfcPlacement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Placement", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcCurveMeasureSelect SegmentStart
            {
            get { return new IfcCurveMeasureSelect(m_instance, "SegmentStart", 0); }
            }

        public IfcCurveMeasureSelect SegmentLength
            {
            get { return new IfcCurveMeasureSelect(m_instance, "SegmentLength", 0); }
            }
        public IfcCurve ParentCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ParentCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ParentCurve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcCurveSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPresentationStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPresentationStyle : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPresentationStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPresentationStyle(SdaiInstance instance) : base(instance) { }
        public IfcPresentationStyle() : base(0) { }

        public static implicit operator IfcPresentationStyle(SdaiInstance instance) => new IfcPresentationStyle(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcPresentationStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveStyle : IfcPresentationStyle
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveStyle(SdaiInstance instance) : base(instance) { }
        public IfcCurveStyle() : base(0) { }

        public static implicit operator IfcCurveStyle(SdaiInstance instance) => new IfcCurveStyle(instance);

        /// <summary>
        /// Create new instace of IfcCurveStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveStyle"); Debug.Assert(inst != 0); return inst; }


        public IfcCurveFontOrScaledCurveFontSelect CurveFont
            {
            get { return new IfcCurveFontOrScaledCurveFontSelect(m_instance, "CurveFont", 0); }
            }

        public IfcSizeSelect CurveWidth
            {
            get { return new IfcSizeSelect(m_instance, "CurveWidth", 0); }
            }

        public IfcColour CurveColour
            {
            get { return new IfcColour(m_instance, "CurveColour", 0); }
            }
        public bool? ModelOrDraughting
            {
            get { return get_bool("ModelOrDraughting", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ModelOrDraughting", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCurveStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveStyleFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveStyleFont : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveStyleFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveStyleFont(SdaiInstance instance) : base(instance) { }
        public IfcCurveStyleFont() : base(0) { }

        public static implicit operator IfcCurveStyleFont(SdaiInstance instance) => new IfcCurveStyleFont(instance);

        /// <summary>
        /// Create new instace of IfcCurveStyleFont and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveStyleFont Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveStyleFont"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcCurveStyleFontPattern PatternList { get { return (new ListOfIfcCurveStyleFontPatternSerializer()).FromAttr(m_instance, "PatternList"); } }
        public void put_PatternList(IEnumerable<IfcCurveStyleFontPattern> lst) { (new ListOfIfcCurveStyleFontPatternSerializer()).ToSdaiAggr(lst, m_instance, "PatternList"); }
        public void put_PatternList_untyped(IEnumerable lst) { (new ListOfIfcCurveStyleFontPatternSerializer()).ToSdaiAggr(lst, m_instance, "PatternList"); }

        protected override TextValue EntityName() { return "IfcCurveStyleFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveStyleFontAndScaling
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveStyleFontAndScaling : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveStyleFontAndScaling
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveStyleFontAndScaling(SdaiInstance instance) : base(instance) { }
        public IfcCurveStyleFontAndScaling() : base(0) { }

        public static implicit operator IfcCurveStyleFontAndScaling(SdaiInstance instance) => new IfcCurveStyleFontAndScaling(instance);

        /// <summary>
        /// Create new instace of IfcCurveStyleFontAndScaling and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveStyleFontAndScaling Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveStyleFontAndScaling"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        public IfcCurveStyleFontSelect CurveStyleFont
            {
            get { return new IfcCurveStyleFontSelect(m_instance, "CurveStyleFont", 0); }
            }
        public double? CurveFontScaling
            {
            get { return get_double("CurveFontScaling", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CurveFontScaling", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCurveStyleFontAndScaling"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCurveStyleFontPattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCurveStyleFontPattern : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCurveStyleFontPattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCurveStyleFontPattern(SdaiInstance instance) : base(instance) { }
        public IfcCurveStyleFontPattern() : base(0) { }

        public static implicit operator IfcCurveStyleFontPattern(SdaiInstance instance) => new IfcCurveStyleFontPattern(instance);

        /// <summary>
        /// Create new instace of IfcCurveStyleFontPattern and returns object of this class to interact with
        /// </summary>
        public static new IfcCurveStyleFontPattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCurveStyleFontPattern"); Debug.Assert(inst != 0); return inst; }

        public double? VisibleSegmentLength
            {
            get { return get_double("VisibleSegmentLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "VisibleSegmentLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? InvisibleSegmentLength
            {
            get { return get_double("InvisibleSegmentLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InvisibleSegmentLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCurveStyleFontPattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementarySurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementarySurface : IfcSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementarySurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementarySurface(SdaiInstance instance) : base(instance) { }
        public IfcElementarySurface() : base(0) { }

        public static implicit operator IfcElementarySurface(SdaiInstance instance) => new IfcElementarySurface(instance);

        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcElementarySurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcCylindricalSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcCylindricalSurface : IfcElementarySurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcCylindricalSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcCylindricalSurface(SdaiInstance instance) : base(instance) { }
        public IfcCylindricalSurface() : base(0) { }

        public static implicit operator IfcCylindricalSurface(SdaiInstance instance) => new IfcCylindricalSurface(instance);

        /// <summary>
        /// Create new instace of IfcCylindricalSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcCylindricalSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcCylindricalSurface"); Debug.Assert(inst != 0); return inst; }

        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcCylindricalSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDamper
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDamper : IfcFlowController
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDamper
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDamper(SdaiInstance instance) : base(instance) { }
        public IfcDamper() : base(0) { }

        public static implicit operator IfcDamper(SdaiInstance instance) => new IfcDamper(instance);

        /// <summary>
        /// Create new instace of IfcDamper and returns object of this class to interact with
        /// </summary>
        public static new IfcDamper Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDamper"); Debug.Assert(inst != 0); return inst; }

        public IfcDamperTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDamperTypeEnum_); return EnumValue<IfcDamperTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDamperTypeEnum>.FromValue(value.Value, EnumNames.IfcDamperTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDamper"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDamperType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDamperType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDamperType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDamperType(SdaiInstance instance) : base(instance) { }
        public IfcDamperType() : base(0) { }

        public static implicit operator IfcDamperType(SdaiInstance instance) => new IfcDamperType(instance);

        /// <summary>
        /// Create new instace of IfcDamperType and returns object of this class to interact with
        /// </summary>
        public static new IfcDamperType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDamperType"); Debug.Assert(inst != 0); return inst; }

        public IfcDamperTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDamperTypeEnum_); return EnumValue<IfcDamperTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDamperTypeEnum>.FromValue(value.Value, EnumNames.IfcDamperTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDamperType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDerivedProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDerivedProfileDef : IfcProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDerivedProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDerivedProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcDerivedProfileDef() : base(0) { }

        public static implicit operator IfcDerivedProfileDef(SdaiInstance instance) => new IfcDerivedProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcDerivedProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcDerivedProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDerivedProfileDef"); Debug.Assert(inst != 0); return inst; }

        public IfcProfileDef ParentProfile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ParentProfile", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ParentProfile", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCartesianTransformationOperator2D Operator 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Operator", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianTransformationOperator2D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Operator", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue Label
            {
            get { return get_string("Label", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Label", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcDerivedProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDerivedUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDerivedUnit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDerivedUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDerivedUnit(SdaiInstance instance) : base(instance) { }
        public IfcDerivedUnit() : base(0) { }

        public static implicit operator IfcDerivedUnit(SdaiInstance instance) => new IfcDerivedUnit(instance);

        /// <summary>
        /// Create new instace of IfcDerivedUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcDerivedUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDerivedUnit"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcDerivedUnitElement Elements { get { return (new SetOfIfcDerivedUnitElementSerializer()).FromAttr(m_instance, "Elements"); } }
        public void put_Elements(IEnumerable<IfcDerivedUnitElement> lst) { (new SetOfIfcDerivedUnitElementSerializer()).ToSdaiAggr(lst, m_instance, "Elements"); }
        public void put_Elements_untyped(IEnumerable lst) { (new SetOfIfcDerivedUnitElementSerializer()).ToSdaiAggr(lst, m_instance, "Elements"); }
        public IfcDerivedUnitEnum? UnitType 
            { 
            get { var str = get_string("UnitType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDerivedUnitEnum_); return EnumValue<IfcDerivedUnitEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDerivedUnitEnum>.FromValue(value.Value, EnumNames.IfcDerivedUnitEnum_); ifcengine.sdaiPutAttrBN(m_instance, "UnitType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedType
            {
            get { return get_string("UserDefinedType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedType", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcDerivedUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDerivedUnitElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDerivedUnitElement : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDerivedUnitElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDerivedUnitElement(SdaiInstance instance) : base(instance) { }
        public IfcDerivedUnitElement() : base(0) { }

        public static implicit operator IfcDerivedUnitElement(SdaiInstance instance) => new IfcDerivedUnitElement(instance);

        /// <summary>
        /// Create new instace of IfcDerivedUnitElement and returns object of this class to interact with
        /// </summary>
        public static new IfcDerivedUnitElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDerivedUnitElement"); Debug.Assert(inst != 0); return inst; }

        public IfcNamedUnit Unit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Unit", ifcengine.sdaiINSTANCE, out inst); return new IfcNamedUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Unit", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? Exponent
            {
            get { return get_IntValue("Exponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Exponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDerivedUnitElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDimensionalExponents
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDimensionalExponents : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDimensionalExponents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDimensionalExponents(SdaiInstance instance) : base(instance) { }
        public IfcDimensionalExponents() : base(0) { }

        public static implicit operator IfcDimensionalExponents(SdaiInstance instance) => new IfcDimensionalExponents(instance);

        /// <summary>
        /// Create new instace of IfcDimensionalExponents and returns object of this class to interact with
        /// </summary>
        public static new IfcDimensionalExponents Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDimensionalExponents"); Debug.Assert(inst != 0); return inst; }

        public IntValue? LengthExponent
            {
            get { return get_IntValue("LengthExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LengthExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? MassExponent
            {
            get { return get_IntValue("MassExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MassExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? TimeExponent
            {
            get { return get_IntValue("TimeExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TimeExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? ElectricCurrentExponent
            {
            get { return get_IntValue("ElectricCurrentExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ElectricCurrentExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? ThermodynamicTemperatureExponent
            {
            get { return get_IntValue("ThermodynamicTemperatureExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThermodynamicTemperatureExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? AmountOfSubstanceExponent
            {
            get { return get_IntValue("AmountOfSubstanceExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AmountOfSubstanceExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? LuminousIntensityExponent
            {
            get { return get_IntValue("LuminousIntensityExponent", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LuminousIntensityExponent", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDimensionalExponents"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDirection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDirection : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDirection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDirection(SdaiInstance instance) : base(instance) { }
        public IfcDirection() : base(0) { }

        public static implicit operator IfcDirection(SdaiInstance instance) => new IfcDirection(instance);

        /// <summary>
        /// Create new instace of IfcDirection and returns object of this class to interact with
        /// </summary>
        public static new IfcDirection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDirection"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcReal DirectionRatios { get { return (new ListOfIfcRealSerializer()).FromAttr(m_instance, "DirectionRatios"); } }
        public void put_DirectionRatios(IEnumerable<double> lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "DirectionRatios"); }
        public void put_DirectionRatios_untyped(IEnumerable lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "DirectionRatios"); }

        protected override TextValue EntityName() { return "IfcDirection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSweptAreaSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSweptAreaSolid : IfcSolidModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSweptAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSweptAreaSolid(SdaiInstance instance) : base(instance) { }
        public IfcSweptAreaSolid() : base(0) { }

        public static implicit operator IfcSweptAreaSolid(SdaiInstance instance) => new IfcSweptAreaSolid(instance);

        public IfcProfileDef SweptArea 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SweptArea", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SweptArea", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcSweptAreaSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDirectrixCurveSweptAreaSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDirectrixCurveSweptAreaSolid : IfcSweptAreaSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDirectrixCurveSweptAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDirectrixCurveSweptAreaSolid(SdaiInstance instance) : base(instance) { }
        public IfcDirectrixCurveSweptAreaSolid() : base(0) { }

        public static implicit operator IfcDirectrixCurveSweptAreaSolid(SdaiInstance instance) => new IfcDirectrixCurveSweptAreaSolid(instance);

        public IfcCurve Directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcCurveMeasureSelect StartParam
            {
            get { return new IfcCurveMeasureSelect(m_instance, "StartParam", 0); }
            }

        public IfcCurveMeasureSelect EndParam
            {
            get { return new IfcCurveMeasureSelect(m_instance, "EndParam", 0); }
            }

        protected override TextValue EntityName() { return "IfcDirectrixCurveSweptAreaSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFixedReferenceSweptAreaSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFixedReferenceSweptAreaSolid : IfcDirectrixCurveSweptAreaSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFixedReferenceSweptAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFixedReferenceSweptAreaSolid(SdaiInstance instance) : base(instance) { }
        public IfcFixedReferenceSweptAreaSolid() : base(0) { }

        public static implicit operator IfcFixedReferenceSweptAreaSolid(SdaiInstance instance) => new IfcFixedReferenceSweptAreaSolid(instance);

        /// <summary>
        /// Create new instace of IfcFixedReferenceSweptAreaSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcFixedReferenceSweptAreaSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFixedReferenceSweptAreaSolid"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection FixedReference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "FixedReference", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "FixedReference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcFixedReferenceSweptAreaSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDirectrixDerivedReferenceSweptAreaSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDirectrixDerivedReferenceSweptAreaSolid : IfcFixedReferenceSweptAreaSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDirectrixDerivedReferenceSweptAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDirectrixDerivedReferenceSweptAreaSolid(SdaiInstance instance) : base(instance) { }
        public IfcDirectrixDerivedReferenceSweptAreaSolid() : base(0) { }

        public static implicit operator IfcDirectrixDerivedReferenceSweptAreaSolid(SdaiInstance instance) => new IfcDirectrixDerivedReferenceSweptAreaSolid(instance);

        /// <summary>
        /// Create new instace of IfcDirectrixDerivedReferenceSweptAreaSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcDirectrixDerivedReferenceSweptAreaSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDirectrixDerivedReferenceSweptAreaSolid"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcDirectrixDerivedReferenceSweptAreaSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDiscreteAccessory
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDiscreteAccessory : IfcElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDiscreteAccessory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDiscreteAccessory(SdaiInstance instance) : base(instance) { }
        public IfcDiscreteAccessory() : base(0) { }

        public static implicit operator IfcDiscreteAccessory(SdaiInstance instance) => new IfcDiscreteAccessory(instance);

        /// <summary>
        /// Create new instace of IfcDiscreteAccessory and returns object of this class to interact with
        /// </summary>
        public static new IfcDiscreteAccessory Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDiscreteAccessory"); Debug.Assert(inst != 0); return inst; }

        public IfcDiscreteAccessoryTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDiscreteAccessoryTypeEnum_); return EnumValue<IfcDiscreteAccessoryTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDiscreteAccessoryTypeEnum>.FromValue(value.Value, EnumNames.IfcDiscreteAccessoryTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDiscreteAccessory"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDiscreteAccessoryType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDiscreteAccessoryType : IfcElementComponentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDiscreteAccessoryType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDiscreteAccessoryType(SdaiInstance instance) : base(instance) { }
        public IfcDiscreteAccessoryType() : base(0) { }

        public static implicit operator IfcDiscreteAccessoryType(SdaiInstance instance) => new IfcDiscreteAccessoryType(instance);

        /// <summary>
        /// Create new instace of IfcDiscreteAccessoryType and returns object of this class to interact with
        /// </summary>
        public static new IfcDiscreteAccessoryType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDiscreteAccessoryType"); Debug.Assert(inst != 0); return inst; }

        public IfcDiscreteAccessoryTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDiscreteAccessoryTypeEnum_); return EnumValue<IfcDiscreteAccessoryTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDiscreteAccessoryTypeEnum>.FromValue(value.Value, EnumNames.IfcDiscreteAccessoryTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDiscreteAccessoryType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionBoard
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionBoard : IfcFlowController
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionBoard
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionBoard(SdaiInstance instance) : base(instance) { }
        public IfcDistributionBoard() : base(0) { }

        public static implicit operator IfcDistributionBoard(SdaiInstance instance) => new IfcDistributionBoard(instance);

        /// <summary>
        /// Create new instace of IfcDistributionBoard and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionBoard Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionBoard"); Debug.Assert(inst != 0); return inst; }

        public IfcDistributionBoardTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDistributionBoardTypeEnum_); return EnumValue<IfcDistributionBoardTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDistributionBoardTypeEnum>.FromValue(value.Value, EnumNames.IfcDistributionBoardTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDistributionBoard"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionBoardType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionBoardType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionBoardType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionBoardType(SdaiInstance instance) : base(instance) { }
        public IfcDistributionBoardType() : base(0) { }

        public static implicit operator IfcDistributionBoardType(SdaiInstance instance) => new IfcDistributionBoardType(instance);

        /// <summary>
        /// Create new instace of IfcDistributionBoardType and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionBoardType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionBoardType"); Debug.Assert(inst != 0); return inst; }

        public IfcDistributionBoardTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDistributionBoardTypeEnum_); return EnumValue<IfcDistributionBoardTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDistributionBoardTypeEnum>.FromValue(value.Value, EnumNames.IfcDistributionBoardTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDistributionBoardType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionChamberElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionChamberElement : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionChamberElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionChamberElement(SdaiInstance instance) : base(instance) { }
        public IfcDistributionChamberElement() : base(0) { }

        public static implicit operator IfcDistributionChamberElement(SdaiInstance instance) => new IfcDistributionChamberElement(instance);

        /// <summary>
        /// Create new instace of IfcDistributionChamberElement and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionChamberElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionChamberElement"); Debug.Assert(inst != 0); return inst; }

        public IfcDistributionChamberElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDistributionChamberElementTypeEnum_); return EnumValue<IfcDistributionChamberElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDistributionChamberElementTypeEnum>.FromValue(value.Value, EnumNames.IfcDistributionChamberElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDistributionChamberElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionChamberElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionChamberElementType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionChamberElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionChamberElementType(SdaiInstance instance) : base(instance) { }
        public IfcDistributionChamberElementType() : base(0) { }

        public static implicit operator IfcDistributionChamberElementType(SdaiInstance instance) => new IfcDistributionChamberElementType(instance);

        /// <summary>
        /// Create new instace of IfcDistributionChamberElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionChamberElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionChamberElementType"); Debug.Assert(inst != 0); return inst; }

        public IfcDistributionChamberElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDistributionChamberElementTypeEnum_); return EnumValue<IfcDistributionChamberElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDistributionChamberElementTypeEnum>.FromValue(value.Value, EnumNames.IfcDistributionChamberElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDistributionChamberElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionSystem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionSystem : IfcSystem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionSystem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionSystem(SdaiInstance instance) : base(instance) { }
        public IfcDistributionSystem() : base(0) { }

        public static implicit operator IfcDistributionSystem(SdaiInstance instance) => new IfcDistributionSystem(instance);

        /// <summary>
        /// Create new instace of IfcDistributionSystem and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionSystem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionSystem"); Debug.Assert(inst != 0); return inst; }

        public TextValue LongName
            {
            get { return get_string("LongName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongName", ifcengine.sdaiSTRING, value); }
            }
        public IfcDistributionSystemEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDistributionSystemEnum_); return EnumValue<IfcDistributionSystemEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDistributionSystemEnum>.FromValue(value.Value, EnumNames.IfcDistributionSystemEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDistributionSystem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionCircuit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionCircuit : IfcDistributionSystem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionCircuit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionCircuit(SdaiInstance instance) : base(instance) { }
        public IfcDistributionCircuit() : base(0) { }

        public static implicit operator IfcDistributionCircuit(SdaiInstance instance) => new IfcDistributionCircuit(instance);

        /// <summary>
        /// Create new instace of IfcDistributionCircuit and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionCircuit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionCircuit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcDistributionCircuit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPort
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPort : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPort
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPort(SdaiInstance instance) : base(instance) { }
        public IfcPort() : base(0) { }

        public static implicit operator IfcPort(SdaiInstance instance) => new IfcPort(instance);

        public SetOfIfcRelConnectsPortToElement ContainedIn { get { return (new SetOfIfcRelConnectsPortToElementSerializer()).FromAttr(m_instance, "ContainedIn"); } }
        public SetOfIfcRelConnectsPorts ConnectedFrom { get { return (new SetOfIfcRelConnectsPortsSerializer()).FromAttr(m_instance, "ConnectedFrom"); } }
        public SetOfIfcRelConnectsPorts ConnectedTo { get { return (new SetOfIfcRelConnectsPortsSerializer()).FromAttr(m_instance, "ConnectedTo"); } }

        protected override TextValue EntityName() { return "IfcPort"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDistributionPort
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDistributionPort : IfcPort
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDistributionPort
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDistributionPort(SdaiInstance instance) : base(instance) { }
        public IfcDistributionPort() : base(0) { }

        public static implicit operator IfcDistributionPort(SdaiInstance instance) => new IfcDistributionPort(instance);

        /// <summary>
        /// Create new instace of IfcDistributionPort and returns object of this class to interact with
        /// </summary>
        public static new IfcDistributionPort Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDistributionPort"); Debug.Assert(inst != 0); return inst; }

        public IfcFlowDirectionEnum? FlowDirection 
            { 
            get { var str = get_string("FlowDirection", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFlowDirectionEnum_); return EnumValue<IfcFlowDirectionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFlowDirectionEnum>.FromValue(value.Value, EnumNames.IfcFlowDirectionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "FlowDirection", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDistributionPortTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDistributionPortTypeEnum_); return EnumValue<IfcDistributionPortTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDistributionPortTypeEnum>.FromValue(value.Value, EnumNames.IfcDistributionPortTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDistributionSystemEnum? SystemType 
            { 
            get { var str = get_string("SystemType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDistributionSystemEnum_); return EnumValue<IfcDistributionSystemEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDistributionSystemEnum>.FromValue(value.Value, EnumNames.IfcDistributionSystemEnum_); ifcengine.sdaiPutAttrBN(m_instance, "SystemType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDistributionPort"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDocumentInformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDocumentInformation : IfcExternalInformation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDocumentInformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDocumentInformation(SdaiInstance instance) : base(instance) { }
        public IfcDocumentInformation() : base(0) { }

        public static implicit operator IfcDocumentInformation(SdaiInstance instance) => new IfcDocumentInformation(instance);

        /// <summary>
        /// Create new instace of IfcDocumentInformation and returns object of this class to interact with
        /// </summary>
        public static new IfcDocumentInformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDocumentInformation"); Debug.Assert(inst != 0); return inst; }

        public TextValue Identification
            {
            get { return get_string("Identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identification", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Location
            {
            get { return get_string("Location", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Location", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Purpose
            {
            get { return get_string("Purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Purpose", ifcengine.sdaiSTRING, value); }
            }
        public TextValue IntendedUse
            {
            get { return get_string("IntendedUse", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "IntendedUse", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Scope
            {
            get { return get_string("Scope", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Scope", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Revision
            {
            get { return get_string("Revision", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Revision", ifcengine.sdaiSTRING, value); }
            }

        public IfcActorSelect DocumentOwner
            {
            get { return new IfcActorSelect(m_instance, "DocumentOwner", 0); }
            }
        public SetOfIfcActorSelect Editors { get { return (new SetOfIfcActorSelectSerializer()).FromAttr(m_instance, "Editors"); } }
        public void put_Editors(IEnumerable<IfcActorSelect> lst) { (new SetOfIfcActorSelectSerializer()).ToSdaiAggr(lst, m_instance, "Editors"); }
        public void put_Editors_untyped(IEnumerable lst) { (new SetOfIfcActorSelectSerializer()).ToSdaiAggr(lst, m_instance, "Editors"); }
        public TextValue CreationTime
            {
            get { return get_string("CreationTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "CreationTime", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LastRevisionTime
            {
            get { return get_string("LastRevisionTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LastRevisionTime", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ElectronicFormat
            {
            get { return get_string("ElectronicFormat", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ElectronicFormat", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ValidFrom
            {
            get { return get_string("ValidFrom", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ValidFrom", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ValidUntil
            {
            get { return get_string("ValidUntil", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ValidUntil", ifcengine.sdaiSTRING, value); }
            }
        public IfcDocumentConfidentialityEnum? Confidentiality 
            { 
            get { var str = get_string("Confidentiality", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDocumentConfidentialityEnum_); return EnumValue<IfcDocumentConfidentialityEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDocumentConfidentialityEnum>.FromValue(value.Value, EnumNames.IfcDocumentConfidentialityEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Confidentiality", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDocumentStatusEnum? Status 
            { 
            get { var str = get_string("Status", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDocumentStatusEnum_); return EnumValue<IfcDocumentStatusEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDocumentStatusEnum>.FromValue(value.Value, EnumNames.IfcDocumentStatusEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Status", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcRelAssociatesDocument DocumentInfoForObjects { get { return (new SetOfIfcRelAssociatesDocumentSerializer()).FromAttr(m_instance, "DocumentInfoForObjects"); } }
        public SetOfIfcDocumentReference HasDocumentReferences { get { return (new SetOfIfcDocumentReferenceSerializer()).FromAttr(m_instance, "HasDocumentReferences"); } }
        public SetOfIfcDocumentInformationRelationship IsPointedTo { get { return (new SetOfIfcDocumentInformationRelationshipSerializer()).FromAttr(m_instance, "IsPointedTo"); } }
        public SetOfIfcDocumentInformationRelationship IsPointer { get { return (new SetOfIfcDocumentInformationRelationshipSerializer()).FromAttr(m_instance, "IsPointer"); } }

        protected override TextValue EntityName() { return "IfcDocumentInformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDocumentInformationRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDocumentInformationRelationship : IfcResourceLevelRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDocumentInformationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDocumentInformationRelationship(SdaiInstance instance) : base(instance) { }
        public IfcDocumentInformationRelationship() : base(0) { }

        public static implicit operator IfcDocumentInformationRelationship(SdaiInstance instance) => new IfcDocumentInformationRelationship(instance);

        /// <summary>
        /// Create new instace of IfcDocumentInformationRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcDocumentInformationRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDocumentInformationRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcDocumentInformation RelatingDocument 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingDocument", ifcengine.sdaiINSTANCE, out inst); return new IfcDocumentInformation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingDocument", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcDocumentInformation RelatedDocuments { get { return (new SetOfIfcDocumentInformationSerializer()).FromAttr(m_instance, "RelatedDocuments"); } }
        public void put_RelatedDocuments(IEnumerable<IfcDocumentInformation> lst) { (new SetOfIfcDocumentInformationSerializer()).ToSdaiAggr(lst, m_instance, "RelatedDocuments"); }
        public void put_RelatedDocuments_untyped(IEnumerable lst) { (new SetOfIfcDocumentInformationSerializer()).ToSdaiAggr(lst, m_instance, "RelatedDocuments"); }
        public TextValue RelationshipType
            {
            get { return get_string("RelationshipType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RelationshipType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcDocumentInformationRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDocumentReference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDocumentReference : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDocumentReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDocumentReference(SdaiInstance instance) : base(instance) { }
        public IfcDocumentReference() : base(0) { }

        public static implicit operator IfcDocumentReference(SdaiInstance instance) => new IfcDocumentReference(instance);

        /// <summary>
        /// Create new instace of IfcDocumentReference and returns object of this class to interact with
        /// </summary>
        public static new IfcDocumentReference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDocumentReference"); Debug.Assert(inst != 0); return inst; }

        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public IfcDocumentInformation ReferencedDocument 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ReferencedDocument", ifcengine.sdaiINSTANCE, out inst); return new IfcDocumentInformation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ReferencedDocument", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcRelAssociatesDocument DocumentRefForObjects { get { return (new SetOfIfcRelAssociatesDocumentSerializer()).FromAttr(m_instance, "DocumentRefForObjects"); } }

        protected override TextValue EntityName() { return "IfcDocumentReference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDoor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDoor : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDoor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDoor(SdaiInstance instance) : base(instance) { }
        public IfcDoor() : base(0) { }

        public static implicit operator IfcDoor(SdaiInstance instance) => new IfcDoor(instance);

        /// <summary>
        /// Create new instace of IfcDoor and returns object of this class to interact with
        /// </summary>
        public static new IfcDoor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDoor"); Debug.Assert(inst != 0); return inst; }

        public double? OverallHeight
            {
            get { return get_double("OverallHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OverallWidth
            {
            get { return get_double("OverallWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcDoorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDoorTypeEnum_); return EnumValue<IfcDoorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDoorTypeEnum>.FromValue(value.Value, EnumNames.IfcDoorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDoorTypeOperationEnum? OperationType 
            { 
            get { var str = get_string("OperationType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDoorTypeOperationEnum_); return EnumValue<IfcDoorTypeOperationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDoorTypeOperationEnum>.FromValue(value.Value, EnumNames.IfcDoorTypeOperationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "OperationType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedOperationType
            {
            get { return get_string("UserDefinedOperationType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedOperationType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcDoor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertySetDefinition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertySetDefinition : IfcPropertyDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertySetDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertySetDefinition(SdaiInstance instance) : base(instance) { }
        public IfcPropertySetDefinition() : base(0) { }

        public static implicit operator IfcPropertySetDefinition(SdaiInstance instance) => new IfcPropertySetDefinition(instance);

        public SetOfIfcTypeObject DefinesType { get { return (new SetOfIfcTypeObjectSerializer()).FromAttr(m_instance, "DefinesType"); } }
        public SetOfIfcRelDefinesByTemplate IsDefinedBy { get { return (new SetOfIfcRelDefinesByTemplateSerializer()).FromAttr(m_instance, "IsDefinedBy"); } }
        public SetOfIfcRelDefinesByProperties DefinesOccurrence { get { return (new SetOfIfcRelDefinesByPropertiesSerializer()).FromAttr(m_instance, "DefinesOccurrence"); } }

        protected override TextValue EntityName() { return "IfcPropertySetDefinition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedPropertySet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedPropertySet : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedPropertySet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedPropertySet(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedPropertySet() : base(0) { }

        public static implicit operator IfcPreDefinedPropertySet(SdaiInstance instance) => new IfcPreDefinedPropertySet(instance);


        protected override TextValue EntityName() { return "IfcPreDefinedPropertySet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDoorLiningProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDoorLiningProperties : IfcPreDefinedPropertySet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDoorLiningProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDoorLiningProperties(SdaiInstance instance) : base(instance) { }
        public IfcDoorLiningProperties() : base(0) { }

        public static implicit operator IfcDoorLiningProperties(SdaiInstance instance) => new IfcDoorLiningProperties(instance);

        /// <summary>
        /// Create new instace of IfcDoorLiningProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcDoorLiningProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDoorLiningProperties"); Debug.Assert(inst != 0); return inst; }

        public double? LiningDepth
            {
            get { return get_double("LiningDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LiningThickness
            {
            get { return get_double("LiningThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ThresholdDepth
            {
            get { return get_double("ThresholdDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThresholdDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ThresholdThickness
            {
            get { return get_double("ThresholdThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThresholdThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransomThickness
            {
            get { return get_double("TransomThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransomThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransomOffset
            {
            get { return get_double("TransomOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransomOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LiningOffset
            {
            get { return get_double("LiningOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ThresholdOffset
            {
            get { return get_double("ThresholdOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ThresholdOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CasingThickness
            {
            get { return get_double("CasingThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CasingThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CasingDepth
            {
            get { return get_double("CasingDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CasingDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcShapeAspect ShapeAspectStyle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, i); }
            }
        public double? LiningToPanelOffsetX
            {
            get { return get_double("LiningToPanelOffsetX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningToPanelOffsetX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LiningToPanelOffsetY
            {
            get { return get_double("LiningToPanelOffsetY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningToPanelOffsetY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDoorLiningProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDoorPanelProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDoorPanelProperties : IfcPreDefinedPropertySet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDoorPanelProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDoorPanelProperties(SdaiInstance instance) : base(instance) { }
        public IfcDoorPanelProperties() : base(0) { }

        public static implicit operator IfcDoorPanelProperties(SdaiInstance instance) => new IfcDoorPanelProperties(instance);

        /// <summary>
        /// Create new instace of IfcDoorPanelProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcDoorPanelProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDoorPanelProperties"); Debug.Assert(inst != 0); return inst; }

        public double? PanelDepth
            {
            get { return get_double("PanelDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PanelDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcDoorPanelOperationEnum? PanelOperation 
            { 
            get { var str = get_string("PanelOperation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDoorPanelOperationEnum_); return EnumValue<IfcDoorPanelOperationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDoorPanelOperationEnum>.FromValue(value.Value, EnumNames.IfcDoorPanelOperationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PanelOperation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? PanelWidth
            {
            get { return get_double("PanelWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PanelWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcDoorPanelPositionEnum? PanelPosition 
            { 
            get { var str = get_string("PanelPosition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDoorPanelPositionEnum_); return EnumValue<IfcDoorPanelPositionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDoorPanelPositionEnum>.FromValue(value.Value, EnumNames.IfcDoorPanelPositionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PanelPosition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcShapeAspect ShapeAspectStyle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcDoorPanelProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDoorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDoorType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDoorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDoorType(SdaiInstance instance) : base(instance) { }
        public IfcDoorType() : base(0) { }

        public static implicit operator IfcDoorType(SdaiInstance instance) => new IfcDoorType(instance);

        /// <summary>
        /// Create new instace of IfcDoorType and returns object of this class to interact with
        /// </summary>
        public static new IfcDoorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDoorType"); Debug.Assert(inst != 0); return inst; }

        public IfcDoorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDoorTypeEnum_); return EnumValue<IfcDoorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDoorTypeEnum>.FromValue(value.Value, EnumNames.IfcDoorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDoorTypeOperationEnum? OperationType 
            { 
            get { var str = get_string("OperationType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDoorTypeOperationEnum_); return EnumValue<IfcDoorTypeOperationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDoorTypeOperationEnum>.FromValue(value.Value, EnumNames.IfcDoorTypeOperationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "OperationType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? ParameterTakesPrecedence
            {
            get { return get_bool("ParameterTakesPrecedence", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ParameterTakesPrecedence", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedOperationType
            {
            get { return get_string("UserDefinedOperationType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedOperationType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcDoorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedItem : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedItem(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedItem() : base(0) { }

        public static implicit operator IfcPreDefinedItem(SdaiInstance instance) => new IfcPreDefinedItem(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcPreDefinedItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedColour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedColour : IfcPreDefinedItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedColour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedColour(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedColour() : base(0) { }

        public static implicit operator IfcPreDefinedColour(SdaiInstance instance) => new IfcPreDefinedColour(instance);


        protected override TextValue EntityName() { return "IfcPreDefinedColour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDraughtingPreDefinedColour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDraughtingPreDefinedColour : IfcPreDefinedColour
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDraughtingPreDefinedColour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDraughtingPreDefinedColour(SdaiInstance instance) : base(instance) { }
        public IfcDraughtingPreDefinedColour() : base(0) { }

        public static implicit operator IfcDraughtingPreDefinedColour(SdaiInstance instance) => new IfcDraughtingPreDefinedColour(instance);

        /// <summary>
        /// Create new instace of IfcDraughtingPreDefinedColour and returns object of this class to interact with
        /// </summary>
        public static new IfcDraughtingPreDefinedColour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDraughtingPreDefinedColour"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcDraughtingPreDefinedColour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedCurveFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedCurveFont : IfcPreDefinedItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedCurveFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedCurveFont(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedCurveFont() : base(0) { }

        public static implicit operator IfcPreDefinedCurveFont(SdaiInstance instance) => new IfcPreDefinedCurveFont(instance);


        protected override TextValue EntityName() { return "IfcPreDefinedCurveFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDraughtingPreDefinedCurveFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDraughtingPreDefinedCurveFont : IfcPreDefinedCurveFont
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDraughtingPreDefinedCurveFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDraughtingPreDefinedCurveFont(SdaiInstance instance) : base(instance) { }
        public IfcDraughtingPreDefinedCurveFont() : base(0) { }

        public static implicit operator IfcDraughtingPreDefinedCurveFont(SdaiInstance instance) => new IfcDraughtingPreDefinedCurveFont(instance);

        /// <summary>
        /// Create new instace of IfcDraughtingPreDefinedCurveFont and returns object of this class to interact with
        /// </summary>
        public static new IfcDraughtingPreDefinedCurveFont Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDraughtingPreDefinedCurveFont"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcDraughtingPreDefinedCurveFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDuctFitting
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDuctFitting : IfcFlowFitting
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDuctFitting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDuctFitting(SdaiInstance instance) : base(instance) { }
        public IfcDuctFitting() : base(0) { }

        public static implicit operator IfcDuctFitting(SdaiInstance instance) => new IfcDuctFitting(instance);

        /// <summary>
        /// Create new instace of IfcDuctFitting and returns object of this class to interact with
        /// </summary>
        public static new IfcDuctFitting Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDuctFitting"); Debug.Assert(inst != 0); return inst; }

        public IfcDuctFittingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDuctFittingTypeEnum_); return EnumValue<IfcDuctFittingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDuctFittingTypeEnum>.FromValue(value.Value, EnumNames.IfcDuctFittingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDuctFitting"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDuctFittingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDuctFittingType : IfcFlowFittingType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDuctFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDuctFittingType(SdaiInstance instance) : base(instance) { }
        public IfcDuctFittingType() : base(0) { }

        public static implicit operator IfcDuctFittingType(SdaiInstance instance) => new IfcDuctFittingType(instance);

        /// <summary>
        /// Create new instace of IfcDuctFittingType and returns object of this class to interact with
        /// </summary>
        public static new IfcDuctFittingType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDuctFittingType"); Debug.Assert(inst != 0); return inst; }

        public IfcDuctFittingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDuctFittingTypeEnum_); return EnumValue<IfcDuctFittingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDuctFittingTypeEnum>.FromValue(value.Value, EnumNames.IfcDuctFittingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDuctFittingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDuctSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDuctSegment : IfcFlowSegment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDuctSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDuctSegment(SdaiInstance instance) : base(instance) { }
        public IfcDuctSegment() : base(0) { }

        public static implicit operator IfcDuctSegment(SdaiInstance instance) => new IfcDuctSegment(instance);

        /// <summary>
        /// Create new instace of IfcDuctSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcDuctSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDuctSegment"); Debug.Assert(inst != 0); return inst; }

        public IfcDuctSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDuctSegmentTypeEnum_); return EnumValue<IfcDuctSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDuctSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcDuctSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDuctSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDuctSegmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDuctSegmentType : IfcFlowSegmentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDuctSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDuctSegmentType(SdaiInstance instance) : base(instance) { }
        public IfcDuctSegmentType() : base(0) { }

        public static implicit operator IfcDuctSegmentType(SdaiInstance instance) => new IfcDuctSegmentType(instance);

        /// <summary>
        /// Create new instace of IfcDuctSegmentType and returns object of this class to interact with
        /// </summary>
        public static new IfcDuctSegmentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDuctSegmentType"); Debug.Assert(inst != 0); return inst; }

        public IfcDuctSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDuctSegmentTypeEnum_); return EnumValue<IfcDuctSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDuctSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcDuctSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDuctSegmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowTreatmentDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowTreatmentDevice : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowTreatmentDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowTreatmentDevice(SdaiInstance instance) : base(instance) { }
        public IfcFlowTreatmentDevice() : base(0) { }

        public static implicit operator IfcFlowTreatmentDevice(SdaiInstance instance) => new IfcFlowTreatmentDevice(instance);

        /// <summary>
        /// Create new instace of IfcFlowTreatmentDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowTreatmentDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowTreatmentDevice"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFlowTreatmentDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDuctSilencer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDuctSilencer : IfcFlowTreatmentDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDuctSilencer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDuctSilencer(SdaiInstance instance) : base(instance) { }
        public IfcDuctSilencer() : base(0) { }

        public static implicit operator IfcDuctSilencer(SdaiInstance instance) => new IfcDuctSilencer(instance);

        /// <summary>
        /// Create new instace of IfcDuctSilencer and returns object of this class to interact with
        /// </summary>
        public static new IfcDuctSilencer Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDuctSilencer"); Debug.Assert(inst != 0); return inst; }

        public IfcDuctSilencerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDuctSilencerTypeEnum_); return EnumValue<IfcDuctSilencerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDuctSilencerTypeEnum>.FromValue(value.Value, EnumNames.IfcDuctSilencerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDuctSilencer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowTreatmentDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowTreatmentDeviceType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowTreatmentDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowTreatmentDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcFlowTreatmentDeviceType() : base(0) { }

        public static implicit operator IfcFlowTreatmentDeviceType(SdaiInstance instance) => new IfcFlowTreatmentDeviceType(instance);


        protected override TextValue EntityName() { return "IfcFlowTreatmentDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcDuctSilencerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcDuctSilencerType : IfcFlowTreatmentDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcDuctSilencerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcDuctSilencerType(SdaiInstance instance) : base(instance) { }
        public IfcDuctSilencerType() : base(0) { }

        public static implicit operator IfcDuctSilencerType(SdaiInstance instance) => new IfcDuctSilencerType(instance);

        /// <summary>
        /// Create new instace of IfcDuctSilencerType and returns object of this class to interact with
        /// </summary>
        public static new IfcDuctSilencerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcDuctSilencerType"); Debug.Assert(inst != 0); return inst; }

        public IfcDuctSilencerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDuctSilencerTypeEnum_); return EnumValue<IfcDuctSilencerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDuctSilencerTypeEnum>.FromValue(value.Value, EnumNames.IfcDuctSilencerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcDuctSilencerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFeatureElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFeatureElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFeatureElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFeatureElement(SdaiInstance instance) : base(instance) { }
        public IfcFeatureElement() : base(0) { }

        public static implicit operator IfcFeatureElement(SdaiInstance instance) => new IfcFeatureElement(instance);


        protected override TextValue EntityName() { return "IfcFeatureElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFeatureElementSubtraction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFeatureElementSubtraction : IfcFeatureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFeatureElementSubtraction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFeatureElementSubtraction(SdaiInstance instance) : base(instance) { }
        public IfcFeatureElementSubtraction() : base(0) { }

        public static implicit operator IfcFeatureElementSubtraction(SdaiInstance instance) => new IfcFeatureElementSubtraction(instance);

        public IfcRelVoidsElement VoidsElements { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "VoidsElements", ifcengine.sdaiINSTANCE, out inst); return new IfcRelVoidsElement(inst); } }

        protected override TextValue EntityName() { return "IfcFeatureElementSubtraction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEarthworksCut
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEarthworksCut : IfcFeatureElementSubtraction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEarthworksCut
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEarthworksCut(SdaiInstance instance) : base(instance) { }
        public IfcEarthworksCut() : base(0) { }

        public static implicit operator IfcEarthworksCut(SdaiInstance instance) => new IfcEarthworksCut(instance);

        /// <summary>
        /// Create new instace of IfcEarthworksCut and returns object of this class to interact with
        /// </summary>
        public static new IfcEarthworksCut Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEarthworksCut"); Debug.Assert(inst != 0); return inst; }

        public IfcEarthworksCutTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEarthworksCutTypeEnum_); return EnumValue<IfcEarthworksCutTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEarthworksCutTypeEnum>.FromValue(value.Value, EnumNames.IfcEarthworksCutTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcEarthworksCut"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEarthworksElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEarthworksElement : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEarthworksElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEarthworksElement(SdaiInstance instance) : base(instance) { }
        public IfcEarthworksElement() : base(0) { }

        public static implicit operator IfcEarthworksElement(SdaiInstance instance) => new IfcEarthworksElement(instance);

        /// <summary>
        /// Create new instace of IfcEarthworksElement and returns object of this class to interact with
        /// </summary>
        public static new IfcEarthworksElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEarthworksElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcEarthworksElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEarthworksFill
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEarthworksFill : IfcEarthworksElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEarthworksFill
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEarthworksFill(SdaiInstance instance) : base(instance) { }
        public IfcEarthworksFill() : base(0) { }

        public static implicit operator IfcEarthworksFill(SdaiInstance instance) => new IfcEarthworksFill(instance);

        /// <summary>
        /// Create new instace of IfcEarthworksFill and returns object of this class to interact with
        /// </summary>
        public static new IfcEarthworksFill Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEarthworksFill"); Debug.Assert(inst != 0); return inst; }

        public IfcEarthworksFillTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEarthworksFillTypeEnum_); return EnumValue<IfcEarthworksFillTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEarthworksFillTypeEnum>.FromValue(value.Value, EnumNames.IfcEarthworksFillTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcEarthworksFill"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEdge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEdge : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEdge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEdge(SdaiInstance instance) : base(instance) { }
        public IfcEdge() : base(0) { }

        public static implicit operator IfcEdge(SdaiInstance instance) => new IfcEdge(instance);

        /// <summary>
        /// Create new instace of IfcEdge and returns object of this class to interact with
        /// </summary>
        public static new IfcEdge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEdge"); Debug.Assert(inst != 0); return inst; }

        public IfcVertex EdgeStart 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EdgeStart", ifcengine.sdaiINSTANCE, out inst); return new IfcVertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeStart", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcVertex EdgeEnd 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EdgeEnd", ifcengine.sdaiINSTANCE, out inst); return new IfcVertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeEnd", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcEdge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEdgeCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEdgeCurve : IfcEdge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEdgeCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEdgeCurve(SdaiInstance instance) : base(instance) { }
        public IfcEdgeCurve() : base(0) { }

        public static implicit operator IfcEdgeCurve(SdaiInstance instance) => new IfcEdgeCurve(instance);

        /// <summary>
        /// Create new instace of IfcEdgeCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcEdgeCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEdgeCurve"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve EdgeGeometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EdgeGeometry", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeGeometry", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? SameSense
            {
            get { return get_bool("SameSense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SameSense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcEdgeCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLoop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLoop : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLoop(SdaiInstance instance) : base(instance) { }
        public IfcLoop() : base(0) { }

        public static implicit operator IfcLoop(SdaiInstance instance) => new IfcLoop(instance);

        /// <summary>
        /// Create new instace of IfcLoop and returns object of this class to interact with
        /// </summary>
        public static new IfcLoop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLoop"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcLoop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEdgeLoop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEdgeLoop : IfcLoop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEdgeLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEdgeLoop(SdaiInstance instance) : base(instance) { }
        public IfcEdgeLoop() : base(0) { }

        public static implicit operator IfcEdgeLoop(SdaiInstance instance) => new IfcEdgeLoop(instance);

        /// <summary>
        /// Create new instace of IfcEdgeLoop and returns object of this class to interact with
        /// </summary>
        public static new IfcEdgeLoop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEdgeLoop"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcOrientedEdge EdgeList { get { return (new ListOfIfcOrientedEdgeSerializer()).FromAttr(m_instance, "EdgeList"); } }
        public void put_EdgeList(IEnumerable<IfcOrientedEdge> lst) { (new ListOfIfcOrientedEdgeSerializer()).ToSdaiAggr(lst, m_instance, "EdgeList"); }
        public void put_EdgeList_untyped(IEnumerable lst) { (new ListOfIfcOrientedEdgeSerializer()).ToSdaiAggr(lst, m_instance, "EdgeList"); }

        protected override TextValue EntityName() { return "IfcEdgeLoop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricAppliance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricAppliance : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricAppliance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricAppliance(SdaiInstance instance) : base(instance) { }
        public IfcElectricAppliance() : base(0) { }

        public static implicit operator IfcElectricAppliance(SdaiInstance instance) => new IfcElectricAppliance(instance);

        /// <summary>
        /// Create new instace of IfcElectricAppliance and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricAppliance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricAppliance"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricApplianceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricApplianceTypeEnum_); return EnumValue<IfcElectricApplianceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricApplianceTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricApplianceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricAppliance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricApplianceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricApplianceType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricApplianceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricApplianceType(SdaiInstance instance) : base(instance) { }
        public IfcElectricApplianceType() : base(0) { }

        public static implicit operator IfcElectricApplianceType(SdaiInstance instance) => new IfcElectricApplianceType(instance);

        /// <summary>
        /// Create new instace of IfcElectricApplianceType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricApplianceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricApplianceType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricApplianceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricApplianceTypeEnum_); return EnumValue<IfcElectricApplianceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricApplianceTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricApplianceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricApplianceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricDistributionBoard
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricDistributionBoard : IfcFlowController
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricDistributionBoard
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricDistributionBoard(SdaiInstance instance) : base(instance) { }
        public IfcElectricDistributionBoard() : base(0) { }

        public static implicit operator IfcElectricDistributionBoard(SdaiInstance instance) => new IfcElectricDistributionBoard(instance);

        /// <summary>
        /// Create new instace of IfcElectricDistributionBoard and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricDistributionBoard Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricDistributionBoard"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricDistributionBoardTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricDistributionBoardTypeEnum_); return EnumValue<IfcElectricDistributionBoardTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricDistributionBoardTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricDistributionBoardTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricDistributionBoard"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricDistributionBoardType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricDistributionBoardType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricDistributionBoardType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricDistributionBoardType(SdaiInstance instance) : base(instance) { }
        public IfcElectricDistributionBoardType() : base(0) { }

        public static implicit operator IfcElectricDistributionBoardType(SdaiInstance instance) => new IfcElectricDistributionBoardType(instance);

        /// <summary>
        /// Create new instace of IfcElectricDistributionBoardType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricDistributionBoardType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricDistributionBoardType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricDistributionBoardTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricDistributionBoardTypeEnum_); return EnumValue<IfcElectricDistributionBoardTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricDistributionBoardTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricDistributionBoardTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricDistributionBoardType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowStorageDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowStorageDevice : IfcDistributionFlowElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowStorageDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowStorageDevice(SdaiInstance instance) : base(instance) { }
        public IfcFlowStorageDevice() : base(0) { }

        public static implicit operator IfcFlowStorageDevice(SdaiInstance instance) => new IfcFlowStorageDevice(instance);

        /// <summary>
        /// Create new instace of IfcFlowStorageDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowStorageDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowStorageDevice"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFlowStorageDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricFlowStorageDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricFlowStorageDevice : IfcFlowStorageDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricFlowStorageDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricFlowStorageDevice(SdaiInstance instance) : base(instance) { }
        public IfcElectricFlowStorageDevice() : base(0) { }

        public static implicit operator IfcElectricFlowStorageDevice(SdaiInstance instance) => new IfcElectricFlowStorageDevice(instance);

        /// <summary>
        /// Create new instace of IfcElectricFlowStorageDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricFlowStorageDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricFlowStorageDevice"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricFlowStorageDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricFlowStorageDeviceTypeEnum_); return EnumValue<IfcElectricFlowStorageDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricFlowStorageDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricFlowStorageDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricFlowStorageDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowStorageDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowStorageDeviceType : IfcDistributionFlowElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowStorageDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowStorageDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcFlowStorageDeviceType() : base(0) { }

        public static implicit operator IfcFlowStorageDeviceType(SdaiInstance instance) => new IfcFlowStorageDeviceType(instance);


        protected override TextValue EntityName() { return "IfcFlowStorageDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricFlowStorageDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricFlowStorageDeviceType : IfcFlowStorageDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricFlowStorageDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricFlowStorageDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcElectricFlowStorageDeviceType() : base(0) { }

        public static implicit operator IfcElectricFlowStorageDeviceType(SdaiInstance instance) => new IfcElectricFlowStorageDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcElectricFlowStorageDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricFlowStorageDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricFlowStorageDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricFlowStorageDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricFlowStorageDeviceTypeEnum_); return EnumValue<IfcElectricFlowStorageDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricFlowStorageDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricFlowStorageDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricFlowStorageDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricFlowTreatmentDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricFlowTreatmentDevice : IfcFlowTreatmentDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricFlowTreatmentDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricFlowTreatmentDevice(SdaiInstance instance) : base(instance) { }
        public IfcElectricFlowTreatmentDevice() : base(0) { }

        public static implicit operator IfcElectricFlowTreatmentDevice(SdaiInstance instance) => new IfcElectricFlowTreatmentDevice(instance);

        /// <summary>
        /// Create new instace of IfcElectricFlowTreatmentDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricFlowTreatmentDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricFlowTreatmentDevice"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricFlowTreatmentDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricFlowTreatmentDeviceTypeEnum_); return EnumValue<IfcElectricFlowTreatmentDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricFlowTreatmentDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricFlowTreatmentDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricFlowTreatmentDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricFlowTreatmentDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricFlowTreatmentDeviceType : IfcFlowTreatmentDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricFlowTreatmentDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricFlowTreatmentDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcElectricFlowTreatmentDeviceType() : base(0) { }

        public static implicit operator IfcElectricFlowTreatmentDeviceType(SdaiInstance instance) => new IfcElectricFlowTreatmentDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcElectricFlowTreatmentDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricFlowTreatmentDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricFlowTreatmentDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricFlowTreatmentDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricFlowTreatmentDeviceTypeEnum_); return EnumValue<IfcElectricFlowTreatmentDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricFlowTreatmentDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricFlowTreatmentDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricFlowTreatmentDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricGenerator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricGenerator : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricGenerator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricGenerator(SdaiInstance instance) : base(instance) { }
        public IfcElectricGenerator() : base(0) { }

        public static implicit operator IfcElectricGenerator(SdaiInstance instance) => new IfcElectricGenerator(instance);

        /// <summary>
        /// Create new instace of IfcElectricGenerator and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricGenerator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricGenerator"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricGeneratorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricGeneratorTypeEnum_); return EnumValue<IfcElectricGeneratorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricGeneratorTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricGeneratorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricGenerator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricGeneratorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricGeneratorType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricGeneratorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricGeneratorType(SdaiInstance instance) : base(instance) { }
        public IfcElectricGeneratorType() : base(0) { }

        public static implicit operator IfcElectricGeneratorType(SdaiInstance instance) => new IfcElectricGeneratorType(instance);

        /// <summary>
        /// Create new instace of IfcElectricGeneratorType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricGeneratorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricGeneratorType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricGeneratorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricGeneratorTypeEnum_); return EnumValue<IfcElectricGeneratorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricGeneratorTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricGeneratorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricGeneratorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricMotor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricMotor : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricMotor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricMotor(SdaiInstance instance) : base(instance) { }
        public IfcElectricMotor() : base(0) { }

        public static implicit operator IfcElectricMotor(SdaiInstance instance) => new IfcElectricMotor(instance);

        /// <summary>
        /// Create new instace of IfcElectricMotor and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricMotor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricMotor"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricMotorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricMotorTypeEnum_); return EnumValue<IfcElectricMotorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricMotorTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricMotorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricMotor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricMotorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricMotorType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricMotorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricMotorType(SdaiInstance instance) : base(instance) { }
        public IfcElectricMotorType() : base(0) { }

        public static implicit operator IfcElectricMotorType(SdaiInstance instance) => new IfcElectricMotorType(instance);

        /// <summary>
        /// Create new instace of IfcElectricMotorType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricMotorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricMotorType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricMotorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricMotorTypeEnum_); return EnumValue<IfcElectricMotorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricMotorTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricMotorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricMotorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricTimeControl
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricTimeControl : IfcFlowController
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricTimeControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricTimeControl(SdaiInstance instance) : base(instance) { }
        public IfcElectricTimeControl() : base(0) { }

        public static implicit operator IfcElectricTimeControl(SdaiInstance instance) => new IfcElectricTimeControl(instance);

        /// <summary>
        /// Create new instace of IfcElectricTimeControl and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricTimeControl Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricTimeControl"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricTimeControlTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricTimeControlTypeEnum_); return EnumValue<IfcElectricTimeControlTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricTimeControlTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricTimeControlTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricTimeControl"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElectricTimeControlType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElectricTimeControlType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElectricTimeControlType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElectricTimeControlType(SdaiInstance instance) : base(instance) { }
        public IfcElectricTimeControlType() : base(0) { }

        public static implicit operator IfcElectricTimeControlType(SdaiInstance instance) => new IfcElectricTimeControlType(instance);

        /// <summary>
        /// Create new instace of IfcElectricTimeControlType and returns object of this class to interact with
        /// </summary>
        public static new IfcElectricTimeControlType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElectricTimeControlType"); Debug.Assert(inst != 0); return inst; }

        public IfcElectricTimeControlTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElectricTimeControlTypeEnum_); return EnumValue<IfcElectricTimeControlTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElectricTimeControlTypeEnum>.FromValue(value.Value, EnumNames.IfcElectricTimeControlTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElectricTimeControlType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementAssembly
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementAssembly : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementAssembly
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementAssembly(SdaiInstance instance) : base(instance) { }
        public IfcElementAssembly() : base(0) { }

        public static implicit operator IfcElementAssembly(SdaiInstance instance) => new IfcElementAssembly(instance);

        /// <summary>
        /// Create new instace of IfcElementAssembly and returns object of this class to interact with
        /// </summary>
        public static new IfcElementAssembly Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElementAssembly"); Debug.Assert(inst != 0); return inst; }

        public IfcAssemblyPlaceEnum? AssemblyPlace 
            { 
            get { var str = get_string("AssemblyPlace", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAssemblyPlaceEnum_); return EnumValue<IfcAssemblyPlaceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAssemblyPlaceEnum>.FromValue(value.Value, EnumNames.IfcAssemblyPlaceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "AssemblyPlace", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcElementAssemblyTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElementAssemblyTypeEnum_); return EnumValue<IfcElementAssemblyTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElementAssemblyTypeEnum>.FromValue(value.Value, EnumNames.IfcElementAssemblyTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElementAssembly"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementAssemblyType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementAssemblyType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementAssemblyType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementAssemblyType(SdaiInstance instance) : base(instance) { }
        public IfcElementAssemblyType() : base(0) { }

        public static implicit operator IfcElementAssemblyType(SdaiInstance instance) => new IfcElementAssemblyType(instance);

        /// <summary>
        /// Create new instace of IfcElementAssemblyType and returns object of this class to interact with
        /// </summary>
        public static new IfcElementAssemblyType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElementAssemblyType"); Debug.Assert(inst != 0); return inst; }

        public IfcElementAssemblyTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcElementAssemblyTypeEnum_); return EnumValue<IfcElementAssemblyTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcElementAssemblyTypeEnum>.FromValue(value.Value, EnumNames.IfcElementAssemblyTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcElementAssemblyType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantitySet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantitySet : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantitySet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantitySet(SdaiInstance instance) : base(instance) { }
        public IfcQuantitySet() : base(0) { }

        public static implicit operator IfcQuantitySet(SdaiInstance instance) => new IfcQuantitySet(instance);


        protected override TextValue EntityName() { return "IfcQuantitySet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcElementQuantity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcElementQuantity : IfcQuantitySet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcElementQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcElementQuantity(SdaiInstance instance) : base(instance) { }
        public IfcElementQuantity() : base(0) { }

        public static implicit operator IfcElementQuantity(SdaiInstance instance) => new IfcElementQuantity(instance);

        /// <summary>
        /// Create new instace of IfcElementQuantity and returns object of this class to interact with
        /// </summary>
        public static new IfcElementQuantity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcElementQuantity"); Debug.Assert(inst != 0); return inst; }

        public TextValue MethodOfMeasurement
            {
            get { return get_string("MethodOfMeasurement", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "MethodOfMeasurement", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcPhysicalQuantity Quantities { get { return (new SetOfIfcPhysicalQuantitySerializer()).FromAttr(m_instance, "Quantities"); } }
        public void put_Quantities(IEnumerable<IfcPhysicalQuantity> lst) { (new SetOfIfcPhysicalQuantitySerializer()).ToSdaiAggr(lst, m_instance, "Quantities"); }
        public void put_Quantities_untyped(IEnumerable lst) { (new SetOfIfcPhysicalQuantitySerializer()).ToSdaiAggr(lst, m_instance, "Quantities"); }

        protected override TextValue EntityName() { return "IfcElementQuantity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEllipse
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEllipse : IfcConic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEllipse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEllipse(SdaiInstance instance) : base(instance) { }
        public IfcEllipse() : base(0) { }

        public static implicit operator IfcEllipse(SdaiInstance instance) => new IfcEllipse(instance);

        /// <summary>
        /// Create new instace of IfcEllipse and returns object of this class to interact with
        /// </summary>
        public static new IfcEllipse Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEllipse"); Debug.Assert(inst != 0); return inst; }

        public double? SemiAxis1
            {
            get { return get_double("SemiAxis1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SemiAxis1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SemiAxis2
            {
            get { return get_double("SemiAxis2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SemiAxis2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcEllipse"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEllipseProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEllipseProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEllipseProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEllipseProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcEllipseProfileDef() : base(0) { }

        public static implicit operator IfcEllipseProfileDef(SdaiInstance instance) => new IfcEllipseProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcEllipseProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcEllipseProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEllipseProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? SemiAxis1
            {
            get { return get_double("SemiAxis1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SemiAxis1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SemiAxis2
            {
            get { return get_double("SemiAxis2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SemiAxis2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcEllipseProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEngine
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEngine : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEngine
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEngine(SdaiInstance instance) : base(instance) { }
        public IfcEngine() : base(0) { }

        public static implicit operator IfcEngine(SdaiInstance instance) => new IfcEngine(instance);

        /// <summary>
        /// Create new instace of IfcEngine and returns object of this class to interact with
        /// </summary>
        public static new IfcEngine Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEngine"); Debug.Assert(inst != 0); return inst; }

        public IfcEngineTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEngineTypeEnum_); return EnumValue<IfcEngineTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEngineTypeEnum>.FromValue(value.Value, EnumNames.IfcEngineTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcEngine"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEngineType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEngineType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEngineType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEngineType(SdaiInstance instance) : base(instance) { }
        public IfcEngineType() : base(0) { }

        public static implicit operator IfcEngineType(SdaiInstance instance) => new IfcEngineType(instance);

        /// <summary>
        /// Create new instace of IfcEngineType and returns object of this class to interact with
        /// </summary>
        public static new IfcEngineType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEngineType"); Debug.Assert(inst != 0); return inst; }

        public IfcEngineTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEngineTypeEnum_); return EnumValue<IfcEngineTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEngineTypeEnum>.FromValue(value.Value, EnumNames.IfcEngineTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcEngineType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEvaporativeCooler
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEvaporativeCooler : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEvaporativeCooler
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEvaporativeCooler(SdaiInstance instance) : base(instance) { }
        public IfcEvaporativeCooler() : base(0) { }

        public static implicit operator IfcEvaporativeCooler(SdaiInstance instance) => new IfcEvaporativeCooler(instance);

        /// <summary>
        /// Create new instace of IfcEvaporativeCooler and returns object of this class to interact with
        /// </summary>
        public static new IfcEvaporativeCooler Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEvaporativeCooler"); Debug.Assert(inst != 0); return inst; }

        public IfcEvaporativeCoolerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEvaporativeCoolerTypeEnum_); return EnumValue<IfcEvaporativeCoolerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEvaporativeCoolerTypeEnum>.FromValue(value.Value, EnumNames.IfcEvaporativeCoolerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcEvaporativeCooler"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEvaporativeCoolerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEvaporativeCoolerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEvaporativeCoolerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEvaporativeCoolerType(SdaiInstance instance) : base(instance) { }
        public IfcEvaporativeCoolerType() : base(0) { }

        public static implicit operator IfcEvaporativeCoolerType(SdaiInstance instance) => new IfcEvaporativeCoolerType(instance);

        /// <summary>
        /// Create new instace of IfcEvaporativeCoolerType and returns object of this class to interact with
        /// </summary>
        public static new IfcEvaporativeCoolerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEvaporativeCoolerType"); Debug.Assert(inst != 0); return inst; }

        public IfcEvaporativeCoolerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEvaporativeCoolerTypeEnum_); return EnumValue<IfcEvaporativeCoolerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEvaporativeCoolerTypeEnum>.FromValue(value.Value, EnumNames.IfcEvaporativeCoolerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcEvaporativeCoolerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEvaporator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEvaporator : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEvaporator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEvaporator(SdaiInstance instance) : base(instance) { }
        public IfcEvaporator() : base(0) { }

        public static implicit operator IfcEvaporator(SdaiInstance instance) => new IfcEvaporator(instance);

        /// <summary>
        /// Create new instace of IfcEvaporator and returns object of this class to interact with
        /// </summary>
        public static new IfcEvaporator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEvaporator"); Debug.Assert(inst != 0); return inst; }

        public IfcEvaporatorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEvaporatorTypeEnum_); return EnumValue<IfcEvaporatorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEvaporatorTypeEnum>.FromValue(value.Value, EnumNames.IfcEvaporatorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcEvaporator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEvaporatorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEvaporatorType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEvaporatorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEvaporatorType(SdaiInstance instance) : base(instance) { }
        public IfcEvaporatorType() : base(0) { }

        public static implicit operator IfcEvaporatorType(SdaiInstance instance) => new IfcEvaporatorType(instance);

        /// <summary>
        /// Create new instace of IfcEvaporatorType and returns object of this class to interact with
        /// </summary>
        public static new IfcEvaporatorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEvaporatorType"); Debug.Assert(inst != 0); return inst; }

        public IfcEvaporatorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEvaporatorTypeEnum_); return EnumValue<IfcEvaporatorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEvaporatorTypeEnum>.FromValue(value.Value, EnumNames.IfcEvaporatorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcEvaporatorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProcess
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProcess : IfcObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProcess
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProcess(SdaiInstance instance) : base(instance) { }
        public IfcProcess() : base(0) { }

        public static implicit operator IfcProcess(SdaiInstance instance) => new IfcProcess(instance);

        public TextValue Identification
            {
            get { return get_string("Identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identification", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LongDescription
            {
            get { return get_string("LongDescription", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongDescription", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelSequence IsPredecessorTo { get { return (new SetOfIfcRelSequenceSerializer()).FromAttr(m_instance, "IsPredecessorTo"); } }
        public SetOfIfcRelSequence IsSuccessorFrom { get { return (new SetOfIfcRelSequenceSerializer()).FromAttr(m_instance, "IsSuccessorFrom"); } }
        public SetOfIfcRelAssignsToProcess OperatesOn { get { return (new SetOfIfcRelAssignsToProcessSerializer()).FromAttr(m_instance, "OperatesOn"); } }

        protected override TextValue EntityName() { return "IfcProcess"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEvent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEvent : IfcProcess
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEvent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEvent(SdaiInstance instance) : base(instance) { }
        public IfcEvent() : base(0) { }

        public static implicit operator IfcEvent(SdaiInstance instance) => new IfcEvent(instance);

        /// <summary>
        /// Create new instace of IfcEvent and returns object of this class to interact with
        /// </summary>
        public static new IfcEvent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEvent"); Debug.Assert(inst != 0); return inst; }

        public IfcEventTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEventTypeEnum_); return EnumValue<IfcEventTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEventTypeEnum>.FromValue(value.Value, EnumNames.IfcEventTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcEventTriggerTypeEnum? EventTriggerType 
            { 
            get { var str = get_string("EventTriggerType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEventTriggerTypeEnum_); return EnumValue<IfcEventTriggerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEventTriggerTypeEnum>.FromValue(value.Value, EnumNames.IfcEventTriggerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "EventTriggerType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedEventTriggerType
            {
            get { return get_string("UserDefinedEventTriggerType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedEventTriggerType", ifcengine.sdaiSTRING, value); }
            }
        public IfcEventTime EventOccurenceTime 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EventOccurenceTime", ifcengine.sdaiINSTANCE, out inst); return new IfcEventTime(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EventOccurenceTime", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcEvent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSchedulingTime
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSchedulingTime : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSchedulingTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSchedulingTime(SdaiInstance instance) : base(instance) { }
        public IfcSchedulingTime() : base(0) { }

        public static implicit operator IfcSchedulingTime(SdaiInstance instance) => new IfcSchedulingTime(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public IfcDataOriginEnum? DataOrigin 
            { 
            get { var str = get_string("DataOrigin", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDataOriginEnum_); return EnumValue<IfcDataOriginEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDataOriginEnum>.FromValue(value.Value, EnumNames.IfcDataOriginEnum_); ifcengine.sdaiPutAttrBN(m_instance, "DataOrigin", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedDataOrigin
            {
            get { return get_string("UserDefinedDataOrigin", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedDataOrigin", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcSchedulingTime"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEventTime
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEventTime : IfcSchedulingTime
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEventTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEventTime(SdaiInstance instance) : base(instance) { }
        public IfcEventTime() : base(0) { }

        public static implicit operator IfcEventTime(SdaiInstance instance) => new IfcEventTime(instance);

        /// <summary>
        /// Create new instace of IfcEventTime and returns object of this class to interact with
        /// </summary>
        public static new IfcEventTime Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEventTime"); Debug.Assert(inst != 0); return inst; }

        public TextValue ActualDate
            {
            get { return get_string("ActualDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ActualDate", ifcengine.sdaiSTRING, value); }
            }
        public TextValue EarlyDate
            {
            get { return get_string("EarlyDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "EarlyDate", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LateDate
            {
            get { return get_string("LateDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LateDate", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ScheduleDate
            {
            get { return get_string("ScheduleDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ScheduleDate", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcEventTime"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTypeProcess
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTypeProcess : IfcTypeObject
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTypeProcess
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTypeProcess(SdaiInstance instance) : base(instance) { }
        public IfcTypeProcess() : base(0) { }

        public static implicit operator IfcTypeProcess(SdaiInstance instance) => new IfcTypeProcess(instance);

        public TextValue Identification
            {
            get { return get_string("Identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identification", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LongDescription
            {
            get { return get_string("LongDescription", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongDescription", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ProcessType
            {
            get { return get_string("ProcessType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ProcessType", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelAssignsToProcess OperatesOn { get { return (new SetOfIfcRelAssignsToProcessSerializer()).FromAttr(m_instance, "OperatesOn"); } }

        protected override TextValue EntityName() { return "IfcTypeProcess"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcEventType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcEventType : IfcTypeProcess
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcEventType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcEventType(SdaiInstance instance) : base(instance) { }
        public IfcEventType() : base(0) { }

        public static implicit operator IfcEventType(SdaiInstance instance) => new IfcEventType(instance);

        /// <summary>
        /// Create new instace of IfcEventType and returns object of this class to interact with
        /// </summary>
        public static new IfcEventType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcEventType"); Debug.Assert(inst != 0); return inst; }

        public IfcEventTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEventTypeEnum_); return EnumValue<IfcEventTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEventTypeEnum>.FromValue(value.Value, EnumNames.IfcEventTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcEventTriggerTypeEnum? EventTriggerType 
            { 
            get { var str = get_string("EventTriggerType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcEventTriggerTypeEnum_); return EnumValue<IfcEventTriggerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcEventTriggerTypeEnum>.FromValue(value.Value, EnumNames.IfcEventTriggerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "EventTriggerType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedEventTriggerType
            {
            get { return get_string("UserDefinedEventTriggerType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedEventTriggerType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcEventType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExtendedProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExtendedProperties : IfcPropertyAbstraction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExtendedProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExtendedProperties(SdaiInstance instance) : base(instance) { }
        public IfcExtendedProperties() : base(0) { }

        public static implicit operator IfcExtendedProperties(SdaiInstance instance) => new IfcExtendedProperties(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcProperty Properties { get { return (new SetOfIfcPropertySerializer()).FromAttr(m_instance, "Properties"); } }
        public void put_Properties(IEnumerable<IfcProperty> lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "Properties"); }
        public void put_Properties_untyped(IEnumerable lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "Properties"); }

        protected override TextValue EntityName() { return "IfcExtendedProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternallyDefinedHatchStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternallyDefinedHatchStyle : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternallyDefinedHatchStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternallyDefinedHatchStyle(SdaiInstance instance) : base(instance) { }
        public IfcExternallyDefinedHatchStyle() : base(0) { }

        public static implicit operator IfcExternallyDefinedHatchStyle(SdaiInstance instance) => new IfcExternallyDefinedHatchStyle(instance);

        /// <summary>
        /// Create new instace of IfcExternallyDefinedHatchStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcExternallyDefinedHatchStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExternallyDefinedHatchStyle"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcExternallyDefinedHatchStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternallyDefinedSurfaceStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternallyDefinedSurfaceStyle : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternallyDefinedSurfaceStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternallyDefinedSurfaceStyle(SdaiInstance instance) : base(instance) { }
        public IfcExternallyDefinedSurfaceStyle() : base(0) { }

        public static implicit operator IfcExternallyDefinedSurfaceStyle(SdaiInstance instance) => new IfcExternallyDefinedSurfaceStyle(instance);

        /// <summary>
        /// Create new instace of IfcExternallyDefinedSurfaceStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcExternallyDefinedSurfaceStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExternallyDefinedSurfaceStyle"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcExternallyDefinedSurfaceStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternallyDefinedTextFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternallyDefinedTextFont : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternallyDefinedTextFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternallyDefinedTextFont(SdaiInstance instance) : base(instance) { }
        public IfcExternallyDefinedTextFont() : base(0) { }

        public static implicit operator IfcExternallyDefinedTextFont(SdaiInstance instance) => new IfcExternallyDefinedTextFont(instance);

        /// <summary>
        /// Create new instace of IfcExternallyDefinedTextFont and returns object of this class to interact with
        /// </summary>
        public static new IfcExternallyDefinedTextFont Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExternallyDefinedTextFont"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcExternallyDefinedTextFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternalReferenceRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternalReferenceRelationship : IfcResourceLevelRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternalReferenceRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternalReferenceRelationship(SdaiInstance instance) : base(instance) { }
        public IfcExternalReferenceRelationship() : base(0) { }

        public static implicit operator IfcExternalReferenceRelationship(SdaiInstance instance) => new IfcExternalReferenceRelationship(instance);

        /// <summary>
        /// Create new instace of IfcExternalReferenceRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcExternalReferenceRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExternalReferenceRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcExternalReference RelatingReference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingReference", ifcengine.sdaiINSTANCE, out inst); return new IfcExternalReference(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingReference", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcResourceObjectSelect RelatedResourceObjects { get { return (new SetOfIfcResourceObjectSelectSerializer()).FromAttr(m_instance, "RelatedResourceObjects"); } }
        public void put_RelatedResourceObjects(IEnumerable<IfcResourceObjectSelect> lst) { (new SetOfIfcResourceObjectSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedResourceObjects"); }
        public void put_RelatedResourceObjects_untyped(IEnumerable lst) { (new SetOfIfcResourceObjectSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedResourceObjects"); }

        protected override TextValue EntityName() { return "IfcExternalReferenceRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternalSpatialStructureElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternalSpatialStructureElement : IfcSpatialElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternalSpatialStructureElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternalSpatialStructureElement(SdaiInstance instance) : base(instance) { }
        public IfcExternalSpatialStructureElement() : base(0) { }

        public static implicit operator IfcExternalSpatialStructureElement(SdaiInstance instance) => new IfcExternalSpatialStructureElement(instance);


        protected override TextValue EntityName() { return "IfcExternalSpatialStructureElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExternalSpatialElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExternalSpatialElement : IfcExternalSpatialStructureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExternalSpatialElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExternalSpatialElement(SdaiInstance instance) : base(instance) { }
        public IfcExternalSpatialElement() : base(0) { }

        public static implicit operator IfcExternalSpatialElement(SdaiInstance instance) => new IfcExternalSpatialElement(instance);

        /// <summary>
        /// Create new instace of IfcExternalSpatialElement and returns object of this class to interact with
        /// </summary>
        public static new IfcExternalSpatialElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExternalSpatialElement"); Debug.Assert(inst != 0); return inst; }

        public IfcExternalSpatialElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcExternalSpatialElementTypeEnum_); return EnumValue<IfcExternalSpatialElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcExternalSpatialElementTypeEnum>.FromValue(value.Value, EnumNames.IfcExternalSpatialElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcRelSpaceBoundary BoundedBy { get { return (new SetOfIfcRelSpaceBoundarySerializer()).FromAttr(m_instance, "BoundedBy"); } }

        protected override TextValue EntityName() { return "IfcExternalSpatialElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExtrudedAreaSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExtrudedAreaSolid : IfcSweptAreaSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExtrudedAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExtrudedAreaSolid(SdaiInstance instance) : base(instance) { }
        public IfcExtrudedAreaSolid() : base(0) { }

        public static implicit operator IfcExtrudedAreaSolid(SdaiInstance instance) => new IfcExtrudedAreaSolid(instance);

        /// <summary>
        /// Create new instace of IfcExtrudedAreaSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcExtrudedAreaSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExtrudedAreaSolid"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection ExtrudedDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ExtrudedDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ExtrudedDirection", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcExtrudedAreaSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcExtrudedAreaSolidTapered
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcExtrudedAreaSolidTapered : IfcExtrudedAreaSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcExtrudedAreaSolidTapered
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcExtrudedAreaSolidTapered(SdaiInstance instance) : base(instance) { }
        public IfcExtrudedAreaSolidTapered() : base(0) { }

        public static implicit operator IfcExtrudedAreaSolidTapered(SdaiInstance instance) => new IfcExtrudedAreaSolidTapered(instance);

        /// <summary>
        /// Create new instace of IfcExtrudedAreaSolidTapered and returns object of this class to interact with
        /// </summary>
        public static new IfcExtrudedAreaSolidTapered Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcExtrudedAreaSolidTapered"); Debug.Assert(inst != 0); return inst; }

        public IfcProfileDef EndSweptArea 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EndSweptArea", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EndSweptArea", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcExtrudedAreaSolidTapered"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFaceBasedSurfaceModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFaceBasedSurfaceModel : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFaceBasedSurfaceModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFaceBasedSurfaceModel(SdaiInstance instance) : base(instance) { }
        public IfcFaceBasedSurfaceModel() : base(0) { }

        public static implicit operator IfcFaceBasedSurfaceModel(SdaiInstance instance) => new IfcFaceBasedSurfaceModel(instance);

        /// <summary>
        /// Create new instace of IfcFaceBasedSurfaceModel and returns object of this class to interact with
        /// </summary>
        public static new IfcFaceBasedSurfaceModel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFaceBasedSurfaceModel"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcConnectedFaceSet FbsmFaces { get { return (new SetOfIfcConnectedFaceSetSerializer()).FromAttr(m_instance, "FbsmFaces"); } }
        public void put_FbsmFaces(IEnumerable<IfcConnectedFaceSet> lst) { (new SetOfIfcConnectedFaceSetSerializer()).ToSdaiAggr(lst, m_instance, "FbsmFaces"); }
        public void put_FbsmFaces_untyped(IEnumerable lst) { (new SetOfIfcConnectedFaceSetSerializer()).ToSdaiAggr(lst, m_instance, "FbsmFaces"); }

        protected override TextValue EntityName() { return "IfcFaceBasedSurfaceModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFaceBound
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFaceBound : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFaceBound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFaceBound(SdaiInstance instance) : base(instance) { }
        public IfcFaceBound() : base(0) { }

        public static implicit operator IfcFaceBound(SdaiInstance instance) => new IfcFaceBound(instance);

        /// <summary>
        /// Create new instace of IfcFaceBound and returns object of this class to interact with
        /// </summary>
        public static new IfcFaceBound Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFaceBound"); Debug.Assert(inst != 0); return inst; }

        public IfcLoop Bound 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Bound", ifcengine.sdaiINSTANCE, out inst); return new IfcLoop(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Bound", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? Orientation
            {
            get { return get_bool("Orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFaceBound"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFaceOuterBound
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFaceOuterBound : IfcFaceBound
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFaceOuterBound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFaceOuterBound(SdaiInstance instance) : base(instance) { }
        public IfcFaceOuterBound() : base(0) { }

        public static implicit operator IfcFaceOuterBound(SdaiInstance instance) => new IfcFaceOuterBound(instance);

        /// <summary>
        /// Create new instace of IfcFaceOuterBound and returns object of this class to interact with
        /// </summary>
        public static new IfcFaceOuterBound Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFaceOuterBound"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFaceOuterBound"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFacetedBrep
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFacetedBrep : IfcManifoldSolidBrep
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFacetedBrep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFacetedBrep(SdaiInstance instance) : base(instance) { }
        public IfcFacetedBrep() : base(0) { }

        public static implicit operator IfcFacetedBrep(SdaiInstance instance) => new IfcFacetedBrep(instance);

        /// <summary>
        /// Create new instace of IfcFacetedBrep and returns object of this class to interact with
        /// </summary>
        public static new IfcFacetedBrep Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFacetedBrep"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFacetedBrep"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFacetedBrepWithVoids
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFacetedBrepWithVoids : IfcFacetedBrep
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFacetedBrepWithVoids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFacetedBrepWithVoids(SdaiInstance instance) : base(instance) { }
        public IfcFacetedBrepWithVoids() : base(0) { }

        public static implicit operator IfcFacetedBrepWithVoids(SdaiInstance instance) => new IfcFacetedBrepWithVoids(instance);

        /// <summary>
        /// Create new instace of IfcFacetedBrepWithVoids and returns object of this class to interact with
        /// </summary>
        public static new IfcFacetedBrepWithVoids Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFacetedBrepWithVoids"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcClosedShell Voids { get { return (new SetOfIfcClosedShellSerializer()).FromAttr(m_instance, "Voids"); } }
        public void put_Voids(IEnumerable<IfcClosedShell> lst) { (new SetOfIfcClosedShellSerializer()).ToSdaiAggr(lst, m_instance, "Voids"); }
        public void put_Voids_untyped(IEnumerable lst) { (new SetOfIfcClosedShellSerializer()).ToSdaiAggr(lst, m_instance, "Voids"); }

        protected override TextValue EntityName() { return "IfcFacetedBrepWithVoids"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFacilityPartCommon
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFacilityPartCommon : IfcFacilityPart
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFacilityPartCommon
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFacilityPartCommon(SdaiInstance instance) : base(instance) { }
        public IfcFacilityPartCommon() : base(0) { }

        public static implicit operator IfcFacilityPartCommon(SdaiInstance instance) => new IfcFacilityPartCommon(instance);

        /// <summary>
        /// Create new instace of IfcFacilityPartCommon and returns object of this class to interact with
        /// </summary>
        public static new IfcFacilityPartCommon Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFacilityPartCommon"); Debug.Assert(inst != 0); return inst; }

        public IfcFacilityPartCommonTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFacilityPartCommonTypeEnum_); return EnumValue<IfcFacilityPartCommonTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFacilityPartCommonTypeEnum>.FromValue(value.Value, EnumNames.IfcFacilityPartCommonTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFacilityPartCommon"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralConnectionCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralConnectionCondition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralConnectionCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralConnectionCondition(SdaiInstance instance) : base(instance) { }
        public IfcStructuralConnectionCondition() : base(0) { }

        public static implicit operator IfcStructuralConnectionCondition(SdaiInstance instance) => new IfcStructuralConnectionCondition(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcStructuralConnectionCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFailureConnectionCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFailureConnectionCondition : IfcStructuralConnectionCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFailureConnectionCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFailureConnectionCondition(SdaiInstance instance) : base(instance) { }
        public IfcFailureConnectionCondition() : base(0) { }

        public static implicit operator IfcFailureConnectionCondition(SdaiInstance instance) => new IfcFailureConnectionCondition(instance);

        /// <summary>
        /// Create new instace of IfcFailureConnectionCondition and returns object of this class to interact with
        /// </summary>
        public static new IfcFailureConnectionCondition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFailureConnectionCondition"); Debug.Assert(inst != 0); return inst; }

        public double? TensionFailureX
            {
            get { return get_double("TensionFailureX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TensionFailureX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TensionFailureY
            {
            get { return get_double("TensionFailureY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TensionFailureY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TensionFailureZ
            {
            get { return get_double("TensionFailureZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TensionFailureZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CompressionFailureX
            {
            get { return get_double("CompressionFailureX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CompressionFailureX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CompressionFailureY
            {
            get { return get_double("CompressionFailureY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CompressionFailureY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CompressionFailureZ
            {
            get { return get_double("CompressionFailureZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CompressionFailureZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFailureConnectionCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFan
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFan : IfcFlowMovingDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFan
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFan(SdaiInstance instance) : base(instance) { }
        public IfcFan() : base(0) { }

        public static implicit operator IfcFan(SdaiInstance instance) => new IfcFan(instance);

        /// <summary>
        /// Create new instace of IfcFan and returns object of this class to interact with
        /// </summary>
        public static new IfcFan Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFan"); Debug.Assert(inst != 0); return inst; }

        public IfcFanTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFanTypeEnum_); return EnumValue<IfcFanTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFanTypeEnum>.FromValue(value.Value, EnumNames.IfcFanTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFan"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFanType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFanType : IfcFlowMovingDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFanType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFanType(SdaiInstance instance) : base(instance) { }
        public IfcFanType() : base(0) { }

        public static implicit operator IfcFanType(SdaiInstance instance) => new IfcFanType(instance);

        /// <summary>
        /// Create new instace of IfcFanType and returns object of this class to interact with
        /// </summary>
        public static new IfcFanType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFanType"); Debug.Assert(inst != 0); return inst; }

        public IfcFanTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFanTypeEnum_); return EnumValue<IfcFanTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFanTypeEnum>.FromValue(value.Value, EnumNames.IfcFanTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFanType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFastener
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFastener : IfcElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFastener
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFastener(SdaiInstance instance) : base(instance) { }
        public IfcFastener() : base(0) { }

        public static implicit operator IfcFastener(SdaiInstance instance) => new IfcFastener(instance);

        /// <summary>
        /// Create new instace of IfcFastener and returns object of this class to interact with
        /// </summary>
        public static new IfcFastener Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFastener"); Debug.Assert(inst != 0); return inst; }

        public IfcFastenerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFastenerTypeEnum_); return EnumValue<IfcFastenerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFastenerTypeEnum>.FromValue(value.Value, EnumNames.IfcFastenerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFastener"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFastenerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFastenerType : IfcElementComponentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFastenerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFastenerType(SdaiInstance instance) : base(instance) { }
        public IfcFastenerType() : base(0) { }

        public static implicit operator IfcFastenerType(SdaiInstance instance) => new IfcFastenerType(instance);

        /// <summary>
        /// Create new instace of IfcFastenerType and returns object of this class to interact with
        /// </summary>
        public static new IfcFastenerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFastenerType"); Debug.Assert(inst != 0); return inst; }

        public IfcFastenerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFastenerTypeEnum_); return EnumValue<IfcFastenerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFastenerTypeEnum>.FromValue(value.Value, EnumNames.IfcFastenerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFastenerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFeatureElementAddition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFeatureElementAddition : IfcFeatureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFeatureElementAddition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFeatureElementAddition(SdaiInstance instance) : base(instance) { }
        public IfcFeatureElementAddition() : base(0) { }

        public static implicit operator IfcFeatureElementAddition(SdaiInstance instance) => new IfcFeatureElementAddition(instance);

        public IfcRelProjectsElement ProjectsElements { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ProjectsElements", ifcengine.sdaiINSTANCE, out inst); return new IfcRelProjectsElement(inst); } }

        protected override TextValue EntityName() { return "IfcFeatureElementAddition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFillAreaStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFillAreaStyle : IfcPresentationStyle
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFillAreaStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFillAreaStyle(SdaiInstance instance) : base(instance) { }
        public IfcFillAreaStyle() : base(0) { }

        public static implicit operator IfcFillAreaStyle(SdaiInstance instance) => new IfcFillAreaStyle(instance);

        /// <summary>
        /// Create new instace of IfcFillAreaStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcFillAreaStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFillAreaStyle"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcFillStyleSelect FillStyles { get { return (new SetOfIfcFillStyleSelectSerializer()).FromAttr(m_instance, "FillStyles"); } }
        public void put_FillStyles(IEnumerable<IfcFillStyleSelect> lst) { (new SetOfIfcFillStyleSelectSerializer()).ToSdaiAggr(lst, m_instance, "FillStyles"); }
        public void put_FillStyles_untyped(IEnumerable lst) { (new SetOfIfcFillStyleSelectSerializer()).ToSdaiAggr(lst, m_instance, "FillStyles"); }
        public bool? ModelOrDraughting
            {
            get { return get_bool("ModelOrDraughting", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ModelOrDraughting", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFillAreaStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFillAreaStyleHatching
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFillAreaStyleHatching : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFillAreaStyleHatching
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFillAreaStyleHatching(SdaiInstance instance) : base(instance) { }
        public IfcFillAreaStyleHatching() : base(0) { }

        public static implicit operator IfcFillAreaStyleHatching(SdaiInstance instance) => new IfcFillAreaStyleHatching(instance);

        /// <summary>
        /// Create new instace of IfcFillAreaStyleHatching and returns object of this class to interact with
        /// </summary>
        public static new IfcFillAreaStyleHatching Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFillAreaStyleHatching"); Debug.Assert(inst != 0); return inst; }

        public IfcCurveStyle HatchLineAppearance 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "HatchLineAppearance", ifcengine.sdaiINSTANCE, out inst); return new IfcCurveStyle(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "HatchLineAppearance", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcHatchLineDistanceSelect StartOfNextHatchLine
            {
            get { return new IfcHatchLineDistanceSelect(m_instance, "StartOfNextHatchLine", 0); }
            }
        public IfcCartesianPoint PointOfReferenceHatchLine 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PointOfReferenceHatchLine", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PointOfReferenceHatchLine", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCartesianPoint PatternStart 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PatternStart", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PatternStart", ifcengine.sdaiINSTANCE, i); }
            }
        public double? HatchLineAngle
            {
            get { return get_double("HatchLineAngle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HatchLineAngle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFillAreaStyleHatching"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFillAreaStyleTiles
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFillAreaStyleTiles : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFillAreaStyleTiles
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFillAreaStyleTiles(SdaiInstance instance) : base(instance) { }
        public IfcFillAreaStyleTiles() : base(0) { }

        public static implicit operator IfcFillAreaStyleTiles(SdaiInstance instance) => new IfcFillAreaStyleTiles(instance);

        /// <summary>
        /// Create new instace of IfcFillAreaStyleTiles and returns object of this class to interact with
        /// </summary>
        public static new IfcFillAreaStyleTiles Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFillAreaStyleTiles"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcVector TilingPattern { get { return (new ListOfIfcVectorSerializer()).FromAttr(m_instance, "TilingPattern"); } }
        public void put_TilingPattern(IEnumerable<IfcVector> lst) { (new ListOfIfcVectorSerializer()).ToSdaiAggr(lst, m_instance, "TilingPattern"); }
        public void put_TilingPattern_untyped(IEnumerable lst) { (new ListOfIfcVectorSerializer()).ToSdaiAggr(lst, m_instance, "TilingPattern"); }
        public SetOfIfcStyledItem Tiles { get { return (new SetOfIfcStyledItemSerializer()).FromAttr(m_instance, "Tiles"); } }
        public void put_Tiles(IEnumerable<IfcStyledItem> lst) { (new SetOfIfcStyledItemSerializer()).ToSdaiAggr(lst, m_instance, "Tiles"); }
        public void put_Tiles_untyped(IEnumerable lst) { (new SetOfIfcStyledItemSerializer()).ToSdaiAggr(lst, m_instance, "Tiles"); }
        public double? TilingScale
            {
            get { return get_double("TilingScale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TilingScale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFillAreaStyleTiles"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFilter
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFilter : IfcFlowTreatmentDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFilter
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFilter(SdaiInstance instance) : base(instance) { }
        public IfcFilter() : base(0) { }

        public static implicit operator IfcFilter(SdaiInstance instance) => new IfcFilter(instance);

        /// <summary>
        /// Create new instace of IfcFilter and returns object of this class to interact with
        /// </summary>
        public static new IfcFilter Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFilter"); Debug.Assert(inst != 0); return inst; }

        public IfcFilterTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFilterTypeEnum_); return EnumValue<IfcFilterTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFilterTypeEnum>.FromValue(value.Value, EnumNames.IfcFilterTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFilter"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFilterType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFilterType : IfcFlowTreatmentDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFilterType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFilterType(SdaiInstance instance) : base(instance) { }
        public IfcFilterType() : base(0) { }

        public static implicit operator IfcFilterType(SdaiInstance instance) => new IfcFilterType(instance);

        /// <summary>
        /// Create new instace of IfcFilterType and returns object of this class to interact with
        /// </summary>
        public static new IfcFilterType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFilterType"); Debug.Assert(inst != 0); return inst; }

        public IfcFilterTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFilterTypeEnum_); return EnumValue<IfcFilterTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFilterTypeEnum>.FromValue(value.Value, EnumNames.IfcFilterTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFilterType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFireSuppressionTerminal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFireSuppressionTerminal : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFireSuppressionTerminal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFireSuppressionTerminal(SdaiInstance instance) : base(instance) { }
        public IfcFireSuppressionTerminal() : base(0) { }

        public static implicit operator IfcFireSuppressionTerminal(SdaiInstance instance) => new IfcFireSuppressionTerminal(instance);

        /// <summary>
        /// Create new instace of IfcFireSuppressionTerminal and returns object of this class to interact with
        /// </summary>
        public static new IfcFireSuppressionTerminal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFireSuppressionTerminal"); Debug.Assert(inst != 0); return inst; }

        public IfcFireSuppressionTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFireSuppressionTerminalTypeEnum_); return EnumValue<IfcFireSuppressionTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFireSuppressionTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcFireSuppressionTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFireSuppressionTerminal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFireSuppressionTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFireSuppressionTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFireSuppressionTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFireSuppressionTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcFireSuppressionTerminalType() : base(0) { }

        public static implicit operator IfcFireSuppressionTerminalType(SdaiInstance instance) => new IfcFireSuppressionTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcFireSuppressionTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcFireSuppressionTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFireSuppressionTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcFireSuppressionTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFireSuppressionTerminalTypeEnum_); return EnumValue<IfcFireSuppressionTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFireSuppressionTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcFireSuppressionTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFireSuppressionTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowInstrument
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowInstrument : IfcDistributionControlElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowInstrument
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowInstrument(SdaiInstance instance) : base(instance) { }
        public IfcFlowInstrument() : base(0) { }

        public static implicit operator IfcFlowInstrument(SdaiInstance instance) => new IfcFlowInstrument(instance);

        /// <summary>
        /// Create new instace of IfcFlowInstrument and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowInstrument Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowInstrument"); Debug.Assert(inst != 0); return inst; }

        public IfcFlowInstrumentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFlowInstrumentTypeEnum_); return EnumValue<IfcFlowInstrumentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFlowInstrumentTypeEnum>.FromValue(value.Value, EnumNames.IfcFlowInstrumentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFlowInstrument"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowInstrumentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowInstrumentType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowInstrumentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowInstrumentType(SdaiInstance instance) : base(instance) { }
        public IfcFlowInstrumentType() : base(0) { }

        public static implicit operator IfcFlowInstrumentType(SdaiInstance instance) => new IfcFlowInstrumentType(instance);

        /// <summary>
        /// Create new instace of IfcFlowInstrumentType and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowInstrumentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowInstrumentType"); Debug.Assert(inst != 0); return inst; }

        public IfcFlowInstrumentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFlowInstrumentTypeEnum_); return EnumValue<IfcFlowInstrumentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFlowInstrumentTypeEnum>.FromValue(value.Value, EnumNames.IfcFlowInstrumentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFlowInstrumentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowMeter
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowMeter : IfcFlowController
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowMeter
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowMeter(SdaiInstance instance) : base(instance) { }
        public IfcFlowMeter() : base(0) { }

        public static implicit operator IfcFlowMeter(SdaiInstance instance) => new IfcFlowMeter(instance);

        /// <summary>
        /// Create new instace of IfcFlowMeter and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowMeter Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowMeter"); Debug.Assert(inst != 0); return inst; }

        public IfcFlowMeterTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFlowMeterTypeEnum_); return EnumValue<IfcFlowMeterTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFlowMeterTypeEnum>.FromValue(value.Value, EnumNames.IfcFlowMeterTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFlowMeter"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFlowMeterType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFlowMeterType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFlowMeterType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFlowMeterType(SdaiInstance instance) : base(instance) { }
        public IfcFlowMeterType() : base(0) { }

        public static implicit operator IfcFlowMeterType(SdaiInstance instance) => new IfcFlowMeterType(instance);

        /// <summary>
        /// Create new instace of IfcFlowMeterType and returns object of this class to interact with
        /// </summary>
        public static new IfcFlowMeterType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFlowMeterType"); Debug.Assert(inst != 0); return inst; }

        public IfcFlowMeterTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFlowMeterTypeEnum_); return EnumValue<IfcFlowMeterTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFlowMeterTypeEnum>.FromValue(value.Value, EnumNames.IfcFlowMeterTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFlowMeterType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFooting
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFooting : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFooting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFooting(SdaiInstance instance) : base(instance) { }
        public IfcFooting() : base(0) { }

        public static implicit operator IfcFooting(SdaiInstance instance) => new IfcFooting(instance);

        /// <summary>
        /// Create new instace of IfcFooting and returns object of this class to interact with
        /// </summary>
        public static new IfcFooting Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFooting"); Debug.Assert(inst != 0); return inst; }

        public IfcFootingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFootingTypeEnum_); return EnumValue<IfcFootingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFootingTypeEnum>.FromValue(value.Value, EnumNames.IfcFootingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFooting"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFootingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFootingType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFootingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFootingType(SdaiInstance instance) : base(instance) { }
        public IfcFootingType() : base(0) { }

        public static implicit operator IfcFootingType(SdaiInstance instance) => new IfcFootingType(instance);

        /// <summary>
        /// Create new instace of IfcFootingType and returns object of this class to interact with
        /// </summary>
        public static new IfcFootingType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFootingType"); Debug.Assert(inst != 0); return inst; }

        public IfcFootingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFootingTypeEnum_); return EnumValue<IfcFootingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFootingTypeEnum>.FromValue(value.Value, EnumNames.IfcFootingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFootingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFurnishingElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFurnishingElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFurnishingElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFurnishingElement(SdaiInstance instance) : base(instance) { }
        public IfcFurnishingElement() : base(0) { }

        public static implicit operator IfcFurnishingElement(SdaiInstance instance) => new IfcFurnishingElement(instance);

        /// <summary>
        /// Create new instace of IfcFurnishingElement and returns object of this class to interact with
        /// </summary>
        public static new IfcFurnishingElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFurnishingElement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFurnishingElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFurnishingElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFurnishingElementType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFurnishingElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFurnishingElementType(SdaiInstance instance) : base(instance) { }
        public IfcFurnishingElementType() : base(0) { }

        public static implicit operator IfcFurnishingElementType(SdaiInstance instance) => new IfcFurnishingElementType(instance);

        /// <summary>
        /// Create new instace of IfcFurnishingElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcFurnishingElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFurnishingElementType"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcFurnishingElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFurniture
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFurniture : IfcFurnishingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFurniture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFurniture(SdaiInstance instance) : base(instance) { }
        public IfcFurniture() : base(0) { }

        public static implicit operator IfcFurniture(SdaiInstance instance) => new IfcFurniture(instance);

        /// <summary>
        /// Create new instace of IfcFurniture and returns object of this class to interact with
        /// </summary>
        public static new IfcFurniture Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFurniture"); Debug.Assert(inst != 0); return inst; }

        public IfcFurnitureTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFurnitureTypeEnum_); return EnumValue<IfcFurnitureTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFurnitureTypeEnum>.FromValue(value.Value, EnumNames.IfcFurnitureTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFurniture"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcFurnitureType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcFurnitureType : IfcFurnishingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcFurnitureType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcFurnitureType(SdaiInstance instance) : base(instance) { }
        public IfcFurnitureType() : base(0) { }

        public static implicit operator IfcFurnitureType(SdaiInstance instance) => new IfcFurnitureType(instance);

        /// <summary>
        /// Create new instace of IfcFurnitureType and returns object of this class to interact with
        /// </summary>
        public static new IfcFurnitureType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcFurnitureType"); Debug.Assert(inst != 0); return inst; }

        public IfcAssemblyPlaceEnum? AssemblyPlace 
            { 
            get { var str = get_string("AssemblyPlace", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAssemblyPlaceEnum_); return EnumValue<IfcAssemblyPlaceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAssemblyPlaceEnum>.FromValue(value.Value, EnumNames.IfcAssemblyPlaceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "AssemblyPlace", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcFurnitureTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcFurnitureTypeEnum_); return EnumValue<IfcFurnitureTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcFurnitureTypeEnum>.FromValue(value.Value, EnumNames.IfcFurnitureTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcFurnitureType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeographicCRS
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeographicCRS : IfcCoordinateReferenceSystem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeographicCRS
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeographicCRS(SdaiInstance instance) : base(instance) { }
        public IfcGeographicCRS() : base(0) { }

        public static implicit operator IfcGeographicCRS(SdaiInstance instance) => new IfcGeographicCRS(instance);

        /// <summary>
        /// Create new instace of IfcGeographicCRS and returns object of this class to interact with
        /// </summary>
        public static new IfcGeographicCRS Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeographicCRS"); Debug.Assert(inst != 0); return inst; }

        public TextValue PrimeMeridian
            {
            get { return get_string("PrimeMeridian", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "PrimeMeridian", ifcengine.sdaiSTRING, value); }
            }
        public IfcNamedUnit AngleUnit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AngleUnit", ifcengine.sdaiINSTANCE, out inst); return new IfcNamedUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AngleUnit", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcNamedUnit HeightUnit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "HeightUnit", ifcengine.sdaiINSTANCE, out inst); return new IfcNamedUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "HeightUnit", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcGeographicCRS"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeographicElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeographicElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeographicElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeographicElement(SdaiInstance instance) : base(instance) { }
        public IfcGeographicElement() : base(0) { }

        public static implicit operator IfcGeographicElement(SdaiInstance instance) => new IfcGeographicElement(instance);

        /// <summary>
        /// Create new instace of IfcGeographicElement and returns object of this class to interact with
        /// </summary>
        public static new IfcGeographicElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeographicElement"); Debug.Assert(inst != 0); return inst; }

        public IfcGeographicElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcGeographicElementTypeEnum_); return EnumValue<IfcGeographicElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcGeographicElementTypeEnum>.FromValue(value.Value, EnumNames.IfcGeographicElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcGeographicElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeographicElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeographicElementType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeographicElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeographicElementType(SdaiInstance instance) : base(instance) { }
        public IfcGeographicElementType() : base(0) { }

        public static implicit operator IfcGeographicElementType(SdaiInstance instance) => new IfcGeographicElementType(instance);

        /// <summary>
        /// Create new instace of IfcGeographicElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcGeographicElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeographicElementType"); Debug.Assert(inst != 0); return inst; }

        public IfcGeographicElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcGeographicElementTypeEnum_); return EnumValue<IfcGeographicElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcGeographicElementTypeEnum>.FromValue(value.Value, EnumNames.IfcGeographicElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcGeographicElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeometricSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeometricSet : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeometricSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeometricSet(SdaiInstance instance) : base(instance) { }
        public IfcGeometricSet() : base(0) { }

        public static implicit operator IfcGeometricSet(SdaiInstance instance) => new IfcGeometricSet(instance);

        /// <summary>
        /// Create new instace of IfcGeometricSet and returns object of this class to interact with
        /// </summary>
        public static new IfcGeometricSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeometricSet"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcGeometricSetSelect Elements { get { return (new SetOfIfcGeometricSetSelectSerializer()).FromAttr(m_instance, "Elements"); } }
        public void put_Elements(IEnumerable<IfcGeometricSetSelect> lst) { (new SetOfIfcGeometricSetSelectSerializer()).ToSdaiAggr(lst, m_instance, "Elements"); }
        public void put_Elements_untyped(IEnumerable lst) { (new SetOfIfcGeometricSetSelectSerializer()).ToSdaiAggr(lst, m_instance, "Elements"); }

        protected override TextValue EntityName() { return "IfcGeometricSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeometricCurveSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeometricCurveSet : IfcGeometricSet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeometricCurveSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeometricCurveSet(SdaiInstance instance) : base(instance) { }
        public IfcGeometricCurveSet() : base(0) { }

        public static implicit operator IfcGeometricCurveSet(SdaiInstance instance) => new IfcGeometricCurveSet(instance);

        /// <summary>
        /// Create new instace of IfcGeometricCurveSet and returns object of this class to interact with
        /// </summary>
        public static new IfcGeometricCurveSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeometricCurveSet"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcGeometricCurveSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRepresentationContext
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRepresentationContext : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRepresentationContext
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRepresentationContext(SdaiInstance instance) : base(instance) { }
        public IfcRepresentationContext() : base(0) { }

        public static implicit operator IfcRepresentationContext(SdaiInstance instance) => new IfcRepresentationContext(instance);

        public TextValue ContextIdentifier
            {
            get { return get_string("ContextIdentifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ContextIdentifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ContextType
            {
            get { return get_string("ContextType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ContextType", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRepresentation RepresentationsInContext { get { return (new SetOfIfcRepresentationSerializer()).FromAttr(m_instance, "RepresentationsInContext"); } }

        protected override TextValue EntityName() { return "IfcRepresentationContext"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeometricRepresentationContext
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeometricRepresentationContext : IfcRepresentationContext
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeometricRepresentationContext
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeometricRepresentationContext(SdaiInstance instance) : base(instance) { }
        public IfcGeometricRepresentationContext() : base(0) { }

        public static implicit operator IfcGeometricRepresentationContext(SdaiInstance instance) => new IfcGeometricRepresentationContext(instance);

        /// <summary>
        /// Create new instace of IfcGeometricRepresentationContext and returns object of this class to interact with
        /// </summary>
        public static new IfcGeometricRepresentationContext Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeometricRepresentationContext"); Debug.Assert(inst != 0); return inst; }

        public IntValue? CoordinateSpaceDimension
            {
            get { return get_IntValue("CoordinateSpaceDimension", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CoordinateSpaceDimension", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public double? Precision
            {
            get { return get_double("Precision", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Precision", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        public IfcAxis2Placement WorldCoordinateSystem
            {
            get { return new IfcAxis2Placement(m_instance, "WorldCoordinateSystem", 0); }
            }
        public IfcDirection TrueNorth 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TrueNorth", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TrueNorth", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcGeometricRepresentationSubContext HasSubContexts { get { return (new SetOfIfcGeometricRepresentationSubContextSerializer()).FromAttr(m_instance, "HasSubContexts"); } }
        public SetOfIfcCoordinateOperation HasCoordinateOperation { get { return (new SetOfIfcCoordinateOperationSerializer()).FromAttr(m_instance, "HasCoordinateOperation"); } }

        protected override TextValue EntityName() { return "IfcGeometricRepresentationContext"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeometricRepresentationSubContext
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeometricRepresentationSubContext : IfcGeometricRepresentationContext
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeometricRepresentationSubContext
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeometricRepresentationSubContext(SdaiInstance instance) : base(instance) { }
        public IfcGeometricRepresentationSubContext() : base(0) { }

        public static implicit operator IfcGeometricRepresentationSubContext(SdaiInstance instance) => new IfcGeometricRepresentationSubContext(instance);

        /// <summary>
        /// Create new instace of IfcGeometricRepresentationSubContext and returns object of this class to interact with
        /// </summary>
        public static new IfcGeometricRepresentationSubContext Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeometricRepresentationSubContext"); Debug.Assert(inst != 0); return inst; }

        public IfcGeometricRepresentationContext ParentContext 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ParentContext", ifcengine.sdaiINSTANCE, out inst); return new IfcGeometricRepresentationContext(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ParentContext", ifcengine.sdaiINSTANCE, i); }
            }
        public double? TargetScale
            {
            get { return get_double("TargetScale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TargetScale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcGeometricProjectionEnum? TargetView 
            { 
            get { var str = get_string("TargetView", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcGeometricProjectionEnum_); return EnumValue<IfcGeometricProjectionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcGeometricProjectionEnum>.FromValue(value.Value, EnumNames.IfcGeometricProjectionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "TargetView", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedTargetView
            {
            get { return get_string("UserDefinedTargetView", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedTargetView", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcGeometricRepresentationSubContext"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeomodel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeomodel : IfcGeotechnicalAssembly
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeomodel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeomodel(SdaiInstance instance) : base(instance) { }
        public IfcGeomodel() : base(0) { }

        public static implicit operator IfcGeomodel(SdaiInstance instance) => new IfcGeomodel(instance);

        /// <summary>
        /// Create new instace of IfcGeomodel and returns object of this class to interact with
        /// </summary>
        public static new IfcGeomodel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeomodel"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcGeomodel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeoslice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeoslice : IfcGeotechnicalAssembly
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeoslice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeoslice(SdaiInstance instance) : base(instance) { }
        public IfcGeoslice() : base(0) { }

        public static implicit operator IfcGeoslice(SdaiInstance instance) => new IfcGeoslice(instance);

        /// <summary>
        /// Create new instace of IfcGeoslice and returns object of this class to interact with
        /// </summary>
        public static new IfcGeoslice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeoslice"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcGeoslice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGeotechnicalStratum
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGeotechnicalStratum : IfcGeotechnicalElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGeotechnicalStratum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGeotechnicalStratum(SdaiInstance instance) : base(instance) { }
        public IfcGeotechnicalStratum() : base(0) { }

        public static implicit operator IfcGeotechnicalStratum(SdaiInstance instance) => new IfcGeotechnicalStratum(instance);

        /// <summary>
        /// Create new instace of IfcGeotechnicalStratum and returns object of this class to interact with
        /// </summary>
        public static new IfcGeotechnicalStratum Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGeotechnicalStratum"); Debug.Assert(inst != 0); return inst; }

        public IfcGeotechnicalStratumTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcGeotechnicalStratumTypeEnum_); return EnumValue<IfcGeotechnicalStratumTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcGeotechnicalStratumTypeEnum>.FromValue(value.Value, EnumNames.IfcGeotechnicalStratumTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcGeotechnicalStratum"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGradientCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGradientCurve : IfcCompositeCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGradientCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGradientCurve(SdaiInstance instance) : base(instance) { }
        public IfcGradientCurve() : base(0) { }

        public static implicit operator IfcGradientCurve(SdaiInstance instance) => new IfcGradientCurve(instance);

        /// <summary>
        /// Create new instace of IfcGradientCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcGradientCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGradientCurve"); Debug.Assert(inst != 0); return inst; }

        public IfcBoundedCurve BaseCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BaseCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundedCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BaseCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcPlacement EndPoint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EndPoint", ifcengine.sdaiINSTANCE, out inst); return new IfcPlacement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EndPoint", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcGradientCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGrid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGrid : IfcPositioningElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGrid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGrid(SdaiInstance instance) : base(instance) { }
        public IfcGrid() : base(0) { }

        public static implicit operator IfcGrid(SdaiInstance instance) => new IfcGrid(instance);

        /// <summary>
        /// Create new instace of IfcGrid and returns object of this class to interact with
        /// </summary>
        public static new IfcGrid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGrid"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcGridAxis UAxes { get { return (new ListOfIfcGridAxisSerializer()).FromAttr(m_instance, "UAxes"); } }
        public void put_UAxes(IEnumerable<IfcGridAxis> lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "UAxes"); }
        public void put_UAxes_untyped(IEnumerable lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "UAxes"); }
        public ListOfIfcGridAxis VAxes { get { return (new ListOfIfcGridAxisSerializer()).FromAttr(m_instance, "VAxes"); } }
        public void put_VAxes(IEnumerable<IfcGridAxis> lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "VAxes"); }
        public void put_VAxes_untyped(IEnumerable lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "VAxes"); }
        public ListOfIfcGridAxis WAxes { get { return (new ListOfIfcGridAxisSerializer()).FromAttr(m_instance, "WAxes"); } }
        public void put_WAxes(IEnumerable<IfcGridAxis> lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "WAxes"); }
        public void put_WAxes_untyped(IEnumerable lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "WAxes"); }
        public IfcGridTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcGridTypeEnum_); return EnumValue<IfcGridTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcGridTypeEnum>.FromValue(value.Value, EnumNames.IfcGridTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcGrid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGridAxis
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGridAxis : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGridAxis
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGridAxis(SdaiInstance instance) : base(instance) { }
        public IfcGridAxis() : base(0) { }

        public static implicit operator IfcGridAxis(SdaiInstance instance) => new IfcGridAxis(instance);

        /// <summary>
        /// Create new instace of IfcGridAxis and returns object of this class to interact with
        /// </summary>
        public static new IfcGridAxis Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGridAxis"); Debug.Assert(inst != 0); return inst; }

        public TextValue AxisTag
            {
            get { return get_string("AxisTag", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "AxisTag", ifcengine.sdaiSTRING, value); }
            }
        public IfcCurve AxisCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AxisCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AxisCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? SameSense
            {
            get { return get_bool("SameSense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SameSense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public SetOfIfcGrid PartOfW { get { return (new SetOfIfcGridSerializer()).FromAttr(m_instance, "PartOfW"); } }
        public SetOfIfcGrid PartOfV { get { return (new SetOfIfcGridSerializer()).FromAttr(m_instance, "PartOfV"); } }
        public SetOfIfcGrid PartOfU { get { return (new SetOfIfcGridSerializer()).FromAttr(m_instance, "PartOfU"); } }
        public SetOfIfcVirtualGridIntersection HasIntersections { get { return (new SetOfIfcVirtualGridIntersectionSerializer()).FromAttr(m_instance, "HasIntersections"); } }

        protected override TextValue EntityName() { return "IfcGridAxis"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcObjectPlacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcObjectPlacement : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcObjectPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcObjectPlacement(SdaiInstance instance) : base(instance) { }
        public IfcObjectPlacement() : base(0) { }

        public static implicit operator IfcObjectPlacement(SdaiInstance instance) => new IfcObjectPlacement(instance);

        public IfcObjectPlacement PlacementRelTo 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PlacementRelTo", ifcengine.sdaiINSTANCE, out inst); return new IfcObjectPlacement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PlacementRelTo", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcProduct PlacesObject { get { return (new SetOfIfcProductSerializer()).FromAttr(m_instance, "PlacesObject"); } }
        public SetOfIfcObjectPlacement ReferencedByPlacements { get { return (new SetOfIfcObjectPlacementSerializer()).FromAttr(m_instance, "ReferencedByPlacements"); } }

        protected override TextValue EntityName() { return "IfcObjectPlacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcGridPlacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcGridPlacement : IfcObjectPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcGridPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcGridPlacement(SdaiInstance instance) : base(instance) { }
        public IfcGridPlacement() : base(0) { }

        public static implicit operator IfcGridPlacement(SdaiInstance instance) => new IfcGridPlacement(instance);

        /// <summary>
        /// Create new instace of IfcGridPlacement and returns object of this class to interact with
        /// </summary>
        public static new IfcGridPlacement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcGridPlacement"); Debug.Assert(inst != 0); return inst; }

        public IfcVirtualGridIntersection PlacementLocation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PlacementLocation", ifcengine.sdaiINSTANCE, out inst); return new IfcVirtualGridIntersection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PlacementLocation", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcGridPlacementDirectionSelect PlacementRefDirection
            {
            get { return new IfcGridPlacementDirectionSelect(m_instance, "PlacementRefDirection", 0); }
            }

        protected override TextValue EntityName() { return "IfcGridPlacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcHeatExchanger
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcHeatExchanger : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcHeatExchanger
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcHeatExchanger(SdaiInstance instance) : base(instance) { }
        public IfcHeatExchanger() : base(0) { }

        public static implicit operator IfcHeatExchanger(SdaiInstance instance) => new IfcHeatExchanger(instance);

        /// <summary>
        /// Create new instace of IfcHeatExchanger and returns object of this class to interact with
        /// </summary>
        public static new IfcHeatExchanger Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcHeatExchanger"); Debug.Assert(inst != 0); return inst; }

        public IfcHeatExchangerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcHeatExchangerTypeEnum_); return EnumValue<IfcHeatExchangerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcHeatExchangerTypeEnum>.FromValue(value.Value, EnumNames.IfcHeatExchangerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcHeatExchanger"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcHeatExchangerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcHeatExchangerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcHeatExchangerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcHeatExchangerType(SdaiInstance instance) : base(instance) { }
        public IfcHeatExchangerType() : base(0) { }

        public static implicit operator IfcHeatExchangerType(SdaiInstance instance) => new IfcHeatExchangerType(instance);

        /// <summary>
        /// Create new instace of IfcHeatExchangerType and returns object of this class to interact with
        /// </summary>
        public static new IfcHeatExchangerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcHeatExchangerType"); Debug.Assert(inst != 0); return inst; }

        public IfcHeatExchangerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcHeatExchangerTypeEnum_); return EnumValue<IfcHeatExchangerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcHeatExchangerTypeEnum>.FromValue(value.Value, EnumNames.IfcHeatExchangerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcHeatExchangerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcHumidifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcHumidifier : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcHumidifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcHumidifier(SdaiInstance instance) : base(instance) { }
        public IfcHumidifier() : base(0) { }

        public static implicit operator IfcHumidifier(SdaiInstance instance) => new IfcHumidifier(instance);

        /// <summary>
        /// Create new instace of IfcHumidifier and returns object of this class to interact with
        /// </summary>
        public static new IfcHumidifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcHumidifier"); Debug.Assert(inst != 0); return inst; }

        public IfcHumidifierTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcHumidifierTypeEnum_); return EnumValue<IfcHumidifierTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcHumidifierTypeEnum>.FromValue(value.Value, EnumNames.IfcHumidifierTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcHumidifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcHumidifierType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcHumidifierType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcHumidifierType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcHumidifierType(SdaiInstance instance) : base(instance) { }
        public IfcHumidifierType() : base(0) { }

        public static implicit operator IfcHumidifierType(SdaiInstance instance) => new IfcHumidifierType(instance);

        /// <summary>
        /// Create new instace of IfcHumidifierType and returns object of this class to interact with
        /// </summary>
        public static new IfcHumidifierType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcHumidifierType"); Debug.Assert(inst != 0); return inst; }

        public IfcHumidifierTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcHumidifierTypeEnum_); return EnumValue<IfcHumidifierTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcHumidifierTypeEnum>.FromValue(value.Value, EnumNames.IfcHumidifierTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcHumidifierType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcImageTexture
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcImageTexture : IfcSurfaceTexture
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcImageTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcImageTexture(SdaiInstance instance) : base(instance) { }
        public IfcImageTexture() : base(0) { }

        public static implicit operator IfcImageTexture(SdaiInstance instance) => new IfcImageTexture(instance);

        /// <summary>
        /// Create new instace of IfcImageTexture and returns object of this class to interact with
        /// </summary>
        public static new IfcImageTexture Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcImageTexture"); Debug.Assert(inst != 0); return inst; }

        public TextValue URLReference
            {
            get { return get_string("URLReference", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "URLReference", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcImageTexture"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcImpactProtectionDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcImpactProtectionDevice : IfcElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcImpactProtectionDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcImpactProtectionDevice(SdaiInstance instance) : base(instance) { }
        public IfcImpactProtectionDevice() : base(0) { }

        public static implicit operator IfcImpactProtectionDevice(SdaiInstance instance) => new IfcImpactProtectionDevice(instance);

        /// <summary>
        /// Create new instace of IfcImpactProtectionDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcImpactProtectionDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcImpactProtectionDevice"); Debug.Assert(inst != 0); return inst; }

        public IfcImpactProtectionDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcImpactProtectionDeviceTypeEnum_); return EnumValue<IfcImpactProtectionDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcImpactProtectionDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcImpactProtectionDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcImpactProtectionDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcImpactProtectionDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcImpactProtectionDeviceType : IfcElementComponentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcImpactProtectionDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcImpactProtectionDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcImpactProtectionDeviceType() : base(0) { }

        public static implicit operator IfcImpactProtectionDeviceType(SdaiInstance instance) => new IfcImpactProtectionDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcImpactProtectionDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcImpactProtectionDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcImpactProtectionDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcImpactProtectionDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcImpactProtectionDeviceTypeEnum_); return EnumValue<IfcImpactProtectionDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcImpactProtectionDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcImpactProtectionDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcImpactProtectionDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIndexedColourMap
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIndexedColourMap : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIndexedColourMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIndexedColourMap(SdaiInstance instance) : base(instance) { }
        public IfcIndexedColourMap() : base(0) { }

        public static implicit operator IfcIndexedColourMap(SdaiInstance instance) => new IfcIndexedColourMap(instance);

        /// <summary>
        /// Create new instace of IfcIndexedColourMap and returns object of this class to interact with
        /// </summary>
        public static new IfcIndexedColourMap Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIndexedColourMap"); Debug.Assert(inst != 0); return inst; }

        public IfcTessellatedFaceSet MappedTo 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MappedTo", ifcengine.sdaiINSTANCE, out inst); return new IfcTessellatedFaceSet(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MappedTo", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Opacity
            {
            get { return get_double("Opacity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Opacity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcColourRgbList Colours 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Colours", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgbList(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Colours", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcPositiveInteger ColourIndex { get { return (new ListOfIfcPositiveIntegerSerializer()).FromAttr(m_instance, "ColourIndex"); } }
        public void put_ColourIndex(IEnumerable<IntValue> lst) { (new ListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "ColourIndex"); }
        public void put_ColourIndex_untyped(IEnumerable lst) { (new ListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "ColourIndex"); }

        protected override TextValue EntityName() { return "IfcIndexedColourMap"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIndexedPolyCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIndexedPolyCurve : IfcBoundedCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIndexedPolyCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIndexedPolyCurve(SdaiInstance instance) : base(instance) { }
        public IfcIndexedPolyCurve() : base(0) { }

        public static implicit operator IfcIndexedPolyCurve(SdaiInstance instance) => new IfcIndexedPolyCurve(instance);

        /// <summary>
        /// Create new instace of IfcIndexedPolyCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcIndexedPolyCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIndexedPolyCurve"); Debug.Assert(inst != 0); return inst; }

        public IfcCartesianPointList Points 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Points", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPointList(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Points", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcSegmentIndexSelect Segments { get { return (new ListOfIfcSegmentIndexSelectSerializer()).FromAttr(m_instance, "Segments"); } }
        public void put_Segments(IEnumerable<IfcSegmentIndexSelect> lst) { (new ListOfIfcSegmentIndexSelectSerializer()).ToSdaiAggr(lst, m_instance, "Segments"); }
        public void put_Segments_untyped(IEnumerable lst) { (new ListOfIfcSegmentIndexSelectSerializer()).ToSdaiAggr(lst, m_instance, "Segments"); }
        public bool? SelfIntersect
            {
            get { return get_bool("SelfIntersect", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SelfIntersect", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcIndexedPolyCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTessellatedItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTessellatedItem : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTessellatedItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTessellatedItem(SdaiInstance instance) : base(instance) { }
        public IfcTessellatedItem() : base(0) { }

        public static implicit operator IfcTessellatedItem(SdaiInstance instance) => new IfcTessellatedItem(instance);


        protected override TextValue EntityName() { return "IfcTessellatedItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIndexedPolygonalFace
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIndexedPolygonalFace : IfcTessellatedItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIndexedPolygonalFace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIndexedPolygonalFace(SdaiInstance instance) : base(instance) { }
        public IfcIndexedPolygonalFace() : base(0) { }

        public static implicit operator IfcIndexedPolygonalFace(SdaiInstance instance) => new IfcIndexedPolygonalFace(instance);

        /// <summary>
        /// Create new instace of IfcIndexedPolygonalFace and returns object of this class to interact with
        /// </summary>
        public static new IfcIndexedPolygonalFace Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIndexedPolygonalFace"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcPositiveInteger CoordIndex { get { return (new ListOfIfcPositiveIntegerSerializer()).FromAttr(m_instance, "CoordIndex"); } }
        public void put_CoordIndex(IEnumerable<IntValue> lst) { (new ListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "CoordIndex"); }
        public void put_CoordIndex_untyped(IEnumerable lst) { (new ListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "CoordIndex"); }
        public SetOfIfcPolygonalFaceSet ToFaceSet { get { return (new SetOfIfcPolygonalFaceSetSerializer()).FromAttr(m_instance, "ToFaceSet"); } }
        public SetOfIfcTextureCoordinateIndices HasTexCoords { get { return (new SetOfIfcTextureCoordinateIndicesSerializer()).FromAttr(m_instance, "HasTexCoords"); } }

        protected override TextValue EntityName() { return "IfcIndexedPolygonalFace"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIndexedPolygonalFaceWithVoids
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIndexedPolygonalFaceWithVoids : IfcIndexedPolygonalFace
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIndexedPolygonalFaceWithVoids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIndexedPolygonalFaceWithVoids(SdaiInstance instance) : base(instance) { }
        public IfcIndexedPolygonalFaceWithVoids() : base(0) { }

        public static implicit operator IfcIndexedPolygonalFaceWithVoids(SdaiInstance instance) => new IfcIndexedPolygonalFaceWithVoids(instance);

        /// <summary>
        /// Create new instace of IfcIndexedPolygonalFaceWithVoids and returns object of this class to interact with
        /// </summary>
        public static new IfcIndexedPolygonalFaceWithVoids Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIndexedPolygonalFaceWithVoids"); Debug.Assert(inst != 0); return inst; }

        public ListOfListOfIfcPositiveInteger InnerCoordIndices { get { return (new ListOfListOfIfcPositiveIntegerSerializer()).FromAttr(m_instance, "InnerCoordIndices"); } }
        public void put_InnerCoordIndices(IEnumerable<ListOfIfcPositiveInteger> lst) { (new ListOfListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "InnerCoordIndices"); }
        public void put_InnerCoordIndices_untyped(IEnumerable lst) { (new ListOfListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "InnerCoordIndices"); }

        protected override TextValue EntityName() { return "IfcIndexedPolygonalFaceWithVoids"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextureCoordinate
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextureCoordinate : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextureCoordinate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextureCoordinate(SdaiInstance instance) : base(instance) { }
        public IfcTextureCoordinate() : base(0) { }

        public static implicit operator IfcTextureCoordinate(SdaiInstance instance) => new IfcTextureCoordinate(instance);

        public ListOfIfcSurfaceTexture Maps { get { return (new ListOfIfcSurfaceTextureSerializer()).FromAttr(m_instance, "Maps"); } }
        public void put_Maps(IEnumerable<IfcSurfaceTexture> lst) { (new ListOfIfcSurfaceTextureSerializer()).ToSdaiAggr(lst, m_instance, "Maps"); }
        public void put_Maps_untyped(IEnumerable lst) { (new ListOfIfcSurfaceTextureSerializer()).ToSdaiAggr(lst, m_instance, "Maps"); }

        protected override TextValue EntityName() { return "IfcTextureCoordinate"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIndexedTextureMap
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIndexedTextureMap : IfcTextureCoordinate
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIndexedTextureMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIndexedTextureMap(SdaiInstance instance) : base(instance) { }
        public IfcIndexedTextureMap() : base(0) { }

        public static implicit operator IfcIndexedTextureMap(SdaiInstance instance) => new IfcIndexedTextureMap(instance);

        public IfcTessellatedFaceSet MappedTo 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MappedTo", ifcengine.sdaiINSTANCE, out inst); return new IfcTessellatedFaceSet(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MappedTo", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcTextureVertexList TexCoords 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TexCoords", ifcengine.sdaiINSTANCE, out inst); return new IfcTextureVertexList(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TexCoords", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcIndexedTextureMap"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIndexedPolygonalTextureMap
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIndexedPolygonalTextureMap : IfcIndexedTextureMap
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIndexedPolygonalTextureMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIndexedPolygonalTextureMap(SdaiInstance instance) : base(instance) { }
        public IfcIndexedPolygonalTextureMap() : base(0) { }

        public static implicit operator IfcIndexedPolygonalTextureMap(SdaiInstance instance) => new IfcIndexedPolygonalTextureMap(instance);

        /// <summary>
        /// Create new instace of IfcIndexedPolygonalTextureMap and returns object of this class to interact with
        /// </summary>
        public static new IfcIndexedPolygonalTextureMap Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIndexedPolygonalTextureMap"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcTextureCoordinateIndices TexCoordIndices { get { return (new SetOfIfcTextureCoordinateIndicesSerializer()).FromAttr(m_instance, "TexCoordIndices"); } }
        public void put_TexCoordIndices(IEnumerable<IfcTextureCoordinateIndices> lst) { (new SetOfIfcTextureCoordinateIndicesSerializer()).ToSdaiAggr(lst, m_instance, "TexCoordIndices"); }
        public void put_TexCoordIndices_untyped(IEnumerable lst) { (new SetOfIfcTextureCoordinateIndicesSerializer()).ToSdaiAggr(lst, m_instance, "TexCoordIndices"); }

        protected override TextValue EntityName() { return "IfcIndexedPolygonalTextureMap"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIndexedTriangleTextureMap
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIndexedTriangleTextureMap : IfcIndexedTextureMap
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIndexedTriangleTextureMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIndexedTriangleTextureMap(SdaiInstance instance) : base(instance) { }
        public IfcIndexedTriangleTextureMap() : base(0) { }

        public static implicit operator IfcIndexedTriangleTextureMap(SdaiInstance instance) => new IfcIndexedTriangleTextureMap(instance);

        /// <summary>
        /// Create new instace of IfcIndexedTriangleTextureMap and returns object of this class to interact with
        /// </summary>
        public static new IfcIndexedTriangleTextureMap Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIndexedTriangleTextureMap"); Debug.Assert(inst != 0); return inst; }

        public ListOfListOfIfcPositiveInteger TexCoordIndex { get { return (new ListOfListOfIfcPositiveIntegerSerializer()).FromAttr(m_instance, "TexCoordIndex"); } }
        public void put_TexCoordIndex(IEnumerable<ListOfIfcPositiveInteger> lst) { (new ListOfListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "TexCoordIndex"); }
        public void put_TexCoordIndex_untyped(IEnumerable lst) { (new ListOfListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "TexCoordIndex"); }

        protected override TextValue EntityName() { return "IfcIndexedTriangleTextureMap"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcInterceptor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcInterceptor : IfcFlowTreatmentDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcInterceptor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcInterceptor(SdaiInstance instance) : base(instance) { }
        public IfcInterceptor() : base(0) { }

        public static implicit operator IfcInterceptor(SdaiInstance instance) => new IfcInterceptor(instance);

        /// <summary>
        /// Create new instace of IfcInterceptor and returns object of this class to interact with
        /// </summary>
        public static new IfcInterceptor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcInterceptor"); Debug.Assert(inst != 0); return inst; }

        public IfcInterceptorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcInterceptorTypeEnum_); return EnumValue<IfcInterceptorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcInterceptorTypeEnum>.FromValue(value.Value, EnumNames.IfcInterceptorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcInterceptor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcInterceptorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcInterceptorType : IfcFlowTreatmentDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcInterceptorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcInterceptorType(SdaiInstance instance) : base(instance) { }
        public IfcInterceptorType() : base(0) { }

        public static implicit operator IfcInterceptorType(SdaiInstance instance) => new IfcInterceptorType(instance);

        /// <summary>
        /// Create new instace of IfcInterceptorType and returns object of this class to interact with
        /// </summary>
        public static new IfcInterceptorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcInterceptorType"); Debug.Assert(inst != 0); return inst; }

        public IfcInterceptorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcInterceptorTypeEnum_); return EnumValue<IfcInterceptorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcInterceptorTypeEnum>.FromValue(value.Value, EnumNames.IfcInterceptorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcInterceptorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceCurve : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceCurve(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceCurve() : base(0) { }

        public static implicit operator IfcSurfaceCurve(SdaiInstance instance) => new IfcSurfaceCurve(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceCurve"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve Curve3D 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Curve3D", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Curve3D", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcPcurve AssociatedGeometry { get { return (new ListOfIfcPcurveSerializer()).FromAttr(m_instance, "AssociatedGeometry"); } }
        public void put_AssociatedGeometry(IEnumerable<IfcPcurve> lst) { (new ListOfIfcPcurveSerializer()).ToSdaiAggr(lst, m_instance, "AssociatedGeometry"); }
        public void put_AssociatedGeometry_untyped(IEnumerable lst) { (new ListOfIfcPcurveSerializer()).ToSdaiAggr(lst, m_instance, "AssociatedGeometry"); }
        public IfcPreferredSurfaceCurveRepresentation? MasterRepresentation 
            { 
            get { var str = get_string("MasterRepresentation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPreferredSurfaceCurveRepresentation_); return EnumValue<IfcPreferredSurfaceCurveRepresentation>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPreferredSurfaceCurveRepresentation>.FromValue(value.Value, EnumNames.IfcPreferredSurfaceCurveRepresentation_); ifcengine.sdaiPutAttrBN(m_instance, "MasterRepresentation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSurfaceCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIntersectionCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIntersectionCurve : IfcSurfaceCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIntersectionCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIntersectionCurve(SdaiInstance instance) : base(instance) { }
        public IfcIntersectionCurve() : base(0) { }

        public static implicit operator IfcIntersectionCurve(SdaiInstance instance) => new IfcIntersectionCurve(instance);

        /// <summary>
        /// Create new instace of IfcIntersectionCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcIntersectionCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIntersectionCurve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcIntersectionCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcInventory
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcInventory : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcInventory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcInventory(SdaiInstance instance) : base(instance) { }
        public IfcInventory() : base(0) { }

        public static implicit operator IfcInventory(SdaiInstance instance) => new IfcInventory(instance);

        /// <summary>
        /// Create new instace of IfcInventory and returns object of this class to interact with
        /// </summary>
        public static new IfcInventory Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcInventory"); Debug.Assert(inst != 0); return inst; }

        public IfcInventoryTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcInventoryTypeEnum_); return EnumValue<IfcInventoryTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcInventoryTypeEnum>.FromValue(value.Value, EnumNames.IfcInventoryTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public IfcActorSelect Jurisdiction
            {
            get { return new IfcActorSelect(m_instance, "Jurisdiction", 0); }
            }
        public SetOfIfcPerson ResponsiblePersons { get { return (new SetOfIfcPersonSerializer()).FromAttr(m_instance, "ResponsiblePersons"); } }
        public void put_ResponsiblePersons(IEnumerable<IfcPerson> lst) { (new SetOfIfcPersonSerializer()).ToSdaiAggr(lst, m_instance, "ResponsiblePersons"); }
        public void put_ResponsiblePersons_untyped(IEnumerable lst) { (new SetOfIfcPersonSerializer()).ToSdaiAggr(lst, m_instance, "ResponsiblePersons"); }
        public TextValue LastUpdateDate
            {
            get { return get_string("LastUpdateDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LastUpdateDate", ifcengine.sdaiSTRING, value); }
            }
        public IfcCostValue CurrentValue 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "CurrentValue", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "CurrentValue", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCostValue OriginalValue 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OriginalValue", ifcengine.sdaiINSTANCE, out inst); return new IfcCostValue(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OriginalValue", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcInventory"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTimeSeries
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTimeSeries : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTimeSeries
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTimeSeries(SdaiInstance instance) : base(instance) { }
        public IfcTimeSeries() : base(0) { }

        public static implicit operator IfcTimeSeries(SdaiInstance instance) => new IfcTimeSeries(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue StartTime
            {
            get { return get_string("StartTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "StartTime", ifcengine.sdaiSTRING, value); }
            }
        public TextValue EndTime
            {
            get { return get_string("EndTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "EndTime", ifcengine.sdaiSTRING, value); }
            }
        public IfcTimeSeriesDataTypeEnum? TimeSeriesDataType 
            { 
            get { var str = get_string("TimeSeriesDataType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTimeSeriesDataTypeEnum_); return EnumValue<IfcTimeSeriesDataTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTimeSeriesDataTypeEnum>.FromValue(value.Value, EnumNames.IfcTimeSeriesDataTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "TimeSeriesDataType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDataOriginEnum? DataOrigin 
            { 
            get { var str = get_string("DataOrigin", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDataOriginEnum_); return EnumValue<IfcDataOriginEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDataOriginEnum>.FromValue(value.Value, EnumNames.IfcDataOriginEnum_); ifcengine.sdaiPutAttrBN(m_instance, "DataOrigin", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedDataOrigin
            {
            get { return get_string("UserDefinedDataOrigin", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedDataOrigin", ifcengine.sdaiSTRING, value); }
            }

        public IfcUnit Unit
            {
            get { return new IfcUnit(m_instance, "Unit", 0); }
            }
        public SetOfIfcExternalReferenceRelationship HasExternalReference { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReference"); } }

        protected override TextValue EntityName() { return "IfcTimeSeries"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIrregularTimeSeries
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIrregularTimeSeries : IfcTimeSeries
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIrregularTimeSeries
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIrregularTimeSeries(SdaiInstance instance) : base(instance) { }
        public IfcIrregularTimeSeries() : base(0) { }

        public static implicit operator IfcIrregularTimeSeries(SdaiInstance instance) => new IfcIrregularTimeSeries(instance);

        /// <summary>
        /// Create new instace of IfcIrregularTimeSeries and returns object of this class to interact with
        /// </summary>
        public static new IfcIrregularTimeSeries Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIrregularTimeSeries"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcIrregularTimeSeriesValue Values { get { return (new ListOfIfcIrregularTimeSeriesValueSerializer()).FromAttr(m_instance, "Values"); } }
        public void put_Values(IEnumerable<IfcIrregularTimeSeriesValue> lst) { (new ListOfIfcIrregularTimeSeriesValueSerializer()).ToSdaiAggr(lst, m_instance, "Values"); }
        public void put_Values_untyped(IEnumerable lst) { (new ListOfIfcIrregularTimeSeriesValueSerializer()).ToSdaiAggr(lst, m_instance, "Values"); }

        protected override TextValue EntityName() { return "IfcIrregularTimeSeries"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIrregularTimeSeriesValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIrregularTimeSeriesValue : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIrregularTimeSeriesValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIrregularTimeSeriesValue(SdaiInstance instance) : base(instance) { }
        public IfcIrregularTimeSeriesValue() : base(0) { }

        public static implicit operator IfcIrregularTimeSeriesValue(SdaiInstance instance) => new IfcIrregularTimeSeriesValue(instance);

        /// <summary>
        /// Create new instace of IfcIrregularTimeSeriesValue and returns object of this class to interact with
        /// </summary>
        public static new IfcIrregularTimeSeriesValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIrregularTimeSeriesValue"); Debug.Assert(inst != 0); return inst; }

        public TextValue TimeStamp
            {
            get { return get_string("TimeStamp", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TimeStamp", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcValue ListValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "ListValues"); } }
        public void put_ListValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }
        public void put_ListValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }

        protected override TextValue EntityName() { return "IfcIrregularTimeSeriesValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcIShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcIShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcIShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcIShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcIShapeProfileDef() : base(0) { }

        public static implicit operator IfcIShapeProfileDef(SdaiInstance instance) => new IfcIShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcIShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcIShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcIShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? OverallWidth
            {
            get { return get_double("OverallWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OverallDepth
            {
            get { return get_double("OverallDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebThickness
            {
            get { return get_double("WebThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeThickness
            {
            get { return get_double("FlangeThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FilletRadius
            {
            get { return get_double("FilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeEdgeRadius
            {
            get { return get_double("FlangeEdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeEdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeSlope
            {
            get { return get_double("FlangeSlope", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeSlope", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcIShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcJunctionBox
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcJunctionBox : IfcFlowFitting
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcJunctionBox
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcJunctionBox(SdaiInstance instance) : base(instance) { }
        public IfcJunctionBox() : base(0) { }

        public static implicit operator IfcJunctionBox(SdaiInstance instance) => new IfcJunctionBox(instance);

        /// <summary>
        /// Create new instace of IfcJunctionBox and returns object of this class to interact with
        /// </summary>
        public static new IfcJunctionBox Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcJunctionBox"); Debug.Assert(inst != 0); return inst; }

        public IfcJunctionBoxTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcJunctionBoxTypeEnum_); return EnumValue<IfcJunctionBoxTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcJunctionBoxTypeEnum>.FromValue(value.Value, EnumNames.IfcJunctionBoxTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcJunctionBox"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcJunctionBoxType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcJunctionBoxType : IfcFlowFittingType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcJunctionBoxType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcJunctionBoxType(SdaiInstance instance) : base(instance) { }
        public IfcJunctionBoxType() : base(0) { }

        public static implicit operator IfcJunctionBoxType(SdaiInstance instance) => new IfcJunctionBoxType(instance);

        /// <summary>
        /// Create new instace of IfcJunctionBoxType and returns object of this class to interact with
        /// </summary>
        public static new IfcJunctionBoxType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcJunctionBoxType"); Debug.Assert(inst != 0); return inst; }

        public IfcJunctionBoxTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcJunctionBoxTypeEnum_); return EnumValue<IfcJunctionBoxTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcJunctionBoxTypeEnum>.FromValue(value.Value, EnumNames.IfcJunctionBoxTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcJunctionBoxType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcKerb
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcKerb : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcKerb
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcKerb(SdaiInstance instance) : base(instance) { }
        public IfcKerb() : base(0) { }

        public static implicit operator IfcKerb(SdaiInstance instance) => new IfcKerb(instance);

        /// <summary>
        /// Create new instace of IfcKerb and returns object of this class to interact with
        /// </summary>
        public static new IfcKerb Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcKerb"); Debug.Assert(inst != 0); return inst; }

        public IfcKerbTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcKerbTypeEnum_); return EnumValue<IfcKerbTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcKerbTypeEnum>.FromValue(value.Value, EnumNames.IfcKerbTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcKerb"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcKerbType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcKerbType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcKerbType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcKerbType(SdaiInstance instance) : base(instance) { }
        public IfcKerbType() : base(0) { }

        public static implicit operator IfcKerbType(SdaiInstance instance) => new IfcKerbType(instance);

        /// <summary>
        /// Create new instace of IfcKerbType and returns object of this class to interact with
        /// </summary>
        public static new IfcKerbType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcKerbType"); Debug.Assert(inst != 0); return inst; }

        public IfcKerbTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcKerbTypeEnum_); return EnumValue<IfcKerbTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcKerbTypeEnum>.FromValue(value.Value, EnumNames.IfcKerbTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcKerbType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLaborResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLaborResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLaborResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLaborResource(SdaiInstance instance) : base(instance) { }
        public IfcLaborResource() : base(0) { }

        public static implicit operator IfcLaborResource(SdaiInstance instance) => new IfcLaborResource(instance);

        /// <summary>
        /// Create new instace of IfcLaborResource and returns object of this class to interact with
        /// </summary>
        public static new IfcLaborResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLaborResource"); Debug.Assert(inst != 0); return inst; }

        public IfcLaborResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLaborResourceTypeEnum_); return EnumValue<IfcLaborResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLaborResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcLaborResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLaborResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLaborResourceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLaborResourceType : IfcConstructionResourceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLaborResourceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLaborResourceType(SdaiInstance instance) : base(instance) { }
        public IfcLaborResourceType() : base(0) { }

        public static implicit operator IfcLaborResourceType(SdaiInstance instance) => new IfcLaborResourceType(instance);

        /// <summary>
        /// Create new instace of IfcLaborResourceType and returns object of this class to interact with
        /// </summary>
        public static new IfcLaborResourceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLaborResourceType"); Debug.Assert(inst != 0); return inst; }

        public IfcLaborResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLaborResourceTypeEnum_); return EnumValue<IfcLaborResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLaborResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcLaborResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLaborResourceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLagTime
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLagTime : IfcSchedulingTime
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLagTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLagTime(SdaiInstance instance) : base(instance) { }
        public IfcLagTime() : base(0) { }

        public static implicit operator IfcLagTime(SdaiInstance instance) => new IfcLagTime(instance);

        /// <summary>
        /// Create new instace of IfcLagTime and returns object of this class to interact with
        /// </summary>
        public static new IfcLagTime Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLagTime"); Debug.Assert(inst != 0); return inst; }


        public IfcTimeOrRatioSelect LagValue
            {
            get { return new IfcTimeOrRatioSelect(m_instance, "LagValue", 0); }
            }
        public IfcTaskDurationEnum? DurationType 
            { 
            get { var str = get_string("DurationType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTaskDurationEnum_); return EnumValue<IfcTaskDurationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTaskDurationEnum>.FromValue(value.Value, EnumNames.IfcTaskDurationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "DurationType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLagTime"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLamp
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLamp : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLamp
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLamp(SdaiInstance instance) : base(instance) { }
        public IfcLamp() : base(0) { }

        public static implicit operator IfcLamp(SdaiInstance instance) => new IfcLamp(instance);

        /// <summary>
        /// Create new instace of IfcLamp and returns object of this class to interact with
        /// </summary>
        public static new IfcLamp Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLamp"); Debug.Assert(inst != 0); return inst; }

        public IfcLampTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLampTypeEnum_); return EnumValue<IfcLampTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLampTypeEnum>.FromValue(value.Value, EnumNames.IfcLampTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLamp"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLampType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLampType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLampType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLampType(SdaiInstance instance) : base(instance) { }
        public IfcLampType() : base(0) { }

        public static implicit operator IfcLampType(SdaiInstance instance) => new IfcLampType(instance);

        /// <summary>
        /// Create new instace of IfcLampType and returns object of this class to interact with
        /// </summary>
        public static new IfcLampType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLampType"); Debug.Assert(inst != 0); return inst; }

        public IfcLampTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLampTypeEnum_); return EnumValue<IfcLampTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLampTypeEnum>.FromValue(value.Value, EnumNames.IfcLampTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLampType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLibraryInformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLibraryInformation : IfcExternalInformation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLibraryInformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLibraryInformation(SdaiInstance instance) : base(instance) { }
        public IfcLibraryInformation() : base(0) { }

        public static implicit operator IfcLibraryInformation(SdaiInstance instance) => new IfcLibraryInformation(instance);

        /// <summary>
        /// Create new instace of IfcLibraryInformation and returns object of this class to interact with
        /// </summary>
        public static new IfcLibraryInformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLibraryInformation"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Version
            {
            get { return get_string("Version", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Version", ifcengine.sdaiSTRING, value); }
            }

        public IfcActorSelect Publisher
            {
            get { return new IfcActorSelect(m_instance, "Publisher", 0); }
            }
        public TextValue VersionDate
            {
            get { return get_string("VersionDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "VersionDate", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Location
            {
            get { return get_string("Location", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Location", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRelAssociatesLibrary LibraryInfoForObjects { get { return (new SetOfIfcRelAssociatesLibrarySerializer()).FromAttr(m_instance, "LibraryInfoForObjects"); } }
        public SetOfIfcLibraryReference HasLibraryReferences { get { return (new SetOfIfcLibraryReferenceSerializer()).FromAttr(m_instance, "HasLibraryReferences"); } }

        protected override TextValue EntityName() { return "IfcLibraryInformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLibraryReference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLibraryReference : IfcExternalReference
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLibraryReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLibraryReference(SdaiInstance instance) : base(instance) { }
        public IfcLibraryReference() : base(0) { }

        public static implicit operator IfcLibraryReference(SdaiInstance instance) => new IfcLibraryReference(instance);

        /// <summary>
        /// Create new instace of IfcLibraryReference and returns object of this class to interact with
        /// </summary>
        public static new IfcLibraryReference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLibraryReference"); Debug.Assert(inst != 0); return inst; }

        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Language
            {
            get { return get_string("Language", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Language", ifcengine.sdaiSTRING, value); }
            }
        public IfcLibraryInformation ReferencedLibrary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ReferencedLibrary", ifcengine.sdaiINSTANCE, out inst); return new IfcLibraryInformation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ReferencedLibrary", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcRelAssociatesLibrary LibraryRefForObjects { get { return (new SetOfIfcRelAssociatesLibrarySerializer()).FromAttr(m_instance, "LibraryRefForObjects"); } }

        protected override TextValue EntityName() { return "IfcLibraryReference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightDistributionData
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightDistributionData : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightDistributionData
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightDistributionData(SdaiInstance instance) : base(instance) { }
        public IfcLightDistributionData() : base(0) { }

        public static implicit operator IfcLightDistributionData(SdaiInstance instance) => new IfcLightDistributionData(instance);

        /// <summary>
        /// Create new instace of IfcLightDistributionData and returns object of this class to interact with
        /// </summary>
        public static new IfcLightDistributionData Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightDistributionData"); Debug.Assert(inst != 0); return inst; }

        public double? MainPlaneAngle
            {
            get { return get_double("MainPlaneAngle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MainPlaneAngle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public ListOfIfcPlaneAngleMeasure SecondaryPlaneAngle { get { return (new ListOfIfcPlaneAngleMeasureSerializer()).FromAttr(m_instance, "SecondaryPlaneAngle"); } }
        public void put_SecondaryPlaneAngle(IEnumerable<double> lst) { (new ListOfIfcPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SecondaryPlaneAngle"); }
        public void put_SecondaryPlaneAngle_untyped(IEnumerable lst) { (new ListOfIfcPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SecondaryPlaneAngle"); }
        public ListOfIfcLuminousIntensityDistributionMeasure LuminousIntensity { get { return (new ListOfIfcLuminousIntensityDistributionMeasureSerializer()).FromAttr(m_instance, "LuminousIntensity"); } }
        public void put_LuminousIntensity(IEnumerable<double> lst) { (new ListOfIfcLuminousIntensityDistributionMeasureSerializer()).ToSdaiAggr(lst, m_instance, "LuminousIntensity"); }
        public void put_LuminousIntensity_untyped(IEnumerable lst) { (new ListOfIfcLuminousIntensityDistributionMeasureSerializer()).ToSdaiAggr(lst, m_instance, "LuminousIntensity"); }

        protected override TextValue EntityName() { return "IfcLightDistributionData"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightFixture
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightFixture : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightFixture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightFixture(SdaiInstance instance) : base(instance) { }
        public IfcLightFixture() : base(0) { }

        public static implicit operator IfcLightFixture(SdaiInstance instance) => new IfcLightFixture(instance);

        /// <summary>
        /// Create new instace of IfcLightFixture and returns object of this class to interact with
        /// </summary>
        public static new IfcLightFixture Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightFixture"); Debug.Assert(inst != 0); return inst; }

        public IfcLightFixtureTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLightFixtureTypeEnum_); return EnumValue<IfcLightFixtureTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLightFixtureTypeEnum>.FromValue(value.Value, EnumNames.IfcLightFixtureTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLightFixture"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightFixtureType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightFixtureType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightFixtureType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightFixtureType(SdaiInstance instance) : base(instance) { }
        public IfcLightFixtureType() : base(0) { }

        public static implicit operator IfcLightFixtureType(SdaiInstance instance) => new IfcLightFixtureType(instance);

        /// <summary>
        /// Create new instace of IfcLightFixtureType and returns object of this class to interact with
        /// </summary>
        public static new IfcLightFixtureType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightFixtureType"); Debug.Assert(inst != 0); return inst; }

        public IfcLightFixtureTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLightFixtureTypeEnum_); return EnumValue<IfcLightFixtureTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLightFixtureTypeEnum>.FromValue(value.Value, EnumNames.IfcLightFixtureTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLightFixtureType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightIntensityDistribution
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightIntensityDistribution : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightIntensityDistribution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightIntensityDistribution(SdaiInstance instance) : base(instance) { }
        public IfcLightIntensityDistribution() : base(0) { }

        public static implicit operator IfcLightIntensityDistribution(SdaiInstance instance) => new IfcLightIntensityDistribution(instance);

        /// <summary>
        /// Create new instace of IfcLightIntensityDistribution and returns object of this class to interact with
        /// </summary>
        public static new IfcLightIntensityDistribution Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightIntensityDistribution"); Debug.Assert(inst != 0); return inst; }

        public IfcLightDistributionCurveEnum? LightDistributionCurve 
            { 
            get { var str = get_string("LightDistributionCurve", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLightDistributionCurveEnum_); return EnumValue<IfcLightDistributionCurveEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLightDistributionCurveEnum>.FromValue(value.Value, EnumNames.IfcLightDistributionCurveEnum_); ifcengine.sdaiPutAttrBN(m_instance, "LightDistributionCurve", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public ListOfIfcLightDistributionData DistributionData { get { return (new ListOfIfcLightDistributionDataSerializer()).FromAttr(m_instance, "DistributionData"); } }
        public void put_DistributionData(IEnumerable<IfcLightDistributionData> lst) { (new ListOfIfcLightDistributionDataSerializer()).ToSdaiAggr(lst, m_instance, "DistributionData"); }
        public void put_DistributionData_untyped(IEnumerable lst) { (new ListOfIfcLightDistributionDataSerializer()).ToSdaiAggr(lst, m_instance, "DistributionData"); }

        protected override TextValue EntityName() { return "IfcLightIntensityDistribution"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSource : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSource(SdaiInstance instance) : base(instance) { }
        public IfcLightSource() : base(0) { }

        public static implicit operator IfcLightSource(SdaiInstance instance) => new IfcLightSource(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public IfcColourRgb LightColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LightColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LightColour", ifcengine.sdaiINSTANCE, i); }
            }
        public double? AmbientIntensity
            {
            get { return get_double("AmbientIntensity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AmbientIntensity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Intensity
            {
            get { return get_double("Intensity", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Intensity", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLightSource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSourceAmbient
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSourceAmbient : IfcLightSource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSourceAmbient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSourceAmbient(SdaiInstance instance) : base(instance) { }
        public IfcLightSourceAmbient() : base(0) { }

        public static implicit operator IfcLightSourceAmbient(SdaiInstance instance) => new IfcLightSourceAmbient(instance);

        /// <summary>
        /// Create new instace of IfcLightSourceAmbient and returns object of this class to interact with
        /// </summary>
        public static new IfcLightSourceAmbient Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightSourceAmbient"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcLightSourceAmbient"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSourceDirectional
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSourceDirectional : IfcLightSource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSourceDirectional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSourceDirectional(SdaiInstance instance) : base(instance) { }
        public IfcLightSourceDirectional() : base(0) { }

        public static implicit operator IfcLightSourceDirectional(SdaiInstance instance) => new IfcLightSourceDirectional(instance);

        /// <summary>
        /// Create new instace of IfcLightSourceDirectional and returns object of this class to interact with
        /// </summary>
        public static new IfcLightSourceDirectional Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightSourceDirectional"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Orientation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcLightSourceDirectional"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSourceGoniometric
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSourceGoniometric : IfcLightSource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSourceGoniometric
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSourceGoniometric(SdaiInstance instance) : base(instance) { }
        public IfcLightSourceGoniometric() : base(0) { }

        public static implicit operator IfcLightSourceGoniometric(SdaiInstance instance) => new IfcLightSourceGoniometric(instance);

        /// <summary>
        /// Create new instace of IfcLightSourceGoniometric and returns object of this class to interact with
        /// </summary>
        public static new IfcLightSourceGoniometric Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightSourceGoniometric"); Debug.Assert(inst != 0); return inst; }

        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcColourRgb ColourAppearance 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ColourAppearance", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ColourAppearance", ifcengine.sdaiINSTANCE, i); }
            }
        public double? ColourTemperature
            {
            get { return get_double("ColourTemperature", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ColourTemperature", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LuminousFlux
            {
            get { return get_double("LuminousFlux", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LuminousFlux", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcLightEmissionSourceEnum? LightEmissionSource 
            { 
            get { var str = get_string("LightEmissionSource", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLightEmissionSourceEnum_); return EnumValue<IfcLightEmissionSourceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLightEmissionSourceEnum>.FromValue(value.Value, EnumNames.IfcLightEmissionSourceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "LightEmissionSource", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public IfcLightDistributionDataSourceSelect LightDistributionDataSource
            {
            get { return new IfcLightDistributionDataSourceSelect(m_instance, "LightDistributionDataSource", 0); }
            }

        protected override TextValue EntityName() { return "IfcLightSourceGoniometric"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSourcePositional
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSourcePositional : IfcLightSource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSourcePositional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSourcePositional(SdaiInstance instance) : base(instance) { }
        public IfcLightSourcePositional() : base(0) { }

        public static implicit operator IfcLightSourcePositional(SdaiInstance instance) => new IfcLightSourcePositional(instance);

        /// <summary>
        /// Create new instace of IfcLightSourcePositional and returns object of this class to interact with
        /// </summary>
        public static new IfcLightSourcePositional Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightSourcePositional"); Debug.Assert(inst != 0); return inst; }

        public IfcCartesianPoint Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ConstantAttenuation
            {
            get { return get_double("ConstantAttenuation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ConstantAttenuation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DistanceAttenuation
            {
            get { return get_double("DistanceAttenuation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DistanceAttenuation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? QuadricAttenuation
            {
            get { return get_double("QuadricAttenuation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "QuadricAttenuation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLightSourcePositional"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLightSourceSpot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLightSourceSpot : IfcLightSourcePositional
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLightSourceSpot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLightSourceSpot(SdaiInstance instance) : base(instance) { }
        public IfcLightSourceSpot() : base(0) { }

        public static implicit operator IfcLightSourceSpot(SdaiInstance instance) => new IfcLightSourceSpot(instance);

        /// <summary>
        /// Create new instace of IfcLightSourceSpot and returns object of this class to interact with
        /// </summary>
        public static new IfcLightSourceSpot Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLightSourceSpot"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Orientation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, i); }
            }
        public double? ConcentrationExponent
            {
            get { return get_double("ConcentrationExponent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ConcentrationExponent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SpreadAngle
            {
            get { return get_double("SpreadAngle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SpreadAngle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BeamWidthAngle
            {
            get { return get_double("BeamWidthAngle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BeamWidthAngle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLightSourceSpot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLine
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLine : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLine
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLine(SdaiInstance instance) : base(instance) { }
        public IfcLine() : base(0) { }

        public static implicit operator IfcLine(SdaiInstance instance) => new IfcLine(instance);

        /// <summary>
        /// Create new instace of IfcLine and returns object of this class to interact with
        /// </summary>
        public static new IfcLine Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLine"); Debug.Assert(inst != 0); return inst; }

        public IfcCartesianPoint Pnt 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Pnt", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Pnt", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcVector Dir 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Dir", ifcengine.sdaiINSTANCE, out inst); return new IfcVector(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Dir", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcLine"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLinearPlacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLinearPlacement : IfcObjectPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLinearPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLinearPlacement(SdaiInstance instance) : base(instance) { }
        public IfcLinearPlacement() : base(0) { }

        public static implicit operator IfcLinearPlacement(SdaiInstance instance) => new IfcLinearPlacement(instance);

        /// <summary>
        /// Create new instace of IfcLinearPlacement and returns object of this class to interact with
        /// </summary>
        public static new IfcLinearPlacement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLinearPlacement"); Debug.Assert(inst != 0); return inst; }

        public IfcAxis2PlacementLinear RelativePlacement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelativePlacement", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2PlacementLinear(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelativePlacement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcAxis2Placement3D CartesianPosition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "CartesianPosition", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "CartesianPosition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcLinearPlacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLiquidTerminal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLiquidTerminal : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLiquidTerminal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLiquidTerminal(SdaiInstance instance) : base(instance) { }
        public IfcLiquidTerminal() : base(0) { }

        public static implicit operator IfcLiquidTerminal(SdaiInstance instance) => new IfcLiquidTerminal(instance);

        /// <summary>
        /// Create new instace of IfcLiquidTerminal and returns object of this class to interact with
        /// </summary>
        public static new IfcLiquidTerminal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLiquidTerminal"); Debug.Assert(inst != 0); return inst; }

        public IfcLiquidTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLiquidTerminalTypeEnum_); return EnumValue<IfcLiquidTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLiquidTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcLiquidTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLiquidTerminal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLiquidTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLiquidTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLiquidTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLiquidTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcLiquidTerminalType() : base(0) { }

        public static implicit operator IfcLiquidTerminalType(SdaiInstance instance) => new IfcLiquidTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcLiquidTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcLiquidTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLiquidTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcLiquidTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLiquidTerminalTypeEnum_); return EnumValue<IfcLiquidTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLiquidTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcLiquidTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLiquidTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLocalPlacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLocalPlacement : IfcObjectPlacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLocalPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLocalPlacement(SdaiInstance instance) : base(instance) { }
        public IfcLocalPlacement() : base(0) { }

        public static implicit operator IfcLocalPlacement(SdaiInstance instance) => new IfcLocalPlacement(instance);

        /// <summary>
        /// Create new instace of IfcLocalPlacement and returns object of this class to interact with
        /// </summary>
        public static new IfcLocalPlacement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLocalPlacement"); Debug.Assert(inst != 0); return inst; }


        public IfcAxis2Placement RelativePlacement
            {
            get { return new IfcAxis2Placement(m_instance, "RelativePlacement", 0); }
            }

        protected override TextValue EntityName() { return "IfcLocalPlacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcLShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcLShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcLShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcLShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcLShapeProfileDef() : base(0) { }

        public static implicit operator IfcLShapeProfileDef(SdaiInstance instance) => new IfcLShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcLShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcLShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcLShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Width
            {
            get { return get_double("Width", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Width", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Thickness
            {
            get { return get_double("Thickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Thickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FilletRadius
            {
            get { return get_double("FilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EdgeRadius
            {
            get { return get_double("EdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LegSlope
            {
            get { return get_double("LegSlope", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LegSlope", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcLShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMapConversion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMapConversion : IfcCoordinateOperation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMapConversion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMapConversion(SdaiInstance instance) : base(instance) { }
        public IfcMapConversion() : base(0) { }

        public static implicit operator IfcMapConversion(SdaiInstance instance) => new IfcMapConversion(instance);

        /// <summary>
        /// Create new instace of IfcMapConversion and returns object of this class to interact with
        /// </summary>
        public static new IfcMapConversion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMapConversion"); Debug.Assert(inst != 0); return inst; }

        public double? Eastings
            {
            get { return get_double("Eastings", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Eastings", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Northings
            {
            get { return get_double("Northings", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Northings", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OrthogonalHeight
            {
            get { return get_double("OrthogonalHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OrthogonalHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? XAxisAbscissa
            {
            get { return get_double("XAxisAbscissa", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "XAxisAbscissa", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? XAxisOrdinate
            {
            get { return get_double("XAxisOrdinate", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "XAxisOrdinate", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Scale
            {
            get { return get_double("Scale", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Scale", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMapConversion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMapConversionScaled
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMapConversionScaled : IfcMapConversion
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMapConversionScaled
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMapConversionScaled(SdaiInstance instance) : base(instance) { }
        public IfcMapConversionScaled() : base(0) { }

        public static implicit operator IfcMapConversionScaled(SdaiInstance instance) => new IfcMapConversionScaled(instance);

        /// <summary>
        /// Create new instace of IfcMapConversionScaled and returns object of this class to interact with
        /// </summary>
        public static new IfcMapConversionScaled Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMapConversionScaled"); Debug.Assert(inst != 0); return inst; }

        public double? FactorX
            {
            get { return get_double("FactorX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FactorX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FactorY
            {
            get { return get_double("FactorY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FactorY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FactorZ
            {
            get { return get_double("FactorZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FactorZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMapConversionScaled"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMappedItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMappedItem : IfcRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMappedItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMappedItem(SdaiInstance instance) : base(instance) { }
        public IfcMappedItem() : base(0) { }

        public static implicit operator IfcMappedItem(SdaiInstance instance) => new IfcMappedItem(instance);

        /// <summary>
        /// Create new instace of IfcMappedItem and returns object of this class to interact with
        /// </summary>
        public static new IfcMappedItem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMappedItem"); Debug.Assert(inst != 0); return inst; }

        public IfcRepresentationMap MappingSource 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MappingSource", ifcengine.sdaiINSTANCE, out inst); return new IfcRepresentationMap(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MappingSource", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCartesianTransformationOperator MappingTarget 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MappingTarget", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianTransformationOperator(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MappingTarget", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcMappedItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMarineFacility
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMarineFacility : IfcFacility
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMarineFacility
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMarineFacility(SdaiInstance instance) : base(instance) { }
        public IfcMarineFacility() : base(0) { }

        public static implicit operator IfcMarineFacility(SdaiInstance instance) => new IfcMarineFacility(instance);

        /// <summary>
        /// Create new instace of IfcMarineFacility and returns object of this class to interact with
        /// </summary>
        public static new IfcMarineFacility Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMarineFacility"); Debug.Assert(inst != 0); return inst; }

        public IfcMarineFacilityTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMarineFacilityTypeEnum_); return EnumValue<IfcMarineFacilityTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMarineFacilityTypeEnum>.FromValue(value.Value, EnumNames.IfcMarineFacilityTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMarineFacility"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMarinePart
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMarinePart : IfcFacilityPart
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMarinePart
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMarinePart(SdaiInstance instance) : base(instance) { }
        public IfcMarinePart() : base(0) { }

        public static implicit operator IfcMarinePart(SdaiInstance instance) => new IfcMarinePart(instance);

        /// <summary>
        /// Create new instace of IfcMarinePart and returns object of this class to interact with
        /// </summary>
        public static new IfcMarinePart Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMarinePart"); Debug.Assert(inst != 0); return inst; }

        public IfcMarinePartTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMarinePartTypeEnum_); return EnumValue<IfcMarinePartTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMarinePartTypeEnum>.FromValue(value.Value, EnumNames.IfcMarinePartTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMarinePart"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialDefinition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialDefinition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialDefinition(SdaiInstance instance) : base(instance) { }
        public IfcMaterialDefinition() : base(0) { }

        public static implicit operator IfcMaterialDefinition(SdaiInstance instance) => new IfcMaterialDefinition(instance);

        public SetOfIfcRelAssociatesMaterial AssociatedTo { get { return (new SetOfIfcRelAssociatesMaterialSerializer()).FromAttr(m_instance, "AssociatedTo"); } }
        public SetOfIfcExternalReferenceRelationship HasExternalReferences { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReferences"); } }
        public SetOfIfcMaterialProperties HasProperties { get { return (new SetOfIfcMaterialPropertiesSerializer()).FromAttr(m_instance, "HasProperties"); } }

        protected override TextValue EntityName() { return "IfcMaterialDefinition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterial
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterial : IfcMaterialDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterial
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterial(SdaiInstance instance) : base(instance) { }
        public IfcMaterial() : base(0) { }

        public static implicit operator IfcMaterial(SdaiInstance instance) => new IfcMaterial(instance);

        /// <summary>
        /// Create new instace of IfcMaterial and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterial Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterial"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Category
            {
            get { return get_string("Category", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Category", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcMaterialDefinitionRepresentation HasRepresentation { get { return (new SetOfIfcMaterialDefinitionRepresentationSerializer()).FromAttr(m_instance, "HasRepresentation"); } }
        public SetOfIfcMaterialRelationship IsRelatedWith { get { return (new SetOfIfcMaterialRelationshipSerializer()).FromAttr(m_instance, "IsRelatedWith"); } }
        public SetOfIfcMaterialRelationship RelatesTo { get { return (new SetOfIfcMaterialRelationshipSerializer()).FromAttr(m_instance, "RelatesTo"); } }

        protected override TextValue EntityName() { return "IfcMaterial"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialClassificationRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialClassificationRelationship : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialClassificationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialClassificationRelationship(SdaiInstance instance) : base(instance) { }
        public IfcMaterialClassificationRelationship() : base(0) { }

        public static implicit operator IfcMaterialClassificationRelationship(SdaiInstance instance) => new IfcMaterialClassificationRelationship(instance);

        /// <summary>
        /// Create new instace of IfcMaterialClassificationRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialClassificationRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialClassificationRelationship"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcClassificationSelect MaterialClassifications { get { return (new SetOfIfcClassificationSelectSerializer()).FromAttr(m_instance, "MaterialClassifications"); } }
        public void put_MaterialClassifications(IEnumerable<IfcClassificationSelect> lst) { (new SetOfIfcClassificationSelectSerializer()).ToSdaiAggr(lst, m_instance, "MaterialClassifications"); }
        public void put_MaterialClassifications_untyped(IEnumerable lst) { (new SetOfIfcClassificationSelectSerializer()).ToSdaiAggr(lst, m_instance, "MaterialClassifications"); }
        public IfcMaterial ClassifiedMaterial 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ClassifiedMaterial", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterial(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ClassifiedMaterial", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcMaterialClassificationRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialConstituent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialConstituent : IfcMaterialDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialConstituent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialConstituent(SdaiInstance instance) : base(instance) { }
        public IfcMaterialConstituent() : base(0) { }

        public static implicit operator IfcMaterialConstituent(SdaiInstance instance) => new IfcMaterialConstituent(instance);

        /// <summary>
        /// Create new instace of IfcMaterialConstituent and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialConstituent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialConstituent"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public IfcMaterial Material 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterial(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Fraction
            {
            get { return get_double("Fraction", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Fraction", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue Category
            {
            get { return get_string("Category", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Category", ifcengine.sdaiSTRING, value); }
            }
        public IfcMaterialConstituentSet ToMaterialConstituentSet { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ToMaterialConstituentSet", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterialConstituentSet(inst); } }

        protected override TextValue EntityName() { return "IfcMaterialConstituent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialConstituentSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialConstituentSet : IfcMaterialDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialConstituentSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialConstituentSet(SdaiInstance instance) : base(instance) { }
        public IfcMaterialConstituentSet() : base(0) { }

        public static implicit operator IfcMaterialConstituentSet(SdaiInstance instance) => new IfcMaterialConstituentSet(instance);

        /// <summary>
        /// Create new instace of IfcMaterialConstituentSet and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialConstituentSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialConstituentSet"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcMaterialConstituent MaterialConstituents { get { return (new SetOfIfcMaterialConstituentSerializer()).FromAttr(m_instance, "MaterialConstituents"); } }
        public void put_MaterialConstituents(IEnumerable<IfcMaterialConstituent> lst) { (new SetOfIfcMaterialConstituentSerializer()).ToSdaiAggr(lst, m_instance, "MaterialConstituents"); }
        public void put_MaterialConstituents_untyped(IEnumerable lst) { (new SetOfIfcMaterialConstituentSerializer()).ToSdaiAggr(lst, m_instance, "MaterialConstituents"); }

        protected override TextValue EntityName() { return "IfcMaterialConstituentSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProductRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProductRepresentation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProductRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProductRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcProductRepresentation() : base(0) { }

        public static implicit operator IfcProductRepresentation(SdaiInstance instance) => new IfcProductRepresentation(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcRepresentation Representations { get { return (new ListOfIfcRepresentationSerializer()).FromAttr(m_instance, "Representations"); } }
        public void put_Representations(IEnumerable<IfcRepresentation> lst) { (new ListOfIfcRepresentationSerializer()).ToSdaiAggr(lst, m_instance, "Representations"); }
        public void put_Representations_untyped(IEnumerable lst) { (new ListOfIfcRepresentationSerializer()).ToSdaiAggr(lst, m_instance, "Representations"); }

        protected override TextValue EntityName() { return "IfcProductRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialDefinitionRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialDefinitionRepresentation : IfcProductRepresentation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialDefinitionRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialDefinitionRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcMaterialDefinitionRepresentation() : base(0) { }

        public static implicit operator IfcMaterialDefinitionRepresentation(SdaiInstance instance) => new IfcMaterialDefinitionRepresentation(instance);

        /// <summary>
        /// Create new instace of IfcMaterialDefinitionRepresentation and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialDefinitionRepresentation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialDefinitionRepresentation"); Debug.Assert(inst != 0); return inst; }

        public IfcMaterial RepresentedMaterial 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RepresentedMaterial", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterial(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RepresentedMaterial", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcMaterialDefinitionRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialLayer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialLayer : IfcMaterialDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialLayer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialLayer(SdaiInstance instance) : base(instance) { }
        public IfcMaterialLayer() : base(0) { }

        public static implicit operator IfcMaterialLayer(SdaiInstance instance) => new IfcMaterialLayer(instance);

        /// <summary>
        /// Create new instace of IfcMaterialLayer and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialLayer Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialLayer"); Debug.Assert(inst != 0); return inst; }

        public IfcMaterial Material 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterial(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, i); }
            }
        public double? LayerThickness
            {
            get { return get_double("LayerThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LayerThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? IsVentilated 
            { 
            get { var str = get_string("IsVentilated", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "IsVentilated", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Category
            {
            get { return get_string("Category", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Category", ifcengine.sdaiSTRING, value); }
            }
        public IntValue? Priority
            {
            get { return get_IntValue("Priority", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Priority", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IfcMaterialLayerSet ToMaterialLayerSet { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ToMaterialLayerSet", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterialLayerSet(inst); } }

        protected override TextValue EntityName() { return "IfcMaterialLayer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialLayerSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialLayerSet : IfcMaterialDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialLayerSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialLayerSet(SdaiInstance instance) : base(instance) { }
        public IfcMaterialLayerSet() : base(0) { }

        public static implicit operator IfcMaterialLayerSet(SdaiInstance instance) => new IfcMaterialLayerSet(instance);

        /// <summary>
        /// Create new instace of IfcMaterialLayerSet and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialLayerSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialLayerSet"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcMaterialLayer MaterialLayers { get { return (new ListOfIfcMaterialLayerSerializer()).FromAttr(m_instance, "MaterialLayers"); } }
        public void put_MaterialLayers(IEnumerable<IfcMaterialLayer> lst) { (new ListOfIfcMaterialLayerSerializer()).ToSdaiAggr(lst, m_instance, "MaterialLayers"); }
        public void put_MaterialLayers_untyped(IEnumerable lst) { (new ListOfIfcMaterialLayerSerializer()).ToSdaiAggr(lst, m_instance, "MaterialLayers"); }
        public TextValue LayerSetName
            {
            get { return get_string("LayerSetName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LayerSetName", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcMaterialLayerSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialUsageDefinition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialUsageDefinition : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialUsageDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialUsageDefinition(SdaiInstance instance) : base(instance) { }
        public IfcMaterialUsageDefinition() : base(0) { }

        public static implicit operator IfcMaterialUsageDefinition(SdaiInstance instance) => new IfcMaterialUsageDefinition(instance);

        public SetOfIfcRelAssociatesMaterial AssociatedTo { get { return (new SetOfIfcRelAssociatesMaterialSerializer()).FromAttr(m_instance, "AssociatedTo"); } }

        protected override TextValue EntityName() { return "IfcMaterialUsageDefinition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialLayerSetUsage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialLayerSetUsage : IfcMaterialUsageDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialLayerSetUsage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialLayerSetUsage(SdaiInstance instance) : base(instance) { }
        public IfcMaterialLayerSetUsage() : base(0) { }

        public static implicit operator IfcMaterialLayerSetUsage(SdaiInstance instance) => new IfcMaterialLayerSetUsage(instance);

        /// <summary>
        /// Create new instace of IfcMaterialLayerSetUsage and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialLayerSetUsage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialLayerSetUsage"); Debug.Assert(inst != 0); return inst; }

        public IfcMaterialLayerSet ForLayerSet 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ForLayerSet", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterialLayerSet(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ForLayerSet", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcLayerSetDirectionEnum? LayerSetDirection 
            { 
            get { var str = get_string("LayerSetDirection", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLayerSetDirectionEnum_); return EnumValue<IfcLayerSetDirectionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLayerSetDirectionEnum>.FromValue(value.Value, EnumNames.IfcLayerSetDirectionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "LayerSetDirection", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDirectionSenseEnum? DirectionSense 
            { 
            get { var str = get_string("DirectionSense", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcDirectionSenseEnum_); return EnumValue<IfcDirectionSenseEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcDirectionSenseEnum>.FromValue(value.Value, EnumNames.IfcDirectionSenseEnum_); ifcengine.sdaiPutAttrBN(m_instance, "DirectionSense", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? OffsetFromReferenceLine
            {
            get { return get_double("OffsetFromReferenceLine", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OffsetFromReferenceLine", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ReferenceExtent
            {
            get { return get_double("ReferenceExtent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ReferenceExtent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMaterialLayerSetUsage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialLayerWithOffsets
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialLayerWithOffsets : IfcMaterialLayer
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialLayerWithOffsets
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialLayerWithOffsets(SdaiInstance instance) : base(instance) { }
        public IfcMaterialLayerWithOffsets() : base(0) { }

        public static implicit operator IfcMaterialLayerWithOffsets(SdaiInstance instance) => new IfcMaterialLayerWithOffsets(instance);

        /// <summary>
        /// Create new instace of IfcMaterialLayerWithOffsets and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialLayerWithOffsets Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialLayerWithOffsets"); Debug.Assert(inst != 0); return inst; }

        public IfcLayerSetDirectionEnum? OffsetDirection 
            { 
            get { var str = get_string("OffsetDirection", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLayerSetDirectionEnum_); return EnumValue<IfcLayerSetDirectionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLayerSetDirectionEnum>.FromValue(value.Value, EnumNames.IfcLayerSetDirectionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "OffsetDirection", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public ArrayOfIfcLengthMeasure OffsetValues { get { return (new ArrayOfIfcLengthMeasureSerializer()).FromAttr(m_instance, "OffsetValues"); } }
        public void put_OffsetValues(IEnumerable<double> lst) { (new ArrayOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "OffsetValues"); }
        public void put_OffsetValues_untyped(IEnumerable lst) { (new ArrayOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "OffsetValues"); }

        protected override TextValue EntityName() { return "IfcMaterialLayerWithOffsets"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialList
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialList : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialList
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialList(SdaiInstance instance) : base(instance) { }
        public IfcMaterialList() : base(0) { }

        public static implicit operator IfcMaterialList(SdaiInstance instance) => new IfcMaterialList(instance);

        /// <summary>
        /// Create new instace of IfcMaterialList and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialList Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialList"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcMaterial Materials { get { return (new ListOfIfcMaterialSerializer()).FromAttr(m_instance, "Materials"); } }
        public void put_Materials(IEnumerable<IfcMaterial> lst) { (new ListOfIfcMaterialSerializer()).ToSdaiAggr(lst, m_instance, "Materials"); }
        public void put_Materials_untyped(IEnumerable lst) { (new ListOfIfcMaterialSerializer()).ToSdaiAggr(lst, m_instance, "Materials"); }

        protected override TextValue EntityName() { return "IfcMaterialList"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialProfile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialProfile : IfcMaterialDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialProfile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialProfile(SdaiInstance instance) : base(instance) { }
        public IfcMaterialProfile() : base(0) { }

        public static implicit operator IfcMaterialProfile(SdaiInstance instance) => new IfcMaterialProfile(instance);

        /// <summary>
        /// Create new instace of IfcMaterialProfile and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialProfile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialProfile"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public IfcMaterial Material 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterial(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcProfileDef Profile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Profile", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Profile", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? Priority
            {
            get { return get_IntValue("Priority", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Priority", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public TextValue Category
            {
            get { return get_string("Category", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Category", ifcengine.sdaiSTRING, value); }
            }
        public IfcMaterialProfileSet ToMaterialProfileSet { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ToMaterialProfileSet", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterialProfileSet(inst); } }

        protected override TextValue EntityName() { return "IfcMaterialProfile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialProfileSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialProfileSet : IfcMaterialDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialProfileSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialProfileSet(SdaiInstance instance) : base(instance) { }
        public IfcMaterialProfileSet() : base(0) { }

        public static implicit operator IfcMaterialProfileSet(SdaiInstance instance) => new IfcMaterialProfileSet(instance);

        /// <summary>
        /// Create new instace of IfcMaterialProfileSet and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialProfileSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialProfileSet"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcMaterialProfile MaterialProfiles { get { return (new ListOfIfcMaterialProfileSerializer()).FromAttr(m_instance, "MaterialProfiles"); } }
        public void put_MaterialProfiles(IEnumerable<IfcMaterialProfile> lst) { (new ListOfIfcMaterialProfileSerializer()).ToSdaiAggr(lst, m_instance, "MaterialProfiles"); }
        public void put_MaterialProfiles_untyped(IEnumerable lst) { (new ListOfIfcMaterialProfileSerializer()).ToSdaiAggr(lst, m_instance, "MaterialProfiles"); }
        public IfcCompositeProfileDef CompositeProfile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "CompositeProfile", ifcengine.sdaiINSTANCE, out inst); return new IfcCompositeProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "CompositeProfile", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcMaterialProfileSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialProfileSetUsage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialProfileSetUsage : IfcMaterialUsageDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialProfileSetUsage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialProfileSetUsage(SdaiInstance instance) : base(instance) { }
        public IfcMaterialProfileSetUsage() : base(0) { }

        public static implicit operator IfcMaterialProfileSetUsage(SdaiInstance instance) => new IfcMaterialProfileSetUsage(instance);

        /// <summary>
        /// Create new instace of IfcMaterialProfileSetUsage and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialProfileSetUsage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialProfileSetUsage"); Debug.Assert(inst != 0); return inst; }

        public IfcMaterialProfileSet ForProfileSet 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ForProfileSet", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterialProfileSet(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ForProfileSet", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? CardinalPoint
            {
            get { return get_IntValue("CardinalPoint", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CardinalPoint", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public double? ReferenceExtent
            {
            get { return get_double("ReferenceExtent", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ReferenceExtent", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMaterialProfileSetUsage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialProfileSetUsageTapering
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialProfileSetUsageTapering : IfcMaterialProfileSetUsage
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialProfileSetUsageTapering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialProfileSetUsageTapering(SdaiInstance instance) : base(instance) { }
        public IfcMaterialProfileSetUsageTapering() : base(0) { }

        public static implicit operator IfcMaterialProfileSetUsageTapering(SdaiInstance instance) => new IfcMaterialProfileSetUsageTapering(instance);

        /// <summary>
        /// Create new instace of IfcMaterialProfileSetUsageTapering and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialProfileSetUsageTapering Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialProfileSetUsageTapering"); Debug.Assert(inst != 0); return inst; }

        public IfcMaterialProfileSet ForProfileEndSet 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ForProfileEndSet", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterialProfileSet(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ForProfileEndSet", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? CardinalEndPoint
            {
            get { return get_IntValue("CardinalEndPoint", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CardinalEndPoint", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMaterialProfileSetUsageTapering"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialProfileWithOffsets
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialProfileWithOffsets : IfcMaterialProfile
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialProfileWithOffsets
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialProfileWithOffsets(SdaiInstance instance) : base(instance) { }
        public IfcMaterialProfileWithOffsets() : base(0) { }

        public static implicit operator IfcMaterialProfileWithOffsets(SdaiInstance instance) => new IfcMaterialProfileWithOffsets(instance);

        /// <summary>
        /// Create new instace of IfcMaterialProfileWithOffsets and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialProfileWithOffsets Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialProfileWithOffsets"); Debug.Assert(inst != 0); return inst; }

        public ArrayOfIfcLengthMeasure OffsetValues { get { return (new ArrayOfIfcLengthMeasureSerializer()).FromAttr(m_instance, "OffsetValues"); } }
        public void put_OffsetValues(IEnumerable<double> lst) { (new ArrayOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "OffsetValues"); }
        public void put_OffsetValues_untyped(IEnumerable lst) { (new ArrayOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "OffsetValues"); }

        protected override TextValue EntityName() { return "IfcMaterialProfileWithOffsets"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialProperties : IfcExtendedProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialProperties(SdaiInstance instance) : base(instance) { }
        public IfcMaterialProperties() : base(0) { }

        public static implicit operator IfcMaterialProperties(SdaiInstance instance) => new IfcMaterialProperties(instance);

        /// <summary>
        /// Create new instace of IfcMaterialProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcMaterialDefinition Material 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterialDefinition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Material", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcMaterialProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMaterialRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMaterialRelationship : IfcResourceLevelRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMaterialRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMaterialRelationship(SdaiInstance instance) : base(instance) { }
        public IfcMaterialRelationship() : base(0) { }

        public static implicit operator IfcMaterialRelationship(SdaiInstance instance) => new IfcMaterialRelationship(instance);

        /// <summary>
        /// Create new instace of IfcMaterialRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcMaterialRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMaterialRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcMaterial RelatingMaterial 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingMaterial", ifcengine.sdaiINSTANCE, out inst); return new IfcMaterial(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingMaterial", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcMaterial RelatedMaterials { get { return (new SetOfIfcMaterialSerializer()).FromAttr(m_instance, "RelatedMaterials"); } }
        public void put_RelatedMaterials(IEnumerable<IfcMaterial> lst) { (new SetOfIfcMaterialSerializer()).ToSdaiAggr(lst, m_instance, "RelatedMaterials"); }
        public void put_RelatedMaterials_untyped(IEnumerable lst) { (new SetOfIfcMaterialSerializer()).ToSdaiAggr(lst, m_instance, "RelatedMaterials"); }
        public TextValue MaterialExpression
            {
            get { return get_string("MaterialExpression", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "MaterialExpression", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcMaterialRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMeasureWithUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMeasureWithUnit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMeasureWithUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMeasureWithUnit(SdaiInstance instance) : base(instance) { }
        public IfcMeasureWithUnit() : base(0) { }

        public static implicit operator IfcMeasureWithUnit(SdaiInstance instance) => new IfcMeasureWithUnit(instance);

        /// <summary>
        /// Create new instace of IfcMeasureWithUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcMeasureWithUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMeasureWithUnit"); Debug.Assert(inst != 0); return inst; }


        public IfcValue ValueComponent
            {
            get { return new IfcValue(m_instance, "ValueComponent", 0); }
            }

        public IfcUnit UnitComponent
            {
            get { return new IfcUnit(m_instance, "UnitComponent", 0); }
            }

        protected override TextValue EntityName() { return "IfcMeasureWithUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMechanicalFastener
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMechanicalFastener : IfcElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMechanicalFastener
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMechanicalFastener(SdaiInstance instance) : base(instance) { }
        public IfcMechanicalFastener() : base(0) { }

        public static implicit operator IfcMechanicalFastener(SdaiInstance instance) => new IfcMechanicalFastener(instance);

        /// <summary>
        /// Create new instace of IfcMechanicalFastener and returns object of this class to interact with
        /// </summary>
        public static new IfcMechanicalFastener Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMechanicalFastener"); Debug.Assert(inst != 0); return inst; }

        public double? NominalDiameter
            {
            get { return get_double("NominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? NominalLength
            {
            get { return get_double("NominalLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcMechanicalFastenerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMechanicalFastenerTypeEnum_); return EnumValue<IfcMechanicalFastenerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMechanicalFastenerTypeEnum>.FromValue(value.Value, EnumNames.IfcMechanicalFastenerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMechanicalFastener"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMechanicalFastenerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMechanicalFastenerType : IfcElementComponentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMechanicalFastenerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMechanicalFastenerType(SdaiInstance instance) : base(instance) { }
        public IfcMechanicalFastenerType() : base(0) { }

        public static implicit operator IfcMechanicalFastenerType(SdaiInstance instance) => new IfcMechanicalFastenerType(instance);

        /// <summary>
        /// Create new instace of IfcMechanicalFastenerType and returns object of this class to interact with
        /// </summary>
        public static new IfcMechanicalFastenerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMechanicalFastenerType"); Debug.Assert(inst != 0); return inst; }

        public IfcMechanicalFastenerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMechanicalFastenerTypeEnum_); return EnumValue<IfcMechanicalFastenerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMechanicalFastenerTypeEnum>.FromValue(value.Value, EnumNames.IfcMechanicalFastenerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? NominalDiameter
            {
            get { return get_double("NominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? NominalLength
            {
            get { return get_double("NominalLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMechanicalFastenerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMedicalDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMedicalDevice : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMedicalDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMedicalDevice(SdaiInstance instance) : base(instance) { }
        public IfcMedicalDevice() : base(0) { }

        public static implicit operator IfcMedicalDevice(SdaiInstance instance) => new IfcMedicalDevice(instance);

        /// <summary>
        /// Create new instace of IfcMedicalDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcMedicalDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMedicalDevice"); Debug.Assert(inst != 0); return inst; }

        public IfcMedicalDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMedicalDeviceTypeEnum_); return EnumValue<IfcMedicalDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMedicalDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcMedicalDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMedicalDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMedicalDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMedicalDeviceType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMedicalDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMedicalDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcMedicalDeviceType() : base(0) { }

        public static implicit operator IfcMedicalDeviceType(SdaiInstance instance) => new IfcMedicalDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcMedicalDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcMedicalDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMedicalDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcMedicalDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMedicalDeviceTypeEnum_); return EnumValue<IfcMedicalDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMedicalDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcMedicalDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMedicalDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMember
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMember : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMember(SdaiInstance instance) : base(instance) { }
        public IfcMember() : base(0) { }

        public static implicit operator IfcMember(SdaiInstance instance) => new IfcMember(instance);

        /// <summary>
        /// Create new instace of IfcMember and returns object of this class to interact with
        /// </summary>
        public static new IfcMember Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMember"); Debug.Assert(inst != 0); return inst; }

        public IfcMemberTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMemberTypeEnum_); return EnumValue<IfcMemberTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMemberTypeEnum>.FromValue(value.Value, EnumNames.IfcMemberTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMember"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMemberType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMemberType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMemberType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMemberType(SdaiInstance instance) : base(instance) { }
        public IfcMemberType() : base(0) { }

        public static implicit operator IfcMemberType(SdaiInstance instance) => new IfcMemberType(instance);

        /// <summary>
        /// Create new instace of IfcMemberType and returns object of this class to interact with
        /// </summary>
        public static new IfcMemberType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMemberType"); Debug.Assert(inst != 0); return inst; }

        public IfcMemberTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMemberTypeEnum_); return EnumValue<IfcMemberTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMemberTypeEnum>.FromValue(value.Value, EnumNames.IfcMemberTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMemberType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMetric
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMetric : IfcConstraint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMetric
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMetric(SdaiInstance instance) : base(instance) { }
        public IfcMetric() : base(0) { }

        public static implicit operator IfcMetric(SdaiInstance instance) => new IfcMetric(instance);

        /// <summary>
        /// Create new instace of IfcMetric and returns object of this class to interact with
        /// </summary>
        public static new IfcMetric Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMetric"); Debug.Assert(inst != 0); return inst; }

        public IfcBenchmarkEnum? Benchmark 
            { 
            get { var str = get_string("Benchmark", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcBenchmarkEnum_); return EnumValue<IfcBenchmarkEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcBenchmarkEnum>.FromValue(value.Value, EnumNames.IfcBenchmarkEnum_); ifcengine.sdaiPutAttrBN(m_instance, "Benchmark", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue ValueSource
            {
            get { return get_string("ValueSource", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ValueSource", ifcengine.sdaiSTRING, value); }
            }

        public IfcMetricValueSelect DataValue
            {
            get { return new IfcMetricValueSelect(m_instance, "DataValue", 0); }
            }
        public IfcReference ReferencePath 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ReferencePath", ifcengine.sdaiINSTANCE, out inst); return new IfcReference(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ReferencePath", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcMetric"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMirroredProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMirroredProfileDef : IfcDerivedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMirroredProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMirroredProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcMirroredProfileDef() : base(0) { }

        public static implicit operator IfcMirroredProfileDef(SdaiInstance instance) => new IfcMirroredProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcMirroredProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcMirroredProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMirroredProfileDef"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcMirroredProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMobileTelecommunicationsAppliance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMobileTelecommunicationsAppliance : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMobileTelecommunicationsAppliance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMobileTelecommunicationsAppliance(SdaiInstance instance) : base(instance) { }
        public IfcMobileTelecommunicationsAppliance() : base(0) { }

        public static implicit operator IfcMobileTelecommunicationsAppliance(SdaiInstance instance) => new IfcMobileTelecommunicationsAppliance(instance);

        /// <summary>
        /// Create new instace of IfcMobileTelecommunicationsAppliance and returns object of this class to interact with
        /// </summary>
        public static new IfcMobileTelecommunicationsAppliance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMobileTelecommunicationsAppliance"); Debug.Assert(inst != 0); return inst; }

        public IfcMobileTelecommunicationsApplianceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMobileTelecommunicationsApplianceTypeEnum_); return EnumValue<IfcMobileTelecommunicationsApplianceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMobileTelecommunicationsApplianceTypeEnum>.FromValue(value.Value, EnumNames.IfcMobileTelecommunicationsApplianceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMobileTelecommunicationsAppliance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMobileTelecommunicationsApplianceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMobileTelecommunicationsApplianceType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMobileTelecommunicationsApplianceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMobileTelecommunicationsApplianceType(SdaiInstance instance) : base(instance) { }
        public IfcMobileTelecommunicationsApplianceType() : base(0) { }

        public static implicit operator IfcMobileTelecommunicationsApplianceType(SdaiInstance instance) => new IfcMobileTelecommunicationsApplianceType(instance);

        /// <summary>
        /// Create new instace of IfcMobileTelecommunicationsApplianceType and returns object of this class to interact with
        /// </summary>
        public static new IfcMobileTelecommunicationsApplianceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMobileTelecommunicationsApplianceType"); Debug.Assert(inst != 0); return inst; }

        public IfcMobileTelecommunicationsApplianceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMobileTelecommunicationsApplianceTypeEnum_); return EnumValue<IfcMobileTelecommunicationsApplianceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMobileTelecommunicationsApplianceTypeEnum>.FromValue(value.Value, EnumNames.IfcMobileTelecommunicationsApplianceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMobileTelecommunicationsApplianceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMonetaryUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMonetaryUnit : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMonetaryUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMonetaryUnit(SdaiInstance instance) : base(instance) { }
        public IfcMonetaryUnit() : base(0) { }

        public static implicit operator IfcMonetaryUnit(SdaiInstance instance) => new IfcMonetaryUnit(instance);

        /// <summary>
        /// Create new instace of IfcMonetaryUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcMonetaryUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMonetaryUnit"); Debug.Assert(inst != 0); return inst; }

        public TextValue Currency
            {
            get { return get_string("Currency", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Currency", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcMonetaryUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMooringDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMooringDevice : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMooringDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMooringDevice(SdaiInstance instance) : base(instance) { }
        public IfcMooringDevice() : base(0) { }

        public static implicit operator IfcMooringDevice(SdaiInstance instance) => new IfcMooringDevice(instance);

        /// <summary>
        /// Create new instace of IfcMooringDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcMooringDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMooringDevice"); Debug.Assert(inst != 0); return inst; }

        public IfcMooringDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMooringDeviceTypeEnum_); return EnumValue<IfcMooringDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMooringDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcMooringDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMooringDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMooringDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMooringDeviceType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMooringDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMooringDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcMooringDeviceType() : base(0) { }

        public static implicit operator IfcMooringDeviceType(SdaiInstance instance) => new IfcMooringDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcMooringDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcMooringDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMooringDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcMooringDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMooringDeviceTypeEnum_); return EnumValue<IfcMooringDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMooringDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcMooringDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMooringDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMotorConnection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMotorConnection : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMotorConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMotorConnection(SdaiInstance instance) : base(instance) { }
        public IfcMotorConnection() : base(0) { }

        public static implicit operator IfcMotorConnection(SdaiInstance instance) => new IfcMotorConnection(instance);

        /// <summary>
        /// Create new instace of IfcMotorConnection and returns object of this class to interact with
        /// </summary>
        public static new IfcMotorConnection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMotorConnection"); Debug.Assert(inst != 0); return inst; }

        public IfcMotorConnectionTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMotorConnectionTypeEnum_); return EnumValue<IfcMotorConnectionTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMotorConnectionTypeEnum>.FromValue(value.Value, EnumNames.IfcMotorConnectionTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMotorConnection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcMotorConnectionType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcMotorConnectionType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcMotorConnectionType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcMotorConnectionType(SdaiInstance instance) : base(instance) { }
        public IfcMotorConnectionType() : base(0) { }

        public static implicit operator IfcMotorConnectionType(SdaiInstance instance) => new IfcMotorConnectionType(instance);

        /// <summary>
        /// Create new instace of IfcMotorConnectionType and returns object of this class to interact with
        /// </summary>
        public static new IfcMotorConnectionType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcMotorConnectionType"); Debug.Assert(inst != 0); return inst; }

        public IfcMotorConnectionTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcMotorConnectionTypeEnum_); return EnumValue<IfcMotorConnectionTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcMotorConnectionTypeEnum>.FromValue(value.Value, EnumNames.IfcMotorConnectionTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcMotorConnectionType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcNavigationElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcNavigationElement : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcNavigationElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcNavigationElement(SdaiInstance instance) : base(instance) { }
        public IfcNavigationElement() : base(0) { }

        public static implicit operator IfcNavigationElement(SdaiInstance instance) => new IfcNavigationElement(instance);

        /// <summary>
        /// Create new instace of IfcNavigationElement and returns object of this class to interact with
        /// </summary>
        public static new IfcNavigationElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcNavigationElement"); Debug.Assert(inst != 0); return inst; }

        public IfcNavigationElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcNavigationElementTypeEnum_); return EnumValue<IfcNavigationElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcNavigationElementTypeEnum>.FromValue(value.Value, EnumNames.IfcNavigationElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcNavigationElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcNavigationElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcNavigationElementType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcNavigationElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcNavigationElementType(SdaiInstance instance) : base(instance) { }
        public IfcNavigationElementType() : base(0) { }

        public static implicit operator IfcNavigationElementType(SdaiInstance instance) => new IfcNavigationElementType(instance);

        /// <summary>
        /// Create new instace of IfcNavigationElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcNavigationElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcNavigationElementType"); Debug.Assert(inst != 0); return inst; }

        public IfcNavigationElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcNavigationElementTypeEnum_); return EnumValue<IfcNavigationElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcNavigationElementTypeEnum>.FromValue(value.Value, EnumNames.IfcNavigationElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcNavigationElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcObjective
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcObjective : IfcConstraint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcObjective
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcObjective(SdaiInstance instance) : base(instance) { }
        public IfcObjective() : base(0) { }

        public static implicit operator IfcObjective(SdaiInstance instance) => new IfcObjective(instance);

        /// <summary>
        /// Create new instace of IfcObjective and returns object of this class to interact with
        /// </summary>
        public static new IfcObjective Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcObjective"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcConstraint BenchmarkValues { get { return (new ListOfIfcConstraintSerializer()).FromAttr(m_instance, "BenchmarkValues"); } }
        public void put_BenchmarkValues(IEnumerable<IfcConstraint> lst) { (new ListOfIfcConstraintSerializer()).ToSdaiAggr(lst, m_instance, "BenchmarkValues"); }
        public void put_BenchmarkValues_untyped(IEnumerable lst) { (new ListOfIfcConstraintSerializer()).ToSdaiAggr(lst, m_instance, "BenchmarkValues"); }
        public IfcLogicalOperatorEnum? LogicalAggregator 
            { 
            get { var str = get_string("LogicalAggregator", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLogicalOperatorEnum_); return EnumValue<IfcLogicalOperatorEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLogicalOperatorEnum>.FromValue(value.Value, EnumNames.IfcLogicalOperatorEnum_); ifcengine.sdaiPutAttrBN(m_instance, "LogicalAggregator", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcObjectiveEnum? ObjectiveQualifier 
            { 
            get { var str = get_string("ObjectiveQualifier", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcObjectiveEnum_); return EnumValue<IfcObjectiveEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcObjectiveEnum>.FromValue(value.Value, EnumNames.IfcObjectiveEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ObjectiveQualifier", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedQualifier
            {
            get { return get_string("UserDefinedQualifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedQualifier", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcObjective"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOccupant
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOccupant : IfcActor
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOccupant
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOccupant(SdaiInstance instance) : base(instance) { }
        public IfcOccupant() : base(0) { }

        public static implicit operator IfcOccupant(SdaiInstance instance) => new IfcOccupant(instance);

        /// <summary>
        /// Create new instace of IfcOccupant and returns object of this class to interact with
        /// </summary>
        public static new IfcOccupant Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOccupant"); Debug.Assert(inst != 0); return inst; }

        public IfcOccupantTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcOccupantTypeEnum_); return EnumValue<IfcOccupantTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcOccupantTypeEnum>.FromValue(value.Value, EnumNames.IfcOccupantTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcOccupant"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOffsetCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOffsetCurve : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOffsetCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOffsetCurve(SdaiInstance instance) : base(instance) { }
        public IfcOffsetCurve() : base(0) { }

        public static implicit operator IfcOffsetCurve(SdaiInstance instance) => new IfcOffsetCurve(instance);

        public IfcCurve BasisCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcOffsetCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOffsetCurve2D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOffsetCurve2D : IfcOffsetCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOffsetCurve2D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOffsetCurve2D(SdaiInstance instance) : base(instance) { }
        public IfcOffsetCurve2D() : base(0) { }

        public static implicit operator IfcOffsetCurve2D(SdaiInstance instance) => new IfcOffsetCurve2D(instance);

        /// <summary>
        /// Create new instace of IfcOffsetCurve2D and returns object of this class to interact with
        /// </summary>
        public static new IfcOffsetCurve2D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOffsetCurve2D"); Debug.Assert(inst != 0); return inst; }

        public double? Distance
            {
            get { return get_double("Distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? SelfIntersect 
            { 
            get { var str = get_string("SelfIntersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "SelfIntersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcOffsetCurve2D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOffsetCurve3D
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOffsetCurve3D : IfcOffsetCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOffsetCurve3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOffsetCurve3D(SdaiInstance instance) : base(instance) { }
        public IfcOffsetCurve3D() : base(0) { }

        public static implicit operator IfcOffsetCurve3D(SdaiInstance instance) => new IfcOffsetCurve3D(instance);

        /// <summary>
        /// Create new instace of IfcOffsetCurve3D and returns object of this class to interact with
        /// </summary>
        public static new IfcOffsetCurve3D Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOffsetCurve3D"); Debug.Assert(inst != 0); return inst; }

        public double? Distance
            {
            get { return get_double("Distance", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Distance", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? SelfIntersect 
            { 
            get { var str = get_string("SelfIntersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "SelfIntersect", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDirection RefDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RefDirection", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcOffsetCurve3D"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOffsetCurveByDistances
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOffsetCurveByDistances : IfcOffsetCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOffsetCurveByDistances
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOffsetCurveByDistances(SdaiInstance instance) : base(instance) { }
        public IfcOffsetCurveByDistances() : base(0) { }

        public static implicit operator IfcOffsetCurveByDistances(SdaiInstance instance) => new IfcOffsetCurveByDistances(instance);

        /// <summary>
        /// Create new instace of IfcOffsetCurveByDistances and returns object of this class to interact with
        /// </summary>
        public static new IfcOffsetCurveByDistances Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOffsetCurveByDistances"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcPointByDistanceExpression OffsetValues { get { return (new ListOfIfcPointByDistanceExpressionSerializer()).FromAttr(m_instance, "OffsetValues"); } }
        public void put_OffsetValues(IEnumerable<IfcPointByDistanceExpression> lst) { (new ListOfIfcPointByDistanceExpressionSerializer()).ToSdaiAggr(lst, m_instance, "OffsetValues"); }
        public void put_OffsetValues_untyped(IEnumerable lst) { (new ListOfIfcPointByDistanceExpressionSerializer()).ToSdaiAggr(lst, m_instance, "OffsetValues"); }
        public TextValue Tag
            {
            get { return get_string("Tag", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Tag", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcOffsetCurveByDistances"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOpenCrossProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOpenCrossProfileDef : IfcProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOpenCrossProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOpenCrossProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcOpenCrossProfileDef() : base(0) { }

        public static implicit operator IfcOpenCrossProfileDef(SdaiInstance instance) => new IfcOpenCrossProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcOpenCrossProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcOpenCrossProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOpenCrossProfileDef"); Debug.Assert(inst != 0); return inst; }

        public bool? HorizontalWidths
            {
            get { return get_bool("HorizontalWidths", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "HorizontalWidths", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public ListOfIfcNonNegativeLengthMeasure Widths { get { return (new ListOfIfcNonNegativeLengthMeasureSerializer()).FromAttr(m_instance, "Widths"); } }
        public void put_Widths(IEnumerable<double> lst) { (new ListOfIfcNonNegativeLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "Widths"); }
        public void put_Widths_untyped(IEnumerable lst) { (new ListOfIfcNonNegativeLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "Widths"); }
        public ListOfIfcPlaneAngleMeasure Slopes { get { return (new ListOfIfcPlaneAngleMeasureSerializer()).FromAttr(m_instance, "Slopes"); } }
        public void put_Slopes(IEnumerable<double> lst) { (new ListOfIfcPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "Slopes"); }
        public void put_Slopes_untyped(IEnumerable lst) { (new ListOfIfcPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "Slopes"); }
        public ListOfIfcLabel Tags { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "Tags"); } }
        public void put_Tags(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "Tags"); }
        public void put_Tags_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "Tags"); }
        public IfcCartesianPoint OffsetPoint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OffsetPoint", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OffsetPoint", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcOpenCrossProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOpeningElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOpeningElement : IfcFeatureElementSubtraction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOpeningElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOpeningElement(SdaiInstance instance) : base(instance) { }
        public IfcOpeningElement() : base(0) { }

        public static implicit operator IfcOpeningElement(SdaiInstance instance) => new IfcOpeningElement(instance);

        /// <summary>
        /// Create new instace of IfcOpeningElement and returns object of this class to interact with
        /// </summary>
        public static new IfcOpeningElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOpeningElement"); Debug.Assert(inst != 0); return inst; }

        public IfcOpeningElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcOpeningElementTypeEnum_); return EnumValue<IfcOpeningElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcOpeningElementTypeEnum>.FromValue(value.Value, EnumNames.IfcOpeningElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcRelFillsElement HasFillings { get { return (new SetOfIfcRelFillsElementSerializer()).FromAttr(m_instance, "HasFillings"); } }

        protected override TextValue EntityName() { return "IfcOpeningElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOpenShell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOpenShell : IfcConnectedFaceSet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOpenShell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOpenShell(SdaiInstance instance) : base(instance) { }
        public IfcOpenShell() : base(0) { }

        public static implicit operator IfcOpenShell(SdaiInstance instance) => new IfcOpenShell(instance);

        /// <summary>
        /// Create new instace of IfcOpenShell and returns object of this class to interact with
        /// </summary>
        public static new IfcOpenShell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOpenShell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcOpenShell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOrganization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOrganization : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOrganization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOrganization(SdaiInstance instance) : base(instance) { }
        public IfcOrganization() : base(0) { }

        public static implicit operator IfcOrganization(SdaiInstance instance) => new IfcOrganization(instance);

        /// <summary>
        /// Create new instace of IfcOrganization and returns object of this class to interact with
        /// </summary>
        public static new IfcOrganization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOrganization"); Debug.Assert(inst != 0); return inst; }

        public TextValue Identification
            {
            get { return get_string("Identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identification", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcActorRole Roles { get { return (new ListOfIfcActorRoleSerializer()).FromAttr(m_instance, "Roles"); } }
        public void put_Roles(IEnumerable<IfcActorRole> lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }
        public void put_Roles_untyped(IEnumerable lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }
        public ListOfIfcAddress Addresses { get { return (new ListOfIfcAddressSerializer()).FromAttr(m_instance, "Addresses"); } }
        public void put_Addresses(IEnumerable<IfcAddress> lst) { (new ListOfIfcAddressSerializer()).ToSdaiAggr(lst, m_instance, "Addresses"); }
        public void put_Addresses_untyped(IEnumerable lst) { (new ListOfIfcAddressSerializer()).ToSdaiAggr(lst, m_instance, "Addresses"); }
        public SetOfIfcOrganizationRelationship IsRelatedBy { get { return (new SetOfIfcOrganizationRelationshipSerializer()).FromAttr(m_instance, "IsRelatedBy"); } }
        public SetOfIfcOrganizationRelationship Relates { get { return (new SetOfIfcOrganizationRelationshipSerializer()).FromAttr(m_instance, "Relates"); } }
        public SetOfIfcPersonAndOrganization Engages { get { return (new SetOfIfcPersonAndOrganizationSerializer()).FromAttr(m_instance, "Engages"); } }

        protected override TextValue EntityName() { return "IfcOrganization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOrganizationRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOrganizationRelationship : IfcResourceLevelRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOrganizationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOrganizationRelationship(SdaiInstance instance) : base(instance) { }
        public IfcOrganizationRelationship() : base(0) { }

        public static implicit operator IfcOrganizationRelationship(SdaiInstance instance) => new IfcOrganizationRelationship(instance);

        /// <summary>
        /// Create new instace of IfcOrganizationRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcOrganizationRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOrganizationRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcOrganization RelatingOrganization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingOrganization", ifcengine.sdaiINSTANCE, out inst); return new IfcOrganization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingOrganization", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcOrganization RelatedOrganizations { get { return (new SetOfIfcOrganizationSerializer()).FromAttr(m_instance, "RelatedOrganizations"); } }
        public void put_RelatedOrganizations(IEnumerable<IfcOrganization> lst) { (new SetOfIfcOrganizationSerializer()).ToSdaiAggr(lst, m_instance, "RelatedOrganizations"); }
        public void put_RelatedOrganizations_untyped(IEnumerable lst) { (new SetOfIfcOrganizationSerializer()).ToSdaiAggr(lst, m_instance, "RelatedOrganizations"); }

        protected override TextValue EntityName() { return "IfcOrganizationRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOrientedEdge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOrientedEdge : IfcEdge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOrientedEdge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOrientedEdge(SdaiInstance instance) : base(instance) { }
        public IfcOrientedEdge() : base(0) { }

        public static implicit operator IfcOrientedEdge(SdaiInstance instance) => new IfcOrientedEdge(instance);

        /// <summary>
        /// Create new instace of IfcOrientedEdge and returns object of this class to interact with
        /// </summary>
        public static new IfcOrientedEdge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOrientedEdge"); Debug.Assert(inst != 0); return inst; }

        public IfcEdge EdgeElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EdgeElement", ifcengine.sdaiINSTANCE, out inst); return new IfcEdge(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeElement", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? Orientation
            {
            get { return get_bool("Orientation", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Orientation", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcOrientedEdge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOuterBoundaryCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOuterBoundaryCurve : IfcBoundaryCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOuterBoundaryCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOuterBoundaryCurve(SdaiInstance instance) : base(instance) { }
        public IfcOuterBoundaryCurve() : base(0) { }

        public static implicit operator IfcOuterBoundaryCurve(SdaiInstance instance) => new IfcOuterBoundaryCurve(instance);

        /// <summary>
        /// Create new instace of IfcOuterBoundaryCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcOuterBoundaryCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOuterBoundaryCurve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcOuterBoundaryCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOutlet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOutlet : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOutlet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOutlet(SdaiInstance instance) : base(instance) { }
        public IfcOutlet() : base(0) { }

        public static implicit operator IfcOutlet(SdaiInstance instance) => new IfcOutlet(instance);

        /// <summary>
        /// Create new instace of IfcOutlet and returns object of this class to interact with
        /// </summary>
        public static new IfcOutlet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOutlet"); Debug.Assert(inst != 0); return inst; }

        public IfcOutletTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcOutletTypeEnum_); return EnumValue<IfcOutletTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcOutletTypeEnum>.FromValue(value.Value, EnumNames.IfcOutletTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcOutlet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOutletType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOutletType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOutletType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOutletType(SdaiInstance instance) : base(instance) { }
        public IfcOutletType() : base(0) { }

        public static implicit operator IfcOutletType(SdaiInstance instance) => new IfcOutletType(instance);

        /// <summary>
        /// Create new instace of IfcOutletType and returns object of this class to interact with
        /// </summary>
        public static new IfcOutletType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOutletType"); Debug.Assert(inst != 0); return inst; }

        public IfcOutletTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcOutletTypeEnum_); return EnumValue<IfcOutletTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcOutletTypeEnum>.FromValue(value.Value, EnumNames.IfcOutletTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcOutletType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcOwnerHistory
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcOwnerHistory : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcOwnerHistory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcOwnerHistory(SdaiInstance instance) : base(instance) { }
        public IfcOwnerHistory() : base(0) { }

        public static implicit operator IfcOwnerHistory(SdaiInstance instance) => new IfcOwnerHistory(instance);

        /// <summary>
        /// Create new instace of IfcOwnerHistory and returns object of this class to interact with
        /// </summary>
        public static new IfcOwnerHistory Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcOwnerHistory"); Debug.Assert(inst != 0); return inst; }

        public IfcPersonAndOrganization OwningUser 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OwningUser", ifcengine.sdaiINSTANCE, out inst); return new IfcPersonAndOrganization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OwningUser", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcApplication OwningApplication 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OwningApplication", ifcengine.sdaiINSTANCE, out inst); return new IfcApplication(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OwningApplication", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcStateEnum? State 
            { 
            get { var str = get_string("State", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStateEnum_); return EnumValue<IfcStateEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStateEnum>.FromValue(value.Value, EnumNames.IfcStateEnum_); ifcengine.sdaiPutAttrBN(m_instance, "State", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcChangeActionEnum? ChangeAction 
            { 
            get { var str = get_string("ChangeAction", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcChangeActionEnum_); return EnumValue<IfcChangeActionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcChangeActionEnum>.FromValue(value.Value, EnumNames.IfcChangeActionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ChangeAction", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IntValue? LastModifiedDate
            {
            get { return get_IntValue("LastModifiedDate", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LastModifiedDate", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IfcPersonAndOrganization LastModifyingUser 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LastModifyingUser", ifcengine.sdaiINSTANCE, out inst); return new IfcPersonAndOrganization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LastModifyingUser", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcApplication LastModifyingApplication 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LastModifyingApplication", ifcengine.sdaiINSTANCE, out inst); return new IfcApplication(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LastModifyingApplication", ifcengine.sdaiINSTANCE, i); }
            }
        public IntValue? CreationDate
            {
            get { return get_IntValue("CreationDate", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CreationDate", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcOwnerHistory"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPath
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPath : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPath
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPath(SdaiInstance instance) : base(instance) { }
        public IfcPath() : base(0) { }

        public static implicit operator IfcPath(SdaiInstance instance) => new IfcPath(instance);

        /// <summary>
        /// Create new instace of IfcPath and returns object of this class to interact with
        /// </summary>
        public static new IfcPath Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPath"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcOrientedEdge EdgeList { get { return (new ListOfIfcOrientedEdgeSerializer()).FromAttr(m_instance, "EdgeList"); } }
        public void put_EdgeList(IEnumerable<IfcOrientedEdge> lst) { (new ListOfIfcOrientedEdgeSerializer()).ToSdaiAggr(lst, m_instance, "EdgeList"); }
        public void put_EdgeList_untyped(IEnumerable lst) { (new ListOfIfcOrientedEdgeSerializer()).ToSdaiAggr(lst, m_instance, "EdgeList"); }

        protected override TextValue EntityName() { return "IfcPath"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPavement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPavement : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPavement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPavement(SdaiInstance instance) : base(instance) { }
        public IfcPavement() : base(0) { }

        public static implicit operator IfcPavement(SdaiInstance instance) => new IfcPavement(instance);

        /// <summary>
        /// Create new instace of IfcPavement and returns object of this class to interact with
        /// </summary>
        public static new IfcPavement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPavement"); Debug.Assert(inst != 0); return inst; }

        public IfcPavementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPavementTypeEnum_); return EnumValue<IfcPavementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPavementTypeEnum>.FromValue(value.Value, EnumNames.IfcPavementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPavement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPavementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPavementType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPavementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPavementType(SdaiInstance instance) : base(instance) { }
        public IfcPavementType() : base(0) { }

        public static implicit operator IfcPavementType(SdaiInstance instance) => new IfcPavementType(instance);

        /// <summary>
        /// Create new instace of IfcPavementType and returns object of this class to interact with
        /// </summary>
        public static new IfcPavementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPavementType"); Debug.Assert(inst != 0); return inst; }

        public IfcPavementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPavementTypeEnum_); return EnumValue<IfcPavementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPavementTypeEnum>.FromValue(value.Value, EnumNames.IfcPavementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPavementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPcurve : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPcurve(SdaiInstance instance) : base(instance) { }
        public IfcPcurve() : base(0) { }

        public static implicit operator IfcPcurve(SdaiInstance instance) => new IfcPcurve(instance);

        /// <summary>
        /// Create new instace of IfcPcurve and returns object of this class to interact with
        /// </summary>
        public static new IfcPcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPcurve"); Debug.Assert(inst != 0); return inst; }

        public IfcSurface BasisSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcCurve ReferenceCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ReferenceCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ReferenceCurve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcPcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPerformanceHistory
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPerformanceHistory : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPerformanceHistory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPerformanceHistory(SdaiInstance instance) : base(instance) { }
        public IfcPerformanceHistory() : base(0) { }

        public static implicit operator IfcPerformanceHistory(SdaiInstance instance) => new IfcPerformanceHistory(instance);

        /// <summary>
        /// Create new instace of IfcPerformanceHistory and returns object of this class to interact with
        /// </summary>
        public static new IfcPerformanceHistory Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPerformanceHistory"); Debug.Assert(inst != 0); return inst; }

        public TextValue LifeCyclePhase
            {
            get { return get_string("LifeCyclePhase", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LifeCyclePhase", ifcengine.sdaiSTRING, value); }
            }
        public IfcPerformanceHistoryTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPerformanceHistoryTypeEnum_); return EnumValue<IfcPerformanceHistoryTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPerformanceHistoryTypeEnum>.FromValue(value.Value, EnumNames.IfcPerformanceHistoryTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPerformanceHistory"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPermeableCoveringProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPermeableCoveringProperties : IfcPreDefinedPropertySet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPermeableCoveringProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPermeableCoveringProperties(SdaiInstance instance) : base(instance) { }
        public IfcPermeableCoveringProperties() : base(0) { }

        public static implicit operator IfcPermeableCoveringProperties(SdaiInstance instance) => new IfcPermeableCoveringProperties(instance);

        /// <summary>
        /// Create new instace of IfcPermeableCoveringProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcPermeableCoveringProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPermeableCoveringProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcPermeableCoveringOperationEnum? OperationType 
            { 
            get { var str = get_string("OperationType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPermeableCoveringOperationEnum_); return EnumValue<IfcPermeableCoveringOperationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPermeableCoveringOperationEnum>.FromValue(value.Value, EnumNames.IfcPermeableCoveringOperationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "OperationType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcWindowPanelPositionEnum? PanelPosition 
            { 
            get { var str = get_string("PanelPosition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowPanelPositionEnum_); return EnumValue<IfcWindowPanelPositionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowPanelPositionEnum>.FromValue(value.Value, EnumNames.IfcWindowPanelPositionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PanelPosition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? FrameDepth
            {
            get { return get_double("FrameDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FrameDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FrameThickness
            {
            get { return get_double("FrameThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FrameThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcShapeAspect ShapeAspectStyle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcPermeableCoveringProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPermit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPermit : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPermit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPermit(SdaiInstance instance) : base(instance) { }
        public IfcPermit() : base(0) { }

        public static implicit operator IfcPermit(SdaiInstance instance) => new IfcPermit(instance);

        /// <summary>
        /// Create new instace of IfcPermit and returns object of this class to interact with
        /// </summary>
        public static new IfcPermit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPermit"); Debug.Assert(inst != 0); return inst; }

        public IfcPermitTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPermitTypeEnum_); return EnumValue<IfcPermitTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPermitTypeEnum>.FromValue(value.Value, EnumNames.IfcPermitTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue Status
            {
            get { return get_string("Status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Status", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LongDescription
            {
            get { return get_string("LongDescription", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongDescription", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcPermit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPerson
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPerson : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPerson
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPerson(SdaiInstance instance) : base(instance) { }
        public IfcPerson() : base(0) { }

        public static implicit operator IfcPerson(SdaiInstance instance) => new IfcPerson(instance);

        /// <summary>
        /// Create new instace of IfcPerson and returns object of this class to interact with
        /// </summary>
        public static new IfcPerson Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPerson"); Debug.Assert(inst != 0); return inst; }

        public TextValue Identification
            {
            get { return get_string("Identification", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identification", ifcengine.sdaiSTRING, value); }
            }
        public TextValue FamilyName
            {
            get { return get_string("FamilyName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FamilyName", ifcengine.sdaiSTRING, value); }
            }
        public TextValue GivenName
            {
            get { return get_string("GivenName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "GivenName", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcLabel MiddleNames { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "MiddleNames"); } }
        public void put_MiddleNames(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "MiddleNames"); }
        public void put_MiddleNames_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "MiddleNames"); }
        public ListOfIfcLabel PrefixTitles { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "PrefixTitles"); } }
        public void put_PrefixTitles(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "PrefixTitles"); }
        public void put_PrefixTitles_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "PrefixTitles"); }
        public ListOfIfcLabel SuffixTitles { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "SuffixTitles"); } }
        public void put_SuffixTitles(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "SuffixTitles"); }
        public void put_SuffixTitles_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "SuffixTitles"); }
        public ListOfIfcActorRole Roles { get { return (new ListOfIfcActorRoleSerializer()).FromAttr(m_instance, "Roles"); } }
        public void put_Roles(IEnumerable<IfcActorRole> lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }
        public void put_Roles_untyped(IEnumerable lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }
        public ListOfIfcAddress Addresses { get { return (new ListOfIfcAddressSerializer()).FromAttr(m_instance, "Addresses"); } }
        public void put_Addresses(IEnumerable<IfcAddress> lst) { (new ListOfIfcAddressSerializer()).ToSdaiAggr(lst, m_instance, "Addresses"); }
        public void put_Addresses_untyped(IEnumerable lst) { (new ListOfIfcAddressSerializer()).ToSdaiAggr(lst, m_instance, "Addresses"); }
        public SetOfIfcPersonAndOrganization EngagedIn { get { return (new SetOfIfcPersonAndOrganizationSerializer()).FromAttr(m_instance, "EngagedIn"); } }

        protected override TextValue EntityName() { return "IfcPerson"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPersonAndOrganization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPersonAndOrganization : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPersonAndOrganization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPersonAndOrganization(SdaiInstance instance) : base(instance) { }
        public IfcPersonAndOrganization() : base(0) { }

        public static implicit operator IfcPersonAndOrganization(SdaiInstance instance) => new IfcPersonAndOrganization(instance);

        /// <summary>
        /// Create new instace of IfcPersonAndOrganization and returns object of this class to interact with
        /// </summary>
        public static new IfcPersonAndOrganization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPersonAndOrganization"); Debug.Assert(inst != 0); return inst; }

        public IfcPerson ThePerson 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ThePerson", ifcengine.sdaiINSTANCE, out inst); return new IfcPerson(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ThePerson", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcOrganization TheOrganization 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TheOrganization", ifcengine.sdaiINSTANCE, out inst); return new IfcOrganization(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TheOrganization", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcActorRole Roles { get { return (new ListOfIfcActorRoleSerializer()).FromAttr(m_instance, "Roles"); } }
        public void put_Roles(IEnumerable<IfcActorRole> lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }
        public void put_Roles_untyped(IEnumerable lst) { (new ListOfIfcActorRoleSerializer()).ToSdaiAggr(lst, m_instance, "Roles"); }

        protected override TextValue EntityName() { return "IfcPersonAndOrganization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPhysicalQuantity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPhysicalQuantity : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPhysicalQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPhysicalQuantity(SdaiInstance instance) : base(instance) { }
        public IfcPhysicalQuantity() : base(0) { }

        public static implicit operator IfcPhysicalQuantity(SdaiInstance instance) => new IfcPhysicalQuantity(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcExternalReferenceRelationship HasExternalReferences { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReferences"); } }
        public SetOfIfcPhysicalComplexQuantity PartOfComplex { get { return (new SetOfIfcPhysicalComplexQuantitySerializer()).FromAttr(m_instance, "PartOfComplex"); } }

        protected override TextValue EntityName() { return "IfcPhysicalQuantity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPhysicalComplexQuantity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPhysicalComplexQuantity : IfcPhysicalQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPhysicalComplexQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPhysicalComplexQuantity(SdaiInstance instance) : base(instance) { }
        public IfcPhysicalComplexQuantity() : base(0) { }

        public static implicit operator IfcPhysicalComplexQuantity(SdaiInstance instance) => new IfcPhysicalComplexQuantity(instance);

        /// <summary>
        /// Create new instace of IfcPhysicalComplexQuantity and returns object of this class to interact with
        /// </summary>
        public static new IfcPhysicalComplexQuantity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPhysicalComplexQuantity"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcPhysicalQuantity HasQuantities { get { return (new SetOfIfcPhysicalQuantitySerializer()).FromAttr(m_instance, "HasQuantities"); } }
        public void put_HasQuantities(IEnumerable<IfcPhysicalQuantity> lst) { (new SetOfIfcPhysicalQuantitySerializer()).ToSdaiAggr(lst, m_instance, "HasQuantities"); }
        public void put_HasQuantities_untyped(IEnumerable lst) { (new SetOfIfcPhysicalQuantitySerializer()).ToSdaiAggr(lst, m_instance, "HasQuantities"); }
        public TextValue Discrimination
            {
            get { return get_string("Discrimination", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Discrimination", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Quality
            {
            get { return get_string("Quality", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Quality", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Usage
            {
            get { return get_string("Usage", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Usage", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcPhysicalComplexQuantity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPhysicalSimpleQuantity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPhysicalSimpleQuantity : IfcPhysicalQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPhysicalSimpleQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPhysicalSimpleQuantity(SdaiInstance instance) : base(instance) { }
        public IfcPhysicalSimpleQuantity() : base(0) { }

        public static implicit operator IfcPhysicalSimpleQuantity(SdaiInstance instance) => new IfcPhysicalSimpleQuantity(instance);

        public IfcNamedUnit Unit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Unit", ifcengine.sdaiINSTANCE, out inst); return new IfcNamedUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Unit", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcPhysicalSimpleQuantity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPile : IfcDeepFoundation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPile(SdaiInstance instance) : base(instance) { }
        public IfcPile() : base(0) { }

        public static implicit operator IfcPile(SdaiInstance instance) => new IfcPile(instance);

        /// <summary>
        /// Create new instace of IfcPile and returns object of this class to interact with
        /// </summary>
        public static new IfcPile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPile"); Debug.Assert(inst != 0); return inst; }

        public IfcPileTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPileTypeEnum_); return EnumValue<IfcPileTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPileTypeEnum>.FromValue(value.Value, EnumNames.IfcPileTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcPileConstructionEnum? ConstructionType 
            { 
            get { var str = get_string("ConstructionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPileConstructionEnum_); return EnumValue<IfcPileConstructionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPileConstructionEnum>.FromValue(value.Value, EnumNames.IfcPileConstructionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ConstructionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPileType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPileType : IfcDeepFoundationType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPileType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPileType(SdaiInstance instance) : base(instance) { }
        public IfcPileType() : base(0) { }

        public static implicit operator IfcPileType(SdaiInstance instance) => new IfcPileType(instance);

        /// <summary>
        /// Create new instace of IfcPileType and returns object of this class to interact with
        /// </summary>
        public static new IfcPileType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPileType"); Debug.Assert(inst != 0); return inst; }

        public IfcPileTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPileTypeEnum_); return EnumValue<IfcPileTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPileTypeEnum>.FromValue(value.Value, EnumNames.IfcPileTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPileType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPipeFitting
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPipeFitting : IfcFlowFitting
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPipeFitting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPipeFitting(SdaiInstance instance) : base(instance) { }
        public IfcPipeFitting() : base(0) { }

        public static implicit operator IfcPipeFitting(SdaiInstance instance) => new IfcPipeFitting(instance);

        /// <summary>
        /// Create new instace of IfcPipeFitting and returns object of this class to interact with
        /// </summary>
        public static new IfcPipeFitting Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPipeFitting"); Debug.Assert(inst != 0); return inst; }

        public IfcPipeFittingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPipeFittingTypeEnum_); return EnumValue<IfcPipeFittingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPipeFittingTypeEnum>.FromValue(value.Value, EnumNames.IfcPipeFittingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPipeFitting"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPipeFittingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPipeFittingType : IfcFlowFittingType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPipeFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPipeFittingType(SdaiInstance instance) : base(instance) { }
        public IfcPipeFittingType() : base(0) { }

        public static implicit operator IfcPipeFittingType(SdaiInstance instance) => new IfcPipeFittingType(instance);

        /// <summary>
        /// Create new instace of IfcPipeFittingType and returns object of this class to interact with
        /// </summary>
        public static new IfcPipeFittingType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPipeFittingType"); Debug.Assert(inst != 0); return inst; }

        public IfcPipeFittingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPipeFittingTypeEnum_); return EnumValue<IfcPipeFittingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPipeFittingTypeEnum>.FromValue(value.Value, EnumNames.IfcPipeFittingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPipeFittingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPipeSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPipeSegment : IfcFlowSegment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPipeSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPipeSegment(SdaiInstance instance) : base(instance) { }
        public IfcPipeSegment() : base(0) { }

        public static implicit operator IfcPipeSegment(SdaiInstance instance) => new IfcPipeSegment(instance);

        /// <summary>
        /// Create new instace of IfcPipeSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcPipeSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPipeSegment"); Debug.Assert(inst != 0); return inst; }

        public IfcPipeSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPipeSegmentTypeEnum_); return EnumValue<IfcPipeSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPipeSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcPipeSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPipeSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPipeSegmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPipeSegmentType : IfcFlowSegmentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPipeSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPipeSegmentType(SdaiInstance instance) : base(instance) { }
        public IfcPipeSegmentType() : base(0) { }

        public static implicit operator IfcPipeSegmentType(SdaiInstance instance) => new IfcPipeSegmentType(instance);

        /// <summary>
        /// Create new instace of IfcPipeSegmentType and returns object of this class to interact with
        /// </summary>
        public static new IfcPipeSegmentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPipeSegmentType"); Debug.Assert(inst != 0); return inst; }

        public IfcPipeSegmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPipeSegmentTypeEnum_); return EnumValue<IfcPipeSegmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPipeSegmentTypeEnum>.FromValue(value.Value, EnumNames.IfcPipeSegmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPipeSegmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPixelTexture
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPixelTexture : IfcSurfaceTexture
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPixelTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPixelTexture(SdaiInstance instance) : base(instance) { }
        public IfcPixelTexture() : base(0) { }

        public static implicit operator IfcPixelTexture(SdaiInstance instance) => new IfcPixelTexture(instance);

        /// <summary>
        /// Create new instace of IfcPixelTexture and returns object of this class to interact with
        /// </summary>
        public static new IfcPixelTexture Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPixelTexture"); Debug.Assert(inst != 0); return inst; }

        public IntValue? Width
            {
            get { return get_IntValue("Width", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Width", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Height
            {
            get { return get_IntValue("Height", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Height", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? ColourComponents
            {
            get { return get_IntValue("ColourComponents", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ColourComponents", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public ListOfIfcBinary Pixel { get { return (new ListOfIfcBinarySerializer()).FromAttr(m_instance, "Pixel"); } }
        public void put_Pixel(IEnumerable<TextValue> lst) { (new ListOfIfcBinarySerializer()).ToSdaiAggr(lst, m_instance, "Pixel"); }
        public void put_Pixel_untyped(IEnumerable lst) { (new ListOfIfcBinarySerializer()).ToSdaiAggr(lst, m_instance, "Pixel"); }

        protected override TextValue EntityName() { return "IfcPixelTexture"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlanarExtent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlanarExtent : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlanarExtent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlanarExtent(SdaiInstance instance) : base(instance) { }
        public IfcPlanarExtent() : base(0) { }

        public static implicit operator IfcPlanarExtent(SdaiInstance instance) => new IfcPlanarExtent(instance);

        /// <summary>
        /// Create new instace of IfcPlanarExtent and returns object of this class to interact with
        /// </summary>
        public static new IfcPlanarExtent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPlanarExtent"); Debug.Assert(inst != 0); return inst; }

        public double? SizeInX
            {
            get { return get_double("SizeInX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SizeInX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SizeInY
            {
            get { return get_double("SizeInY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SizeInY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPlanarExtent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlanarBox
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlanarBox : IfcPlanarExtent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlanarBox
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlanarBox(SdaiInstance instance) : base(instance) { }
        public IfcPlanarBox() : base(0) { }

        public static implicit operator IfcPlanarBox(SdaiInstance instance) => new IfcPlanarBox(instance);

        /// <summary>
        /// Create new instace of IfcPlanarBox and returns object of this class to interact with
        /// </summary>
        public static new IfcPlanarBox Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPlanarBox"); Debug.Assert(inst != 0); return inst; }


        public IfcAxis2Placement Placement
            {
            get { return new IfcAxis2Placement(m_instance, "Placement", 0); }
            }

        protected override TextValue EntityName() { return "IfcPlanarBox"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlane
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlane : IfcElementarySurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlane(SdaiInstance instance) : base(instance) { }
        public IfcPlane() : base(0) { }

        public static implicit operator IfcPlane(SdaiInstance instance) => new IfcPlane(instance);

        /// <summary>
        /// Create new instace of IfcPlane and returns object of this class to interact with
        /// </summary>
        public static new IfcPlane Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPlane"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcPlane"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlate
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlate : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlate(SdaiInstance instance) : base(instance) { }
        public IfcPlate() : base(0) { }

        public static implicit operator IfcPlate(SdaiInstance instance) => new IfcPlate(instance);

        /// <summary>
        /// Create new instace of IfcPlate and returns object of this class to interact with
        /// </summary>
        public static new IfcPlate Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPlate"); Debug.Assert(inst != 0); return inst; }

        public IfcPlateTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPlateTypeEnum_); return EnumValue<IfcPlateTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPlateTypeEnum>.FromValue(value.Value, EnumNames.IfcPlateTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPlate"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPlateType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPlateType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPlateType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPlateType(SdaiInstance instance) : base(instance) { }
        public IfcPlateType() : base(0) { }

        public static implicit operator IfcPlateType(SdaiInstance instance) => new IfcPlateType(instance);

        /// <summary>
        /// Create new instace of IfcPlateType and returns object of this class to interact with
        /// </summary>
        public static new IfcPlateType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPlateType"); Debug.Assert(inst != 0); return inst; }

        public IfcPlateTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPlateTypeEnum_); return EnumValue<IfcPlateTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPlateTypeEnum>.FromValue(value.Value, EnumNames.IfcPlateTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPlateType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPointByDistanceExpression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPointByDistanceExpression : IfcPoint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPointByDistanceExpression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPointByDistanceExpression(SdaiInstance instance) : base(instance) { }
        public IfcPointByDistanceExpression() : base(0) { }

        public static implicit operator IfcPointByDistanceExpression(SdaiInstance instance) => new IfcPointByDistanceExpression(instance);

        /// <summary>
        /// Create new instace of IfcPointByDistanceExpression and returns object of this class to interact with
        /// </summary>
        public static new IfcPointByDistanceExpression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPointByDistanceExpression"); Debug.Assert(inst != 0); return inst; }


        public IfcCurveMeasureSelect DistanceAlong
            {
            get { return new IfcCurveMeasureSelect(m_instance, "DistanceAlong", 0); }
            }
        public double? OffsetLateral
            {
            get { return get_double("OffsetLateral", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OffsetLateral", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OffsetVertical
            {
            get { return get_double("OffsetVertical", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OffsetVertical", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OffsetLongitudinal
            {
            get { return get_double("OffsetLongitudinal", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OffsetLongitudinal", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcCurve BasisCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcPointByDistanceExpression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPointOnCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPointOnCurve : IfcPoint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPointOnCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPointOnCurve(SdaiInstance instance) : base(instance) { }
        public IfcPointOnCurve() : base(0) { }

        public static implicit operator IfcPointOnCurve(SdaiInstance instance) => new IfcPointOnCurve(instance);

        /// <summary>
        /// Create new instace of IfcPointOnCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcPointOnCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPointOnCurve"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve BasisCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public double? PointParameter
            {
            get { return get_double("PointParameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PointParameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPointOnCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPointOnSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPointOnSurface : IfcPoint
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPointOnSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPointOnSurface(SdaiInstance instance) : base(instance) { }
        public IfcPointOnSurface() : base(0) { }

        public static implicit operator IfcPointOnSurface(SdaiInstance instance) => new IfcPointOnSurface(instance);

        /// <summary>
        /// Create new instace of IfcPointOnSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcPointOnSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPointOnSurface"); Debug.Assert(inst != 0); return inst; }

        public IfcSurface BasisSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public double? PointParameterU
            {
            get { return get_double("PointParameterU", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PointParameterU", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PointParameterV
            {
            get { return get_double("PointParameterV", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PointParameterV", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPointOnSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPolygonalBoundedHalfSpace
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPolygonalBoundedHalfSpace : IfcHalfSpaceSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPolygonalBoundedHalfSpace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPolygonalBoundedHalfSpace(SdaiInstance instance) : base(instance) { }
        public IfcPolygonalBoundedHalfSpace() : base(0) { }

        public static implicit operator IfcPolygonalBoundedHalfSpace(SdaiInstance instance) => new IfcPolygonalBoundedHalfSpace(instance);

        /// <summary>
        /// Create new instace of IfcPolygonalBoundedHalfSpace and returns object of this class to interact with
        /// </summary>
        public static new IfcPolygonalBoundedHalfSpace Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPolygonalBoundedHalfSpace"); Debug.Assert(inst != 0); return inst; }

        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcBoundedCurve PolygonalBoundary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "PolygonalBoundary", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundedCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "PolygonalBoundary", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcPolygonalBoundedHalfSpace"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTessellatedFaceSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTessellatedFaceSet : IfcTessellatedItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTessellatedFaceSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTessellatedFaceSet(SdaiInstance instance) : base(instance) { }
        public IfcTessellatedFaceSet() : base(0) { }

        public static implicit operator IfcTessellatedFaceSet(SdaiInstance instance) => new IfcTessellatedFaceSet(instance);

        public IfcCartesianPointList3D Coordinates 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Coordinates", ifcengine.sdaiINSTANCE, out inst); return new IfcCartesianPointList3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Coordinates", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcIndexedColourMap HasColours { get { return (new SetOfIfcIndexedColourMapSerializer()).FromAttr(m_instance, "HasColours"); } }
        public SetOfIfcIndexedTextureMap HasTextures { get { return (new SetOfIfcIndexedTextureMapSerializer()).FromAttr(m_instance, "HasTextures"); } }

        protected override TextValue EntityName() { return "IfcTessellatedFaceSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPolygonalFaceSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPolygonalFaceSet : IfcTessellatedFaceSet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPolygonalFaceSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPolygonalFaceSet(SdaiInstance instance) : base(instance) { }
        public IfcPolygonalFaceSet() : base(0) { }

        public static implicit operator IfcPolygonalFaceSet(SdaiInstance instance) => new IfcPolygonalFaceSet(instance);

        /// <summary>
        /// Create new instace of IfcPolygonalFaceSet and returns object of this class to interact with
        /// </summary>
        public static new IfcPolygonalFaceSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPolygonalFaceSet"); Debug.Assert(inst != 0); return inst; }

        public bool? Closed
            {
            get { return get_bool("Closed", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Closed", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public ListOfIfcIndexedPolygonalFace Faces { get { return (new ListOfIfcIndexedPolygonalFaceSerializer()).FromAttr(m_instance, "Faces"); } }
        public void put_Faces(IEnumerable<IfcIndexedPolygonalFace> lst) { (new ListOfIfcIndexedPolygonalFaceSerializer()).ToSdaiAggr(lst, m_instance, "Faces"); }
        public void put_Faces_untyped(IEnumerable lst) { (new ListOfIfcIndexedPolygonalFaceSerializer()).ToSdaiAggr(lst, m_instance, "Faces"); }
        public ListOfIfcPositiveInteger PnIndex { get { return (new ListOfIfcPositiveIntegerSerializer()).FromAttr(m_instance, "PnIndex"); } }
        public void put_PnIndex(IEnumerable<IntValue> lst) { (new ListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "PnIndex"); }
        public void put_PnIndex_untyped(IEnumerable lst) { (new ListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "PnIndex"); }

        protected override TextValue EntityName() { return "IfcPolygonalFaceSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPolyline
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPolyline : IfcBoundedCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPolyline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPolyline(SdaiInstance instance) : base(instance) { }
        public IfcPolyline() : base(0) { }

        public static implicit operator IfcPolyline(SdaiInstance instance) => new IfcPolyline(instance);

        /// <summary>
        /// Create new instace of IfcPolyline and returns object of this class to interact with
        /// </summary>
        public static new IfcPolyline Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPolyline"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcCartesianPoint Points { get { return (new ListOfIfcCartesianPointSerializer()).FromAttr(m_instance, "Points"); } }
        public void put_Points(IEnumerable<IfcCartesianPoint> lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "Points"); }
        public void put_Points_untyped(IEnumerable lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "Points"); }

        protected override TextValue EntityName() { return "IfcPolyline"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPolyLoop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPolyLoop : IfcLoop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPolyLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPolyLoop(SdaiInstance instance) : base(instance) { }
        public IfcPolyLoop() : base(0) { }

        public static implicit operator IfcPolyLoop(SdaiInstance instance) => new IfcPolyLoop(instance);

        /// <summary>
        /// Create new instace of IfcPolyLoop and returns object of this class to interact with
        /// </summary>
        public static new IfcPolyLoop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPolyLoop"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcCartesianPoint Polygon { get { return (new ListOfIfcCartesianPointSerializer()).FromAttr(m_instance, "Polygon"); } }
        public void put_Polygon(IEnumerable<IfcCartesianPoint> lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "Polygon"); }
        public void put_Polygon_untyped(IEnumerable lst) { (new ListOfIfcCartesianPointSerializer()).ToSdaiAggr(lst, m_instance, "Polygon"); }

        protected override TextValue EntityName() { return "IfcPolyLoop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPolynomialCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPolynomialCurve : IfcCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPolynomialCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPolynomialCurve(SdaiInstance instance) : base(instance) { }
        public IfcPolynomialCurve() : base(0) { }

        public static implicit operator IfcPolynomialCurve(SdaiInstance instance) => new IfcPolynomialCurve(instance);

        /// <summary>
        /// Create new instace of IfcPolynomialCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcPolynomialCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPolynomialCurve"); Debug.Assert(inst != 0); return inst; }

        public IfcPlacement Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcPlacement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcReal CoefficientsX { get { return (new ListOfIfcRealSerializer()).FromAttr(m_instance, "CoefficientsX"); } }
        public void put_CoefficientsX(IEnumerable<double> lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "CoefficientsX"); }
        public void put_CoefficientsX_untyped(IEnumerable lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "CoefficientsX"); }
        public ListOfIfcReal CoefficientsY { get { return (new ListOfIfcRealSerializer()).FromAttr(m_instance, "CoefficientsY"); } }
        public void put_CoefficientsY(IEnumerable<double> lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "CoefficientsY"); }
        public void put_CoefficientsY_untyped(IEnumerable lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "CoefficientsY"); }
        public ListOfIfcReal CoefficientsZ { get { return (new ListOfIfcRealSerializer()).FromAttr(m_instance, "CoefficientsZ"); } }
        public void put_CoefficientsZ(IEnumerable<double> lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "CoefficientsZ"); }
        public void put_CoefficientsZ_untyped(IEnumerable lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "CoefficientsZ"); }

        protected override TextValue EntityName() { return "IfcPolynomialCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPostalAddress
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPostalAddress : IfcAddress
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPostalAddress
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPostalAddress(SdaiInstance instance) : base(instance) { }
        public IfcPostalAddress() : base(0) { }

        public static implicit operator IfcPostalAddress(SdaiInstance instance) => new IfcPostalAddress(instance);

        /// <summary>
        /// Create new instace of IfcPostalAddress and returns object of this class to interact with
        /// </summary>
        public static new IfcPostalAddress Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPostalAddress"); Debug.Assert(inst != 0); return inst; }

        public TextValue InternalLocation
            {
            get { return get_string("InternalLocation", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "InternalLocation", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcLabel AddressLines { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "AddressLines"); } }
        public void put_AddressLines(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "AddressLines"); }
        public void put_AddressLines_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "AddressLines"); }
        public TextValue PostalBox
            {
            get { return get_string("PostalBox", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "PostalBox", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Town
            {
            get { return get_string("Town", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Town", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Region
            {
            get { return get_string("Region", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Region", ifcengine.sdaiSTRING, value); }
            }
        public TextValue PostalCode
            {
            get { return get_string("PostalCode", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "PostalCode", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Country
            {
            get { return get_string("Country", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Country", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcPostalAddress"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedProperties : IfcPropertyAbstraction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedProperties(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedProperties() : base(0) { }

        public static implicit operator IfcPreDefinedProperties(SdaiInstance instance) => new IfcPreDefinedProperties(instance);


        protected override TextValue EntityName() { return "IfcPreDefinedProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPreDefinedTextFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPreDefinedTextFont : IfcPreDefinedItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPreDefinedTextFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPreDefinedTextFont(SdaiInstance instance) : base(instance) { }
        public IfcPreDefinedTextFont() : base(0) { }

        public static implicit operator IfcPreDefinedTextFont(SdaiInstance instance) => new IfcPreDefinedTextFont(instance);


        protected override TextValue EntityName() { return "IfcPreDefinedTextFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPresentationLayerAssignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPresentationLayerAssignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPresentationLayerAssignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPresentationLayerAssignment(SdaiInstance instance) : base(instance) { }
        public IfcPresentationLayerAssignment() : base(0) { }

        public static implicit operator IfcPresentationLayerAssignment(SdaiInstance instance) => new IfcPresentationLayerAssignment(instance);

        /// <summary>
        /// Create new instace of IfcPresentationLayerAssignment and returns object of this class to interact with
        /// </summary>
        public static new IfcPresentationLayerAssignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPresentationLayerAssignment"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcLayeredItem AssignedItems { get { return (new SetOfIfcLayeredItemSerializer()).FromAttr(m_instance, "AssignedItems"); } }
        public void put_AssignedItems(IEnumerable<IfcLayeredItem> lst) { (new SetOfIfcLayeredItemSerializer()).ToSdaiAggr(lst, m_instance, "AssignedItems"); }
        public void put_AssignedItems_untyped(IEnumerable lst) { (new SetOfIfcLayeredItemSerializer()).ToSdaiAggr(lst, m_instance, "AssignedItems"); }
        public TextValue Identifier
            {
            get { return get_string("Identifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identifier", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcPresentationLayerAssignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPresentationLayerWithStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPresentationLayerWithStyle : IfcPresentationLayerAssignment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPresentationLayerWithStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPresentationLayerWithStyle(SdaiInstance instance) : base(instance) { }
        public IfcPresentationLayerWithStyle() : base(0) { }

        public static implicit operator IfcPresentationLayerWithStyle(SdaiInstance instance) => new IfcPresentationLayerWithStyle(instance);

        /// <summary>
        /// Create new instace of IfcPresentationLayerWithStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcPresentationLayerWithStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPresentationLayerWithStyle"); Debug.Assert(inst != 0); return inst; }

        public LOGICAL_VALUE? LayerOn 
            { 
            get { var str = get_string("LayerOn", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "LayerOn", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? LayerFrozen 
            { 
            get { var str = get_string("LayerFrozen", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "LayerFrozen", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public LOGICAL_VALUE? LayerBlocked 
            { 
            get { var str = get_string("LayerBlocked", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "LayerBlocked", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcPresentationStyle LayerStyles { get { return (new SetOfIfcPresentationStyleSerializer()).FromAttr(m_instance, "LayerStyles"); } }
        public void put_LayerStyles(IEnumerable<IfcPresentationStyle> lst) { (new SetOfIfcPresentationStyleSerializer()).ToSdaiAggr(lst, m_instance, "LayerStyles"); }
        public void put_LayerStyles_untyped(IEnumerable lst) { (new SetOfIfcPresentationStyleSerializer()).ToSdaiAggr(lst, m_instance, "LayerStyles"); }

        protected override TextValue EntityName() { return "IfcPresentationLayerWithStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProcedure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProcedure : IfcProcess
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProcedure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProcedure(SdaiInstance instance) : base(instance) { }
        public IfcProcedure() : base(0) { }

        public static implicit operator IfcProcedure(SdaiInstance instance) => new IfcProcedure(instance);

        /// <summary>
        /// Create new instace of IfcProcedure and returns object of this class to interact with
        /// </summary>
        public static new IfcProcedure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProcedure"); Debug.Assert(inst != 0); return inst; }

        public IfcProcedureTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProcedureTypeEnum_); return EnumValue<IfcProcedureTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProcedureTypeEnum>.FromValue(value.Value, EnumNames.IfcProcedureTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcProcedure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProcedureType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProcedureType : IfcTypeProcess
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProcedureType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProcedureType(SdaiInstance instance) : base(instance) { }
        public IfcProcedureType() : base(0) { }

        public static implicit operator IfcProcedureType(SdaiInstance instance) => new IfcProcedureType(instance);

        /// <summary>
        /// Create new instace of IfcProcedureType and returns object of this class to interact with
        /// </summary>
        public static new IfcProcedureType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProcedureType"); Debug.Assert(inst != 0); return inst; }

        public IfcProcedureTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProcedureTypeEnum_); return EnumValue<IfcProcedureTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProcedureTypeEnum>.FromValue(value.Value, EnumNames.IfcProcedureTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcProcedureType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProductDefinitionShape
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProductDefinitionShape : IfcProductRepresentation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProductDefinitionShape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProductDefinitionShape(SdaiInstance instance) : base(instance) { }
        public IfcProductDefinitionShape() : base(0) { }

        public static implicit operator IfcProductDefinitionShape(SdaiInstance instance) => new IfcProductDefinitionShape(instance);

        /// <summary>
        /// Create new instace of IfcProductDefinitionShape and returns object of this class to interact with
        /// </summary>
        public static new IfcProductDefinitionShape Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProductDefinitionShape"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProduct ShapeOfProduct { get { return (new SetOfIfcProductSerializer()).FromAttr(m_instance, "ShapeOfProduct"); } }
        public SetOfIfcShapeAspect HasShapeAspects { get { return (new SetOfIfcShapeAspectSerializer()).FromAttr(m_instance, "HasShapeAspects"); } }

        protected override TextValue EntityName() { return "IfcProductDefinitionShape"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProfileProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProfileProperties : IfcExtendedProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProfileProperties(SdaiInstance instance) : base(instance) { }
        public IfcProfileProperties() : base(0) { }

        public static implicit operator IfcProfileProperties(SdaiInstance instance) => new IfcProfileProperties(instance);

        /// <summary>
        /// Create new instace of IfcProfileProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcProfileProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProfileProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcProfileDef ProfileDefinition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ProfileDefinition", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ProfileDefinition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcProfileProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProject
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProject : IfcContext
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProject
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProject(SdaiInstance instance) : base(instance) { }
        public IfcProject() : base(0) { }

        public static implicit operator IfcProject(SdaiInstance instance) => new IfcProject(instance);

        /// <summary>
        /// Create new instace of IfcProject and returns object of this class to interact with
        /// </summary>
        public static new IfcProject Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProject"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcProject"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProjectedCRS
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProjectedCRS : IfcCoordinateReferenceSystem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProjectedCRS
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProjectedCRS(SdaiInstance instance) : base(instance) { }
        public IfcProjectedCRS() : base(0) { }

        public static implicit operator IfcProjectedCRS(SdaiInstance instance) => new IfcProjectedCRS(instance);

        /// <summary>
        /// Create new instace of IfcProjectedCRS and returns object of this class to interact with
        /// </summary>
        public static new IfcProjectedCRS Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProjectedCRS"); Debug.Assert(inst != 0); return inst; }

        public TextValue VerticalDatum
            {
            get { return get_string("VerticalDatum", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "VerticalDatum", ifcengine.sdaiSTRING, value); }
            }
        public TextValue MapProjection
            {
            get { return get_string("MapProjection", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "MapProjection", ifcengine.sdaiSTRING, value); }
            }
        public TextValue MapZone
            {
            get { return get_string("MapZone", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "MapZone", ifcengine.sdaiSTRING, value); }
            }
        public IfcNamedUnit MapUnit 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MapUnit", ifcengine.sdaiINSTANCE, out inst); return new IfcNamedUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MapUnit", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcProjectedCRS"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProjectionElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProjectionElement : IfcFeatureElementAddition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProjectionElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProjectionElement(SdaiInstance instance) : base(instance) { }
        public IfcProjectionElement() : base(0) { }

        public static implicit operator IfcProjectionElement(SdaiInstance instance) => new IfcProjectionElement(instance);

        /// <summary>
        /// Create new instace of IfcProjectionElement and returns object of this class to interact with
        /// </summary>
        public static new IfcProjectionElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProjectionElement"); Debug.Assert(inst != 0); return inst; }

        public IfcProjectionElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProjectionElementTypeEnum_); return EnumValue<IfcProjectionElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProjectionElementTypeEnum>.FromValue(value.Value, EnumNames.IfcProjectionElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcProjectionElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProjectLibrary
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProjectLibrary : IfcContext
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProjectLibrary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProjectLibrary(SdaiInstance instance) : base(instance) { }
        public IfcProjectLibrary() : base(0) { }

        public static implicit operator IfcProjectLibrary(SdaiInstance instance) => new IfcProjectLibrary(instance);

        /// <summary>
        /// Create new instace of IfcProjectLibrary and returns object of this class to interact with
        /// </summary>
        public static new IfcProjectLibrary Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProjectLibrary"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcProjectLibrary"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProjectOrder
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProjectOrder : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProjectOrder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProjectOrder(SdaiInstance instance) : base(instance) { }
        public IfcProjectOrder() : base(0) { }

        public static implicit operator IfcProjectOrder(SdaiInstance instance) => new IfcProjectOrder(instance);

        /// <summary>
        /// Create new instace of IfcProjectOrder and returns object of this class to interact with
        /// </summary>
        public static new IfcProjectOrder Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProjectOrder"); Debug.Assert(inst != 0); return inst; }

        public IfcProjectOrderTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProjectOrderTypeEnum_); return EnumValue<IfcProjectOrderTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProjectOrderTypeEnum>.FromValue(value.Value, EnumNames.IfcProjectOrderTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue Status
            {
            get { return get_string("Status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Status", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LongDescription
            {
            get { return get_string("LongDescription", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongDescription", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcProjectOrder"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSimpleProperty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSimpleProperty : IfcProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSimpleProperty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSimpleProperty(SdaiInstance instance) : base(instance) { }
        public IfcSimpleProperty() : base(0) { }

        public static implicit operator IfcSimpleProperty(SdaiInstance instance) => new IfcSimpleProperty(instance);


        protected override TextValue EntityName() { return "IfcSimpleProperty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyBoundedValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyBoundedValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyBoundedValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyBoundedValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertyBoundedValue() : base(0) { }

        public static implicit operator IfcPropertyBoundedValue(SdaiInstance instance) => new IfcPropertyBoundedValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertyBoundedValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyBoundedValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyBoundedValue"); Debug.Assert(inst != 0); return inst; }


        public IfcValue UpperBoundValue
            {
            get { return new IfcValue(m_instance, "UpperBoundValue", 0); }
            }

        public IfcValue LowerBoundValue
            {
            get { return new IfcValue(m_instance, "LowerBoundValue", 0); }
            }

        public IfcUnit Unit
            {
            get { return new IfcUnit(m_instance, "Unit", 0); }
            }

        public IfcValue SetPointValue
            {
            get { return new IfcValue(m_instance, "SetPointValue", 0); }
            }

        protected override TextValue EntityName() { return "IfcPropertyBoundedValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyDependencyRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyDependencyRelationship : IfcResourceLevelRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyDependencyRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyDependencyRelationship(SdaiInstance instance) : base(instance) { }
        public IfcPropertyDependencyRelationship() : base(0) { }

        public static implicit operator IfcPropertyDependencyRelationship(SdaiInstance instance) => new IfcPropertyDependencyRelationship(instance);

        /// <summary>
        /// Create new instace of IfcPropertyDependencyRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyDependencyRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyDependencyRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcProperty DependingProperty 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DependingProperty", ifcengine.sdaiINSTANCE, out inst); return new IfcProperty(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DependingProperty", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcProperty DependantProperty 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DependantProperty", ifcengine.sdaiINSTANCE, out inst); return new IfcProperty(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DependantProperty", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue Expression
            {
            get { return get_string("Expression", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Expression", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcPropertyDependencyRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyEnumeratedValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyEnumeratedValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyEnumeratedValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyEnumeratedValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertyEnumeratedValue() : base(0) { }

        public static implicit operator IfcPropertyEnumeratedValue(SdaiInstance instance) => new IfcPropertyEnumeratedValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertyEnumeratedValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyEnumeratedValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyEnumeratedValue"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcValue EnumerationValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "EnumerationValues"); } }
        public void put_EnumerationValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "EnumerationValues"); }
        public void put_EnumerationValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "EnumerationValues"); }
        public IfcPropertyEnumeration EnumerationReference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EnumerationReference", ifcengine.sdaiINSTANCE, out inst); return new IfcPropertyEnumeration(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EnumerationReference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcPropertyEnumeratedValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyEnumeration
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyEnumeration : IfcPropertyAbstraction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyEnumeration
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyEnumeration(SdaiInstance instance) : base(instance) { }
        public IfcPropertyEnumeration() : base(0) { }

        public static implicit operator IfcPropertyEnumeration(SdaiInstance instance) => new IfcPropertyEnumeration(instance);

        /// <summary>
        /// Create new instace of IfcPropertyEnumeration and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyEnumeration Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyEnumeration"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcValue EnumerationValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "EnumerationValues"); } }
        public void put_EnumerationValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "EnumerationValues"); }
        public void put_EnumerationValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "EnumerationValues"); }

        public IfcUnit Unit
            {
            get { return new IfcUnit(m_instance, "Unit", 0); }
            }

        protected override TextValue EntityName() { return "IfcPropertyEnumeration"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyListValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyListValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyListValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyListValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertyListValue() : base(0) { }

        public static implicit operator IfcPropertyListValue(SdaiInstance instance) => new IfcPropertyListValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertyListValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyListValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyListValue"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcValue ListValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "ListValues"); } }
        public void put_ListValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }
        public void put_ListValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }

        public IfcUnit Unit
            {
            get { return new IfcUnit(m_instance, "Unit", 0); }
            }

        protected override TextValue EntityName() { return "IfcPropertyListValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyReferenceValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyReferenceValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyReferenceValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyReferenceValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertyReferenceValue() : base(0) { }

        public static implicit operator IfcPropertyReferenceValue(SdaiInstance instance) => new IfcPropertyReferenceValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertyReferenceValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyReferenceValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyReferenceValue"); Debug.Assert(inst != 0); return inst; }

        public TextValue UsageName
            {
            get { return get_string("UsageName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UsageName", ifcengine.sdaiSTRING, value); }
            }

        public IfcObjectReferenceSelect PropertyReference
            {
            get { return new IfcObjectReferenceSelect(m_instance, "PropertyReference", 0); }
            }

        protected override TextValue EntityName() { return "IfcPropertyReferenceValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertySet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertySet : IfcPropertySetDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertySet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertySet(SdaiInstance instance) : base(instance) { }
        public IfcPropertySet() : base(0) { }

        public static implicit operator IfcPropertySet(SdaiInstance instance) => new IfcPropertySet(instance);

        /// <summary>
        /// Create new instace of IfcPropertySet and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertySet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertySet"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProperty HasProperties { get { return (new SetOfIfcPropertySerializer()).FromAttr(m_instance, "HasProperties"); } }
        public void put_HasProperties(IEnumerable<IfcProperty> lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "HasProperties"); }
        public void put_HasProperties_untyped(IEnumerable lst) { (new SetOfIfcPropertySerializer()).ToSdaiAggr(lst, m_instance, "HasProperties"); }

        protected override TextValue EntityName() { return "IfcPropertySet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertySetTemplate
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertySetTemplate : IfcPropertyTemplateDefinition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertySetTemplate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertySetTemplate(SdaiInstance instance) : base(instance) { }
        public IfcPropertySetTemplate() : base(0) { }

        public static implicit operator IfcPropertySetTemplate(SdaiInstance instance) => new IfcPropertySetTemplate(instance);

        /// <summary>
        /// Create new instace of IfcPropertySetTemplate and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertySetTemplate Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertySetTemplate"); Debug.Assert(inst != 0); return inst; }

        public IfcPropertySetTemplateTypeEnum? TemplateType 
            { 
            get { var str = get_string("TemplateType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPropertySetTemplateTypeEnum_); return EnumValue<IfcPropertySetTemplateTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPropertySetTemplateTypeEnum>.FromValue(value.Value, EnumNames.IfcPropertySetTemplateTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "TemplateType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue ApplicableEntity
            {
            get { return get_string("ApplicableEntity", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ApplicableEntity", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcPropertyTemplate HasPropertyTemplates { get { return (new SetOfIfcPropertyTemplateSerializer()).FromAttr(m_instance, "HasPropertyTemplates"); } }
        public void put_HasPropertyTemplates(IEnumerable<IfcPropertyTemplate> lst) { (new SetOfIfcPropertyTemplateSerializer()).ToSdaiAggr(lst, m_instance, "HasPropertyTemplates"); }
        public void put_HasPropertyTemplates_untyped(IEnumerable lst) { (new SetOfIfcPropertyTemplateSerializer()).ToSdaiAggr(lst, m_instance, "HasPropertyTemplates"); }
        public SetOfIfcRelDefinesByTemplate Defines { get { return (new SetOfIfcRelDefinesByTemplateSerializer()).FromAttr(m_instance, "Defines"); } }

        protected override TextValue EntityName() { return "IfcPropertySetTemplate"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertySingleValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertySingleValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertySingleValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertySingleValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertySingleValue() : base(0) { }

        public static implicit operator IfcPropertySingleValue(SdaiInstance instance) => new IfcPropertySingleValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertySingleValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertySingleValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertySingleValue"); Debug.Assert(inst != 0); return inst; }


        public IfcValue NominalValue
            {
            get { return new IfcValue(m_instance, "NominalValue", 0); }
            }

        public IfcUnit Unit
            {
            get { return new IfcUnit(m_instance, "Unit", 0); }
            }

        protected override TextValue EntityName() { return "IfcPropertySingleValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPropertyTableValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPropertyTableValue : IfcSimpleProperty
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPropertyTableValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPropertyTableValue(SdaiInstance instance) : base(instance) { }
        public IfcPropertyTableValue() : base(0) { }

        public static implicit operator IfcPropertyTableValue(SdaiInstance instance) => new IfcPropertyTableValue(instance);

        /// <summary>
        /// Create new instace of IfcPropertyTableValue and returns object of this class to interact with
        /// </summary>
        public static new IfcPropertyTableValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPropertyTableValue"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcValue DefiningValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "DefiningValues"); } }
        public void put_DefiningValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "DefiningValues"); }
        public void put_DefiningValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "DefiningValues"); }
        public ListOfIfcValue DefinedValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "DefinedValues"); } }
        public void put_DefinedValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "DefinedValues"); }
        public void put_DefinedValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "DefinedValues"); }
        public TextValue Expression
            {
            get { return get_string("Expression", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Expression", ifcengine.sdaiSTRING, value); }
            }

        public IfcUnit DefiningUnit
            {
            get { return new IfcUnit(m_instance, "DefiningUnit", 0); }
            }

        public IfcUnit DefinedUnit
            {
            get { return new IfcUnit(m_instance, "DefinedUnit", 0); }
            }
        public IfcCurveInterpolationEnum? CurveInterpolation 
            { 
            get { var str = get_string("CurveInterpolation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcCurveInterpolationEnum_); return EnumValue<IfcCurveInterpolationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcCurveInterpolationEnum>.FromValue(value.Value, EnumNames.IfcCurveInterpolationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "CurveInterpolation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPropertyTableValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProtectiveDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProtectiveDevice : IfcFlowController
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProtectiveDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProtectiveDevice(SdaiInstance instance) : base(instance) { }
        public IfcProtectiveDevice() : base(0) { }

        public static implicit operator IfcProtectiveDevice(SdaiInstance instance) => new IfcProtectiveDevice(instance);

        /// <summary>
        /// Create new instace of IfcProtectiveDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcProtectiveDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProtectiveDevice"); Debug.Assert(inst != 0); return inst; }

        public IfcProtectiveDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProtectiveDeviceTypeEnum_); return EnumValue<IfcProtectiveDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProtectiveDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcProtectiveDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcProtectiveDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProtectiveDeviceTrippingUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProtectiveDeviceTrippingUnit : IfcDistributionControlElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProtectiveDeviceTrippingUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProtectiveDeviceTrippingUnit(SdaiInstance instance) : base(instance) { }
        public IfcProtectiveDeviceTrippingUnit() : base(0) { }

        public static implicit operator IfcProtectiveDeviceTrippingUnit(SdaiInstance instance) => new IfcProtectiveDeviceTrippingUnit(instance);

        /// <summary>
        /// Create new instace of IfcProtectiveDeviceTrippingUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcProtectiveDeviceTrippingUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProtectiveDeviceTrippingUnit"); Debug.Assert(inst != 0); return inst; }

        public IfcProtectiveDeviceTrippingUnitTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProtectiveDeviceTrippingUnitTypeEnum_); return EnumValue<IfcProtectiveDeviceTrippingUnitTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProtectiveDeviceTrippingUnitTypeEnum>.FromValue(value.Value, EnumNames.IfcProtectiveDeviceTrippingUnitTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcProtectiveDeviceTrippingUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProtectiveDeviceTrippingUnitType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProtectiveDeviceTrippingUnitType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProtectiveDeviceTrippingUnitType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProtectiveDeviceTrippingUnitType(SdaiInstance instance) : base(instance) { }
        public IfcProtectiveDeviceTrippingUnitType() : base(0) { }

        public static implicit operator IfcProtectiveDeviceTrippingUnitType(SdaiInstance instance) => new IfcProtectiveDeviceTrippingUnitType(instance);

        /// <summary>
        /// Create new instace of IfcProtectiveDeviceTrippingUnitType and returns object of this class to interact with
        /// </summary>
        public static new IfcProtectiveDeviceTrippingUnitType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProtectiveDeviceTrippingUnitType"); Debug.Assert(inst != 0); return inst; }

        public IfcProtectiveDeviceTrippingUnitTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProtectiveDeviceTrippingUnitTypeEnum_); return EnumValue<IfcProtectiveDeviceTrippingUnitTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProtectiveDeviceTrippingUnitTypeEnum>.FromValue(value.Value, EnumNames.IfcProtectiveDeviceTrippingUnitTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcProtectiveDeviceTrippingUnitType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcProtectiveDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcProtectiveDeviceType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcProtectiveDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcProtectiveDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcProtectiveDeviceType() : base(0) { }

        public static implicit operator IfcProtectiveDeviceType(SdaiInstance instance) => new IfcProtectiveDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcProtectiveDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcProtectiveDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcProtectiveDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcProtectiveDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProtectiveDeviceTypeEnum_); return EnumValue<IfcProtectiveDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProtectiveDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcProtectiveDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcProtectiveDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPump
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPump : IfcFlowMovingDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPump
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPump(SdaiInstance instance) : base(instance) { }
        public IfcPump() : base(0) { }

        public static implicit operator IfcPump(SdaiInstance instance) => new IfcPump(instance);

        /// <summary>
        /// Create new instace of IfcPump and returns object of this class to interact with
        /// </summary>
        public static new IfcPump Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPump"); Debug.Assert(inst != 0); return inst; }

        public IfcPumpTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPumpTypeEnum_); return EnumValue<IfcPumpTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPumpTypeEnum>.FromValue(value.Value, EnumNames.IfcPumpTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPump"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcPumpType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcPumpType : IfcFlowMovingDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcPumpType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcPumpType(SdaiInstance instance) : base(instance) { }
        public IfcPumpType() : base(0) { }

        public static implicit operator IfcPumpType(SdaiInstance instance) => new IfcPumpType(instance);

        /// <summary>
        /// Create new instace of IfcPumpType and returns object of this class to interact with
        /// </summary>
        public static new IfcPumpType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcPumpType"); Debug.Assert(inst != 0); return inst; }

        public IfcPumpTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPumpTypeEnum_); return EnumValue<IfcPumpTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPumpTypeEnum>.FromValue(value.Value, EnumNames.IfcPumpTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcPumpType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityArea
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityArea : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityArea
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityArea(SdaiInstance instance) : base(instance) { }
        public IfcQuantityArea() : base(0) { }

        public static implicit operator IfcQuantityArea(SdaiInstance instance) => new IfcQuantityArea(instance);

        /// <summary>
        /// Create new instace of IfcQuantityArea and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityArea Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityArea"); Debug.Assert(inst != 0); return inst; }

        public double? AreaValue
            {
            get { return get_double("AreaValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AreaValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue Formula
            {
            get { return get_string("Formula", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Formula", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcQuantityArea"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityCount
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityCount : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityCount
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityCount(SdaiInstance instance) : base(instance) { }
        public IfcQuantityCount() : base(0) { }

        public static implicit operator IfcQuantityCount(SdaiInstance instance) => new IfcQuantityCount(instance);

        /// <summary>
        /// Create new instace of IfcQuantityCount and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityCount Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityCount"); Debug.Assert(inst != 0); return inst; }

        public IntValue? CountValue
            {
            get { return get_IntValue("CountValue", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CountValue", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public TextValue Formula
            {
            get { return get_string("Formula", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Formula", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcQuantityCount"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityLength
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityLength : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityLength
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityLength(SdaiInstance instance) : base(instance) { }
        public IfcQuantityLength() : base(0) { }

        public static implicit operator IfcQuantityLength(SdaiInstance instance) => new IfcQuantityLength(instance);

        /// <summary>
        /// Create new instace of IfcQuantityLength and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityLength Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityLength"); Debug.Assert(inst != 0); return inst; }

        public double? LengthValue
            {
            get { return get_double("LengthValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LengthValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue Formula
            {
            get { return get_string("Formula", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Formula", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcQuantityLength"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityNumber
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityNumber : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityNumber
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityNumber(SdaiInstance instance) : base(instance) { }
        public IfcQuantityNumber() : base(0) { }

        public static implicit operator IfcQuantityNumber(SdaiInstance instance) => new IfcQuantityNumber(instance);

        /// <summary>
        /// Create new instace of IfcQuantityNumber and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityNumber Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityNumber"); Debug.Assert(inst != 0); return inst; }

        public double? NumberValue
            {
            get { return get_double("NumberValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NumberValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue Formula
            {
            get { return get_string("Formula", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Formula", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcQuantityNumber"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityTime
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityTime : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityTime(SdaiInstance instance) : base(instance) { }
        public IfcQuantityTime() : base(0) { }

        public static implicit operator IfcQuantityTime(SdaiInstance instance) => new IfcQuantityTime(instance);

        /// <summary>
        /// Create new instace of IfcQuantityTime and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityTime Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityTime"); Debug.Assert(inst != 0); return inst; }

        public double? TimeValue
            {
            get { return get_double("TimeValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TimeValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue Formula
            {
            get { return get_string("Formula", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Formula", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcQuantityTime"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityVolume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityVolume : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityVolume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityVolume(SdaiInstance instance) : base(instance) { }
        public IfcQuantityVolume() : base(0) { }

        public static implicit operator IfcQuantityVolume(SdaiInstance instance) => new IfcQuantityVolume(instance);

        /// <summary>
        /// Create new instace of IfcQuantityVolume and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityVolume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityVolume"); Debug.Assert(inst != 0); return inst; }

        public double? VolumeValue
            {
            get { return get_double("VolumeValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "VolumeValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue Formula
            {
            get { return get_string("Formula", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Formula", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcQuantityVolume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcQuantityWeight
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcQuantityWeight : IfcPhysicalSimpleQuantity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcQuantityWeight
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcQuantityWeight(SdaiInstance instance) : base(instance) { }
        public IfcQuantityWeight() : base(0) { }

        public static implicit operator IfcQuantityWeight(SdaiInstance instance) => new IfcQuantityWeight(instance);

        /// <summary>
        /// Create new instace of IfcQuantityWeight and returns object of this class to interact with
        /// </summary>
        public static new IfcQuantityWeight Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcQuantityWeight"); Debug.Assert(inst != 0); return inst; }

        public double? WeightValue
            {
            get { return get_double("WeightValue", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WeightValue", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue Formula
            {
            get { return get_string("Formula", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Formula", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcQuantityWeight"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRail
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRail : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRail
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRail(SdaiInstance instance) : base(instance) { }
        public IfcRail() : base(0) { }

        public static implicit operator IfcRail(SdaiInstance instance) => new IfcRail(instance);

        /// <summary>
        /// Create new instace of IfcRail and returns object of this class to interact with
        /// </summary>
        public static new IfcRail Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRail"); Debug.Assert(inst != 0); return inst; }

        public IfcRailTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRailTypeEnum_); return EnumValue<IfcRailTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRailTypeEnum>.FromValue(value.Value, EnumNames.IfcRailTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRail"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRailing
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRailing : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRailing
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRailing(SdaiInstance instance) : base(instance) { }
        public IfcRailing() : base(0) { }

        public static implicit operator IfcRailing(SdaiInstance instance) => new IfcRailing(instance);

        /// <summary>
        /// Create new instace of IfcRailing and returns object of this class to interact with
        /// </summary>
        public static new IfcRailing Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRailing"); Debug.Assert(inst != 0); return inst; }

        public IfcRailingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRailingTypeEnum_); return EnumValue<IfcRailingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRailingTypeEnum>.FromValue(value.Value, EnumNames.IfcRailingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRailing"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRailingType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRailingType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRailingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRailingType(SdaiInstance instance) : base(instance) { }
        public IfcRailingType() : base(0) { }

        public static implicit operator IfcRailingType(SdaiInstance instance) => new IfcRailingType(instance);

        /// <summary>
        /// Create new instace of IfcRailingType and returns object of this class to interact with
        /// </summary>
        public static new IfcRailingType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRailingType"); Debug.Assert(inst != 0); return inst; }

        public IfcRailingTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRailingTypeEnum_); return EnumValue<IfcRailingTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRailingTypeEnum>.FromValue(value.Value, EnumNames.IfcRailingTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRailingType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRailType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRailType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRailType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRailType(SdaiInstance instance) : base(instance) { }
        public IfcRailType() : base(0) { }

        public static implicit operator IfcRailType(SdaiInstance instance) => new IfcRailType(instance);

        /// <summary>
        /// Create new instace of IfcRailType and returns object of this class to interact with
        /// </summary>
        public static new IfcRailType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRailType"); Debug.Assert(inst != 0); return inst; }

        public IfcRailTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRailTypeEnum_); return EnumValue<IfcRailTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRailTypeEnum>.FromValue(value.Value, EnumNames.IfcRailTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRailType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRailway
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRailway : IfcFacility
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRailway
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRailway(SdaiInstance instance) : base(instance) { }
        public IfcRailway() : base(0) { }

        public static implicit operator IfcRailway(SdaiInstance instance) => new IfcRailway(instance);

        /// <summary>
        /// Create new instace of IfcRailway and returns object of this class to interact with
        /// </summary>
        public static new IfcRailway Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRailway"); Debug.Assert(inst != 0); return inst; }

        public IfcRailwayTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRailwayTypeEnum_); return EnumValue<IfcRailwayTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRailwayTypeEnum>.FromValue(value.Value, EnumNames.IfcRailwayTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRailway"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRailwayPart
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRailwayPart : IfcFacilityPart
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRailwayPart
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRailwayPart(SdaiInstance instance) : base(instance) { }
        public IfcRailwayPart() : base(0) { }

        public static implicit operator IfcRailwayPart(SdaiInstance instance) => new IfcRailwayPart(instance);

        /// <summary>
        /// Create new instace of IfcRailwayPart and returns object of this class to interact with
        /// </summary>
        public static new IfcRailwayPart Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRailwayPart"); Debug.Assert(inst != 0); return inst; }

        public IfcRailwayPartTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRailwayPartTypeEnum_); return EnumValue<IfcRailwayPartTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRailwayPartTypeEnum>.FromValue(value.Value, EnumNames.IfcRailwayPartTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRailwayPart"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRamp
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRamp : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRamp
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRamp(SdaiInstance instance) : base(instance) { }
        public IfcRamp() : base(0) { }

        public static implicit operator IfcRamp(SdaiInstance instance) => new IfcRamp(instance);

        /// <summary>
        /// Create new instace of IfcRamp and returns object of this class to interact with
        /// </summary>
        public static new IfcRamp Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRamp"); Debug.Assert(inst != 0); return inst; }

        public IfcRampTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRampTypeEnum_); return EnumValue<IfcRampTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRampTypeEnum>.FromValue(value.Value, EnumNames.IfcRampTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRamp"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRampFlight
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRampFlight : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRampFlight
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRampFlight(SdaiInstance instance) : base(instance) { }
        public IfcRampFlight() : base(0) { }

        public static implicit operator IfcRampFlight(SdaiInstance instance) => new IfcRampFlight(instance);

        /// <summary>
        /// Create new instace of IfcRampFlight and returns object of this class to interact with
        /// </summary>
        public static new IfcRampFlight Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRampFlight"); Debug.Assert(inst != 0); return inst; }

        public IfcRampFlightTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRampFlightTypeEnum_); return EnumValue<IfcRampFlightTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRampFlightTypeEnum>.FromValue(value.Value, EnumNames.IfcRampFlightTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRampFlight"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRampFlightType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRampFlightType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRampFlightType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRampFlightType(SdaiInstance instance) : base(instance) { }
        public IfcRampFlightType() : base(0) { }

        public static implicit operator IfcRampFlightType(SdaiInstance instance) => new IfcRampFlightType(instance);

        /// <summary>
        /// Create new instace of IfcRampFlightType and returns object of this class to interact with
        /// </summary>
        public static new IfcRampFlightType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRampFlightType"); Debug.Assert(inst != 0); return inst; }

        public IfcRampFlightTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRampFlightTypeEnum_); return EnumValue<IfcRampFlightTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRampFlightTypeEnum>.FromValue(value.Value, EnumNames.IfcRampFlightTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRampFlightType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRampType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRampType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRampType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRampType(SdaiInstance instance) : base(instance) { }
        public IfcRampType() : base(0) { }

        public static implicit operator IfcRampType(SdaiInstance instance) => new IfcRampType(instance);

        /// <summary>
        /// Create new instace of IfcRampType and returns object of this class to interact with
        /// </summary>
        public static new IfcRampType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRampType"); Debug.Assert(inst != 0); return inst; }

        public IfcRampTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRampTypeEnum_); return EnumValue<IfcRampTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRampTypeEnum>.FromValue(value.Value, EnumNames.IfcRampTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRampType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRationalBSplineCurveWithKnots
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRationalBSplineCurveWithKnots : IfcBSplineCurveWithKnots
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRationalBSplineCurveWithKnots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRationalBSplineCurveWithKnots(SdaiInstance instance) : base(instance) { }
        public IfcRationalBSplineCurveWithKnots() : base(0) { }

        public static implicit operator IfcRationalBSplineCurveWithKnots(SdaiInstance instance) => new IfcRationalBSplineCurveWithKnots(instance);

        /// <summary>
        /// Create new instace of IfcRationalBSplineCurveWithKnots and returns object of this class to interact with
        /// </summary>
        public static new IfcRationalBSplineCurveWithKnots Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRationalBSplineCurveWithKnots"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcReal WeightsData { get { return (new ListOfIfcRealSerializer()).FromAttr(m_instance, "WeightsData"); } }
        public void put_WeightsData(IEnumerable<double> lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "WeightsData"); }
        public void put_WeightsData_untyped(IEnumerable lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "WeightsData"); }

        protected override TextValue EntityName() { return "IfcRationalBSplineCurveWithKnots"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRationalBSplineSurfaceWithKnots
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRationalBSplineSurfaceWithKnots : IfcBSplineSurfaceWithKnots
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRationalBSplineSurfaceWithKnots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRationalBSplineSurfaceWithKnots(SdaiInstance instance) : base(instance) { }
        public IfcRationalBSplineSurfaceWithKnots() : base(0) { }

        public static implicit operator IfcRationalBSplineSurfaceWithKnots(SdaiInstance instance) => new IfcRationalBSplineSurfaceWithKnots(instance);

        /// <summary>
        /// Create new instace of IfcRationalBSplineSurfaceWithKnots and returns object of this class to interact with
        /// </summary>
        public static new IfcRationalBSplineSurfaceWithKnots Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRationalBSplineSurfaceWithKnots"); Debug.Assert(inst != 0); return inst; }

        public ListOfListOfIfcReal WeightsData { get { return (new ListOfListOfIfcRealSerializer()).FromAttr(m_instance, "WeightsData"); } }
        public void put_WeightsData(IEnumerable<ListOfIfcReal> lst) { (new ListOfListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "WeightsData"); }
        public void put_WeightsData_untyped(IEnumerable lst) { (new ListOfListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "WeightsData"); }

        protected override TextValue EntityName() { return "IfcRationalBSplineSurfaceWithKnots"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRectangleProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRectangleProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRectangleProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRectangleProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcRectangleProfileDef() : base(0) { }

        public static implicit operator IfcRectangleProfileDef(SdaiInstance instance) => new IfcRectangleProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcRectangleProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcRectangleProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRectangleProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? XDim
            {
            get { return get_double("XDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "XDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? YDim
            {
            get { return get_double("YDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRectangleProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRectangleHollowProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRectangleHollowProfileDef : IfcRectangleProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRectangleHollowProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRectangleHollowProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcRectangleHollowProfileDef() : base(0) { }

        public static implicit operator IfcRectangleHollowProfileDef(SdaiInstance instance) => new IfcRectangleHollowProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcRectangleHollowProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcRectangleHollowProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRectangleHollowProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? WallThickness
            {
            get { return get_double("WallThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WallThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? InnerFilletRadius
            {
            get { return get_double("InnerFilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InnerFilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OuterFilletRadius
            {
            get { return get_double("OuterFilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OuterFilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRectangleHollowProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRectangularPyramid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRectangularPyramid : IfcCsgPrimitive3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRectangularPyramid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRectangularPyramid(SdaiInstance instance) : base(instance) { }
        public IfcRectangularPyramid() : base(0) { }

        public static implicit operator IfcRectangularPyramid(SdaiInstance instance) => new IfcRectangularPyramid(instance);

        /// <summary>
        /// Create new instace of IfcRectangularPyramid and returns object of this class to interact with
        /// </summary>
        public static new IfcRectangularPyramid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRectangularPyramid"); Debug.Assert(inst != 0); return inst; }

        public double? XLength
            {
            get { return get_double("XLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "XLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? YLength
            {
            get { return get_double("YLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Height
            {
            get { return get_double("Height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRectangularPyramid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRectangularTrimmedSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRectangularTrimmedSurface : IfcBoundedSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRectangularTrimmedSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRectangularTrimmedSurface(SdaiInstance instance) : base(instance) { }
        public IfcRectangularTrimmedSurface() : base(0) { }

        public static implicit operator IfcRectangularTrimmedSurface(SdaiInstance instance) => new IfcRectangularTrimmedSurface(instance);

        /// <summary>
        /// Create new instace of IfcRectangularTrimmedSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcRectangularTrimmedSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRectangularTrimmedSurface"); Debug.Assert(inst != 0); return inst; }

        public IfcSurface BasisSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisSurface", ifcengine.sdaiINSTANCE, i); }
            }
        public double? U1
            {
            get { return get_double("U1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "U1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? V1
            {
            get { return get_double("V1", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "V1", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? U2
            {
            get { return get_double("U2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "U2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? V2
            {
            get { return get_double("V2", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "V2", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public bool? Usense
            {
            get { return get_bool("Usense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Usense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public bool? Vsense
            {
            get { return get_bool("Vsense", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Vsense", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRectangularTrimmedSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRecurrencePattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRecurrencePattern : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRecurrencePattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRecurrencePattern(SdaiInstance instance) : base(instance) { }
        public IfcRecurrencePattern() : base(0) { }

        public static implicit operator IfcRecurrencePattern(SdaiInstance instance) => new IfcRecurrencePattern(instance);

        /// <summary>
        /// Create new instace of IfcRecurrencePattern and returns object of this class to interact with
        /// </summary>
        public static new IfcRecurrencePattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRecurrencePattern"); Debug.Assert(inst != 0); return inst; }

        public IfcRecurrenceTypeEnum? RecurrenceType 
            { 
            get { var str = get_string("RecurrenceType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRecurrenceTypeEnum_); return EnumValue<IfcRecurrenceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRecurrenceTypeEnum>.FromValue(value.Value, EnumNames.IfcRecurrenceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "RecurrenceType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcDayInMonthNumber DayComponent { get { return (new SetOfIfcDayInMonthNumberSerializer()).FromAttr(m_instance, "DayComponent"); } }
        public void put_DayComponent(IEnumerable<IntValue> lst) { (new SetOfIfcDayInMonthNumberSerializer()).ToSdaiAggr(lst, m_instance, "DayComponent"); }
        public void put_DayComponent_untyped(IEnumerable lst) { (new SetOfIfcDayInMonthNumberSerializer()).ToSdaiAggr(lst, m_instance, "DayComponent"); }
        public SetOfIfcDayInWeekNumber WeekdayComponent { get { return (new SetOfIfcDayInWeekNumberSerializer()).FromAttr(m_instance, "WeekdayComponent"); } }
        public void put_WeekdayComponent(IEnumerable<IntValue> lst) { (new SetOfIfcDayInWeekNumberSerializer()).ToSdaiAggr(lst, m_instance, "WeekdayComponent"); }
        public void put_WeekdayComponent_untyped(IEnumerable lst) { (new SetOfIfcDayInWeekNumberSerializer()).ToSdaiAggr(lst, m_instance, "WeekdayComponent"); }
        public SetOfIfcMonthInYearNumber MonthComponent { get { return (new SetOfIfcMonthInYearNumberSerializer()).FromAttr(m_instance, "MonthComponent"); } }
        public void put_MonthComponent(IEnumerable<IntValue> lst) { (new SetOfIfcMonthInYearNumberSerializer()).ToSdaiAggr(lst, m_instance, "MonthComponent"); }
        public void put_MonthComponent_untyped(IEnumerable lst) { (new SetOfIfcMonthInYearNumberSerializer()).ToSdaiAggr(lst, m_instance, "MonthComponent"); }
        public IntValue? Position
            {
            get { return get_IntValue("Position", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Interval
            {
            get { return get_IntValue("Interval", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Interval", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Occurrences
            {
            get { return get_IntValue("Occurrences", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Occurrences", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public ListOfIfcTimePeriod TimePeriods { get { return (new ListOfIfcTimePeriodSerializer()).FromAttr(m_instance, "TimePeriods"); } }
        public void put_TimePeriods(IEnumerable<IfcTimePeriod> lst) { (new ListOfIfcTimePeriodSerializer()).ToSdaiAggr(lst, m_instance, "TimePeriods"); }
        public void put_TimePeriods_untyped(IEnumerable lst) { (new ListOfIfcTimePeriodSerializer()).ToSdaiAggr(lst, m_instance, "TimePeriods"); }

        protected override TextValue EntityName() { return "IfcRecurrencePattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReference : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReference(SdaiInstance instance) : base(instance) { }
        public IfcReference() : base(0) { }

        public static implicit operator IfcReference(SdaiInstance instance) => new IfcReference(instance);

        /// <summary>
        /// Create new instace of IfcReference and returns object of this class to interact with
        /// </summary>
        public static new IfcReference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReference"); Debug.Assert(inst != 0); return inst; }

        public TextValue TypeIdentifier
            {
            get { return get_string("TypeIdentifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TypeIdentifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue AttributeIdentifier
            {
            get { return get_string("AttributeIdentifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "AttributeIdentifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue InstanceName
            {
            get { return get_string("InstanceName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "InstanceName", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcInteger ListPositions { get { return (new ListOfIfcIntegerSerializer()).FromAttr(m_instance, "ListPositions"); } }
        public void put_ListPositions(IEnumerable<IntValue> lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "ListPositions"); }
        public void put_ListPositions_untyped(IEnumerable lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "ListPositions"); }
        public IfcReference InnerReference 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "InnerReference", ifcengine.sdaiINSTANCE, out inst); return new IfcReference(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "InnerReference", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcReference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReferent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReferent : IfcPositioningElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReferent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReferent(SdaiInstance instance) : base(instance) { }
        public IfcReferent() : base(0) { }

        public static implicit operator IfcReferent(SdaiInstance instance) => new IfcReferent(instance);

        /// <summary>
        /// Create new instace of IfcReferent and returns object of this class to interact with
        /// </summary>
        public static new IfcReferent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReferent"); Debug.Assert(inst != 0); return inst; }

        public IfcReferentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReferentTypeEnum_); return EnumValue<IfcReferentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReferentTypeEnum>.FromValue(value.Value, EnumNames.IfcReferentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcReferent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRegularTimeSeries
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRegularTimeSeries : IfcTimeSeries
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRegularTimeSeries
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRegularTimeSeries(SdaiInstance instance) : base(instance) { }
        public IfcRegularTimeSeries() : base(0) { }

        public static implicit operator IfcRegularTimeSeries(SdaiInstance instance) => new IfcRegularTimeSeries(instance);

        /// <summary>
        /// Create new instace of IfcRegularTimeSeries and returns object of this class to interact with
        /// </summary>
        public static new IfcRegularTimeSeries Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRegularTimeSeries"); Debug.Assert(inst != 0); return inst; }

        public double? TimeStep
            {
            get { return get_double("TimeStep", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TimeStep", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public ListOfIfcTimeSeriesValue Values { get { return (new ListOfIfcTimeSeriesValueSerializer()).FromAttr(m_instance, "Values"); } }
        public void put_Values(IEnumerable<IfcTimeSeriesValue> lst) { (new ListOfIfcTimeSeriesValueSerializer()).ToSdaiAggr(lst, m_instance, "Values"); }
        public void put_Values_untyped(IEnumerable lst) { (new ListOfIfcTimeSeriesValueSerializer()).ToSdaiAggr(lst, m_instance, "Values"); }

        protected override TextValue EntityName() { return "IfcRegularTimeSeries"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcedSoil
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcedSoil : IfcEarthworksElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcedSoil
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcedSoil(SdaiInstance instance) : base(instance) { }
        public IfcReinforcedSoil() : base(0) { }

        public static implicit operator IfcReinforcedSoil(SdaiInstance instance) => new IfcReinforcedSoil(instance);

        /// <summary>
        /// Create new instace of IfcReinforcedSoil and returns object of this class to interact with
        /// </summary>
        public static new IfcReinforcedSoil Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReinforcedSoil"); Debug.Assert(inst != 0); return inst; }

        public IfcReinforcedSoilTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcedSoilTypeEnum_); return EnumValue<IfcReinforcedSoilTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcedSoilTypeEnum>.FromValue(value.Value, EnumNames.IfcReinforcedSoilTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcReinforcedSoil"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcementBarProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcementBarProperties : IfcPreDefinedProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcementBarProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcementBarProperties(SdaiInstance instance) : base(instance) { }
        public IfcReinforcementBarProperties() : base(0) { }

        public static implicit operator IfcReinforcementBarProperties(SdaiInstance instance) => new IfcReinforcementBarProperties(instance);

        /// <summary>
        /// Create new instace of IfcReinforcementBarProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcReinforcementBarProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReinforcementBarProperties"); Debug.Assert(inst != 0); return inst; }

        public double? TotalCrossSectionArea
            {
            get { return get_double("TotalCrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TotalCrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue SteelGrade
            {
            get { return get_string("SteelGrade", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "SteelGrade", ifcengine.sdaiSTRING, value); }
            }
        public IfcReinforcingBarSurfaceEnum? BarSurface 
            { 
            get { var str = get_string("BarSurface", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingBarSurfaceEnum_); return EnumValue<IfcReinforcingBarSurfaceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingBarSurfaceEnum>.FromValue(value.Value, EnumNames.IfcReinforcingBarSurfaceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "BarSurface", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? EffectiveDepth
            {
            get { return get_double("EffectiveDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EffectiveDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? NominalBarDiameter
            {
            get { return get_double("NominalBarDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalBarDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IntValue? BarCount
            {
            get { return get_IntValue("BarCount", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BarCount", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcReinforcementBarProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcementDefinitionProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcementDefinitionProperties : IfcPreDefinedPropertySet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcementDefinitionProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcementDefinitionProperties(SdaiInstance instance) : base(instance) { }
        public IfcReinforcementDefinitionProperties() : base(0) { }

        public static implicit operator IfcReinforcementDefinitionProperties(SdaiInstance instance) => new IfcReinforcementDefinitionProperties(instance);

        /// <summary>
        /// Create new instace of IfcReinforcementDefinitionProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcReinforcementDefinitionProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReinforcementDefinitionProperties"); Debug.Assert(inst != 0); return inst; }

        public TextValue DefinitionType
            {
            get { return get_string("DefinitionType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "DefinitionType", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcSectionReinforcementProperties ReinforcementSectionDefinitions { get { return (new ListOfIfcSectionReinforcementPropertiesSerializer()).FromAttr(m_instance, "ReinforcementSectionDefinitions"); } }
        public void put_ReinforcementSectionDefinitions(IEnumerable<IfcSectionReinforcementProperties> lst) { (new ListOfIfcSectionReinforcementPropertiesSerializer()).ToSdaiAggr(lst, m_instance, "ReinforcementSectionDefinitions"); }
        public void put_ReinforcementSectionDefinitions_untyped(IEnumerable lst) { (new ListOfIfcSectionReinforcementPropertiesSerializer()).ToSdaiAggr(lst, m_instance, "ReinforcementSectionDefinitions"); }

        protected override TextValue EntityName() { return "IfcReinforcementDefinitionProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcingElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcingElement : IfcElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcingElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcingElement(SdaiInstance instance) : base(instance) { }
        public IfcReinforcingElement() : base(0) { }

        public static implicit operator IfcReinforcingElement(SdaiInstance instance) => new IfcReinforcingElement(instance);

        public TextValue SteelGrade
            {
            get { return get_string("SteelGrade", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "SteelGrade", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcReinforcingElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcingBar
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcingBar : IfcReinforcingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcingBar
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcingBar(SdaiInstance instance) : base(instance) { }
        public IfcReinforcingBar() : base(0) { }

        public static implicit operator IfcReinforcingBar(SdaiInstance instance) => new IfcReinforcingBar(instance);

        /// <summary>
        /// Create new instace of IfcReinforcingBar and returns object of this class to interact with
        /// </summary>
        public static new IfcReinforcingBar Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReinforcingBar"); Debug.Assert(inst != 0); return inst; }

        public double? NominalDiameter
            {
            get { return get_double("NominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CrossSectionArea
            {
            get { return get_double("CrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BarLength
            {
            get { return get_double("BarLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BarLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcReinforcingBarTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingBarTypeEnum_); return EnumValue<IfcReinforcingBarTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingBarTypeEnum>.FromValue(value.Value, EnumNames.IfcReinforcingBarTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcReinforcingBarSurfaceEnum? BarSurface 
            { 
            get { var str = get_string("BarSurface", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingBarSurfaceEnum_); return EnumValue<IfcReinforcingBarSurfaceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingBarSurfaceEnum>.FromValue(value.Value, EnumNames.IfcReinforcingBarSurfaceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "BarSurface", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcReinforcingBar"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcingElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcingElementType : IfcElementComponentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcingElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcingElementType(SdaiInstance instance) : base(instance) { }
        public IfcReinforcingElementType() : base(0) { }

        public static implicit operator IfcReinforcingElementType(SdaiInstance instance) => new IfcReinforcingElementType(instance);


        protected override TextValue EntityName() { return "IfcReinforcingElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcingBarType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcingBarType : IfcReinforcingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcingBarType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcingBarType(SdaiInstance instance) : base(instance) { }
        public IfcReinforcingBarType() : base(0) { }

        public static implicit operator IfcReinforcingBarType(SdaiInstance instance) => new IfcReinforcingBarType(instance);

        /// <summary>
        /// Create new instace of IfcReinforcingBarType and returns object of this class to interact with
        /// </summary>
        public static new IfcReinforcingBarType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReinforcingBarType"); Debug.Assert(inst != 0); return inst; }

        public IfcReinforcingBarTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingBarTypeEnum_); return EnumValue<IfcReinforcingBarTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingBarTypeEnum>.FromValue(value.Value, EnumNames.IfcReinforcingBarTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? NominalDiameter
            {
            get { return get_double("NominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CrossSectionArea
            {
            get { return get_double("CrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BarLength
            {
            get { return get_double("BarLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BarLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcReinforcingBarSurfaceEnum? BarSurface 
            { 
            get { var str = get_string("BarSurface", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingBarSurfaceEnum_); return EnumValue<IfcReinforcingBarSurfaceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingBarSurfaceEnum>.FromValue(value.Value, EnumNames.IfcReinforcingBarSurfaceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "BarSurface", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue BendingShapeCode
            {
            get { return get_string("BendingShapeCode", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "BendingShapeCode", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcBendingParameterSelect BendingParameters { get { return (new ListOfIfcBendingParameterSelectSerializer()).FromAttr(m_instance, "BendingParameters"); } }
        public void put_BendingParameters(IEnumerable<IfcBendingParameterSelect> lst) { (new ListOfIfcBendingParameterSelectSerializer()).ToSdaiAggr(lst, m_instance, "BendingParameters"); }
        public void put_BendingParameters_untyped(IEnumerable lst) { (new ListOfIfcBendingParameterSelectSerializer()).ToSdaiAggr(lst, m_instance, "BendingParameters"); }

        protected override TextValue EntityName() { return "IfcReinforcingBarType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcingMesh
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcingMesh : IfcReinforcingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcingMesh
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcingMesh(SdaiInstance instance) : base(instance) { }
        public IfcReinforcingMesh() : base(0) { }

        public static implicit operator IfcReinforcingMesh(SdaiInstance instance) => new IfcReinforcingMesh(instance);

        /// <summary>
        /// Create new instace of IfcReinforcingMesh and returns object of this class to interact with
        /// </summary>
        public static new IfcReinforcingMesh Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReinforcingMesh"); Debug.Assert(inst != 0); return inst; }

        public double? MeshLength
            {
            get { return get_double("MeshLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MeshLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MeshWidth
            {
            get { return get_double("MeshWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MeshWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LongitudinalBarNominalDiameter
            {
            get { return get_double("LongitudinalBarNominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalBarNominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransverseBarNominalDiameter
            {
            get { return get_double("TransverseBarNominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransverseBarNominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LongitudinalBarCrossSectionArea
            {
            get { return get_double("LongitudinalBarCrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalBarCrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransverseBarCrossSectionArea
            {
            get { return get_double("TransverseBarCrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransverseBarCrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LongitudinalBarSpacing
            {
            get { return get_double("LongitudinalBarSpacing", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalBarSpacing", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransverseBarSpacing
            {
            get { return get_double("TransverseBarSpacing", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransverseBarSpacing", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcReinforcingMeshTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingMeshTypeEnum_); return EnumValue<IfcReinforcingMeshTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingMeshTypeEnum>.FromValue(value.Value, EnumNames.IfcReinforcingMeshTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcReinforcingMesh"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReinforcingMeshType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReinforcingMeshType : IfcReinforcingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReinforcingMeshType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReinforcingMeshType(SdaiInstance instance) : base(instance) { }
        public IfcReinforcingMeshType() : base(0) { }

        public static implicit operator IfcReinforcingMeshType(SdaiInstance instance) => new IfcReinforcingMeshType(instance);

        /// <summary>
        /// Create new instace of IfcReinforcingMeshType and returns object of this class to interact with
        /// </summary>
        public static new IfcReinforcingMeshType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReinforcingMeshType"); Debug.Assert(inst != 0); return inst; }

        public IfcReinforcingMeshTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingMeshTypeEnum_); return EnumValue<IfcReinforcingMeshTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingMeshTypeEnum>.FromValue(value.Value, EnumNames.IfcReinforcingMeshTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? MeshLength
            {
            get { return get_double("MeshLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MeshLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MeshWidth
            {
            get { return get_double("MeshWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MeshWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LongitudinalBarNominalDiameter
            {
            get { return get_double("LongitudinalBarNominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalBarNominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransverseBarNominalDiameter
            {
            get { return get_double("TransverseBarNominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransverseBarNominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LongitudinalBarCrossSectionArea
            {
            get { return get_double("LongitudinalBarCrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalBarCrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransverseBarCrossSectionArea
            {
            get { return get_double("TransverseBarCrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransverseBarCrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LongitudinalBarSpacing
            {
            get { return get_double("LongitudinalBarSpacing", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalBarSpacing", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransverseBarSpacing
            {
            get { return get_double("TransverseBarSpacing", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransverseBarSpacing", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue BendingShapeCode
            {
            get { return get_string("BendingShapeCode", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "BendingShapeCode", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcBendingParameterSelect BendingParameters { get { return (new ListOfIfcBendingParameterSelectSerializer()).FromAttr(m_instance, "BendingParameters"); } }
        public void put_BendingParameters(IEnumerable<IfcBendingParameterSelect> lst) { (new ListOfIfcBendingParameterSelectSerializer()).ToSdaiAggr(lst, m_instance, "BendingParameters"); }
        public void put_BendingParameters_untyped(IEnumerable lst) { (new ListOfIfcBendingParameterSelectSerializer()).ToSdaiAggr(lst, m_instance, "BendingParameters"); }

        protected override TextValue EntityName() { return "IfcReinforcingMeshType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelationship : IfcRoot
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelationship(SdaiInstance instance) : base(instance) { }
        public IfcRelationship() : base(0) { }

        public static implicit operator IfcRelationship(SdaiInstance instance) => new IfcRelationship(instance);


        protected override TextValue EntityName() { return "IfcRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelDecomposes
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelDecomposes : IfcRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelDecomposes
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelDecomposes(SdaiInstance instance) : base(instance) { }
        public IfcRelDecomposes() : base(0) { }

        public static implicit operator IfcRelDecomposes(SdaiInstance instance) => new IfcRelDecomposes(instance);


        protected override TextValue EntityName() { return "IfcRelDecomposes"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAdheresToElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAdheresToElement : IfcRelDecomposes
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAdheresToElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAdheresToElement(SdaiInstance instance) : base(instance) { }
        public IfcRelAdheresToElement() : base(0) { }

        public static implicit operator IfcRelAdheresToElement(SdaiInstance instance) => new IfcRelAdheresToElement(instance);

        /// <summary>
        /// Create new instace of IfcRelAdheresToElement and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAdheresToElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAdheresToElement"); Debug.Assert(inst != 0); return inst; }

        public IfcElement RelatingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcSurfaceFeature RelatedSurfaceFeatures { get { return (new SetOfIfcSurfaceFeatureSerializer()).FromAttr(m_instance, "RelatedSurfaceFeatures"); } }
        public void put_RelatedSurfaceFeatures(IEnumerable<IfcSurfaceFeature> lst) { (new SetOfIfcSurfaceFeatureSerializer()).ToSdaiAggr(lst, m_instance, "RelatedSurfaceFeatures"); }
        public void put_RelatedSurfaceFeatures_untyped(IEnumerable lst) { (new SetOfIfcSurfaceFeatureSerializer()).ToSdaiAggr(lst, m_instance, "RelatedSurfaceFeatures"); }

        protected override TextValue EntityName() { return "IfcRelAdheresToElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAggregates
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAggregates : IfcRelDecomposes
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAggregates
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAggregates(SdaiInstance instance) : base(instance) { }
        public IfcRelAggregates() : base(0) { }

        public static implicit operator IfcRelAggregates(SdaiInstance instance) => new IfcRelAggregates(instance);

        /// <summary>
        /// Create new instace of IfcRelAggregates and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAggregates Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAggregates"); Debug.Assert(inst != 0); return inst; }

        public IfcObjectDefinition RelatingObject 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingObject", ifcengine.sdaiINSTANCE, out inst); return new IfcObjectDefinition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingObject", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcObjectDefinition RelatedObjects { get { return (new SetOfIfcObjectDefinitionSerializer()).FromAttr(m_instance, "RelatedObjects"); } }
        public void put_RelatedObjects(IEnumerable<IfcObjectDefinition> lst) { (new SetOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public void put_RelatedObjects_untyped(IEnumerable lst) { (new SetOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }

        protected override TextValue EntityName() { return "IfcRelAggregates"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssigns
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssigns : IfcRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssigns
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssigns(SdaiInstance instance) : base(instance) { }
        public IfcRelAssigns() : base(0) { }

        public static implicit operator IfcRelAssigns(SdaiInstance instance) => new IfcRelAssigns(instance);

        public SetOfIfcObjectDefinition RelatedObjects { get { return (new SetOfIfcObjectDefinitionSerializer()).FromAttr(m_instance, "RelatedObjects"); } }
        public void put_RelatedObjects(IEnumerable<IfcObjectDefinition> lst) { (new SetOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public void put_RelatedObjects_untyped(IEnumerable lst) { (new SetOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public bool? RelatedObjectsType
            {
            get { return get_bool("RelatedObjectsType", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedObjectsType", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRelAssigns"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToActor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToActor : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToActor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToActor(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToActor() : base(0) { }

        public static implicit operator IfcRelAssignsToActor(SdaiInstance instance) => new IfcRelAssignsToActor(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToActor and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToActor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToActor"); Debug.Assert(inst != 0); return inst; }

        public IfcActor RelatingActor 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingActor", ifcengine.sdaiINSTANCE, out inst); return new IfcActor(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingActor", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcActorRole ActingRole 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ActingRole", ifcengine.sdaiINSTANCE, out inst); return new IfcActorRole(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ActingRole", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelAssignsToActor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToControl
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToControl : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToControl(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToControl() : base(0) { }

        public static implicit operator IfcRelAssignsToControl(SdaiInstance instance) => new IfcRelAssignsToControl(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToControl and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToControl Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToControl"); Debug.Assert(inst != 0); return inst; }

        public IfcControl RelatingControl 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingControl", ifcengine.sdaiINSTANCE, out inst); return new IfcControl(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingControl", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelAssignsToControl"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToGroup
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToGroup : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToGroup(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToGroup() : base(0) { }

        public static implicit operator IfcRelAssignsToGroup(SdaiInstance instance) => new IfcRelAssignsToGroup(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToGroup and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToGroup Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToGroup"); Debug.Assert(inst != 0); return inst; }

        public IfcGroup RelatingGroup 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingGroup", ifcengine.sdaiINSTANCE, out inst); return new IfcGroup(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingGroup", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelAssignsToGroup"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToGroupByFactor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToGroupByFactor : IfcRelAssignsToGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToGroupByFactor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToGroupByFactor(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToGroupByFactor() : base(0) { }

        public static implicit operator IfcRelAssignsToGroupByFactor(SdaiInstance instance) => new IfcRelAssignsToGroupByFactor(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToGroupByFactor and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToGroupByFactor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToGroupByFactor"); Debug.Assert(inst != 0); return inst; }

        public double? Factor
            {
            get { return get_double("Factor", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Factor", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRelAssignsToGroupByFactor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToProcess
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToProcess : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToProcess
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToProcess(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToProcess() : base(0) { }

        public static implicit operator IfcRelAssignsToProcess(SdaiInstance instance) => new IfcRelAssignsToProcess(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToProcess and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToProcess Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToProcess"); Debug.Assert(inst != 0); return inst; }


        public IfcProcessSelect RelatingProcess
            {
            get { return new IfcProcessSelect(m_instance, "RelatingProcess", 0); }
            }
        public IfcMeasureWithUnit QuantityInProcess 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "QuantityInProcess", ifcengine.sdaiINSTANCE, out inst); return new IfcMeasureWithUnit(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "QuantityInProcess", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelAssignsToProcess"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToProduct
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToProduct : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToProduct
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToProduct(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToProduct() : base(0) { }

        public static implicit operator IfcRelAssignsToProduct(SdaiInstance instance) => new IfcRelAssignsToProduct(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToProduct and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToProduct Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToProduct"); Debug.Assert(inst != 0); return inst; }


        public IfcProductSelect RelatingProduct
            {
            get { return new IfcProductSelect(m_instance, "RelatingProduct", 0); }
            }

        protected override TextValue EntityName() { return "IfcRelAssignsToProduct"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssignsToResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssignsToResource : IfcRelAssigns
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssignsToResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssignsToResource(SdaiInstance instance) : base(instance) { }
        public IfcRelAssignsToResource() : base(0) { }

        public static implicit operator IfcRelAssignsToResource(SdaiInstance instance) => new IfcRelAssignsToResource(instance);

        /// <summary>
        /// Create new instace of IfcRelAssignsToResource and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssignsToResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssignsToResource"); Debug.Assert(inst != 0); return inst; }


        public IfcResourceSelect RelatingResource
            {
            get { return new IfcResourceSelect(m_instance, "RelatingResource", 0); }
            }

        protected override TextValue EntityName() { return "IfcRelAssignsToResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociates
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociates : IfcRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociates
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociates(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociates() : base(0) { }

        public static implicit operator IfcRelAssociates(SdaiInstance instance) => new IfcRelAssociates(instance);

        public SetOfIfcDefinitionSelect RelatedObjects { get { return (new SetOfIfcDefinitionSelectSerializer()).FromAttr(m_instance, "RelatedObjects"); } }
        public void put_RelatedObjects(IEnumerable<IfcDefinitionSelect> lst) { (new SetOfIfcDefinitionSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public void put_RelatedObjects_untyped(IEnumerable lst) { (new SetOfIfcDefinitionSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }

        protected override TextValue EntityName() { return "IfcRelAssociates"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesApproval
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesApproval : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesApproval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesApproval(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesApproval() : base(0) { }

        public static implicit operator IfcRelAssociatesApproval(SdaiInstance instance) => new IfcRelAssociatesApproval(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesApproval and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesApproval Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesApproval"); Debug.Assert(inst != 0); return inst; }

        public IfcApproval RelatingApproval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingApproval", ifcengine.sdaiINSTANCE, out inst); return new IfcApproval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingApproval", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelAssociatesApproval"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesClassification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesClassification : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesClassification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesClassification(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesClassification() : base(0) { }

        public static implicit operator IfcRelAssociatesClassification(SdaiInstance instance) => new IfcRelAssociatesClassification(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesClassification and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesClassification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesClassification"); Debug.Assert(inst != 0); return inst; }


        public IfcClassificationSelect RelatingClassification
            {
            get { return new IfcClassificationSelect(m_instance, "RelatingClassification", 0); }
            }

        protected override TextValue EntityName() { return "IfcRelAssociatesClassification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesConstraint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesConstraint : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesConstraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesConstraint(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesConstraint() : base(0) { }

        public static implicit operator IfcRelAssociatesConstraint(SdaiInstance instance) => new IfcRelAssociatesConstraint(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesConstraint and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesConstraint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesConstraint"); Debug.Assert(inst != 0); return inst; }

        public TextValue Intent
            {
            get { return get_string("Intent", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Intent", ifcengine.sdaiSTRING, value); }
            }
        public IfcConstraint RelatingConstraint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, out inst); return new IfcConstraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelAssociatesConstraint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesDocument
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesDocument : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesDocument
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesDocument(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesDocument() : base(0) { }

        public static implicit operator IfcRelAssociatesDocument(SdaiInstance instance) => new IfcRelAssociatesDocument(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesDocument and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesDocument Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesDocument"); Debug.Assert(inst != 0); return inst; }


        public IfcDocumentSelect RelatingDocument
            {
            get { return new IfcDocumentSelect(m_instance, "RelatingDocument", 0); }
            }

        protected override TextValue EntityName() { return "IfcRelAssociatesDocument"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesLibrary
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesLibrary : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesLibrary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesLibrary(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesLibrary() : base(0) { }

        public static implicit operator IfcRelAssociatesLibrary(SdaiInstance instance) => new IfcRelAssociatesLibrary(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesLibrary and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesLibrary Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesLibrary"); Debug.Assert(inst != 0); return inst; }


        public IfcLibrarySelect RelatingLibrary
            {
            get { return new IfcLibrarySelect(m_instance, "RelatingLibrary", 0); }
            }

        protected override TextValue EntityName() { return "IfcRelAssociatesLibrary"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesMaterial
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesMaterial : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesMaterial
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesMaterial(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesMaterial() : base(0) { }

        public static implicit operator IfcRelAssociatesMaterial(SdaiInstance instance) => new IfcRelAssociatesMaterial(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesMaterial and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesMaterial Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesMaterial"); Debug.Assert(inst != 0); return inst; }


        public IfcMaterialSelect RelatingMaterial
            {
            get { return new IfcMaterialSelect(m_instance, "RelatingMaterial", 0); }
            }

        protected override TextValue EntityName() { return "IfcRelAssociatesMaterial"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelAssociatesProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelAssociatesProfileDef : IfcRelAssociates
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelAssociatesProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelAssociatesProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcRelAssociatesProfileDef() : base(0) { }

        public static implicit operator IfcRelAssociatesProfileDef(SdaiInstance instance) => new IfcRelAssociatesProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcRelAssociatesProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcRelAssociatesProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelAssociatesProfileDef"); Debug.Assert(inst != 0); return inst; }

        public IfcProfileDef RelatingProfileDef 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingProfileDef", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingProfileDef", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelAssociatesProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnects
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnects : IfcRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnects
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnects(SdaiInstance instance) : base(instance) { }
        public IfcRelConnects() : base(0) { }

        public static implicit operator IfcRelConnects(SdaiInstance instance) => new IfcRelConnects(instance);


        protected override TextValue EntityName() { return "IfcRelConnects"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsElements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsElements : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsElements(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsElements() : base(0) { }

        public static implicit operator IfcRelConnectsElements(SdaiInstance instance) => new IfcRelConnectsElements(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsElements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsElements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsElements"); Debug.Assert(inst != 0); return inst; }

        public IfcConnectionGeometry ConnectionGeometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ConnectionGeometry", ifcengine.sdaiINSTANCE, out inst); return new IfcConnectionGeometry(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ConnectionGeometry", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcElement RelatingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcElement RelatedElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelConnectsElements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsPathElements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsPathElements : IfcRelConnectsElements
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsPathElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsPathElements(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsPathElements() : base(0) { }

        public static implicit operator IfcRelConnectsPathElements(SdaiInstance instance) => new IfcRelConnectsPathElements(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsPathElements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsPathElements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsPathElements"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcInteger RelatingPriorities { get { return (new ListOfIfcIntegerSerializer()).FromAttr(m_instance, "RelatingPriorities"); } }
        public void put_RelatingPriorities(IEnumerable<IntValue> lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "RelatingPriorities"); }
        public void put_RelatingPriorities_untyped(IEnumerable lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "RelatingPriorities"); }
        public ListOfIfcInteger RelatedPriorities { get { return (new ListOfIfcIntegerSerializer()).FromAttr(m_instance, "RelatedPriorities"); } }
        public void put_RelatedPriorities(IEnumerable<IntValue> lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "RelatedPriorities"); }
        public void put_RelatedPriorities_untyped(IEnumerable lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "RelatedPriorities"); }
        public IfcConnectionTypeEnum? RelatedConnectionType 
            { 
            get { var str = get_string("RelatedConnectionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConnectionTypeEnum_); return EnumValue<IfcConnectionTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConnectionTypeEnum>.FromValue(value.Value, EnumNames.IfcConnectionTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "RelatedConnectionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcConnectionTypeEnum? RelatingConnectionType 
            { 
            get { var str = get_string("RelatingConnectionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcConnectionTypeEnum_); return EnumValue<IfcConnectionTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcConnectionTypeEnum>.FromValue(value.Value, EnumNames.IfcConnectionTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "RelatingConnectionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRelConnectsPathElements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsPorts
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsPorts : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsPorts
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsPorts(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsPorts() : base(0) { }

        public static implicit operator IfcRelConnectsPorts(SdaiInstance instance) => new IfcRelConnectsPorts(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsPorts and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsPorts Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsPorts"); Debug.Assert(inst != 0); return inst; }

        public IfcPort RelatingPort 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingPort", ifcengine.sdaiINSTANCE, out inst); return new IfcPort(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingPort", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcPort RelatedPort 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedPort", ifcengine.sdaiINSTANCE, out inst); return new IfcPort(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedPort", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcElement RealizingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RealizingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RealizingElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelConnectsPorts"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsPortToElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsPortToElement : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsPortToElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsPortToElement(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsPortToElement() : base(0) { }

        public static implicit operator IfcRelConnectsPortToElement(SdaiInstance instance) => new IfcRelConnectsPortToElement(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsPortToElement and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsPortToElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsPortToElement"); Debug.Assert(inst != 0); return inst; }

        public IfcPort RelatingPort 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingPort", ifcengine.sdaiINSTANCE, out inst); return new IfcPort(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingPort", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcDistributionElement RelatedElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedElement", ifcengine.sdaiINSTANCE, out inst); return new IfcDistributionElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelConnectsPortToElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsStructuralActivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsStructuralActivity : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsStructuralActivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsStructuralActivity(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsStructuralActivity() : base(0) { }

        public static implicit operator IfcRelConnectsStructuralActivity(SdaiInstance instance) => new IfcRelConnectsStructuralActivity(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsStructuralActivity and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsStructuralActivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsStructuralActivity"); Debug.Assert(inst != 0); return inst; }


        public IfcStructuralActivityAssignmentSelect RelatingElement
            {
            get { return new IfcStructuralActivityAssignmentSelect(m_instance, "RelatingElement", 0); }
            }
        public IfcStructuralActivity RelatedStructuralActivity 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedStructuralActivity", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralActivity(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedStructuralActivity", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelConnectsStructuralActivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsStructuralMember
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsStructuralMember : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsStructuralMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsStructuralMember(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsStructuralMember() : base(0) { }

        public static implicit operator IfcRelConnectsStructuralMember(SdaiInstance instance) => new IfcRelConnectsStructuralMember(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsStructuralMember and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsStructuralMember Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsStructuralMember"); Debug.Assert(inst != 0); return inst; }

        public IfcStructuralMember RelatingStructuralMember 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingStructuralMember", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralMember(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingStructuralMember", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcStructuralConnection RelatedStructuralConnection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedStructuralConnection", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralConnection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedStructuralConnection", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcBoundaryCondition AppliedCondition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AppliedCondition", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundaryCondition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AppliedCondition", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcStructuralConnectionCondition AdditionalConditions 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AdditionalConditions", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralConnectionCondition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AdditionalConditions", ifcengine.sdaiINSTANCE, i); }
            }
        public double? SupportedLength
            {
            get { return get_double("SupportedLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SupportedLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcAxis2Placement3D ConditionCoordinateSystem 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ConditionCoordinateSystem", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ConditionCoordinateSystem", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelConnectsStructuralMember"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsWithEccentricity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsWithEccentricity : IfcRelConnectsStructuralMember
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsWithEccentricity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsWithEccentricity(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsWithEccentricity() : base(0) { }

        public static implicit operator IfcRelConnectsWithEccentricity(SdaiInstance instance) => new IfcRelConnectsWithEccentricity(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsWithEccentricity and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsWithEccentricity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsWithEccentricity"); Debug.Assert(inst != 0); return inst; }

        public IfcConnectionGeometry ConnectionConstraint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ConnectionConstraint", ifcengine.sdaiINSTANCE, out inst); return new IfcConnectionGeometry(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ConnectionConstraint", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelConnectsWithEccentricity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelConnectsWithRealizingElements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelConnectsWithRealizingElements : IfcRelConnectsElements
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelConnectsWithRealizingElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelConnectsWithRealizingElements(SdaiInstance instance) : base(instance) { }
        public IfcRelConnectsWithRealizingElements() : base(0) { }

        public static implicit operator IfcRelConnectsWithRealizingElements(SdaiInstance instance) => new IfcRelConnectsWithRealizingElements(instance);

        /// <summary>
        /// Create new instace of IfcRelConnectsWithRealizingElements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelConnectsWithRealizingElements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelConnectsWithRealizingElements"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcElement RealizingElements { get { return (new SetOfIfcElementSerializer()).FromAttr(m_instance, "RealizingElements"); } }
        public void put_RealizingElements(IEnumerable<IfcElement> lst) { (new SetOfIfcElementSerializer()).ToSdaiAggr(lst, m_instance, "RealizingElements"); }
        public void put_RealizingElements_untyped(IEnumerable lst) { (new SetOfIfcElementSerializer()).ToSdaiAggr(lst, m_instance, "RealizingElements"); }
        public TextValue ConnectionType
            {
            get { return get_string("ConnectionType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ConnectionType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcRelConnectsWithRealizingElements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelContainedInSpatialStructure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelContainedInSpatialStructure : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelContainedInSpatialStructure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelContainedInSpatialStructure(SdaiInstance instance) : base(instance) { }
        public IfcRelContainedInSpatialStructure() : base(0) { }

        public static implicit operator IfcRelContainedInSpatialStructure(SdaiInstance instance) => new IfcRelContainedInSpatialStructure(instance);

        /// <summary>
        /// Create new instace of IfcRelContainedInSpatialStructure and returns object of this class to interact with
        /// </summary>
        public static new IfcRelContainedInSpatialStructure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelContainedInSpatialStructure"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcProduct RelatedElements { get { return (new SetOfIfcProductSerializer()).FromAttr(m_instance, "RelatedElements"); } }
        public void put_RelatedElements(IEnumerable<IfcProduct> lst) { (new SetOfIfcProductSerializer()).ToSdaiAggr(lst, m_instance, "RelatedElements"); }
        public void put_RelatedElements_untyped(IEnumerable lst) { (new SetOfIfcProductSerializer()).ToSdaiAggr(lst, m_instance, "RelatedElements"); }
        public IfcSpatialElement RelatingStructure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingStructure", ifcengine.sdaiINSTANCE, out inst); return new IfcSpatialElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingStructure", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelContainedInSpatialStructure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelCoversBldgElements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelCoversBldgElements : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelCoversBldgElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelCoversBldgElements(SdaiInstance instance) : base(instance) { }
        public IfcRelCoversBldgElements() : base(0) { }

        public static implicit operator IfcRelCoversBldgElements(SdaiInstance instance) => new IfcRelCoversBldgElements(instance);

        /// <summary>
        /// Create new instace of IfcRelCoversBldgElements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelCoversBldgElements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelCoversBldgElements"); Debug.Assert(inst != 0); return inst; }

        public IfcElement RelatingBuildingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingBuildingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingBuildingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcCovering RelatedCoverings { get { return (new SetOfIfcCoveringSerializer()).FromAttr(m_instance, "RelatedCoverings"); } }
        public void put_RelatedCoverings(IEnumerable<IfcCovering> lst) { (new SetOfIfcCoveringSerializer()).ToSdaiAggr(lst, m_instance, "RelatedCoverings"); }
        public void put_RelatedCoverings_untyped(IEnumerable lst) { (new SetOfIfcCoveringSerializer()).ToSdaiAggr(lst, m_instance, "RelatedCoverings"); }

        protected override TextValue EntityName() { return "IfcRelCoversBldgElements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelCoversSpaces
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelCoversSpaces : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelCoversSpaces
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelCoversSpaces(SdaiInstance instance) : base(instance) { }
        public IfcRelCoversSpaces() : base(0) { }

        public static implicit operator IfcRelCoversSpaces(SdaiInstance instance) => new IfcRelCoversSpaces(instance);

        /// <summary>
        /// Create new instace of IfcRelCoversSpaces and returns object of this class to interact with
        /// </summary>
        public static new IfcRelCoversSpaces Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelCoversSpaces"); Debug.Assert(inst != 0); return inst; }

        public IfcSpace RelatingSpace 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingSpace", ifcengine.sdaiINSTANCE, out inst); return new IfcSpace(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingSpace", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcCovering RelatedCoverings { get { return (new SetOfIfcCoveringSerializer()).FromAttr(m_instance, "RelatedCoverings"); } }
        public void put_RelatedCoverings(IEnumerable<IfcCovering> lst) { (new SetOfIfcCoveringSerializer()).ToSdaiAggr(lst, m_instance, "RelatedCoverings"); }
        public void put_RelatedCoverings_untyped(IEnumerable lst) { (new SetOfIfcCoveringSerializer()).ToSdaiAggr(lst, m_instance, "RelatedCoverings"); }

        protected override TextValue EntityName() { return "IfcRelCoversSpaces"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelDeclares
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelDeclares : IfcRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelDeclares
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelDeclares(SdaiInstance instance) : base(instance) { }
        public IfcRelDeclares() : base(0) { }

        public static implicit operator IfcRelDeclares(SdaiInstance instance) => new IfcRelDeclares(instance);

        /// <summary>
        /// Create new instace of IfcRelDeclares and returns object of this class to interact with
        /// </summary>
        public static new IfcRelDeclares Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelDeclares"); Debug.Assert(inst != 0); return inst; }

        public IfcContext RelatingContext 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingContext", ifcengine.sdaiINSTANCE, out inst); return new IfcContext(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingContext", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcDefinitionSelect RelatedDefinitions { get { return (new SetOfIfcDefinitionSelectSerializer()).FromAttr(m_instance, "RelatedDefinitions"); } }
        public void put_RelatedDefinitions(IEnumerable<IfcDefinitionSelect> lst) { (new SetOfIfcDefinitionSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedDefinitions"); }
        public void put_RelatedDefinitions_untyped(IEnumerable lst) { (new SetOfIfcDefinitionSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedDefinitions"); }

        protected override TextValue EntityName() { return "IfcRelDeclares"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelDefines
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelDefines : IfcRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelDefines
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelDefines(SdaiInstance instance) : base(instance) { }
        public IfcRelDefines() : base(0) { }

        public static implicit operator IfcRelDefines(SdaiInstance instance) => new IfcRelDefines(instance);


        protected override TextValue EntityName() { return "IfcRelDefines"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelDefinesByObject
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelDefinesByObject : IfcRelDefines
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelDefinesByObject
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelDefinesByObject(SdaiInstance instance) : base(instance) { }
        public IfcRelDefinesByObject() : base(0) { }

        public static implicit operator IfcRelDefinesByObject(SdaiInstance instance) => new IfcRelDefinesByObject(instance);

        /// <summary>
        /// Create new instace of IfcRelDefinesByObject and returns object of this class to interact with
        /// </summary>
        public static new IfcRelDefinesByObject Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelDefinesByObject"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcObject RelatedObjects { get { return (new SetOfIfcObjectSerializer()).FromAttr(m_instance, "RelatedObjects"); } }
        public void put_RelatedObjects(IEnumerable<IfcObject> lst) { (new SetOfIfcObjectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public void put_RelatedObjects_untyped(IEnumerable lst) { (new SetOfIfcObjectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public IfcObject RelatingObject 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingObject", ifcengine.sdaiINSTANCE, out inst); return new IfcObject(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingObject", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelDefinesByObject"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelDefinesByProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelDefinesByProperties : IfcRelDefines
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelDefinesByProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelDefinesByProperties(SdaiInstance instance) : base(instance) { }
        public IfcRelDefinesByProperties() : base(0) { }

        public static implicit operator IfcRelDefinesByProperties(SdaiInstance instance) => new IfcRelDefinesByProperties(instance);

        /// <summary>
        /// Create new instace of IfcRelDefinesByProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcRelDefinesByProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelDefinesByProperties"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcObjectDefinition RelatedObjects { get { return (new SetOfIfcObjectDefinitionSerializer()).FromAttr(m_instance, "RelatedObjects"); } }
        public void put_RelatedObjects(IEnumerable<IfcObjectDefinition> lst) { (new SetOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public void put_RelatedObjects_untyped(IEnumerable lst) { (new SetOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }

        public IfcPropertySetDefinitionSelect RelatingPropertyDefinition
            {
            get { return new IfcPropertySetDefinitionSelect(m_instance, "RelatingPropertyDefinition", 0); }
            }

        protected override TextValue EntityName() { return "IfcRelDefinesByProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelDefinesByTemplate
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelDefinesByTemplate : IfcRelDefines
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelDefinesByTemplate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelDefinesByTemplate(SdaiInstance instance) : base(instance) { }
        public IfcRelDefinesByTemplate() : base(0) { }

        public static implicit operator IfcRelDefinesByTemplate(SdaiInstance instance) => new IfcRelDefinesByTemplate(instance);

        /// <summary>
        /// Create new instace of IfcRelDefinesByTemplate and returns object of this class to interact with
        /// </summary>
        public static new IfcRelDefinesByTemplate Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelDefinesByTemplate"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcPropertySetDefinition RelatedPropertySets { get { return (new SetOfIfcPropertySetDefinitionSerializer()).FromAttr(m_instance, "RelatedPropertySets"); } }
        public void put_RelatedPropertySets(IEnumerable<IfcPropertySetDefinition> lst) { (new SetOfIfcPropertySetDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedPropertySets"); }
        public void put_RelatedPropertySets_untyped(IEnumerable lst) { (new SetOfIfcPropertySetDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedPropertySets"); }
        public IfcPropertySetTemplate RelatingTemplate 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingTemplate", ifcengine.sdaiINSTANCE, out inst); return new IfcPropertySetTemplate(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingTemplate", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelDefinesByTemplate"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelDefinesByType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelDefinesByType : IfcRelDefines
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelDefinesByType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelDefinesByType(SdaiInstance instance) : base(instance) { }
        public IfcRelDefinesByType() : base(0) { }

        public static implicit operator IfcRelDefinesByType(SdaiInstance instance) => new IfcRelDefinesByType(instance);

        /// <summary>
        /// Create new instace of IfcRelDefinesByType and returns object of this class to interact with
        /// </summary>
        public static new IfcRelDefinesByType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelDefinesByType"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcObject RelatedObjects { get { return (new SetOfIfcObjectSerializer()).FromAttr(m_instance, "RelatedObjects"); } }
        public void put_RelatedObjects(IEnumerable<IfcObject> lst) { (new SetOfIfcObjectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public void put_RelatedObjects_untyped(IEnumerable lst) { (new SetOfIfcObjectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public IfcTypeObject RelatingType 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingType", ifcengine.sdaiINSTANCE, out inst); return new IfcTypeObject(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingType", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelDefinesByType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelFillsElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelFillsElement : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelFillsElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelFillsElement(SdaiInstance instance) : base(instance) { }
        public IfcRelFillsElement() : base(0) { }

        public static implicit operator IfcRelFillsElement(SdaiInstance instance) => new IfcRelFillsElement(instance);

        /// <summary>
        /// Create new instace of IfcRelFillsElement and returns object of this class to interact with
        /// </summary>
        public static new IfcRelFillsElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelFillsElement"); Debug.Assert(inst != 0); return inst; }

        public IfcOpeningElement RelatingOpeningElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingOpeningElement", ifcengine.sdaiINSTANCE, out inst); return new IfcOpeningElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingOpeningElement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcElement RelatedBuildingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedBuildingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedBuildingElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelFillsElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelFlowControlElements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelFlowControlElements : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelFlowControlElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelFlowControlElements(SdaiInstance instance) : base(instance) { }
        public IfcRelFlowControlElements() : base(0) { }

        public static implicit operator IfcRelFlowControlElements(SdaiInstance instance) => new IfcRelFlowControlElements(instance);

        /// <summary>
        /// Create new instace of IfcRelFlowControlElements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelFlowControlElements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelFlowControlElements"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcDistributionControlElement RelatedControlElements { get { return (new SetOfIfcDistributionControlElementSerializer()).FromAttr(m_instance, "RelatedControlElements"); } }
        public void put_RelatedControlElements(IEnumerable<IfcDistributionControlElement> lst) { (new SetOfIfcDistributionControlElementSerializer()).ToSdaiAggr(lst, m_instance, "RelatedControlElements"); }
        public void put_RelatedControlElements_untyped(IEnumerable lst) { (new SetOfIfcDistributionControlElementSerializer()).ToSdaiAggr(lst, m_instance, "RelatedControlElements"); }
        public IfcDistributionFlowElement RelatingFlowElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingFlowElement", ifcengine.sdaiINSTANCE, out inst); return new IfcDistributionFlowElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingFlowElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelFlowControlElements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelInterferesElements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelInterferesElements : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelInterferesElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelInterferesElements(SdaiInstance instance) : base(instance) { }
        public IfcRelInterferesElements() : base(0) { }

        public static implicit operator IfcRelInterferesElements(SdaiInstance instance) => new IfcRelInterferesElements(instance);

        /// <summary>
        /// Create new instace of IfcRelInterferesElements and returns object of this class to interact with
        /// </summary>
        public static new IfcRelInterferesElements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelInterferesElements"); Debug.Assert(inst != 0); return inst; }


        public IfcInterferenceSelect RelatingElement
            {
            get { return new IfcInterferenceSelect(m_instance, "RelatingElement", 0); }
            }

        public IfcInterferenceSelect RelatedElement
            {
            get { return new IfcInterferenceSelect(m_instance, "RelatedElement", 0); }
            }
        public IfcConnectionGeometry InterferenceGeometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "InterferenceGeometry", ifcengine.sdaiINSTANCE, out inst); return new IfcConnectionGeometry(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "InterferenceGeometry", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue InterferenceType
            {
            get { return get_string("InterferenceType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "InterferenceType", ifcengine.sdaiSTRING, value); }
            }
        public LOGICAL_VALUE? ImpliedOrder 
            { 
            get { var str = get_string("ImpliedOrder", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "ImpliedOrder", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcSpatialZone InterferenceSpace 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "InterferenceSpace", ifcengine.sdaiINSTANCE, out inst); return new IfcSpatialZone(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "InterferenceSpace", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelInterferesElements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelNests
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelNests : IfcRelDecomposes
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelNests
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelNests(SdaiInstance instance) : base(instance) { }
        public IfcRelNests() : base(0) { }

        public static implicit operator IfcRelNests(SdaiInstance instance) => new IfcRelNests(instance);

        /// <summary>
        /// Create new instace of IfcRelNests and returns object of this class to interact with
        /// </summary>
        public static new IfcRelNests Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelNests"); Debug.Assert(inst != 0); return inst; }

        public IfcObjectDefinition RelatingObject 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingObject", ifcengine.sdaiINSTANCE, out inst); return new IfcObjectDefinition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingObject", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcObjectDefinition RelatedObjects { get { return (new ListOfIfcObjectDefinitionSerializer()).FromAttr(m_instance, "RelatedObjects"); } }
        public void put_RelatedObjects(IEnumerable<IfcObjectDefinition> lst) { (new ListOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }
        public void put_RelatedObjects_untyped(IEnumerable lst) { (new ListOfIfcObjectDefinitionSerializer()).ToSdaiAggr(lst, m_instance, "RelatedObjects"); }

        protected override TextValue EntityName() { return "IfcRelNests"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelPositions
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelPositions : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelPositions
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelPositions(SdaiInstance instance) : base(instance) { }
        public IfcRelPositions() : base(0) { }

        public static implicit operator IfcRelPositions(SdaiInstance instance) => new IfcRelPositions(instance);

        /// <summary>
        /// Create new instace of IfcRelPositions and returns object of this class to interact with
        /// </summary>
        public static new IfcRelPositions Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelPositions"); Debug.Assert(inst != 0); return inst; }

        public IfcPositioningElement RelatingPositioningElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingPositioningElement", ifcengine.sdaiINSTANCE, out inst); return new IfcPositioningElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingPositioningElement", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcProduct RelatedProducts { get { return (new SetOfIfcProductSerializer()).FromAttr(m_instance, "RelatedProducts"); } }
        public void put_RelatedProducts(IEnumerable<IfcProduct> lst) { (new SetOfIfcProductSerializer()).ToSdaiAggr(lst, m_instance, "RelatedProducts"); }
        public void put_RelatedProducts_untyped(IEnumerable lst) { (new SetOfIfcProductSerializer()).ToSdaiAggr(lst, m_instance, "RelatedProducts"); }

        protected override TextValue EntityName() { return "IfcRelPositions"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelProjectsElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelProjectsElement : IfcRelDecomposes
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelProjectsElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelProjectsElement(SdaiInstance instance) : base(instance) { }
        public IfcRelProjectsElement() : base(0) { }

        public static implicit operator IfcRelProjectsElement(SdaiInstance instance) => new IfcRelProjectsElement(instance);

        /// <summary>
        /// Create new instace of IfcRelProjectsElement and returns object of this class to interact with
        /// </summary>
        public static new IfcRelProjectsElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelProjectsElement"); Debug.Assert(inst != 0); return inst; }

        public IfcElement RelatingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcFeatureElementAddition RelatedFeatureElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedFeatureElement", ifcengine.sdaiINSTANCE, out inst); return new IfcFeatureElementAddition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedFeatureElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelProjectsElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelReferencedInSpatialStructure
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelReferencedInSpatialStructure : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelReferencedInSpatialStructure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelReferencedInSpatialStructure(SdaiInstance instance) : base(instance) { }
        public IfcRelReferencedInSpatialStructure() : base(0) { }

        public static implicit operator IfcRelReferencedInSpatialStructure(SdaiInstance instance) => new IfcRelReferencedInSpatialStructure(instance);

        /// <summary>
        /// Create new instace of IfcRelReferencedInSpatialStructure and returns object of this class to interact with
        /// </summary>
        public static new IfcRelReferencedInSpatialStructure Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelReferencedInSpatialStructure"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcSpatialReferenceSelect RelatedElements { get { return (new SetOfIfcSpatialReferenceSelectSerializer()).FromAttr(m_instance, "RelatedElements"); } }
        public void put_RelatedElements(IEnumerable<IfcSpatialReferenceSelect> lst) { (new SetOfIfcSpatialReferenceSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedElements"); }
        public void put_RelatedElements_untyped(IEnumerable lst) { (new SetOfIfcSpatialReferenceSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedElements"); }
        public IfcSpatialElement RelatingStructure 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingStructure", ifcengine.sdaiINSTANCE, out inst); return new IfcSpatialElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingStructure", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelReferencedInSpatialStructure"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelSequence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelSequence : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelSequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelSequence(SdaiInstance instance) : base(instance) { }
        public IfcRelSequence() : base(0) { }

        public static implicit operator IfcRelSequence(SdaiInstance instance) => new IfcRelSequence(instance);

        /// <summary>
        /// Create new instace of IfcRelSequence and returns object of this class to interact with
        /// </summary>
        public static new IfcRelSequence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelSequence"); Debug.Assert(inst != 0); return inst; }

        public IfcProcess RelatingProcess 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingProcess", ifcengine.sdaiINSTANCE, out inst); return new IfcProcess(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingProcess", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcProcess RelatedProcess 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedProcess", ifcengine.sdaiINSTANCE, out inst); return new IfcProcess(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedProcess", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcLagTime TimeLag 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TimeLag", ifcengine.sdaiINSTANCE, out inst); return new IfcLagTime(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TimeLag", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcSequenceEnum? SequenceType 
            { 
            get { var str = get_string("SequenceType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSequenceEnum_); return EnumValue<IfcSequenceEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSequenceEnum>.FromValue(value.Value, EnumNames.IfcSequenceEnum_); ifcengine.sdaiPutAttrBN(m_instance, "SequenceType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedSequenceType
            {
            get { return get_string("UserDefinedSequenceType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedSequenceType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcRelSequence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelServicesBuildings
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelServicesBuildings : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelServicesBuildings
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelServicesBuildings(SdaiInstance instance) : base(instance) { }
        public IfcRelServicesBuildings() : base(0) { }

        public static implicit operator IfcRelServicesBuildings(SdaiInstance instance) => new IfcRelServicesBuildings(instance);

        /// <summary>
        /// Create new instace of IfcRelServicesBuildings and returns object of this class to interact with
        /// </summary>
        public static new IfcRelServicesBuildings Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelServicesBuildings"); Debug.Assert(inst != 0); return inst; }

        public IfcSystem RelatingSystem 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingSystem", ifcengine.sdaiINSTANCE, out inst); return new IfcSystem(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingSystem", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcSpatialElement RelatedBuildings { get { return (new SetOfIfcSpatialElementSerializer()).FromAttr(m_instance, "RelatedBuildings"); } }
        public void put_RelatedBuildings(IEnumerable<IfcSpatialElement> lst) { (new SetOfIfcSpatialElementSerializer()).ToSdaiAggr(lst, m_instance, "RelatedBuildings"); }
        public void put_RelatedBuildings_untyped(IEnumerable lst) { (new SetOfIfcSpatialElementSerializer()).ToSdaiAggr(lst, m_instance, "RelatedBuildings"); }

        protected override TextValue EntityName() { return "IfcRelServicesBuildings"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelSpaceBoundary
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelSpaceBoundary : IfcRelConnects
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelSpaceBoundary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelSpaceBoundary(SdaiInstance instance) : base(instance) { }
        public IfcRelSpaceBoundary() : base(0) { }

        public static implicit operator IfcRelSpaceBoundary(SdaiInstance instance) => new IfcRelSpaceBoundary(instance);

        /// <summary>
        /// Create new instace of IfcRelSpaceBoundary and returns object of this class to interact with
        /// </summary>
        public static new IfcRelSpaceBoundary Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelSpaceBoundary"); Debug.Assert(inst != 0); return inst; }


        public IfcSpaceBoundarySelect RelatingSpace
            {
            get { return new IfcSpaceBoundarySelect(m_instance, "RelatingSpace", 0); }
            }
        public IfcElement RelatedBuildingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedBuildingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedBuildingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcConnectionGeometry ConnectionGeometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ConnectionGeometry", ifcengine.sdaiINSTANCE, out inst); return new IfcConnectionGeometry(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ConnectionGeometry", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcPhysicalOrVirtualEnum? PhysicalOrVirtualBoundary 
            { 
            get { var str = get_string("PhysicalOrVirtualBoundary", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcPhysicalOrVirtualEnum_); return EnumValue<IfcPhysicalOrVirtualEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcPhysicalOrVirtualEnum>.FromValue(value.Value, EnumNames.IfcPhysicalOrVirtualEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PhysicalOrVirtualBoundary", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcInternalOrExternalEnum? InternalOrExternalBoundary 
            { 
            get { var str = get_string("InternalOrExternalBoundary", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcInternalOrExternalEnum_); return EnumValue<IfcInternalOrExternalEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcInternalOrExternalEnum>.FromValue(value.Value, EnumNames.IfcInternalOrExternalEnum_); ifcengine.sdaiPutAttrBN(m_instance, "InternalOrExternalBoundary", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRelSpaceBoundary"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelSpaceBoundary1stLevel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelSpaceBoundary1stLevel : IfcRelSpaceBoundary
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelSpaceBoundary1stLevel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelSpaceBoundary1stLevel(SdaiInstance instance) : base(instance) { }
        public IfcRelSpaceBoundary1stLevel() : base(0) { }

        public static implicit operator IfcRelSpaceBoundary1stLevel(SdaiInstance instance) => new IfcRelSpaceBoundary1stLevel(instance);

        /// <summary>
        /// Create new instace of IfcRelSpaceBoundary1stLevel and returns object of this class to interact with
        /// </summary>
        public static new IfcRelSpaceBoundary1stLevel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelSpaceBoundary1stLevel"); Debug.Assert(inst != 0); return inst; }

        public IfcRelSpaceBoundary1stLevel ParentBoundary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ParentBoundary", ifcengine.sdaiINSTANCE, out inst); return new IfcRelSpaceBoundary1stLevel(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ParentBoundary", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcRelSpaceBoundary1stLevel InnerBoundaries { get { return (new SetOfIfcRelSpaceBoundary1stLevelSerializer()).FromAttr(m_instance, "InnerBoundaries"); } }

        protected override TextValue EntityName() { return "IfcRelSpaceBoundary1stLevel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelSpaceBoundary2ndLevel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelSpaceBoundary2ndLevel : IfcRelSpaceBoundary1stLevel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelSpaceBoundary2ndLevel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelSpaceBoundary2ndLevel(SdaiInstance instance) : base(instance) { }
        public IfcRelSpaceBoundary2ndLevel() : base(0) { }

        public static implicit operator IfcRelSpaceBoundary2ndLevel(SdaiInstance instance) => new IfcRelSpaceBoundary2ndLevel(instance);

        /// <summary>
        /// Create new instace of IfcRelSpaceBoundary2ndLevel and returns object of this class to interact with
        /// </summary>
        public static new IfcRelSpaceBoundary2ndLevel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelSpaceBoundary2ndLevel"); Debug.Assert(inst != 0); return inst; }

        public IfcRelSpaceBoundary2ndLevel CorrespondingBoundary 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "CorrespondingBoundary", ifcengine.sdaiINSTANCE, out inst); return new IfcRelSpaceBoundary2ndLevel(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "CorrespondingBoundary", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcRelSpaceBoundary2ndLevel Corresponds { get { return (new SetOfIfcRelSpaceBoundary2ndLevelSerializer()).FromAttr(m_instance, "Corresponds"); } }

        protected override TextValue EntityName() { return "IfcRelSpaceBoundary2ndLevel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRelVoidsElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRelVoidsElement : IfcRelDecomposes
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRelVoidsElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRelVoidsElement(SdaiInstance instance) : base(instance) { }
        public IfcRelVoidsElement() : base(0) { }

        public static implicit operator IfcRelVoidsElement(SdaiInstance instance) => new IfcRelVoidsElement(instance);

        /// <summary>
        /// Create new instace of IfcRelVoidsElement and returns object of this class to interact with
        /// </summary>
        public static new IfcRelVoidsElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRelVoidsElement"); Debug.Assert(inst != 0); return inst; }

        public IfcElement RelatingBuildingElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingBuildingElement", ifcengine.sdaiINSTANCE, out inst); return new IfcElement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingBuildingElement", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcFeatureElementSubtraction RelatedOpeningElement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatedOpeningElement", ifcengine.sdaiINSTANCE, out inst); return new IfcFeatureElementSubtraction(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatedOpeningElement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRelVoidsElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcReparametrisedCompositeCurveSegment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcReparametrisedCompositeCurveSegment : IfcCompositeCurveSegment
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcReparametrisedCompositeCurveSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcReparametrisedCompositeCurveSegment(SdaiInstance instance) : base(instance) { }
        public IfcReparametrisedCompositeCurveSegment() : base(0) { }

        public static implicit operator IfcReparametrisedCompositeCurveSegment(SdaiInstance instance) => new IfcReparametrisedCompositeCurveSegment(instance);

        /// <summary>
        /// Create new instace of IfcReparametrisedCompositeCurveSegment and returns object of this class to interact with
        /// </summary>
        public static new IfcReparametrisedCompositeCurveSegment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcReparametrisedCompositeCurveSegment"); Debug.Assert(inst != 0); return inst; }

        public double? ParamLength
            {
            get { return get_double("ParamLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ParamLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcReparametrisedCompositeCurveSegment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRepresentation : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcRepresentation() : base(0) { }

        public static implicit operator IfcRepresentation(SdaiInstance instance) => new IfcRepresentation(instance);

        public IfcRepresentationContext ContextOfItems 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ContextOfItems", ifcengine.sdaiINSTANCE, out inst); return new IfcRepresentationContext(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ContextOfItems", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue RepresentationIdentifier
            {
            get { return get_string("RepresentationIdentifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RepresentationIdentifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue RepresentationType
            {
            get { return get_string("RepresentationType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RepresentationType", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcRepresentationItem Items { get { return (new SetOfIfcRepresentationItemSerializer()).FromAttr(m_instance, "Items"); } }
        public void put_Items(IEnumerable<IfcRepresentationItem> lst) { (new SetOfIfcRepresentationItemSerializer()).ToSdaiAggr(lst, m_instance, "Items"); }
        public void put_Items_untyped(IEnumerable lst) { (new SetOfIfcRepresentationItemSerializer()).ToSdaiAggr(lst, m_instance, "Items"); }
        public SetOfIfcRepresentationMap RepresentationMap { get { return (new SetOfIfcRepresentationMapSerializer()).FromAttr(m_instance, "RepresentationMap"); } }
        public SetOfIfcPresentationLayerAssignment LayerAssignments { get { return (new SetOfIfcPresentationLayerAssignmentSerializer()).FromAttr(m_instance, "LayerAssignments"); } }
        public SetOfIfcProductRepresentation OfProductRepresentation { get { return (new SetOfIfcProductRepresentationSerializer()).FromAttr(m_instance, "OfProductRepresentation"); } }

        protected override TextValue EntityName() { return "IfcRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRepresentationMap
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRepresentationMap : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRepresentationMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRepresentationMap(SdaiInstance instance) : base(instance) { }
        public IfcRepresentationMap() : base(0) { }

        public static implicit operator IfcRepresentationMap(SdaiInstance instance) => new IfcRepresentationMap(instance);

        /// <summary>
        /// Create new instace of IfcRepresentationMap and returns object of this class to interact with
        /// </summary>
        public static new IfcRepresentationMap Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRepresentationMap"); Debug.Assert(inst != 0); return inst; }


        public IfcAxis2Placement MappingOrigin
            {
            get { return new IfcAxis2Placement(m_instance, "MappingOrigin", 0); }
            }
        public IfcRepresentation MappedRepresentation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MappedRepresentation", ifcengine.sdaiINSTANCE, out inst); return new IfcRepresentation(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MappedRepresentation", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcShapeAspect HasShapeAspects { get { return (new SetOfIfcShapeAspectSerializer()).FromAttr(m_instance, "HasShapeAspects"); } }
        public SetOfIfcMappedItem MapUsage { get { return (new SetOfIfcMappedItemSerializer()).FromAttr(m_instance, "MapUsage"); } }

        protected override TextValue EntityName() { return "IfcRepresentationMap"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcResourceApprovalRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcResourceApprovalRelationship : IfcResourceLevelRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcResourceApprovalRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcResourceApprovalRelationship(SdaiInstance instance) : base(instance) { }
        public IfcResourceApprovalRelationship() : base(0) { }

        public static implicit operator IfcResourceApprovalRelationship(SdaiInstance instance) => new IfcResourceApprovalRelationship(instance);

        /// <summary>
        /// Create new instace of IfcResourceApprovalRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcResourceApprovalRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcResourceApprovalRelationship"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcResourceObjectSelect RelatedResourceObjects { get { return (new SetOfIfcResourceObjectSelectSerializer()).FromAttr(m_instance, "RelatedResourceObjects"); } }
        public void put_RelatedResourceObjects(IEnumerable<IfcResourceObjectSelect> lst) { (new SetOfIfcResourceObjectSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedResourceObjects"); }
        public void put_RelatedResourceObjects_untyped(IEnumerable lst) { (new SetOfIfcResourceObjectSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedResourceObjects"); }
        public IfcApproval RelatingApproval 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingApproval", ifcengine.sdaiINSTANCE, out inst); return new IfcApproval(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingApproval", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcResourceApprovalRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcResourceConstraintRelationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcResourceConstraintRelationship : IfcResourceLevelRelationship
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcResourceConstraintRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcResourceConstraintRelationship(SdaiInstance instance) : base(instance) { }
        public IfcResourceConstraintRelationship() : base(0) { }

        public static implicit operator IfcResourceConstraintRelationship(SdaiInstance instance) => new IfcResourceConstraintRelationship(instance);

        /// <summary>
        /// Create new instace of IfcResourceConstraintRelationship and returns object of this class to interact with
        /// </summary>
        public static new IfcResourceConstraintRelationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcResourceConstraintRelationship"); Debug.Assert(inst != 0); return inst; }

        public IfcConstraint RelatingConstraint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, out inst); return new IfcConstraint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RelatingConstraint", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcResourceObjectSelect RelatedResourceObjects { get { return (new SetOfIfcResourceObjectSelectSerializer()).FromAttr(m_instance, "RelatedResourceObjects"); } }
        public void put_RelatedResourceObjects(IEnumerable<IfcResourceObjectSelect> lst) { (new SetOfIfcResourceObjectSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedResourceObjects"); }
        public void put_RelatedResourceObjects_untyped(IEnumerable lst) { (new SetOfIfcResourceObjectSelectSerializer()).ToSdaiAggr(lst, m_instance, "RelatedResourceObjects"); }

        protected override TextValue EntityName() { return "IfcResourceConstraintRelationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcResourceTime
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcResourceTime : IfcSchedulingTime
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcResourceTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcResourceTime(SdaiInstance instance) : base(instance) { }
        public IfcResourceTime() : base(0) { }

        public static implicit operator IfcResourceTime(SdaiInstance instance) => new IfcResourceTime(instance);

        /// <summary>
        /// Create new instace of IfcResourceTime and returns object of this class to interact with
        /// </summary>
        public static new IfcResourceTime Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcResourceTime"); Debug.Assert(inst != 0); return inst; }

        public TextValue ScheduleWork
            {
            get { return get_string("ScheduleWork", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ScheduleWork", ifcengine.sdaiSTRING, value); }
            }
        public double? ScheduleUsage
            {
            get { return get_double("ScheduleUsage", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ScheduleUsage", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue ScheduleStart
            {
            get { return get_string("ScheduleStart", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ScheduleStart", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ScheduleFinish
            {
            get { return get_string("ScheduleFinish", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ScheduleFinish", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ScheduleContour
            {
            get { return get_string("ScheduleContour", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ScheduleContour", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LevelingDelay
            {
            get { return get_string("LevelingDelay", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LevelingDelay", ifcengine.sdaiSTRING, value); }
            }
        public bool? IsOverAllocated
            {
            get { return get_bool("IsOverAllocated", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsOverAllocated", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public TextValue StatusTime
            {
            get { return get_string("StatusTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "StatusTime", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ActualWork
            {
            get { return get_string("ActualWork", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ActualWork", ifcengine.sdaiSTRING, value); }
            }
        public double? ActualUsage
            {
            get { return get_double("ActualUsage", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ActualUsage", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue ActualStart
            {
            get { return get_string("ActualStart", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ActualStart", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ActualFinish
            {
            get { return get_string("ActualFinish", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ActualFinish", ifcengine.sdaiSTRING, value); }
            }
        public TextValue RemainingWork
            {
            get { return get_string("RemainingWork", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RemainingWork", ifcengine.sdaiSTRING, value); }
            }
        public double? RemainingUsage
            {
            get { return get_double("RemainingUsage", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RemainingUsage", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Completion
            {
            get { return get_double("Completion", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Completion", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcResourceTime"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRevolvedAreaSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRevolvedAreaSolid : IfcSweptAreaSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRevolvedAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRevolvedAreaSolid(SdaiInstance instance) : base(instance) { }
        public IfcRevolvedAreaSolid() : base(0) { }

        public static implicit operator IfcRevolvedAreaSolid(SdaiInstance instance) => new IfcRevolvedAreaSolid(instance);

        /// <summary>
        /// Create new instace of IfcRevolvedAreaSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcRevolvedAreaSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRevolvedAreaSolid"); Debug.Assert(inst != 0); return inst; }

        public IfcAxis1Placement Axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis1Placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Angle
            {
            get { return get_double("Angle", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Angle", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRevolvedAreaSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRevolvedAreaSolidTapered
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRevolvedAreaSolidTapered : IfcRevolvedAreaSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRevolvedAreaSolidTapered
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRevolvedAreaSolidTapered(SdaiInstance instance) : base(instance) { }
        public IfcRevolvedAreaSolidTapered() : base(0) { }

        public static implicit operator IfcRevolvedAreaSolidTapered(SdaiInstance instance) => new IfcRevolvedAreaSolidTapered(instance);

        /// <summary>
        /// Create new instace of IfcRevolvedAreaSolidTapered and returns object of this class to interact with
        /// </summary>
        public static new IfcRevolvedAreaSolidTapered Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRevolvedAreaSolidTapered"); Debug.Assert(inst != 0); return inst; }

        public IfcProfileDef EndSweptArea 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EndSweptArea", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EndSweptArea", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcRevolvedAreaSolidTapered"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRightCircularCone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRightCircularCone : IfcCsgPrimitive3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRightCircularCone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRightCircularCone(SdaiInstance instance) : base(instance) { }
        public IfcRightCircularCone() : base(0) { }

        public static implicit operator IfcRightCircularCone(SdaiInstance instance) => new IfcRightCircularCone(instance);

        /// <summary>
        /// Create new instace of IfcRightCircularCone and returns object of this class to interact with
        /// </summary>
        public static new IfcRightCircularCone Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRightCircularCone"); Debug.Assert(inst != 0); return inst; }

        public double? Height
            {
            get { return get_double("Height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? BottomRadius
            {
            get { return get_double("BottomRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BottomRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRightCircularCone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRightCircularCylinder
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRightCircularCylinder : IfcCsgPrimitive3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRightCircularCylinder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRightCircularCylinder(SdaiInstance instance) : base(instance) { }
        public IfcRightCircularCylinder() : base(0) { }

        public static implicit operator IfcRightCircularCylinder(SdaiInstance instance) => new IfcRightCircularCylinder(instance);

        /// <summary>
        /// Create new instace of IfcRightCircularCylinder and returns object of this class to interact with
        /// </summary>
        public static new IfcRightCircularCylinder Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRightCircularCylinder"); Debug.Assert(inst != 0); return inst; }

        public double? Height
            {
            get { return get_double("Height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRightCircularCylinder"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRigidOperation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRigidOperation : IfcCoordinateOperation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRigidOperation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRigidOperation(SdaiInstance instance) : base(instance) { }
        public IfcRigidOperation() : base(0) { }

        public static implicit operator IfcRigidOperation(SdaiInstance instance) => new IfcRigidOperation(instance);

        /// <summary>
        /// Create new instace of IfcRigidOperation and returns object of this class to interact with
        /// </summary>
        public static new IfcRigidOperation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRigidOperation"); Debug.Assert(inst != 0); return inst; }


        public IfcMeasureValue FirstCoordinate
            {
            get { return new IfcMeasureValue(m_instance, "FirstCoordinate", 0); }
            }

        public IfcMeasureValue SecondCoordinate
            {
            get { return new IfcMeasureValue(m_instance, "SecondCoordinate", 0); }
            }
        public double? Height
            {
            get { return get_double("Height", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Height", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRigidOperation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRoad
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRoad : IfcFacility
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRoad
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRoad(SdaiInstance instance) : base(instance) { }
        public IfcRoad() : base(0) { }

        public static implicit operator IfcRoad(SdaiInstance instance) => new IfcRoad(instance);

        /// <summary>
        /// Create new instace of IfcRoad and returns object of this class to interact with
        /// </summary>
        public static new IfcRoad Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRoad"); Debug.Assert(inst != 0); return inst; }

        public IfcRoadTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRoadTypeEnum_); return EnumValue<IfcRoadTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRoadTypeEnum>.FromValue(value.Value, EnumNames.IfcRoadTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRoad"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRoadPart
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRoadPart : IfcFacilityPart
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRoadPart
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRoadPart(SdaiInstance instance) : base(instance) { }
        public IfcRoadPart() : base(0) { }

        public static implicit operator IfcRoadPart(SdaiInstance instance) => new IfcRoadPart(instance);

        /// <summary>
        /// Create new instace of IfcRoadPart and returns object of this class to interact with
        /// </summary>
        public static new IfcRoadPart Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRoadPart"); Debug.Assert(inst != 0); return inst; }

        public IfcRoadPartTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRoadPartTypeEnum_); return EnumValue<IfcRoadPartTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRoadPartTypeEnum>.FromValue(value.Value, EnumNames.IfcRoadPartTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRoadPart"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRoof
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRoof : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRoof
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRoof(SdaiInstance instance) : base(instance) { }
        public IfcRoof() : base(0) { }

        public static implicit operator IfcRoof(SdaiInstance instance) => new IfcRoof(instance);

        /// <summary>
        /// Create new instace of IfcRoof and returns object of this class to interact with
        /// </summary>
        public static new IfcRoof Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRoof"); Debug.Assert(inst != 0); return inst; }

        public IfcRoofTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRoofTypeEnum_); return EnumValue<IfcRoofTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRoofTypeEnum>.FromValue(value.Value, EnumNames.IfcRoofTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRoof"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRoofType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRoofType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRoofType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRoofType(SdaiInstance instance) : base(instance) { }
        public IfcRoofType() : base(0) { }

        public static implicit operator IfcRoofType(SdaiInstance instance) => new IfcRoofType(instance);

        /// <summary>
        /// Create new instace of IfcRoofType and returns object of this class to interact with
        /// </summary>
        public static new IfcRoofType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRoofType"); Debug.Assert(inst != 0); return inst; }

        public IfcRoofTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcRoofTypeEnum_); return EnumValue<IfcRoofTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcRoofTypeEnum>.FromValue(value.Value, EnumNames.IfcRoofTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRoofType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcRoundedRectangleProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcRoundedRectangleProfileDef : IfcRectangleProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcRoundedRectangleProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcRoundedRectangleProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcRoundedRectangleProfileDef() : base(0) { }

        public static implicit operator IfcRoundedRectangleProfileDef(SdaiInstance instance) => new IfcRoundedRectangleProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcRoundedRectangleProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcRoundedRectangleProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcRoundedRectangleProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? RoundingRadius
            {
            get { return get_double("RoundingRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RoundingRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcRoundedRectangleProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSanitaryTerminal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSanitaryTerminal : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSanitaryTerminal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSanitaryTerminal(SdaiInstance instance) : base(instance) { }
        public IfcSanitaryTerminal() : base(0) { }

        public static implicit operator IfcSanitaryTerminal(SdaiInstance instance) => new IfcSanitaryTerminal(instance);

        /// <summary>
        /// Create new instace of IfcSanitaryTerminal and returns object of this class to interact with
        /// </summary>
        public static new IfcSanitaryTerminal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSanitaryTerminal"); Debug.Assert(inst != 0); return inst; }

        public IfcSanitaryTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSanitaryTerminalTypeEnum_); return EnumValue<IfcSanitaryTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSanitaryTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcSanitaryTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSanitaryTerminal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSanitaryTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSanitaryTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSanitaryTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSanitaryTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcSanitaryTerminalType() : base(0) { }

        public static implicit operator IfcSanitaryTerminalType(SdaiInstance instance) => new IfcSanitaryTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcSanitaryTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcSanitaryTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSanitaryTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcSanitaryTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSanitaryTerminalTypeEnum_); return EnumValue<IfcSanitaryTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSanitaryTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcSanitaryTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSanitaryTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSeamCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSeamCurve : IfcSurfaceCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSeamCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSeamCurve(SdaiInstance instance) : base(instance) { }
        public IfcSeamCurve() : base(0) { }

        public static implicit operator IfcSeamCurve(SdaiInstance instance) => new IfcSeamCurve(instance);

        /// <summary>
        /// Create new instace of IfcSeamCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcSeamCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSeamCurve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcSeamCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSecondOrderPolynomialSpiral
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSecondOrderPolynomialSpiral : IfcSpiral
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSecondOrderPolynomialSpiral
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSecondOrderPolynomialSpiral(SdaiInstance instance) : base(instance) { }
        public IfcSecondOrderPolynomialSpiral() : base(0) { }

        public static implicit operator IfcSecondOrderPolynomialSpiral(SdaiInstance instance) => new IfcSecondOrderPolynomialSpiral(instance);

        /// <summary>
        /// Create new instace of IfcSecondOrderPolynomialSpiral and returns object of this class to interact with
        /// </summary>
        public static new IfcSecondOrderPolynomialSpiral Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSecondOrderPolynomialSpiral"); Debug.Assert(inst != 0); return inst; }

        public double? QuadraticTerm
            {
            get { return get_double("QuadraticTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "QuadraticTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearTerm
            {
            get { return get_double("LinearTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ConstantTerm
            {
            get { return get_double("ConstantTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ConstantTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSecondOrderPolynomialSpiral"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSectionedSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSectionedSolid : IfcSolidModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSectionedSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSectionedSolid(SdaiInstance instance) : base(instance) { }
        public IfcSectionedSolid() : base(0) { }

        public static implicit operator IfcSectionedSolid(SdaiInstance instance) => new IfcSectionedSolid(instance);

        public IfcCurve Directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcProfileDef CrossSections { get { return (new ListOfIfcProfileDefSerializer()).FromAttr(m_instance, "CrossSections"); } }
        public void put_CrossSections(IEnumerable<IfcProfileDef> lst) { (new ListOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "CrossSections"); }
        public void put_CrossSections_untyped(IEnumerable lst) { (new ListOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "CrossSections"); }

        protected override TextValue EntityName() { return "IfcSectionedSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSectionedSolidHorizontal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSectionedSolidHorizontal : IfcSectionedSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSectionedSolidHorizontal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSectionedSolidHorizontal(SdaiInstance instance) : base(instance) { }
        public IfcSectionedSolidHorizontal() : base(0) { }

        public static implicit operator IfcSectionedSolidHorizontal(SdaiInstance instance) => new IfcSectionedSolidHorizontal(instance);

        /// <summary>
        /// Create new instace of IfcSectionedSolidHorizontal and returns object of this class to interact with
        /// </summary>
        public static new IfcSectionedSolidHorizontal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSectionedSolidHorizontal"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcAxis2PlacementLinear CrossSectionPositions { get { return (new ListOfIfcAxis2PlacementLinearSerializer()).FromAttr(m_instance, "CrossSectionPositions"); } }
        public void put_CrossSectionPositions(IEnumerable<IfcAxis2PlacementLinear> lst) { (new ListOfIfcAxis2PlacementLinearSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionPositions"); }
        public void put_CrossSectionPositions_untyped(IEnumerable lst) { (new ListOfIfcAxis2PlacementLinearSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionPositions"); }

        protected override TextValue EntityName() { return "IfcSectionedSolidHorizontal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSectionedSpine
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSectionedSpine : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSectionedSpine
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSectionedSpine(SdaiInstance instance) : base(instance) { }
        public IfcSectionedSpine() : base(0) { }

        public static implicit operator IfcSectionedSpine(SdaiInstance instance) => new IfcSectionedSpine(instance);

        /// <summary>
        /// Create new instace of IfcSectionedSpine and returns object of this class to interact with
        /// </summary>
        public static new IfcSectionedSpine Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSectionedSpine"); Debug.Assert(inst != 0); return inst; }

        public IfcCompositeCurve SpineCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SpineCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCompositeCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SpineCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcProfileDef CrossSections { get { return (new ListOfIfcProfileDefSerializer()).FromAttr(m_instance, "CrossSections"); } }
        public void put_CrossSections(IEnumerable<IfcProfileDef> lst) { (new ListOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "CrossSections"); }
        public void put_CrossSections_untyped(IEnumerable lst) { (new ListOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "CrossSections"); }
        public ListOfIfcAxis2Placement3D CrossSectionPositions { get { return (new ListOfIfcAxis2Placement3DSerializer()).FromAttr(m_instance, "CrossSectionPositions"); } }
        public void put_CrossSectionPositions(IEnumerable<IfcAxis2Placement3D> lst) { (new ListOfIfcAxis2Placement3DSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionPositions"); }
        public void put_CrossSectionPositions_untyped(IEnumerable lst) { (new ListOfIfcAxis2Placement3DSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionPositions"); }

        protected override TextValue EntityName() { return "IfcSectionedSpine"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSectionedSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSectionedSurface : IfcSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSectionedSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSectionedSurface(SdaiInstance instance) : base(instance) { }
        public IfcSectionedSurface() : base(0) { }

        public static implicit operator IfcSectionedSurface(SdaiInstance instance) => new IfcSectionedSurface(instance);

        /// <summary>
        /// Create new instace of IfcSectionedSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcSectionedSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSectionedSurface"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve Directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, i); }
            }
        public ListOfIfcAxis2PlacementLinear CrossSectionPositions { get { return (new ListOfIfcAxis2PlacementLinearSerializer()).FromAttr(m_instance, "CrossSectionPositions"); } }
        public void put_CrossSectionPositions(IEnumerable<IfcAxis2PlacementLinear> lst) { (new ListOfIfcAxis2PlacementLinearSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionPositions"); }
        public void put_CrossSectionPositions_untyped(IEnumerable lst) { (new ListOfIfcAxis2PlacementLinearSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionPositions"); }
        public ListOfIfcProfileDef CrossSections { get { return (new ListOfIfcProfileDefSerializer()).FromAttr(m_instance, "CrossSections"); } }
        public void put_CrossSections(IEnumerable<IfcProfileDef> lst) { (new ListOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "CrossSections"); }
        public void put_CrossSections_untyped(IEnumerable lst) { (new ListOfIfcProfileDefSerializer()).ToSdaiAggr(lst, m_instance, "CrossSections"); }

        protected override TextValue EntityName() { return "IfcSectionedSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSectionProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSectionProperties : IfcPreDefinedProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSectionProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSectionProperties(SdaiInstance instance) : base(instance) { }
        public IfcSectionProperties() : base(0) { }

        public static implicit operator IfcSectionProperties(SdaiInstance instance) => new IfcSectionProperties(instance);

        /// <summary>
        /// Create new instace of IfcSectionProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcSectionProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSectionProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcSectionTypeEnum? SectionType 
            { 
            get { var str = get_string("SectionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSectionTypeEnum_); return EnumValue<IfcSectionTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSectionTypeEnum>.FromValue(value.Value, EnumNames.IfcSectionTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "SectionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcProfileDef StartProfile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "StartProfile", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "StartProfile", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcProfileDef EndProfile 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EndProfile", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EndProfile", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcSectionProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSectionReinforcementProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSectionReinforcementProperties : IfcPreDefinedProperties
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSectionReinforcementProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSectionReinforcementProperties(SdaiInstance instance) : base(instance) { }
        public IfcSectionReinforcementProperties() : base(0) { }

        public static implicit operator IfcSectionReinforcementProperties(SdaiInstance instance) => new IfcSectionReinforcementProperties(instance);

        /// <summary>
        /// Create new instace of IfcSectionReinforcementProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcSectionReinforcementProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSectionReinforcementProperties"); Debug.Assert(inst != 0); return inst; }

        public double? LongitudinalStartPosition
            {
            get { return get_double("LongitudinalStartPosition", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalStartPosition", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LongitudinalEndPosition
            {
            get { return get_double("LongitudinalEndPosition", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LongitudinalEndPosition", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransversePosition
            {
            get { return get_double("TransversePosition", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransversePosition", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcReinforcingBarRoleEnum? ReinforcementRole 
            { 
            get { var str = get_string("ReinforcementRole", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReinforcingBarRoleEnum_); return EnumValue<IfcReinforcingBarRoleEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReinforcingBarRoleEnum>.FromValue(value.Value, EnumNames.IfcReinforcingBarRoleEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ReinforcementRole", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcSectionProperties SectionDefinition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SectionDefinition", ifcengine.sdaiINSTANCE, out inst); return new IfcSectionProperties(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SectionDefinition", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcReinforcementBarProperties CrossSectionReinforcementDefinitions { get { return (new SetOfIfcReinforcementBarPropertiesSerializer()).FromAttr(m_instance, "CrossSectionReinforcementDefinitions"); } }
        public void put_CrossSectionReinforcementDefinitions(IEnumerable<IfcReinforcementBarProperties> lst) { (new SetOfIfcReinforcementBarPropertiesSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionReinforcementDefinitions"); }
        public void put_CrossSectionReinforcementDefinitions_untyped(IEnumerable lst) { (new SetOfIfcReinforcementBarPropertiesSerializer()).ToSdaiAggr(lst, m_instance, "CrossSectionReinforcementDefinitions"); }

        protected override TextValue EntityName() { return "IfcSectionReinforcementProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSegmentedReferenceCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSegmentedReferenceCurve : IfcCompositeCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSegmentedReferenceCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSegmentedReferenceCurve(SdaiInstance instance) : base(instance) { }
        public IfcSegmentedReferenceCurve() : base(0) { }

        public static implicit operator IfcSegmentedReferenceCurve(SdaiInstance instance) => new IfcSegmentedReferenceCurve(instance);

        /// <summary>
        /// Create new instace of IfcSegmentedReferenceCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcSegmentedReferenceCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSegmentedReferenceCurve"); Debug.Assert(inst != 0); return inst; }

        public IfcBoundedCurve BaseCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BaseCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundedCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BaseCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcPlacement EndPoint 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "EndPoint", ifcengine.sdaiINSTANCE, out inst); return new IfcPlacement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "EndPoint", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcSegmentedReferenceCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSensor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSensor : IfcDistributionControlElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSensor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSensor(SdaiInstance instance) : base(instance) { }
        public IfcSensor() : base(0) { }

        public static implicit operator IfcSensor(SdaiInstance instance) => new IfcSensor(instance);

        /// <summary>
        /// Create new instace of IfcSensor and returns object of this class to interact with
        /// </summary>
        public static new IfcSensor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSensor"); Debug.Assert(inst != 0); return inst; }

        public IfcSensorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSensorTypeEnum_); return EnumValue<IfcSensorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSensorTypeEnum>.FromValue(value.Value, EnumNames.IfcSensorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSensor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSensorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSensorType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSensorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSensorType(SdaiInstance instance) : base(instance) { }
        public IfcSensorType() : base(0) { }

        public static implicit operator IfcSensorType(SdaiInstance instance) => new IfcSensorType(instance);

        /// <summary>
        /// Create new instace of IfcSensorType and returns object of this class to interact with
        /// </summary>
        public static new IfcSensorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSensorType"); Debug.Assert(inst != 0); return inst; }

        public IfcSensorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSensorTypeEnum_); return EnumValue<IfcSensorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSensorTypeEnum>.FromValue(value.Value, EnumNames.IfcSensorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSensorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSeventhOrderPolynomialSpiral
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSeventhOrderPolynomialSpiral : IfcSpiral
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSeventhOrderPolynomialSpiral
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSeventhOrderPolynomialSpiral(SdaiInstance instance) : base(instance) { }
        public IfcSeventhOrderPolynomialSpiral() : base(0) { }

        public static implicit operator IfcSeventhOrderPolynomialSpiral(SdaiInstance instance) => new IfcSeventhOrderPolynomialSpiral(instance);

        /// <summary>
        /// Create new instace of IfcSeventhOrderPolynomialSpiral and returns object of this class to interact with
        /// </summary>
        public static new IfcSeventhOrderPolynomialSpiral Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSeventhOrderPolynomialSpiral"); Debug.Assert(inst != 0); return inst; }

        public double? SepticTerm
            {
            get { return get_double("SepticTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SepticTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SexticTerm
            {
            get { return get_double("SexticTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SexticTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? QuinticTerm
            {
            get { return get_double("QuinticTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "QuinticTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? QuarticTerm
            {
            get { return get_double("QuarticTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "QuarticTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CubicTerm
            {
            get { return get_double("CubicTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CubicTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? QuadraticTerm
            {
            get { return get_double("QuadraticTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "QuadraticTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearTerm
            {
            get { return get_double("LinearTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ConstantTerm
            {
            get { return get_double("ConstantTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ConstantTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSeventhOrderPolynomialSpiral"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcShadingDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcShadingDevice : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcShadingDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcShadingDevice(SdaiInstance instance) : base(instance) { }
        public IfcShadingDevice() : base(0) { }

        public static implicit operator IfcShadingDevice(SdaiInstance instance) => new IfcShadingDevice(instance);

        /// <summary>
        /// Create new instace of IfcShadingDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcShadingDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcShadingDevice"); Debug.Assert(inst != 0); return inst; }

        public IfcShadingDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcShadingDeviceTypeEnum_); return EnumValue<IfcShadingDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcShadingDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcShadingDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcShadingDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcShadingDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcShadingDeviceType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcShadingDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcShadingDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcShadingDeviceType() : base(0) { }

        public static implicit operator IfcShadingDeviceType(SdaiInstance instance) => new IfcShadingDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcShadingDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcShadingDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcShadingDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcShadingDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcShadingDeviceTypeEnum_); return EnumValue<IfcShadingDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcShadingDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcShadingDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcShadingDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcShapeAspect
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcShapeAspect : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcShapeAspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcShapeAspect(SdaiInstance instance) : base(instance) { }
        public IfcShapeAspect() : base(0) { }

        public static implicit operator IfcShapeAspect(SdaiInstance instance) => new IfcShapeAspect(instance);

        /// <summary>
        /// Create new instace of IfcShapeAspect and returns object of this class to interact with
        /// </summary>
        public static new IfcShapeAspect Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcShapeAspect"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcShapeModel ShapeRepresentations { get { return (new ListOfIfcShapeModelSerializer()).FromAttr(m_instance, "ShapeRepresentations"); } }
        public void put_ShapeRepresentations(IEnumerable<IfcShapeModel> lst) { (new ListOfIfcShapeModelSerializer()).ToSdaiAggr(lst, m_instance, "ShapeRepresentations"); }
        public void put_ShapeRepresentations_untyped(IEnumerable lst) { (new ListOfIfcShapeModelSerializer()).ToSdaiAggr(lst, m_instance, "ShapeRepresentations"); }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }
        public LOGICAL_VALUE? ProductDefinitional 
            { 
            get { var str = get_string("ProductDefinitional", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<LOGICAL_VALUE>.FromValue(value.Value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "ProductDefinitional", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        public IfcProductRepresentationSelect PartOfProductDefinitionShape
            {
            get { return new IfcProductRepresentationSelect(m_instance, "PartOfProductDefinitionShape", 0); }
            }
        public SetOfIfcExternalReferenceRelationship HasExternalReferences { get { return (new SetOfIfcExternalReferenceRelationshipSerializer()).FromAttr(m_instance, "HasExternalReferences"); } }

        protected override TextValue EntityName() { return "IfcShapeAspect"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcShapeModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcShapeModel : IfcRepresentation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcShapeModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcShapeModel(SdaiInstance instance) : base(instance) { }
        public IfcShapeModel() : base(0) { }

        public static implicit operator IfcShapeModel(SdaiInstance instance) => new IfcShapeModel(instance);

        public SetOfIfcShapeAspect OfShapeAspect { get { return (new SetOfIfcShapeAspectSerializer()).FromAttr(m_instance, "OfShapeAspect"); } }

        protected override TextValue EntityName() { return "IfcShapeModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcShapeRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcShapeRepresentation : IfcShapeModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcShapeRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcShapeRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcShapeRepresentation() : base(0) { }

        public static implicit operator IfcShapeRepresentation(SdaiInstance instance) => new IfcShapeRepresentation(instance);

        /// <summary>
        /// Create new instace of IfcShapeRepresentation and returns object of this class to interact with
        /// </summary>
        public static new IfcShapeRepresentation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcShapeRepresentation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcShapeRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcShellBasedSurfaceModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcShellBasedSurfaceModel : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcShellBasedSurfaceModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcShellBasedSurfaceModel(SdaiInstance instance) : base(instance) { }
        public IfcShellBasedSurfaceModel() : base(0) { }

        public static implicit operator IfcShellBasedSurfaceModel(SdaiInstance instance) => new IfcShellBasedSurfaceModel(instance);

        /// <summary>
        /// Create new instace of IfcShellBasedSurfaceModel and returns object of this class to interact with
        /// </summary>
        public static new IfcShellBasedSurfaceModel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcShellBasedSurfaceModel"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcShell SbsmBoundary { get { return (new SetOfIfcShellSerializer()).FromAttr(m_instance, "SbsmBoundary"); } }
        public void put_SbsmBoundary(IEnumerable<IfcShell> lst) { (new SetOfIfcShellSerializer()).ToSdaiAggr(lst, m_instance, "SbsmBoundary"); }
        public void put_SbsmBoundary_untyped(IEnumerable lst) { (new SetOfIfcShellSerializer()).ToSdaiAggr(lst, m_instance, "SbsmBoundary"); }

        protected override TextValue EntityName() { return "IfcShellBasedSurfaceModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSign
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSign : IfcElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSign
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSign(SdaiInstance instance) : base(instance) { }
        public IfcSign() : base(0) { }

        public static implicit operator IfcSign(SdaiInstance instance) => new IfcSign(instance);

        /// <summary>
        /// Create new instace of IfcSign and returns object of this class to interact with
        /// </summary>
        public static new IfcSign Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSign"); Debug.Assert(inst != 0); return inst; }

        public IfcSignTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSignTypeEnum_); return EnumValue<IfcSignTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSignTypeEnum>.FromValue(value.Value, EnumNames.IfcSignTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSign"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSignal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSignal : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSignal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSignal(SdaiInstance instance) : base(instance) { }
        public IfcSignal() : base(0) { }

        public static implicit operator IfcSignal(SdaiInstance instance) => new IfcSignal(instance);

        /// <summary>
        /// Create new instace of IfcSignal and returns object of this class to interact with
        /// </summary>
        public static new IfcSignal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSignal"); Debug.Assert(inst != 0); return inst; }

        public IfcSignalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSignalTypeEnum_); return EnumValue<IfcSignalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSignalTypeEnum>.FromValue(value.Value, EnumNames.IfcSignalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSignal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSignalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSignalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSignalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSignalType(SdaiInstance instance) : base(instance) { }
        public IfcSignalType() : base(0) { }

        public static implicit operator IfcSignalType(SdaiInstance instance) => new IfcSignalType(instance);

        /// <summary>
        /// Create new instace of IfcSignalType and returns object of this class to interact with
        /// </summary>
        public static new IfcSignalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSignalType"); Debug.Assert(inst != 0); return inst; }

        public IfcSignalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSignalTypeEnum_); return EnumValue<IfcSignalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSignalTypeEnum>.FromValue(value.Value, EnumNames.IfcSignalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSignalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSignType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSignType : IfcElementComponentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSignType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSignType(SdaiInstance instance) : base(instance) { }
        public IfcSignType() : base(0) { }

        public static implicit operator IfcSignType(SdaiInstance instance) => new IfcSignType(instance);

        /// <summary>
        /// Create new instace of IfcSignType and returns object of this class to interact with
        /// </summary>
        public static new IfcSignType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSignType"); Debug.Assert(inst != 0); return inst; }

        public IfcSignTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSignTypeEnum_); return EnumValue<IfcSignTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSignTypeEnum>.FromValue(value.Value, EnumNames.IfcSignTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSignType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSimplePropertyTemplate
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSimplePropertyTemplate : IfcPropertyTemplate
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSimplePropertyTemplate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSimplePropertyTemplate(SdaiInstance instance) : base(instance) { }
        public IfcSimplePropertyTemplate() : base(0) { }

        public static implicit operator IfcSimplePropertyTemplate(SdaiInstance instance) => new IfcSimplePropertyTemplate(instance);

        /// <summary>
        /// Create new instace of IfcSimplePropertyTemplate and returns object of this class to interact with
        /// </summary>
        public static new IfcSimplePropertyTemplate Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSimplePropertyTemplate"); Debug.Assert(inst != 0); return inst; }

        public IfcSimplePropertyTemplateTypeEnum? TemplateType 
            { 
            get { var str = get_string("TemplateType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSimplePropertyTemplateTypeEnum_); return EnumValue<IfcSimplePropertyTemplateTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSimplePropertyTemplateTypeEnum>.FromValue(value.Value, EnumNames.IfcSimplePropertyTemplateTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "TemplateType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue PrimaryMeasureType
            {
            get { return get_string("PrimaryMeasureType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "PrimaryMeasureType", ifcengine.sdaiSTRING, value); }
            }
        public TextValue SecondaryMeasureType
            {
            get { return get_string("SecondaryMeasureType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "SecondaryMeasureType", ifcengine.sdaiSTRING, value); }
            }
        public IfcPropertyEnumeration Enumerators 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Enumerators", ifcengine.sdaiINSTANCE, out inst); return new IfcPropertyEnumeration(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Enumerators", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcUnit PrimaryUnit
            {
            get { return new IfcUnit(m_instance, "PrimaryUnit", 0); }
            }

        public IfcUnit SecondaryUnit
            {
            get { return new IfcUnit(m_instance, "SecondaryUnit", 0); }
            }
        public TextValue Expression
            {
            get { return get_string("Expression", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Expression", ifcengine.sdaiSTRING, value); }
            }
        public IfcStateEnum? AccessState 
            { 
            get { var str = get_string("AccessState", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStateEnum_); return EnumValue<IfcStateEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStateEnum>.FromValue(value.Value, EnumNames.IfcStateEnum_); ifcengine.sdaiPutAttrBN(m_instance, "AccessState", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSimplePropertyTemplate"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSineSpiral
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSineSpiral : IfcSpiral
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSineSpiral
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSineSpiral(SdaiInstance instance) : base(instance) { }
        public IfcSineSpiral() : base(0) { }

        public static implicit operator IfcSineSpiral(SdaiInstance instance) => new IfcSineSpiral(instance);

        /// <summary>
        /// Create new instace of IfcSineSpiral and returns object of this class to interact with
        /// </summary>
        public static new IfcSineSpiral Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSineSpiral"); Debug.Assert(inst != 0); return inst; }

        public double? SineTerm
            {
            get { return get_double("SineTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SineTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearTerm
            {
            get { return get_double("LinearTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ConstantTerm
            {
            get { return get_double("ConstantTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ConstantTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSineSpiral"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSite
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSite : IfcSpatialStructureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSite
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSite(SdaiInstance instance) : base(instance) { }
        public IfcSite() : base(0) { }

        public static implicit operator IfcSite(SdaiInstance instance) => new IfcSite(instance);

        /// <summary>
        /// Create new instace of IfcSite and returns object of this class to interact with
        /// </summary>
        public static new IfcSite Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSite"); Debug.Assert(inst != 0); return inst; }

        public IfcCompoundPlaneAngleMeasure RefLatitude { get { return (new IfcCompoundPlaneAngleMeasureSerializer()).FromAttr(m_instance, "RefLatitude"); } }
        public void put_RefLatitude(IEnumerable<IntValue> lst) { (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "RefLatitude"); }
        public void put_RefLatitude_untyped(IEnumerable lst) { (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "RefLatitude"); }
        public IfcCompoundPlaneAngleMeasure RefLongitude { get { return (new IfcCompoundPlaneAngleMeasureSerializer()).FromAttr(m_instance, "RefLongitude"); } }
        public void put_RefLongitude(IEnumerable<IntValue> lst) { (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "RefLongitude"); }
        public void put_RefLongitude_untyped(IEnumerable lst) { (new IfcCompoundPlaneAngleMeasureSerializer()).ToSdaiAggr(lst, m_instance, "RefLongitude"); }
        public double? RefElevation
            {
            get { return get_double("RefElevation", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RefElevation", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue LandTitleNumber
            {
            get { return get_string("LandTitleNumber", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LandTitleNumber", ifcengine.sdaiSTRING, value); }
            }
        public IfcPostalAddress SiteAddress 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SiteAddress", ifcengine.sdaiINSTANCE, out inst); return new IfcPostalAddress(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SiteAddress", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcSite"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSIUnit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSIUnit : IfcNamedUnit
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSIUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSIUnit(SdaiInstance instance) : base(instance) { }
        public IfcSIUnit() : base(0) { }

        public static implicit operator IfcSIUnit(SdaiInstance instance) => new IfcSIUnit(instance);

        /// <summary>
        /// Create new instace of IfcSIUnit and returns object of this class to interact with
        /// </summary>
        public static new IfcSIUnit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSIUnit"); Debug.Assert(inst != 0); return inst; }

        public IfcSIPrefix? Prefix 
            { 
            get { var str = get_string("Prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSIPrefix_); return EnumValue<IfcSIPrefix>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSIPrefix>.FromValue(value.Value, EnumNames.IfcSIPrefix_); ifcengine.sdaiPutAttrBN(m_instance, "Prefix", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcSIUnitName? Name 
            { 
            get { var str = get_string("Name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSIUnitName_); return EnumValue<IfcSIUnitName>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSIUnitName>.FromValue(value.Value, EnumNames.IfcSIUnitName_); ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSIUnit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSlab
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSlab : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSlab
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSlab(SdaiInstance instance) : base(instance) { }
        public IfcSlab() : base(0) { }

        public static implicit operator IfcSlab(SdaiInstance instance) => new IfcSlab(instance);

        /// <summary>
        /// Create new instace of IfcSlab and returns object of this class to interact with
        /// </summary>
        public static new IfcSlab Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSlab"); Debug.Assert(inst != 0); return inst; }

        public IfcSlabTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSlabTypeEnum_); return EnumValue<IfcSlabTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSlabTypeEnum>.FromValue(value.Value, EnumNames.IfcSlabTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSlab"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSlabType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSlabType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSlabType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSlabType(SdaiInstance instance) : base(instance) { }
        public IfcSlabType() : base(0) { }

        public static implicit operator IfcSlabType(SdaiInstance instance) => new IfcSlabType(instance);

        /// <summary>
        /// Create new instace of IfcSlabType and returns object of this class to interact with
        /// </summary>
        public static new IfcSlabType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSlabType"); Debug.Assert(inst != 0); return inst; }

        public IfcSlabTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSlabTypeEnum_); return EnumValue<IfcSlabTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSlabTypeEnum>.FromValue(value.Value, EnumNames.IfcSlabTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSlabType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSlippageConnectionCondition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSlippageConnectionCondition : IfcStructuralConnectionCondition
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSlippageConnectionCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSlippageConnectionCondition(SdaiInstance instance) : base(instance) { }
        public IfcSlippageConnectionCondition() : base(0) { }

        public static implicit operator IfcSlippageConnectionCondition(SdaiInstance instance) => new IfcSlippageConnectionCondition(instance);

        /// <summary>
        /// Create new instace of IfcSlippageConnectionCondition and returns object of this class to interact with
        /// </summary>
        public static new IfcSlippageConnectionCondition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSlippageConnectionCondition"); Debug.Assert(inst != 0); return inst; }

        public double? SlippageX
            {
            get { return get_double("SlippageX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SlippageX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SlippageY
            {
            get { return get_double("SlippageY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SlippageY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SlippageZ
            {
            get { return get_double("SlippageZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SlippageZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSlippageConnectionCondition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSolarDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSolarDevice : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSolarDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSolarDevice(SdaiInstance instance) : base(instance) { }
        public IfcSolarDevice() : base(0) { }

        public static implicit operator IfcSolarDevice(SdaiInstance instance) => new IfcSolarDevice(instance);

        /// <summary>
        /// Create new instace of IfcSolarDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcSolarDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSolarDevice"); Debug.Assert(inst != 0); return inst; }

        public IfcSolarDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSolarDeviceTypeEnum_); return EnumValue<IfcSolarDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSolarDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcSolarDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSolarDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSolarDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSolarDeviceType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSolarDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSolarDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcSolarDeviceType() : base(0) { }

        public static implicit operator IfcSolarDeviceType(SdaiInstance instance) => new IfcSolarDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcSolarDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcSolarDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSolarDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcSolarDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSolarDeviceTypeEnum_); return EnumValue<IfcSolarDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSolarDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcSolarDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSolarDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpace
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpace : IfcSpatialStructureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpace(SdaiInstance instance) : base(instance) { }
        public IfcSpace() : base(0) { }

        public static implicit operator IfcSpace(SdaiInstance instance) => new IfcSpace(instance);

        /// <summary>
        /// Create new instace of IfcSpace and returns object of this class to interact with
        /// </summary>
        public static new IfcSpace Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSpace"); Debug.Assert(inst != 0); return inst; }

        public IfcSpaceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSpaceTypeEnum_); return EnumValue<IfcSpaceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSpaceTypeEnum>.FromValue(value.Value, EnumNames.IfcSpaceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? ElevationWithFlooring
            {
            get { return get_double("ElevationWithFlooring", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ElevationWithFlooring", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public SetOfIfcRelCoversSpaces HasCoverings { get { return (new SetOfIfcRelCoversSpacesSerializer()).FromAttr(m_instance, "HasCoverings"); } }
        public SetOfIfcRelSpaceBoundary BoundedBy { get { return (new SetOfIfcRelSpaceBoundarySerializer()).FromAttr(m_instance, "BoundedBy"); } }

        protected override TextValue EntityName() { return "IfcSpace"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpaceHeater
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpaceHeater : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpaceHeater
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpaceHeater(SdaiInstance instance) : base(instance) { }
        public IfcSpaceHeater() : base(0) { }

        public static implicit operator IfcSpaceHeater(SdaiInstance instance) => new IfcSpaceHeater(instance);

        /// <summary>
        /// Create new instace of IfcSpaceHeater and returns object of this class to interact with
        /// </summary>
        public static new IfcSpaceHeater Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSpaceHeater"); Debug.Assert(inst != 0); return inst; }

        public IfcSpaceHeaterTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSpaceHeaterTypeEnum_); return EnumValue<IfcSpaceHeaterTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSpaceHeaterTypeEnum>.FromValue(value.Value, EnumNames.IfcSpaceHeaterTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSpaceHeater"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpaceHeaterType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpaceHeaterType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpaceHeaterType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpaceHeaterType(SdaiInstance instance) : base(instance) { }
        public IfcSpaceHeaterType() : base(0) { }

        public static implicit operator IfcSpaceHeaterType(SdaiInstance instance) => new IfcSpaceHeaterType(instance);

        /// <summary>
        /// Create new instace of IfcSpaceHeaterType and returns object of this class to interact with
        /// </summary>
        public static new IfcSpaceHeaterType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSpaceHeaterType"); Debug.Assert(inst != 0); return inst; }

        public IfcSpaceHeaterTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSpaceHeaterTypeEnum_); return EnumValue<IfcSpaceHeaterTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSpaceHeaterTypeEnum>.FromValue(value.Value, EnumNames.IfcSpaceHeaterTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSpaceHeaterType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpatialElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpatialElementType : IfcTypeProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpatialElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpatialElementType(SdaiInstance instance) : base(instance) { }
        public IfcSpatialElementType() : base(0) { }

        public static implicit operator IfcSpatialElementType(SdaiInstance instance) => new IfcSpatialElementType(instance);

        public TextValue ElementType
            {
            get { return get_string("ElementType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ElementType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcSpatialElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpatialStructureElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpatialStructureElementType : IfcSpatialElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpatialStructureElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpatialStructureElementType(SdaiInstance instance) : base(instance) { }
        public IfcSpatialStructureElementType() : base(0) { }

        public static implicit operator IfcSpatialStructureElementType(SdaiInstance instance) => new IfcSpatialStructureElementType(instance);


        protected override TextValue EntityName() { return "IfcSpatialStructureElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpaceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpaceType : IfcSpatialStructureElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpaceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpaceType(SdaiInstance instance) : base(instance) { }
        public IfcSpaceType() : base(0) { }

        public static implicit operator IfcSpaceType(SdaiInstance instance) => new IfcSpaceType(instance);

        /// <summary>
        /// Create new instace of IfcSpaceType and returns object of this class to interact with
        /// </summary>
        public static new IfcSpaceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSpaceType"); Debug.Assert(inst != 0); return inst; }

        public IfcSpaceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSpaceTypeEnum_); return EnumValue<IfcSpaceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSpaceTypeEnum>.FromValue(value.Value, EnumNames.IfcSpaceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue LongName
            {
            get { return get_string("LongName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongName", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcSpaceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpatialZone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpatialZone : IfcSpatialElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpatialZone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpatialZone(SdaiInstance instance) : base(instance) { }
        public IfcSpatialZone() : base(0) { }

        public static implicit operator IfcSpatialZone(SdaiInstance instance) => new IfcSpatialZone(instance);

        /// <summary>
        /// Create new instace of IfcSpatialZone and returns object of this class to interact with
        /// </summary>
        public static new IfcSpatialZone Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSpatialZone"); Debug.Assert(inst != 0); return inst; }

        public IfcSpatialZoneTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSpatialZoneTypeEnum_); return EnumValue<IfcSpatialZoneTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSpatialZoneTypeEnum>.FromValue(value.Value, EnumNames.IfcSpatialZoneTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSpatialZone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSpatialZoneType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSpatialZoneType : IfcSpatialElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSpatialZoneType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSpatialZoneType(SdaiInstance instance) : base(instance) { }
        public IfcSpatialZoneType() : base(0) { }

        public static implicit operator IfcSpatialZoneType(SdaiInstance instance) => new IfcSpatialZoneType(instance);

        /// <summary>
        /// Create new instace of IfcSpatialZoneType and returns object of this class to interact with
        /// </summary>
        public static new IfcSpatialZoneType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSpatialZoneType"); Debug.Assert(inst != 0); return inst; }

        public IfcSpatialZoneTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSpatialZoneTypeEnum_); return EnumValue<IfcSpatialZoneTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSpatialZoneTypeEnum>.FromValue(value.Value, EnumNames.IfcSpatialZoneTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue LongName
            {
            get { return get_string("LongName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongName", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcSpatialZoneType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSphere
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSphere : IfcCsgPrimitive3D
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSphere
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSphere(SdaiInstance instance) : base(instance) { }
        public IfcSphere() : base(0) { }

        public static implicit operator IfcSphere(SdaiInstance instance) => new IfcSphere(instance);

        /// <summary>
        /// Create new instace of IfcSphere and returns object of this class to interact with
        /// </summary>
        public static new IfcSphere Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSphere"); Debug.Assert(inst != 0); return inst; }

        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSphere"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSphericalSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSphericalSurface : IfcElementarySurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSphericalSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSphericalSurface(SdaiInstance instance) : base(instance) { }
        public IfcSphericalSurface() : base(0) { }

        public static implicit operator IfcSphericalSurface(SdaiInstance instance) => new IfcSphericalSurface(instance);

        /// <summary>
        /// Create new instace of IfcSphericalSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcSphericalSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSphericalSurface"); Debug.Assert(inst != 0); return inst; }

        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSphericalSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStackTerminal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStackTerminal : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStackTerminal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStackTerminal(SdaiInstance instance) : base(instance) { }
        public IfcStackTerminal() : base(0) { }

        public static implicit operator IfcStackTerminal(SdaiInstance instance) => new IfcStackTerminal(instance);

        /// <summary>
        /// Create new instace of IfcStackTerminal and returns object of this class to interact with
        /// </summary>
        public static new IfcStackTerminal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStackTerminal"); Debug.Assert(inst != 0); return inst; }

        public IfcStackTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStackTerminalTypeEnum_); return EnumValue<IfcStackTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStackTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcStackTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStackTerminal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStackTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStackTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStackTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStackTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcStackTerminalType() : base(0) { }

        public static implicit operator IfcStackTerminalType(SdaiInstance instance) => new IfcStackTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcStackTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcStackTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStackTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcStackTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStackTerminalTypeEnum_); return EnumValue<IfcStackTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStackTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcStackTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStackTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStair : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStair(SdaiInstance instance) : base(instance) { }
        public IfcStair() : base(0) { }

        public static implicit operator IfcStair(SdaiInstance instance) => new IfcStair(instance);

        /// <summary>
        /// Create new instace of IfcStair and returns object of this class to interact with
        /// </summary>
        public static new IfcStair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStair"); Debug.Assert(inst != 0); return inst; }

        public IfcStairTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStairTypeEnum_); return EnumValue<IfcStairTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStairTypeEnum>.FromValue(value.Value, EnumNames.IfcStairTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStairFlight
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStairFlight : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStairFlight
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStairFlight(SdaiInstance instance) : base(instance) { }
        public IfcStairFlight() : base(0) { }

        public static implicit operator IfcStairFlight(SdaiInstance instance) => new IfcStairFlight(instance);

        /// <summary>
        /// Create new instace of IfcStairFlight and returns object of this class to interact with
        /// </summary>
        public static new IfcStairFlight Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStairFlight"); Debug.Assert(inst != 0); return inst; }

        public IntValue? NumberOfRisers
            {
            get { return get_IntValue("NumberOfRisers", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NumberOfRisers", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IntValue? NumberOfTreads
            {
            get { return get_IntValue("NumberOfTreads", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NumberOfTreads", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public double? RiserHeight
            {
            get { return get_double("RiserHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RiserHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TreadLength
            {
            get { return get_double("TreadLength", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TreadLength", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcStairFlightTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStairFlightTypeEnum_); return EnumValue<IfcStairFlightTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStairFlightTypeEnum>.FromValue(value.Value, EnumNames.IfcStairFlightTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStairFlight"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStairFlightType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStairFlightType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStairFlightType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStairFlightType(SdaiInstance instance) : base(instance) { }
        public IfcStairFlightType() : base(0) { }

        public static implicit operator IfcStairFlightType(SdaiInstance instance) => new IfcStairFlightType(instance);

        /// <summary>
        /// Create new instace of IfcStairFlightType and returns object of this class to interact with
        /// </summary>
        public static new IfcStairFlightType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStairFlightType"); Debug.Assert(inst != 0); return inst; }

        public IfcStairFlightTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStairFlightTypeEnum_); return EnumValue<IfcStairFlightTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStairFlightTypeEnum>.FromValue(value.Value, EnumNames.IfcStairFlightTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStairFlightType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStairType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStairType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStairType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStairType(SdaiInstance instance) : base(instance) { }
        public IfcStairType() : base(0) { }

        public static implicit operator IfcStairType(SdaiInstance instance) => new IfcStairType(instance);

        /// <summary>
        /// Create new instace of IfcStairType and returns object of this class to interact with
        /// </summary>
        public static new IfcStairType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStairType"); Debug.Assert(inst != 0); return inst; }

        public IfcStairTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStairTypeEnum_); return EnumValue<IfcStairTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStairTypeEnum>.FromValue(value.Value, EnumNames.IfcStairTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStairType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralActivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralActivity : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralActivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralActivity(SdaiInstance instance) : base(instance) { }
        public IfcStructuralActivity() : base(0) { }

        public static implicit operator IfcStructuralActivity(SdaiInstance instance) => new IfcStructuralActivity(instance);

        public IfcStructuralLoad AppliedLoad 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AppliedLoad", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralLoad(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AppliedLoad", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcGlobalOrLocalEnum? GlobalOrLocal 
            { 
            get { var str = get_string("GlobalOrLocal", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcGlobalOrLocalEnum_); return EnumValue<IfcGlobalOrLocalEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcGlobalOrLocalEnum>.FromValue(value.Value, EnumNames.IfcGlobalOrLocalEnum_); ifcengine.sdaiPutAttrBN(m_instance, "GlobalOrLocal", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcRelConnectsStructuralActivity AssignedToStructuralItem { get { return (new SetOfIfcRelConnectsStructuralActivitySerializer()).FromAttr(m_instance, "AssignedToStructuralItem"); } }

        protected override TextValue EntityName() { return "IfcStructuralActivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralAction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralAction : IfcStructuralActivity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralAction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralAction() : base(0) { }

        public static implicit operator IfcStructuralAction(SdaiInstance instance) => new IfcStructuralAction(instance);

        public bool? DestabilizingLoad
            {
            get { return get_bool("DestabilizingLoad", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DestabilizingLoad", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralAction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralAnalysisModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralAnalysisModel : IfcSystem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralAnalysisModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralAnalysisModel(SdaiInstance instance) : base(instance) { }
        public IfcStructuralAnalysisModel() : base(0) { }

        public static implicit operator IfcStructuralAnalysisModel(SdaiInstance instance) => new IfcStructuralAnalysisModel(instance);

        /// <summary>
        /// Create new instace of IfcStructuralAnalysisModel and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralAnalysisModel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralAnalysisModel"); Debug.Assert(inst != 0); return inst; }

        public IfcAnalysisModelTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAnalysisModelTypeEnum_); return EnumValue<IfcAnalysisModelTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAnalysisModelTypeEnum>.FromValue(value.Value, EnumNames.IfcAnalysisModelTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcAxis2Placement3D OrientationOf2DPlane 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "OrientationOf2DPlane", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "OrientationOf2DPlane", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcStructuralLoadGroup LoadedBy { get { return (new SetOfIfcStructuralLoadGroupSerializer()).FromAttr(m_instance, "LoadedBy"); } }
        public void put_LoadedBy(IEnumerable<IfcStructuralLoadGroup> lst) { (new SetOfIfcStructuralLoadGroupSerializer()).ToSdaiAggr(lst, m_instance, "LoadedBy"); }
        public void put_LoadedBy_untyped(IEnumerable lst) { (new SetOfIfcStructuralLoadGroupSerializer()).ToSdaiAggr(lst, m_instance, "LoadedBy"); }
        public SetOfIfcStructuralResultGroup HasResults { get { return (new SetOfIfcStructuralResultGroupSerializer()).FromAttr(m_instance, "HasResults"); } }
        public void put_HasResults(IEnumerable<IfcStructuralResultGroup> lst) { (new SetOfIfcStructuralResultGroupSerializer()).ToSdaiAggr(lst, m_instance, "HasResults"); }
        public void put_HasResults_untyped(IEnumerable lst) { (new SetOfIfcStructuralResultGroupSerializer()).ToSdaiAggr(lst, m_instance, "HasResults"); }
        public IfcObjectPlacement SharedPlacement 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SharedPlacement", ifcengine.sdaiINSTANCE, out inst); return new IfcObjectPlacement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SharedPlacement", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcStructuralAnalysisModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralItem : IfcProduct
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralItem(SdaiInstance instance) : base(instance) { }
        public IfcStructuralItem() : base(0) { }

        public static implicit operator IfcStructuralItem(SdaiInstance instance) => new IfcStructuralItem(instance);

        public SetOfIfcRelConnectsStructuralActivity AssignedStructuralActivity { get { return (new SetOfIfcRelConnectsStructuralActivitySerializer()).FromAttr(m_instance, "AssignedStructuralActivity"); } }

        protected override TextValue EntityName() { return "IfcStructuralItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralConnection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralConnection : IfcStructuralItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralConnection(SdaiInstance instance) : base(instance) { }
        public IfcStructuralConnection() : base(0) { }

        public static implicit operator IfcStructuralConnection(SdaiInstance instance) => new IfcStructuralConnection(instance);

        public IfcBoundaryCondition AppliedCondition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AppliedCondition", ifcengine.sdaiINSTANCE, out inst); return new IfcBoundaryCondition(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AppliedCondition", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcRelConnectsStructuralMember ConnectsStructuralMembers { get { return (new SetOfIfcRelConnectsStructuralMemberSerializer()).FromAttr(m_instance, "ConnectsStructuralMembers"); } }

        protected override TextValue EntityName() { return "IfcStructuralConnection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralCurveAction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralCurveAction : IfcStructuralAction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralCurveAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralCurveAction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralCurveAction() : base(0) { }

        public static implicit operator IfcStructuralCurveAction(SdaiInstance instance) => new IfcStructuralCurveAction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralCurveAction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralCurveAction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralCurveAction"); Debug.Assert(inst != 0); return inst; }

        public IfcProjectedOrTrueLengthEnum? ProjectedOrTrue 
            { 
            get { var str = get_string("ProjectedOrTrue", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProjectedOrTrueLengthEnum_); return EnumValue<IfcProjectedOrTrueLengthEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProjectedOrTrueLengthEnum>.FromValue(value.Value, EnumNames.IfcProjectedOrTrueLengthEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ProjectedOrTrue", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcStructuralCurveActivityTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStructuralCurveActivityTypeEnum_); return EnumValue<IfcStructuralCurveActivityTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStructuralCurveActivityTypeEnum>.FromValue(value.Value, EnumNames.IfcStructuralCurveActivityTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralCurveAction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralCurveConnection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralCurveConnection : IfcStructuralConnection
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralCurveConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralCurveConnection(SdaiInstance instance) : base(instance) { }
        public IfcStructuralCurveConnection() : base(0) { }

        public static implicit operator IfcStructuralCurveConnection(SdaiInstance instance) => new IfcStructuralCurveConnection(instance);

        /// <summary>
        /// Create new instace of IfcStructuralCurveConnection and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralCurveConnection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralCurveConnection"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection AxisDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AxisDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AxisDirection", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcStructuralCurveConnection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralMember
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralMember : IfcStructuralItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralMember(SdaiInstance instance) : base(instance) { }
        public IfcStructuralMember() : base(0) { }

        public static implicit operator IfcStructuralMember(SdaiInstance instance) => new IfcStructuralMember(instance);

        public SetOfIfcRelConnectsStructuralMember ConnectedBy { get { return (new SetOfIfcRelConnectsStructuralMemberSerializer()).FromAttr(m_instance, "ConnectedBy"); } }

        protected override TextValue EntityName() { return "IfcStructuralMember"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralCurveMember
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralCurveMember : IfcStructuralMember
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralCurveMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralCurveMember(SdaiInstance instance) : base(instance) { }
        public IfcStructuralCurveMember() : base(0) { }

        public static implicit operator IfcStructuralCurveMember(SdaiInstance instance) => new IfcStructuralCurveMember(instance);

        /// <summary>
        /// Create new instace of IfcStructuralCurveMember and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralCurveMember Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralCurveMember"); Debug.Assert(inst != 0); return inst; }

        public IfcStructuralCurveMemberTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStructuralCurveMemberTypeEnum_); return EnumValue<IfcStructuralCurveMemberTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStructuralCurveMemberTypeEnum>.FromValue(value.Value, EnumNames.IfcStructuralCurveMemberTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcDirection Axis 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Axis", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcStructuralCurveMember"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralCurveMemberVarying
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralCurveMemberVarying : IfcStructuralCurveMember
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralCurveMemberVarying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralCurveMemberVarying(SdaiInstance instance) : base(instance) { }
        public IfcStructuralCurveMemberVarying() : base(0) { }

        public static implicit operator IfcStructuralCurveMemberVarying(SdaiInstance instance) => new IfcStructuralCurveMemberVarying(instance);

        /// <summary>
        /// Create new instace of IfcStructuralCurveMemberVarying and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralCurveMemberVarying Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralCurveMemberVarying"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcStructuralCurveMemberVarying"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralReaction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralReaction : IfcStructuralActivity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralReaction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralReaction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralReaction() : base(0) { }

        public static implicit operator IfcStructuralReaction(SdaiInstance instance) => new IfcStructuralReaction(instance);


        protected override TextValue EntityName() { return "IfcStructuralReaction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralCurveReaction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralCurveReaction : IfcStructuralReaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralCurveReaction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralCurveReaction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralCurveReaction() : base(0) { }

        public static implicit operator IfcStructuralCurveReaction(SdaiInstance instance) => new IfcStructuralCurveReaction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralCurveReaction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralCurveReaction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralCurveReaction"); Debug.Assert(inst != 0); return inst; }

        public IfcStructuralCurveActivityTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStructuralCurveActivityTypeEnum_); return EnumValue<IfcStructuralCurveActivityTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStructuralCurveActivityTypeEnum>.FromValue(value.Value, EnumNames.IfcStructuralCurveActivityTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralCurveReaction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLinearAction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLinearAction : IfcStructuralCurveAction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLinearAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLinearAction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLinearAction() : base(0) { }

        public static implicit operator IfcStructuralLinearAction(SdaiInstance instance) => new IfcStructuralLinearAction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLinearAction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLinearAction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLinearAction"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcStructuralLinearAction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoad
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoad : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoad
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoad(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoad() : base(0) { }

        public static implicit operator IfcStructuralLoad(SdaiInstance instance) => new IfcStructuralLoad(instance);

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcStructuralLoad"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadGroup
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadGroup : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadGroup(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadGroup() : base(0) { }

        public static implicit operator IfcStructuralLoadGroup(SdaiInstance instance) => new IfcStructuralLoadGroup(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadGroup and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadGroup Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadGroup"); Debug.Assert(inst != 0); return inst; }

        public IfcLoadGroupTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcLoadGroupTypeEnum_); return EnumValue<IfcLoadGroupTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcLoadGroupTypeEnum>.FromValue(value.Value, EnumNames.IfcLoadGroupTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcActionTypeEnum? ActionType 
            { 
            get { var str = get_string("ActionType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcActionTypeEnum_); return EnumValue<IfcActionTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcActionTypeEnum>.FromValue(value.Value, EnumNames.IfcActionTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ActionType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcActionSourceTypeEnum? ActionSource 
            { 
            get { var str = get_string("ActionSource", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcActionSourceTypeEnum_); return EnumValue<IfcActionSourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcActionSourceTypeEnum>.FromValue(value.Value, EnumNames.IfcActionSourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ActionSource", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? Coefficient
            {
            get { return get_double("Coefficient", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Coefficient", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public TextValue Purpose
            {
            get { return get_string("Purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Purpose", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcStructuralResultGroup SourceOfResultGroup { get { return (new SetOfIfcStructuralResultGroupSerializer()).FromAttr(m_instance, "SourceOfResultGroup"); } }
        public SetOfIfcStructuralAnalysisModel LoadGroupFor { get { return (new SetOfIfcStructuralAnalysisModelSerializer()).FromAttr(m_instance, "LoadGroupFor"); } }

        protected override TextValue EntityName() { return "IfcStructuralLoadGroup"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadCase
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadCase : IfcStructuralLoadGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadCase
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadCase(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadCase() : base(0) { }

        public static implicit operator IfcStructuralLoadCase(SdaiInstance instance) => new IfcStructuralLoadCase(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadCase and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadCase Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadCase"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcRatioMeasure SelfWeightCoefficients { get { return (new ListOfIfcRatioMeasureSerializer()).FromAttr(m_instance, "SelfWeightCoefficients"); } }
        public void put_SelfWeightCoefficients(IEnumerable<double> lst) { (new ListOfIfcRatioMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SelfWeightCoefficients"); }
        public void put_SelfWeightCoefficients_untyped(IEnumerable lst) { (new ListOfIfcRatioMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SelfWeightCoefficients"); }

        protected override TextValue EntityName() { return "IfcStructuralLoadCase"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadConfiguration
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadConfiguration : IfcStructuralLoad
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadConfiguration
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadConfiguration(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadConfiguration() : base(0) { }

        public static implicit operator IfcStructuralLoadConfiguration(SdaiInstance instance) => new IfcStructuralLoadConfiguration(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadConfiguration and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadConfiguration Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadConfiguration"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcStructuralLoadOrResult Values { get { return (new ListOfIfcStructuralLoadOrResultSerializer()).FromAttr(m_instance, "Values"); } }
        public void put_Values(IEnumerable<IfcStructuralLoadOrResult> lst) { (new ListOfIfcStructuralLoadOrResultSerializer()).ToSdaiAggr(lst, m_instance, "Values"); }
        public void put_Values_untyped(IEnumerable lst) { (new ListOfIfcStructuralLoadOrResultSerializer()).ToSdaiAggr(lst, m_instance, "Values"); }
        public ListOfListOfIfcLengthMeasure Locations { get { return (new ListOfListOfIfcLengthMeasureSerializer()).FromAttr(m_instance, "Locations"); } }
        public void put_Locations(IEnumerable<ListOfIfcLengthMeasure> lst) { (new ListOfListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "Locations"); }
        public void put_Locations_untyped(IEnumerable lst) { (new ListOfListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "Locations"); }

        protected override TextValue EntityName() { return "IfcStructuralLoadConfiguration"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadOrResult
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadOrResult : IfcStructuralLoad
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadOrResult
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadOrResult(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadOrResult() : base(0) { }

        public static implicit operator IfcStructuralLoadOrResult(SdaiInstance instance) => new IfcStructuralLoadOrResult(instance);


        protected override TextValue EntityName() { return "IfcStructuralLoadOrResult"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadStatic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadStatic : IfcStructuralLoadOrResult
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadStatic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadStatic(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadStatic() : base(0) { }

        public static implicit operator IfcStructuralLoadStatic(SdaiInstance instance) => new IfcStructuralLoadStatic(instance);


        protected override TextValue EntityName() { return "IfcStructuralLoadStatic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadLinearForce
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadLinearForce : IfcStructuralLoadStatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadLinearForce
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadLinearForce(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadLinearForce() : base(0) { }

        public static implicit operator IfcStructuralLoadLinearForce(SdaiInstance instance) => new IfcStructuralLoadLinearForce(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadLinearForce and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadLinearForce Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadLinearForce"); Debug.Assert(inst != 0); return inst; }

        public double? LinearForceX
            {
            get { return get_double("LinearForceX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearForceX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearForceY
            {
            get { return get_double("LinearForceY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearForceY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearForceZ
            {
            get { return get_double("LinearForceZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearForceZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearMomentX
            {
            get { return get_double("LinearMomentX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearMomentX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearMomentY
            {
            get { return get_double("LinearMomentY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearMomentY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearMomentZ
            {
            get { return get_double("LinearMomentZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearMomentZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralLoadLinearForce"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadPlanarForce
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadPlanarForce : IfcStructuralLoadStatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadPlanarForce
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadPlanarForce(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadPlanarForce() : base(0) { }

        public static implicit operator IfcStructuralLoadPlanarForce(SdaiInstance instance) => new IfcStructuralLoadPlanarForce(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadPlanarForce and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadPlanarForce Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadPlanarForce"); Debug.Assert(inst != 0); return inst; }

        public double? PlanarForceX
            {
            get { return get_double("PlanarForceX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PlanarForceX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PlanarForceY
            {
            get { return get_double("PlanarForceY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PlanarForceY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PlanarForceZ
            {
            get { return get_double("PlanarForceZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PlanarForceZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralLoadPlanarForce"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleDisplacement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadSingleDisplacement : IfcStructuralLoadStatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadSingleDisplacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadSingleDisplacement(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadSingleDisplacement() : base(0) { }

        public static implicit operator IfcStructuralLoadSingleDisplacement(SdaiInstance instance) => new IfcStructuralLoadSingleDisplacement(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadSingleDisplacement and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadSingleDisplacement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleDisplacement"); Debug.Assert(inst != 0); return inst; }

        public double? DisplacementX
            {
            get { return get_double("DisplacementX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DisplacementX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DisplacementY
            {
            get { return get_double("DisplacementY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DisplacementY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DisplacementZ
            {
            get { return get_double("DisplacementZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DisplacementZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalDisplacementRX
            {
            get { return get_double("RotationalDisplacementRX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalDisplacementRX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalDisplacementRY
            {
            get { return get_double("RotationalDisplacementRY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalDisplacementRY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? RotationalDisplacementRZ
            {
            get { return get_double("RotationalDisplacementRZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RotationalDisplacementRZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralLoadSingleDisplacement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleDisplacementDistortion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadSingleDisplacementDistortion : IfcStructuralLoadSingleDisplacement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadSingleDisplacementDistortion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadSingleDisplacementDistortion(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadSingleDisplacementDistortion() : base(0) { }

        public static implicit operator IfcStructuralLoadSingleDisplacementDistortion(SdaiInstance instance) => new IfcStructuralLoadSingleDisplacementDistortion(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadSingleDisplacementDistortion and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadSingleDisplacementDistortion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleDisplacementDistortion"); Debug.Assert(inst != 0); return inst; }

        public double? Distortion
            {
            get { return get_double("Distortion", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Distortion", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralLoadSingleDisplacementDistortion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleForce
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadSingleForce : IfcStructuralLoadStatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadSingleForce
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadSingleForce(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadSingleForce() : base(0) { }

        public static implicit operator IfcStructuralLoadSingleForce(SdaiInstance instance) => new IfcStructuralLoadSingleForce(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadSingleForce and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadSingleForce Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleForce"); Debug.Assert(inst != 0); return inst; }

        public double? ForceX
            {
            get { return get_double("ForceX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ForceX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ForceY
            {
            get { return get_double("ForceY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ForceY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ForceZ
            {
            get { return get_double("ForceZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ForceZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MomentX
            {
            get { return get_double("MomentX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MomentX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MomentY
            {
            get { return get_double("MomentY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MomentY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MomentZ
            {
            get { return get_double("MomentZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MomentZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralLoadSingleForce"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleForceWarping
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadSingleForceWarping : IfcStructuralLoadSingleForce
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadSingleForceWarping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadSingleForceWarping(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadSingleForceWarping() : base(0) { }

        public static implicit operator IfcStructuralLoadSingleForceWarping(SdaiInstance instance) => new IfcStructuralLoadSingleForceWarping(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadSingleForceWarping and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadSingleForceWarping Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleForceWarping"); Debug.Assert(inst != 0); return inst; }

        public double? WarpingMoment
            {
            get { return get_double("WarpingMoment", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WarpingMoment", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralLoadSingleForceWarping"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralLoadTemperature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralLoadTemperature : IfcStructuralLoadStatic
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralLoadTemperature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralLoadTemperature(SdaiInstance instance) : base(instance) { }
        public IfcStructuralLoadTemperature() : base(0) { }

        public static implicit operator IfcStructuralLoadTemperature(SdaiInstance instance) => new IfcStructuralLoadTemperature(instance);

        /// <summary>
        /// Create new instace of IfcStructuralLoadTemperature and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralLoadTemperature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralLoadTemperature"); Debug.Assert(inst != 0); return inst; }

        public double? DeltaTConstant
            {
            get { return get_double("DeltaTConstant", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DeltaTConstant", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DeltaTY
            {
            get { return get_double("DeltaTY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DeltaTY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DeltaTZ
            {
            get { return get_double("DeltaTZ", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DeltaTZ", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralLoadTemperature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralSurfaceAction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralSurfaceAction : IfcStructuralAction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralSurfaceAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralSurfaceAction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralSurfaceAction() : base(0) { }

        public static implicit operator IfcStructuralSurfaceAction(SdaiInstance instance) => new IfcStructuralSurfaceAction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralSurfaceAction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralSurfaceAction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralSurfaceAction"); Debug.Assert(inst != 0); return inst; }

        public IfcProjectedOrTrueLengthEnum? ProjectedOrTrue 
            { 
            get { var str = get_string("ProjectedOrTrue", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcProjectedOrTrueLengthEnum_); return EnumValue<IfcProjectedOrTrueLengthEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcProjectedOrTrueLengthEnum>.FromValue(value.Value, EnumNames.IfcProjectedOrTrueLengthEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ProjectedOrTrue", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcStructuralSurfaceActivityTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStructuralSurfaceActivityTypeEnum_); return EnumValue<IfcStructuralSurfaceActivityTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStructuralSurfaceActivityTypeEnum>.FromValue(value.Value, EnumNames.IfcStructuralSurfaceActivityTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralSurfaceAction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralPlanarAction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralPlanarAction : IfcStructuralSurfaceAction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralPlanarAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralPlanarAction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralPlanarAction() : base(0) { }

        public static implicit operator IfcStructuralPlanarAction(SdaiInstance instance) => new IfcStructuralPlanarAction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralPlanarAction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralPlanarAction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralPlanarAction"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcStructuralPlanarAction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralPointAction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralPointAction : IfcStructuralAction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralPointAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralPointAction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralPointAction() : base(0) { }

        public static implicit operator IfcStructuralPointAction(SdaiInstance instance) => new IfcStructuralPointAction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralPointAction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralPointAction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralPointAction"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcStructuralPointAction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralPointConnection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralPointConnection : IfcStructuralConnection
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralPointConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralPointConnection(SdaiInstance instance) : base(instance) { }
        public IfcStructuralPointConnection() : base(0) { }

        public static implicit operator IfcStructuralPointConnection(SdaiInstance instance) => new IfcStructuralPointConnection(instance);

        /// <summary>
        /// Create new instace of IfcStructuralPointConnection and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralPointConnection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralPointConnection"); Debug.Assert(inst != 0); return inst; }

        public IfcAxis2Placement3D ConditionCoordinateSystem 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ConditionCoordinateSystem", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ConditionCoordinateSystem", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcStructuralPointConnection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralPointReaction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralPointReaction : IfcStructuralReaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralPointReaction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralPointReaction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralPointReaction() : base(0) { }

        public static implicit operator IfcStructuralPointReaction(SdaiInstance instance) => new IfcStructuralPointReaction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralPointReaction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralPointReaction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralPointReaction"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcStructuralPointReaction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralResultGroup
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralResultGroup : IfcGroup
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralResultGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralResultGroup(SdaiInstance instance) : base(instance) { }
        public IfcStructuralResultGroup() : base(0) { }

        public static implicit operator IfcStructuralResultGroup(SdaiInstance instance) => new IfcStructuralResultGroup(instance);

        /// <summary>
        /// Create new instace of IfcStructuralResultGroup and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralResultGroup Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralResultGroup"); Debug.Assert(inst != 0); return inst; }

        public IfcAnalysisTheoryTypeEnum? TheoryType 
            { 
            get { var str = get_string("TheoryType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcAnalysisTheoryTypeEnum_); return EnumValue<IfcAnalysisTheoryTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcAnalysisTheoryTypeEnum>.FromValue(value.Value, EnumNames.IfcAnalysisTheoryTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "TheoryType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcStructuralLoadGroup ResultForLoadGroup 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ResultForLoadGroup", ifcengine.sdaiINSTANCE, out inst); return new IfcStructuralLoadGroup(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ResultForLoadGroup", ifcengine.sdaiINSTANCE, i); }
            }
        public bool? IsLinear
            {
            get { return get_bool("IsLinear", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsLinear", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public SetOfIfcStructuralAnalysisModel ResultGroupFor { get { return (new SetOfIfcStructuralAnalysisModelSerializer()).FromAttr(m_instance, "ResultGroupFor"); } }

        protected override TextValue EntityName() { return "IfcStructuralResultGroup"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralSurfaceConnection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralSurfaceConnection : IfcStructuralConnection
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralSurfaceConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralSurfaceConnection(SdaiInstance instance) : base(instance) { }
        public IfcStructuralSurfaceConnection() : base(0) { }

        public static implicit operator IfcStructuralSurfaceConnection(SdaiInstance instance) => new IfcStructuralSurfaceConnection(instance);

        /// <summary>
        /// Create new instace of IfcStructuralSurfaceConnection and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralSurfaceConnection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralSurfaceConnection"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcStructuralSurfaceConnection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralSurfaceMember
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralSurfaceMember : IfcStructuralMember
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralSurfaceMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralSurfaceMember(SdaiInstance instance) : base(instance) { }
        public IfcStructuralSurfaceMember() : base(0) { }

        public static implicit operator IfcStructuralSurfaceMember(SdaiInstance instance) => new IfcStructuralSurfaceMember(instance);

        /// <summary>
        /// Create new instace of IfcStructuralSurfaceMember and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralSurfaceMember Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralSurfaceMember"); Debug.Assert(inst != 0); return inst; }

        public IfcStructuralSurfaceMemberTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStructuralSurfaceMemberTypeEnum_); return EnumValue<IfcStructuralSurfaceMemberTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStructuralSurfaceMemberTypeEnum>.FromValue(value.Value, EnumNames.IfcStructuralSurfaceMemberTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? Thickness
            {
            get { return get_double("Thickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Thickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralSurfaceMember"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralSurfaceMemberVarying
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralSurfaceMemberVarying : IfcStructuralSurfaceMember
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralSurfaceMemberVarying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralSurfaceMemberVarying(SdaiInstance instance) : base(instance) { }
        public IfcStructuralSurfaceMemberVarying() : base(0) { }

        public static implicit operator IfcStructuralSurfaceMemberVarying(SdaiInstance instance) => new IfcStructuralSurfaceMemberVarying(instance);

        /// <summary>
        /// Create new instace of IfcStructuralSurfaceMemberVarying and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralSurfaceMemberVarying Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralSurfaceMemberVarying"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcStructuralSurfaceMemberVarying"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStructuralSurfaceReaction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStructuralSurfaceReaction : IfcStructuralReaction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStructuralSurfaceReaction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStructuralSurfaceReaction(SdaiInstance instance) : base(instance) { }
        public IfcStructuralSurfaceReaction() : base(0) { }

        public static implicit operator IfcStructuralSurfaceReaction(SdaiInstance instance) => new IfcStructuralSurfaceReaction(instance);

        /// <summary>
        /// Create new instace of IfcStructuralSurfaceReaction and returns object of this class to interact with
        /// </summary>
        public static new IfcStructuralSurfaceReaction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStructuralSurfaceReaction"); Debug.Assert(inst != 0); return inst; }

        public IfcStructuralSurfaceActivityTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcStructuralSurfaceActivityTypeEnum_); return EnumValue<IfcStructuralSurfaceActivityTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcStructuralSurfaceActivityTypeEnum>.FromValue(value.Value, EnumNames.IfcStructuralSurfaceActivityTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcStructuralSurfaceReaction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStyledItem
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStyledItem : IfcRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStyledItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStyledItem(SdaiInstance instance) : base(instance) { }
        public IfcStyledItem() : base(0) { }

        public static implicit operator IfcStyledItem(SdaiInstance instance) => new IfcStyledItem(instance);

        /// <summary>
        /// Create new instace of IfcStyledItem and returns object of this class to interact with
        /// </summary>
        public static new IfcStyledItem Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStyledItem"); Debug.Assert(inst != 0); return inst; }

        public IfcRepresentationItem Item 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Item", ifcengine.sdaiINSTANCE, out inst); return new IfcRepresentationItem(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Item", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcPresentationStyle Styles { get { return (new SetOfIfcPresentationStyleSerializer()).FromAttr(m_instance, "Styles"); } }
        public void put_Styles(IEnumerable<IfcPresentationStyle> lst) { (new SetOfIfcPresentationStyleSerializer()).ToSdaiAggr(lst, m_instance, "Styles"); }
        public void put_Styles_untyped(IEnumerable lst) { (new SetOfIfcPresentationStyleSerializer()).ToSdaiAggr(lst, m_instance, "Styles"); }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcStyledItem"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStyleModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStyleModel : IfcRepresentation
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStyleModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStyleModel(SdaiInstance instance) : base(instance) { }
        public IfcStyleModel() : base(0) { }

        public static implicit operator IfcStyleModel(SdaiInstance instance) => new IfcStyleModel(instance);


        protected override TextValue EntityName() { return "IfcStyleModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcStyledRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcStyledRepresentation : IfcStyleModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcStyledRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcStyledRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcStyledRepresentation() : base(0) { }

        public static implicit operator IfcStyledRepresentation(SdaiInstance instance) => new IfcStyledRepresentation(instance);

        /// <summary>
        /// Create new instace of IfcStyledRepresentation and returns object of this class to interact with
        /// </summary>
        public static new IfcStyledRepresentation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcStyledRepresentation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcStyledRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSubContractResource
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSubContractResource : IfcConstructionResource
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSubContractResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSubContractResource(SdaiInstance instance) : base(instance) { }
        public IfcSubContractResource() : base(0) { }

        public static implicit operator IfcSubContractResource(SdaiInstance instance) => new IfcSubContractResource(instance);

        /// <summary>
        /// Create new instace of IfcSubContractResource and returns object of this class to interact with
        /// </summary>
        public static new IfcSubContractResource Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSubContractResource"); Debug.Assert(inst != 0); return inst; }

        public IfcSubContractResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSubContractResourceTypeEnum_); return EnumValue<IfcSubContractResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSubContractResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcSubContractResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSubContractResource"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSubContractResourceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSubContractResourceType : IfcConstructionResourceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSubContractResourceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSubContractResourceType(SdaiInstance instance) : base(instance) { }
        public IfcSubContractResourceType() : base(0) { }

        public static implicit operator IfcSubContractResourceType(SdaiInstance instance) => new IfcSubContractResourceType(instance);

        /// <summary>
        /// Create new instace of IfcSubContractResourceType and returns object of this class to interact with
        /// </summary>
        public static new IfcSubContractResourceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSubContractResourceType"); Debug.Assert(inst != 0); return inst; }

        public IfcSubContractResourceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSubContractResourceTypeEnum_); return EnumValue<IfcSubContractResourceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSubContractResourceTypeEnum>.FromValue(value.Value, EnumNames.IfcSubContractResourceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSubContractResourceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSubedge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSubedge : IfcEdge
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSubedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSubedge(SdaiInstance instance) : base(instance) { }
        public IfcSubedge() : base(0) { }

        public static implicit operator IfcSubedge(SdaiInstance instance) => new IfcSubedge(instance);

        /// <summary>
        /// Create new instace of IfcSubedge and returns object of this class to interact with
        /// </summary>
        public static new IfcSubedge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSubedge"); Debug.Assert(inst != 0); return inst; }

        public IfcEdge ParentEdge 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ParentEdge", ifcengine.sdaiINSTANCE, out inst); return new IfcEdge(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ParentEdge", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcSubedge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceCurveSweptAreaSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceCurveSweptAreaSolid : IfcDirectrixCurveSweptAreaSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceCurveSweptAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceCurveSweptAreaSolid(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceCurveSweptAreaSolid() : base(0) { }

        public static implicit operator IfcSurfaceCurveSweptAreaSolid(SdaiInstance instance) => new IfcSurfaceCurveSweptAreaSolid(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceCurveSweptAreaSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceCurveSweptAreaSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceCurveSweptAreaSolid"); Debug.Assert(inst != 0); return inst; }

        public IfcSurface ReferenceSurface 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ReferenceSurface", ifcengine.sdaiINSTANCE, out inst); return new IfcSurface(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ReferenceSurface", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcSurfaceCurveSweptAreaSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceFeature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceFeature : IfcFeatureElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceFeature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceFeature(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceFeature() : base(0) { }

        public static implicit operator IfcSurfaceFeature(SdaiInstance instance) => new IfcSurfaceFeature(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceFeature and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceFeature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceFeature"); Debug.Assert(inst != 0); return inst; }

        public IfcSurfaceFeatureTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSurfaceFeatureTypeEnum_); return EnumValue<IfcSurfaceFeatureTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSurfaceFeatureTypeEnum>.FromValue(value.Value, EnumNames.IfcSurfaceFeatureTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcRelAdheresToElement AdheresToElement { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AdheresToElement", ifcengine.sdaiINSTANCE, out inst); return new IfcRelAdheresToElement(inst); } }

        protected override TextValue EntityName() { return "IfcSurfaceFeature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSweptSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSweptSurface : IfcSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSweptSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSweptSurface(SdaiInstance instance) : base(instance) { }
        public IfcSweptSurface() : base(0) { }

        public static implicit operator IfcSweptSurface(SdaiInstance instance) => new IfcSweptSurface(instance);

        public IfcProfileDef SweptCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SweptCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcProfileDef(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SweptCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcAxis2Placement3D Position 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis2Placement3D(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Position", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcSweptSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceOfLinearExtrusion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceOfLinearExtrusion : IfcSweptSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceOfLinearExtrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceOfLinearExtrusion(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceOfLinearExtrusion() : base(0) { }

        public static implicit operator IfcSurfaceOfLinearExtrusion(SdaiInstance instance) => new IfcSurfaceOfLinearExtrusion(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceOfLinearExtrusion and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceOfLinearExtrusion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceOfLinearExtrusion"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection ExtrudedDirection 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ExtrudedDirection", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ExtrudedDirection", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSurfaceOfLinearExtrusion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceOfRevolution
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceOfRevolution : IfcSweptSurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceOfRevolution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceOfRevolution(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceOfRevolution() : base(0) { }

        public static implicit operator IfcSurfaceOfRevolution(SdaiInstance instance) => new IfcSurfaceOfRevolution(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceOfRevolution and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceOfRevolution Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceOfRevolution"); Debug.Assert(inst != 0); return inst; }

        public IfcAxis1Placement AxisPosition 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "AxisPosition", ifcengine.sdaiINSTANCE, out inst); return new IfcAxis1Placement(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "AxisPosition", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcSurfaceOfRevolution"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceReinforcementArea
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceReinforcementArea : IfcStructuralLoadOrResult
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceReinforcementArea
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceReinforcementArea(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceReinforcementArea() : base(0) { }

        public static implicit operator IfcSurfaceReinforcementArea(SdaiInstance instance) => new IfcSurfaceReinforcementArea(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceReinforcementArea and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceReinforcementArea Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceReinforcementArea"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcLengthMeasure SurfaceReinforcement1 { get { return (new ListOfIfcLengthMeasureSerializer()).FromAttr(m_instance, "SurfaceReinforcement1"); } }
        public void put_SurfaceReinforcement1(IEnumerable<double> lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SurfaceReinforcement1"); }
        public void put_SurfaceReinforcement1_untyped(IEnumerable lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SurfaceReinforcement1"); }
        public ListOfIfcLengthMeasure SurfaceReinforcement2 { get { return (new ListOfIfcLengthMeasureSerializer()).FromAttr(m_instance, "SurfaceReinforcement2"); } }
        public void put_SurfaceReinforcement2(IEnumerable<double> lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SurfaceReinforcement2"); }
        public void put_SurfaceReinforcement2_untyped(IEnumerable lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "SurfaceReinforcement2"); }
        public double? ShearReinforcement
            {
            get { return get_double("ShearReinforcement", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ShearReinforcement", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSurfaceReinforcementArea"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyle : IfcPresentationStyle
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyle(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyle() : base(0) { }

        public static implicit operator IfcSurfaceStyle(SdaiInstance instance) => new IfcSurfaceStyle(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyle"); Debug.Assert(inst != 0); return inst; }

        public IfcSurfaceSide? Side 
            { 
            get { var str = get_string("Side", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSurfaceSide_); return EnumValue<IfcSurfaceSide>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSurfaceSide>.FromValue(value.Value, EnumNames.IfcSurfaceSide_); ifcengine.sdaiPutAttrBN(m_instance, "Side", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public SetOfIfcSurfaceStyleElementSelect Styles { get { return (new SetOfIfcSurfaceStyleElementSelectSerializer()).FromAttr(m_instance, "Styles"); } }
        public void put_Styles(IEnumerable<IfcSurfaceStyleElementSelect> lst) { (new SetOfIfcSurfaceStyleElementSelectSerializer()).ToSdaiAggr(lst, m_instance, "Styles"); }
        public void put_Styles_untyped(IEnumerable lst) { (new SetOfIfcSurfaceStyleElementSelectSerializer()).ToSdaiAggr(lst, m_instance, "Styles"); }

        protected override TextValue EntityName() { return "IfcSurfaceStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyleLighting
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyleLighting : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyleLighting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyleLighting(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyleLighting() : base(0) { }

        public static implicit operator IfcSurfaceStyleLighting(SdaiInstance instance) => new IfcSurfaceStyleLighting(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyleLighting and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyleLighting Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyleLighting"); Debug.Assert(inst != 0); return inst; }

        public IfcColourRgb DiffuseTransmissionColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DiffuseTransmissionColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DiffuseTransmissionColour", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcColourRgb DiffuseReflectionColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "DiffuseReflectionColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "DiffuseReflectionColour", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcColourRgb TransmissionColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TransmissionColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TransmissionColour", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcColourRgb ReflectanceColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ReflectanceColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ReflectanceColour", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcSurfaceStyleLighting"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyleRefraction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyleRefraction : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyleRefraction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyleRefraction(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyleRefraction() : base(0) { }

        public static implicit operator IfcSurfaceStyleRefraction(SdaiInstance instance) => new IfcSurfaceStyleRefraction(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyleRefraction and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyleRefraction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyleRefraction"); Debug.Assert(inst != 0); return inst; }

        public double? RefractionIndex
            {
            get { return get_double("RefractionIndex", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "RefractionIndex", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? DispersionFactor
            {
            get { return get_double("DispersionFactor", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "DispersionFactor", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSurfaceStyleRefraction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyleShading
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyleShading : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyleShading
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyleShading(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyleShading() : base(0) { }

        public static implicit operator IfcSurfaceStyleShading(SdaiInstance instance) => new IfcSurfaceStyleShading(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyleShading and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyleShading Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyleShading"); Debug.Assert(inst != 0); return inst; }

        public IfcColourRgb SurfaceColour 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "SurfaceColour", ifcengine.sdaiINSTANCE, out inst); return new IfcColourRgb(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "SurfaceColour", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Transparency
            {
            get { return get_double("Transparency", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Transparency", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSurfaceStyleShading"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyleRendering
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyleRendering : IfcSurfaceStyleShading
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyleRendering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyleRendering(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyleRendering() : base(0) { }

        public static implicit operator IfcSurfaceStyleRendering(SdaiInstance instance) => new IfcSurfaceStyleRendering(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyleRendering and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyleRendering Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyleRendering"); Debug.Assert(inst != 0); return inst; }


        public IfcColourOrFactor DiffuseColour
            {
            get { return new IfcColourOrFactor(m_instance, "DiffuseColour", 0); }
            }

        public IfcColourOrFactor TransmissionColour
            {
            get { return new IfcColourOrFactor(m_instance, "TransmissionColour", 0); }
            }

        public IfcColourOrFactor DiffuseTransmissionColour
            {
            get { return new IfcColourOrFactor(m_instance, "DiffuseTransmissionColour", 0); }
            }

        public IfcColourOrFactor ReflectionColour
            {
            get { return new IfcColourOrFactor(m_instance, "ReflectionColour", 0); }
            }

        public IfcColourOrFactor SpecularColour
            {
            get { return new IfcColourOrFactor(m_instance, "SpecularColour", 0); }
            }

        public IfcSpecularHighlightSelect SpecularHighlight
            {
            get { return new IfcSpecularHighlightSelect(m_instance, "SpecularHighlight", 0); }
            }
        public IfcReflectanceMethodEnum? ReflectanceMethod 
            { 
            get { var str = get_string("ReflectanceMethod", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcReflectanceMethodEnum_); return EnumValue<IfcReflectanceMethodEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcReflectanceMethodEnum>.FromValue(value.Value, EnumNames.IfcReflectanceMethodEnum_); ifcengine.sdaiPutAttrBN(m_instance, "ReflectanceMethod", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSurfaceStyleRendering"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSurfaceStyleWithTextures
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSurfaceStyleWithTextures : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSurfaceStyleWithTextures
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSurfaceStyleWithTextures(SdaiInstance instance) : base(instance) { }
        public IfcSurfaceStyleWithTextures() : base(0) { }

        public static implicit operator IfcSurfaceStyleWithTextures(SdaiInstance instance) => new IfcSurfaceStyleWithTextures(instance);

        /// <summary>
        /// Create new instace of IfcSurfaceStyleWithTextures and returns object of this class to interact with
        /// </summary>
        public static new IfcSurfaceStyleWithTextures Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSurfaceStyleWithTextures"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcSurfaceTexture Textures { get { return (new ListOfIfcSurfaceTextureSerializer()).FromAttr(m_instance, "Textures"); } }
        public void put_Textures(IEnumerable<IfcSurfaceTexture> lst) { (new ListOfIfcSurfaceTextureSerializer()).ToSdaiAggr(lst, m_instance, "Textures"); }
        public void put_Textures_untyped(IEnumerable lst) { (new ListOfIfcSurfaceTextureSerializer()).ToSdaiAggr(lst, m_instance, "Textures"); }

        protected override TextValue EntityName() { return "IfcSurfaceStyleWithTextures"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSweptDiskSolid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSweptDiskSolid : IfcSolidModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSweptDiskSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSweptDiskSolid(SdaiInstance instance) : base(instance) { }
        public IfcSweptDiskSolid() : base(0) { }

        public static implicit operator IfcSweptDiskSolid(SdaiInstance instance) => new IfcSweptDiskSolid(instance);

        /// <summary>
        /// Create new instace of IfcSweptDiskSolid and returns object of this class to interact with
        /// </summary>
        public static new IfcSweptDiskSolid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSweptDiskSolid"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve Directrix 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Directrix", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Radius
            {
            get { return get_double("Radius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Radius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? InnerRadius
            {
            get { return get_double("InnerRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "InnerRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? StartParam
            {
            get { return get_double("StartParam", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "StartParam", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EndParam
            {
            get { return get_double("EndParam", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EndParam", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSweptDiskSolid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSweptDiskSolidPolygonal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSweptDiskSolidPolygonal : IfcSweptDiskSolid
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSweptDiskSolidPolygonal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSweptDiskSolidPolygonal(SdaiInstance instance) : base(instance) { }
        public IfcSweptDiskSolidPolygonal() : base(0) { }

        public static implicit operator IfcSweptDiskSolidPolygonal(SdaiInstance instance) => new IfcSweptDiskSolidPolygonal(instance);

        /// <summary>
        /// Create new instace of IfcSweptDiskSolidPolygonal and returns object of this class to interact with
        /// </summary>
        public static new IfcSweptDiskSolidPolygonal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSweptDiskSolidPolygonal"); Debug.Assert(inst != 0); return inst; }

        public double? FilletRadius
            {
            get { return get_double("FilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSweptDiskSolidPolygonal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSwitchingDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSwitchingDevice : IfcFlowController
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSwitchingDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSwitchingDevice(SdaiInstance instance) : base(instance) { }
        public IfcSwitchingDevice() : base(0) { }

        public static implicit operator IfcSwitchingDevice(SdaiInstance instance) => new IfcSwitchingDevice(instance);

        /// <summary>
        /// Create new instace of IfcSwitchingDevice and returns object of this class to interact with
        /// </summary>
        public static new IfcSwitchingDevice Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSwitchingDevice"); Debug.Assert(inst != 0); return inst; }

        public IfcSwitchingDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSwitchingDeviceTypeEnum_); return EnumValue<IfcSwitchingDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSwitchingDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcSwitchingDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSwitchingDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSwitchingDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSwitchingDeviceType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSwitchingDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSwitchingDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcSwitchingDeviceType() : base(0) { }

        public static implicit operator IfcSwitchingDeviceType(SdaiInstance instance) => new IfcSwitchingDeviceType(instance);

        /// <summary>
        /// Create new instace of IfcSwitchingDeviceType and returns object of this class to interact with
        /// </summary>
        public static new IfcSwitchingDeviceType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSwitchingDeviceType"); Debug.Assert(inst != 0); return inst; }

        public IfcSwitchingDeviceTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSwitchingDeviceTypeEnum_); return EnumValue<IfcSwitchingDeviceTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSwitchingDeviceTypeEnum>.FromValue(value.Value, EnumNames.IfcSwitchingDeviceTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSwitchingDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSystemFurnitureElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSystemFurnitureElement : IfcFurnishingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSystemFurnitureElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSystemFurnitureElement(SdaiInstance instance) : base(instance) { }
        public IfcSystemFurnitureElement() : base(0) { }

        public static implicit operator IfcSystemFurnitureElement(SdaiInstance instance) => new IfcSystemFurnitureElement(instance);

        /// <summary>
        /// Create new instace of IfcSystemFurnitureElement and returns object of this class to interact with
        /// </summary>
        public static new IfcSystemFurnitureElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSystemFurnitureElement"); Debug.Assert(inst != 0); return inst; }

        public IfcSystemFurnitureElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSystemFurnitureElementTypeEnum_); return EnumValue<IfcSystemFurnitureElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSystemFurnitureElementTypeEnum>.FromValue(value.Value, EnumNames.IfcSystemFurnitureElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSystemFurnitureElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcSystemFurnitureElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcSystemFurnitureElementType : IfcFurnishingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcSystemFurnitureElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcSystemFurnitureElementType(SdaiInstance instance) : base(instance) { }
        public IfcSystemFurnitureElementType() : base(0) { }

        public static implicit operator IfcSystemFurnitureElementType(SdaiInstance instance) => new IfcSystemFurnitureElementType(instance);

        /// <summary>
        /// Create new instace of IfcSystemFurnitureElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcSystemFurnitureElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcSystemFurnitureElementType"); Debug.Assert(inst != 0); return inst; }

        public IfcSystemFurnitureElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcSystemFurnitureElementTypeEnum_); return EnumValue<IfcSystemFurnitureElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcSystemFurnitureElementTypeEnum>.FromValue(value.Value, EnumNames.IfcSystemFurnitureElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcSystemFurnitureElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTable : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTable(SdaiInstance instance) : base(instance) { }
        public IfcTable() : base(0) { }

        public static implicit operator IfcTable(SdaiInstance instance) => new IfcTable(instance);

        /// <summary>
        /// Create new instace of IfcTable and returns object of this class to interact with
        /// </summary>
        public static new IfcTable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTable"); Debug.Assert(inst != 0); return inst; }

        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcTableRow Rows { get { return (new ListOfIfcTableRowSerializer()).FromAttr(m_instance, "Rows"); } }
        public void put_Rows(IEnumerable<IfcTableRow> lst) { (new ListOfIfcTableRowSerializer()).ToSdaiAggr(lst, m_instance, "Rows"); }
        public void put_Rows_untyped(IEnumerable lst) { (new ListOfIfcTableRowSerializer()).ToSdaiAggr(lst, m_instance, "Rows"); }
        public ListOfIfcTableColumn Columns { get { return (new ListOfIfcTableColumnSerializer()).FromAttr(m_instance, "Columns"); } }
        public void put_Columns(IEnumerable<IfcTableColumn> lst) { (new ListOfIfcTableColumnSerializer()).ToSdaiAggr(lst, m_instance, "Columns"); }
        public void put_Columns_untyped(IEnumerable lst) { (new ListOfIfcTableColumnSerializer()).ToSdaiAggr(lst, m_instance, "Columns"); }

        protected override TextValue EntityName() { return "IfcTable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTableColumn
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTableColumn : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTableColumn
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTableColumn(SdaiInstance instance) : base(instance) { }
        public IfcTableColumn() : base(0) { }

        public static implicit operator IfcTableColumn(SdaiInstance instance) => new IfcTableColumn(instance);

        /// <summary>
        /// Create new instace of IfcTableColumn and returns object of this class to interact with
        /// </summary>
        public static new IfcTableColumn Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTableColumn"); Debug.Assert(inst != 0); return inst; }

        public TextValue Identifier
            {
            get { return get_string("Identifier", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Identifier", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Name
            {
            get { return get_string("Name", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Name", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Description
            {
            get { return get_string("Description", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Description", ifcengine.sdaiSTRING, value); }
            }

        public IfcUnit Unit
            {
            get { return new IfcUnit(m_instance, "Unit", 0); }
            }
        public IfcReference ReferencePath 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ReferencePath", ifcengine.sdaiINSTANCE, out inst); return new IfcReference(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ReferencePath", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcTableColumn"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTableRow
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTableRow : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTableRow
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTableRow(SdaiInstance instance) : base(instance) { }
        public IfcTableRow() : base(0) { }

        public static implicit operator IfcTableRow(SdaiInstance instance) => new IfcTableRow(instance);

        /// <summary>
        /// Create new instace of IfcTableRow and returns object of this class to interact with
        /// </summary>
        public static new IfcTableRow Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTableRow"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcValue RowCells { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "RowCells"); } }
        public void put_RowCells(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "RowCells"); }
        public void put_RowCells_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "RowCells"); }
        public bool? IsHeading
            {
            get { return get_bool("IsHeading", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsHeading", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTableRow"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTank
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTank : IfcFlowStorageDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTank
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTank(SdaiInstance instance) : base(instance) { }
        public IfcTank() : base(0) { }

        public static implicit operator IfcTank(SdaiInstance instance) => new IfcTank(instance);

        /// <summary>
        /// Create new instace of IfcTank and returns object of this class to interact with
        /// </summary>
        public static new IfcTank Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTank"); Debug.Assert(inst != 0); return inst; }

        public IfcTankTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTankTypeEnum_); return EnumValue<IfcTankTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTankTypeEnum>.FromValue(value.Value, EnumNames.IfcTankTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTank"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTankType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTankType : IfcFlowStorageDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTankType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTankType(SdaiInstance instance) : base(instance) { }
        public IfcTankType() : base(0) { }

        public static implicit operator IfcTankType(SdaiInstance instance) => new IfcTankType(instance);

        /// <summary>
        /// Create new instace of IfcTankType and returns object of this class to interact with
        /// </summary>
        public static new IfcTankType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTankType"); Debug.Assert(inst != 0); return inst; }

        public IfcTankTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTankTypeEnum_); return EnumValue<IfcTankTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTankTypeEnum>.FromValue(value.Value, EnumNames.IfcTankTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTankType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTask
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTask : IfcProcess
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTask
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTask(SdaiInstance instance) : base(instance) { }
        public IfcTask() : base(0) { }

        public static implicit operator IfcTask(SdaiInstance instance) => new IfcTask(instance);

        /// <summary>
        /// Create new instace of IfcTask and returns object of this class to interact with
        /// </summary>
        public static new IfcTask Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTask"); Debug.Assert(inst != 0); return inst; }

        public TextValue Status
            {
            get { return get_string("Status", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Status", ifcengine.sdaiSTRING, value); }
            }
        public TextValue WorkMethod
            {
            get { return get_string("WorkMethod", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "WorkMethod", ifcengine.sdaiSTRING, value); }
            }
        public bool? IsMilestone
            {
            get { return get_bool("IsMilestone", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsMilestone", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IntValue? Priority
            {
            get { return get_IntValue("Priority", ifcengine.sdaiINTEGER); }
            set { if (value.HasValue) { IntValue v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Priority", ifcengine.sdaiINTEGER, ref v); } else Debug.Assert(false); }
            }
        public IfcTaskTime TaskTime 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TaskTime", ifcengine.sdaiINSTANCE, out inst); return new IfcTaskTime(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TaskTime", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcTaskTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTaskTypeEnum_); return EnumValue<IfcTaskTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTaskTypeEnum>.FromValue(value.Value, EnumNames.IfcTaskTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTask"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTaskTime
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTaskTime : IfcSchedulingTime
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTaskTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTaskTime(SdaiInstance instance) : base(instance) { }
        public IfcTaskTime() : base(0) { }

        public static implicit operator IfcTaskTime(SdaiInstance instance) => new IfcTaskTime(instance);

        /// <summary>
        /// Create new instace of IfcTaskTime and returns object of this class to interact with
        /// </summary>
        public static new IfcTaskTime Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTaskTime"); Debug.Assert(inst != 0); return inst; }

        public IfcTaskDurationEnum? DurationType 
            { 
            get { var str = get_string("DurationType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTaskDurationEnum_); return EnumValue<IfcTaskDurationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTaskDurationEnum>.FromValue(value.Value, EnumNames.IfcTaskDurationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "DurationType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue ScheduleDuration
            {
            get { return get_string("ScheduleDuration", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ScheduleDuration", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ScheduleStart
            {
            get { return get_string("ScheduleStart", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ScheduleStart", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ScheduleFinish
            {
            get { return get_string("ScheduleFinish", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ScheduleFinish", ifcengine.sdaiSTRING, value); }
            }
        public TextValue EarlyStart
            {
            get { return get_string("EarlyStart", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "EarlyStart", ifcengine.sdaiSTRING, value); }
            }
        public TextValue EarlyFinish
            {
            get { return get_string("EarlyFinish", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "EarlyFinish", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LateStart
            {
            get { return get_string("LateStart", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LateStart", ifcengine.sdaiSTRING, value); }
            }
        public TextValue LateFinish
            {
            get { return get_string("LateFinish", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LateFinish", ifcengine.sdaiSTRING, value); }
            }
        public TextValue FreeFloat
            {
            get { return get_string("FreeFloat", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FreeFloat", ifcengine.sdaiSTRING, value); }
            }
        public TextValue TotalFloat
            {
            get { return get_string("TotalFloat", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TotalFloat", ifcengine.sdaiSTRING, value); }
            }
        public bool? IsCritical
            {
            get { return get_bool("IsCritical", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "IsCritical", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public TextValue StatusTime
            {
            get { return get_string("StatusTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "StatusTime", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ActualDuration
            {
            get { return get_string("ActualDuration", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ActualDuration", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ActualStart
            {
            get { return get_string("ActualStart", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ActualStart", ifcengine.sdaiSTRING, value); }
            }
        public TextValue ActualFinish
            {
            get { return get_string("ActualFinish", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "ActualFinish", ifcengine.sdaiSTRING, value); }
            }
        public TextValue RemainingTime
            {
            get { return get_string("RemainingTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "RemainingTime", ifcengine.sdaiSTRING, value); }
            }
        public double? Completion
            {
            get { return get_double("Completion", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Completion", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTaskTime"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTaskTimeRecurring
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTaskTimeRecurring : IfcTaskTime
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTaskTimeRecurring
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTaskTimeRecurring(SdaiInstance instance) : base(instance) { }
        public IfcTaskTimeRecurring() : base(0) { }

        public static implicit operator IfcTaskTimeRecurring(SdaiInstance instance) => new IfcTaskTimeRecurring(instance);

        /// <summary>
        /// Create new instace of IfcTaskTimeRecurring and returns object of this class to interact with
        /// </summary>
        public static new IfcTaskTimeRecurring Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTaskTimeRecurring"); Debug.Assert(inst != 0); return inst; }

        public IfcRecurrencePattern Recurrence 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Recurrence", ifcengine.sdaiINSTANCE, out inst); return new IfcRecurrencePattern(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Recurrence", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcTaskTimeRecurring"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTaskType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTaskType : IfcTypeProcess
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTaskType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTaskType(SdaiInstance instance) : base(instance) { }
        public IfcTaskType() : base(0) { }

        public static implicit operator IfcTaskType(SdaiInstance instance) => new IfcTaskType(instance);

        /// <summary>
        /// Create new instace of IfcTaskType and returns object of this class to interact with
        /// </summary>
        public static new IfcTaskType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTaskType"); Debug.Assert(inst != 0); return inst; }

        public IfcTaskTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTaskTypeEnum_); return EnumValue<IfcTaskTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTaskTypeEnum>.FromValue(value.Value, EnumNames.IfcTaskTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue WorkMethod
            {
            get { return get_string("WorkMethod", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "WorkMethod", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcTaskType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTelecomAddress
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTelecomAddress : IfcAddress
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTelecomAddress
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTelecomAddress(SdaiInstance instance) : base(instance) { }
        public IfcTelecomAddress() : base(0) { }

        public static implicit operator IfcTelecomAddress(SdaiInstance instance) => new IfcTelecomAddress(instance);

        /// <summary>
        /// Create new instace of IfcTelecomAddress and returns object of this class to interact with
        /// </summary>
        public static new IfcTelecomAddress Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTelecomAddress"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcLabel TelephoneNumbers { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "TelephoneNumbers"); } }
        public void put_TelephoneNumbers(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "TelephoneNumbers"); }
        public void put_TelephoneNumbers_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "TelephoneNumbers"); }
        public ListOfIfcLabel FacsimileNumbers { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "FacsimileNumbers"); } }
        public void put_FacsimileNumbers(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "FacsimileNumbers"); }
        public void put_FacsimileNumbers_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "FacsimileNumbers"); }
        public TextValue PagerNumber
            {
            get { return get_string("PagerNumber", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "PagerNumber", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcLabel ElectronicMailAddresses { get { return (new ListOfIfcLabelSerializer()).FromAttr(m_instance, "ElectronicMailAddresses"); } }
        public void put_ElectronicMailAddresses(IEnumerable<TextValue> lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "ElectronicMailAddresses"); }
        public void put_ElectronicMailAddresses_untyped(IEnumerable lst) { (new ListOfIfcLabelSerializer()).ToSdaiAggr(lst, m_instance, "ElectronicMailAddresses"); }
        public TextValue WWWHomePageURL
            {
            get { return get_string("WWWHomePageURL", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "WWWHomePageURL", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcURIReference MessagingIDs { get { return (new ListOfIfcURIReferenceSerializer()).FromAttr(m_instance, "MessagingIDs"); } }
        public void put_MessagingIDs(IEnumerable<TextValue> lst) { (new ListOfIfcURIReferenceSerializer()).ToSdaiAggr(lst, m_instance, "MessagingIDs"); }
        public void put_MessagingIDs_untyped(IEnumerable lst) { (new ListOfIfcURIReferenceSerializer()).ToSdaiAggr(lst, m_instance, "MessagingIDs"); }

        protected override TextValue EntityName() { return "IfcTelecomAddress"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTendon
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTendon : IfcReinforcingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTendon
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTendon(SdaiInstance instance) : base(instance) { }
        public IfcTendon() : base(0) { }

        public static implicit operator IfcTendon(SdaiInstance instance) => new IfcTendon(instance);

        /// <summary>
        /// Create new instace of IfcTendon and returns object of this class to interact with
        /// </summary>
        public static new IfcTendon Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTendon"); Debug.Assert(inst != 0); return inst; }

        public IfcTendonTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTendonTypeEnum_); return EnumValue<IfcTendonTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTendonTypeEnum>.FromValue(value.Value, EnumNames.IfcTendonTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? NominalDiameter
            {
            get { return get_double("NominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CrossSectionArea
            {
            get { return get_double("CrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TensionForce
            {
            get { return get_double("TensionForce", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TensionForce", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? PreStress
            {
            get { return get_double("PreStress", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "PreStress", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FrictionCoefficient
            {
            get { return get_double("FrictionCoefficient", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FrictionCoefficient", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? AnchorageSlip
            {
            get { return get_double("AnchorageSlip", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "AnchorageSlip", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MinCurvatureRadius
            {
            get { return get_double("MinCurvatureRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MinCurvatureRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTendon"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTendonAnchor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTendonAnchor : IfcReinforcingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTendonAnchor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTendonAnchor(SdaiInstance instance) : base(instance) { }
        public IfcTendonAnchor() : base(0) { }

        public static implicit operator IfcTendonAnchor(SdaiInstance instance) => new IfcTendonAnchor(instance);

        /// <summary>
        /// Create new instace of IfcTendonAnchor and returns object of this class to interact with
        /// </summary>
        public static new IfcTendonAnchor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTendonAnchor"); Debug.Assert(inst != 0); return inst; }

        public IfcTendonAnchorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTendonAnchorTypeEnum_); return EnumValue<IfcTendonAnchorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTendonAnchorTypeEnum>.FromValue(value.Value, EnumNames.IfcTendonAnchorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTendonAnchor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTendonAnchorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTendonAnchorType : IfcReinforcingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTendonAnchorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTendonAnchorType(SdaiInstance instance) : base(instance) { }
        public IfcTendonAnchorType() : base(0) { }

        public static implicit operator IfcTendonAnchorType(SdaiInstance instance) => new IfcTendonAnchorType(instance);

        /// <summary>
        /// Create new instace of IfcTendonAnchorType and returns object of this class to interact with
        /// </summary>
        public static new IfcTendonAnchorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTendonAnchorType"); Debug.Assert(inst != 0); return inst; }

        public IfcTendonAnchorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTendonAnchorTypeEnum_); return EnumValue<IfcTendonAnchorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTendonAnchorTypeEnum>.FromValue(value.Value, EnumNames.IfcTendonAnchorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTendonAnchorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTendonConduit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTendonConduit : IfcReinforcingElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTendonConduit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTendonConduit(SdaiInstance instance) : base(instance) { }
        public IfcTendonConduit() : base(0) { }

        public static implicit operator IfcTendonConduit(SdaiInstance instance) => new IfcTendonConduit(instance);

        /// <summary>
        /// Create new instace of IfcTendonConduit and returns object of this class to interact with
        /// </summary>
        public static new IfcTendonConduit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTendonConduit"); Debug.Assert(inst != 0); return inst; }

        public IfcTendonConduitTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTendonConduitTypeEnum_); return EnumValue<IfcTendonConduitTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTendonConduitTypeEnum>.FromValue(value.Value, EnumNames.IfcTendonConduitTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTendonConduit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTendonConduitType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTendonConduitType : IfcReinforcingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTendonConduitType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTendonConduitType(SdaiInstance instance) : base(instance) { }
        public IfcTendonConduitType() : base(0) { }

        public static implicit operator IfcTendonConduitType(SdaiInstance instance) => new IfcTendonConduitType(instance);

        /// <summary>
        /// Create new instace of IfcTendonConduitType and returns object of this class to interact with
        /// </summary>
        public static new IfcTendonConduitType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTendonConduitType"); Debug.Assert(inst != 0); return inst; }

        public IfcTendonConduitTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTendonConduitTypeEnum_); return EnumValue<IfcTendonConduitTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTendonConduitTypeEnum>.FromValue(value.Value, EnumNames.IfcTendonConduitTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTendonConduitType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTendonType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTendonType : IfcReinforcingElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTendonType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTendonType(SdaiInstance instance) : base(instance) { }
        public IfcTendonType() : base(0) { }

        public static implicit operator IfcTendonType(SdaiInstance instance) => new IfcTendonType(instance);

        /// <summary>
        /// Create new instace of IfcTendonType and returns object of this class to interact with
        /// </summary>
        public static new IfcTendonType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTendonType"); Debug.Assert(inst != 0); return inst; }

        public IfcTendonTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTendonTypeEnum_); return EnumValue<IfcTendonTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTendonTypeEnum>.FromValue(value.Value, EnumNames.IfcTendonTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? NominalDiameter
            {
            get { return get_double("NominalDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "NominalDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? CrossSectionArea
            {
            get { return get_double("CrossSectionArea", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CrossSectionArea", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SheathDiameter
            {
            get { return get_double("SheathDiameter", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SheathDiameter", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTendonType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextLiteral
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextLiteral : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextLiteral
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextLiteral(SdaiInstance instance) : base(instance) { }
        public IfcTextLiteral() : base(0) { }

        public static implicit operator IfcTextLiteral(SdaiInstance instance) => new IfcTextLiteral(instance);

        /// <summary>
        /// Create new instace of IfcTextLiteral and returns object of this class to interact with
        /// </summary>
        public static new IfcTextLiteral Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextLiteral"); Debug.Assert(inst != 0); return inst; }

        public TextValue Literal
            {
            get { return get_string("Literal", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Literal", ifcengine.sdaiSTRING, value); }
            }

        public IfcAxis2Placement Placement
            {
            get { return new IfcAxis2Placement(m_instance, "Placement", 0); }
            }
        public IfcTextPath? Path 
            { 
            get { var str = get_string("Path", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTextPath_); return EnumValue<IfcTextPath>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTextPath>.FromValue(value.Value, EnumNames.IfcTextPath_); ifcengine.sdaiPutAttrBN(m_instance, "Path", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTextLiteral"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextLiteralWithExtent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextLiteralWithExtent : IfcTextLiteral
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextLiteralWithExtent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextLiteralWithExtent(SdaiInstance instance) : base(instance) { }
        public IfcTextLiteralWithExtent() : base(0) { }

        public static implicit operator IfcTextLiteralWithExtent(SdaiInstance instance) => new IfcTextLiteralWithExtent(instance);

        /// <summary>
        /// Create new instace of IfcTextLiteralWithExtent and returns object of this class to interact with
        /// </summary>
        public static new IfcTextLiteralWithExtent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextLiteralWithExtent"); Debug.Assert(inst != 0); return inst; }

        public IfcPlanarExtent Extent 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Extent", ifcengine.sdaiINSTANCE, out inst); return new IfcPlanarExtent(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Extent", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue BoxAlignment
            {
            get { return get_string("BoxAlignment", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "BoxAlignment", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcTextLiteralWithExtent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextStyle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextStyle : IfcPresentationStyle
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextStyle(SdaiInstance instance) : base(instance) { }
        public IfcTextStyle() : base(0) { }

        public static implicit operator IfcTextStyle(SdaiInstance instance) => new IfcTextStyle(instance);

        /// <summary>
        /// Create new instace of IfcTextStyle and returns object of this class to interact with
        /// </summary>
        public static new IfcTextStyle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextStyle"); Debug.Assert(inst != 0); return inst; }

        public IfcTextStyleForDefinedFont TextCharacterAppearance 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TextCharacterAppearance", ifcengine.sdaiINSTANCE, out inst); return new IfcTextStyleForDefinedFont(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TextCharacterAppearance", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcTextStyleTextModel TextStyle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TextStyle", ifcengine.sdaiINSTANCE, out inst); return new IfcTextStyleTextModel(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TextStyle", ifcengine.sdaiINSTANCE, i); }
            }

        public IfcTextFontSelect TextFontStyle
            {
            get { return new IfcTextFontSelect(m_instance, "TextFontStyle", 0); }
            }
        public bool? ModelOrDraughting
            {
            get { return get_bool("ModelOrDraughting", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ModelOrDraughting", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTextStyle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextStyleFontModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextStyleFontModel : IfcPreDefinedTextFont
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextStyleFontModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextStyleFontModel(SdaiInstance instance) : base(instance) { }
        public IfcTextStyleFontModel() : base(0) { }

        public static implicit operator IfcTextStyleFontModel(SdaiInstance instance) => new IfcTextStyleFontModel(instance);

        /// <summary>
        /// Create new instace of IfcTextStyleFontModel and returns object of this class to interact with
        /// </summary>
        public static new IfcTextStyleFontModel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextStyleFontModel"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcTextFontName FontFamily { get { return (new ListOfIfcTextFontNameSerializer()).FromAttr(m_instance, "FontFamily"); } }
        public void put_FontFamily(IEnumerable<TextValue> lst) { (new ListOfIfcTextFontNameSerializer()).ToSdaiAggr(lst, m_instance, "FontFamily"); }
        public void put_FontFamily_untyped(IEnumerable lst) { (new ListOfIfcTextFontNameSerializer()).ToSdaiAggr(lst, m_instance, "FontFamily"); }
        public TextValue FontStyle
            {
            get { return get_string("FontStyle", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FontStyle", ifcengine.sdaiSTRING, value); }
            }
        public TextValue FontVariant
            {
            get { return get_string("FontVariant", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FontVariant", ifcengine.sdaiSTRING, value); }
            }
        public TextValue FontWeight
            {
            get { return get_string("FontWeight", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FontWeight", ifcengine.sdaiSTRING, value); }
            }

        public IfcSizeSelect FontSize
            {
            get { return new IfcSizeSelect(m_instance, "FontSize", 0); }
            }

        protected override TextValue EntityName() { return "IfcTextStyleFontModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextStyleForDefinedFont
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextStyleForDefinedFont : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextStyleForDefinedFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextStyleForDefinedFont(SdaiInstance instance) : base(instance) { }
        public IfcTextStyleForDefinedFont() : base(0) { }

        public static implicit operator IfcTextStyleForDefinedFont(SdaiInstance instance) => new IfcTextStyleForDefinedFont(instance);

        /// <summary>
        /// Create new instace of IfcTextStyleForDefinedFont and returns object of this class to interact with
        /// </summary>
        public static new IfcTextStyleForDefinedFont Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextStyleForDefinedFont"); Debug.Assert(inst != 0); return inst; }


        public IfcColour Colour
            {
            get { return new IfcColour(m_instance, "Colour", 0); }
            }

        public IfcColour BackgroundColour
            {
            get { return new IfcColour(m_instance, "BackgroundColour", 0); }
            }

        protected override TextValue EntityName() { return "IfcTextStyleForDefinedFont"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextStyleTextModel
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextStyleTextModel : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextStyleTextModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextStyleTextModel(SdaiInstance instance) : base(instance) { }
        public IfcTextStyleTextModel() : base(0) { }

        public static implicit operator IfcTextStyleTextModel(SdaiInstance instance) => new IfcTextStyleTextModel(instance);

        /// <summary>
        /// Create new instace of IfcTextStyleTextModel and returns object of this class to interact with
        /// </summary>
        public static new IfcTextStyleTextModel Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextStyleTextModel"); Debug.Assert(inst != 0); return inst; }


        public IfcSizeSelect TextIndent
            {
            get { return new IfcSizeSelect(m_instance, "TextIndent", 0); }
            }
        public TextValue TextAlign
            {
            get { return get_string("TextAlign", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TextAlign", ifcengine.sdaiSTRING, value); }
            }
        public TextValue TextDecoration
            {
            get { return get_string("TextDecoration", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TextDecoration", ifcengine.sdaiSTRING, value); }
            }

        public IfcSizeSelect LetterSpacing
            {
            get { return new IfcSizeSelect(m_instance, "LetterSpacing", 0); }
            }

        public IfcSizeSelect WordSpacing
            {
            get { return new IfcSizeSelect(m_instance, "WordSpacing", 0); }
            }
        public TextValue TextTransform
            {
            get { return get_string("TextTransform", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TextTransform", ifcengine.sdaiSTRING, value); }
            }

        public IfcSizeSelect LineHeight
            {
            get { return new IfcSizeSelect(m_instance, "LineHeight", 0); }
            }

        protected override TextValue EntityName() { return "IfcTextStyleTextModel"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextureCoordinateGenerator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextureCoordinateGenerator : IfcTextureCoordinate
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextureCoordinateGenerator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextureCoordinateGenerator(SdaiInstance instance) : base(instance) { }
        public IfcTextureCoordinateGenerator() : base(0) { }

        public static implicit operator IfcTextureCoordinateGenerator(SdaiInstance instance) => new IfcTextureCoordinateGenerator(instance);

        /// <summary>
        /// Create new instace of IfcTextureCoordinateGenerator and returns object of this class to interact with
        /// </summary>
        public static new IfcTextureCoordinateGenerator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextureCoordinateGenerator"); Debug.Assert(inst != 0); return inst; }

        public TextValue Mode
            {
            get { return get_string("Mode", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Mode", ifcengine.sdaiSTRING, value); }
            }
        public ListOfIfcReal Parameter { get { return (new ListOfIfcRealSerializer()).FromAttr(m_instance, "Parameter"); } }
        public void put_Parameter(IEnumerable<double> lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "Parameter"); }
        public void put_Parameter_untyped(IEnumerable lst) { (new ListOfIfcRealSerializer()).ToSdaiAggr(lst, m_instance, "Parameter"); }

        protected override TextValue EntityName() { return "IfcTextureCoordinateGenerator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextureCoordinateIndices
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextureCoordinateIndices : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextureCoordinateIndices
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextureCoordinateIndices(SdaiInstance instance) : base(instance) { }
        public IfcTextureCoordinateIndices() : base(0) { }

        public static implicit operator IfcTextureCoordinateIndices(SdaiInstance instance) => new IfcTextureCoordinateIndices(instance);

        /// <summary>
        /// Create new instace of IfcTextureCoordinateIndices and returns object of this class to interact with
        /// </summary>
        public static new IfcTextureCoordinateIndices Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextureCoordinateIndices"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcPositiveInteger TexCoordIndex { get { return (new ListOfIfcPositiveIntegerSerializer()).FromAttr(m_instance, "TexCoordIndex"); } }
        public void put_TexCoordIndex(IEnumerable<IntValue> lst) { (new ListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "TexCoordIndex"); }
        public void put_TexCoordIndex_untyped(IEnumerable lst) { (new ListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "TexCoordIndex"); }
        public IfcIndexedPolygonalFace TexCoordsOf 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "TexCoordsOf", ifcengine.sdaiINSTANCE, out inst); return new IfcIndexedPolygonalFace(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "TexCoordsOf", ifcengine.sdaiINSTANCE, i); }
            }
        public IfcIndexedPolygonalTextureMap ToTexMap { get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ToTexMap", ifcengine.sdaiINSTANCE, out inst); return new IfcIndexedPolygonalTextureMap(inst); } }

        protected override TextValue EntityName() { return "IfcTextureCoordinateIndices"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextureCoordinateIndicesWithVoids
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextureCoordinateIndicesWithVoids : IfcTextureCoordinateIndices
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextureCoordinateIndicesWithVoids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextureCoordinateIndicesWithVoids(SdaiInstance instance) : base(instance) { }
        public IfcTextureCoordinateIndicesWithVoids() : base(0) { }

        public static implicit operator IfcTextureCoordinateIndicesWithVoids(SdaiInstance instance) => new IfcTextureCoordinateIndicesWithVoids(instance);

        /// <summary>
        /// Create new instace of IfcTextureCoordinateIndicesWithVoids and returns object of this class to interact with
        /// </summary>
        public static new IfcTextureCoordinateIndicesWithVoids Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextureCoordinateIndicesWithVoids"); Debug.Assert(inst != 0); return inst; }

        public ListOfListOfIfcPositiveInteger InnerTexCoordIndices { get { return (new ListOfListOfIfcPositiveIntegerSerializer()).FromAttr(m_instance, "InnerTexCoordIndices"); } }
        public void put_InnerTexCoordIndices(IEnumerable<ListOfIfcPositiveInteger> lst) { (new ListOfListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "InnerTexCoordIndices"); }
        public void put_InnerTexCoordIndices_untyped(IEnumerable lst) { (new ListOfListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "InnerTexCoordIndices"); }

        protected override TextValue EntityName() { return "IfcTextureCoordinateIndicesWithVoids"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextureMap
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextureMap : IfcTextureCoordinate
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextureMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextureMap(SdaiInstance instance) : base(instance) { }
        public IfcTextureMap() : base(0) { }

        public static implicit operator IfcTextureMap(SdaiInstance instance) => new IfcTextureMap(instance);

        /// <summary>
        /// Create new instace of IfcTextureMap and returns object of this class to interact with
        /// </summary>
        public static new IfcTextureMap Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextureMap"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcTextureVertex Vertices { get { return (new ListOfIfcTextureVertexSerializer()).FromAttr(m_instance, "Vertices"); } }
        public void put_Vertices(IEnumerable<IfcTextureVertex> lst) { (new ListOfIfcTextureVertexSerializer()).ToSdaiAggr(lst, m_instance, "Vertices"); }
        public void put_Vertices_untyped(IEnumerable lst) { (new ListOfIfcTextureVertexSerializer()).ToSdaiAggr(lst, m_instance, "Vertices"); }
        public IfcFace MappedTo 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "MappedTo", ifcengine.sdaiINSTANCE, out inst); return new IfcFace(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "MappedTo", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcTextureMap"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextureVertex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextureVertex : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextureVertex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextureVertex(SdaiInstance instance) : base(instance) { }
        public IfcTextureVertex() : base(0) { }

        public static implicit operator IfcTextureVertex(SdaiInstance instance) => new IfcTextureVertex(instance);

        /// <summary>
        /// Create new instace of IfcTextureVertex and returns object of this class to interact with
        /// </summary>
        public static new IfcTextureVertex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextureVertex"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcParameterValue Coordinates { get { return (new ListOfIfcParameterValueSerializer()).FromAttr(m_instance, "Coordinates"); } }
        public void put_Coordinates(IEnumerable<double> lst) { (new ListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "Coordinates"); }
        public void put_Coordinates_untyped(IEnumerable lst) { (new ListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "Coordinates"); }

        protected override TextValue EntityName() { return "IfcTextureVertex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTextureVertexList
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTextureVertexList : IfcPresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTextureVertexList
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTextureVertexList(SdaiInstance instance) : base(instance) { }
        public IfcTextureVertexList() : base(0) { }

        public static implicit operator IfcTextureVertexList(SdaiInstance instance) => new IfcTextureVertexList(instance);

        /// <summary>
        /// Create new instace of IfcTextureVertexList and returns object of this class to interact with
        /// </summary>
        public static new IfcTextureVertexList Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTextureVertexList"); Debug.Assert(inst != 0); return inst; }

        public ListOfListOfIfcParameterValue TexCoordsList { get { return (new ListOfListOfIfcParameterValueSerializer()).FromAttr(m_instance, "TexCoordsList"); } }
        public void put_TexCoordsList(IEnumerable<ListOfIfcParameterValue> lst) { (new ListOfListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "TexCoordsList"); }
        public void put_TexCoordsList_untyped(IEnumerable lst) { (new ListOfListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "TexCoordsList"); }

        protected override TextValue EntityName() { return "IfcTextureVertexList"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcThirdOrderPolynomialSpiral
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcThirdOrderPolynomialSpiral : IfcSpiral
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcThirdOrderPolynomialSpiral
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcThirdOrderPolynomialSpiral(SdaiInstance instance) : base(instance) { }
        public IfcThirdOrderPolynomialSpiral() : base(0) { }

        public static implicit operator IfcThirdOrderPolynomialSpiral(SdaiInstance instance) => new IfcThirdOrderPolynomialSpiral(instance);

        /// <summary>
        /// Create new instace of IfcThirdOrderPolynomialSpiral and returns object of this class to interact with
        /// </summary>
        public static new IfcThirdOrderPolynomialSpiral Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcThirdOrderPolynomialSpiral"); Debug.Assert(inst != 0); return inst; }

        public double? CubicTerm
            {
            get { return get_double("CubicTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "CubicTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? QuadraticTerm
            {
            get { return get_double("QuadraticTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "QuadraticTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LinearTerm
            {
            get { return get_double("LinearTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LinearTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? ConstantTerm
            {
            get { return get_double("ConstantTerm", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ConstantTerm", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcThirdOrderPolynomialSpiral"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTimePeriod
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTimePeriod : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTimePeriod
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTimePeriod(SdaiInstance instance) : base(instance) { }
        public IfcTimePeriod() : base(0) { }

        public static implicit operator IfcTimePeriod(SdaiInstance instance) => new IfcTimePeriod(instance);

        /// <summary>
        /// Create new instace of IfcTimePeriod and returns object of this class to interact with
        /// </summary>
        public static new IfcTimePeriod Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTimePeriod"); Debug.Assert(inst != 0); return inst; }

        public TextValue StartTime
            {
            get { return get_string("StartTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "StartTime", ifcengine.sdaiSTRING, value); }
            }
        public TextValue EndTime
            {
            get { return get_string("EndTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "EndTime", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcTimePeriod"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTimeSeriesValue
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTimeSeriesValue : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTimeSeriesValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTimeSeriesValue(SdaiInstance instance) : base(instance) { }
        public IfcTimeSeriesValue() : base(0) { }

        public static implicit operator IfcTimeSeriesValue(SdaiInstance instance) => new IfcTimeSeriesValue(instance);

        /// <summary>
        /// Create new instace of IfcTimeSeriesValue and returns object of this class to interact with
        /// </summary>
        public static new IfcTimeSeriesValue Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTimeSeriesValue"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcValue ListValues { get { return (new ListOfIfcValueSerializer()).FromAttr(m_instance, "ListValues"); } }
        public void put_ListValues(IEnumerable<IfcValue> lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }
        public void put_ListValues_untyped(IEnumerable lst) { (new ListOfIfcValueSerializer()).ToSdaiAggr(lst, m_instance, "ListValues"); }

        protected override TextValue EntityName() { return "IfcTimeSeriesValue"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTopologyRepresentation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTopologyRepresentation : IfcShapeModel
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTopologyRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTopologyRepresentation(SdaiInstance instance) : base(instance) { }
        public IfcTopologyRepresentation() : base(0) { }

        public static implicit operator IfcTopologyRepresentation(SdaiInstance instance) => new IfcTopologyRepresentation(instance);

        /// <summary>
        /// Create new instace of IfcTopologyRepresentation and returns object of this class to interact with
        /// </summary>
        public static new IfcTopologyRepresentation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTopologyRepresentation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcTopologyRepresentation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcToroidalSurface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcToroidalSurface : IfcElementarySurface
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcToroidalSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcToroidalSurface(SdaiInstance instance) : base(instance) { }
        public IfcToroidalSurface() : base(0) { }

        public static implicit operator IfcToroidalSurface(SdaiInstance instance) => new IfcToroidalSurface(instance);

        /// <summary>
        /// Create new instace of IfcToroidalSurface and returns object of this class to interact with
        /// </summary>
        public static new IfcToroidalSurface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcToroidalSurface"); Debug.Assert(inst != 0); return inst; }

        public double? MajorRadius
            {
            get { return get_double("MajorRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MajorRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MinorRadius
            {
            get { return get_double("MinorRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MinorRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcToroidalSurface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTrackElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTrackElement : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTrackElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTrackElement(SdaiInstance instance) : base(instance) { }
        public IfcTrackElement() : base(0) { }

        public static implicit operator IfcTrackElement(SdaiInstance instance) => new IfcTrackElement(instance);

        /// <summary>
        /// Create new instace of IfcTrackElement and returns object of this class to interact with
        /// </summary>
        public static new IfcTrackElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTrackElement"); Debug.Assert(inst != 0); return inst; }

        public IfcTrackElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTrackElementTypeEnum_); return EnumValue<IfcTrackElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTrackElementTypeEnum>.FromValue(value.Value, EnumNames.IfcTrackElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTrackElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTrackElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTrackElementType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTrackElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTrackElementType(SdaiInstance instance) : base(instance) { }
        public IfcTrackElementType() : base(0) { }

        public static implicit operator IfcTrackElementType(SdaiInstance instance) => new IfcTrackElementType(instance);

        /// <summary>
        /// Create new instace of IfcTrackElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcTrackElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTrackElementType"); Debug.Assert(inst != 0); return inst; }

        public IfcTrackElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTrackElementTypeEnum_); return EnumValue<IfcTrackElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTrackElementTypeEnum>.FromValue(value.Value, EnumNames.IfcTrackElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTrackElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTransformer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTransformer : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTransformer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTransformer(SdaiInstance instance) : base(instance) { }
        public IfcTransformer() : base(0) { }

        public static implicit operator IfcTransformer(SdaiInstance instance) => new IfcTransformer(instance);

        /// <summary>
        /// Create new instace of IfcTransformer and returns object of this class to interact with
        /// </summary>
        public static new IfcTransformer Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTransformer"); Debug.Assert(inst != 0); return inst; }

        public IfcTransformerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTransformerTypeEnum_); return EnumValue<IfcTransformerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTransformerTypeEnum>.FromValue(value.Value, EnumNames.IfcTransformerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTransformer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTransformerType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTransformerType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTransformerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTransformerType(SdaiInstance instance) : base(instance) { }
        public IfcTransformerType() : base(0) { }

        public static implicit operator IfcTransformerType(SdaiInstance instance) => new IfcTransformerType(instance);

        /// <summary>
        /// Create new instace of IfcTransformerType and returns object of this class to interact with
        /// </summary>
        public static new IfcTransformerType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTransformerType"); Debug.Assert(inst != 0); return inst; }

        public IfcTransformerTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTransformerTypeEnum_); return EnumValue<IfcTransformerTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTransformerTypeEnum>.FromValue(value.Value, EnumNames.IfcTransformerTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTransformerType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTransportationDevice
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTransportationDevice : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTransportationDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTransportationDevice(SdaiInstance instance) : base(instance) { }
        public IfcTransportationDevice() : base(0) { }

        public static implicit operator IfcTransportationDevice(SdaiInstance instance) => new IfcTransportationDevice(instance);


        protected override TextValue EntityName() { return "IfcTransportationDevice"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTransportationDeviceType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTransportationDeviceType : IfcElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTransportationDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTransportationDeviceType(SdaiInstance instance) : base(instance) { }
        public IfcTransportationDeviceType() : base(0) { }

        public static implicit operator IfcTransportationDeviceType(SdaiInstance instance) => new IfcTransportationDeviceType(instance);


        protected override TextValue EntityName() { return "IfcTransportationDeviceType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTransportElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTransportElement : IfcTransportationDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTransportElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTransportElement(SdaiInstance instance) : base(instance) { }
        public IfcTransportElement() : base(0) { }

        public static implicit operator IfcTransportElement(SdaiInstance instance) => new IfcTransportElement(instance);

        /// <summary>
        /// Create new instace of IfcTransportElement and returns object of this class to interact with
        /// </summary>
        public static new IfcTransportElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTransportElement"); Debug.Assert(inst != 0); return inst; }

        public IfcTransportElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTransportElementTypeEnum_); return EnumValue<IfcTransportElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTransportElementTypeEnum>.FromValue(value.Value, EnumNames.IfcTransportElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTransportElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTransportElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTransportElementType : IfcTransportationDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTransportElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTransportElementType(SdaiInstance instance) : base(instance) { }
        public IfcTransportElementType() : base(0) { }

        public static implicit operator IfcTransportElementType(SdaiInstance instance) => new IfcTransportElementType(instance);

        /// <summary>
        /// Create new instace of IfcTransportElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcTransportElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTransportElementType"); Debug.Assert(inst != 0); return inst; }

        public IfcTransportElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTransportElementTypeEnum_); return EnumValue<IfcTransportElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTransportElementTypeEnum>.FromValue(value.Value, EnumNames.IfcTransportElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTransportElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTrapeziumProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTrapeziumProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTrapeziumProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTrapeziumProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcTrapeziumProfileDef() : base(0) { }

        public static implicit operator IfcTrapeziumProfileDef(SdaiInstance instance) => new IfcTrapeziumProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcTrapeziumProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcTrapeziumProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTrapeziumProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? BottomXDim
            {
            get { return get_double("BottomXDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "BottomXDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TopXDim
            {
            get { return get_double("TopXDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopXDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? YDim
            {
            get { return get_double("YDim", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "YDim", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TopXOffset
            {
            get { return get_double("TopXOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TopXOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTrapeziumProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTriangulatedFaceSet
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTriangulatedFaceSet : IfcTessellatedFaceSet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTriangulatedFaceSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTriangulatedFaceSet(SdaiInstance instance) : base(instance) { }
        public IfcTriangulatedFaceSet() : base(0) { }

        public static implicit operator IfcTriangulatedFaceSet(SdaiInstance instance) => new IfcTriangulatedFaceSet(instance);

        /// <summary>
        /// Create new instace of IfcTriangulatedFaceSet and returns object of this class to interact with
        /// </summary>
        public static new IfcTriangulatedFaceSet Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTriangulatedFaceSet"); Debug.Assert(inst != 0); return inst; }

        public ListOfListOfIfcParameterValue Normals { get { return (new ListOfListOfIfcParameterValueSerializer()).FromAttr(m_instance, "Normals"); } }
        public void put_Normals(IEnumerable<ListOfIfcParameterValue> lst) { (new ListOfListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "Normals"); }
        public void put_Normals_untyped(IEnumerable lst) { (new ListOfListOfIfcParameterValueSerializer()).ToSdaiAggr(lst, m_instance, "Normals"); }
        public bool? Closed
            {
            get { return get_bool("Closed", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Closed", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public ListOfListOfIfcPositiveInteger CoordIndex { get { return (new ListOfListOfIfcPositiveIntegerSerializer()).FromAttr(m_instance, "CoordIndex"); } }
        public void put_CoordIndex(IEnumerable<ListOfIfcPositiveInteger> lst) { (new ListOfListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "CoordIndex"); }
        public void put_CoordIndex_untyped(IEnumerable lst) { (new ListOfListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "CoordIndex"); }
        public ListOfIfcPositiveInteger PnIndex { get { return (new ListOfIfcPositiveIntegerSerializer()).FromAttr(m_instance, "PnIndex"); } }
        public void put_PnIndex(IEnumerable<IntValue> lst) { (new ListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "PnIndex"); }
        public void put_PnIndex_untyped(IEnumerable lst) { (new ListOfIfcPositiveIntegerSerializer()).ToSdaiAggr(lst, m_instance, "PnIndex"); }

        protected override TextValue EntityName() { return "IfcTriangulatedFaceSet"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTriangulatedIrregularNetwork
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTriangulatedIrregularNetwork : IfcTriangulatedFaceSet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTriangulatedIrregularNetwork
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTriangulatedIrregularNetwork(SdaiInstance instance) : base(instance) { }
        public IfcTriangulatedIrregularNetwork() : base(0) { }

        public static implicit operator IfcTriangulatedIrregularNetwork(SdaiInstance instance) => new IfcTriangulatedIrregularNetwork(instance);

        /// <summary>
        /// Create new instace of IfcTriangulatedIrregularNetwork and returns object of this class to interact with
        /// </summary>
        public static new IfcTriangulatedIrregularNetwork Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTriangulatedIrregularNetwork"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcInteger Flags { get { return (new ListOfIfcIntegerSerializer()).FromAttr(m_instance, "Flags"); } }
        public void put_Flags(IEnumerable<IntValue> lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "Flags"); }
        public void put_Flags_untyped(IEnumerable lst) { (new ListOfIfcIntegerSerializer()).ToSdaiAggr(lst, m_instance, "Flags"); }

        protected override TextValue EntityName() { return "IfcTriangulatedIrregularNetwork"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTrimmedCurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTrimmedCurve : IfcBoundedCurve
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTrimmedCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTrimmedCurve(SdaiInstance instance) : base(instance) { }
        public IfcTrimmedCurve() : base(0) { }

        public static implicit operator IfcTrimmedCurve(SdaiInstance instance) => new IfcTrimmedCurve(instance);

        /// <summary>
        /// Create new instace of IfcTrimmedCurve and returns object of this class to interact with
        /// </summary>
        public static new IfcTrimmedCurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTrimmedCurve"); Debug.Assert(inst != 0); return inst; }

        public IfcCurve BasisCurve 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, out inst); return new IfcCurve(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "BasisCurve", ifcengine.sdaiINSTANCE, i); }
            }
        public SetOfIfcTrimmingSelect Trim1 { get { return (new SetOfIfcTrimmingSelectSerializer()).FromAttr(m_instance, "Trim1"); } }
        public void put_Trim1(IEnumerable<IfcTrimmingSelect> lst) { (new SetOfIfcTrimmingSelectSerializer()).ToSdaiAggr(lst, m_instance, "Trim1"); }
        public void put_Trim1_untyped(IEnumerable lst) { (new SetOfIfcTrimmingSelectSerializer()).ToSdaiAggr(lst, m_instance, "Trim1"); }
        public SetOfIfcTrimmingSelect Trim2 { get { return (new SetOfIfcTrimmingSelectSerializer()).FromAttr(m_instance, "Trim2"); } }
        public void put_Trim2(IEnumerable<IfcTrimmingSelect> lst) { (new SetOfIfcTrimmingSelectSerializer()).ToSdaiAggr(lst, m_instance, "Trim2"); }
        public void put_Trim2_untyped(IEnumerable lst) { (new SetOfIfcTrimmingSelectSerializer()).ToSdaiAggr(lst, m_instance, "Trim2"); }
        public bool? SenseAgreement
            {
            get { return get_bool("SenseAgreement", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SenseAgreement", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public IfcTrimmingPreference? MasterRepresentation 
            { 
            get { var str = get_string("MasterRepresentation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTrimmingPreference_); return EnumValue<IfcTrimmingPreference>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTrimmingPreference>.FromValue(value.Value, EnumNames.IfcTrimmingPreference_); ifcengine.sdaiPutAttrBN(m_instance, "MasterRepresentation", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTrimmedCurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcTShapeProfileDef() : base(0) { }

        public static implicit operator IfcTShapeProfileDef(SdaiInstance instance) => new IfcTShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcTShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcTShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeWidth
            {
            get { return get_double("FlangeWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebThickness
            {
            get { return get_double("WebThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeThickness
            {
            get { return get_double("FlangeThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FilletRadius
            {
            get { return get_double("FilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeEdgeRadius
            {
            get { return get_double("FlangeEdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeEdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebEdgeRadius
            {
            get { return get_double("WebEdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebEdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebSlope
            {
            get { return get_double("WebSlope", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebSlope", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeSlope
            {
            get { return get_double("FlangeSlope", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeSlope", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTubeBundle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTubeBundle : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTubeBundle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTubeBundle(SdaiInstance instance) : base(instance) { }
        public IfcTubeBundle() : base(0) { }

        public static implicit operator IfcTubeBundle(SdaiInstance instance) => new IfcTubeBundle(instance);

        /// <summary>
        /// Create new instace of IfcTubeBundle and returns object of this class to interact with
        /// </summary>
        public static new IfcTubeBundle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTubeBundle"); Debug.Assert(inst != 0); return inst; }

        public IfcTubeBundleTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTubeBundleTypeEnum_); return EnumValue<IfcTubeBundleTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTubeBundleTypeEnum>.FromValue(value.Value, EnumNames.IfcTubeBundleTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTubeBundle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcTubeBundleType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcTubeBundleType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcTubeBundleType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcTubeBundleType(SdaiInstance instance) : base(instance) { }
        public IfcTubeBundleType() : base(0) { }

        public static implicit operator IfcTubeBundleType(SdaiInstance instance) => new IfcTubeBundleType(instance);

        /// <summary>
        /// Create new instace of IfcTubeBundleType and returns object of this class to interact with
        /// </summary>
        public static new IfcTubeBundleType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcTubeBundleType"); Debug.Assert(inst != 0); return inst; }

        public IfcTubeBundleTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcTubeBundleTypeEnum_); return EnumValue<IfcTubeBundleTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcTubeBundleTypeEnum>.FromValue(value.Value, EnumNames.IfcTubeBundleTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcTubeBundleType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcUnitaryControlElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcUnitaryControlElement : IfcDistributionControlElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcUnitaryControlElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcUnitaryControlElement(SdaiInstance instance) : base(instance) { }
        public IfcUnitaryControlElement() : base(0) { }

        public static implicit operator IfcUnitaryControlElement(SdaiInstance instance) => new IfcUnitaryControlElement(instance);

        /// <summary>
        /// Create new instace of IfcUnitaryControlElement and returns object of this class to interact with
        /// </summary>
        public static new IfcUnitaryControlElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcUnitaryControlElement"); Debug.Assert(inst != 0); return inst; }

        public IfcUnitaryControlElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcUnitaryControlElementTypeEnum_); return EnumValue<IfcUnitaryControlElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcUnitaryControlElementTypeEnum>.FromValue(value.Value, EnumNames.IfcUnitaryControlElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcUnitaryControlElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcUnitaryControlElementType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcUnitaryControlElementType : IfcDistributionControlElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcUnitaryControlElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcUnitaryControlElementType(SdaiInstance instance) : base(instance) { }
        public IfcUnitaryControlElementType() : base(0) { }

        public static implicit operator IfcUnitaryControlElementType(SdaiInstance instance) => new IfcUnitaryControlElementType(instance);

        /// <summary>
        /// Create new instace of IfcUnitaryControlElementType and returns object of this class to interact with
        /// </summary>
        public static new IfcUnitaryControlElementType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcUnitaryControlElementType"); Debug.Assert(inst != 0); return inst; }

        public IfcUnitaryControlElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcUnitaryControlElementTypeEnum_); return EnumValue<IfcUnitaryControlElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcUnitaryControlElementTypeEnum>.FromValue(value.Value, EnumNames.IfcUnitaryControlElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcUnitaryControlElementType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcUnitaryEquipment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcUnitaryEquipment : IfcEnergyConversionDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcUnitaryEquipment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcUnitaryEquipment(SdaiInstance instance) : base(instance) { }
        public IfcUnitaryEquipment() : base(0) { }

        public static implicit operator IfcUnitaryEquipment(SdaiInstance instance) => new IfcUnitaryEquipment(instance);

        /// <summary>
        /// Create new instace of IfcUnitaryEquipment and returns object of this class to interact with
        /// </summary>
        public static new IfcUnitaryEquipment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcUnitaryEquipment"); Debug.Assert(inst != 0); return inst; }

        public IfcUnitaryEquipmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcUnitaryEquipmentTypeEnum_); return EnumValue<IfcUnitaryEquipmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcUnitaryEquipmentTypeEnum>.FromValue(value.Value, EnumNames.IfcUnitaryEquipmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcUnitaryEquipment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcUnitaryEquipmentType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcUnitaryEquipmentType : IfcEnergyConversionDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcUnitaryEquipmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcUnitaryEquipmentType(SdaiInstance instance) : base(instance) { }
        public IfcUnitaryEquipmentType() : base(0) { }

        public static implicit operator IfcUnitaryEquipmentType(SdaiInstance instance) => new IfcUnitaryEquipmentType(instance);

        /// <summary>
        /// Create new instace of IfcUnitaryEquipmentType and returns object of this class to interact with
        /// </summary>
        public static new IfcUnitaryEquipmentType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcUnitaryEquipmentType"); Debug.Assert(inst != 0); return inst; }

        public IfcUnitaryEquipmentTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcUnitaryEquipmentTypeEnum_); return EnumValue<IfcUnitaryEquipmentTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcUnitaryEquipmentTypeEnum>.FromValue(value.Value, EnumNames.IfcUnitaryEquipmentTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcUnitaryEquipmentType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcUnitAssignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcUnitAssignment : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcUnitAssignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcUnitAssignment(SdaiInstance instance) : base(instance) { }
        public IfcUnitAssignment() : base(0) { }

        public static implicit operator IfcUnitAssignment(SdaiInstance instance) => new IfcUnitAssignment(instance);

        /// <summary>
        /// Create new instace of IfcUnitAssignment and returns object of this class to interact with
        /// </summary>
        public static new IfcUnitAssignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcUnitAssignment"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcUnit Units { get { return (new SetOfIfcUnitSerializer()).FromAttr(m_instance, "Units"); } }
        public void put_Units(IEnumerable<IfcUnit> lst) { (new SetOfIfcUnitSerializer()).ToSdaiAggr(lst, m_instance, "Units"); }
        public void put_Units_untyped(IEnumerable lst) { (new SetOfIfcUnitSerializer()).ToSdaiAggr(lst, m_instance, "Units"); }

        protected override TextValue EntityName() { return "IfcUnitAssignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcUShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcUShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcUShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcUShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcUShapeProfileDef() : base(0) { }

        public static implicit operator IfcUShapeProfileDef(SdaiInstance instance) => new IfcUShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcUShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcUShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcUShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeWidth
            {
            get { return get_double("FlangeWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebThickness
            {
            get { return get_double("WebThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeThickness
            {
            get { return get_double("FlangeThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FilletRadius
            {
            get { return get_double("FilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EdgeRadius
            {
            get { return get_double("EdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeSlope
            {
            get { return get_double("FlangeSlope", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeSlope", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcUShapeProfileDef"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcValve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcValve : IfcFlowController
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcValve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcValve(SdaiInstance instance) : base(instance) { }
        public IfcValve() : base(0) { }

        public static implicit operator IfcValve(SdaiInstance instance) => new IfcValve(instance);

        /// <summary>
        /// Create new instace of IfcValve and returns object of this class to interact with
        /// </summary>
        public static new IfcValve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcValve"); Debug.Assert(inst != 0); return inst; }

        public IfcValveTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcValveTypeEnum_); return EnumValue<IfcValveTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcValveTypeEnum>.FromValue(value.Value, EnumNames.IfcValveTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcValve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcValveType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcValveType : IfcFlowControllerType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcValveType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcValveType(SdaiInstance instance) : base(instance) { }
        public IfcValveType() : base(0) { }

        public static implicit operator IfcValveType(SdaiInstance instance) => new IfcValveType(instance);

        /// <summary>
        /// Create new instace of IfcValveType and returns object of this class to interact with
        /// </summary>
        public static new IfcValveType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcValveType"); Debug.Assert(inst != 0); return inst; }

        public IfcValveTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcValveTypeEnum_); return EnumValue<IfcValveTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcValveTypeEnum>.FromValue(value.Value, EnumNames.IfcValveTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcValveType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVector
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVector : IfcGeometricRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVector
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVector(SdaiInstance instance) : base(instance) { }
        public IfcVector() : base(0) { }

        public static implicit operator IfcVector(SdaiInstance instance) => new IfcVector(instance);

        /// <summary>
        /// Create new instace of IfcVector and returns object of this class to interact with
        /// </summary>
        public static new IfcVector Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVector"); Debug.Assert(inst != 0); return inst; }

        public IfcDirection Orientation 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, out inst); return new IfcDirection(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "Orientation", ifcengine.sdaiINSTANCE, i); }
            }
        public double? Magnitude
            {
            get { return get_double("Magnitude", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Magnitude", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcVector"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVehicle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVehicle : IfcTransportationDevice
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVehicle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVehicle(SdaiInstance instance) : base(instance) { }
        public IfcVehicle() : base(0) { }

        public static implicit operator IfcVehicle(SdaiInstance instance) => new IfcVehicle(instance);

        /// <summary>
        /// Create new instace of IfcVehicle and returns object of this class to interact with
        /// </summary>
        public static new IfcVehicle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVehicle"); Debug.Assert(inst != 0); return inst; }

        public IfcVehicleTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcVehicleTypeEnum_); return EnumValue<IfcVehicleTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcVehicleTypeEnum>.FromValue(value.Value, EnumNames.IfcVehicleTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcVehicle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVehicleType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVehicleType : IfcTransportationDeviceType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVehicleType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVehicleType(SdaiInstance instance) : base(instance) { }
        public IfcVehicleType() : base(0) { }

        public static implicit operator IfcVehicleType(SdaiInstance instance) => new IfcVehicleType(instance);

        /// <summary>
        /// Create new instace of IfcVehicleType and returns object of this class to interact with
        /// </summary>
        public static new IfcVehicleType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVehicleType"); Debug.Assert(inst != 0); return inst; }

        public IfcVehicleTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcVehicleTypeEnum_); return EnumValue<IfcVehicleTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcVehicleTypeEnum>.FromValue(value.Value, EnumNames.IfcVehicleTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcVehicleType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVertex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVertex : IfcTopologicalRepresentationItem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVertex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVertex(SdaiInstance instance) : base(instance) { }
        public IfcVertex() : base(0) { }

        public static implicit operator IfcVertex(SdaiInstance instance) => new IfcVertex(instance);

        /// <summary>
        /// Create new instace of IfcVertex and returns object of this class to interact with
        /// </summary>
        public static new IfcVertex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVertex"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcVertex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVertexLoop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVertexLoop : IfcLoop
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVertexLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVertexLoop(SdaiInstance instance) : base(instance) { }
        public IfcVertexLoop() : base(0) { }

        public static implicit operator IfcVertexLoop(SdaiInstance instance) => new IfcVertexLoop(instance);

        /// <summary>
        /// Create new instace of IfcVertexLoop and returns object of this class to interact with
        /// </summary>
        public static new IfcVertexLoop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVertexLoop"); Debug.Assert(inst != 0); return inst; }

        public IfcVertex LoopVertex 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "LoopVertex", ifcengine.sdaiINSTANCE, out inst); return new IfcVertex(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "LoopVertex", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcVertexLoop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVertexPoint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVertexPoint : IfcVertex
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVertexPoint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVertexPoint(SdaiInstance instance) : base(instance) { }
        public IfcVertexPoint() : base(0) { }

        public static implicit operator IfcVertexPoint(SdaiInstance instance) => new IfcVertexPoint(instance);

        /// <summary>
        /// Create new instace of IfcVertexPoint and returns object of this class to interact with
        /// </summary>
        public static new IfcVertexPoint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVertexPoint"); Debug.Assert(inst != 0); return inst; }

        public IfcPoint VertexGeometry 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "VertexGeometry", ifcengine.sdaiINSTANCE, out inst); return new IfcPoint(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "VertexGeometry", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcVertexPoint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVibrationDamper
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVibrationDamper : IfcElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVibrationDamper
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVibrationDamper(SdaiInstance instance) : base(instance) { }
        public IfcVibrationDamper() : base(0) { }

        public static implicit operator IfcVibrationDamper(SdaiInstance instance) => new IfcVibrationDamper(instance);

        /// <summary>
        /// Create new instace of IfcVibrationDamper and returns object of this class to interact with
        /// </summary>
        public static new IfcVibrationDamper Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVibrationDamper"); Debug.Assert(inst != 0); return inst; }

        public IfcVibrationDamperTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcVibrationDamperTypeEnum_); return EnumValue<IfcVibrationDamperTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcVibrationDamperTypeEnum>.FromValue(value.Value, EnumNames.IfcVibrationDamperTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcVibrationDamper"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVibrationDamperType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVibrationDamperType : IfcElementComponentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVibrationDamperType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVibrationDamperType(SdaiInstance instance) : base(instance) { }
        public IfcVibrationDamperType() : base(0) { }

        public static implicit operator IfcVibrationDamperType(SdaiInstance instance) => new IfcVibrationDamperType(instance);

        /// <summary>
        /// Create new instace of IfcVibrationDamperType and returns object of this class to interact with
        /// </summary>
        public static new IfcVibrationDamperType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVibrationDamperType"); Debug.Assert(inst != 0); return inst; }

        public IfcVibrationDamperTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcVibrationDamperTypeEnum_); return EnumValue<IfcVibrationDamperTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcVibrationDamperTypeEnum>.FromValue(value.Value, EnumNames.IfcVibrationDamperTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcVibrationDamperType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVibrationIsolator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVibrationIsolator : IfcElementComponent
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVibrationIsolator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVibrationIsolator(SdaiInstance instance) : base(instance) { }
        public IfcVibrationIsolator() : base(0) { }

        public static implicit operator IfcVibrationIsolator(SdaiInstance instance) => new IfcVibrationIsolator(instance);

        /// <summary>
        /// Create new instace of IfcVibrationIsolator and returns object of this class to interact with
        /// </summary>
        public static new IfcVibrationIsolator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVibrationIsolator"); Debug.Assert(inst != 0); return inst; }

        public IfcVibrationIsolatorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcVibrationIsolatorTypeEnum_); return EnumValue<IfcVibrationIsolatorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcVibrationIsolatorTypeEnum>.FromValue(value.Value, EnumNames.IfcVibrationIsolatorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcVibrationIsolator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVibrationIsolatorType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVibrationIsolatorType : IfcElementComponentType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVibrationIsolatorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVibrationIsolatorType(SdaiInstance instance) : base(instance) { }
        public IfcVibrationIsolatorType() : base(0) { }

        public static implicit operator IfcVibrationIsolatorType(SdaiInstance instance) => new IfcVibrationIsolatorType(instance);

        /// <summary>
        /// Create new instace of IfcVibrationIsolatorType and returns object of this class to interact with
        /// </summary>
        public static new IfcVibrationIsolatorType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVibrationIsolatorType"); Debug.Assert(inst != 0); return inst; }

        public IfcVibrationIsolatorTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcVibrationIsolatorTypeEnum_); return EnumValue<IfcVibrationIsolatorTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcVibrationIsolatorTypeEnum>.FromValue(value.Value, EnumNames.IfcVibrationIsolatorTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcVibrationIsolatorType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVirtualElement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVirtualElement : IfcElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVirtualElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVirtualElement(SdaiInstance instance) : base(instance) { }
        public IfcVirtualElement() : base(0) { }

        public static implicit operator IfcVirtualElement(SdaiInstance instance) => new IfcVirtualElement(instance);

        /// <summary>
        /// Create new instace of IfcVirtualElement and returns object of this class to interact with
        /// </summary>
        public static new IfcVirtualElement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVirtualElement"); Debug.Assert(inst != 0); return inst; }

        public IfcVirtualElementTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcVirtualElementTypeEnum_); return EnumValue<IfcVirtualElementTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcVirtualElementTypeEnum>.FromValue(value.Value, EnumNames.IfcVirtualElementTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcVirtualElement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVirtualGridIntersection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVirtualGridIntersection : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVirtualGridIntersection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVirtualGridIntersection(SdaiInstance instance) : base(instance) { }
        public IfcVirtualGridIntersection() : base(0) { }

        public static implicit operator IfcVirtualGridIntersection(SdaiInstance instance) => new IfcVirtualGridIntersection(instance);

        /// <summary>
        /// Create new instace of IfcVirtualGridIntersection and returns object of this class to interact with
        /// </summary>
        public static new IfcVirtualGridIntersection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVirtualGridIntersection"); Debug.Assert(inst != 0); return inst; }

        public ListOfIfcGridAxis IntersectingAxes { get { return (new ListOfIfcGridAxisSerializer()).FromAttr(m_instance, "IntersectingAxes"); } }
        public void put_IntersectingAxes(IEnumerable<IfcGridAxis> lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "IntersectingAxes"); }
        public void put_IntersectingAxes_untyped(IEnumerable lst) { (new ListOfIfcGridAxisSerializer()).ToSdaiAggr(lst, m_instance, "IntersectingAxes"); }
        public ListOfIfcLengthMeasure OffsetDistances { get { return (new ListOfIfcLengthMeasureSerializer()).FromAttr(m_instance, "OffsetDistances"); } }
        public void put_OffsetDistances(IEnumerable<double> lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "OffsetDistances"); }
        public void put_OffsetDistances_untyped(IEnumerable lst) { (new ListOfIfcLengthMeasureSerializer()).ToSdaiAggr(lst, m_instance, "OffsetDistances"); }

        protected override TextValue EntityName() { return "IfcVirtualGridIntersection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcVoidingFeature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcVoidingFeature : IfcFeatureElementSubtraction
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcVoidingFeature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcVoidingFeature(SdaiInstance instance) : base(instance) { }
        public IfcVoidingFeature() : base(0) { }

        public static implicit operator IfcVoidingFeature(SdaiInstance instance) => new IfcVoidingFeature(instance);

        /// <summary>
        /// Create new instace of IfcVoidingFeature and returns object of this class to interact with
        /// </summary>
        public static new IfcVoidingFeature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcVoidingFeature"); Debug.Assert(inst != 0); return inst; }

        public IfcVoidingFeatureTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcVoidingFeatureTypeEnum_); return EnumValue<IfcVoidingFeatureTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcVoidingFeatureTypeEnum>.FromValue(value.Value, EnumNames.IfcVoidingFeatureTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcVoidingFeature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWall
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWall : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWall
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWall(SdaiInstance instance) : base(instance) { }
        public IfcWall() : base(0) { }

        public static implicit operator IfcWall(SdaiInstance instance) => new IfcWall(instance);

        /// <summary>
        /// Create new instace of IfcWall and returns object of this class to interact with
        /// </summary>
        public static new IfcWall Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWall"); Debug.Assert(inst != 0); return inst; }

        public IfcWallTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWallTypeEnum_); return EnumValue<IfcWallTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWallTypeEnum>.FromValue(value.Value, EnumNames.IfcWallTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcWall"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWallStandardCase
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWallStandardCase : IfcWall
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWallStandardCase
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWallStandardCase(SdaiInstance instance) : base(instance) { }
        public IfcWallStandardCase() : base(0) { }

        public static implicit operator IfcWallStandardCase(SdaiInstance instance) => new IfcWallStandardCase(instance);

        /// <summary>
        /// Create new instace of IfcWallStandardCase and returns object of this class to interact with
        /// </summary>
        public static new IfcWallStandardCase Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWallStandardCase"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "IfcWallStandardCase"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWallType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWallType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWallType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWallType(SdaiInstance instance) : base(instance) { }
        public IfcWallType() : base(0) { }

        public static implicit operator IfcWallType(SdaiInstance instance) => new IfcWallType(instance);

        /// <summary>
        /// Create new instace of IfcWallType and returns object of this class to interact with
        /// </summary>
        public static new IfcWallType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWallType"); Debug.Assert(inst != 0); return inst; }

        public IfcWallTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWallTypeEnum_); return EnumValue<IfcWallTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWallTypeEnum>.FromValue(value.Value, EnumNames.IfcWallTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcWallType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWasteTerminal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWasteTerminal : IfcFlowTerminal
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWasteTerminal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWasteTerminal(SdaiInstance instance) : base(instance) { }
        public IfcWasteTerminal() : base(0) { }

        public static implicit operator IfcWasteTerminal(SdaiInstance instance) => new IfcWasteTerminal(instance);

        /// <summary>
        /// Create new instace of IfcWasteTerminal and returns object of this class to interact with
        /// </summary>
        public static new IfcWasteTerminal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWasteTerminal"); Debug.Assert(inst != 0); return inst; }

        public IfcWasteTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWasteTerminalTypeEnum_); return EnumValue<IfcWasteTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWasteTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcWasteTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcWasteTerminal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWasteTerminalType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWasteTerminalType : IfcFlowTerminalType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWasteTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWasteTerminalType(SdaiInstance instance) : base(instance) { }
        public IfcWasteTerminalType() : base(0) { }

        public static implicit operator IfcWasteTerminalType(SdaiInstance instance) => new IfcWasteTerminalType(instance);

        /// <summary>
        /// Create new instace of IfcWasteTerminalType and returns object of this class to interact with
        /// </summary>
        public static new IfcWasteTerminalType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWasteTerminalType"); Debug.Assert(inst != 0); return inst; }

        public IfcWasteTerminalTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWasteTerminalTypeEnum_); return EnumValue<IfcWasteTerminalTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWasteTerminalTypeEnum>.FromValue(value.Value, EnumNames.IfcWasteTerminalTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcWasteTerminalType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWellKnownText
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWellKnownText : Entity
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWellKnownText
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWellKnownText(SdaiInstance instance) : base(instance) { }
        public IfcWellKnownText() : base(0) { }

        public static implicit operator IfcWellKnownText(SdaiInstance instance) => new IfcWellKnownText(instance);

        /// <summary>
        /// Create new instace of IfcWellKnownText and returns object of this class to interact with
        /// </summary>
        public static new IfcWellKnownText Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWellKnownText"); Debug.Assert(inst != 0); return inst; }

        public TextValue WellKnownText
            {
            get { return get_string("WellKnownText", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "WellKnownText", ifcengine.sdaiSTRING, value); }
            }
        public IfcCoordinateReferenceSystem CoordinateReferenceSystem 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "CoordinateReferenceSystem", ifcengine.sdaiINSTANCE, out inst); return new IfcCoordinateReferenceSystem(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "CoordinateReferenceSystem", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcWellKnownText"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWindow
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWindow : IfcBuiltElement
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWindow
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWindow(SdaiInstance instance) : base(instance) { }
        public IfcWindow() : base(0) { }

        public static implicit operator IfcWindow(SdaiInstance instance) => new IfcWindow(instance);

        /// <summary>
        /// Create new instace of IfcWindow and returns object of this class to interact with
        /// </summary>
        public static new IfcWindow Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWindow"); Debug.Assert(inst != 0); return inst; }

        public double? OverallHeight
            {
            get { return get_double("OverallHeight", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallHeight", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? OverallWidth
            {
            get { return get_double("OverallWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "OverallWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcWindowTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowTypeEnum_); return EnumValue<IfcWindowTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowTypeEnum>.FromValue(value.Value, EnumNames.IfcWindowTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcWindowTypePartitioningEnum? PartitioningType 
            { 
            get { var str = get_string("PartitioningType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowTypePartitioningEnum_); return EnumValue<IfcWindowTypePartitioningEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowTypePartitioningEnum>.FromValue(value.Value, EnumNames.IfcWindowTypePartitioningEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PartitioningType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedPartitioningType
            {
            get { return get_string("UserDefinedPartitioningType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedPartitioningType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcWindow"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWindowLiningProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWindowLiningProperties : IfcPreDefinedPropertySet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWindowLiningProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWindowLiningProperties(SdaiInstance instance) : base(instance) { }
        public IfcWindowLiningProperties() : base(0) { }

        public static implicit operator IfcWindowLiningProperties(SdaiInstance instance) => new IfcWindowLiningProperties(instance);

        /// <summary>
        /// Create new instace of IfcWindowLiningProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcWindowLiningProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWindowLiningProperties"); Debug.Assert(inst != 0); return inst; }

        public double? LiningDepth
            {
            get { return get_double("LiningDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LiningThickness
            {
            get { return get_double("LiningThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? TransomThickness
            {
            get { return get_double("TransomThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "TransomThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? MullionThickness
            {
            get { return get_double("MullionThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "MullionThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FirstTransomOffset
            {
            get { return get_double("FirstTransomOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FirstTransomOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SecondTransomOffset
            {
            get { return get_double("SecondTransomOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SecondTransomOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FirstMullionOffset
            {
            get { return get_double("FirstMullionOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FirstMullionOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? SecondMullionOffset
            {
            get { return get_double("SecondMullionOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "SecondMullionOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcShapeAspect ShapeAspectStyle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, i); }
            }
        public double? LiningOffset
            {
            get { return get_double("LiningOffset", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningOffset", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LiningToPanelOffsetX
            {
            get { return get_double("LiningToPanelOffsetX", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningToPanelOffsetX", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? LiningToPanelOffsetY
            {
            get { return get_double("LiningToPanelOffsetY", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "LiningToPanelOffsetY", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcWindowLiningProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWindowPanelProperties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWindowPanelProperties : IfcPreDefinedPropertySet
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWindowPanelProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWindowPanelProperties(SdaiInstance instance) : base(instance) { }
        public IfcWindowPanelProperties() : base(0) { }

        public static implicit operator IfcWindowPanelProperties(SdaiInstance instance) => new IfcWindowPanelProperties(instance);

        /// <summary>
        /// Create new instace of IfcWindowPanelProperties and returns object of this class to interact with
        /// </summary>
        public static new IfcWindowPanelProperties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWindowPanelProperties"); Debug.Assert(inst != 0); return inst; }

        public IfcWindowPanelOperationEnum? OperationType 
            { 
            get { var str = get_string("OperationType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowPanelOperationEnum_); return EnumValue<IfcWindowPanelOperationEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowPanelOperationEnum>.FromValue(value.Value, EnumNames.IfcWindowPanelOperationEnum_); ifcengine.sdaiPutAttrBN(m_instance, "OperationType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcWindowPanelPositionEnum? PanelPosition 
            { 
            get { var str = get_string("PanelPosition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowPanelPositionEnum_); return EnumValue<IfcWindowPanelPositionEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowPanelPositionEnum>.FromValue(value.Value, EnumNames.IfcWindowPanelPositionEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PanelPosition", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public double? FrameDepth
            {
            get { return get_double("FrameDepth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FrameDepth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FrameThickness
            {
            get { return get_double("FrameThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FrameThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public IfcShapeAspect ShapeAspectStyle 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, out inst); return new IfcShapeAspect(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "ShapeAspectStyle", ifcengine.sdaiINSTANCE, i); }
            }

        protected override TextValue EntityName() { return "IfcWindowPanelProperties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWindowType
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWindowType : IfcBuiltElementType
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWindowType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWindowType(SdaiInstance instance) : base(instance) { }
        public IfcWindowType() : base(0) { }

        public static implicit operator IfcWindowType(SdaiInstance instance) => new IfcWindowType(instance);

        /// <summary>
        /// Create new instace of IfcWindowType and returns object of this class to interact with
        /// </summary>
        public static new IfcWindowType Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWindowType"); Debug.Assert(inst != 0); return inst; }

        public IfcWindowTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowTypeEnum_); return EnumValue<IfcWindowTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowTypeEnum>.FromValue(value.Value, EnumNames.IfcWindowTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public IfcWindowTypePartitioningEnum? PartitioningType 
            { 
            get { var str = get_string("PartitioningType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWindowTypePartitioningEnum_); return EnumValue<IfcWindowTypePartitioningEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWindowTypePartitioningEnum>.FromValue(value.Value, EnumNames.IfcWindowTypePartitioningEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PartitioningType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }
        public bool? ParameterTakesPrecedence
            {
            get { return get_bool("ParameterTakesPrecedence", ifcengine.sdaiBOOLEAN); }
            set { if (value.HasValue) { bool v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "ParameterTakesPrecedence", ifcengine.sdaiBOOLEAN, ref v); } else Debug.Assert(false); }
            }
        public TextValue UserDefinedPartitioningType
            {
            get { return get_string("UserDefinedPartitioningType", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "UserDefinedPartitioningType", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcWindowType"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWorkCalendar
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWorkCalendar : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWorkCalendar
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWorkCalendar(SdaiInstance instance) : base(instance) { }
        public IfcWorkCalendar() : base(0) { }

        public static implicit operator IfcWorkCalendar(SdaiInstance instance) => new IfcWorkCalendar(instance);

        /// <summary>
        /// Create new instace of IfcWorkCalendar and returns object of this class to interact with
        /// </summary>
        public static new IfcWorkCalendar Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWorkCalendar"); Debug.Assert(inst != 0); return inst; }

        public SetOfIfcWorkTime WorkingTimes { get { return (new SetOfIfcWorkTimeSerializer()).FromAttr(m_instance, "WorkingTimes"); } }
        public void put_WorkingTimes(IEnumerable<IfcWorkTime> lst) { (new SetOfIfcWorkTimeSerializer()).ToSdaiAggr(lst, m_instance, "WorkingTimes"); }
        public void put_WorkingTimes_untyped(IEnumerable lst) { (new SetOfIfcWorkTimeSerializer()).ToSdaiAggr(lst, m_instance, "WorkingTimes"); }
        public SetOfIfcWorkTime ExceptionTimes { get { return (new SetOfIfcWorkTimeSerializer()).FromAttr(m_instance, "ExceptionTimes"); } }
        public void put_ExceptionTimes(IEnumerable<IfcWorkTime> lst) { (new SetOfIfcWorkTimeSerializer()).ToSdaiAggr(lst, m_instance, "ExceptionTimes"); }
        public void put_ExceptionTimes_untyped(IEnumerable lst) { (new SetOfIfcWorkTimeSerializer()).ToSdaiAggr(lst, m_instance, "ExceptionTimes"); }
        public IfcWorkCalendarTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWorkCalendarTypeEnum_); return EnumValue<IfcWorkCalendarTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWorkCalendarTypeEnum>.FromValue(value.Value, EnumNames.IfcWorkCalendarTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcWorkCalendar"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWorkControl
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWorkControl : IfcControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWorkControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWorkControl(SdaiInstance instance) : base(instance) { }
        public IfcWorkControl() : base(0) { }

        public static implicit operator IfcWorkControl(SdaiInstance instance) => new IfcWorkControl(instance);

        public TextValue CreationDate
            {
            get { return get_string("CreationDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "CreationDate", ifcengine.sdaiSTRING, value); }
            }
        public SetOfIfcPerson Creators { get { return (new SetOfIfcPersonSerializer()).FromAttr(m_instance, "Creators"); } }
        public void put_Creators(IEnumerable<IfcPerson> lst) { (new SetOfIfcPersonSerializer()).ToSdaiAggr(lst, m_instance, "Creators"); }
        public void put_Creators_untyped(IEnumerable lst) { (new SetOfIfcPersonSerializer()).ToSdaiAggr(lst, m_instance, "Creators"); }
        public TextValue Purpose
            {
            get { return get_string("Purpose", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Purpose", ifcengine.sdaiSTRING, value); }
            }
        public TextValue Duration
            {
            get { return get_string("Duration", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "Duration", ifcengine.sdaiSTRING, value); }
            }
        public TextValue TotalFloat
            {
            get { return get_string("TotalFloat", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "TotalFloat", ifcengine.sdaiSTRING, value); }
            }
        public TextValue StartTime
            {
            get { return get_string("StartTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "StartTime", ifcengine.sdaiSTRING, value); }
            }
        public TextValue FinishTime
            {
            get { return get_string("FinishTime", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FinishTime", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcWorkControl"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWorkPlan
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWorkPlan : IfcWorkControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWorkPlan
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWorkPlan(SdaiInstance instance) : base(instance) { }
        public IfcWorkPlan() : base(0) { }

        public static implicit operator IfcWorkPlan(SdaiInstance instance) => new IfcWorkPlan(instance);

        /// <summary>
        /// Create new instace of IfcWorkPlan and returns object of this class to interact with
        /// </summary>
        public static new IfcWorkPlan Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWorkPlan"); Debug.Assert(inst != 0); return inst; }

        public IfcWorkPlanTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWorkPlanTypeEnum_); return EnumValue<IfcWorkPlanTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWorkPlanTypeEnum>.FromValue(value.Value, EnumNames.IfcWorkPlanTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcWorkPlan"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWorkSchedule
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWorkSchedule : IfcWorkControl
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWorkSchedule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWorkSchedule(SdaiInstance instance) : base(instance) { }
        public IfcWorkSchedule() : base(0) { }

        public static implicit operator IfcWorkSchedule(SdaiInstance instance) => new IfcWorkSchedule(instance);

        /// <summary>
        /// Create new instace of IfcWorkSchedule and returns object of this class to interact with
        /// </summary>
        public static new IfcWorkSchedule Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWorkSchedule"); Debug.Assert(inst != 0); return inst; }

        public IfcWorkScheduleTypeEnum? PredefinedType 
            { 
            get { var str = get_string("PredefinedType", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.IfcWorkScheduleTypeEnum_); return EnumValue<IfcWorkScheduleTypeEnum>.FromIndex(ind); } 
            set { if (value.HasValue) { var str = EnumString<IfcWorkScheduleTypeEnum>.FromValue(value.Value, EnumNames.IfcWorkScheduleTypeEnum_); ifcengine.sdaiPutAttrBN(m_instance, "PredefinedType", ifcengine.sdaiENUM, str); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcWorkSchedule"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcWorkTime
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcWorkTime : IfcSchedulingTime
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcWorkTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcWorkTime(SdaiInstance instance) : base(instance) { }
        public IfcWorkTime() : base(0) { }

        public static implicit operator IfcWorkTime(SdaiInstance instance) => new IfcWorkTime(instance);

        /// <summary>
        /// Create new instace of IfcWorkTime and returns object of this class to interact with
        /// </summary>
        public static new IfcWorkTime Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcWorkTime"); Debug.Assert(inst != 0); return inst; }

        public IfcRecurrencePattern RecurrencePattern 
            {
            get { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "RecurrencePattern", ifcengine.sdaiINSTANCE, out inst); return new IfcRecurrencePattern(inst); } 
            set { SdaiInstance i = value; ifcengine.sdaiPutAttrBN(m_instance, "RecurrencePattern", ifcengine.sdaiINSTANCE, i); }
            }
        public TextValue StartDate
            {
            get { return get_string("StartDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "StartDate", ifcengine.sdaiSTRING, value); }
            }
        public TextValue FinishDate
            {
            get { return get_string("FinishDate", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "FinishDate", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcWorkTime"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcZone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcZone : IfcSystem
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcZone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcZone(SdaiInstance instance) : base(instance) { }
        public IfcZone() : base(0) { }

        public static implicit operator IfcZone(SdaiInstance instance) => new IfcZone(instance);

        /// <summary>
        /// Create new instace of IfcZone and returns object of this class to interact with
        /// </summary>
        public static new IfcZone Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcZone"); Debug.Assert(inst != 0); return inst; }

        public TextValue LongName
            {
            get { return get_string("LongName", ifcengine.sdaiSTRING); }
            set { ifcengine.sdaiPutAttrBN(m_instance, "LongName", ifcengine.sdaiSTRING, value); }
            }

        protected override TextValue EntityName() { return "IfcZone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of IfcZShapeProfileDef
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class IfcZShapeProfileDef : IfcParameterizedProfileDef
        {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of IfcZShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public IfcZShapeProfileDef(SdaiInstance instance) : base(instance) { }
        public IfcZShapeProfileDef() : base(0) { }

        public static implicit operator IfcZShapeProfileDef(SdaiInstance instance) => new IfcZShapeProfileDef(instance);

        /// <summary>
        /// Create new instace of IfcZShapeProfileDef and returns object of this class to interact with
        /// </summary>
        public static new IfcZShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "IfcZShapeProfileDef"); Debug.Assert(inst != 0); return inst; }

        public double? Depth
            {
            get { return get_double("Depth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "Depth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeWidth
            {
            get { return get_double("FlangeWidth", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeWidth", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? WebThickness
            {
            get { return get_double("WebThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "WebThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FlangeThickness
            {
            get { return get_double("FlangeThickness", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FlangeThickness", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? FilletRadius
            {
            get { return get_double("FilletRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "FilletRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }
        public double? EdgeRadius
            {
            get { return get_double("EdgeRadius", ifcengine.sdaiREAL); }
            set { if (value.HasValue) { double v = value.Value; ifcengine.sdaiPutAttrBN(m_instance, "EdgeRadius", ifcengine.sdaiREAL, ref v); } else Debug.Assert(false); }
            }

        protected override TextValue EntityName() { return "IfcZShapeProfileDef"; }
    };

}

