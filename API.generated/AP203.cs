//
// Early-binding C# API for SDAI (CE wrappers)
//

#pragma warning disable CS1587
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Collections;
using System.Collections.Generic;
using RDF;

#if _WIN64
        using int_t = System.Int64;
#else
		using int_t = System.Int32;
#endif

namespace AP203
{
    using SdaiModel = int_t;
    using SdaiInstance = int_t;
    using SdaiAggr = int_t;

    using IntValue = int_t;
    using TextValue = String;

    /// <summary>
    /// 
    /// </summary>
    class EnumValue<TEnum> where TEnum : struct, Enum
    {
        static public TEnum? FromIndex(int index)
        {
            var values = System.Enum.GetValues<TEnum>();
            if (index >= 0 && index < values.Length)
            {
                return values[index];
            }
            else
            {
                return null;
            }
        }
    }

    class EnumIndex
    {
        static public int FromString(TextValue value, TextValue[] allStrings)
        {
            for (int i = 0; i < allStrings.Length; i++)
            {
                if (value == allStrings[i])
                    return i;
            }
            return -1;
        }
    }

    class EnumString<TEnum> where TEnum : struct, Enum, IComparable
    {
        public static TextValue FromValue(TEnum value, TextValue[] allStrings)
        {
            var values = System.Enum.GetValues<TEnum>();

            for (int i = 0; i < values.Length; i++)
            {
                if (values[i].Equals(value))
                {
                    if (i < allStrings.Length)
                    {
                        return allStrings[i];
                    }
                    else
                    {
                        Debug.Assert(false);
                        return null;
                    }
                }
            }

            Debug.Assert(false);
            return null;
        }
    }

    /// <summary>
    /// Helper class to handle and access SELECT instance data
    /// </summary>
    public class Select
    {
        protected SdaiInstance m_instance;
        protected TextValue m_attrName;

        private IntValue m_adb;
        private Select m_outerSelect;

        public IntValue ADB()
        {
            if (m_outerSelect != null)
            {
                return m_outerSelect.ADB();
            }

            if (m_adb == 0 && m_instance != 0 && m_attrName != null)
            {
                if (0 == ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiADB, out m_adb))
                {
                    ifcengine.sdaiDeleteADB(m_adb);
                    m_adb = 0;
                }
            }

            return m_adb;
        }

        protected Select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0)
        {
            Init(instance, attrName, adb);
        }

        protected Select(Select outer)
        {
            m_instance = 0;
            m_attrName = null;
            m_adb = 0;
            m_outerSelect = outer;
            if (m_outerSelect != null)
            {
                m_instance = m_outerSelect.m_instance;
            }
        }

        public void Init(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0)
        {
            Debug.Assert(instance != 0);
            m_instance = instance;
            m_attrName = attrName;
            m_adb = adb;
            m_outerSelect = null;
        }

        protected void SetADB(IntValue adb)
        {
            if (m_outerSelect != null)
            {
                m_outerSelect.SetADB(adb);
            }
            else
            {
                //???sdaiDeleteADB(m_adb);
                m_adb = adb;

                if (m_instance != 0 && m_attrName != null)
                {
                    ifcengine.sdaiPutAttrBN(m_instance, m_attrName, ifcengine.sdaiADB, m_adb);
                }
            }
        }

        private bool CheckADBType(IntValue adb, TextValue typeName)
        {
            if (adb == 0)
            {
                return false;
            }

            if (typeName == null)
            {
                return true; //any suitable
            }

            var pPath = ifcengine.sdaiGetADBTypePath(adb, 0);
            var path = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(pPath);

            return path != null && path == typeName;
        }

        public TextValue TypePath 
            { get 
                {
                var adb = ADB();
                if (adb == 0)
                    {
                    return null;
                    }
                else 
                    {
                    return ifcengine.sdaiGetADBTypePathx(adb, 0);
                    }
                } 
            }

        //
        //
        protected IntValue? get_IntValue(TextValue typeName, IntValue sdaiType)
        {
            IntValue? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
            {
                IntValue val = 0;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                {
                    ret = val;
                }
            }
            return ret;
        }

        protected void put_IntValue(TextValue typeName, IntValue sdaiType, IntValue value)
        {
            var adb = ifcengine.sdaiCreateADB(sdaiType, ref value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        protected double? get_double(TextValue typeName, IntValue sdaiType)
        {
            double? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
            {
                double val = 0;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                {
                    ret = val;
                }
            }
            return ret;
        }
        protected bool? get_bool(TextValue typeName, IntValue sdaiType)
        {
            Debug.Assert(sdaiType == ifcengine.sdaiBOOLEAN);
            bool? ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
            {
                bool val = false;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                {
                    ret = val;
                }
            }
            return ret;
        }

        //
        protected void put_double(TextValue typeName, IntValue sdaiType, double value)
        {
            var adb = ifcengine.sdaiCreateADB(sdaiType, ref value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }
        protected void put_bool(TextValue typeName, IntValue sdaiType, bool value)
        {
            Debug.Assert(sdaiType == ifcengine.sdaiBOOLEAN);
            var adb = ifcengine.sdaiCreateADB(sdaiType, ref value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        protected TextValue getTextValue(TextValue typeName, IntValue sdaiType)
        {
            TextValue ret = null;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
            {
                string val;
                if (ifcengine.sdaiGetADBValue(adb, sdaiType, out val) != 0)
                {
                    ret = val;
                }
            }
            return ret;
        }

        //
        protected void putTextValue(TextValue typeName, IntValue sdaiType, TextValue value)
        {
            var adb = ifcengine.sdaiCreateADB(sdaiType, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        protected int getEnumerationIndex(TextValue typeName, TextValue[] rEnumValues)
        {
            int ret = -1;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
            {
                string value;
                if (0 != ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiENUM, out value))
                {
                    ret = EnumIndex.FromString(value, rEnumValues);
                }
            }
            return ret;
        }

        //
        protected void putEnumerationValue(TextValue typeName, TextValue value)
        {
            var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiENUM, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        protected SdaiInstance getEntityInstance(TextValue typeName)
        {
            SdaiInstance ret = 0;
            var adb = ADB();
            if (adb != 0)
            {
                SdaiInstance inst = 0;
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiINSTANCE, out inst) != 0)
                {
                    if (typeName == null || ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                    {
                        ret = inst;
                    }
                }
            }
            return ret;
        }

        //
        protected void putEntityInstance(TextValue typeName, SdaiInstance inst)
        {
            if (inst == 0 || ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
            {
                var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiINSTANCE, inst);
                SetADB(adb);
            }
            else
            {
                Debug.Assert(false);
            }
        }

        //
        protected SdaiAggr getAggrValue(TextValue typeName)
        {
            SdaiAggr ret = 0;
            var adb = ADB();
            if (CheckADBType(adb, typeName))
            {
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiAGGR, out ret) == 0)
                {
                    ret = 0;
                }
            }
            return ret;
        }

        //
        protected void putAggrValue(TextValue typeName, SdaiAggr value)
        {
            var adb = ifcengine.sdaiCreateADB(ifcengine.sdaiAGGR, value);
            ifcengine.sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        protected bool IsADBType(TextValue typeName)
        {
            var adb = ADB();
            return CheckADBType(adb, typeName);
        }

        protected bool IsADBEntity(TextValue typeName)
        {
            var adb = ADB();
            if (adb != 0)
            {
                SdaiInstance inst = 0;
                if (ifcengine.sdaiGetADBValue(adb, ifcengine.sdaiINSTANCE, out inst) != 0)
                {
                    if (ifcengine.sdaiIsKindOfBN(inst, typeName) != 0)
                    {
                        return true;
                    }
                }
            }
            return false;
        }
    };

    /// <summary>
    /// Aggregations templates
    /// </summary>
    /// 
    interface IAggrSerializerObj
    {
        public abstract IList FromSdaiAggrUntyped(SdaiInstance inst, SdaiAggr aggr);
        public abstract SdaiAggr ToSdaiAggr(IEnumerable lst, SdaiInstance instance, TextValue attrName);

    }

    abstract class AggrSerializer<TElem, TList> : IAggrSerializerObj 
        where TList : List<TElem>, new()
    {
        //
        public TList FromAttr(SdaiInstance instance, TextValue attrName)
        {
            SdaiAggr aggr = 0;
            ifcengine.sdaiGetAttrBN(instance, attrName, ifcengine.sdaiAGGR, out aggr);
            return FromSdaiAggr(instance, aggr);
        }

        //
        public TList FromSdaiAggr(SdaiInstance inst, SdaiAggr aggr)
        {
            var ret = new TList();
            IntValue cnt = ifcengine.sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++)
            {
                TElem elem;
                if (GetAggrElement(inst, aggr, i, out elem))
                {
                    ret.Add(elem);
                }
            }
            return ret;
        }

        public SdaiAggr ToSdaiAggr(IEnumerable<TElem> lst, SdaiInstance instance, TextValue attrName)
        {
            SdaiAggr aggr = ifcengine.sdaiCreateAggrBN(instance, attrName);
            foreach (var v in lst)
            {
                AppendAggrElement(instance, aggr, v);
            }
            return aggr;
        }

        public SdaiAggr ToSdaiAggr(IEnumerable lst, SdaiInstance instance, TextValue attrName)
        {
            SdaiAggr aggr = ifcengine.sdaiCreateAggrBN(instance, attrName);
            foreach (var v in lst)
            {
                AppendAggrElement(instance, aggr, (TElem)v);
            }
            return aggr;
        }

        protected abstract bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TElem elem);
        protected abstract void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TElem elem);

        IList IAggrSerializerObj.FromSdaiAggrUntyped(SdaiInstance inst, SdaiAggr aggr)
        {
            return FromSdaiAggr(inst, aggr);
        }
    }

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_IntValue<TElem, TList> : AggrSerializer<IntValue, TList>
        where TList : List<IntValue>, new()
    {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out IntValue elem)
        {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiINTEGER, out elem);
            return true;
        }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue elem)
        {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiINTEGER, ref elem);
        }
    };

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_double<TElem, TList> : AggrSerializer<double, TList>
        where TList : List<double>, new()
    {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out double elem)
        {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiREAL, out elem);
            return true;
        }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, double elem)
        {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiREAL, ref elem);
        }
    };

    /// <summary>
    /// 
    /// </summary>
    class AggrSerializer_bool<TElem, TList> : AggrSerializer<bool, TList>
        where TList : List<bool>, new()
    {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out bool elem)
        {
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiBOOLEAN, out elem);
            return true;
        }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, bool elem)
        {
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiBOOLEAN, ref elem);
        }
    };

    class AggrSerializerText<TElem, TList> : AggrSerializer<TextValue, TList>
        where TList : List<TextValue>, new()
    {
        private IntValue m_sdaiType;

        public AggrSerializerText(IntValue sdaiType)
        {
            Debug.Assert(sdaiType == ifcengine.sdaiSTRING || sdaiType == ifcengine.sdaiBINARY);
            m_sdaiType = sdaiType;
        }
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TextValue elem)
        {
            ifcengine.sdaiGetAggrByIndex(aggr, i, m_sdaiType, out elem);
            return (elem != null);
        }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TextValue elem)
        {
            ifcengine.sdaiAppend(aggr, m_sdaiType, elem);
        }
    };

    class AggrSerializerInstance<TElem, TList> : AggrSerializer<TElem, TList>
        where TElem : Entity, new()
        where TList : List<TElem>, new()
    {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TElem elem)
        {
            SdaiInstance val = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiINSTANCE, out val);
            elem = new TElem();
            elem.Set(val);
            return (elem != 0);
        }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TElem elem)
        {
            SdaiInstance v = elem;
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiINSTANCE, v);
        }
    };

    class AggrSerializerEnum<TEnum, TList> : AggrSerializer<TEnum, TList>
        where TEnum : struct, Enum
        where TList : List<TEnum>, new()
    {
        private IntValue m_sdaiType;
        private TextValue[] m_EnumValues;

        public AggrSerializerEnum(TextValue[] enumValues, IntValue sdaiType)
        {
            Debug.Assert(sdaiType == ifcengine.sdaiENUM || sdaiType == ifcengine.sdaiLOGICAL);
            m_EnumValues = enumValues;
            m_sdaiType = sdaiType;
        }

        //
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TEnum elem)
        {
            string value;
            ifcengine.sdaiGetAggrByIndex(aggr, i, m_sdaiType, out value);
            var ind = EnumIndex.FromString(value, m_EnumValues);
            var val = EnumValue<TEnum>.FromIndex(ind);
            if (val.HasValue)
            {
                elem = val.Value;
                return true;
            }
            else
            {
                elem = EnumValue<TEnum>.FromIndex(0).Value;
                return false;
            }
        }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TEnum elem)
        {
            var value = EnumString<TEnum>.FromValue(elem, m_EnumValues);
            ifcengine.sdaiAppend(aggr, m_sdaiType, value);
        }
    }
    /// <summary>
    /// 
    /// </summary>
    class AggrSerializerAggr<TNestedAggr, TNestedSerializer, TList> : AggrSerializer<TNestedAggr, TList>
                    where TNestedAggr : IEnumerable
                    where TNestedSerializer : IAggrSerializerObj, new()
                    where TList : List<TNestedAggr>, new()
    {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TNestedAggr elem)
        {
            SdaiAggr nested = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiAGGR, out nested);
            if (nested != 0)
            {
                var nestedSerializer = new TNestedSerializer();
                elem = (TNestedAggr)nestedSerializer.FromSdaiAggrUntyped(inst, nested);
                return true;
            }
            else
            {
                elem = default(TNestedAggr);
                return false;
            }
        }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TNestedAggr elem)
        {
            var nestedSerializer = new TNestedSerializer();
            SdaiAggr nested = nestedSerializer.ToSdaiAggr(elem, inst, null);
            ifcengine.sdaiAppend(aggr, ifcengine.sdaiAGGR, nested);
        }
    };

    class AggrSerializerSelect<TSelect, TList> : AggrSerializer<TSelect, TList>
        where TSelect : Select, new()
        where TList : List<TSelect>, new()
    {
        protected override bool GetAggrElement(SdaiInstance inst, SdaiAggr aggr, IntValue i, out TSelect elem)
        {
            IntValue adb = 0;
            ifcengine.sdaiGetAggrByIndex(aggr, i, ifcengine.sdaiADB, out adb);
            if (adb != 0)
            {
                elem = new TSelect();
                elem.Init(inst, null, adb);
                return true;
            }
            else
            {
                elem = null;
                return false;
            }
        }
        protected override void AppendAggrElement(SdaiInstance inst, SdaiAggr aggr, TSelect elem)
        {
            var adb = elem.ADB();
            if (adb != 0)
            {
                ifcengine.sdaiAppend((IntValue)aggr, ifcengine.sdaiADB, adb);
            }
        }
    };

    /// <summary>
    /// Provides utility methods to interact with a generic SDAI instnace
    /// You also can use object of this class instead of SdaiInstance handle in any place where the handle is required
    /// </summary>
    public abstract class Entity : IEquatable<Entity>, IComparable, IComparable<Entity>
    {
        public static Entity Create(SdaiModel model) { System.Diagnostics.Debug.Assert(false); return null; }

        //
        public long _stepID { get { return m_instance!=0 ? ifcengine.internalGetP21Line(m_instance) : 0; } }
        public string _entityName { get
                {
                if (m_instance != 0)
                    {
                    var type = ifcengine.sdaiGetInstanceType(m_instance);
                    if (type != 0)
                        return ifcengine.engiGetEntityName(type);
                    }
                    return null;
                } }

        //
        protected SdaiInstance m_instance = 0;

        public Entity(SdaiInstance instance)
        {
            Set(instance);
        }

        public void Set(SdaiInstance instance)
        {
            m_instance = instance;

            if (m_instance != 0)
            {
                if (ifcengine.sdaiIsKindOfBN(m_instance, EntityName()) == 0)
                {
                    m_instance = 0;
                }
            }
        }

        protected abstract TextValue EntityName();

        /// <summary>
        /// Conversion to instance handle, so the object of the class can be used anywhere where a handle required
        /// </summary>
        public static implicit operator SdaiInstance(Entity instance) => instance.m_instance;

        protected TextValue get_string(TextValue attrName, IntValue sdaiType)
        {
            string value;
            if (0 != ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }
        public double? get_double(TextValue attrName, IntValue sdaiType)
        {
            double val = 0;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
        }
        public IntValue? get_IntValue(TextValue attrName, IntValue sdaiType)
        {
            IntValue val = 0;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
        }
        public bool? get_bool(TextValue attrName, IntValue sdaiType)
        {
            bool val = false;
            if (ifcengine.sdaiGetAttrBN(m_instance, attrName, sdaiType, out val) != 0)
                return val;
            else
                return null;
        }

        /// <summary>
        /// 
        /// </summary>
        public static bool operator ==(Entity i1, Entity i2) => (Equals(i1, i2));
        public static bool operator !=(Entity i1, Entity i2) => (!(i1 == i2));
        public override bool Equals(Object obj)
        {
            return Equals(obj as Entity);
        }
        public bool Equals(Entity other)
        {
            return (other == null) ? false : (other.m_instance == m_instance);
        }
        public int CompareTo(object obj)
        {
            return CompareTo(obj as Entity);
        }
        public int CompareTo(Entity other)
        {
            return (other == null) ? 1 : m_instance.CompareTo(other.m_instance);
        }
        public override int GetHashCode()
        {
            return m_instance.GetHashCode();
        }
    }


    //
    // Enumerations
    //
    public enum LOGICAL_VALUE { False = 0, True = 1, Unknown = 2 };

    public enum ahead_or_behind
    {
        ahead = 0,
        exact = 1,
        behind = 2,
    };

    public enum angle_relator
    {
        equal = 0,
        large = 1,
        small = 2,
    };

    public enum b_spline_curve_form
    {
        polyline_form = 0,
        circular_arc = 1,
        elliptic_arc = 2,
        parabolic_arc = 3,
        hyperbolic_arc = 4,
        unspecified = 5,
    };

    public enum b_spline_surface_form
    {
        plane_surf = 0,
        cylindrical_surf = 1,
        conical_surf = 2,
        spherical_surf = 3,
        toroidal_surf = 4,
        surf_of_revolution = 5,
        ruled_surf = 6,
        generalised_cone = 7,
        quadric_surf = 8,
        surf_of_linear_extrusion = 9,
        unspecified = 10,
    };

    public enum blend_radius_variation_type
    {
        linear_blend = 0,
        cubic_blend = 1,
        unspecified_blend = 2,
    };

    public enum boolean_operator
    {
        union_ = 0,
        intersection = 1,
        difference = 2,
    };

    public enum central_or_parallel
    {
        central = 0,
        parallel = 1,
    };

    public enum dimension_extent_usage
    {
        origin = 0,
        target = 1,
    };

    public enum knot_type
    {
        uniform_knots = 0,
        quasi_uniform_knots = 1,
        piecewise_bezier_knots = 2,
        unspecified = 3,
    };

    public enum limit_condition
    {
        maximum_material_condition = 0,
        least_material_condition = 1,
        regardless_of_feature_size = 2,
    };

    public enum marker_type
    {
        dot = 0,
        x = 1,
        plus = 2,
        asterisk = 3,
        ring = 4,
        square = 5,
        triangle = 6,
    };

    public enum null_style
    {
        null_ = 0,
    };

    public enum preferred_surface_curve_representation
    {
        curve_3d = 0,
        pcurve_s1 = 1,
        pcurve_s2 = 2,
    };

    public enum shading_curve_method
    {
        constant_colour = 0,
        linear_colour = 1,
    };

    public enum shading_surface_method
    {
        constant_shading = 0,
        colour_shading = 1,
        dot_shading = 2,
        normal_shading = 3,
    };

    public enum si_prefix
    {
        exa = 0,
        peta = 1,
        tera = 2,
        giga = 3,
        mega = 4,
        kilo = 5,
        hecto = 6,
        deca = 7,
        deci = 8,
        centi = 9,
        milli = 10,
        micro = 11,
        nano = 12,
        pico = 13,
        femto = 14,
        atto = 15,
    };

    public enum si_unit_name
    {
        metre = 0,
        gram = 1,
        second = 2,
        ampere = 3,
        kelvin = 4,
        mole = 5,
        candela = 6,
        radian = 7,
        steradian = 8,
        hertz = 9,
        newton = 10,
        pascal = 11,
        joule = 12,
        watt = 13,
        coulomb = 14,
        volt = 15,
        farad = 16,
        ohm = 17,
        siemens = 18,
        weber = 19,
        tesla = 20,
        henry = 21,
        degree_Celsius = 22,
        lumen = 23,
        lux = 24,
        becquerel = 25,
        gray = 26,
        sievert = 27,
    };

    public enum source
    {
        made = 0,
        bought = 1,
        not_known = 2,
    };

    public enum surface_side
    {
        positive = 0,
        negative = 1,
        both = 2,
    };

    public enum text_path
    {
        left = 0,
        right = 1,
        up = 2,
        down = 3,
    };

    public enum transition_code
    {
        discontinuous = 0,
        continuous = 1,
        cont_same_gradient = 2,
        cont_same_gradient_same_curvature = 3,
    };

    public enum trim_intent
    {
        blind = 0,
        offset = 1,
        through_all = 2,
        unspecified = 3,
        up_to_next = 4,
    };

    public enum trimming_preference
    {
        cartesian = 0,
        parameter = 1,
        unspecified = 2,
    };
    //
    class EnumNames
    {
        public static TextValue[] LOGICAL_VALUE_ = { "F", "T", "U" };
        public static TextValue[] ahead_or_behind_ = { "ahead", "exact", "behind" };
        public static TextValue[] angle_relator_ = { "equal", "large", "small" };
        public static TextValue[] b_spline_curve_form_ = { "polyline_form", "circular_arc", "elliptic_arc", "parabolic_arc", "hyperbolic_arc", "unspecified" };
        public static TextValue[] b_spline_surface_form_ = { "plane_surf", "cylindrical_surf", "conical_surf", "spherical_surf", "toroidal_surf", "surf_of_revolution", "ruled_surf", "generalised_cone", "quadric_surf", "surf_of_linear_extrusion", "unspecified" };
        public static TextValue[] blend_radius_variation_type_ = { "linear_blend", "cubic_blend", "unspecified_blend" };
        public static TextValue[] boolean_operator_ = { "union", "intersection", "difference" };
        public static TextValue[] central_or_parallel_ = { "central", "parallel" };
        public static TextValue[] dimension_extent_usage_ = { "origin", "target" };
        public static TextValue[] knot_type_ = { "uniform_knots", "quasi_uniform_knots", "piecewise_bezier_knots", "unspecified" };
        public static TextValue[] limit_condition_ = { "maximum_material_condition", "least_material_condition", "regardless_of_feature_size" };
        public static TextValue[] marker_type_ = { "dot", "x", "plus", "asterisk", "ring", "square", "triangle" };
        public static TextValue[] null_style_ = { "null" };
        public static TextValue[] preferred_surface_curve_representation_ = { "curve_3d", "pcurve_s1", "pcurve_s2" };
        public static TextValue[] shading_curve_method_ = { "constant_colour", "linear_colour" };
        public static TextValue[] shading_surface_method_ = { "constant_shading", "colour_shading", "dot_shading", "normal_shading" };
        public static TextValue[] si_prefix_ = { "exa", "peta", "tera", "giga", "mega", "kilo", "hecto", "deca", "deci", "centi", "milli", "micro", "nano", "pico", "femto", "atto" };
        public static TextValue[] si_unit_name_ = { "metre", "gram", "second", "ampere", "kelvin", "mole", "candela", "radian", "steradian", "hertz", "newton", "pascal", "joule", "watt", "coulomb", "volt", "farad", "ohm", "siemens", "weber", "tesla", "henry", "degree_Celsius", "lumen", "lux", "becquerel", "gray", "sievert" };
        public static TextValue[] source_ = { "made", "bought", "not_known" };
        public static TextValue[] surface_side_ = { "positive", "negative", "both" };
        public static TextValue[] text_path_ = { "left", "right", "up", "down" };
        public static TextValue[] transition_code_ = { "discontinuous", "continuous", "cont_same_gradient", "cont_same_gradient_same_curvature" };
        public static TextValue[] trim_intent_ = { "blind", "offset", "through_all", "unspecified", "up_to_next" };
        public static TextValue[] trimming_preference_ = { "cartesian", "parameter", "unspecified" };
    }


    //
    // Defined types
    // 

    public class ir_usage_item : action_items 
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public ir_usage_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public ir_usage_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public ir_usage_item() : base(null) { }
    }

    public class ir_usage_item_put : action_items_put 
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public ir_usage_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public ir_usage_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public ir_usage_item_put() : base(null) { }
    }

    public class ir_usage_item_get : action_items_get 
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public ir_usage_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }

        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public ir_usage_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public ir_usage_item_get() : base(null) { }
    }
    public class list_of_reversible_topology_item : List<reversible_topology_item> { }
    class list_of_reversible_topology_itemSerializer : AggrSerializerSelect<reversible_topology_item, list_of_reversible_topology_item> { }
    public class list_representation_item : List<representation_item> { }
    class list_representation_itemSerializer : AggrSerializerInstance<representation_item, list_representation_item> { }
    public class point_and_vector_members : List<point_and_vector_member> { }
    class point_and_vector_membersSerializer : AggrSerializerSelect<point_and_vector_member, point_and_vector_members> { }
    public class point_path_members : List<point_and_vector> { }
    class point_path_membersSerializer : AggrSerializerInstance<point_and_vector, point_path_members> { }
    public class set_of_reversible_topology_item : List<reversible_topology_item> { }
    class set_of_reversible_topology_itemSerializer : AggrSerializerSelect<reversible_topology_item, set_of_reversible_topology_item> { }
    public class set_representation_item : List<representation_item> { }
    class set_representation_itemSerializer : AggrSerializerInstance<representation_item, set_representation_item> { }

    public class certification_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public certification_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public certification_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public certification_item() : base(null) { }


        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }

        public bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        public bool _is_make_from_usage_option { get { return is_make_from_usage_option(); } }
        public make_from_usage_option get_make_from_usage_option() { return new make_from_usage_option (getEntityInstance("MAKE_FROM_USAGE_OPTION")); }
        public make_from_usage_option _make_from_usage_option { get { return get_make_from_usage_option(); } }
        public void put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        };


    public class certification_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public certification_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public certification_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public certification_item_get() : base(null) { }

        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        public bool _is_make_from_usage_option { get { return is_make_from_usage_option(); } }
        public make_from_usage_option get_make_from_usage_option() { return new make_from_usage_option (getEntityInstance("MAKE_FROM_USAGE_OPTION")); }
        public make_from_usage_option _make_from_usage_option { get { return get_make_from_usage_option(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class certification_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public certification_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public certification_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public certification_item_put() : base(null) { }

        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
        public void put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        };


    public class classified_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public classified_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public classified_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public classified_item() : base(null) { }


        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class classified_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public classified_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public classified_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public classified_item_get() : base(null) { }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class classified_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public classified_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public classified_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public classified_item_put() : base(null) { }

        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class classification_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public classification_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public classification_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public classification_item() : base(null) { }


        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public void put_action(action inst) { putEntityInstance("ACTION", inst); }

        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }

        public bool is_action_method() { return IsADBEntity("action_method"); }
        public bool _is_action_method { get { return is_action_method(); } }
        public action_method get_action_method() { return new action_method (getEntityInstance("ACTION_METHOD")); }
        public action_method _action_method { get { return get_action_method(); } }
        public void put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }

        public bool is_action_property() { return IsADBEntity("action_property"); }
        public bool _is_action_property { get { return is_action_property(); } }
        public action_property get_action_property() { return new action_property (getEntityInstance("ACTION_PROPERTY")); }
        public action_property _action_property { get { return get_action_property(); } }
        public void put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }

        public bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        public bool _is_action_relationship { get { return is_action_relationship(); } }
        public action_relationship get_action_relationship() { return new action_relationship (getEntityInstance("ACTION_RELATIONSHIP")); }
        public action_relationship _action_relationship { get { return get_action_relationship(); } }
        public void put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }

        public bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        public bool _is_action_request_solution { get { return is_action_request_solution(); } }
        public action_request_solution get_action_request_solution() { return new action_request_solution (getEntityInstance("ACTION_REQUEST_SOLUTION")); }
        public action_request_solution _action_request_solution { get { return get_action_request_solution(); } }
        public void put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }

        public bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        public bool _is_action_request_status { get { return is_action_request_status(); } }
        public action_request_status get_action_request_status() { return new action_request_status (getEntityInstance("ACTION_REQUEST_STATUS")); }
        public action_request_status _action_request_status { get { return get_action_request_status(); } }
        public void put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }

        public bool is_address() { return IsADBEntity("address"); }
        public bool _is_address { get { return is_address(); } }
        public address get_address() { return new address (getEntityInstance("ADDRESS")); }
        public address _address { get { return get_address(); } }
        public void put_address(address inst) { putEntityInstance("ADDRESS", inst); }

        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }

        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }

        public bool is_applied_action_request_assignment() { return IsADBEntity("applied_action_request_assignment"); }
        public bool _is_applied_action_request_assignment { get { return is_applied_action_request_assignment(); } }
        public applied_action_request_assignment get_applied_action_request_assignment() { return new applied_action_request_assignment (getEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT")); }
        public applied_action_request_assignment _applied_action_request_assignment { get { return get_applied_action_request_assignment(); } }
        public void put_applied_action_request_assignment(applied_action_request_assignment inst) { putEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT", inst); }

        public bool is_applied_approval_assignment() { return IsADBEntity("applied_approval_assignment"); }
        public bool _is_applied_approval_assignment { get { return is_applied_approval_assignment(); } }
        public applied_approval_assignment get_applied_approval_assignment() { return new applied_approval_assignment (getEntityInstance("APPLIED_APPROVAL_ASSIGNMENT")); }
        public applied_approval_assignment _applied_approval_assignment { get { return get_applied_approval_assignment(); } }
        public void put_applied_approval_assignment(applied_approval_assignment inst) { putEntityInstance("APPLIED_APPROVAL_ASSIGNMENT", inst); }

        public bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        public bool _is_applied_certification_assignment { get { return is_applied_certification_assignment(); } }
        public applied_certification_assignment get_applied_certification_assignment() { return new applied_certification_assignment (getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT")); }
        public applied_certification_assignment _applied_certification_assignment { get { return get_applied_certification_assignment(); } }
        public void put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_contract_assignment() { return IsADBEntity("applied_contract_assignment"); }
        public bool _is_applied_contract_assignment { get { return is_applied_contract_assignment(); } }
        public applied_contract_assignment get_applied_contract_assignment() { return new applied_contract_assignment (getEntityInstance("APPLIED_CONTRACT_ASSIGNMENT")); }
        public applied_contract_assignment _applied_contract_assignment { get { return get_applied_contract_assignment(); } }
        public void put_applied_contract_assignment(applied_contract_assignment inst) { putEntityInstance("APPLIED_CONTRACT_ASSIGNMENT", inst); }

        public bool is_applied_date_and_time_assignment() { return IsADBEntity("applied_date_and_time_assignment"); }
        public bool _is_applied_date_and_time_assignment { get { return is_applied_date_and_time_assignment(); } }
        public applied_date_and_time_assignment get_applied_date_and_time_assignment() { return new applied_date_and_time_assignment (getEntityInstance("APPLIED_DATE_AND_TIME_ASSIGNMENT")); }
        public applied_date_and_time_assignment _applied_date_and_time_assignment { get { return get_applied_date_and_time_assignment(); } }
        public void put_applied_date_and_time_assignment(applied_date_and_time_assignment inst) { putEntityInstance("APPLIED_DATE_AND_TIME_ASSIGNMENT", inst); }

        public bool is_applied_date_assignment() { return IsADBEntity("applied_date_assignment"); }
        public bool _is_applied_date_assignment { get { return is_applied_date_assignment(); } }
        public applied_date_assignment get_applied_date_assignment() { return new applied_date_assignment (getEntityInstance("APPLIED_DATE_ASSIGNMENT")); }
        public applied_date_assignment _applied_date_assignment { get { return get_applied_date_assignment(); } }
        public void put_applied_date_assignment(applied_date_assignment inst) { putEntityInstance("APPLIED_DATE_ASSIGNMENT", inst); }

        public bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        public bool _is_applied_document_reference { get { return is_applied_document_reference(); } }
        public applied_document_reference get_applied_document_reference() { return new applied_document_reference (getEntityInstance("APPLIED_DOCUMENT_REFERENCE")); }
        public applied_document_reference _applied_document_reference { get { return get_applied_document_reference(); } }
        public void put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }

        public bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        public bool _is_applied_document_usage_constraint_assignment { get { return is_applied_document_usage_constraint_assignment(); } }
        public applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment() { return new applied_document_usage_constraint_assignment (getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT")); }
        public applied_document_usage_constraint_assignment _applied_document_usage_constraint_assignment { get { return get_applied_document_usage_constraint_assignment(); } }
        public void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }

        public bool is_applied_effectivity_assignment() { return IsADBEntity("applied_effectivity_assignment"); }
        public bool _is_applied_effectivity_assignment { get { return is_applied_effectivity_assignment(); } }
        public applied_effectivity_assignment get_applied_effectivity_assignment() { return new applied_effectivity_assignment (getEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT")); }
        public applied_effectivity_assignment _applied_effectivity_assignment { get { return get_applied_effectivity_assignment(); } }
        public void put_applied_effectivity_assignment(applied_effectivity_assignment inst) { putEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT", inst); }

        public bool is_applied_event_occurrence_assignment() { return IsADBEntity("applied_event_occurrence_assignment"); }
        public bool _is_applied_event_occurrence_assignment { get { return is_applied_event_occurrence_assignment(); } }
        public applied_event_occurrence_assignment get_applied_event_occurrence_assignment() { return new applied_event_occurrence_assignment (getEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT")); }
        public applied_event_occurrence_assignment _applied_event_occurrence_assignment { get { return get_applied_event_occurrence_assignment(); } }
        public void put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst) { putEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT", inst); }

        public bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        public bool _is_applied_external_identification_assignment { get { return is_applied_external_identification_assignment(); } }
        public applied_external_identification_assignment get_applied_external_identification_assignment() { return new applied_external_identification_assignment (getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")); }
        public applied_external_identification_assignment _applied_external_identification_assignment { get { return get_applied_external_identification_assignment(); } }
        public void put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        public bool _is_applied_organization_assignment { get { return is_applied_organization_assignment(); } }
        public applied_organization_assignment get_applied_organization_assignment() { return new applied_organization_assignment (getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
        public applied_organization_assignment _applied_organization_assignment { get { return get_applied_organization_assignment(); } }
        public void put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }

        public bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        public bool _is_applied_organizational_project_assignment { get { return is_applied_organizational_project_assignment(); } }
        public applied_organizational_project_assignment get_applied_organizational_project_assignment() { return new applied_organizational_project_assignment (getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT")); }
        public applied_organizational_project_assignment _applied_organizational_project_assignment { get { return get_applied_organizational_project_assignment(); } }
        public void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }

        public bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        public bool _is_applied_person_and_organization_assignment { get { return is_applied_person_and_organization_assignment(); } }
        public applied_person_and_organization_assignment get_applied_person_and_organization_assignment() { return new applied_person_and_organization_assignment (getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
        public applied_person_and_organization_assignment _applied_person_and_organization_assignment { get { return get_applied_person_and_organization_assignment(); } }
        public void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }

        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }

        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }

        public bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        public bool _is_approval_person_organization { get { return is_approval_person_organization(); } }
        public approval_person_organization get_approval_person_organization() { return new approval_person_organization (getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
        public approval_person_organization _approval_person_organization { get { return get_approval_person_organization(); } }
        public void put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }

        public bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        public bool _is_approval_relationship { get { return is_approval_relationship(); } }
        public approval_relationship get_approval_relationship() { return new approval_relationship (getEntityInstance("APPROVAL_RELATIONSHIP")); }
        public approval_relationship _approval_relationship { get { return get_approval_relationship(); } }
        public void put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }

        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }

        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }

        public bool is_calendar_date() { return IsADBEntity("calendar_date"); }
        public bool _is_calendar_date { get { return is_calendar_date(); } }
        public calendar_date get_calendar_date() { return new calendar_date (getEntityInstance("CALENDAR_DATE")); }
        public calendar_date _calendar_date { get { return get_calendar_date(); } }
        public void put_calendar_date(calendar_date inst) { putEntityInstance("CALENDAR_DATE", inst); }

        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }

        public bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        public bool _is_characterized_class { get { return is_characterized_class(); } }
        public characterized_class get_characterized_class() { return new characterized_class (getEntityInstance("CHARACTERIZED_CLASS")); }
        public characterized_class _characterized_class { get { return get_characterized_class(); } }
        public void put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }

        public bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        public bool _is_characterized_object { get { return is_characterized_object(); } }
        public characterized_object get_characterized_object() { return new characterized_object (getEntityInstance("CHARACTERIZED_OBJECT")); }
        public characterized_object _characterized_object { get { return get_characterized_object(); } }
        public void put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }

        public bool is_class_() { return IsADBEntity("class_"); }
        public bool _is_class_ { get { return is_class_(); } }
        public class_ get_class_() { return new class_ (getEntityInstance("CLASS")); }
        public class_ _class_ { get { return get_class_(); } }
        public void put_class_(class_ inst) { putEntityInstance("CLASS", inst); }

        public classified_item _classified_item() { return new classified_item(this); }
        public classified_item __classified_item { get { return _classified_item(); } }

        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }

        public bool is_context_dependent_unit() { return IsADBEntity("context_dependent_unit"); }
        public bool _is_context_dependent_unit { get { return is_context_dependent_unit(); } }
        public context_dependent_unit get_context_dependent_unit() { return new context_dependent_unit (getEntityInstance("CONTEXT_DEPENDENT_UNIT")); }
        public context_dependent_unit _context_dependent_unit { get { return get_context_dependent_unit(); } }
        public void put_context_dependent_unit(context_dependent_unit inst) { putEntityInstance("CONTEXT_DEPENDENT_UNIT", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_conversion_based_unit() { return IsADBEntity("conversion_based_unit"); }
        public bool _is_conversion_based_unit { get { return is_conversion_based_unit(); } }
        public conversion_based_unit get_conversion_based_unit() { return new conversion_based_unit (getEntityInstance("CONVERSION_BASED_UNIT")); }
        public conversion_based_unit _conversion_based_unit { get { return get_conversion_based_unit(); } }
        public void put_conversion_based_unit(conversion_based_unit inst) { putEntityInstance("CONVERSION_BASED_UNIT", inst); }

        public bool is_date_and_time() { return IsADBEntity("date_and_time"); }
        public bool _is_date_and_time { get { return is_date_and_time(); } }
        public date_and_time get_date_and_time() { return new date_and_time (getEntityInstance("DATE_AND_TIME")); }
        public date_and_time _date_and_time { get { return get_date_and_time(); } }
        public void put_date_and_time(date_and_time inst) { putEntityInstance("DATE_AND_TIME", inst); }

        public bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        public bool _is_date_and_time_assignment { get { return is_date_and_time_assignment(); } }
        public date_and_time_assignment get_date_and_time_assignment() { return new date_and_time_assignment (getEntityInstance("DATE_AND_TIME_ASSIGNMENT")); }
        public date_and_time_assignment _date_and_time_assignment { get { return get_date_and_time_assignment(); } }
        public void put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }

        public bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        public bool _is_date_assignment { get { return is_date_assignment(); } }
        public date_assignment get_date_assignment() { return new date_assignment (getEntityInstance("DATE_ASSIGNMENT")); }
        public date_assignment _date_assignment { get { return get_date_assignment(); } }
        public void put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }

        public bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        public bool _is_derived_unit { get { return is_derived_unit(); } }
        public derived_unit get_derived_unit() { return new derived_unit (getEntityInstance("DERIVED_UNIT")); }
        public derived_unit _derived_unit { get { return get_derived_unit(); } }
        public void put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }

        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }

        public bool is_directed_action() { return IsADBEntity("directed_action"); }
        public bool _is_directed_action { get { return is_directed_action(); } }
        public directed_action get_directed_action() { return new directed_action (getEntityInstance("DIRECTED_ACTION")); }
        public directed_action _directed_action { get { return get_directed_action(); } }
        public void put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }

        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }

        public bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        public bool _is_document_relationship { get { return is_document_relationship(); } }
        public document_relationship get_document_relationship() { return new document_relationship (getEntityInstance("DOCUMENT_RELATIONSHIP")); }
        public document_relationship _document_relationship { get { return get_document_relationship(); } }
        public void put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }

        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }

        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }

        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }

        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }

        public bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        public bool _is_general_property_relationship { get { return is_general_property_relationship(); } }
        public general_property_relationship get_general_property_relationship() { return new general_property_relationship (getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
        public general_property_relationship _general_property_relationship { get { return get_general_property_relationship(); } }
        public void put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }

        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }

        public bool is_identification_assignment() { return IsADBEntity("identification_assignment"); }
        public bool _is_identification_assignment { get { return is_identification_assignment(); } }
        public identification_assignment get_identification_assignment() { return new identification_assignment (getEntityInstance("IDENTIFICATION_ASSIGNMENT")); }
        public identification_assignment _identification_assignment { get { return get_identification_assignment(); } }
        public void put_identification_assignment(identification_assignment inst) { putEntityInstance("IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_language() { return IsADBEntity("language"); }
        public bool _is_language { get { return is_language(); } }
        public language get_language() { return new language (getEntityInstance("LANGUAGE")); }
        public language _language { get { return get_language(); } }
        public void put_language(language inst) { putEntityInstance("LANGUAGE", inst); }

        public bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        public bool _is_measure_representation_item { get { return is_measure_representation_item(); } }
        public measure_representation_item get_measure_representation_item() { return new measure_representation_item (getEntityInstance("MEASURE_REPRESENTATION_ITEM")); }
        public measure_representation_item _measure_representation_item { get { return get_measure_representation_item(); } }
        public void put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }

        public bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        public bool _is_measure_with_unit { get { return is_measure_with_unit(); } }
        public measure_with_unit get_measure_with_unit() { return new measure_with_unit (getEntityInstance("MEASURE_WITH_UNIT")); }
        public measure_with_unit _measure_with_unit { get { return get_measure_with_unit(); } }
        public void put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }

        public bool is_multi_language_attribute_assignment() { return IsADBEntity("multi_language_attribute_assignment"); }
        public bool _is_multi_language_attribute_assignment { get { return is_multi_language_attribute_assignment(); } }
        public multi_language_attribute_assignment get_multi_language_attribute_assignment() { return new multi_language_attribute_assignment (getEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT")); }
        public multi_language_attribute_assignment _multi_language_attribute_assignment { get { return get_multi_language_attribute_assignment(); } }
        public void put_multi_language_attribute_assignment(multi_language_attribute_assignment inst) { putEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT", inst); }

        public bool is_named_unit() { return IsADBEntity("named_unit"); }
        public bool _is_named_unit { get { return is_named_unit(); } }
        public named_unit get_named_unit() { return new named_unit (getEntityInstance("NAMED_UNIT")); }
        public named_unit _named_unit { get { return get_named_unit(); } }
        public void put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }

        public bool is_organization() { return IsADBEntity("organization"); }
        public bool _is_organization { get { return is_organization(); } }
        public organization get_organization() { return new organization (getEntityInstance("ORGANIZATION")); }
        public organization _organization { get { return get_organization(); } }
        public void put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }

        public bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        public bool _is_organization_relationship { get { return is_organization_relationship(); } }
        public organization_relationship get_organization_relationship() { return new organization_relationship (getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
        public organization_relationship _organization_relationship { get { return get_organization_relationship(); } }
        public void put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }

        public bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        public bool _is_organizational_address { get { return is_organizational_address(); } }
        public organizational_address get_organizational_address() { return new organizational_address (getEntityInstance("ORGANIZATIONAL_ADDRESS")); }
        public organizational_address _organizational_address { get { return get_organizational_address(); } }
        public void put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }

        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }

        public bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        public bool _is_organizational_project_relationship { get { return is_organizational_project_relationship(); } }
        public organizational_project_relationship get_organizational_project_relationship() { return new organizational_project_relationship (getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); }
        public organizational_project_relationship _organizational_project_relationship { get { return get_organizational_project_relationship(); } }
        public void put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }

        public bool is_person() { return IsADBEntity("person"); }
        public bool _is_person { get { return is_person(); } }
        public person get_person() { return new person (getEntityInstance("PERSON")); }
        public person _person { get { return get_person(); } }
        public void put_person(person inst) { putEntityInstance("PERSON", inst); }

        public bool is_person_and_organization_address() { return IsADBEntity("person_and_organization_address"); }
        public bool _is_person_and_organization_address { get { return is_person_and_organization_address(); } }
        public person_and_organization_address get_person_and_organization_address() { return new person_and_organization_address (getEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS")); }
        public person_and_organization_address _person_and_organization_address { get { return get_person_and_organization_address(); } }
        public void put_person_and_organization_address(person_and_organization_address inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        public bool _is_product_definition_context { get { return is_product_definition_context(); } }
        public product_definition_context get_product_definition_context() { return new product_definition_context (getEntityInstance("PRODUCT_DEFINITION_CONTEXT")); }
        public product_definition_context _product_definition_context { get { return get_product_definition_context(); } }
        public void put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }

        public bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        public bool _is_property_definition_representation { get { return is_property_definition_representation(); } }
        public property_definition_representation get_property_definition_representation() { return new property_definition_representation (getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
        public property_definition_representation _property_definition_representation { get { return get_property_definition_representation(); } }
        public void put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }

        public bool is_representation_context() { return IsADBEntity("representation_context"); }
        public bool _is_representation_context { get { return is_representation_context(); } }
        public representation_context get_representation_context() { return new representation_context (getEntityInstance("REPRESENTATION_CONTEXT")); }
        public representation_context _representation_context { get { return get_representation_context(); } }
        public void put_representation_context(representation_context inst) { putEntityInstance("REPRESENTATION_CONTEXT", inst); }

        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        public bool _is_uncertainty_measure_with_unit { get { return is_uncertainty_measure_with_unit(); } }
        public uncertainty_measure_with_unit get_uncertainty_measure_with_unit() { return new uncertainty_measure_with_unit (getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); }
        public uncertainty_measure_with_unit _uncertainty_measure_with_unit { get { return get_uncertainty_measure_with_unit(); } }
        public void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }

        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }

        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class classification_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public classification_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public classification_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public classification_item_get() : base(null) { }

        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public bool is_action_method() { return IsADBEntity("action_method"); }
        public bool _is_action_method { get { return is_action_method(); } }
        public action_method get_action_method() { return new action_method (getEntityInstance("ACTION_METHOD")); }
        public action_method _action_method { get { return get_action_method(); } }
        public bool is_action_property() { return IsADBEntity("action_property"); }
        public bool _is_action_property { get { return is_action_property(); } }
        public action_property get_action_property() { return new action_property (getEntityInstance("ACTION_PROPERTY")); }
        public action_property _action_property { get { return get_action_property(); } }
        public bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        public bool _is_action_relationship { get { return is_action_relationship(); } }
        public action_relationship get_action_relationship() { return new action_relationship (getEntityInstance("ACTION_RELATIONSHIP")); }
        public action_relationship _action_relationship { get { return get_action_relationship(); } }
        public bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        public bool _is_action_request_solution { get { return is_action_request_solution(); } }
        public action_request_solution get_action_request_solution() { return new action_request_solution (getEntityInstance("ACTION_REQUEST_SOLUTION")); }
        public action_request_solution _action_request_solution { get { return get_action_request_solution(); } }
        public bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        public bool _is_action_request_status { get { return is_action_request_status(); } }
        public action_request_status get_action_request_status() { return new action_request_status (getEntityInstance("ACTION_REQUEST_STATUS")); }
        public action_request_status _action_request_status { get { return get_action_request_status(); } }
        public bool is_address() { return IsADBEntity("address"); }
        public bool _is_address { get { return is_address(); } }
        public address get_address() { return new address (getEntityInstance("ADDRESS")); }
        public address _address { get { return get_address(); } }
        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public bool is_applied_action_request_assignment() { return IsADBEntity("applied_action_request_assignment"); }
        public bool _is_applied_action_request_assignment { get { return is_applied_action_request_assignment(); } }
        public applied_action_request_assignment get_applied_action_request_assignment() { return new applied_action_request_assignment (getEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT")); }
        public applied_action_request_assignment _applied_action_request_assignment { get { return get_applied_action_request_assignment(); } }
        public bool is_applied_approval_assignment() { return IsADBEntity("applied_approval_assignment"); }
        public bool _is_applied_approval_assignment { get { return is_applied_approval_assignment(); } }
        public applied_approval_assignment get_applied_approval_assignment() { return new applied_approval_assignment (getEntityInstance("APPLIED_APPROVAL_ASSIGNMENT")); }
        public applied_approval_assignment _applied_approval_assignment { get { return get_applied_approval_assignment(); } }
        public bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        public bool _is_applied_certification_assignment { get { return is_applied_certification_assignment(); } }
        public applied_certification_assignment get_applied_certification_assignment() { return new applied_certification_assignment (getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT")); }
        public applied_certification_assignment _applied_certification_assignment { get { return get_applied_certification_assignment(); } }
        public bool is_applied_contract_assignment() { return IsADBEntity("applied_contract_assignment"); }
        public bool _is_applied_contract_assignment { get { return is_applied_contract_assignment(); } }
        public applied_contract_assignment get_applied_contract_assignment() { return new applied_contract_assignment (getEntityInstance("APPLIED_CONTRACT_ASSIGNMENT")); }
        public applied_contract_assignment _applied_contract_assignment { get { return get_applied_contract_assignment(); } }
        public bool is_applied_date_and_time_assignment() { return IsADBEntity("applied_date_and_time_assignment"); }
        public bool _is_applied_date_and_time_assignment { get { return is_applied_date_and_time_assignment(); } }
        public applied_date_and_time_assignment get_applied_date_and_time_assignment() { return new applied_date_and_time_assignment (getEntityInstance("APPLIED_DATE_AND_TIME_ASSIGNMENT")); }
        public applied_date_and_time_assignment _applied_date_and_time_assignment { get { return get_applied_date_and_time_assignment(); } }
        public bool is_applied_date_assignment() { return IsADBEntity("applied_date_assignment"); }
        public bool _is_applied_date_assignment { get { return is_applied_date_assignment(); } }
        public applied_date_assignment get_applied_date_assignment() { return new applied_date_assignment (getEntityInstance("APPLIED_DATE_ASSIGNMENT")); }
        public applied_date_assignment _applied_date_assignment { get { return get_applied_date_assignment(); } }
        public bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        public bool _is_applied_document_reference { get { return is_applied_document_reference(); } }
        public applied_document_reference get_applied_document_reference() { return new applied_document_reference (getEntityInstance("APPLIED_DOCUMENT_REFERENCE")); }
        public applied_document_reference _applied_document_reference { get { return get_applied_document_reference(); } }
        public bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        public bool _is_applied_document_usage_constraint_assignment { get { return is_applied_document_usage_constraint_assignment(); } }
        public applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment() { return new applied_document_usage_constraint_assignment (getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT")); }
        public applied_document_usage_constraint_assignment _applied_document_usage_constraint_assignment { get { return get_applied_document_usage_constraint_assignment(); } }
        public bool is_applied_effectivity_assignment() { return IsADBEntity("applied_effectivity_assignment"); }
        public bool _is_applied_effectivity_assignment { get { return is_applied_effectivity_assignment(); } }
        public applied_effectivity_assignment get_applied_effectivity_assignment() { return new applied_effectivity_assignment (getEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT")); }
        public applied_effectivity_assignment _applied_effectivity_assignment { get { return get_applied_effectivity_assignment(); } }
        public bool is_applied_event_occurrence_assignment() { return IsADBEntity("applied_event_occurrence_assignment"); }
        public bool _is_applied_event_occurrence_assignment { get { return is_applied_event_occurrence_assignment(); } }
        public applied_event_occurrence_assignment get_applied_event_occurrence_assignment() { return new applied_event_occurrence_assignment (getEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT")); }
        public applied_event_occurrence_assignment _applied_event_occurrence_assignment { get { return get_applied_event_occurrence_assignment(); } }
        public bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        public bool _is_applied_external_identification_assignment { get { return is_applied_external_identification_assignment(); } }
        public applied_external_identification_assignment get_applied_external_identification_assignment() { return new applied_external_identification_assignment (getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")); }
        public applied_external_identification_assignment _applied_external_identification_assignment { get { return get_applied_external_identification_assignment(); } }
        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        public bool _is_applied_organization_assignment { get { return is_applied_organization_assignment(); } }
        public applied_organization_assignment get_applied_organization_assignment() { return new applied_organization_assignment (getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
        public applied_organization_assignment _applied_organization_assignment { get { return get_applied_organization_assignment(); } }
        public bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        public bool _is_applied_organizational_project_assignment { get { return is_applied_organizational_project_assignment(); } }
        public applied_organizational_project_assignment get_applied_organizational_project_assignment() { return new applied_organizational_project_assignment (getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT")); }
        public applied_organizational_project_assignment _applied_organizational_project_assignment { get { return get_applied_organizational_project_assignment(); } }
        public bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        public bool _is_applied_person_and_organization_assignment { get { return is_applied_person_and_organization_assignment(); } }
        public applied_person_and_organization_assignment get_applied_person_and_organization_assignment() { return new applied_person_and_organization_assignment (getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
        public applied_person_and_organization_assignment _applied_person_and_organization_assignment { get { return get_applied_person_and_organization_assignment(); } }
        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        public bool _is_approval_person_organization { get { return is_approval_person_organization(); } }
        public approval_person_organization get_approval_person_organization() { return new approval_person_organization (getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
        public approval_person_organization _approval_person_organization { get { return get_approval_person_organization(); } }
        public bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        public bool _is_approval_relationship { get { return is_approval_relationship(); } }
        public approval_relationship get_approval_relationship() { return new approval_relationship (getEntityInstance("APPROVAL_RELATIONSHIP")); }
        public approval_relationship _approval_relationship { get { return get_approval_relationship(); } }
        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public bool is_calendar_date() { return IsADBEntity("calendar_date"); }
        public bool _is_calendar_date { get { return is_calendar_date(); } }
        public calendar_date get_calendar_date() { return new calendar_date (getEntityInstance("CALENDAR_DATE")); }
        public calendar_date _calendar_date { get { return get_calendar_date(); } }
        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        public bool _is_characterized_class { get { return is_characterized_class(); } }
        public characterized_class get_characterized_class() { return new characterized_class (getEntityInstance("CHARACTERIZED_CLASS")); }
        public characterized_class _characterized_class { get { return get_characterized_class(); } }
        public bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        public bool _is_characterized_object { get { return is_characterized_object(); } }
        public characterized_object get_characterized_object() { return new characterized_object (getEntityInstance("CHARACTERIZED_OBJECT")); }
        public characterized_object _characterized_object { get { return get_characterized_object(); } }
        public bool is_class_() { return IsADBEntity("class_"); }
        public bool _is_class_ { get { return is_class_(); } }
        public class_ get_class_() { return new class_ (getEntityInstance("CLASS")); }
        public class_ _class_ { get { return get_class_(); } }
        public classified_item_get get_classified_item() { return new classified_item_get(this); }
        public classified_item_get __classified_item { get { return get_classified_item(); } }
        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public bool is_context_dependent_unit() { return IsADBEntity("context_dependent_unit"); }
        public bool _is_context_dependent_unit { get { return is_context_dependent_unit(); } }
        public context_dependent_unit get_context_dependent_unit() { return new context_dependent_unit (getEntityInstance("CONTEXT_DEPENDENT_UNIT")); }
        public context_dependent_unit _context_dependent_unit { get { return get_context_dependent_unit(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_conversion_based_unit() { return IsADBEntity("conversion_based_unit"); }
        public bool _is_conversion_based_unit { get { return is_conversion_based_unit(); } }
        public conversion_based_unit get_conversion_based_unit() { return new conversion_based_unit (getEntityInstance("CONVERSION_BASED_UNIT")); }
        public conversion_based_unit _conversion_based_unit { get { return get_conversion_based_unit(); } }
        public bool is_date_and_time() { return IsADBEntity("date_and_time"); }
        public bool _is_date_and_time { get { return is_date_and_time(); } }
        public date_and_time get_date_and_time() { return new date_and_time (getEntityInstance("DATE_AND_TIME")); }
        public date_and_time _date_and_time { get { return get_date_and_time(); } }
        public bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        public bool _is_date_and_time_assignment { get { return is_date_and_time_assignment(); } }
        public date_and_time_assignment get_date_and_time_assignment() { return new date_and_time_assignment (getEntityInstance("DATE_AND_TIME_ASSIGNMENT")); }
        public date_and_time_assignment _date_and_time_assignment { get { return get_date_and_time_assignment(); } }
        public bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        public bool _is_date_assignment { get { return is_date_assignment(); } }
        public date_assignment get_date_assignment() { return new date_assignment (getEntityInstance("DATE_ASSIGNMENT")); }
        public date_assignment _date_assignment { get { return get_date_assignment(); } }
        public bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        public bool _is_derived_unit { get { return is_derived_unit(); } }
        public derived_unit get_derived_unit() { return new derived_unit (getEntityInstance("DERIVED_UNIT")); }
        public derived_unit _derived_unit { get { return get_derived_unit(); } }
        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public bool is_directed_action() { return IsADBEntity("directed_action"); }
        public bool _is_directed_action { get { return is_directed_action(); } }
        public directed_action get_directed_action() { return new directed_action (getEntityInstance("DIRECTED_ACTION")); }
        public directed_action _directed_action { get { return get_directed_action(); } }
        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        public bool _is_document_relationship { get { return is_document_relationship(); } }
        public document_relationship get_document_relationship() { return new document_relationship (getEntityInstance("DOCUMENT_RELATIONSHIP")); }
        public document_relationship _document_relationship { get { return get_document_relationship(); } }
        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }
        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        public bool _is_general_property_relationship { get { return is_general_property_relationship(); } }
        public general_property_relationship get_general_property_relationship() { return new general_property_relationship (getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
        public general_property_relationship _general_property_relationship { get { return get_general_property_relationship(); } }
        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public bool is_identification_assignment() { return IsADBEntity("identification_assignment"); }
        public bool _is_identification_assignment { get { return is_identification_assignment(); } }
        public identification_assignment get_identification_assignment() { return new identification_assignment (getEntityInstance("IDENTIFICATION_ASSIGNMENT")); }
        public identification_assignment _identification_assignment { get { return get_identification_assignment(); } }
        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_language() { return IsADBEntity("language"); }
        public bool _is_language { get { return is_language(); } }
        public language get_language() { return new language (getEntityInstance("LANGUAGE")); }
        public language _language { get { return get_language(); } }
        public bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        public bool _is_measure_representation_item { get { return is_measure_representation_item(); } }
        public measure_representation_item get_measure_representation_item() { return new measure_representation_item (getEntityInstance("MEASURE_REPRESENTATION_ITEM")); }
        public measure_representation_item _measure_representation_item { get { return get_measure_representation_item(); } }
        public bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        public bool _is_measure_with_unit { get { return is_measure_with_unit(); } }
        public measure_with_unit get_measure_with_unit() { return new measure_with_unit (getEntityInstance("MEASURE_WITH_UNIT")); }
        public measure_with_unit _measure_with_unit { get { return get_measure_with_unit(); } }
        public bool is_multi_language_attribute_assignment() { return IsADBEntity("multi_language_attribute_assignment"); }
        public bool _is_multi_language_attribute_assignment { get { return is_multi_language_attribute_assignment(); } }
        public multi_language_attribute_assignment get_multi_language_attribute_assignment() { return new multi_language_attribute_assignment (getEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT")); }
        public multi_language_attribute_assignment _multi_language_attribute_assignment { get { return get_multi_language_attribute_assignment(); } }
        public bool is_named_unit() { return IsADBEntity("named_unit"); }
        public bool _is_named_unit { get { return is_named_unit(); } }
        public named_unit get_named_unit() { return new named_unit (getEntityInstance("NAMED_UNIT")); }
        public named_unit _named_unit { get { return get_named_unit(); } }
        public bool is_organization() { return IsADBEntity("organization"); }
        public bool _is_organization { get { return is_organization(); } }
        public organization get_organization() { return new organization (getEntityInstance("ORGANIZATION")); }
        public organization _organization { get { return get_organization(); } }
        public bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        public bool _is_organization_relationship { get { return is_organization_relationship(); } }
        public organization_relationship get_organization_relationship() { return new organization_relationship (getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
        public organization_relationship _organization_relationship { get { return get_organization_relationship(); } }
        public bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        public bool _is_organizational_address { get { return is_organizational_address(); } }
        public organizational_address get_organizational_address() { return new organizational_address (getEntityInstance("ORGANIZATIONAL_ADDRESS")); }
        public organizational_address _organizational_address { get { return get_organizational_address(); } }
        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        public bool _is_organizational_project_relationship { get { return is_organizational_project_relationship(); } }
        public organizational_project_relationship get_organizational_project_relationship() { return new organizational_project_relationship (getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); }
        public organizational_project_relationship _organizational_project_relationship { get { return get_organizational_project_relationship(); } }
        public bool is_person() { return IsADBEntity("person"); }
        public bool _is_person { get { return is_person(); } }
        public person get_person() { return new person (getEntityInstance("PERSON")); }
        public person _person { get { return get_person(); } }
        public bool is_person_and_organization_address() { return IsADBEntity("person_and_organization_address"); }
        public bool _is_person_and_organization_address { get { return is_person_and_organization_address(); } }
        public person_and_organization_address get_person_and_organization_address() { return new person_and_organization_address (getEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS")); }
        public person_and_organization_address _person_and_organization_address { get { return get_person_and_organization_address(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        public bool _is_product_definition_context { get { return is_product_definition_context(); } }
        public product_definition_context get_product_definition_context() { return new product_definition_context (getEntityInstance("PRODUCT_DEFINITION_CONTEXT")); }
        public product_definition_context _product_definition_context { get { return get_product_definition_context(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        public bool _is_property_definition_representation { get { return is_property_definition_representation(); } }
        public property_definition_representation get_property_definition_representation() { return new property_definition_representation (getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
        public property_definition_representation _property_definition_representation { get { return get_property_definition_representation(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public bool is_representation_context() { return IsADBEntity("representation_context"); }
        public bool _is_representation_context { get { return is_representation_context(); } }
        public representation_context get_representation_context() { return new representation_context (getEntityInstance("REPRESENTATION_CONTEXT")); }
        public representation_context _representation_context { get { return get_representation_context(); } }
        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        public bool _is_uncertainty_measure_with_unit { get { return is_uncertainty_measure_with_unit(); } }
        public uncertainty_measure_with_unit get_uncertainty_measure_with_unit() { return new uncertainty_measure_with_unit (getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); }
        public uncertainty_measure_with_unit _uncertainty_measure_with_unit { get { return get_uncertainty_measure_with_unit(); } }
        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }
        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class classification_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public classification_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public classification_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public classification_item_put() : base(null) { }

        public void put_action(action inst) { putEntityInstance("ACTION", inst); }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
        public void put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
        public void put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
        public void put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
        public void put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
        public void put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }
        public void put_address(address inst) { putEntityInstance("ADDRESS", inst); }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
        public void put_applied_action_request_assignment(applied_action_request_assignment inst) { putEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT", inst); }
        public void put_applied_approval_assignment(applied_approval_assignment inst) { putEntityInstance("APPLIED_APPROVAL_ASSIGNMENT", inst); }
        public void put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_contract_assignment(applied_contract_assignment inst) { putEntityInstance("APPLIED_CONTRACT_ASSIGNMENT", inst); }
        public void put_applied_date_and_time_assignment(applied_date_and_time_assignment inst) { putEntityInstance("APPLIED_DATE_AND_TIME_ASSIGNMENT", inst); }
        public void put_applied_date_assignment(applied_date_assignment inst) { putEntityInstance("APPLIED_DATE_ASSIGNMENT", inst); }
        public void put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
        public void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
        public void put_applied_effectivity_assignment(applied_effectivity_assignment inst) { putEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT", inst); }
        public void put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst) { putEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT", inst); }
        public void put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
        public void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
        public void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
        public void put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
        public void put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
        public void put_calendar_date(calendar_date inst) { putEntityInstance("CALENDAR_DATE", inst); }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
        public void put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }
        public void put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
        public void put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
        public classified_item_put put_classified_item() { return new classified_item_put(this); }
        public classified_item_put __classified_item { get { return put_classified_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
        public void put_context_dependent_unit(context_dependent_unit inst) { putEntityInstance("CONTEXT_DEPENDENT_UNIT", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_conversion_based_unit(conversion_based_unit inst) { putEntityInstance("CONVERSION_BASED_UNIT", inst); }
        public void put_date_and_time(date_and_time inst) { putEntityInstance("DATE_AND_TIME", inst); }
        public void put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }
        public void put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }
        public void put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
        public void put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
        public void put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
        public void put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }
        public void put_identification_assignment(identification_assignment inst) { putEntityInstance("IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_language(language inst) { putEntityInstance("LANGUAGE", inst); }
        public void put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }
        public void put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
        public void put_multi_language_attribute_assignment(multi_language_attribute_assignment inst) { putEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT", inst); }
        public void put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
        public void put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
        public void put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
        public void put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
        public void put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
        public void put_person(person inst) { putEntityInstance("PERSON", inst); }
        public void put_person_and_organization_address(person_and_organization_address inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
        public void put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        public void put_representation_context(representation_context inst) { putEntityInstance("REPRESENTATION_CONTEXT", inst); }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class document_reference_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public document_reference_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public document_reference_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public document_reference_item() : base(null) { }


        public bool is_action_method() { return IsADBEntity("action_method"); }
        public bool _is_action_method { get { return is_action_method(); } }
        public action_method get_action_method() { return new action_method (getEntityInstance("ACTION_METHOD")); }
        public action_method _action_method { get { return get_action_method(); } }
        public void put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }

        public bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        public bool _is_applied_external_identification_assignment { get { return is_applied_external_identification_assignment(); } }
        public applied_external_identification_assignment get_applied_external_identification_assignment() { return new applied_external_identification_assignment (getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")); }
        public applied_external_identification_assignment _applied_external_identification_assignment { get { return get_applied_external_identification_assignment(); } }
        public void put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        public bool _is_assembly_component_usage { get { return is_assembly_component_usage(); } }
        public assembly_component_usage get_assembly_component_usage() { return new assembly_component_usage (getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); }
        public assembly_component_usage _assembly_component_usage { get { return get_assembly_component_usage(); } }
        public void put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }

        public bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        public bool _is_characterized_class { get { return is_characterized_class(); } }
        public characterized_class get_characterized_class() { return new characterized_class (getEntityInstance("CHARACTERIZED_CLASS")); }
        public characterized_class _characterized_class { get { return get_characterized_class(); } }
        public void put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }

        public bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        public bool _is_characterized_object { get { return is_characterized_object(); } }
        public characterized_object get_characterized_object() { return new characterized_object (getEntityInstance("CHARACTERIZED_OBJECT")); }
        public characterized_object _characterized_object { get { return get_characterized_object(); } }
        public void put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }

        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }

        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }

        public bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        public bool _is_dimensional_size { get { return is_dimensional_size(); } }
        public dimensional_size get_dimensional_size() { return new dimensional_size (getEntityInstance("DIMENSIONAL_SIZE")); }
        public dimensional_size _dimensional_size { get { return get_dimensional_size(); } }
        public void put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }

        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }

        public bool is_externally_defined_dimension_definition() { return IsADBEntity("externally_defined_dimension_definition"); }
        public bool _is_externally_defined_dimension_definition { get { return is_externally_defined_dimension_definition(); } }
        public externally_defined_dimension_definition get_externally_defined_dimension_definition() { return new externally_defined_dimension_definition (getEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION")); }
        public externally_defined_dimension_definition _externally_defined_dimension_definition { get { return get_externally_defined_dimension_definition(); } }
        public void put_externally_defined_dimension_definition(externally_defined_dimension_definition inst) { putEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION", inst); }

        public bool is_externally_defined_item() { return IsADBEntity("externally_defined_item"); }
        public bool _is_externally_defined_item { get { return is_externally_defined_item(); } }
        public externally_defined_item get_externally_defined_item() { return new externally_defined_item (getEntityInstance("EXTERNALLY_DEFINED_ITEM")); }
        public externally_defined_item _externally_defined_item { get { return get_externally_defined_item(); } }
        public void put_externally_defined_item(externally_defined_item inst) { putEntityInstance("EXTERNALLY_DEFINED_ITEM", inst); }

        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }

        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }

        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_material_designation() { return IsADBEntity("material_designation"); }
        public bool _is_material_designation { get { return is_material_designation(); } }
        public material_designation get_material_designation() { return new material_designation (getEntityInstance("MATERIAL_DESIGNATION")); }
        public material_designation _material_designation { get { return get_material_designation(); } }
        public void put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }

        public bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        public bool _is_measure_representation_item { get { return is_measure_representation_item(); } }
        public measure_representation_item get_measure_representation_item() { return new measure_representation_item (getEntityInstance("MEASURE_REPRESENTATION_ITEM")); }
        public measure_representation_item _measure_representation_item { get { return get_measure_representation_item(); } }
        public void put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_category() { return IsADBEntity("product_category"); }
        public bool _is_product_category { get { return is_product_category(); } }
        public product_category get_product_category() { return new product_category (getEntityInstance("PRODUCT_CATEGORY")); }
        public product_category _product_category { get { return get_product_category(); } }
        public void put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }

        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }

        public bool is_rule_set() { return IsADBEntity("rule_set"); }
        public bool _is_rule_set { get { return is_rule_set(); } }
        public rule_set get_rule_set() { return new rule_set (getEntityInstance("RULE_SET")); }
        public rule_set _rule_set { get { return get_rule_set(); } }
        public void put_rule_set(rule_set inst) { putEntityInstance("RULE_SET", inst); }

        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }

        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }

        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }

        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class document_reference_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public document_reference_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public document_reference_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public document_reference_item_get() : base(null) { }

        public bool is_action_method() { return IsADBEntity("action_method"); }
        public bool _is_action_method { get { return is_action_method(); } }
        public action_method get_action_method() { return new action_method (getEntityInstance("ACTION_METHOD")); }
        public action_method _action_method { get { return get_action_method(); } }
        public bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        public bool _is_applied_external_identification_assignment { get { return is_applied_external_identification_assignment(); } }
        public applied_external_identification_assignment get_applied_external_identification_assignment() { return new applied_external_identification_assignment (getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")); }
        public applied_external_identification_assignment _applied_external_identification_assignment { get { return get_applied_external_identification_assignment(); } }
        public bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        public bool _is_assembly_component_usage { get { return is_assembly_component_usage(); } }
        public assembly_component_usage get_assembly_component_usage() { return new assembly_component_usage (getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); }
        public assembly_component_usage _assembly_component_usage { get { return get_assembly_component_usage(); } }
        public bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        public bool _is_characterized_class { get { return is_characterized_class(); } }
        public characterized_class get_characterized_class() { return new characterized_class (getEntityInstance("CHARACTERIZED_CLASS")); }
        public characterized_class _characterized_class { get { return get_characterized_class(); } }
        public bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        public bool _is_characterized_object { get { return is_characterized_object(); } }
        public characterized_object get_characterized_object() { return new characterized_object (getEntityInstance("CHARACTERIZED_OBJECT")); }
        public characterized_object _characterized_object { get { return get_characterized_object(); } }
        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        public bool _is_dimensional_size { get { return is_dimensional_size(); } }
        public dimensional_size get_dimensional_size() { return new dimensional_size (getEntityInstance("DIMENSIONAL_SIZE")); }
        public dimensional_size _dimensional_size { get { return get_dimensional_size(); } }
        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public bool is_externally_defined_dimension_definition() { return IsADBEntity("externally_defined_dimension_definition"); }
        public bool _is_externally_defined_dimension_definition { get { return is_externally_defined_dimension_definition(); } }
        public externally_defined_dimension_definition get_externally_defined_dimension_definition() { return new externally_defined_dimension_definition (getEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION")); }
        public externally_defined_dimension_definition _externally_defined_dimension_definition { get { return get_externally_defined_dimension_definition(); } }
        public bool is_externally_defined_item() { return IsADBEntity("externally_defined_item"); }
        public bool _is_externally_defined_item { get { return is_externally_defined_item(); } }
        public externally_defined_item get_externally_defined_item() { return new externally_defined_item (getEntityInstance("EXTERNALLY_DEFINED_ITEM")); }
        public externally_defined_item _externally_defined_item { get { return get_externally_defined_item(); } }
        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_material_designation() { return IsADBEntity("material_designation"); }
        public bool _is_material_designation { get { return is_material_designation(); } }
        public material_designation get_material_designation() { return new material_designation (getEntityInstance("MATERIAL_DESIGNATION")); }
        public material_designation _material_designation { get { return get_material_designation(); } }
        public bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        public bool _is_measure_representation_item { get { return is_measure_representation_item(); } }
        public measure_representation_item get_measure_representation_item() { return new measure_representation_item (getEntityInstance("MEASURE_REPRESENTATION_ITEM")); }
        public measure_representation_item _measure_representation_item { get { return get_measure_representation_item(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_category() { return IsADBEntity("product_category"); }
        public bool _is_product_category { get { return is_product_category(); } }
        public product_category get_product_category() { return new product_category (getEntityInstance("PRODUCT_CATEGORY")); }
        public product_category _product_category { get { return get_product_category(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public bool is_rule_set() { return IsADBEntity("rule_set"); }
        public bool _is_rule_set { get { return is_rule_set(); } }
        public rule_set get_rule_set() { return new rule_set (getEntityInstance("RULE_SET")); }
        public rule_set _rule_set { get { return get_rule_set(); } }
        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }
        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class document_reference_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public document_reference_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public document_reference_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public document_reference_item_put() : base(null) { }

        public void put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
        public void put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
        public void put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }
        public void put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
        public void put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
        public void put_externally_defined_dimension_definition(externally_defined_dimension_definition inst) { putEntityInstance("EXTERNALLY_DEFINED_DIMENSION_DEFINITION", inst); }
        public void put_externally_defined_item(externally_defined_item inst) { putEntityInstance("EXTERNALLY_DEFINED_ITEM", inst); }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
        public void put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
        public void put_rule_set(rule_set inst) { putEntityInstance("RULE_SET", inst); }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class identification_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public identification_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public identification_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public identification_item() : base(null) { }


        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }

        public bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        public bool _is_characterized_class { get { return is_characterized_class(); } }
        public characterized_class get_characterized_class() { return new characterized_class (getEntityInstance("CHARACTERIZED_CLASS")); }
        public characterized_class _characterized_class { get { return get_characterized_class(); } }
        public void put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }

        public bool is_class_() { return IsADBEntity("class_"); }
        public bool _is_class_ { get { return is_class_(); } }
        public class_ get_class_() { return new class_ (getEntityInstance("CLASS")); }
        public class_ _class_ { get { return get_class_(); } }
        public void put_class_(class_ inst) { putEntityInstance("CLASS", inst); }

        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        public bool _is_dimensional_size { get { return is_dimensional_size(); } }
        public dimensional_size get_dimensional_size() { return new dimensional_size (getEntityInstance("DIMENSIONAL_SIZE")); }
        public dimensional_size _dimensional_size { get { return get_dimensional_size(); } }
        public void put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }

        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }

        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }

        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }

        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }

        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_material_designation() { return IsADBEntity("material_designation"); }
        public bool _is_material_designation { get { return is_material_designation(); } }
        public material_designation get_material_designation() { return new material_designation (getEntityInstance("MATERIAL_DESIGNATION")); }
        public material_designation _material_designation { get { return get_material_designation(); } }
        public void put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }

        public bool is_organization() { return IsADBEntity("organization"); }
        public bool _is_organization { get { return is_organization(); } }
        public organization get_organization() { return new organization (getEntityInstance("ORGANIZATION")); }
        public organization _organization { get { return get_organization(); } }
        public void put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }

        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_category() { return IsADBEntity("product_category"); }
        public bool _is_product_category { get { return is_product_category(); } }
        public product_category get_product_category() { return new product_category (getEntityInstance("PRODUCT_CATEGORY")); }
        public product_category _product_category { get { return get_product_category(); } }
        public void put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }

        public bool is_product_class() { return IsADBEntity("product_class"); }
        public bool _is_product_class { get { return is_product_class(); } }
        public product_class get_product_class() { return new product_class (getEntityInstance("PRODUCT_CLASS")); }
        public product_class _product_class { get { return get_product_class(); } }
        public void put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }

        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }

        public bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        public bool _is_product_concept_feature { get { return is_product_concept_feature(); } }
        public product_concept_feature get_product_concept_feature() { return new product_concept_feature (getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
        public product_concept_feature _product_concept_feature { get { return get_product_concept_feature(); } }
        public void put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_identification() { return IsADBEntity("product_identification"); }
        public bool _is_product_identification { get { return is_product_identification(); } }
        public product_identification get_product_identification() { return new product_identification (getEntityInstance("PRODUCT_IDENTIFICATION")); }
        public product_identification _product_identification { get { return get_product_identification(); } }
        public void put_product_identification(product_identification inst) { putEntityInstance("PRODUCT_IDENTIFICATION", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }

        public bool is_rule_set() { return IsADBEntity("rule_set"); }
        public bool _is_rule_set { get { return is_rule_set(); } }
        public rule_set get_rule_set() { return new rule_set (getEntityInstance("RULE_SET")); }
        public rule_set _rule_set { get { return get_rule_set(); } }
        public void put_rule_set(rule_set inst) { putEntityInstance("RULE_SET", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        public bool _is_security_classification_level { get { return is_security_classification_level(); } }
        public security_classification_level get_security_classification_level() { return new security_classification_level (getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); }
        public security_classification_level _security_classification_level { get { return get_security_classification_level(); } }
        public void put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }

        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }

        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }

        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
        };


    public class identification_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public identification_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public identification_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public identification_item_get() : base(null) { }

        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public bool is_characterized_class() { return IsADBEntity("characterized_class"); }
        public bool _is_characterized_class { get { return is_characterized_class(); } }
        public characterized_class get_characterized_class() { return new characterized_class (getEntityInstance("CHARACTERIZED_CLASS")); }
        public characterized_class _characterized_class { get { return get_characterized_class(); } }
        public bool is_class_() { return IsADBEntity("class_"); }
        public bool _is_class_ { get { return is_class_(); } }
        public class_ get_class_() { return new class_ (getEntityInstance("CLASS")); }
        public class_ _class_ { get { return get_class_(); } }
        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        public bool _is_dimensional_size { get { return is_dimensional_size(); } }
        public dimensional_size get_dimensional_size() { return new dimensional_size (getEntityInstance("DIMENSIONAL_SIZE")); }
        public dimensional_size _dimensional_size { get { return get_dimensional_size(); } }
        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_material_designation() { return IsADBEntity("material_designation"); }
        public bool _is_material_designation { get { return is_material_designation(); } }
        public material_designation get_material_designation() { return new material_designation (getEntityInstance("MATERIAL_DESIGNATION")); }
        public material_designation _material_designation { get { return get_material_designation(); } }
        public bool is_organization() { return IsADBEntity("organization"); }
        public bool _is_organization { get { return is_organization(); } }
        public organization get_organization() { return new organization (getEntityInstance("ORGANIZATION")); }
        public organization _organization { get { return get_organization(); } }
        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_category() { return IsADBEntity("product_category"); }
        public bool _is_product_category { get { return is_product_category(); } }
        public product_category get_product_category() { return new product_category (getEntityInstance("PRODUCT_CATEGORY")); }
        public product_category _product_category { get { return get_product_category(); } }
        public bool is_product_class() { return IsADBEntity("product_class"); }
        public bool _is_product_class { get { return is_product_class(); } }
        public product_class get_product_class() { return new product_class (getEntityInstance("PRODUCT_CLASS")); }
        public product_class _product_class { get { return get_product_class(); } }
        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        public bool _is_product_concept_feature { get { return is_product_concept_feature(); } }
        public product_concept_feature get_product_concept_feature() { return new product_concept_feature (getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
        public product_concept_feature _product_concept_feature { get { return get_product_concept_feature(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_identification() { return IsADBEntity("product_identification"); }
        public bool _is_product_identification { get { return is_product_identification(); } }
        public product_identification get_product_identification() { return new product_identification (getEntityInstance("PRODUCT_IDENTIFICATION")); }
        public product_identification _product_identification { get { return get_product_identification(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public bool is_rule_set() { return IsADBEntity("rule_set"); }
        public bool _is_rule_set { get { return is_rule_set(); } }
        public rule_set get_rule_set() { return new rule_set (getEntityInstance("RULE_SET")); }
        public rule_set _rule_set { get { return get_rule_set(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_security_classification_level() { return IsADBEntity("security_classification_level"); }
        public bool _is_security_classification_level { get { return is_security_classification_level(); } }
        public security_classification_level get_security_classification_level() { return new security_classification_level (getEntityInstance("SECURITY_CLASSIFICATION_LEVEL")); }
        public security_classification_level _security_classification_level { get { return get_security_classification_level(); } }
        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class identification_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public identification_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public identification_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public identification_item_put() : base(null) { }

        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
        public void put_characterized_class(characterized_class inst) { putEntityInstance("CHARACTERIZED_CLASS", inst); }
        public void put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_material_designation(material_designation inst) { putEntityInstance("MATERIAL_DESIGNATION", inst); }
        public void put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
        public void put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
        public void put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_identification(product_identification inst) { putEntityInstance("PRODUCT_IDENTIFICATION", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        public void put_rule_set(rule_set inst) { putEntityInstance("RULE_SET", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_security_classification_level(security_classification_level inst) { putEntityInstance("SECURITY_CLASSIFICATION_LEVEL", inst); }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
        };


    public class requirement_assigned_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public requirement_assigned_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public requirement_assigned_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public requirement_assigned_item() : base(null) { }


        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }

        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_class() { return IsADBEntity("product_class"); }
        public bool _is_product_class { get { return is_product_class(); } }
        public product_class get_product_class() { return new product_class (getEntityInstance("PRODUCT_CLASS")); }
        public product_class _product_class { get { return get_product_class(); } }
        public void put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }

        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        };


    public class requirement_assigned_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public requirement_assigned_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public requirement_assigned_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public requirement_assigned_item_get() : base(null) { }

        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_class() { return IsADBEntity("product_class"); }
        public bool _is_product_class { get { return is_product_class(); } }
        public product_class get_product_class() { return new product_class (getEntityInstance("PRODUCT_CLASS")); }
        public product_class _product_class { get { return get_product_class(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class requirement_assigned_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public requirement_assigned_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public requirement_assigned_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public requirement_assigned_item_put() : base(null) { }

        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        };


    public class action_items : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_items(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_items(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_items() : base(null) { }


        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }

        public certification_item _certification_item() { return new certification_item(this); }
        public certification_item __certification_item { get { return _certification_item(); } }

        public bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        public bool _is_characterized_object { get { return is_characterized_object(); } }
        public characterized_object get_characterized_object() { return new characterized_object (getEntityInstance("CHARACTERIZED_OBJECT")); }
        public characterized_object _characterized_object { get { return get_characterized_object(); } }
        public void put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }

        public classification_item _classification_item() { return new classification_item(this); }
        public classification_item __classification_item { get { return _classification_item(); } }

        public bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        public bool _is_configuration_effectivity { get { return is_configuration_effectivity(); } }
        public configuration_effectivity get_configuration_effectivity() { return new configuration_effectivity (getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
        public configuration_effectivity _configuration_effectivity { get { return get_configuration_effectivity(); } }
        public void put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }

        public document_reference_item _document_reference_item() { return new document_reference_item(this); }
        public document_reference_item __document_reference_item { get { return _document_reference_item(); } }

        public identification_item _identification_item() { return new identification_item(this); }
        public identification_item __identification_item { get { return _identification_item(); } }

        public bool is_organization() { return IsADBEntity("organization"); }
        public bool _is_organization { get { return is_organization(); } }
        public organization get_organization() { return new organization (getEntityInstance("ORGANIZATION")); }
        public organization _organization { get { return get_organization(); } }
        public void put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }

        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public requirement_assigned_item _requirement_assigned_item() { return new requirement_assigned_item(this); }
        public requirement_assigned_item __requirement_assigned_item { get { return _requirement_assigned_item(); } }
        };


    public class action_items_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_items_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_items_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_items_get() : base(null) { }

        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public certification_item_get get_certification_item() { return new certification_item_get(this); }
        public certification_item_get __certification_item { get { return get_certification_item(); } }
        public bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        public bool _is_characterized_object { get { return is_characterized_object(); } }
        public characterized_object get_characterized_object() { return new characterized_object (getEntityInstance("CHARACTERIZED_OBJECT")); }
        public characterized_object _characterized_object { get { return get_characterized_object(); } }
        public classification_item_get get_classification_item() { return new classification_item_get(this); }
        public classification_item_get __classification_item { get { return get_classification_item(); } }
        public bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        public bool _is_configuration_effectivity { get { return is_configuration_effectivity(); } }
        public configuration_effectivity get_configuration_effectivity() { return new configuration_effectivity (getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
        public configuration_effectivity _configuration_effectivity { get { return get_configuration_effectivity(); } }
        public document_reference_item_get get_document_reference_item() { return new document_reference_item_get(this); }
        public document_reference_item_get __document_reference_item { get { return get_document_reference_item(); } }
        public identification_item_get get_identification_item() { return new identification_item_get(this); }
        public identification_item_get __identification_item { get { return get_identification_item(); } }
        public bool is_organization() { return IsADBEntity("organization"); }
        public bool _is_organization { get { return is_organization(); } }
        public organization get_organization() { return new organization (getEntityInstance("ORGANIZATION")); }
        public organization _organization { get { return get_organization(); } }
        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public requirement_assigned_item_get get_requirement_assigned_item() { return new requirement_assigned_item_get(this); }
        public requirement_assigned_item_get __requirement_assigned_item { get { return get_requirement_assigned_item(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class action_items_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_items_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_items_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_items_put() : base(null) { }

        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
        public certification_item_put put_certification_item() { return new certification_item_put(this); }
        public certification_item_put __certification_item { get { return put_certification_item(); } }
        public void put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
        public classification_item_put put_classification_item() { return new classification_item_put(this); }
        public classification_item_put __classification_item { get { return put_classification_item(); } }
        public void put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
        public document_reference_item_put put_document_reference_item() { return new document_reference_item_put(this); }
        public document_reference_item_put __document_reference_item { get { return put_document_reference_item(); } }
        public identification_item_put put_identification_item() { return new identification_item_put(this); }
        public identification_item_put __identification_item { get { return put_identification_item(); } }
        public void put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public requirement_assigned_item_put put_requirement_assigned_item() { return new requirement_assigned_item_put(this); }
        public requirement_assigned_item_put __requirement_assigned_item { get { return put_requirement_assigned_item(); } }
        };


    public class action_method_items : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_method_items(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_method_items(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_method_items() : base(null) { }


        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class action_method_items_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_method_items_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_method_items_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_method_items_get() : base(null) { }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class action_method_items_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_method_items_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_method_items_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_method_items_put() : base(null) { }

        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class action_request_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_request_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_request_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_request_item() : base(null) { }


        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }

        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class action_request_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_request_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_request_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_request_item_get() : base(null) { }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class action_request_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public action_request_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public action_request_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public action_request_item_put() : base(null) { }

        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class angle_direction_reference_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public angle_direction_reference_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public angle_direction_reference_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public angle_direction_reference_select() : base(null) { }


        public bool is_direction() { return IsADBEntity("direction"); }
        public bool _is_direction { get { return is_direction(); } }
        public direction get_direction() { return new direction (getEntityInstance("DIRECTION")); }
        public direction _direction { get { return get_direction(); } }
        public void put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }

        public bool is_curve() { return IsADBEntity("curve"); }
        public bool _is_curve { get { return is_curve(); } }
        public curve get_curve() { return new curve (getEntityInstance("CURVE")); }
        public curve _curve { get { return get_curve(); } }
        public void put_curve(curve inst) { putEntityInstance("CURVE", inst); }

        public bool is_point_path() { return IsADBEntity("point_path"); }
        public bool _is_point_path { get { return is_point_path(); } }
        public point_path get_point_path() { return new point_path (getEntityInstance("POINT_PATH")); }
        public point_path _point_path { get { return get_point_path(); } }
        public void put_point_path(point_path inst) { putEntityInstance("POINT_PATH", inst); }
        };


    public class angle_direction_reference_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public angle_direction_reference_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public angle_direction_reference_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public angle_direction_reference_select_get() : base(null) { }

        public bool is_direction() { return IsADBEntity("direction"); }
        public bool _is_direction { get { return is_direction(); } }
        public direction get_direction() { return new direction (getEntityInstance("DIRECTION")); }
        public direction _direction { get { return get_direction(); } }
        public bool is_curve() { return IsADBEntity("curve"); }
        public bool _is_curve { get { return is_curve(); } }
        public curve get_curve() { return new curve (getEntityInstance("CURVE")); }
        public curve _curve { get { return get_curve(); } }
        public bool is_point_path() { return IsADBEntity("point_path"); }
        public bool _is_point_path { get { return is_point_path(); } }
        public point_path get_point_path() { return new point_path (getEntityInstance("POINT_PATH")); }
        public point_path _point_path { get { return get_point_path(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class angle_direction_reference_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public angle_direction_reference_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public angle_direction_reference_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public angle_direction_reference_select_put() : base(null) { }

        public void put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
        public void put_curve(curve inst) { putEntityInstance("CURVE", inst); }
        public void put_point_path(point_path inst) { putEntityInstance("POINT_PATH", inst); }
        };


    public class angle_direction_reference_with_a2p3d_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public angle_direction_reference_with_a2p3d_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public angle_direction_reference_with_a2p3d_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public angle_direction_reference_with_a2p3d_select() : base(null) { }


        public angle_direction_reference_select _angle_direction_reference_select() { return new angle_direction_reference_select(this); }
        public angle_direction_reference_select __angle_direction_reference_select { get { return _angle_direction_reference_select(); } }

        public bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        public bool _is_axis2_placement_3d { get { return is_axis2_placement_3d(); } }
        public axis2_placement_3d get_axis2_placement_3d() { return new axis2_placement_3d (getEntityInstance("AXIS2_PLACEMENT_3D")); }
        public axis2_placement_3d _axis2_placement_3d { get { return get_axis2_placement_3d(); } }
        public void put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
        };


    public class angle_direction_reference_with_a2p3d_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public angle_direction_reference_with_a2p3d_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public angle_direction_reference_with_a2p3d_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public angle_direction_reference_with_a2p3d_select_get() : base(null) { }

        public angle_direction_reference_select_get get_angle_direction_reference_select() { return new angle_direction_reference_select_get(this); }
        public angle_direction_reference_select_get __angle_direction_reference_select { get { return get_angle_direction_reference_select(); } }
        public bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        public bool _is_axis2_placement_3d { get { return is_axis2_placement_3d(); } }
        public axis2_placement_3d get_axis2_placement_3d() { return new axis2_placement_3d (getEntityInstance("AXIS2_PLACEMENT_3D")); }
        public axis2_placement_3d _axis2_placement_3d { get { return get_axis2_placement_3d(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class angle_direction_reference_with_a2p3d_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public angle_direction_reference_with_a2p3d_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public angle_direction_reference_with_a2p3d_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public angle_direction_reference_with_a2p3d_select_put() : base(null) { }

        public angle_direction_reference_select_put put_angle_direction_reference_select() { return new angle_direction_reference_select_put(this); }
        public angle_direction_reference_select_put __angle_direction_reference_select { get { return put_angle_direction_reference_select(); } }
        public void put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
        };


    public class annotation_plane_element : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_plane_element(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_plane_element(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_plane_element() : base(null) { }


        public bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        public bool _is_draughting_callout { get { return is_draughting_callout(); } }
        public draughting_callout get_draughting_callout() { return new draughting_callout (getEntityInstance("DRAUGHTING_CALLOUT")); }
        public draughting_callout _draughting_callout { get { return get_draughting_callout(); } }
        public void put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }

        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }
        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
        };


    public class annotation_plane_element_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_plane_element_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_plane_element_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_plane_element_get() : base(null) { }

        public bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        public bool _is_draughting_callout { get { return is_draughting_callout(); } }
        public draughting_callout get_draughting_callout() { return new draughting_callout (getEntityInstance("DRAUGHTING_CALLOUT")); }
        public draughting_callout _draughting_callout { get { return get_draughting_callout(); } }
        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class annotation_plane_element_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_plane_element_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_plane_element_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_plane_element_put() : base(null) { }

        public void put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
        };


    public class annotation_representation_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_representation_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_representation_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_representation_select() : base(null) { }


        public bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        public bool _is_presentation_area { get { return is_presentation_area(); } }
        public presentation_area get_presentation_area() { return new presentation_area (getEntityInstance("PRESENTATION_AREA")); }
        public presentation_area _presentation_area { get { return get_presentation_area(); } }
        public void put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }

        public bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        public bool _is_presentation_view { get { return is_presentation_view(); } }
        public presentation_view get_presentation_view() { return new presentation_view (getEntityInstance("PRESENTATION_VIEW")); }
        public presentation_view _presentation_view { get { return get_presentation_view(); } }
        public void put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }

        public bool is_symbol_representation() { return IsADBEntity("symbol_representation"); }
        public bool _is_symbol_representation { get { return is_symbol_representation(); } }
        public symbol_representation get_symbol_representation() { return new symbol_representation (getEntityInstance("SYMBOL_REPRESENTATION")); }
        public symbol_representation _symbol_representation { get { return get_symbol_representation(); } }
        public void put_symbol_representation(symbol_representation inst) { putEntityInstance("SYMBOL_REPRESENTATION", inst); }
        };


    public class annotation_representation_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_representation_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_representation_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_representation_select_get() : base(null) { }

        public bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        public bool _is_presentation_area { get { return is_presentation_area(); } }
        public presentation_area get_presentation_area() { return new presentation_area (getEntityInstance("PRESENTATION_AREA")); }
        public presentation_area _presentation_area { get { return get_presentation_area(); } }
        public bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        public bool _is_presentation_view { get { return is_presentation_view(); } }
        public presentation_view get_presentation_view() { return new presentation_view (getEntityInstance("PRESENTATION_VIEW")); }
        public presentation_view _presentation_view { get { return get_presentation_view(); } }
        public bool is_symbol_representation() { return IsADBEntity("symbol_representation"); }
        public bool _is_symbol_representation { get { return is_symbol_representation(); } }
        public symbol_representation get_symbol_representation() { return new symbol_representation (getEntityInstance("SYMBOL_REPRESENTATION")); }
        public symbol_representation _symbol_representation { get { return get_symbol_representation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class annotation_representation_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_representation_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_representation_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_representation_select_put() : base(null) { }

        public void put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
        public void put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
        public void put_symbol_representation(symbol_representation inst) { putEntityInstance("SYMBOL_REPRESENTATION", inst); }
        };


    public class annotation_symbol_occurrence_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_symbol_occurrence_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_symbol_occurrence_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_symbol_occurrence_item() : base(null) { }


        public bool is_annotation_symbol() { return IsADBEntity("annotation_symbol"); }
        public bool _is_annotation_symbol { get { return is_annotation_symbol(); } }
        public annotation_symbol get_annotation_symbol() { return new annotation_symbol (getEntityInstance("ANNOTATION_SYMBOL")); }
        public annotation_symbol _annotation_symbol { get { return get_annotation_symbol(); } }
        public void put_annotation_symbol(annotation_symbol inst) { putEntityInstance("ANNOTATION_SYMBOL", inst); }

        public bool is_defined_symbol() { return IsADBEntity("defined_symbol"); }
        public bool _is_defined_symbol { get { return is_defined_symbol(); } }
        public defined_symbol get_defined_symbol() { return new defined_symbol (getEntityInstance("DEFINED_SYMBOL")); }
        public defined_symbol _defined_symbol { get { return get_defined_symbol(); } }
        public void put_defined_symbol(defined_symbol inst) { putEntityInstance("DEFINED_SYMBOL", inst); }
        };


    public class annotation_symbol_occurrence_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_symbol_occurrence_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_symbol_occurrence_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_symbol_occurrence_item_get() : base(null) { }

        public bool is_annotation_symbol() { return IsADBEntity("annotation_symbol"); }
        public bool _is_annotation_symbol { get { return is_annotation_symbol(); } }
        public annotation_symbol get_annotation_symbol() { return new annotation_symbol (getEntityInstance("ANNOTATION_SYMBOL")); }
        public annotation_symbol _annotation_symbol { get { return get_annotation_symbol(); } }
        public bool is_defined_symbol() { return IsADBEntity("defined_symbol"); }
        public bool _is_defined_symbol { get { return is_defined_symbol(); } }
        public defined_symbol get_defined_symbol() { return new defined_symbol (getEntityInstance("DEFINED_SYMBOL")); }
        public defined_symbol _defined_symbol { get { return get_defined_symbol(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class annotation_symbol_occurrence_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_symbol_occurrence_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_symbol_occurrence_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_symbol_occurrence_item_put() : base(null) { }

        public void put_annotation_symbol(annotation_symbol inst) { putEntityInstance("ANNOTATION_SYMBOL", inst); }
        public void put_defined_symbol(defined_symbol inst) { putEntityInstance("DEFINED_SYMBOL", inst); }
        };


    public class annotation_text_occurrence_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_text_occurrence_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_text_occurrence_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_text_occurrence_item() : base(null) { }


        public bool is_text_literal() { return IsADBEntity("text_literal"); }
        public bool _is_text_literal { get { return is_text_literal(); } }
        public text_literal get_text_literal() { return new text_literal (getEntityInstance("TEXT_LITERAL")); }
        public text_literal _text_literal { get { return get_text_literal(); } }
        public void put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }

        public bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        public bool _is_annotation_text { get { return is_annotation_text(); } }
        public annotation_text get_annotation_text() { return new annotation_text (getEntityInstance("ANNOTATION_TEXT")); }
        public annotation_text _annotation_text { get { return get_annotation_text(); } }
        public void put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }

        public bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        public bool _is_annotation_text_character { get { return is_annotation_text_character(); } }
        public annotation_text_character get_annotation_text_character() { return new annotation_text_character (getEntityInstance("ANNOTATION_TEXT_CHARACTER")); }
        public annotation_text_character _annotation_text_character { get { return get_annotation_text_character(); } }
        public void put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }

        public bool is_composite_text() { return IsADBEntity("composite_text"); }
        public bool _is_composite_text { get { return is_composite_text(); } }
        public composite_text get_composite_text() { return new composite_text (getEntityInstance("COMPOSITE_TEXT")); }
        public composite_text _composite_text { get { return get_composite_text(); } }
        public void put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
        };


    public class annotation_text_occurrence_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_text_occurrence_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_text_occurrence_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_text_occurrence_item_get() : base(null) { }

        public bool is_text_literal() { return IsADBEntity("text_literal"); }
        public bool _is_text_literal { get { return is_text_literal(); } }
        public text_literal get_text_literal() { return new text_literal (getEntityInstance("TEXT_LITERAL")); }
        public text_literal _text_literal { get { return get_text_literal(); } }
        public bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        public bool _is_annotation_text { get { return is_annotation_text(); } }
        public annotation_text get_annotation_text() { return new annotation_text (getEntityInstance("ANNOTATION_TEXT")); }
        public annotation_text _annotation_text { get { return get_annotation_text(); } }
        public bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        public bool _is_annotation_text_character { get { return is_annotation_text_character(); } }
        public annotation_text_character get_annotation_text_character() { return new annotation_text_character (getEntityInstance("ANNOTATION_TEXT_CHARACTER")); }
        public annotation_text_character _annotation_text_character { get { return get_annotation_text_character(); } }
        public bool is_composite_text() { return IsADBEntity("composite_text"); }
        public bool _is_composite_text { get { return is_composite_text(); } }
        public composite_text get_composite_text() { return new composite_text (getEntityInstance("COMPOSITE_TEXT")); }
        public composite_text _composite_text { get { return get_composite_text(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class annotation_text_occurrence_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public annotation_text_occurrence_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public annotation_text_occurrence_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public annotation_text_occurrence_item_put() : base(null) { }

        public void put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
        public void put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
        public void put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
        public void put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
        };


    public class approval_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public approval_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public approval_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public approval_item() : base(null) { }


        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public void put_action(action inst) { putEntityInstance("ACTION", inst); }

        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }

        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }

        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }

        public bool is_applied_usage_right() { return IsADBEntity("applied_usage_right"); }
        public bool _is_applied_usage_right { get { return is_applied_usage_right(); } }
        public applied_usage_right get_applied_usage_right() { return new applied_usage_right (getEntityInstance("APPLIED_USAGE_RIGHT")); }
        public applied_usage_right _applied_usage_right { get { return get_applied_usage_right(); } }
        public void put_applied_usage_right(applied_usage_right inst) { putEntityInstance("APPLIED_USAGE_RIGHT", inst); }

        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }

        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }

        public bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        public bool _is_configuration_effectivity { get { return is_configuration_effectivity(); } }
        public configuration_effectivity get_configuration_effectivity() { return new configuration_effectivity (getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
        public configuration_effectivity _configuration_effectivity { get { return get_configuration_effectivity(); } }
        public void put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }

        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_date() { return IsADBEntity("date"); }
        public bool _is_date { get { return is_date(); } }
        public date get_date() { return new date (getEntityInstance("DATE")); }
        public date _date { get { return get_date(); } }
        public void put_date(date inst) { putEntityInstance("DATE", inst); }

        public bool is_directed_action() { return IsADBEntity("directed_action"); }
        public bool _is_directed_action { get { return is_directed_action(); } }
        public directed_action get_directed_action() { return new directed_action (getEntityInstance("DIRECTED_ACTION")); }
        public directed_action _directed_action { get { return get_directed_action(); } }
        public void put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }

        public bool is_document() { return IsADBEntity("document"); }
        public bool _is_document { get { return is_document(); } }
        public document get_document() { return new document (getEntityInstance("DOCUMENT")); }
        public document _document { get { return get_document(); } }
        public void put_document(document inst) { putEntityInstance("DOCUMENT", inst); }

        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }

        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }

        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }

        public bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        public bool _is_general_property_relationship { get { return is_general_property_relationship(); } }
        public general_property_relationship get_general_property_relationship() { return new general_property_relationship (getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
        public general_property_relationship _general_property_relationship { get { return get_general_property_relationship(); } }
        public void put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }

        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }

        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }

        public bool is_requirement_assignment() { return IsADBEntity("requirement_assignment"); }
        public bool _is_requirement_assignment { get { return is_requirement_assignment(); } }
        public requirement_assignment get_requirement_assignment() { return new requirement_assignment (getEntityInstance("REQUIREMENT_ASSIGNMENT")); }
        public requirement_assignment _requirement_assignment { get { return get_requirement_assignment(); } }
        public void put_requirement_assignment(requirement_assignment inst) { putEntityInstance("REQUIREMENT_ASSIGNMENT", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }

        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class approval_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public approval_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public approval_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public approval_item_get() : base(null) { }

        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public bool is_applied_usage_right() { return IsADBEntity("applied_usage_right"); }
        public bool _is_applied_usage_right { get { return is_applied_usage_right(); } }
        public applied_usage_right get_applied_usage_right() { return new applied_usage_right (getEntityInstance("APPLIED_USAGE_RIGHT")); }
        public applied_usage_right _applied_usage_right { get { return get_applied_usage_right(); } }
        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        public bool _is_configuration_effectivity { get { return is_configuration_effectivity(); } }
        public configuration_effectivity get_configuration_effectivity() { return new configuration_effectivity (getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
        public configuration_effectivity _configuration_effectivity { get { return get_configuration_effectivity(); } }
        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_date() { return IsADBEntity("date"); }
        public bool _is_date { get { return is_date(); } }
        public date get_date() { return new date (getEntityInstance("DATE")); }
        public date _date { get { return get_date(); } }
        public bool is_directed_action() { return IsADBEntity("directed_action"); }
        public bool _is_directed_action { get { return is_directed_action(); } }
        public directed_action get_directed_action() { return new directed_action (getEntityInstance("DIRECTED_ACTION")); }
        public directed_action _directed_action { get { return get_directed_action(); } }
        public bool is_document() { return IsADBEntity("document"); }
        public bool _is_document { get { return is_document(); } }
        public document get_document() { return new document (getEntityInstance("DOCUMENT")); }
        public document _document { get { return get_document(); } }
        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        public bool _is_general_property_relationship { get { return is_general_property_relationship(); } }
        public general_property_relationship get_general_property_relationship() { return new general_property_relationship (getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
        public general_property_relationship _general_property_relationship { get { return get_general_property_relationship(); } }
        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public bool is_requirement_assignment() { return IsADBEntity("requirement_assignment"); }
        public bool _is_requirement_assignment { get { return is_requirement_assignment(); } }
        public requirement_assignment get_requirement_assignment() { return new requirement_assignment (getEntityInstance("REQUIREMENT_ASSIGNMENT")); }
        public requirement_assignment _requirement_assignment { get { return get_requirement_assignment(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class approval_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public approval_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public approval_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public approval_item_put() : base(null) { }

        public void put_action(action inst) { putEntityInstance("ACTION", inst); }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
        public void put_applied_usage_right(applied_usage_right inst) { putEntityInstance("APPLIED_USAGE_RIGHT", inst); }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
        public void put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_date(date inst) { putEntityInstance("DATE", inst); }
        public void put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
        public void put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
        public void put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        public void put_requirement_assignment(requirement_assignment inst) { putEntityInstance("REQUIREMENT_ASSIGNMENT", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class approved_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public approved_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public approved_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public approved_item() : base(null) { }


        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }

        public bool is_change() { return IsADBEntity("change"); }
        public bool _is_change { get { return is_change(); } }
        public change get_change() { return new change (getEntityInstance("CHANGE")); }
        public change _change { get { return get_change(); } }
        public void put_change(change inst) { putEntityInstance("CHANGE", inst); }

        public bool is_change_request() { return IsADBEntity("change_request"); }
        public bool _is_change_request { get { return is_change_request(); } }
        public change_request get_change_request() { return new change_request (getEntityInstance("CHANGE_REQUEST")); }
        public change_request _change_request { get { return get_change_request(); } }
        public void put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }

        public bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        public bool _is_configuration_effectivity { get { return is_configuration_effectivity(); } }
        public configuration_effectivity get_configuration_effectivity() { return new configuration_effectivity (getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
        public configuration_effectivity _configuration_effectivity { get { return get_configuration_effectivity(); } }
        public void put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }

        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_start_request() { return IsADBEntity("start_request"); }
        public bool _is_start_request { get { return is_start_request(); } }
        public start_request get_start_request() { return new start_request (getEntityInstance("START_REQUEST")); }
        public start_request _start_request { get { return get_start_request(); } }
        public void put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }

        public bool is_start_work() { return IsADBEntity("start_work"); }
        public bool _is_start_work { get { return is_start_work(); } }
        public start_work get_start_work() { return new start_work (getEntityInstance("START_WORK")); }
        public start_work _start_work { get { return get_start_work(); } }
        public void put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
        };


    public class approved_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public approved_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public approved_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public approved_item_get() : base(null) { }

        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public bool is_change() { return IsADBEntity("change"); }
        public bool _is_change { get { return is_change(); } }
        public change get_change() { return new change (getEntityInstance("CHANGE")); }
        public change _change { get { return get_change(); } }
        public bool is_change_request() { return IsADBEntity("change_request"); }
        public bool _is_change_request { get { return is_change_request(); } }
        public change_request get_change_request() { return new change_request (getEntityInstance("CHANGE_REQUEST")); }
        public change_request _change_request { get { return get_change_request(); } }
        public bool is_configuration_effectivity() { return IsADBEntity("configuration_effectivity"); }
        public bool _is_configuration_effectivity { get { return is_configuration_effectivity(); } }
        public configuration_effectivity get_configuration_effectivity() { return new configuration_effectivity (getEntityInstance("CONFIGURATION_EFFECTIVITY")); }
        public configuration_effectivity _configuration_effectivity { get { return get_configuration_effectivity(); } }
        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_start_request() { return IsADBEntity("start_request"); }
        public bool _is_start_request { get { return is_start_request(); } }
        public start_request get_start_request() { return new start_request (getEntityInstance("START_REQUEST")); }
        public start_request _start_request { get { return get_start_request(); } }
        public bool is_start_work() { return IsADBEntity("start_work"); }
        public bool _is_start_work { get { return is_start_work(); } }
        public start_work get_start_work() { return new start_work (getEntityInstance("START_WORK")); }
        public start_work _start_work { get { return get_start_work(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class approved_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public approved_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public approved_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public approved_item_put() : base(null) { }

        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
        public void put_change(change inst) { putEntityInstance("CHANGE", inst); }
        public void put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }
        public void put_configuration_effectivity(configuration_effectivity inst) { putEntityInstance("CONFIGURATION_EFFECTIVITY", inst); }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }
        public void put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
        };


    public class area_or_view : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public area_or_view(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public area_or_view(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public area_or_view() : base(null) { }


        public bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        public bool _is_presentation_area { get { return is_presentation_area(); } }
        public presentation_area get_presentation_area() { return new presentation_area (getEntityInstance("PRESENTATION_AREA")); }
        public presentation_area _presentation_area { get { return get_presentation_area(); } }
        public void put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }

        public bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        public bool _is_presentation_view { get { return is_presentation_view(); } }
        public presentation_view get_presentation_view() { return new presentation_view (getEntityInstance("PRESENTATION_VIEW")); }
        public presentation_view _presentation_view { get { return get_presentation_view(); } }
        public void put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
        };


    public class area_or_view_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public area_or_view_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public area_or_view_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public area_or_view_get() : base(null) { }

        public bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        public bool _is_presentation_area { get { return is_presentation_area(); } }
        public presentation_area get_presentation_area() { return new presentation_area (getEntityInstance("PRESENTATION_AREA")); }
        public presentation_area _presentation_area { get { return get_presentation_area(); } }
        public bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        public bool _is_presentation_view { get { return is_presentation_view(); } }
        public presentation_view get_presentation_view() { return new presentation_view (getEntityInstance("PRESENTATION_VIEW")); }
        public presentation_view _presentation_view { get { return get_presentation_view(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class area_or_view_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public area_or_view_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public area_or_view_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public area_or_view_put() : base(null) { }

        public void put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
        public void put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
        };


    public class attribute_classification_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_classification_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_classification_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_classification_item() : base(null) { }


        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }

        public bool is_action_method() { return IsADBEntity("action_method"); }
        public bool _is_action_method { get { return is_action_method(); } }
        public action_method get_action_method() { return new action_method (getEntityInstance("ACTION_METHOD")); }
        public action_method _action_method { get { return get_action_method(); } }
        public void put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }

        public bool is_action_property() { return IsADBEntity("action_property"); }
        public bool _is_action_property { get { return is_action_property(); } }
        public action_property get_action_property() { return new action_property (getEntityInstance("ACTION_PROPERTY")); }
        public action_property _action_property { get { return get_action_property(); } }
        public void put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }

        public bool is_action_property_representation() { return IsADBEntity("action_property_representation"); }
        public bool _is_action_property_representation { get { return is_action_property_representation(); } }
        public action_property_representation get_action_property_representation() { return new action_property_representation (getEntityInstance("ACTION_PROPERTY_REPRESENTATION")); }
        public action_property_representation _action_property_representation { get { return get_action_property_representation(); } }
        public void put_action_property_representation(action_property_representation inst) { putEntityInstance("ACTION_PROPERTY_REPRESENTATION", inst); }

        public bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        public bool _is_action_relationship { get { return is_action_relationship(); } }
        public action_relationship get_action_relationship() { return new action_relationship (getEntityInstance("ACTION_RELATIONSHIP")); }
        public action_relationship _action_relationship { get { return get_action_relationship(); } }
        public void put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }

        public bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        public bool _is_action_request_solution { get { return is_action_request_solution(); } }
        public action_request_solution get_action_request_solution() { return new action_request_solution (getEntityInstance("ACTION_REQUEST_SOLUTION")); }
        public action_request_solution _action_request_solution { get { return get_action_request_solution(); } }
        public void put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }

        public bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        public bool _is_action_request_status { get { return is_action_request_status(); } }
        public action_request_status get_action_request_status() { return new action_request_status (getEntityInstance("ACTION_REQUEST_STATUS")); }
        public action_request_status _action_request_status { get { return get_action_request_status(); } }
        public void put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }

        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }

        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }

        public bool is_applied_action_request_assignment() { return IsADBEntity("applied_action_request_assignment"); }
        public bool _is_applied_action_request_assignment { get { return is_applied_action_request_assignment(); } }
        public applied_action_request_assignment get_applied_action_request_assignment() { return new applied_action_request_assignment (getEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT")); }
        public applied_action_request_assignment _applied_action_request_assignment { get { return get_applied_action_request_assignment(); } }
        public void put_applied_action_request_assignment(applied_action_request_assignment inst) { putEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT", inst); }

        public bool is_applied_approval_assignment() { return IsADBEntity("applied_approval_assignment"); }
        public bool _is_applied_approval_assignment { get { return is_applied_approval_assignment(); } }
        public applied_approval_assignment get_applied_approval_assignment() { return new applied_approval_assignment (getEntityInstance("APPLIED_APPROVAL_ASSIGNMENT")); }
        public applied_approval_assignment _applied_approval_assignment { get { return get_applied_approval_assignment(); } }
        public void put_applied_approval_assignment(applied_approval_assignment inst) { putEntityInstance("APPLIED_APPROVAL_ASSIGNMENT", inst); }

        public bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        public bool _is_applied_certification_assignment { get { return is_applied_certification_assignment(); } }
        public applied_certification_assignment get_applied_certification_assignment() { return new applied_certification_assignment (getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT")); }
        public applied_certification_assignment _applied_certification_assignment { get { return get_applied_certification_assignment(); } }
        public void put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        public bool _is_applied_document_reference { get { return is_applied_document_reference(); } }
        public applied_document_reference get_applied_document_reference() { return new applied_document_reference (getEntityInstance("APPLIED_DOCUMENT_REFERENCE")); }
        public applied_document_reference _applied_document_reference { get { return get_applied_document_reference(); } }
        public void put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }

        public bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        public bool _is_applied_document_usage_constraint_assignment { get { return is_applied_document_usage_constraint_assignment(); } }
        public applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment() { return new applied_document_usage_constraint_assignment (getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT")); }
        public applied_document_usage_constraint_assignment _applied_document_usage_constraint_assignment { get { return get_applied_document_usage_constraint_assignment(); } }
        public void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }

        public bool is_applied_effectivity_assignment() { return IsADBEntity("applied_effectivity_assignment"); }
        public bool _is_applied_effectivity_assignment { get { return is_applied_effectivity_assignment(); } }
        public applied_effectivity_assignment get_applied_effectivity_assignment() { return new applied_effectivity_assignment (getEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT")); }
        public applied_effectivity_assignment _applied_effectivity_assignment { get { return get_applied_effectivity_assignment(); } }
        public void put_applied_effectivity_assignment(applied_effectivity_assignment inst) { putEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT", inst); }

        public bool is_applied_event_occurrence_assignment() { return IsADBEntity("applied_event_occurrence_assignment"); }
        public bool _is_applied_event_occurrence_assignment { get { return is_applied_event_occurrence_assignment(); } }
        public applied_event_occurrence_assignment get_applied_event_occurrence_assignment() { return new applied_event_occurrence_assignment (getEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT")); }
        public applied_event_occurrence_assignment _applied_event_occurrence_assignment { get { return get_applied_event_occurrence_assignment(); } }
        public void put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst) { putEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT", inst); }

        public bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        public bool _is_applied_external_identification_assignment { get { return is_applied_external_identification_assignment(); } }
        public applied_external_identification_assignment get_applied_external_identification_assignment() { return new applied_external_identification_assignment (getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")); }
        public applied_external_identification_assignment _applied_external_identification_assignment { get { return get_applied_external_identification_assignment(); } }
        public void put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        public bool _is_applied_organization_assignment { get { return is_applied_organization_assignment(); } }
        public applied_organization_assignment get_applied_organization_assignment() { return new applied_organization_assignment (getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
        public applied_organization_assignment _applied_organization_assignment { get { return get_applied_organization_assignment(); } }
        public void put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }

        public bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        public bool _is_applied_organizational_project_assignment { get { return is_applied_organizational_project_assignment(); } }
        public applied_organizational_project_assignment get_applied_organizational_project_assignment() { return new applied_organizational_project_assignment (getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT")); }
        public applied_organizational_project_assignment _applied_organizational_project_assignment { get { return get_applied_organizational_project_assignment(); } }
        public void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }

        public bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        public bool _is_applied_person_and_organization_assignment { get { return is_applied_person_and_organization_assignment(); } }
        public applied_person_and_organization_assignment get_applied_person_and_organization_assignment() { return new applied_person_and_organization_assignment (getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
        public applied_person_and_organization_assignment _applied_person_and_organization_assignment { get { return get_applied_person_and_organization_assignment(); } }
        public void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }

        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }

        public bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        public bool _is_approval_person_organization { get { return is_approval_person_organization(); } }
        public approval_person_organization get_approval_person_organization() { return new approval_person_organization (getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
        public approval_person_organization _approval_person_organization { get { return get_approval_person_organization(); } }
        public void put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }

        public bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        public bool _is_approval_relationship { get { return is_approval_relationship(); } }
        public approval_relationship get_approval_relationship() { return new approval_relationship (getEntityInstance("APPROVAL_RELATIONSHIP")); }
        public approval_relationship _approval_relationship { get { return get_approval_relationship(); } }
        public void put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }

        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }

        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }

        public bool is_context_dependent_unit() { return IsADBEntity("context_dependent_unit"); }
        public bool _is_context_dependent_unit { get { return is_context_dependent_unit(); } }
        public context_dependent_unit get_context_dependent_unit() { return new context_dependent_unit (getEntityInstance("CONTEXT_DEPENDENT_UNIT")); }
        public context_dependent_unit _context_dependent_unit { get { return get_context_dependent_unit(); } }
        public void put_context_dependent_unit(context_dependent_unit inst) { putEntityInstance("CONTEXT_DEPENDENT_UNIT", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        public bool _is_date_and_time_assignment { get { return is_date_and_time_assignment(); } }
        public date_and_time_assignment get_date_and_time_assignment() { return new date_and_time_assignment (getEntityInstance("DATE_AND_TIME_ASSIGNMENT")); }
        public date_and_time_assignment _date_and_time_assignment { get { return get_date_and_time_assignment(); } }
        public void put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }

        public bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        public bool _is_date_assignment { get { return is_date_assignment(); } }
        public date_assignment get_date_assignment() { return new date_assignment (getEntityInstance("DATE_ASSIGNMENT")); }
        public date_assignment _date_assignment { get { return get_date_assignment(); } }
        public void put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }

        public bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        public bool _is_derived_unit { get { return is_derived_unit(); } }
        public derived_unit get_derived_unit() { return new derived_unit (getEntityInstance("DERIVED_UNIT")); }
        public derived_unit _derived_unit { get { return get_derived_unit(); } }
        public void put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }

        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }

        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }

        public bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        public bool _is_document_relationship { get { return is_document_relationship(); } }
        public document_relationship get_document_relationship() { return new document_relationship (getEntityInstance("DOCUMENT_RELATIONSHIP")); }
        public document_relationship _document_relationship { get { return get_document_relationship(); } }
        public void put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }

        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }

        public bool is_event_occurrence_relationship() { return IsADBEntity("event_occurrence_relationship"); }
        public bool _is_event_occurrence_relationship { get { return is_event_occurrence_relationship(); } }
        public event_occurrence_relationship get_event_occurrence_relationship() { return new event_occurrence_relationship (getEntityInstance("EVENT_OCCURRENCE_RELATIONSHIP")); }
        public event_occurrence_relationship _event_occurrence_relationship { get { return get_event_occurrence_relationship(); } }
        public void put_event_occurrence_relationship(event_occurrence_relationship inst) { putEntityInstance("EVENT_OCCURRENCE_RELATIONSHIP", inst); }

        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }

        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }

        public bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        public bool _is_general_property_relationship { get { return is_general_property_relationship(); } }
        public general_property_relationship get_general_property_relationship() { return new general_property_relationship (getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
        public general_property_relationship _general_property_relationship { get { return get_general_property_relationship(); } }
        public void put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }

        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }

        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }

        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_language() { return IsADBEntity("language"); }
        public bool _is_language { get { return is_language(); } }
        public language get_language() { return new language (getEntityInstance("LANGUAGE")); }
        public language _language { get { return get_language(); } }
        public void put_language(language inst) { putEntityInstance("LANGUAGE", inst); }

        public bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        public bool _is_measure_representation_item { get { return is_measure_representation_item(); } }
        public measure_representation_item get_measure_representation_item() { return new measure_representation_item (getEntityInstance("MEASURE_REPRESENTATION_ITEM")); }
        public measure_representation_item _measure_representation_item { get { return get_measure_representation_item(); } }
        public void put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }

        public bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        public bool _is_measure_with_unit { get { return is_measure_with_unit(); } }
        public measure_with_unit get_measure_with_unit() { return new measure_with_unit (getEntityInstance("MEASURE_WITH_UNIT")); }
        public measure_with_unit _measure_with_unit { get { return get_measure_with_unit(); } }
        public void put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }

        public bool is_named_unit() { return IsADBEntity("named_unit"); }
        public bool _is_named_unit { get { return is_named_unit(); } }
        public named_unit get_named_unit() { return new named_unit (getEntityInstance("NAMED_UNIT")); }
        public named_unit _named_unit { get { return get_named_unit(); } }
        public void put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }

        public bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        public bool _is_organization_relationship { get { return is_organization_relationship(); } }
        public organization_relationship get_organization_relationship() { return new organization_relationship (getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
        public organization_relationship _organization_relationship { get { return get_organization_relationship(); } }
        public void put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }

        public bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        public bool _is_organizational_address { get { return is_organizational_address(); } }
        public organizational_address get_organizational_address() { return new organizational_address (getEntityInstance("ORGANIZATIONAL_ADDRESS")); }
        public organizational_address _organizational_address { get { return get_organizational_address(); } }
        public void put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }

        public bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        public bool _is_organizational_project_relationship { get { return is_organizational_project_relationship(); } }
        public organizational_project_relationship get_organizational_project_relationship() { return new organizational_project_relationship (getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); }
        public organizational_project_relationship _organizational_project_relationship { get { return get_organizational_project_relationship(); } }
        public void put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }

        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }

        public bool is_person_and_organization_address() { return IsADBEntity("person_and_organization_address"); }
        public bool _is_person_and_organization_address { get { return is_person_and_organization_address(); } }
        public person_and_organization_address get_person_and_organization_address() { return new person_and_organization_address (getEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS")); }
        public person_and_organization_address _person_and_organization_address { get { return get_person_and_organization_address(); } }
        public void put_person_and_organization_address(person_and_organization_address inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_category() { return IsADBEntity("product_category"); }
        public bool _is_product_category { get { return is_product_category(); } }
        public product_category get_product_category() { return new product_category (getEntityInstance("PRODUCT_CATEGORY")); }
        public product_category _product_category { get { return get_product_category(); } }
        public void put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }

        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }

        public bool is_product_concept_context() { return IsADBEntity("product_concept_context"); }
        public bool _is_product_concept_context { get { return is_product_concept_context(); } }
        public product_concept_context get_product_concept_context() { return new product_concept_context (getEntityInstance("PRODUCT_CONCEPT_CONTEXT")); }
        public product_concept_context _product_concept_context { get { return get_product_concept_context(); } }
        public void put_product_concept_context(product_concept_context inst) { putEntityInstance("PRODUCT_CONCEPT_CONTEXT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        public bool _is_product_definition_context { get { return is_product_definition_context(); } }
        public product_definition_context get_product_definition_context() { return new product_definition_context (getEntityInstance("PRODUCT_DEFINITION_CONTEXT")); }
        public product_definition_context _product_definition_context { get { return get_product_definition_context(); } }
        public void put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }

        public bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        public bool _is_property_definition_relationship { get { return is_property_definition_relationship(); } }
        public property_definition_relationship get_property_definition_relationship() { return new property_definition_relationship (getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); }
        public property_definition_relationship _property_definition_relationship { get { return get_property_definition_relationship(); } }
        public void put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }

        public bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        public bool _is_property_definition_representation { get { return is_property_definition_representation(); } }
        public property_definition_representation get_property_definition_representation() { return new property_definition_representation (getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
        public property_definition_representation _property_definition_representation { get { return get_property_definition_representation(); } }
        public void put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }

        public bool is_representation_context() { return IsADBEntity("representation_context"); }
        public bool _is_representation_context { get { return is_representation_context(); } }
        public representation_context get_representation_context() { return new representation_context (getEntityInstance("REPRESENTATION_CONTEXT")); }
        public representation_context _representation_context { get { return get_representation_context(); } }
        public void put_representation_context(representation_context inst) { putEntityInstance("REPRESENTATION_CONTEXT", inst); }

        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_time_interval_relationship() { return IsADBEntity("time_interval_relationship"); }
        public bool _is_time_interval_relationship { get { return is_time_interval_relationship(); } }
        public time_interval_relationship get_time_interval_relationship() { return new time_interval_relationship (getEntityInstance("TIME_INTERVAL_RELATIONSHIP")); }
        public time_interval_relationship _time_interval_relationship { get { return get_time_interval_relationship(); } }
        public void put_time_interval_relationship(time_interval_relationship inst) { putEntityInstance("TIME_INTERVAL_RELATIONSHIP", inst); }

        public bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        public bool _is_uncertainty_measure_with_unit { get { return is_uncertainty_measure_with_unit(); } }
        public uncertainty_measure_with_unit get_uncertainty_measure_with_unit() { return new uncertainty_measure_with_unit (getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); }
        public uncertainty_measure_with_unit _uncertainty_measure_with_unit { get { return get_uncertainty_measure_with_unit(); } }
        public void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }

        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }

        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class attribute_classification_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_classification_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_classification_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_classification_item_get() : base(null) { }

        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public bool is_action_method() { return IsADBEntity("action_method"); }
        public bool _is_action_method { get { return is_action_method(); } }
        public action_method get_action_method() { return new action_method (getEntityInstance("ACTION_METHOD")); }
        public action_method _action_method { get { return get_action_method(); } }
        public bool is_action_property() { return IsADBEntity("action_property"); }
        public bool _is_action_property { get { return is_action_property(); } }
        public action_property get_action_property() { return new action_property (getEntityInstance("ACTION_PROPERTY")); }
        public action_property _action_property { get { return get_action_property(); } }
        public bool is_action_property_representation() { return IsADBEntity("action_property_representation"); }
        public bool _is_action_property_representation { get { return is_action_property_representation(); } }
        public action_property_representation get_action_property_representation() { return new action_property_representation (getEntityInstance("ACTION_PROPERTY_REPRESENTATION")); }
        public action_property_representation _action_property_representation { get { return get_action_property_representation(); } }
        public bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        public bool _is_action_relationship { get { return is_action_relationship(); } }
        public action_relationship get_action_relationship() { return new action_relationship (getEntityInstance("ACTION_RELATIONSHIP")); }
        public action_relationship _action_relationship { get { return get_action_relationship(); } }
        public bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        public bool _is_action_request_solution { get { return is_action_request_solution(); } }
        public action_request_solution get_action_request_solution() { return new action_request_solution (getEntityInstance("ACTION_REQUEST_SOLUTION")); }
        public action_request_solution _action_request_solution { get { return get_action_request_solution(); } }
        public bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        public bool _is_action_request_status { get { return is_action_request_status(); } }
        public action_request_status get_action_request_status() { return new action_request_status (getEntityInstance("ACTION_REQUEST_STATUS")); }
        public action_request_status _action_request_status { get { return get_action_request_status(); } }
        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public bool is_applied_action_request_assignment() { return IsADBEntity("applied_action_request_assignment"); }
        public bool _is_applied_action_request_assignment { get { return is_applied_action_request_assignment(); } }
        public applied_action_request_assignment get_applied_action_request_assignment() { return new applied_action_request_assignment (getEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT")); }
        public applied_action_request_assignment _applied_action_request_assignment { get { return get_applied_action_request_assignment(); } }
        public bool is_applied_approval_assignment() { return IsADBEntity("applied_approval_assignment"); }
        public bool _is_applied_approval_assignment { get { return is_applied_approval_assignment(); } }
        public applied_approval_assignment get_applied_approval_assignment() { return new applied_approval_assignment (getEntityInstance("APPLIED_APPROVAL_ASSIGNMENT")); }
        public applied_approval_assignment _applied_approval_assignment { get { return get_applied_approval_assignment(); } }
        public bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        public bool _is_applied_certification_assignment { get { return is_applied_certification_assignment(); } }
        public applied_certification_assignment get_applied_certification_assignment() { return new applied_certification_assignment (getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT")); }
        public applied_certification_assignment _applied_certification_assignment { get { return get_applied_certification_assignment(); } }
        public bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        public bool _is_applied_document_reference { get { return is_applied_document_reference(); } }
        public applied_document_reference get_applied_document_reference() { return new applied_document_reference (getEntityInstance("APPLIED_DOCUMENT_REFERENCE")); }
        public applied_document_reference _applied_document_reference { get { return get_applied_document_reference(); } }
        public bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        public bool _is_applied_document_usage_constraint_assignment { get { return is_applied_document_usage_constraint_assignment(); } }
        public applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment() { return new applied_document_usage_constraint_assignment (getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT")); }
        public applied_document_usage_constraint_assignment _applied_document_usage_constraint_assignment { get { return get_applied_document_usage_constraint_assignment(); } }
        public bool is_applied_effectivity_assignment() { return IsADBEntity("applied_effectivity_assignment"); }
        public bool _is_applied_effectivity_assignment { get { return is_applied_effectivity_assignment(); } }
        public applied_effectivity_assignment get_applied_effectivity_assignment() { return new applied_effectivity_assignment (getEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT")); }
        public applied_effectivity_assignment _applied_effectivity_assignment { get { return get_applied_effectivity_assignment(); } }
        public bool is_applied_event_occurrence_assignment() { return IsADBEntity("applied_event_occurrence_assignment"); }
        public bool _is_applied_event_occurrence_assignment { get { return is_applied_event_occurrence_assignment(); } }
        public applied_event_occurrence_assignment get_applied_event_occurrence_assignment() { return new applied_event_occurrence_assignment (getEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT")); }
        public applied_event_occurrence_assignment _applied_event_occurrence_assignment { get { return get_applied_event_occurrence_assignment(); } }
        public bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        public bool _is_applied_external_identification_assignment { get { return is_applied_external_identification_assignment(); } }
        public applied_external_identification_assignment get_applied_external_identification_assignment() { return new applied_external_identification_assignment (getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")); }
        public applied_external_identification_assignment _applied_external_identification_assignment { get { return get_applied_external_identification_assignment(); } }
        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        public bool _is_applied_organization_assignment { get { return is_applied_organization_assignment(); } }
        public applied_organization_assignment get_applied_organization_assignment() { return new applied_organization_assignment (getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
        public applied_organization_assignment _applied_organization_assignment { get { return get_applied_organization_assignment(); } }
        public bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        public bool _is_applied_organizational_project_assignment { get { return is_applied_organizational_project_assignment(); } }
        public applied_organizational_project_assignment get_applied_organizational_project_assignment() { return new applied_organizational_project_assignment (getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT")); }
        public applied_organizational_project_assignment _applied_organizational_project_assignment { get { return get_applied_organizational_project_assignment(); } }
        public bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        public bool _is_applied_person_and_organization_assignment { get { return is_applied_person_and_organization_assignment(); } }
        public applied_person_and_organization_assignment get_applied_person_and_organization_assignment() { return new applied_person_and_organization_assignment (getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
        public applied_person_and_organization_assignment _applied_person_and_organization_assignment { get { return get_applied_person_and_organization_assignment(); } }
        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        public bool _is_approval_person_organization { get { return is_approval_person_organization(); } }
        public approval_person_organization get_approval_person_organization() { return new approval_person_organization (getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
        public approval_person_organization _approval_person_organization { get { return get_approval_person_organization(); } }
        public bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        public bool _is_approval_relationship { get { return is_approval_relationship(); } }
        public approval_relationship get_approval_relationship() { return new approval_relationship (getEntityInstance("APPROVAL_RELATIONSHIP")); }
        public approval_relationship _approval_relationship { get { return get_approval_relationship(); } }
        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public bool is_context_dependent_unit() { return IsADBEntity("context_dependent_unit"); }
        public bool _is_context_dependent_unit { get { return is_context_dependent_unit(); } }
        public context_dependent_unit get_context_dependent_unit() { return new context_dependent_unit (getEntityInstance("CONTEXT_DEPENDENT_UNIT")); }
        public context_dependent_unit _context_dependent_unit { get { return get_context_dependent_unit(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        public bool _is_date_and_time_assignment { get { return is_date_and_time_assignment(); } }
        public date_and_time_assignment get_date_and_time_assignment() { return new date_and_time_assignment (getEntityInstance("DATE_AND_TIME_ASSIGNMENT")); }
        public date_and_time_assignment _date_and_time_assignment { get { return get_date_and_time_assignment(); } }
        public bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        public bool _is_date_assignment { get { return is_date_assignment(); } }
        public date_assignment get_date_assignment() { return new date_assignment (getEntityInstance("DATE_ASSIGNMENT")); }
        public date_assignment _date_assignment { get { return get_date_assignment(); } }
        public bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        public bool _is_derived_unit { get { return is_derived_unit(); } }
        public derived_unit get_derived_unit() { return new derived_unit (getEntityInstance("DERIVED_UNIT")); }
        public derived_unit _derived_unit { get { return get_derived_unit(); } }
        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        public bool _is_document_relationship { get { return is_document_relationship(); } }
        public document_relationship get_document_relationship() { return new document_relationship (getEntityInstance("DOCUMENT_RELATIONSHIP")); }
        public document_relationship _document_relationship { get { return get_document_relationship(); } }
        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public bool is_event_occurrence_relationship() { return IsADBEntity("event_occurrence_relationship"); }
        public bool _is_event_occurrence_relationship { get { return is_event_occurrence_relationship(); } }
        public event_occurrence_relationship get_event_occurrence_relationship() { return new event_occurrence_relationship (getEntityInstance("EVENT_OCCURRENCE_RELATIONSHIP")); }
        public event_occurrence_relationship _event_occurrence_relationship { get { return get_event_occurrence_relationship(); } }
        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        public bool _is_general_property_relationship { get { return is_general_property_relationship(); } }
        public general_property_relationship get_general_property_relationship() { return new general_property_relationship (getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
        public general_property_relationship _general_property_relationship { get { return get_general_property_relationship(); } }
        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_language() { return IsADBEntity("language"); }
        public bool _is_language { get { return is_language(); } }
        public language get_language() { return new language (getEntityInstance("LANGUAGE")); }
        public language _language { get { return get_language(); } }
        public bool is_measure_representation_item() { return IsADBEntity("measure_representation_item"); }
        public bool _is_measure_representation_item { get { return is_measure_representation_item(); } }
        public measure_representation_item get_measure_representation_item() { return new measure_representation_item (getEntityInstance("MEASURE_REPRESENTATION_ITEM")); }
        public measure_representation_item _measure_representation_item { get { return get_measure_representation_item(); } }
        public bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        public bool _is_measure_with_unit { get { return is_measure_with_unit(); } }
        public measure_with_unit get_measure_with_unit() { return new measure_with_unit (getEntityInstance("MEASURE_WITH_UNIT")); }
        public measure_with_unit _measure_with_unit { get { return get_measure_with_unit(); } }
        public bool is_named_unit() { return IsADBEntity("named_unit"); }
        public bool _is_named_unit { get { return is_named_unit(); } }
        public named_unit get_named_unit() { return new named_unit (getEntityInstance("NAMED_UNIT")); }
        public named_unit _named_unit { get { return get_named_unit(); } }
        public bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        public bool _is_organization_relationship { get { return is_organization_relationship(); } }
        public organization_relationship get_organization_relationship() { return new organization_relationship (getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
        public organization_relationship _organization_relationship { get { return get_organization_relationship(); } }
        public bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        public bool _is_organizational_address { get { return is_organizational_address(); } }
        public organizational_address get_organizational_address() { return new organizational_address (getEntityInstance("ORGANIZATIONAL_ADDRESS")); }
        public organizational_address _organizational_address { get { return get_organizational_address(); } }
        public bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        public bool _is_organizational_project_relationship { get { return is_organizational_project_relationship(); } }
        public organizational_project_relationship get_organizational_project_relationship() { return new organizational_project_relationship (getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); }
        public organizational_project_relationship _organizational_project_relationship { get { return get_organizational_project_relationship(); } }
        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public bool is_person_and_organization_address() { return IsADBEntity("person_and_organization_address"); }
        public bool _is_person_and_organization_address { get { return is_person_and_organization_address(); } }
        public person_and_organization_address get_person_and_organization_address() { return new person_and_organization_address (getEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS")); }
        public person_and_organization_address _person_and_organization_address { get { return get_person_and_organization_address(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_category() { return IsADBEntity("product_category"); }
        public bool _is_product_category { get { return is_product_category(); } }
        public product_category get_product_category() { return new product_category (getEntityInstance("PRODUCT_CATEGORY")); }
        public product_category _product_category { get { return get_product_category(); } }
        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public bool is_product_concept_context() { return IsADBEntity("product_concept_context"); }
        public bool _is_product_concept_context { get { return is_product_concept_context(); } }
        public product_concept_context get_product_concept_context() { return new product_concept_context (getEntityInstance("PRODUCT_CONCEPT_CONTEXT")); }
        public product_concept_context _product_concept_context { get { return get_product_concept_context(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        public bool _is_product_definition_context { get { return is_product_definition_context(); } }
        public product_definition_context get_product_definition_context() { return new product_definition_context (getEntityInstance("PRODUCT_DEFINITION_CONTEXT")); }
        public product_definition_context _product_definition_context { get { return get_product_definition_context(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        public bool _is_property_definition_relationship { get { return is_property_definition_relationship(); } }
        public property_definition_relationship get_property_definition_relationship() { return new property_definition_relationship (getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); }
        public property_definition_relationship _property_definition_relationship { get { return get_property_definition_relationship(); } }
        public bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        public bool _is_property_definition_representation { get { return is_property_definition_representation(); } }
        public property_definition_representation get_property_definition_representation() { return new property_definition_representation (getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
        public property_definition_representation _property_definition_representation { get { return get_property_definition_representation(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public bool is_representation_context() { return IsADBEntity("representation_context"); }
        public bool _is_representation_context { get { return is_representation_context(); } }
        public representation_context get_representation_context() { return new representation_context (getEntityInstance("REPRESENTATION_CONTEXT")); }
        public representation_context _representation_context { get { return get_representation_context(); } }
        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_time_interval_relationship() { return IsADBEntity("time_interval_relationship"); }
        public bool _is_time_interval_relationship { get { return is_time_interval_relationship(); } }
        public time_interval_relationship get_time_interval_relationship() { return new time_interval_relationship (getEntityInstance("TIME_INTERVAL_RELATIONSHIP")); }
        public time_interval_relationship _time_interval_relationship { get { return get_time_interval_relationship(); } }
        public bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        public bool _is_uncertainty_measure_with_unit { get { return is_uncertainty_measure_with_unit(); } }
        public uncertainty_measure_with_unit get_uncertainty_measure_with_unit() { return new uncertainty_measure_with_unit (getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); }
        public uncertainty_measure_with_unit _uncertainty_measure_with_unit { get { return get_uncertainty_measure_with_unit(); } }
        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }
        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class attribute_classification_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_classification_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_classification_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_classification_item_put() : base(null) { }

        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
        public void put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
        public void put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
        public void put_action_property_representation(action_property_representation inst) { putEntityInstance("ACTION_PROPERTY_REPRESENTATION", inst); }
        public void put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
        public void put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
        public void put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
        public void put_applied_action_request_assignment(applied_action_request_assignment inst) { putEntityInstance("APPLIED_ACTION_REQUEST_ASSIGNMENT", inst); }
        public void put_applied_approval_assignment(applied_approval_assignment inst) { putEntityInstance("APPLIED_APPROVAL_ASSIGNMENT", inst); }
        public void put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
        public void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
        public void put_applied_effectivity_assignment(applied_effectivity_assignment inst) { putEntityInstance("APPLIED_EFFECTIVITY_ASSIGNMENT", inst); }
        public void put_applied_event_occurrence_assignment(applied_event_occurrence_assignment inst) { putEntityInstance("APPLIED_EVENT_OCCURRENCE_ASSIGNMENT", inst); }
        public void put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
        public void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
        public void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
        public void put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
        public void put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
        public void put_context_dependent_unit(context_dependent_unit inst) { putEntityInstance("CONTEXT_DEPENDENT_UNIT", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }
        public void put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }
        public void put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
        public void put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
        public void put_event_occurrence_relationship(event_occurrence_relationship inst) { putEntityInstance("EVENT_OCCURRENCE_RELATIONSHIP", inst); }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
        public void put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_language(language inst) { putEntityInstance("LANGUAGE", inst); }
        public void put_measure_representation_item(measure_representation_item inst) { putEntityInstance("MEASURE_REPRESENTATION_ITEM", inst); }
        public void put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
        public void put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
        public void put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
        public void put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }
        public void put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
        public void put_person_and_organization_address(person_and_organization_address inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ADDRESS", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
        public void put_product_concept_context(product_concept_context inst) { putEntityInstance("PRODUCT_CONCEPT_CONTEXT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
        public void put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
        public void put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        public void put_representation_context(representation_context inst) { putEntityInstance("REPRESENTATION_CONTEXT", inst); }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_time_interval_relationship(time_interval_relationship inst) { putEntityInstance("TIME_INTERVAL_RELATIONSHIP", inst); }
        public void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class attribute_language_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_language_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_language_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_language_item() : base(null) { }


        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }

        public bool is_application_context() { return IsADBEntity("application_context"); }
        public bool _is_application_context { get { return is_application_context(); } }
        public application_context get_application_context() { return new application_context (getEntityInstance("APPLICATION_CONTEXT")); }
        public application_context _application_context { get { return get_application_context(); } }
        public void put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }

        public bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        public bool _is_applied_certification_assignment { get { return is_applied_certification_assignment(); } }
        public applied_certification_assignment get_applied_certification_assignment() { return new applied_certification_assignment (getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT")); }
        public applied_certification_assignment _applied_certification_assignment { get { return get_applied_certification_assignment(); } }
        public void put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        public bool _is_applied_document_reference { get { return is_applied_document_reference(); } }
        public applied_document_reference get_applied_document_reference() { return new applied_document_reference (getEntityInstance("APPLIED_DOCUMENT_REFERENCE")); }
        public applied_document_reference _applied_document_reference { get { return get_applied_document_reference(); } }
        public void put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }

        public bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        public bool _is_applied_document_usage_constraint_assignment { get { return is_applied_document_usage_constraint_assignment(); } }
        public applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment() { return new applied_document_usage_constraint_assignment (getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT")); }
        public applied_document_usage_constraint_assignment _applied_document_usage_constraint_assignment { get { return get_applied_document_usage_constraint_assignment(); } }
        public void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }

        public bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        public bool _is_applied_external_identification_assignment { get { return is_applied_external_identification_assignment(); } }
        public applied_external_identification_assignment get_applied_external_identification_assignment() { return new applied_external_identification_assignment (getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")); }
        public applied_external_identification_assignment _applied_external_identification_assignment { get { return get_applied_external_identification_assignment(); } }
        public void put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        public bool _is_applied_organizational_project_assignment { get { return is_applied_organizational_project_assignment(); } }
        public applied_organizational_project_assignment get_applied_organizational_project_assignment() { return new applied_organizational_project_assignment (getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT")); }
        public applied_organizational_project_assignment _applied_organizational_project_assignment { get { return get_applied_organizational_project_assignment(); } }
        public void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }

        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }

        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }

        public bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        public bool _is_approval_relationship { get { return is_approval_relationship(); } }
        public approval_relationship get_approval_relationship() { return new approval_relationship (getEntityInstance("APPROVAL_RELATIONSHIP")); }
        public approval_relationship _approval_relationship { get { return get_approval_relationship(); } }
        public void put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }

        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }

        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }

        public bool is_attribute_value_assignment() { return IsADBEntity("attribute_value_assignment"); }
        public bool _is_attribute_value_assignment { get { return is_attribute_value_assignment(); } }
        public attribute_value_assignment get_attribute_value_assignment() { return new attribute_value_assignment (getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT")); }
        public attribute_value_assignment _attribute_value_assignment { get { return get_attribute_value_assignment(); } }
        public void put_attribute_value_assignment(attribute_value_assignment inst) { putEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT", inst); }

        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }

        public bool is_certification_type() { return IsADBEntity("certification_type"); }
        public bool _is_certification_type { get { return is_certification_type(); } }
        public certification_type get_certification_type() { return new certification_type (getEntityInstance("CERTIFICATION_TYPE")); }
        public certification_type _certification_type { get { return get_certification_type(); } }
        public void put_certification_type(certification_type inst) { putEntityInstance("CERTIFICATION_TYPE", inst); }

        public bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        public bool _is_configuration_design { get { return is_configuration_design(); } }
        public configuration_design get_configuration_design() { return new configuration_design (getEntityInstance("CONFIGURATION_DESIGN")); }
        public configuration_design _configuration_design { get { return get_configuration_design(); } }
        public void put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }

        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_date_role() { return IsADBEntity("date_role"); }
        public bool _is_date_role { get { return is_date_role(); } }
        public date_role get_date_role() { return new date_role (getEntityInstance("DATE_ROLE")); }
        public date_role _date_role { get { return get_date_role(); } }
        public void put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }

        public bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        public bool _is_date_time_role { get { return is_date_time_role(); } }
        public date_time_role get_date_time_role() { return new date_time_role (getEntityInstance("DATE_TIME_ROLE")); }
        public date_time_role _date_time_role { get { return get_date_time_role(); } }
        public void put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }

        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }

        public bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        public bool _is_document_relationship { get { return is_document_relationship(); } }
        public document_relationship get_document_relationship() { return new document_relationship (getEntityInstance("DOCUMENT_RELATIONSHIP")); }
        public document_relationship _document_relationship { get { return get_document_relationship(); } }
        public void put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }

        public bool is_document_usage_role() { return IsADBEntity("document_usage_role"); }
        public bool _is_document_usage_role { get { return is_document_usage_role(); } }
        public document_usage_role get_document_usage_role() { return new document_usage_role (getEntityInstance("DOCUMENT_USAGE_ROLE")); }
        public document_usage_role _document_usage_role { get { return get_document_usage_role(); } }
        public void put_document_usage_role(document_usage_role inst) { putEntityInstance("DOCUMENT_USAGE_ROLE", inst); }

        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }

        public bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        public bool _is_effectivity_relationship { get { return is_effectivity_relationship(); } }
        public effectivity_relationship get_effectivity_relationship() { return new effectivity_relationship (getEntityInstance("EFFECTIVITY_RELATIONSHIP")); }
        public effectivity_relationship _effectivity_relationship { get { return get_effectivity_relationship(); } }
        public void put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }

        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }

        public bool is_external_source() { return IsADBEntity("external_source"); }
        public bool _is_external_source { get { return is_external_source(); } }
        public external_source get_external_source() { return new external_source (getEntityInstance("EXTERNAL_SOURCE")); }
        public external_source _external_source { get { return get_external_source(); } }
        public void put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }

        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }

        public bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        public bool _is_general_property_relationship { get { return is_general_property_relationship(); } }
        public general_property_relationship get_general_property_relationship() { return new general_property_relationship (getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
        public general_property_relationship _general_property_relationship { get { return get_general_property_relationship(); } }
        public void put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }

        public bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        public bool _is_geometric_representation_item { get { return is_geometric_representation_item(); } }
        public geometric_representation_item get_geometric_representation_item() { return new geometric_representation_item (getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); }
        public geometric_representation_item _geometric_representation_item { get { return get_geometric_representation_item(); } }
        public void put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }

        public bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        public bool _is_geometric_tolerance { get { return is_geometric_tolerance(); } }
        public geometric_tolerance get_geometric_tolerance() { return new geometric_tolerance (getEntityInstance("GEOMETRIC_TOLERANCE")); }
        public geometric_tolerance _geometric_tolerance { get { return get_geometric_tolerance(); } }
        public void put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }

        public bool is_identification_role() { return IsADBEntity("identification_role"); }
        public bool _is_identification_role { get { return is_identification_role(); } }
        public identification_role get_identification_role() { return new identification_role (getEntityInstance("IDENTIFICATION_ROLE")); }
        public identification_role _identification_role { get { return get_identification_role(); } }
        public void put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }

        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        public bool _is_make_from_usage_option { get { return is_make_from_usage_option(); } }
        public make_from_usage_option get_make_from_usage_option() { return new make_from_usage_option (getEntityInstance("MAKE_FROM_USAGE_OPTION")); }
        public make_from_usage_option _make_from_usage_option { get { return get_make_from_usage_option(); } }
        public void put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }

        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }
        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }

        public bool is_multi_language_attribute_assignment() { return IsADBEntity("multi_language_attribute_assignment"); }
        public bool _is_multi_language_attribute_assignment { get { return is_multi_language_attribute_assignment(); } }
        public multi_language_attribute_assignment get_multi_language_attribute_assignment() { return new multi_language_attribute_assignment (getEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT")); }
        public multi_language_attribute_assignment _multi_language_attribute_assignment { get { return get_multi_language_attribute_assignment(); } }
        public void put_multi_language_attribute_assignment(multi_language_attribute_assignment inst) { putEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT", inst); }

        public bool is_object_role() { return IsADBEntity("object_role"); }
        public bool _is_object_role { get { return is_object_role(); } }
        public object_role get_object_role() { return new object_role (getEntityInstance("OBJECT_ROLE")); }
        public object_role _object_role { get { return get_object_role(); } }
        public void put_object_role(object_role inst) { putEntityInstance("OBJECT_ROLE", inst); }

        public bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        public bool _is_organization_relationship { get { return is_organization_relationship(); } }
        public organization_relationship get_organization_relationship() { return new organization_relationship (getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
        public organization_relationship _organization_relationship { get { return get_organization_relationship(); } }
        public void put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }

        public bool is_organization_role() { return IsADBEntity("organization_role"); }
        public bool _is_organization_role { get { return is_organization_role(); } }
        public organization_role get_organization_role() { return new organization_role (getEntityInstance("ORGANIZATION_ROLE")); }
        public organization_role _organization_role { get { return get_organization_role(); } }
        public void put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }

        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }

        public bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        public bool _is_organizational_project_relationship { get { return is_organizational_project_relationship(); } }
        public organizational_project_relationship get_organizational_project_relationship() { return new organizational_project_relationship (getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); }
        public organizational_project_relationship _organizational_project_relationship { get { return get_organizational_project_relationship(); } }
        public void put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }

        public bool is_organizational_project_role() { return IsADBEntity("organizational_project_role"); }
        public bool _is_organizational_project_role { get { return is_organizational_project_role(); } }
        public organizational_project_role get_organizational_project_role() { return new organizational_project_role (getEntityInstance("ORGANIZATIONAL_PROJECT_ROLE")); }
        public organizational_project_role _organizational_project_role { get { return get_organizational_project_role(); } }
        public void put_organizational_project_role(organizational_project_role inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_ROLE", inst); }

        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }

        public bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        public bool _is_person_and_organization_role { get { return is_person_and_organization_role(); } }
        public person_and_organization_role get_person_and_organization_role() { return new person_and_organization_role (getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); }
        public person_and_organization_role _person_and_organization_role { get { return get_person_and_organization_role(); } }
        public void put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }

        public bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        public bool _is_product_concept_relationship { get { return is_product_concept_relationship(); } }
        public product_concept_relationship get_product_concept_relationship() { return new product_concept_relationship (getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP")); }
        public product_concept_relationship _product_concept_relationship { get { return get_product_concept_relationship(); } }
        public void put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        public bool _is_product_definition_context { get { return is_product_definition_context(); } }
        public product_definition_context get_product_definition_context() { return new product_definition_context (getEntityInstance("PRODUCT_DEFINITION_CONTEXT")); }
        public product_definition_context _product_definition_context { get { return get_product_definition_context(); } }
        public void put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        public bool _is_product_definition_shape { get { return is_product_definition_shape(); } }
        public product_definition_shape get_product_definition_shape() { return new product_definition_shape (getEntityInstance("PRODUCT_DEFINITION_SHAPE")); }
        public product_definition_shape _product_definition_shape { get { return get_product_definition_shape(); } }
        public void put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }

        public bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        public bool _is_product_related_product_category { get { return is_product_related_product_category(); } }
        public product_related_product_category get_product_related_product_category() { return new product_related_product_category (getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY")); }
        public product_related_product_category _product_related_product_category { get { return get_product_related_product_category(); } }
        public void put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }

        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        public bool _is_security_classification_assignment { get { return is_security_classification_assignment(); } }
        public security_classification_assignment get_security_classification_assignment() { return new security_classification_assignment (getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public security_classification_assignment _security_classification_assignment { get { return get_security_classification_assignment(); } }
        public void put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }

        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }

        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }

        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }

        public bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        public bool _is_time_interval_role { get { return is_time_interval_role(); } }
        public time_interval_role get_time_interval_role() { return new time_interval_role (getEntityInstance("TIME_INTERVAL_ROLE")); }
        public time_interval_role _time_interval_role { get { return get_time_interval_role(); } }
        public void put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }

        public bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        public bool _is_topological_representation_item { get { return is_topological_representation_item(); } }
        public topological_representation_item get_topological_representation_item() { return new topological_representation_item (getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); }
        public topological_representation_item _topological_representation_item { get { return get_topological_representation_item(); } }
        public void put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }

        public bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        public bool _is_uncertainty_measure_with_unit { get { return is_uncertainty_measure_with_unit(); } }
        public uncertainty_measure_with_unit get_uncertainty_measure_with_unit() { return new uncertainty_measure_with_unit (getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); }
        public uncertainty_measure_with_unit _uncertainty_measure_with_unit { get { return get_uncertainty_measure_with_unit(); } }
        public void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }

        public bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        public bool _is_uncertainty_qualifier { get { return is_uncertainty_qualifier(); } }
        public uncertainty_qualifier get_uncertainty_qualifier() { return new uncertainty_qualifier (getEntityInstance("UNCERTAINTY_QUALIFIER")); }
        public uncertainty_qualifier _uncertainty_qualifier { get { return get_uncertainty_qualifier(); } }
        public void put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }

        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
        };


    public class attribute_language_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_language_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_language_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_language_item_get() : base(null) { }

        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public bool is_application_context() { return IsADBEntity("application_context"); }
        public bool _is_application_context { get { return is_application_context(); } }
        public application_context get_application_context() { return new application_context (getEntityInstance("APPLICATION_CONTEXT")); }
        public application_context _application_context { get { return get_application_context(); } }
        public bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        public bool _is_applied_certification_assignment { get { return is_applied_certification_assignment(); } }
        public applied_certification_assignment get_applied_certification_assignment() { return new applied_certification_assignment (getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT")); }
        public applied_certification_assignment _applied_certification_assignment { get { return get_applied_certification_assignment(); } }
        public bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        public bool _is_applied_document_reference { get { return is_applied_document_reference(); } }
        public applied_document_reference get_applied_document_reference() { return new applied_document_reference (getEntityInstance("APPLIED_DOCUMENT_REFERENCE")); }
        public applied_document_reference _applied_document_reference { get { return get_applied_document_reference(); } }
        public bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        public bool _is_applied_document_usage_constraint_assignment { get { return is_applied_document_usage_constraint_assignment(); } }
        public applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment() { return new applied_document_usage_constraint_assignment (getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT")); }
        public applied_document_usage_constraint_assignment _applied_document_usage_constraint_assignment { get { return get_applied_document_usage_constraint_assignment(); } }
        public bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        public bool _is_applied_external_identification_assignment { get { return is_applied_external_identification_assignment(); } }
        public applied_external_identification_assignment get_applied_external_identification_assignment() { return new applied_external_identification_assignment (getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")); }
        public applied_external_identification_assignment _applied_external_identification_assignment { get { return get_applied_external_identification_assignment(); } }
        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        public bool _is_applied_organizational_project_assignment { get { return is_applied_organizational_project_assignment(); } }
        public applied_organizational_project_assignment get_applied_organizational_project_assignment() { return new applied_organizational_project_assignment (getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT")); }
        public applied_organizational_project_assignment _applied_organizational_project_assignment { get { return get_applied_organizational_project_assignment(); } }
        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        public bool _is_approval_relationship { get { return is_approval_relationship(); } }
        public approval_relationship get_approval_relationship() { return new approval_relationship (getEntityInstance("APPROVAL_RELATIONSHIP")); }
        public approval_relationship _approval_relationship { get { return get_approval_relationship(); } }
        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public bool is_attribute_value_assignment() { return IsADBEntity("attribute_value_assignment"); }
        public bool _is_attribute_value_assignment { get { return is_attribute_value_assignment(); } }
        public attribute_value_assignment get_attribute_value_assignment() { return new attribute_value_assignment (getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT")); }
        public attribute_value_assignment _attribute_value_assignment { get { return get_attribute_value_assignment(); } }
        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public bool is_certification_type() { return IsADBEntity("certification_type"); }
        public bool _is_certification_type { get { return is_certification_type(); } }
        public certification_type get_certification_type() { return new certification_type (getEntityInstance("CERTIFICATION_TYPE")); }
        public certification_type _certification_type { get { return get_certification_type(); } }
        public bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        public bool _is_configuration_design { get { return is_configuration_design(); } }
        public configuration_design get_configuration_design() { return new configuration_design (getEntityInstance("CONFIGURATION_DESIGN")); }
        public configuration_design _configuration_design { get { return get_configuration_design(); } }
        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_date_role() { return IsADBEntity("date_role"); }
        public bool _is_date_role { get { return is_date_role(); } }
        public date_role get_date_role() { return new date_role (getEntityInstance("DATE_ROLE")); }
        public date_role _date_role { get { return get_date_role(); } }
        public bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        public bool _is_date_time_role { get { return is_date_time_role(); } }
        public date_time_role get_date_time_role() { return new date_time_role (getEntityInstance("DATE_TIME_ROLE")); }
        public date_time_role _date_time_role { get { return get_date_time_role(); } }
        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        public bool _is_document_relationship { get { return is_document_relationship(); } }
        public document_relationship get_document_relationship() { return new document_relationship (getEntityInstance("DOCUMENT_RELATIONSHIP")); }
        public document_relationship _document_relationship { get { return get_document_relationship(); } }
        public bool is_document_usage_role() { return IsADBEntity("document_usage_role"); }
        public bool _is_document_usage_role { get { return is_document_usage_role(); } }
        public document_usage_role get_document_usage_role() { return new document_usage_role (getEntityInstance("DOCUMENT_USAGE_ROLE")); }
        public document_usage_role _document_usage_role { get { return get_document_usage_role(); } }
        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        public bool _is_effectivity_relationship { get { return is_effectivity_relationship(); } }
        public effectivity_relationship get_effectivity_relationship() { return new effectivity_relationship (getEntityInstance("EFFECTIVITY_RELATIONSHIP")); }
        public effectivity_relationship _effectivity_relationship { get { return get_effectivity_relationship(); } }
        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }
        public bool is_external_source() { return IsADBEntity("external_source"); }
        public bool _is_external_source { get { return is_external_source(); } }
        public external_source get_external_source() { return new external_source (getEntityInstance("EXTERNAL_SOURCE")); }
        public external_source _external_source { get { return get_external_source(); } }
        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        public bool _is_general_property_relationship { get { return is_general_property_relationship(); } }
        public general_property_relationship get_general_property_relationship() { return new general_property_relationship (getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
        public general_property_relationship _general_property_relationship { get { return get_general_property_relationship(); } }
        public bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        public bool _is_geometric_representation_item { get { return is_geometric_representation_item(); } }
        public geometric_representation_item get_geometric_representation_item() { return new geometric_representation_item (getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); }
        public geometric_representation_item _geometric_representation_item { get { return get_geometric_representation_item(); } }
        public bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        public bool _is_geometric_tolerance { get { return is_geometric_tolerance(); } }
        public geometric_tolerance get_geometric_tolerance() { return new geometric_tolerance (getEntityInstance("GEOMETRIC_TOLERANCE")); }
        public geometric_tolerance _geometric_tolerance { get { return get_geometric_tolerance(); } }
        public bool is_identification_role() { return IsADBEntity("identification_role"); }
        public bool _is_identification_role { get { return is_identification_role(); } }
        public identification_role get_identification_role() { return new identification_role (getEntityInstance("IDENTIFICATION_ROLE")); }
        public identification_role _identification_role { get { return get_identification_role(); } }
        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        public bool _is_make_from_usage_option { get { return is_make_from_usage_option(); } }
        public make_from_usage_option get_make_from_usage_option() { return new make_from_usage_option (getEntityInstance("MAKE_FROM_USAGE_OPTION")); }
        public make_from_usage_option _make_from_usage_option { get { return get_make_from_usage_option(); } }
        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }
        public bool is_multi_language_attribute_assignment() { return IsADBEntity("multi_language_attribute_assignment"); }
        public bool _is_multi_language_attribute_assignment { get { return is_multi_language_attribute_assignment(); } }
        public multi_language_attribute_assignment get_multi_language_attribute_assignment() { return new multi_language_attribute_assignment (getEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT")); }
        public multi_language_attribute_assignment _multi_language_attribute_assignment { get { return get_multi_language_attribute_assignment(); } }
        public bool is_object_role() { return IsADBEntity("object_role"); }
        public bool _is_object_role { get { return is_object_role(); } }
        public object_role get_object_role() { return new object_role (getEntityInstance("OBJECT_ROLE")); }
        public object_role _object_role { get { return get_object_role(); } }
        public bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        public bool _is_organization_relationship { get { return is_organization_relationship(); } }
        public organization_relationship get_organization_relationship() { return new organization_relationship (getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
        public organization_relationship _organization_relationship { get { return get_organization_relationship(); } }
        public bool is_organization_role() { return IsADBEntity("organization_role"); }
        public bool _is_organization_role { get { return is_organization_role(); } }
        public organization_role get_organization_role() { return new organization_role (getEntityInstance("ORGANIZATION_ROLE")); }
        public organization_role _organization_role { get { return get_organization_role(); } }
        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        public bool _is_organizational_project_relationship { get { return is_organizational_project_relationship(); } }
        public organizational_project_relationship get_organizational_project_relationship() { return new organizational_project_relationship (getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); }
        public organizational_project_relationship _organizational_project_relationship { get { return get_organizational_project_relationship(); } }
        public bool is_organizational_project_role() { return IsADBEntity("organizational_project_role"); }
        public bool _is_organizational_project_role { get { return is_organizational_project_role(); } }
        public organizational_project_role get_organizational_project_role() { return new organizational_project_role (getEntityInstance("ORGANIZATIONAL_PROJECT_ROLE")); }
        public organizational_project_role _organizational_project_role { get { return get_organizational_project_role(); } }
        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        public bool _is_person_and_organization_role { get { return is_person_and_organization_role(); } }
        public person_and_organization_role get_person_and_organization_role() { return new person_and_organization_role (getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); }
        public person_and_organization_role _person_and_organization_role { get { return get_person_and_organization_role(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        public bool _is_product_concept_relationship { get { return is_product_concept_relationship(); } }
        public product_concept_relationship get_product_concept_relationship() { return new product_concept_relationship (getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP")); }
        public product_concept_relationship _product_concept_relationship { get { return get_product_concept_relationship(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        public bool _is_product_definition_context { get { return is_product_definition_context(); } }
        public product_definition_context get_product_definition_context() { return new product_definition_context (getEntityInstance("PRODUCT_DEFINITION_CONTEXT")); }
        public product_definition_context _product_definition_context { get { return get_product_definition_context(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        public bool _is_product_definition_shape { get { return is_product_definition_shape(); } }
        public product_definition_shape get_product_definition_shape() { return new product_definition_shape (getEntityInstance("PRODUCT_DEFINITION_SHAPE")); }
        public product_definition_shape _product_definition_shape { get { return get_product_definition_shape(); } }
        public bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        public bool _is_product_related_product_category { get { return is_product_related_product_category(); } }
        public product_related_product_category get_product_related_product_category() { return new product_related_product_category (getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY")); }
        public product_related_product_category _product_related_product_category { get { return get_product_related_product_category(); } }
        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        public bool _is_security_classification_assignment { get { return is_security_classification_assignment(); } }
        public security_classification_assignment get_security_classification_assignment() { return new security_classification_assignment (getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public security_classification_assignment _security_classification_assignment { get { return get_security_classification_assignment(); } }
        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        public bool _is_time_interval_role { get { return is_time_interval_role(); } }
        public time_interval_role get_time_interval_role() { return new time_interval_role (getEntityInstance("TIME_INTERVAL_ROLE")); }
        public time_interval_role _time_interval_role { get { return get_time_interval_role(); } }
        public bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        public bool _is_topological_representation_item { get { return is_topological_representation_item(); } }
        public topological_representation_item get_topological_representation_item() { return new topological_representation_item (getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); }
        public topological_representation_item _topological_representation_item { get { return get_topological_representation_item(); } }
        public bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        public bool _is_uncertainty_measure_with_unit { get { return is_uncertainty_measure_with_unit(); } }
        public uncertainty_measure_with_unit get_uncertainty_measure_with_unit() { return new uncertainty_measure_with_unit (getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); }
        public uncertainty_measure_with_unit _uncertainty_measure_with_unit { get { return get_uncertainty_measure_with_unit(); } }
        public bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        public bool _is_uncertainty_qualifier { get { return is_uncertainty_qualifier(); } }
        public uncertainty_qualifier get_uncertainty_qualifier() { return new uncertainty_qualifier (getEntityInstance("UNCERTAINTY_QUALIFIER")); }
        public uncertainty_qualifier _uncertainty_qualifier { get { return get_uncertainty_qualifier(); } }
        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class attribute_language_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_language_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_language_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_language_item_put() : base(null) { }

        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
        public void put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
        public void put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
        public void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
        public void put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
        public void put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
        public void put_attribute_value_assignment(attribute_value_assignment inst) { putEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT", inst); }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
        public void put_certification_type(certification_type inst) { putEntityInstance("CERTIFICATION_TYPE", inst); }
        public void put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
        public void put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
        public void put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
        public void put_document_usage_role(document_usage_role inst) { putEntityInstance("DOCUMENT_USAGE_ROLE", inst); }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
        public void put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
        public void put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
        public void put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
        public void put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
        public void put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }
        public void put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
        public void put_multi_language_attribute_assignment(multi_language_attribute_assignment inst) { putEntityInstance("MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT", inst); }
        public void put_object_role(object_role inst) { putEntityInstance("OBJECT_ROLE", inst); }
        public void put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
        public void put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
        public void put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
        public void put_organizational_project_role(organizational_project_role inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_ROLE", inst); }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
        public void put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
        public void put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }
        public void put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
        public void put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }
        public void put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
        public void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
        public void put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
        };


    public class attribute_type : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_type(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_type(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_type() : base(null) { }


        public bool is_label() { return IsADBType("LABEL"); }
        public bool _islabel { get { return is_label(); } }
        public TextValue get_label() { return getTextValue("LABEL", ifcengine.sdaiSTRING); }
        public TextValue _label { get { return get_label(); } }
        public void put_label(TextValue value) { putTextValue("LABEL", ifcengine.sdaiSTRING, value); }

        public bool is_text() { return IsADBType("TEXT"); }
        public bool _istext { get { return is_text(); } }
        public TextValue get_text() { return getTextValue("TEXT", ifcengine.sdaiSTRING); }
        public TextValue _text { get { return get_text(); } }
        public void put_text(TextValue value) { putTextValue("TEXT", ifcengine.sdaiSTRING, value); }
        };


    public class attribute_type_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_type_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_type_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_type_get() : base(null) { }

        public bool is_label() { return IsADBType("LABEL"); }
        public bool _islabel { get { return is_label(); } }
        public TextValue get_label() { return getTextValue("LABEL", ifcengine.sdaiSTRING); }
        public TextValue _label { get { return get_label(); } }
        public bool is_text() { return IsADBType("TEXT"); }
        public bool _istext { get { return is_text(); } }
        public TextValue get_text() { return getTextValue("TEXT", ifcengine.sdaiSTRING); }
        public TextValue _text { get { return get_text(); } }

        public TextValue as_text() { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; }
        };


    public class attribute_type_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public attribute_type_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public attribute_type_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public attribute_type_put() : base(null) { }

        public void put_label(TextValue value) { putTextValue("LABEL", ifcengine.sdaiSTRING, value); }
        public void put_text(TextValue value) { putTextValue("TEXT", ifcengine.sdaiSTRING, value); }
        };


    public class axis2_placement : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public axis2_placement(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public axis2_placement(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public axis2_placement() : base(null) { }


        public bool is_axis2_placement_2d() { return IsADBEntity("axis2_placement_2d"); }
        public bool _is_axis2_placement_2d { get { return is_axis2_placement_2d(); } }
        public axis2_placement_2d get_axis2_placement_2d() { return new axis2_placement_2d (getEntityInstance("AXIS2_PLACEMENT_2D")); }
        public axis2_placement_2d _axis2_placement_2d { get { return get_axis2_placement_2d(); } }
        public void put_axis2_placement_2d(axis2_placement_2d inst) { putEntityInstance("AXIS2_PLACEMENT_2D", inst); }

        public bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        public bool _is_axis2_placement_3d { get { return is_axis2_placement_3d(); } }
        public axis2_placement_3d get_axis2_placement_3d() { return new axis2_placement_3d (getEntityInstance("AXIS2_PLACEMENT_3D")); }
        public axis2_placement_3d _axis2_placement_3d { get { return get_axis2_placement_3d(); } }
        public void put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
        };


    public class axis2_placement_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public axis2_placement_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public axis2_placement_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public axis2_placement_get() : base(null) { }

        public bool is_axis2_placement_2d() { return IsADBEntity("axis2_placement_2d"); }
        public bool _is_axis2_placement_2d { get { return is_axis2_placement_2d(); } }
        public axis2_placement_2d get_axis2_placement_2d() { return new axis2_placement_2d (getEntityInstance("AXIS2_PLACEMENT_2D")); }
        public axis2_placement_2d _axis2_placement_2d { get { return get_axis2_placement_2d(); } }
        public bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        public bool _is_axis2_placement_3d { get { return is_axis2_placement_3d(); } }
        public axis2_placement_3d get_axis2_placement_3d() { return new axis2_placement_3d (getEntityInstance("AXIS2_PLACEMENT_3D")); }
        public axis2_placement_3d _axis2_placement_3d { get { return get_axis2_placement_3d(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class axis2_placement_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public axis2_placement_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public axis2_placement_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public axis2_placement_put() : base(null) { }

        public void put_axis2_placement_2d(axis2_placement_2d inst) { putEntityInstance("AXIS2_PLACEMENT_2D", inst); }
        public void put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
        };


    public class csg_primitive : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_primitive(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_primitive(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_primitive() : base(null) { }


        public bool is_sphere() { return IsADBEntity("sphere"); }
        public bool _is_sphere { get { return is_sphere(); } }
        public sphere get_sphere() { return new sphere (getEntityInstance("SPHERE")); }
        public sphere _sphere { get { return get_sphere(); } }
        public void put_sphere(sphere inst) { putEntityInstance("SPHERE", inst); }

        public bool is_block() { return IsADBEntity("block"); }
        public bool _is_block { get { return is_block(); } }
        public block get_block() { return new block (getEntityInstance("BLOCK")); }
        public block _block { get { return get_block(); } }
        public void put_block(block inst) { putEntityInstance("BLOCK", inst); }

        public bool is_right_angular_wedge() { return IsADBEntity("right_angular_wedge"); }
        public bool _is_right_angular_wedge { get { return is_right_angular_wedge(); } }
        public right_angular_wedge get_right_angular_wedge() { return new right_angular_wedge (getEntityInstance("RIGHT_ANGULAR_WEDGE")); }
        public right_angular_wedge _right_angular_wedge { get { return get_right_angular_wedge(); } }
        public void put_right_angular_wedge(right_angular_wedge inst) { putEntityInstance("RIGHT_ANGULAR_WEDGE", inst); }

        public bool is_torus() { return IsADBEntity("torus"); }
        public bool _is_torus { get { return is_torus(); } }
        public torus get_torus() { return new torus (getEntityInstance("TORUS")); }
        public torus _torus { get { return get_torus(); } }
        public void put_torus(torus inst) { putEntityInstance("TORUS", inst); }

        public bool is_right_circular_cone() { return IsADBEntity("right_circular_cone"); }
        public bool _is_right_circular_cone { get { return is_right_circular_cone(); } }
        public right_circular_cone get_right_circular_cone() { return new right_circular_cone (getEntityInstance("RIGHT_CIRCULAR_CONE")); }
        public right_circular_cone _right_circular_cone { get { return get_right_circular_cone(); } }
        public void put_right_circular_cone(right_circular_cone inst) { putEntityInstance("RIGHT_CIRCULAR_CONE", inst); }

        public bool is_right_circular_cylinder() { return IsADBEntity("right_circular_cylinder"); }
        public bool _is_right_circular_cylinder { get { return is_right_circular_cylinder(); } }
        public right_circular_cylinder get_right_circular_cylinder() { return new right_circular_cylinder (getEntityInstance("RIGHT_CIRCULAR_CYLINDER")); }
        public right_circular_cylinder _right_circular_cylinder { get { return get_right_circular_cylinder(); } }
        public void put_right_circular_cylinder(right_circular_cylinder inst) { putEntityInstance("RIGHT_CIRCULAR_CYLINDER", inst); }
        };


    public class csg_primitive_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_primitive_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_primitive_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_primitive_get() : base(null) { }

        public bool is_sphere() { return IsADBEntity("sphere"); }
        public bool _is_sphere { get { return is_sphere(); } }
        public sphere get_sphere() { return new sphere (getEntityInstance("SPHERE")); }
        public sphere _sphere { get { return get_sphere(); } }
        public bool is_block() { return IsADBEntity("block"); }
        public bool _is_block { get { return is_block(); } }
        public block get_block() { return new block (getEntityInstance("BLOCK")); }
        public block _block { get { return get_block(); } }
        public bool is_right_angular_wedge() { return IsADBEntity("right_angular_wedge"); }
        public bool _is_right_angular_wedge { get { return is_right_angular_wedge(); } }
        public right_angular_wedge get_right_angular_wedge() { return new right_angular_wedge (getEntityInstance("RIGHT_ANGULAR_WEDGE")); }
        public right_angular_wedge _right_angular_wedge { get { return get_right_angular_wedge(); } }
        public bool is_torus() { return IsADBEntity("torus"); }
        public bool _is_torus { get { return is_torus(); } }
        public torus get_torus() { return new torus (getEntityInstance("TORUS")); }
        public torus _torus { get { return get_torus(); } }
        public bool is_right_circular_cone() { return IsADBEntity("right_circular_cone"); }
        public bool _is_right_circular_cone { get { return is_right_circular_cone(); } }
        public right_circular_cone get_right_circular_cone() { return new right_circular_cone (getEntityInstance("RIGHT_CIRCULAR_CONE")); }
        public right_circular_cone _right_circular_cone { get { return get_right_circular_cone(); } }
        public bool is_right_circular_cylinder() { return IsADBEntity("right_circular_cylinder"); }
        public bool _is_right_circular_cylinder { get { return is_right_circular_cylinder(); } }
        public right_circular_cylinder get_right_circular_cylinder() { return new right_circular_cylinder (getEntityInstance("RIGHT_CIRCULAR_CYLINDER")); }
        public right_circular_cylinder _right_circular_cylinder { get { return get_right_circular_cylinder(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class csg_primitive_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_primitive_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_primitive_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_primitive_put() : base(null) { }

        public void put_sphere(sphere inst) { putEntityInstance("SPHERE", inst); }
        public void put_block(block inst) { putEntityInstance("BLOCK", inst); }
        public void put_right_angular_wedge(right_angular_wedge inst) { putEntityInstance("RIGHT_ANGULAR_WEDGE", inst); }
        public void put_torus(torus inst) { putEntityInstance("TORUS", inst); }
        public void put_right_circular_cone(right_circular_cone inst) { putEntityInstance("RIGHT_CIRCULAR_CONE", inst); }
        public void put_right_circular_cylinder(right_circular_cylinder inst) { putEntityInstance("RIGHT_CIRCULAR_CYLINDER", inst); }
        };


    public class base_solid_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public base_solid_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public base_solid_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public base_solid_select() : base(null) { }


        public bool is_solid_model() { return IsADBEntity("solid_model"); }
        public bool _is_solid_model { get { return is_solid_model(); } }
        public solid_model get_solid_model() { return new solid_model (getEntityInstance("SOLID_MODEL")); }
        public solid_model _solid_model { get { return get_solid_model(); } }
        public void put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }

        public csg_primitive _csg_primitive() { return new csg_primitive(this); }
        public csg_primitive __csg_primitive { get { return _csg_primitive(); } }

        public bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        public bool _is_boolean_result { get { return is_boolean_result(); } }
        public boolean_result get_boolean_result() { return new boolean_result (getEntityInstance("BOOLEAN_RESULT")); }
        public boolean_result _boolean_result { get { return get_boolean_result(); } }
        public void put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
        };


    public class base_solid_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public base_solid_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public base_solid_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public base_solid_select_get() : base(null) { }

        public bool is_solid_model() { return IsADBEntity("solid_model"); }
        public bool _is_solid_model { get { return is_solid_model(); } }
        public solid_model get_solid_model() { return new solid_model (getEntityInstance("SOLID_MODEL")); }
        public solid_model _solid_model { get { return get_solid_model(); } }
        public csg_primitive_get get_csg_primitive() { return new csg_primitive_get(this); }
        public csg_primitive_get __csg_primitive { get { return get_csg_primitive(); } }
        public bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        public bool _is_boolean_result { get { return is_boolean_result(); } }
        public boolean_result get_boolean_result() { return new boolean_result (getEntityInstance("BOOLEAN_RESULT")); }
        public boolean_result _boolean_result { get { return get_boolean_result(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class base_solid_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public base_solid_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public base_solid_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public base_solid_select_put() : base(null) { }

        public void put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
        public csg_primitive_put put_csg_primitive() { return new csg_primitive_put(this); }
        public csg_primitive_put __csg_primitive { get { return put_csg_primitive(); } }
        public void put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
        };


    public class blend_end_condition_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public blend_end_condition_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public blend_end_condition_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public blend_end_condition_select() : base(null) { }


        public bool is_point_on_curve() { return IsADBEntity("point_on_curve"); }
        public bool _is_point_on_curve { get { return is_point_on_curve(); } }
        public point_on_curve get_point_on_curve() { return new point_on_curve (getEntityInstance("POINT_ON_CURVE")); }
        public point_on_curve _point_on_curve { get { return get_point_on_curve(); } }
        public void put_point_on_curve(point_on_curve inst) { putEntityInstance("POINT_ON_CURVE", inst); }

        public bool is_edge_curve() { return IsADBEntity("edge_curve"); }
        public bool _is_edge_curve { get { return is_edge_curve(); } }
        public edge_curve get_edge_curve() { return new edge_curve (getEntityInstance("EDGE_CURVE")); }
        public edge_curve _edge_curve { get { return get_edge_curve(); } }
        public void put_edge_curve(edge_curve inst) { putEntityInstance("EDGE_CURVE", inst); }

        public bool is_vertex() { return IsADBEntity("vertex"); }
        public bool _is_vertex { get { return is_vertex(); } }
        public vertex get_vertex() { return new vertex (getEntityInstance("VERTEX")); }
        public vertex _vertex { get { return get_vertex(); } }
        public void put_vertex(vertex inst) { putEntityInstance("VERTEX", inst); }
        };


    public class blend_end_condition_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public blend_end_condition_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public blend_end_condition_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public blend_end_condition_select_get() : base(null) { }

        public bool is_point_on_curve() { return IsADBEntity("point_on_curve"); }
        public bool _is_point_on_curve { get { return is_point_on_curve(); } }
        public point_on_curve get_point_on_curve() { return new point_on_curve (getEntityInstance("POINT_ON_CURVE")); }
        public point_on_curve _point_on_curve { get { return get_point_on_curve(); } }
        public bool is_edge_curve() { return IsADBEntity("edge_curve"); }
        public bool _is_edge_curve { get { return is_edge_curve(); } }
        public edge_curve get_edge_curve() { return new edge_curve (getEntityInstance("EDGE_CURVE")); }
        public edge_curve _edge_curve { get { return get_edge_curve(); } }
        public bool is_vertex() { return IsADBEntity("vertex"); }
        public bool _is_vertex { get { return is_vertex(); } }
        public vertex get_vertex() { return new vertex (getEntityInstance("VERTEX")); }
        public vertex _vertex { get { return get_vertex(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class blend_end_condition_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public blend_end_condition_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public blend_end_condition_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public blend_end_condition_select_put() : base(null) { }

        public void put_point_on_curve(point_on_curve inst) { putEntityInstance("POINT_ON_CURVE", inst); }
        public void put_edge_curve(edge_curve inst) { putEntityInstance("EDGE_CURVE", inst); }
        public void put_vertex(vertex inst) { putEntityInstance("VERTEX", inst); }
        };


    public class boolean_operand : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public boolean_operand(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public boolean_operand(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public boolean_operand() : base(null) { }


        public bool is_solid_model() { return IsADBEntity("solid_model"); }
        public bool _is_solid_model { get { return is_solid_model(); } }
        public solid_model get_solid_model() { return new solid_model (getEntityInstance("SOLID_MODEL")); }
        public solid_model _solid_model { get { return get_solid_model(); } }
        public void put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }

        public bool is_half_space_solid() { return IsADBEntity("half_space_solid"); }
        public bool _is_half_space_solid { get { return is_half_space_solid(); } }
        public half_space_solid get_half_space_solid() { return new half_space_solid (getEntityInstance("HALF_SPACE_SOLID")); }
        public half_space_solid _half_space_solid { get { return get_half_space_solid(); } }
        public void put_half_space_solid(half_space_solid inst) { putEntityInstance("HALF_SPACE_SOLID", inst); }

        public csg_primitive _csg_primitive() { return new csg_primitive(this); }
        public csg_primitive __csg_primitive { get { return _csg_primitive(); } }

        public bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        public bool _is_boolean_result { get { return is_boolean_result(); } }
        public boolean_result get_boolean_result() { return new boolean_result (getEntityInstance("BOOLEAN_RESULT")); }
        public boolean_result _boolean_result { get { return get_boolean_result(); } }
        public void put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
        };


    public class boolean_operand_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public boolean_operand_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public boolean_operand_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public boolean_operand_get() : base(null) { }

        public bool is_solid_model() { return IsADBEntity("solid_model"); }
        public bool _is_solid_model { get { return is_solid_model(); } }
        public solid_model get_solid_model() { return new solid_model (getEntityInstance("SOLID_MODEL")); }
        public solid_model _solid_model { get { return get_solid_model(); } }
        public bool is_half_space_solid() { return IsADBEntity("half_space_solid"); }
        public bool _is_half_space_solid { get { return is_half_space_solid(); } }
        public half_space_solid get_half_space_solid() { return new half_space_solid (getEntityInstance("HALF_SPACE_SOLID")); }
        public half_space_solid _half_space_solid { get { return get_half_space_solid(); } }
        public csg_primitive_get get_csg_primitive() { return new csg_primitive_get(this); }
        public csg_primitive_get __csg_primitive { get { return get_csg_primitive(); } }
        public bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        public bool _is_boolean_result { get { return is_boolean_result(); } }
        public boolean_result get_boolean_result() { return new boolean_result (getEntityInstance("BOOLEAN_RESULT")); }
        public boolean_result _boolean_result { get { return get_boolean_result(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class boolean_operand_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public boolean_operand_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public boolean_operand_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public boolean_operand_put() : base(null) { }

        public void put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
        public void put_half_space_solid(half_space_solid inst) { putEntityInstance("HALF_SPACE_SOLID", inst); }
        public csg_primitive_put put_csg_primitive() { return new csg_primitive_put(this); }
        public csg_primitive_put __csg_primitive { get { return put_csg_primitive(); } }
        public void put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
        };


    public class box_characteristic_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public box_characteristic_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public box_characteristic_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public box_characteristic_select() : base(null) { }


        public bool is_box_height() { return IsADBType("BOX_HEIGHT"); }
        //public bool _is_box_height { get { return is_box_height(); } }
        public double? get_box_height() { return get_double("BOX_HEIGHT", ifcengine.sdaiREAL); }
        public double? _box_height { get { return get_box_height(); } }
        public void put_box_height (double value) { put_double("BOX_HEIGHT", ifcengine.sdaiREAL, value); }

        public bool is_box_width() { return IsADBType("BOX_WIDTH"); }
        //public bool _is_box_width { get { return is_box_width(); } }
        public double? get_box_width() { return get_double("BOX_WIDTH", ifcengine.sdaiREAL); }
        public double? _box_width { get { return get_box_width(); } }
        public void put_box_width (double value) { put_double("BOX_WIDTH", ifcengine.sdaiREAL, value); }

        public bool is_box_slant_angle() { return IsADBType("BOX_SLANT_ANGLE"); }
        //public bool _is_box_slant_angle { get { return is_box_slant_angle(); } }
        public double? get_box_slant_angle() { return get_double("BOX_SLANT_ANGLE", ifcengine.sdaiREAL); }
        public double? _box_slant_angle { get { return get_box_slant_angle(); } }
        public void put_box_slant_angle (double value) { put_double("BOX_SLANT_ANGLE", ifcengine.sdaiREAL, value); }

        public bool is_box_rotate_angle() { return IsADBType("BOX_ROTATE_ANGLE"); }
        //public bool _is_box_rotate_angle { get { return is_box_rotate_angle(); } }
        public double? get_box_rotate_angle() { return get_double("BOX_ROTATE_ANGLE", ifcengine.sdaiREAL); }
        public double? _box_rotate_angle { get { return get_box_rotate_angle(); } }
        public void put_box_rotate_angle (double value) { put_double("BOX_ROTATE_ANGLE", ifcengine.sdaiREAL, value); }
        };


    public class box_characteristic_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public box_characteristic_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public box_characteristic_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public box_characteristic_select_get() : base(null) { }

        public bool is_box_height() { return IsADBType("BOX_HEIGHT"); }
        //public bool _is_box_height { get { return is_box_height(); } }
        public double? get_box_height() { return get_double("BOX_HEIGHT", ifcengine.sdaiREAL); }
        public double? _box_height { get { return get_box_height(); } }
        public bool is_box_width() { return IsADBType("BOX_WIDTH"); }
        //public bool _is_box_width { get { return is_box_width(); } }
        public double? get_box_width() { return get_double("BOX_WIDTH", ifcengine.sdaiREAL); }
        public double? _box_width { get { return get_box_width(); } }
        public bool is_box_slant_angle() { return IsADBType("BOX_SLANT_ANGLE"); }
        //public bool _is_box_slant_angle { get { return is_box_slant_angle(); } }
        public double? get_box_slant_angle() { return get_double("BOX_SLANT_ANGLE", ifcengine.sdaiREAL); }
        public double? _box_slant_angle { get { return get_box_slant_angle(); } }
        public bool is_box_rotate_angle() { return IsADBType("BOX_ROTATE_ANGLE"); }
        //public bool _is_box_rotate_angle { get { return is_box_rotate_angle(); } }
        public double? get_box_rotate_angle() { return get_double("BOX_ROTATE_ANGLE", ifcengine.sdaiREAL); }
        public double? _box_rotate_angle { get { return get_box_rotate_angle(); } }

        public double? as_double() { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; }
        };


    public class box_characteristic_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public box_characteristic_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public box_characteristic_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public box_characteristic_select_put() : base(null) { }

        public void put_box_height (double value) { put_double("BOX_HEIGHT", ifcengine.sdaiREAL, value); }
        public void put_box_width (double value) { put_double("BOX_WIDTH", ifcengine.sdaiREAL, value); }
        public void put_box_slant_angle (double value) { put_double("BOX_SLANT_ANGLE", ifcengine.sdaiREAL, value); }
        public void put_box_rotate_angle (double value) { put_double("BOX_ROTATE_ANGLE", ifcengine.sdaiREAL, value); }
        };


    public class camera_model_d3_multi_clipping_interection_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public camera_model_d3_multi_clipping_interection_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public camera_model_d3_multi_clipping_interection_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public camera_model_d3_multi_clipping_interection_select() : base(null) { }


        public bool is_camera_model_d3_multi_clipping_union() { return IsADBEntity("camera_model_d3_multi_clipping_union"); }
        public bool _is_camera_model_d3_multi_clipping_union { get { return is_camera_model_d3_multi_clipping_union(); } }
        public camera_model_d3_multi_clipping_union get_camera_model_d3_multi_clipping_union() { return new camera_model_d3_multi_clipping_union (getEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_UNION")); }
        public camera_model_d3_multi_clipping_union _camera_model_d3_multi_clipping_union { get { return get_camera_model_d3_multi_clipping_union(); } }
        public void put_camera_model_d3_multi_clipping_union(camera_model_d3_multi_clipping_union inst) { putEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_UNION", inst); }

        public bool is_plane() { return IsADBEntity("plane"); }
        public bool _is_plane { get { return is_plane(); } }
        public plane get_plane() { return new plane (getEntityInstance("PLANE")); }
        public plane _plane { get { return get_plane(); } }
        public void put_plane(plane inst) { putEntityInstance("PLANE", inst); }
        };


    public class camera_model_d3_multi_clipping_interection_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public camera_model_d3_multi_clipping_interection_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public camera_model_d3_multi_clipping_interection_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public camera_model_d3_multi_clipping_interection_select_get() : base(null) { }

        public bool is_camera_model_d3_multi_clipping_union() { return IsADBEntity("camera_model_d3_multi_clipping_union"); }
        public bool _is_camera_model_d3_multi_clipping_union { get { return is_camera_model_d3_multi_clipping_union(); } }
        public camera_model_d3_multi_clipping_union get_camera_model_d3_multi_clipping_union() { return new camera_model_d3_multi_clipping_union (getEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_UNION")); }
        public camera_model_d3_multi_clipping_union _camera_model_d3_multi_clipping_union { get { return get_camera_model_d3_multi_clipping_union(); } }
        public bool is_plane() { return IsADBEntity("plane"); }
        public bool _is_plane { get { return is_plane(); } }
        public plane get_plane() { return new plane (getEntityInstance("PLANE")); }
        public plane _plane { get { return get_plane(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class camera_model_d3_multi_clipping_interection_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public camera_model_d3_multi_clipping_interection_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public camera_model_d3_multi_clipping_interection_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public camera_model_d3_multi_clipping_interection_select_put() : base(null) { }

        public void put_camera_model_d3_multi_clipping_union(camera_model_d3_multi_clipping_union inst) { putEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_UNION", inst); }
        public void put_plane(plane inst) { putEntityInstance("PLANE", inst); }
        };


    public class camera_model_d3_multi_clipping_union_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public camera_model_d3_multi_clipping_union_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public camera_model_d3_multi_clipping_union_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public camera_model_d3_multi_clipping_union_select() : base(null) { }


        public bool is_camera_model_d3_multi_clipping_intersection() { return IsADBEntity("camera_model_d3_multi_clipping_intersection"); }
        public bool _is_camera_model_d3_multi_clipping_intersection { get { return is_camera_model_d3_multi_clipping_intersection(); } }
        public camera_model_d3_multi_clipping_intersection get_camera_model_d3_multi_clipping_intersection() { return new camera_model_d3_multi_clipping_intersection (getEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_INTERSECTION")); }
        public camera_model_d3_multi_clipping_intersection _camera_model_d3_multi_clipping_intersection { get { return get_camera_model_d3_multi_clipping_intersection(); } }
        public void put_camera_model_d3_multi_clipping_intersection(camera_model_d3_multi_clipping_intersection inst) { putEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_INTERSECTION", inst); }

        public bool is_plane() { return IsADBEntity("plane"); }
        public bool _is_plane { get { return is_plane(); } }
        public plane get_plane() { return new plane (getEntityInstance("PLANE")); }
        public plane _plane { get { return get_plane(); } }
        public void put_plane(plane inst) { putEntityInstance("PLANE", inst); }
        };


    public class camera_model_d3_multi_clipping_union_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public camera_model_d3_multi_clipping_union_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public camera_model_d3_multi_clipping_union_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public camera_model_d3_multi_clipping_union_select_get() : base(null) { }

        public bool is_camera_model_d3_multi_clipping_intersection() { return IsADBEntity("camera_model_d3_multi_clipping_intersection"); }
        public bool _is_camera_model_d3_multi_clipping_intersection { get { return is_camera_model_d3_multi_clipping_intersection(); } }
        public camera_model_d3_multi_clipping_intersection get_camera_model_d3_multi_clipping_intersection() { return new camera_model_d3_multi_clipping_intersection (getEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_INTERSECTION")); }
        public camera_model_d3_multi_clipping_intersection _camera_model_d3_multi_clipping_intersection { get { return get_camera_model_d3_multi_clipping_intersection(); } }
        public bool is_plane() { return IsADBEntity("plane"); }
        public bool _is_plane { get { return is_plane(); } }
        public plane get_plane() { return new plane (getEntityInstance("PLANE")); }
        public plane _plane { get { return get_plane(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class camera_model_d3_multi_clipping_union_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public camera_model_d3_multi_clipping_union_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public camera_model_d3_multi_clipping_union_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public camera_model_d3_multi_clipping_union_select_put() : base(null) { }

        public void put_camera_model_d3_multi_clipping_intersection(camera_model_d3_multi_clipping_intersection inst) { putEntityInstance("CAMERA_MODEL_D3_MULTI_CLIPPING_INTERSECTION", inst); }
        public void put_plane(plane inst) { putEntityInstance("PLANE", inst); }
        };


    public class category_usage_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public category_usage_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public category_usage_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public category_usage_item() : base(null) { }


        public bool is_product_class() { return IsADBEntity("product_class"); }
        public bool _is_product_class { get { return is_product_class(); } }
        public product_class get_product_class() { return new product_class (getEntityInstance("PRODUCT_CLASS")); }
        public product_class _product_class { get { return get_product_class(); } }
        public void put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
        };


    public class category_usage_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public category_usage_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public category_usage_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public category_usage_item_get() : base(null) { }

        public bool is_product_class() { return IsADBEntity("product_class"); }
        public bool _is_product_class { get { return is_product_class(); } }
        public product_class get_product_class() { return new product_class (getEntityInstance("PRODUCT_CLASS")); }
        public product_class _product_class { get { return get_product_class(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class category_usage_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public category_usage_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public category_usage_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public category_usage_item_put() : base(null) { }

        public void put_product_class(product_class inst) { putEntityInstance("PRODUCT_CLASS", inst); }
        };


    public class cc_classified_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public cc_classified_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public cc_classified_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public cc_classified_item() : base(null) { }


        public bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        public bool _is_assembly_component_usage { get { return is_assembly_component_usage(); } }
        public assembly_component_usage get_assembly_component_usage() { return new assembly_component_usage (getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); }
        public assembly_component_usage _assembly_component_usage { get { return get_assembly_component_usage(); } }
        public void put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class cc_classified_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public cc_classified_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public cc_classified_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public cc_classified_item_get() : base(null) { }

        public bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        public bool _is_assembly_component_usage { get { return is_assembly_component_usage(); } }
        public assembly_component_usage get_assembly_component_usage() { return new assembly_component_usage (getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); }
        public assembly_component_usage _assembly_component_usage { get { return get_assembly_component_usage(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class cc_classified_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public cc_classified_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public cc_classified_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public cc_classified_item_put() : base(null) { }

        public void put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class cc_person_organization_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public cc_person_organization_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public cc_person_organization_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public cc_person_organization_item() : base(null) { }


        public bool is_change() { return IsADBEntity("change"); }
        public bool _is_change { get { return is_change(); } }
        public change get_change() { return new change (getEntityInstance("CHANGE")); }
        public change _change { get { return get_change(); } }
        public void put_change(change inst) { putEntityInstance("CHANGE", inst); }

        public bool is_change_request() { return IsADBEntity("change_request"); }
        public bool _is_change_request { get { return is_change_request(); } }
        public change_request get_change_request() { return new change_request (getEntityInstance("CHANGE_REQUEST")); }
        public change_request _change_request { get { return get_change_request(); } }
        public void put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }

        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_start_request() { return IsADBEntity("start_request"); }
        public bool _is_start_request { get { return is_start_request(); } }
        public start_request get_start_request() { return new start_request (getEntityInstance("START_REQUEST")); }
        public start_request _start_request { get { return get_start_request(); } }
        public void put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }

        public bool is_start_work() { return IsADBEntity("start_work"); }
        public bool _is_start_work { get { return is_start_work(); } }
        public start_work get_start_work() { return new start_work (getEntityInstance("START_WORK")); }
        public start_work _start_work { get { return get_start_work(); } }
        public void put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
        };


    public class cc_person_organization_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public cc_person_organization_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public cc_person_organization_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public cc_person_organization_item_get() : base(null) { }

        public bool is_change() { return IsADBEntity("change"); }
        public bool _is_change { get { return is_change(); } }
        public change get_change() { return new change (getEntityInstance("CHANGE")); }
        public change _change { get { return get_change(); } }
        public bool is_change_request() { return IsADBEntity("change_request"); }
        public bool _is_change_request { get { return is_change_request(); } }
        public change_request get_change_request() { return new change_request (getEntityInstance("CHANGE_REQUEST")); }
        public change_request _change_request { get { return get_change_request(); } }
        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_start_request() { return IsADBEntity("start_request"); }
        public bool _is_start_request { get { return is_start_request(); } }
        public start_request get_start_request() { return new start_request (getEntityInstance("START_REQUEST")); }
        public start_request _start_request { get { return get_start_request(); } }
        public bool is_start_work() { return IsADBEntity("start_work"); }
        public bool _is_start_work { get { return is_start_work(); } }
        public start_work get_start_work() { return new start_work (getEntityInstance("START_WORK")); }
        public start_work _start_work { get { return get_start_work(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class cc_person_organization_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public cc_person_organization_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public cc_person_organization_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public cc_person_organization_item_put() : base(null) { }

        public void put_change(change inst) { putEntityInstance("CHANGE", inst); }
        public void put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }
        public void put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
        };


    public class cc_specified_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public cc_specified_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public cc_specified_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public cc_specified_item() : base(null) { }


        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        };


    public class cc_specified_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public cc_specified_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public cc_specified_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public cc_specified_item_get() : base(null) { }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class cc_specified_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public cc_specified_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public cc_specified_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public cc_specified_item_put() : base(null) { }

        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        };


    public class certified_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public certified_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public certified_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public certified_item() : base(null) { }


        public bool is_supplied_part_relationship() { return IsADBEntity("supplied_part_relationship"); }
        public bool _is_supplied_part_relationship { get { return is_supplied_part_relationship(); } }
        public supplied_part_relationship get_supplied_part_relationship() { return new supplied_part_relationship (getEntityInstance("SUPPLIED_PART_RELATIONSHIP")); }
        public supplied_part_relationship _supplied_part_relationship { get { return get_supplied_part_relationship(); } }
        public void put_supplied_part_relationship(supplied_part_relationship inst) { putEntityInstance("SUPPLIED_PART_RELATIONSHIP", inst); }
        };


    public class certified_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public certified_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public certified_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public certified_item_get() : base(null) { }

        public bool is_supplied_part_relationship() { return IsADBEntity("supplied_part_relationship"); }
        public bool _is_supplied_part_relationship { get { return is_supplied_part_relationship(); } }
        public supplied_part_relationship get_supplied_part_relationship() { return new supplied_part_relationship (getEntityInstance("SUPPLIED_PART_RELATIONSHIP")); }
        public supplied_part_relationship _supplied_part_relationship { get { return get_supplied_part_relationship(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class certified_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public certified_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public certified_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public certified_item_put() : base(null) { }

        public void put_supplied_part_relationship(supplied_part_relationship inst) { putEntityInstance("SUPPLIED_PART_RELATIONSHIP", inst); }
        };


    public class change_request_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public change_request_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public change_request_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public change_request_item() : base(null) { }


        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class change_request_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public change_request_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public change_request_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public change_request_item_get() : base(null) { }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class change_request_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public change_request_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public change_request_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public change_request_item_put() : base(null) { }

        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class character_spacing_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public character_spacing_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public character_spacing_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public character_spacing_select() : base(null) { }


        public bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        //public bool _is_length_measure { get { return is_length_measure(); } }
        public double? get_length_measure() { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _length_measure { get { return get_length_measure(); } }
        public void put_length_measure (double value) { put_double("LENGTH_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        //public bool _is_ratio_measure { get { return is_ratio_measure(); } }
        public double? get_ratio_measure() { return get_double("RATIO_MEASURE", ifcengine.sdaiREAL); }
        public double? _ratio_measure { get { return get_ratio_measure(); } }
        public void put_ratio_measure (double value) { put_double("RATIO_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        public bool _is_measure_with_unit { get { return is_measure_with_unit(); } }
        public measure_with_unit get_measure_with_unit() { return new measure_with_unit (getEntityInstance("MEASURE_WITH_UNIT")); }
        public measure_with_unit _measure_with_unit { get { return get_measure_with_unit(); } }
        public void put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }

        public bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        public bool _isdescriptive_measure { get { return is_descriptive_measure(); } }
        public TextValue get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); }
        public TextValue _descriptive_measure { get { return get_descriptive_measure(); } }
        public void put_descriptive_measure(TextValue value) { putTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING, value); }
        };


    public class character_spacing_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public character_spacing_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public character_spacing_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public character_spacing_select_get() : base(null) { }

        public bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        //public bool _is_length_measure { get { return is_length_measure(); } }
        public double? get_length_measure() { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _length_measure { get { return get_length_measure(); } }
        public bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        //public bool _is_ratio_measure { get { return is_ratio_measure(); } }
        public double? get_ratio_measure() { return get_double("RATIO_MEASURE", ifcengine.sdaiREAL); }
        public double? _ratio_measure { get { return get_ratio_measure(); } }
        public bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        public bool _is_measure_with_unit { get { return is_measure_with_unit(); } }
        public measure_with_unit get_measure_with_unit() { return new measure_with_unit (getEntityInstance("MEASURE_WITH_UNIT")); }
        public measure_with_unit _measure_with_unit { get { return get_measure_with_unit(); } }
        public bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        public bool _isdescriptive_measure { get { return is_descriptive_measure(); } }
        public TextValue get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); }
        public TextValue _descriptive_measure { get { return get_descriptive_measure(); } }

        public double? as_double() { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; }
        public SdaiInstance as_instance() { return getEntityInstance(null); }
        public TextValue as_text() { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; }
        };


    public class character_spacing_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public character_spacing_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public character_spacing_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public character_spacing_select_put() : base(null) { }

        public void put_length_measure (double value) { put_double("LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_ratio_measure (double value) { put_double("RATIO_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
        public void put_descriptive_measure(TextValue value) { putTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING, value); }
        };


    public class character_style_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public character_style_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public character_style_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public character_style_select() : base(null) { }


        public bool is_character_glyph_style_stroke() { return IsADBEntity("character_glyph_style_stroke"); }
        public bool _is_character_glyph_style_stroke { get { return is_character_glyph_style_stroke(); } }
        public character_glyph_style_stroke get_character_glyph_style_stroke() { return new character_glyph_style_stroke (getEntityInstance("CHARACTER_GLYPH_STYLE_STROKE")); }
        public character_glyph_style_stroke _character_glyph_style_stroke { get { return get_character_glyph_style_stroke(); } }
        public void put_character_glyph_style_stroke(character_glyph_style_stroke inst) { putEntityInstance("CHARACTER_GLYPH_STYLE_STROKE", inst); }

        public bool is_character_glyph_style_outline() { return IsADBEntity("character_glyph_style_outline"); }
        public bool _is_character_glyph_style_outline { get { return is_character_glyph_style_outline(); } }
        public character_glyph_style_outline get_character_glyph_style_outline() { return new character_glyph_style_outline (getEntityInstance("CHARACTER_GLYPH_STYLE_OUTLINE")); }
        public character_glyph_style_outline _character_glyph_style_outline { get { return get_character_glyph_style_outline(); } }
        public void put_character_glyph_style_outline(character_glyph_style_outline inst) { putEntityInstance("CHARACTER_GLYPH_STYLE_OUTLINE", inst); }

        public bool is_text_style_for_defined_font() { return IsADBEntity("text_style_for_defined_font"); }
        public bool _is_text_style_for_defined_font { get { return is_text_style_for_defined_font(); } }
        public text_style_for_defined_font get_text_style_for_defined_font() { return new text_style_for_defined_font (getEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT")); }
        public text_style_for_defined_font _text_style_for_defined_font { get { return get_text_style_for_defined_font(); } }
        public void put_text_style_for_defined_font(text_style_for_defined_font inst) { putEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT", inst); }
        };


    public class character_style_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public character_style_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public character_style_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public character_style_select_get() : base(null) { }

        public bool is_character_glyph_style_stroke() { return IsADBEntity("character_glyph_style_stroke"); }
        public bool _is_character_glyph_style_stroke { get { return is_character_glyph_style_stroke(); } }
        public character_glyph_style_stroke get_character_glyph_style_stroke() { return new character_glyph_style_stroke (getEntityInstance("CHARACTER_GLYPH_STYLE_STROKE")); }
        public character_glyph_style_stroke _character_glyph_style_stroke { get { return get_character_glyph_style_stroke(); } }
        public bool is_character_glyph_style_outline() { return IsADBEntity("character_glyph_style_outline"); }
        public bool _is_character_glyph_style_outline { get { return is_character_glyph_style_outline(); } }
        public character_glyph_style_outline get_character_glyph_style_outline() { return new character_glyph_style_outline (getEntityInstance("CHARACTER_GLYPH_STYLE_OUTLINE")); }
        public character_glyph_style_outline _character_glyph_style_outline { get { return get_character_glyph_style_outline(); } }
        public bool is_text_style_for_defined_font() { return IsADBEntity("text_style_for_defined_font"); }
        public bool _is_text_style_for_defined_font { get { return is_text_style_for_defined_font(); } }
        public text_style_for_defined_font get_text_style_for_defined_font() { return new text_style_for_defined_font (getEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT")); }
        public text_style_for_defined_font _text_style_for_defined_font { get { return get_text_style_for_defined_font(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class character_style_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public character_style_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public character_style_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public character_style_select_put() : base(null) { }

        public void put_character_glyph_style_stroke(character_glyph_style_stroke inst) { putEntityInstance("CHARACTER_GLYPH_STYLE_STROKE", inst); }
        public void put_character_glyph_style_outline(character_glyph_style_outline inst) { putEntityInstance("CHARACTER_GLYPH_STYLE_OUTLINE", inst); }
        public void put_text_style_for_defined_font(text_style_for_defined_font inst) { putEntityInstance("TEXT_STYLE_FOR_DEFINED_FONT", inst); }
        };


    public class characterized_action_definition : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_action_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_action_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_action_definition() : base(null) { }


        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public void put_action(action inst) { putEntityInstance("ACTION", inst); }

        public bool is_action_method() { return IsADBEntity("action_method"); }
        public bool _is_action_method { get { return is_action_method(); } }
        public action_method get_action_method() { return new action_method (getEntityInstance("ACTION_METHOD")); }
        public action_method _action_method { get { return get_action_method(); } }
        public void put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }

        public bool is_action_method_relationship() { return IsADBEntity("action_method_relationship"); }
        public bool _is_action_method_relationship { get { return is_action_method_relationship(); } }
        public action_method_relationship get_action_method_relationship() { return new action_method_relationship (getEntityInstance("ACTION_METHOD_RELATIONSHIP")); }
        public action_method_relationship _action_method_relationship { get { return get_action_method_relationship(); } }
        public void put_action_method_relationship(action_method_relationship inst) { putEntityInstance("ACTION_METHOD_RELATIONSHIP", inst); }

        public bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        public bool _is_action_relationship { get { return is_action_relationship(); } }
        public action_relationship get_action_relationship() { return new action_relationship (getEntityInstance("ACTION_RELATIONSHIP")); }
        public action_relationship _action_relationship { get { return get_action_relationship(); } }
        public void put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
        };


    public class characterized_action_definition_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_action_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_action_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_action_definition_get() : base(null) { }

        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public bool is_action_method() { return IsADBEntity("action_method"); }
        public bool _is_action_method { get { return is_action_method(); } }
        public action_method get_action_method() { return new action_method (getEntityInstance("ACTION_METHOD")); }
        public action_method _action_method { get { return get_action_method(); } }
        public bool is_action_method_relationship() { return IsADBEntity("action_method_relationship"); }
        public bool _is_action_method_relationship { get { return is_action_method_relationship(); } }
        public action_method_relationship get_action_method_relationship() { return new action_method_relationship (getEntityInstance("ACTION_METHOD_RELATIONSHIP")); }
        public action_method_relationship _action_method_relationship { get { return get_action_method_relationship(); } }
        public bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        public bool _is_action_relationship { get { return is_action_relationship(); } }
        public action_relationship get_action_relationship() { return new action_relationship (getEntityInstance("ACTION_RELATIONSHIP")); }
        public action_relationship _action_relationship { get { return get_action_relationship(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class characterized_action_definition_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_action_definition_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_action_definition_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_action_definition_put() : base(null) { }

        public void put_action(action inst) { putEntityInstance("ACTION", inst); }
        public void put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
        public void put_action_method_relationship(action_method_relationship inst) { putEntityInstance("ACTION_METHOD_RELATIONSHIP", inst); }
        public void put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
        };


    public class characterized_product_definition : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_product_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_product_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_product_definition() : base(null) { }


        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        };


    public class characterized_product_definition_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_product_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_product_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_product_definition_get() : base(null) { }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class characterized_product_definition_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_product_definition_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_product_definition_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_product_definition_put() : base(null) { }

        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        };


    public class shape_definition : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shape_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shape_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shape_definition() : base(null) { }


        public bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        public bool _is_product_definition_shape { get { return is_product_definition_shape(); } }
        public product_definition_shape get_product_definition_shape() { return new product_definition_shape (getEntityInstance("PRODUCT_DEFINITION_SHAPE")); }
        public product_definition_shape _product_definition_shape { get { return get_product_definition_shape(); } }
        public void put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }

        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }

        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        };


    public class shape_definition_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shape_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shape_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shape_definition_get() : base(null) { }

        public bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        public bool _is_product_definition_shape { get { return is_product_definition_shape(); } }
        public product_definition_shape get_product_definition_shape() { return new product_definition_shape (getEntityInstance("PRODUCT_DEFINITION_SHAPE")); }
        public product_definition_shape _product_definition_shape { get { return get_product_definition_shape(); } }
        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class shape_definition_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shape_definition_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shape_definition_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shape_definition_put() : base(null) { }

        public void put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        };


    public class characterized_definition : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_definition() : base(null) { }


        public bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        public bool _is_characterized_object { get { return is_characterized_object(); } }
        public characterized_object get_characterized_object() { return new characterized_object (getEntityInstance("CHARACTERIZED_OBJECT")); }
        public characterized_object _characterized_object { get { return get_characterized_object(); } }
        public void put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }

        public characterized_product_definition _characterized_product_definition() { return new characterized_product_definition(this); }
        public characterized_product_definition __characterized_product_definition { get { return _characterized_product_definition(); } }

        public shape_definition _shape_definition() { return new shape_definition(this); }
        public shape_definition __shape_definition { get { return _shape_definition(); } }
        };


    public class characterized_definition_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_definition_get() : base(null) { }

        public bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        public bool _is_characterized_object { get { return is_characterized_object(); } }
        public characterized_object get_characterized_object() { return new characterized_object (getEntityInstance("CHARACTERIZED_OBJECT")); }
        public characterized_object _characterized_object { get { return get_characterized_object(); } }
        public characterized_product_definition_get get_characterized_product_definition() { return new characterized_product_definition_get(this); }
        public characterized_product_definition_get __characterized_product_definition { get { return get_characterized_product_definition(); } }
        public shape_definition_get get_shape_definition() { return new shape_definition_get(this); }
        public shape_definition_get __shape_definition { get { return get_shape_definition(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class characterized_definition_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_definition_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_definition_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_definition_put() : base(null) { }

        public void put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
        public characterized_product_definition_put put_characterized_product_definition() { return new characterized_product_definition_put(this); }
        public characterized_product_definition_put __characterized_product_definition { get { return put_characterized_product_definition(); } }
        public shape_definition_put put_shape_definition() { return new shape_definition_put(this); }
        public shape_definition_put __shape_definition { get { return put_shape_definition(); } }
        };


    public class characterized_material_property : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_material_property(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_material_property(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_material_property() : base(null) { }


        public bool is_material_property_representation() { return IsADBEntity("material_property_representation"); }
        public bool _is_material_property_representation { get { return is_material_property_representation(); } }
        public material_property_representation get_material_property_representation() { return new material_property_representation (getEntityInstance("MATERIAL_PROPERTY_REPRESENTATION")); }
        public material_property_representation _material_property_representation { get { return get_material_property_representation(); } }
        public void put_material_property_representation(material_property_representation inst) { putEntityInstance("MATERIAL_PROPERTY_REPRESENTATION", inst); }

        public bool is_product_material_composition_relationship() { return IsADBEntity("product_material_composition_relationship"); }
        public bool _is_product_material_composition_relationship { get { return is_product_material_composition_relationship(); } }
        public product_material_composition_relationship get_product_material_composition_relationship() { return new product_material_composition_relationship (getEntityInstance("PRODUCT_MATERIAL_COMPOSITION_RELATIONSHIP")); }
        public product_material_composition_relationship _product_material_composition_relationship { get { return get_product_material_composition_relationship(); } }
        public void put_product_material_composition_relationship(product_material_composition_relationship inst) { putEntityInstance("PRODUCT_MATERIAL_COMPOSITION_RELATIONSHIP", inst); }
        };


    public class characterized_material_property_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_material_property_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_material_property_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_material_property_get() : base(null) { }

        public bool is_material_property_representation() { return IsADBEntity("material_property_representation"); }
        public bool _is_material_property_representation { get { return is_material_property_representation(); } }
        public material_property_representation get_material_property_representation() { return new material_property_representation (getEntityInstance("MATERIAL_PROPERTY_REPRESENTATION")); }
        public material_property_representation _material_property_representation { get { return get_material_property_representation(); } }
        public bool is_product_material_composition_relationship() { return IsADBEntity("product_material_composition_relationship"); }
        public bool _is_product_material_composition_relationship { get { return is_product_material_composition_relationship(); } }
        public product_material_composition_relationship get_product_material_composition_relationship() { return new product_material_composition_relationship (getEntityInstance("PRODUCT_MATERIAL_COMPOSITION_RELATIONSHIP")); }
        public product_material_composition_relationship _product_material_composition_relationship { get { return get_product_material_composition_relationship(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class characterized_material_property_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_material_property_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_material_property_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_material_property_put() : base(null) { }

        public void put_material_property_representation(material_property_representation inst) { putEntityInstance("MATERIAL_PROPERTY_REPRESENTATION", inst); }
        public void put_product_material_composition_relationship(product_material_composition_relationship inst) { putEntityInstance("PRODUCT_MATERIAL_COMPOSITION_RELATIONSHIP", inst); }
        };


    public class characterized_product_composition_value : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_product_composition_value(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_product_composition_value(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_product_composition_value() : base(null) { }


        public bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        public bool _is_measure_with_unit { get { return is_measure_with_unit(); } }
        public measure_with_unit get_measure_with_unit() { return new measure_with_unit (getEntityInstance("MEASURE_WITH_UNIT")); }
        public measure_with_unit _measure_with_unit { get { return get_measure_with_unit(); } }
        public void put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
        };


    public class characterized_product_composition_value_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_product_composition_value_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_product_composition_value_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_product_composition_value_get() : base(null) { }

        public bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        public bool _is_measure_with_unit { get { return is_measure_with_unit(); } }
        public measure_with_unit get_measure_with_unit() { return new measure_with_unit (getEntityInstance("MEASURE_WITH_UNIT")); }
        public measure_with_unit _measure_with_unit { get { return get_measure_with_unit(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class characterized_product_composition_value_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public characterized_product_composition_value_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public characterized_product_composition_value_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public characterized_product_composition_value_put() : base(null) { }

        public void put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
        };


    public class class_usage_effectivity_context_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public class_usage_effectivity_context_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public class_usage_effectivity_context_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public class_usage_effectivity_context_item() : base(null) { }


        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        };


    public class class_usage_effectivity_context_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public class_usage_effectivity_context_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public class_usage_effectivity_context_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public class_usage_effectivity_context_item_get() : base(null) { }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class class_usage_effectivity_context_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public class_usage_effectivity_context_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public class_usage_effectivity_context_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public class_usage_effectivity_context_item_put() : base(null) { }

        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        };


    public class compound_item_definition : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public compound_item_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public compound_item_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public compound_item_definition() : base(null) { }


        public bool is_list_representation_item() { return IsADBType("LIST_REPRESENTATION_ITEM"); }
        public bool _is_list_representation_item { get { return is_list_representation_item(); } }
        public list_representation_item get_list_representation_item() { SdaiAggr aggr = getAggrValue("LIST_REPRESENTATION_ITEM"); return (new list_representation_itemSerializer()).FromSdaiAggr(m_instance, aggr); }
        public list_representation_item _list_representation_item { get { return get_list_representation_item(); } }
        public void put_list_representation_item(IEnumerable<representation_item> lst) { SdaiAggr aggr = (new list_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_REPRESENTATION_ITEM", aggr); }
        //public void put_list_representation_item(IEnumerable lst) { SdaiAggr aggr = (new list_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_REPRESENTATION_ITEM", aggr); }

        public bool is_set_representation_item() { return IsADBType("SET_REPRESENTATION_ITEM"); }
        public bool _is_set_representation_item { get { return is_set_representation_item(); } }
        public set_representation_item get_set_representation_item() { SdaiAggr aggr = getAggrValue("SET_REPRESENTATION_ITEM"); return (new set_representation_itemSerializer()).FromSdaiAggr(m_instance, aggr); }
        public set_representation_item _set_representation_item { get { return get_set_representation_item(); } }
        public void put_set_representation_item(IEnumerable<representation_item> lst) { SdaiAggr aggr = (new set_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_REPRESENTATION_ITEM", aggr); }
        //public void put_set_representation_item(IEnumerable lst) { SdaiAggr aggr = (new set_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_REPRESENTATION_ITEM", aggr); }
        };


    public class compound_item_definition_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public compound_item_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public compound_item_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public compound_item_definition_get() : base(null) { }

        public bool is_list_representation_item() { return IsADBType("LIST_REPRESENTATION_ITEM"); }
        public bool _is_list_representation_item { get { return is_list_representation_item(); } }
        public list_representation_item get_list_representation_item() { SdaiAggr aggr = getAggrValue("LIST_REPRESENTATION_ITEM"); return (new list_representation_itemSerializer()).FromSdaiAggr(m_instance, aggr); }
        public list_representation_item _list_representation_item { get { return get_list_representation_item(); } }
        public bool is_set_representation_item() { return IsADBType("SET_REPRESENTATION_ITEM"); }
        public bool _is_set_representation_item { get { return is_set_representation_item(); } }
        public set_representation_item get_set_representation_item() { SdaiAggr aggr = getAggrValue("SET_REPRESENTATION_ITEM"); return (new set_representation_itemSerializer()).FromSdaiAggr(m_instance, aggr); }
        public set_representation_item _set_representation_item { get { return get_set_representation_item(); } }
        };


    public class compound_item_definition_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public compound_item_definition_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public compound_item_definition_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public compound_item_definition_put() : base(null) { }

        public void put_list_representation_item(IEnumerable<representation_item> lst) { SdaiAggr aggr = (new list_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_REPRESENTATION_ITEM", aggr); }
        //public void put_list_representation_item(IEnumerable lst) { SdaiAggr aggr = (new list_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_REPRESENTATION_ITEM", aggr); }
        public void put_set_representation_item(IEnumerable<representation_item> lst) { SdaiAggr aggr = (new set_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_REPRESENTATION_ITEM", aggr); }
        //public void put_set_representation_item(IEnumerable lst) { SdaiAggr aggr = (new set_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_REPRESENTATION_ITEM", aggr); }
        };


    public class configuration_design_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configuration_design_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configuration_design_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configuration_design_item() : base(null) { }


        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class configuration_design_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configuration_design_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configuration_design_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configuration_design_item_get() : base(null) { }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class configuration_design_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configuration_design_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configuration_design_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configuration_design_item_put() : base(null) { }

        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class configured_effectivity_context_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configured_effectivity_context_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configured_effectivity_context_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configured_effectivity_context_item() : base(null) { }


        public bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        public bool _is_product_concept_feature_association { get { return is_product_concept_feature_association(); } }
        public product_concept_feature_association get_product_concept_feature_association() { return new product_concept_feature_association (getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
        public product_concept_feature_association _product_concept_feature_association { get { return get_product_concept_feature_association(); } }
        public void put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
        };


    public class configured_effectivity_context_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configured_effectivity_context_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configured_effectivity_context_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configured_effectivity_context_item_get() : base(null) { }

        public bool is_product_concept_feature_association() { return IsADBEntity("product_concept_feature_association"); }
        public bool _is_product_concept_feature_association { get { return is_product_concept_feature_association(); } }
        public product_concept_feature_association get_product_concept_feature_association() { return new product_concept_feature_association (getEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION")); }
        public product_concept_feature_association _product_concept_feature_association { get { return get_product_concept_feature_association(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class configured_effectivity_context_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configured_effectivity_context_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configured_effectivity_context_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configured_effectivity_context_item_put() : base(null) { }

        public void put_product_concept_feature_association(product_concept_feature_association inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_ASSOCIATION", inst); }
        };


    public class configured_effectivity_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configured_effectivity_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configured_effectivity_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configured_effectivity_item() : base(null) { }


        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        };


    public class configured_effectivity_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configured_effectivity_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configured_effectivity_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configured_effectivity_item_get() : base(null) { }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class configured_effectivity_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public configured_effectivity_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public configured_effectivity_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public configured_effectivity_item_put() : base(null) { }

        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        };


    public class constructive_geometry_representation_or_shape_represenation : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public constructive_geometry_representation_or_shape_represenation(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public constructive_geometry_representation_or_shape_represenation(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public constructive_geometry_representation_or_shape_represenation() : base(null) { }


        public bool is_constructive_geometry_representation() { return IsADBEntity("constructive_geometry_representation"); }
        public bool _is_constructive_geometry_representation { get { return is_constructive_geometry_representation(); } }
        public constructive_geometry_representation get_constructive_geometry_representation() { return new constructive_geometry_representation (getEntityInstance("CONSTRUCTIVE_GEOMETRY_REPRESENTATION")); }
        public constructive_geometry_representation _constructive_geometry_representation { get { return get_constructive_geometry_representation(); } }
        public void put_constructive_geometry_representation(constructive_geometry_representation inst) { putEntityInstance("CONSTRUCTIVE_GEOMETRY_REPRESENTATION", inst); }

        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
        };


    public class constructive_geometry_representation_or_shape_represenation_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public constructive_geometry_representation_or_shape_represenation_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public constructive_geometry_representation_or_shape_represenation_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public constructive_geometry_representation_or_shape_represenation_get() : base(null) { }

        public bool is_constructive_geometry_representation() { return IsADBEntity("constructive_geometry_representation"); }
        public bool _is_constructive_geometry_representation { get { return is_constructive_geometry_representation(); } }
        public constructive_geometry_representation get_constructive_geometry_representation() { return new constructive_geometry_representation (getEntityInstance("CONSTRUCTIVE_GEOMETRY_REPRESENTATION")); }
        public constructive_geometry_representation _constructive_geometry_representation { get { return get_constructive_geometry_representation(); } }
        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class constructive_geometry_representation_or_shape_represenation_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public constructive_geometry_representation_or_shape_represenation_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public constructive_geometry_representation_or_shape_represenation_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public constructive_geometry_representation_or_shape_represenation_put() : base(null) { }

        public void put_constructive_geometry_representation(constructive_geometry_representation inst) { putEntityInstance("CONSTRUCTIVE_GEOMETRY_REPRESENTATION", inst); }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
        };


    public class contract_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public contract_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public contract_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public contract_item() : base(null) { }


        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }

        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }

        public bool is_directed_action() { return IsADBEntity("directed_action"); }
        public bool _is_directed_action { get { return is_directed_action(); } }
        public directed_action get_directed_action() { return new directed_action (getEntityInstance("DIRECTED_ACTION")); }
        public directed_action _directed_action { get { return get_directed_action(); } }
        public void put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }

        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_organization() { return IsADBEntity("organization"); }
        public bool _is_organization { get { return is_organization(); } }
        public organization get_organization() { return new organization (getEntityInstance("ORGANIZATION")); }
        public organization _organization { get { return get_organization(); } }
        public void put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }

        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class contract_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public contract_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public contract_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public contract_item_get() : base(null) { }

        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public bool is_directed_action() { return IsADBEntity("directed_action"); }
        public bool _is_directed_action { get { return is_directed_action(); } }
        public directed_action get_directed_action() { return new directed_action (getEntityInstance("DIRECTED_ACTION")); }
        public directed_action _directed_action { get { return get_directed_action(); } }
        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_organization() { return IsADBEntity("organization"); }
        public bool _is_organization { get { return is_organization(); } }
        public organization get_organization() { return new organization (getEntityInstance("ORGANIZATION")); }
        public organization _organization { get { return get_organization(); } }
        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class contract_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public contract_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public contract_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public contract_item_put() : base(null) { }

        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
        public void put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class contracted_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public contracted_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public contracted_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public contracted_item() : base(null) { }


        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class contracted_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public contracted_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public contracted_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public contracted_item_get() : base(null) { }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class contracted_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public contracted_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public contracted_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public contracted_item_put() : base(null) { }

        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class csg_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_select() : base(null) { }


        public bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        public bool _is_boolean_result { get { return is_boolean_result(); } }
        public boolean_result get_boolean_result() { return new boolean_result (getEntityInstance("BOOLEAN_RESULT")); }
        public boolean_result _boolean_result { get { return get_boolean_result(); } }
        public void put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }

        public csg_primitive _csg_primitive() { return new csg_primitive(this); }
        public csg_primitive __csg_primitive { get { return _csg_primitive(); } }
        };


    public class csg_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_select_get() : base(null) { }

        public bool is_boolean_result() { return IsADBEntity("boolean_result"); }
        public bool _is_boolean_result { get { return is_boolean_result(); } }
        public boolean_result get_boolean_result() { return new boolean_result (getEntityInstance("BOOLEAN_RESULT")); }
        public boolean_result _boolean_result { get { return get_boolean_result(); } }
        public csg_primitive_get get_csg_primitive() { return new csg_primitive_get(this); }
        public csg_primitive_get __csg_primitive { get { return get_csg_primitive(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class csg_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public csg_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public csg_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public csg_select_put() : base(null) { }

        public void put_boolean_result(boolean_result inst) { putEntityInstance("BOOLEAN_RESULT", inst); }
        public csg_primitive_put put_csg_primitive() { return new csg_primitive_put(this); }
        public csg_primitive_put __csg_primitive { get { return put_csg_primitive(); } }
        };


    public class curve_style_font_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_style_font_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_style_font_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_style_font_select() : base(null) { }


        public bool is_curve_style_font() { return IsADBEntity("curve_style_font"); }
        public bool _is_curve_style_font { get { return is_curve_style_font(); } }
        public curve_style_font get_curve_style_font() { return new curve_style_font (getEntityInstance("CURVE_STYLE_FONT")); }
        public curve_style_font _curve_style_font { get { return get_curve_style_font(); } }
        public void put_curve_style_font(curve_style_font inst) { putEntityInstance("CURVE_STYLE_FONT", inst); }

        public bool is_pre_defined_curve_font() { return IsADBEntity("pre_defined_curve_font"); }
        public bool _is_pre_defined_curve_font { get { return is_pre_defined_curve_font(); } }
        public pre_defined_curve_font get_pre_defined_curve_font() { return new pre_defined_curve_font (getEntityInstance("PRE_DEFINED_CURVE_FONT")); }
        public pre_defined_curve_font _pre_defined_curve_font { get { return get_pre_defined_curve_font(); } }
        public void put_pre_defined_curve_font(pre_defined_curve_font inst) { putEntityInstance("PRE_DEFINED_CURVE_FONT", inst); }

        public bool is_externally_defined_curve_font() { return IsADBEntity("externally_defined_curve_font"); }
        public bool _is_externally_defined_curve_font { get { return is_externally_defined_curve_font(); } }
        public externally_defined_curve_font get_externally_defined_curve_font() { return new externally_defined_curve_font (getEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT")); }
        public externally_defined_curve_font _externally_defined_curve_font { get { return get_externally_defined_curve_font(); } }
        public void put_externally_defined_curve_font(externally_defined_curve_font inst) { putEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT", inst); }
        };


    public class curve_style_font_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_style_font_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_style_font_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_style_font_select_get() : base(null) { }

        public bool is_curve_style_font() { return IsADBEntity("curve_style_font"); }
        public bool _is_curve_style_font { get { return is_curve_style_font(); } }
        public curve_style_font get_curve_style_font() { return new curve_style_font (getEntityInstance("CURVE_STYLE_FONT")); }
        public curve_style_font _curve_style_font { get { return get_curve_style_font(); } }
        public bool is_pre_defined_curve_font() { return IsADBEntity("pre_defined_curve_font"); }
        public bool _is_pre_defined_curve_font { get { return is_pre_defined_curve_font(); } }
        public pre_defined_curve_font get_pre_defined_curve_font() { return new pre_defined_curve_font (getEntityInstance("PRE_DEFINED_CURVE_FONT")); }
        public pre_defined_curve_font _pre_defined_curve_font { get { return get_pre_defined_curve_font(); } }
        public bool is_externally_defined_curve_font() { return IsADBEntity("externally_defined_curve_font"); }
        public bool _is_externally_defined_curve_font { get { return is_externally_defined_curve_font(); } }
        public externally_defined_curve_font get_externally_defined_curve_font() { return new externally_defined_curve_font (getEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT")); }
        public externally_defined_curve_font _externally_defined_curve_font { get { return get_externally_defined_curve_font(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class curve_style_font_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_style_font_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_style_font_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_style_font_select_put() : base(null) { }

        public void put_curve_style_font(curve_style_font inst) { putEntityInstance("CURVE_STYLE_FONT", inst); }
        public void put_pre_defined_curve_font(pre_defined_curve_font inst) { putEntityInstance("PRE_DEFINED_CURVE_FONT", inst); }
        public void put_externally_defined_curve_font(externally_defined_curve_font inst) { putEntityInstance("EXTERNALLY_DEFINED_CURVE_FONT", inst); }
        };


    public class curve_font_or_scaled_curve_font_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_font_or_scaled_curve_font_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_font_or_scaled_curve_font_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_font_or_scaled_curve_font_select() : base(null) { }


        public curve_style_font_select _curve_style_font_select() { return new curve_style_font_select(this); }
        public curve_style_font_select __curve_style_font_select { get { return _curve_style_font_select(); } }

        public bool is_curve_style_font_and_scaling() { return IsADBEntity("curve_style_font_and_scaling"); }
        public bool _is_curve_style_font_and_scaling { get { return is_curve_style_font_and_scaling(); } }
        public curve_style_font_and_scaling get_curve_style_font_and_scaling() { return new curve_style_font_and_scaling (getEntityInstance("CURVE_STYLE_FONT_AND_SCALING")); }
        public curve_style_font_and_scaling _curve_style_font_and_scaling { get { return get_curve_style_font_and_scaling(); } }
        public void put_curve_style_font_and_scaling(curve_style_font_and_scaling inst) { putEntityInstance("CURVE_STYLE_FONT_AND_SCALING", inst); }
        };


    public class curve_font_or_scaled_curve_font_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_font_or_scaled_curve_font_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_font_or_scaled_curve_font_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_font_or_scaled_curve_font_select_get() : base(null) { }

        public curve_style_font_select_get get_curve_style_font_select() { return new curve_style_font_select_get(this); }
        public curve_style_font_select_get __curve_style_font_select { get { return get_curve_style_font_select(); } }
        public bool is_curve_style_font_and_scaling() { return IsADBEntity("curve_style_font_and_scaling"); }
        public bool _is_curve_style_font_and_scaling { get { return is_curve_style_font_and_scaling(); } }
        public curve_style_font_and_scaling get_curve_style_font_and_scaling() { return new curve_style_font_and_scaling (getEntityInstance("CURVE_STYLE_FONT_AND_SCALING")); }
        public curve_style_font_and_scaling _curve_style_font_and_scaling { get { return get_curve_style_font_and_scaling(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class curve_font_or_scaled_curve_font_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_font_or_scaled_curve_font_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_font_or_scaled_curve_font_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_font_or_scaled_curve_font_select_put() : base(null) { }

        public curve_style_font_select_put put_curve_style_font_select() { return new curve_style_font_select_put(this); }
        public curve_style_font_select_put __curve_style_font_select { get { return put_curve_style_font_select(); } }
        public void put_curve_style_font_and_scaling(curve_style_font_and_scaling inst) { putEntityInstance("CURVE_STYLE_FONT_AND_SCALING", inst); }
        };


    public class curve_on_surface : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_on_surface(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_on_surface(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_on_surface() : base(null) { }


        public bool is_pcurve() { return IsADBEntity("pcurve"); }
        public bool _is_pcurve { get { return is_pcurve(); } }
        public pcurve get_pcurve() { return new pcurve (getEntityInstance("PCURVE")); }
        public pcurve _pcurve { get { return get_pcurve(); } }
        public void put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }

        public bool is_surface_curve() { return IsADBEntity("surface_curve"); }
        public bool _is_surface_curve { get { return is_surface_curve(); } }
        public surface_curve get_surface_curve() { return new surface_curve (getEntityInstance("SURFACE_CURVE")); }
        public surface_curve _surface_curve { get { return get_surface_curve(); } }
        public void put_surface_curve(surface_curve inst) { putEntityInstance("SURFACE_CURVE", inst); }

        public bool is_composite_curve_on_surface() { return IsADBEntity("composite_curve_on_surface"); }
        public bool _is_composite_curve_on_surface { get { return is_composite_curve_on_surface(); } }
        public composite_curve_on_surface get_composite_curve_on_surface() { return new composite_curve_on_surface (getEntityInstance("COMPOSITE_CURVE_ON_SURFACE")); }
        public composite_curve_on_surface _composite_curve_on_surface { get { return get_composite_curve_on_surface(); } }
        public void put_composite_curve_on_surface(composite_curve_on_surface inst) { putEntityInstance("COMPOSITE_CURVE_ON_SURFACE", inst); }
        };


    public class curve_on_surface_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_on_surface_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_on_surface_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_on_surface_get() : base(null) { }

        public bool is_pcurve() { return IsADBEntity("pcurve"); }
        public bool _is_pcurve { get { return is_pcurve(); } }
        public pcurve get_pcurve() { return new pcurve (getEntityInstance("PCURVE")); }
        public pcurve _pcurve { get { return get_pcurve(); } }
        public bool is_surface_curve() { return IsADBEntity("surface_curve"); }
        public bool _is_surface_curve { get { return is_surface_curve(); } }
        public surface_curve get_surface_curve() { return new surface_curve (getEntityInstance("SURFACE_CURVE")); }
        public surface_curve _surface_curve { get { return get_surface_curve(); } }
        public bool is_composite_curve_on_surface() { return IsADBEntity("composite_curve_on_surface"); }
        public bool _is_composite_curve_on_surface { get { return is_composite_curve_on_surface(); } }
        public composite_curve_on_surface get_composite_curve_on_surface() { return new composite_curve_on_surface (getEntityInstance("COMPOSITE_CURVE_ON_SURFACE")); }
        public composite_curve_on_surface _composite_curve_on_surface { get { return get_composite_curve_on_surface(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class curve_on_surface_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_on_surface_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_on_surface_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_on_surface_put() : base(null) { }

        public void put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }
        public void put_surface_curve(surface_curve inst) { putEntityInstance("SURFACE_CURVE", inst); }
        public void put_composite_curve_on_surface(composite_curve_on_surface inst) { putEntityInstance("COMPOSITE_CURVE_ON_SURFACE", inst); }
        };


    public class curve_or_annotation_curve_occurrence : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_or_annotation_curve_occurrence(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_or_annotation_curve_occurrence(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_or_annotation_curve_occurrence() : base(null) { }


        public bool is_curve() { return IsADBEntity("curve"); }
        public bool _is_curve { get { return is_curve(); } }
        public curve get_curve() { return new curve (getEntityInstance("CURVE")); }
        public curve _curve { get { return get_curve(); } }
        public void put_curve(curve inst) { putEntityInstance("CURVE", inst); }

        public bool is_annotation_curve_occurrence() { return IsADBEntity("annotation_curve_occurrence"); }
        public bool _is_annotation_curve_occurrence { get { return is_annotation_curve_occurrence(); } }
        public annotation_curve_occurrence get_annotation_curve_occurrence() { return new annotation_curve_occurrence (getEntityInstance("ANNOTATION_CURVE_OCCURRENCE")); }
        public annotation_curve_occurrence _annotation_curve_occurrence { get { return get_annotation_curve_occurrence(); } }
        public void put_annotation_curve_occurrence(annotation_curve_occurrence inst) { putEntityInstance("ANNOTATION_CURVE_OCCURRENCE", inst); }
        };


    public class curve_or_annotation_curve_occurrence_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_or_annotation_curve_occurrence_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_or_annotation_curve_occurrence_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_or_annotation_curve_occurrence_get() : base(null) { }

        public bool is_curve() { return IsADBEntity("curve"); }
        public bool _is_curve { get { return is_curve(); } }
        public curve get_curve() { return new curve (getEntityInstance("CURVE")); }
        public curve _curve { get { return get_curve(); } }
        public bool is_annotation_curve_occurrence() { return IsADBEntity("annotation_curve_occurrence"); }
        public bool _is_annotation_curve_occurrence { get { return is_annotation_curve_occurrence(); } }
        public annotation_curve_occurrence get_annotation_curve_occurrence() { return new annotation_curve_occurrence (getEntityInstance("ANNOTATION_CURVE_OCCURRENCE")); }
        public annotation_curve_occurrence _annotation_curve_occurrence { get { return get_annotation_curve_occurrence(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class curve_or_annotation_curve_occurrence_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_or_annotation_curve_occurrence_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_or_annotation_curve_occurrence_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_or_annotation_curve_occurrence_put() : base(null) { }

        public void put_curve(curve inst) { putEntityInstance("CURVE", inst); }
        public void put_annotation_curve_occurrence(annotation_curve_occurrence inst) { putEntityInstance("ANNOTATION_CURVE_OCCURRENCE", inst); }
        };


    public class curve_or_render : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_or_render(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_or_render(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_or_render() : base(null) { }


        public bool is_curve_style() { return IsADBEntity("curve_style"); }
        public bool _is_curve_style { get { return is_curve_style(); } }
        public curve_style get_curve_style() { return new curve_style (getEntityInstance("CURVE_STYLE")); }
        public curve_style _curve_style { get { return get_curve_style(); } }
        public void put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }

        public bool is_curve_style_rendering() { return IsADBEntity("curve_style_rendering"); }
        public bool _is_curve_style_rendering { get { return is_curve_style_rendering(); } }
        public curve_style_rendering get_curve_style_rendering() { return new curve_style_rendering (getEntityInstance("CURVE_STYLE_RENDERING")); }
        public curve_style_rendering _curve_style_rendering { get { return get_curve_style_rendering(); } }
        public void put_curve_style_rendering(curve_style_rendering inst) { putEntityInstance("CURVE_STYLE_RENDERING", inst); }
        };


    public class curve_or_render_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_or_render_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_or_render_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_or_render_get() : base(null) { }

        public bool is_curve_style() { return IsADBEntity("curve_style"); }
        public bool _is_curve_style { get { return is_curve_style(); } }
        public curve_style get_curve_style() { return new curve_style (getEntityInstance("CURVE_STYLE")); }
        public curve_style _curve_style { get { return get_curve_style(); } }
        public bool is_curve_style_rendering() { return IsADBEntity("curve_style_rendering"); }
        public bool _is_curve_style_rendering { get { return is_curve_style_rendering(); } }
        public curve_style_rendering get_curve_style_rendering() { return new curve_style_rendering (getEntityInstance("CURVE_STYLE_RENDERING")); }
        public curve_style_rendering _curve_style_rendering { get { return get_curve_style_rendering(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class curve_or_render_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public curve_or_render_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public curve_or_render_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public curve_or_render_put() : base(null) { }

        public void put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }
        public void put_curve_style_rendering(curve_style_rendering inst) { putEntityInstance("CURVE_STYLE_RENDERING", inst); }
        };


    public class date_and_time_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_and_time_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_and_time_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_and_time_item() : base(null) { }


        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public void put_action(action inst) { putEntityInstance("ACTION", inst); }

        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }

        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }

        public bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        public bool _is_applied_organization_assignment { get { return is_applied_organization_assignment(); } }
        public applied_organization_assignment get_applied_organization_assignment() { return new applied_organization_assignment (getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
        public applied_organization_assignment _applied_organization_assignment { get { return get_applied_organization_assignment(); } }
        public void put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }

        public bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        public bool _is_applied_person_and_organization_assignment { get { return is_applied_person_and_organization_assignment(); } }
        public applied_person_and_organization_assignment get_applied_person_and_organization_assignment() { return new applied_person_and_organization_assignment (getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
        public applied_person_and_organization_assignment _applied_person_and_organization_assignment { get { return get_applied_person_and_organization_assignment(); } }
        public void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }

        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }

        public bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        public bool _is_approval_person_organization { get { return is_approval_person_organization(); } }
        public approval_person_organization get_approval_person_organization() { return new approval_person_organization (getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
        public approval_person_organization _approval_person_organization { get { return get_approval_person_organization(); } }
        public void put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }

        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_directed_action() { return IsADBEntity("directed_action"); }
        public bool _is_directed_action { get { return is_directed_action(); } }
        public directed_action get_directed_action() { return new directed_action (getEntityInstance("DIRECTED_ACTION")); }
        public directed_action _directed_action { get { return get_directed_action(); } }
        public void put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }

        public bool is_document() { return IsADBEntity("document"); }
        public bool _is_document { get { return is_document(); } }
        public document get_document() { return new document (getEntityInstance("DOCUMENT")); }
        public document _document { get { return get_document(); } }
        public void put_document(document inst) { putEntityInstance("DOCUMENT", inst); }

        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }

        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }

        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_rule_action() { return IsADBEntity("rule_action"); }
        public bool _is_rule_action { get { return is_rule_action(); } }
        public rule_action get_rule_action() { return new rule_action (getEntityInstance("RULE_ACTION")); }
        public rule_action _rule_action { get { return get_rule_action(); } }
        public void put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class date_and_time_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_and_time_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_and_time_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_and_time_item_get() : base(null) { }

        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        public bool _is_applied_organization_assignment { get { return is_applied_organization_assignment(); } }
        public applied_organization_assignment get_applied_organization_assignment() { return new applied_organization_assignment (getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
        public applied_organization_assignment _applied_organization_assignment { get { return get_applied_organization_assignment(); } }
        public bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        public bool _is_applied_person_and_organization_assignment { get { return is_applied_person_and_organization_assignment(); } }
        public applied_person_and_organization_assignment get_applied_person_and_organization_assignment() { return new applied_person_and_organization_assignment (getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
        public applied_person_and_organization_assignment _applied_person_and_organization_assignment { get { return get_applied_person_and_organization_assignment(); } }
        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        public bool _is_approval_person_organization { get { return is_approval_person_organization(); } }
        public approval_person_organization get_approval_person_organization() { return new approval_person_organization (getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
        public approval_person_organization _approval_person_organization { get { return get_approval_person_organization(); } }
        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_directed_action() { return IsADBEntity("directed_action"); }
        public bool _is_directed_action { get { return is_directed_action(); } }
        public directed_action get_directed_action() { return new directed_action (getEntityInstance("DIRECTED_ACTION")); }
        public directed_action _directed_action { get { return get_directed_action(); } }
        public bool is_document() { return IsADBEntity("document"); }
        public bool _is_document { get { return is_document(); } }
        public document get_document() { return new document (getEntityInstance("DOCUMENT")); }
        public document _document { get { return get_document(); } }
        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }
        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_rule_action() { return IsADBEntity("rule_action"); }
        public bool _is_rule_action { get { return is_rule_action(); } }
        public rule_action get_rule_action() { return new rule_action (getEntityInstance("RULE_ACTION")); }
        public rule_action _rule_action { get { return get_rule_action(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class date_and_time_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_and_time_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_and_time_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_and_time_item_put() : base(null) { }

        public void put_action(action inst) { putEntityInstance("ACTION", inst); }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
        public void put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
        public void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
        public void put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
        public void put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class date_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_item() : base(null) { }


        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public void put_action(action inst) { putEntityInstance("ACTION", inst); }

        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }

        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }

        public bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        public bool _is_applied_organization_assignment { get { return is_applied_organization_assignment(); } }
        public applied_organization_assignment get_applied_organization_assignment() { return new applied_organization_assignment (getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
        public applied_organization_assignment _applied_organization_assignment { get { return get_applied_organization_assignment(); } }
        public void put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }

        public bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        public bool _is_applied_person_and_organization_assignment { get { return is_applied_person_and_organization_assignment(); } }
        public applied_person_and_organization_assignment get_applied_person_and_organization_assignment() { return new applied_person_and_organization_assignment (getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
        public applied_person_and_organization_assignment _applied_person_and_organization_assignment { get { return get_applied_person_and_organization_assignment(); } }
        public void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }

        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }

        public bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        public bool _is_approval_person_organization { get { return is_approval_person_organization(); } }
        public approval_person_organization get_approval_person_organization() { return new approval_person_organization (getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
        public approval_person_organization _approval_person_organization { get { return get_approval_person_organization(); } }
        public void put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }

        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_directed_action() { return IsADBEntity("directed_action"); }
        public bool _is_directed_action { get { return is_directed_action(); } }
        public directed_action get_directed_action() { return new directed_action (getEntityInstance("DIRECTED_ACTION")); }
        public directed_action _directed_action { get { return get_directed_action(); } }
        public void put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }

        public bool is_document() { return IsADBEntity("document"); }
        public bool _is_document { get { return is_document(); } }
        public document get_document() { return new document (getEntityInstance("DOCUMENT")); }
        public document _document { get { return get_document(); } }
        public void put_document(document inst) { putEntityInstance("DOCUMENT", inst); }

        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }

        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }

        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class date_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_item_get() : base(null) { }

        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        public bool _is_applied_organization_assignment { get { return is_applied_organization_assignment(); } }
        public applied_organization_assignment get_applied_organization_assignment() { return new applied_organization_assignment (getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
        public applied_organization_assignment _applied_organization_assignment { get { return get_applied_organization_assignment(); } }
        public bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        public bool _is_applied_person_and_organization_assignment { get { return is_applied_person_and_organization_assignment(); } }
        public applied_person_and_organization_assignment get_applied_person_and_organization_assignment() { return new applied_person_and_organization_assignment (getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
        public applied_person_and_organization_assignment _applied_person_and_organization_assignment { get { return get_applied_person_and_organization_assignment(); } }
        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        public bool _is_approval_person_organization { get { return is_approval_person_organization(); } }
        public approval_person_organization get_approval_person_organization() { return new approval_person_organization (getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
        public approval_person_organization _approval_person_organization { get { return get_approval_person_organization(); } }
        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_directed_action() { return IsADBEntity("directed_action"); }
        public bool _is_directed_action { get { return is_directed_action(); } }
        public directed_action get_directed_action() { return new directed_action (getEntityInstance("DIRECTED_ACTION")); }
        public directed_action _directed_action { get { return get_directed_action(); } }
        public bool is_document() { return IsADBEntity("document"); }
        public bool _is_document { get { return is_document(); } }
        public document get_document() { return new document (getEntityInstance("DOCUMENT")); }
        public document _document { get { return get_document(); } }
        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }
        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class date_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_item_put() : base(null) { }

        public void put_action(action inst) { putEntityInstance("ACTION", inst); }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
        public void put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
        public void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
        public void put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_directed_action(directed_action inst) { putEntityInstance("DIRECTED_ACTION", inst); }
        public void put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class date_time_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_item() : base(null) { }


        public bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        public bool _is_approval_person_organization { get { return is_approval_person_organization(); } }
        public approval_person_organization get_approval_person_organization() { return new approval_person_organization (getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
        public approval_person_organization _approval_person_organization { get { return get_approval_person_organization(); } }
        public void put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }

        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }

        public bool is_change() { return IsADBEntity("change"); }
        public bool _is_change { get { return is_change(); } }
        public change get_change() { return new change (getEntityInstance("CHANGE")); }
        public change _change { get { return get_change(); } }
        public void put_change(change inst) { putEntityInstance("CHANGE", inst); }

        public bool is_change_request() { return IsADBEntity("change_request"); }
        public bool _is_change_request { get { return is_change_request(); } }
        public change_request get_change_request() { return new change_request (getEntityInstance("CHANGE_REQUEST")); }
        public change_request _change_request { get { return get_change_request(); } }
        public void put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_start_request() { return IsADBEntity("start_request"); }
        public bool _is_start_request { get { return is_start_request(); } }
        public start_request get_start_request() { return new start_request (getEntityInstance("START_REQUEST")); }
        public start_request _start_request { get { return get_start_request(); } }
        public void put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }

        public bool is_start_work() { return IsADBEntity("start_work"); }
        public bool _is_start_work { get { return is_start_work(); } }
        public start_work get_start_work() { return new start_work (getEntityInstance("START_WORK")); }
        public start_work _start_work { get { return get_start_work(); } }
        public void put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
        };


    public class date_time_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_item_get() : base(null) { }

        public bool is_approval_person_organization() { return IsADBEntity("approval_person_organization"); }
        public bool _is_approval_person_organization { get { return is_approval_person_organization(); } }
        public approval_person_organization get_approval_person_organization() { return new approval_person_organization (getEntityInstance("APPROVAL_PERSON_ORGANIZATION")); }
        public approval_person_organization _approval_person_organization { get { return get_approval_person_organization(); } }
        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public bool is_change() { return IsADBEntity("change"); }
        public bool _is_change { get { return is_change(); } }
        public change get_change() { return new change (getEntityInstance("CHANGE")); }
        public change _change { get { return get_change(); } }
        public bool is_change_request() { return IsADBEntity("change_request"); }
        public bool _is_change_request { get { return is_change_request(); } }
        public change_request get_change_request() { return new change_request (getEntityInstance("CHANGE_REQUEST")); }
        public change_request _change_request { get { return get_change_request(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_start_request() { return IsADBEntity("start_request"); }
        public bool _is_start_request { get { return is_start_request(); } }
        public start_request get_start_request() { return new start_request (getEntityInstance("START_REQUEST")); }
        public start_request _start_request { get { return get_start_request(); } }
        public bool is_start_work() { return IsADBEntity("start_work"); }
        public bool _is_start_work { get { return is_start_work(); } }
        public start_work get_start_work() { return new start_work (getEntityInstance("START_WORK")); }
        public start_work _start_work { get { return get_start_work(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class date_time_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_item_put() : base(null) { }

        public void put_approval_person_organization(approval_person_organization inst) { putEntityInstance("APPROVAL_PERSON_ORGANIZATION", inst); }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
        public void put_change(change inst) { putEntityInstance("CHANGE", inst); }
        public void put_change_request(change_request inst) { putEntityInstance("CHANGE_REQUEST", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_start_request(start_request inst) { putEntityInstance("START_REQUEST", inst); }
        public void put_start_work(start_work inst) { putEntityInstance("START_WORK", inst); }
        };


    public class date_time_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_select() : base(null) { }


        public bool is_date() { return IsADBEntity("date"); }
        public bool _is_date { get { return is_date(); } }
        public date get_date() { return new date (getEntityInstance("DATE")); }
        public date _date { get { return get_date(); } }
        public void put_date(date inst) { putEntityInstance("DATE", inst); }

        public bool is_date_and_time() { return IsADBEntity("date_and_time"); }
        public bool _is_date_and_time { get { return is_date_and_time(); } }
        public date_and_time get_date_and_time() { return new date_and_time (getEntityInstance("DATE_AND_TIME")); }
        public date_and_time _date_and_time { get { return get_date_and_time(); } }
        public void put_date_and_time(date_and_time inst) { putEntityInstance("DATE_AND_TIME", inst); }

        public bool is_local_time() { return IsADBEntity("local_time"); }
        public bool _is_local_time { get { return is_local_time(); } }
        public local_time get_local_time() { return new local_time (getEntityInstance("LOCAL_TIME")); }
        public local_time _local_time { get { return get_local_time(); } }
        public void put_local_time(local_time inst) { putEntityInstance("LOCAL_TIME", inst); }
        };


    public class date_time_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_select_get() : base(null) { }

        public bool is_date() { return IsADBEntity("date"); }
        public bool _is_date { get { return is_date(); } }
        public date get_date() { return new date (getEntityInstance("DATE")); }
        public date _date { get { return get_date(); } }
        public bool is_date_and_time() { return IsADBEntity("date_and_time"); }
        public bool _is_date_and_time { get { return is_date_and_time(); } }
        public date_and_time get_date_and_time() { return new date_and_time (getEntityInstance("DATE_AND_TIME")); }
        public date_and_time _date_and_time { get { return get_date_and_time(); } }
        public bool is_local_time() { return IsADBEntity("local_time"); }
        public bool _is_local_time { get { return is_local_time(); } }
        public local_time get_local_time() { return new local_time (getEntityInstance("LOCAL_TIME")); }
        public local_time _local_time { get { return get_local_time(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class date_time_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_select_put() : base(null) { }

        public void put_date(date inst) { putEntityInstance("DATE", inst); }
        public void put_date_and_time(date_and_time inst) { putEntityInstance("DATE_AND_TIME", inst); }
        public void put_local_time(local_time inst) { putEntityInstance("LOCAL_TIME", inst); }
        };


    public class date_time_or_event_occurrence : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_or_event_occurrence(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_or_event_occurrence(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_or_event_occurrence() : base(null) { }


        public date_time_select _date_time_select() { return new date_time_select(this); }
        public date_time_select __date_time_select { get { return _date_time_select(); } }

        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
        };


    public class date_time_or_event_occurrence_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_or_event_occurrence_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_or_event_occurrence_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_or_event_occurrence_get() : base(null) { }

        public date_time_select_get get_date_time_select() { return new date_time_select_get(this); }
        public date_time_select_get __date_time_select { get { return get_date_time_select(); } }
        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class date_time_or_event_occurrence_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public date_time_or_event_occurrence_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public date_time_or_event_occurrence_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public date_time_or_event_occurrence_put() : base(null) { }

        public date_time_select_put put_date_time_select() { return new date_time_select_put(this); }
        public date_time_select_put __date_time_select { get { return put_date_time_select(); } }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
        };


    public class defined_symbol_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public defined_symbol_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public defined_symbol_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public defined_symbol_select() : base(null) { }


        public bool is_pre_defined_symbol() { return IsADBEntity("pre_defined_symbol"); }
        public bool _is_pre_defined_symbol { get { return is_pre_defined_symbol(); } }
        public pre_defined_symbol get_pre_defined_symbol() { return new pre_defined_symbol (getEntityInstance("PRE_DEFINED_SYMBOL")); }
        public pre_defined_symbol _pre_defined_symbol { get { return get_pre_defined_symbol(); } }
        public void put_pre_defined_symbol(pre_defined_symbol inst) { putEntityInstance("PRE_DEFINED_SYMBOL", inst); }

        public bool is_externally_defined_symbol() { return IsADBEntity("externally_defined_symbol"); }
        public bool _is_externally_defined_symbol { get { return is_externally_defined_symbol(); } }
        public externally_defined_symbol get_externally_defined_symbol() { return new externally_defined_symbol (getEntityInstance("EXTERNALLY_DEFINED_SYMBOL")); }
        public externally_defined_symbol _externally_defined_symbol { get { return get_externally_defined_symbol(); } }
        public void put_externally_defined_symbol(externally_defined_symbol inst) { putEntityInstance("EXTERNALLY_DEFINED_SYMBOL", inst); }
        };


    public class defined_symbol_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public defined_symbol_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public defined_symbol_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public defined_symbol_select_get() : base(null) { }

        public bool is_pre_defined_symbol() { return IsADBEntity("pre_defined_symbol"); }
        public bool _is_pre_defined_symbol { get { return is_pre_defined_symbol(); } }
        public pre_defined_symbol get_pre_defined_symbol() { return new pre_defined_symbol (getEntityInstance("PRE_DEFINED_SYMBOL")); }
        public pre_defined_symbol _pre_defined_symbol { get { return get_pre_defined_symbol(); } }
        public bool is_externally_defined_symbol() { return IsADBEntity("externally_defined_symbol"); }
        public bool _is_externally_defined_symbol { get { return is_externally_defined_symbol(); } }
        public externally_defined_symbol get_externally_defined_symbol() { return new externally_defined_symbol (getEntityInstance("EXTERNALLY_DEFINED_SYMBOL")); }
        public externally_defined_symbol _externally_defined_symbol { get { return get_externally_defined_symbol(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class defined_symbol_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public defined_symbol_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public defined_symbol_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public defined_symbol_select_put() : base(null) { }

        public void put_pre_defined_symbol(pre_defined_symbol inst) { putEntityInstance("PRE_DEFINED_SYMBOL", inst); }
        public void put_externally_defined_symbol(externally_defined_symbol inst) { putEntityInstance("EXTERNALLY_DEFINED_SYMBOL", inst); }
        };


    public class derived_property_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public derived_property_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public derived_property_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public derived_property_select() : base(null) { }


        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }

        public bool is_action_property() { return IsADBEntity("action_property"); }
        public bool _is_action_property { get { return is_action_property(); } }
        public action_property get_action_property() { return new action_property (getEntityInstance("ACTION_PROPERTY")); }
        public action_property _action_property { get { return get_action_property(); } }
        public void put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
        };


    public class derived_property_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public derived_property_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public derived_property_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public derived_property_select_get() : base(null) { }

        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public bool is_action_property() { return IsADBEntity("action_property"); }
        public bool _is_action_property { get { return is_action_property(); } }
        public action_property get_action_property() { return new action_property (getEntityInstance("ACTION_PROPERTY")); }
        public action_property _action_property { get { return get_action_property(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class derived_property_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public derived_property_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public derived_property_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public derived_property_select_put() : base(null) { }

        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
        public void put_action_property(action_property inst) { putEntityInstance("ACTION_PROPERTY", inst); }
        };


    public class description_attribute_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public description_attribute_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public description_attribute_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public description_attribute_select() : base(null) { }


        public bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        public bool _is_action_request_solution { get { return is_action_request_solution(); } }
        public action_request_solution get_action_request_solution() { return new action_request_solution (getEntityInstance("ACTION_REQUEST_SOLUTION")); }
        public action_request_solution _action_request_solution { get { return get_action_request_solution(); } }
        public void put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }

        public bool is_application_context() { return IsADBEntity("application_context"); }
        public bool _is_application_context { get { return is_application_context(); } }
        public application_context get_application_context() { return new application_context (getEntityInstance("APPLICATION_CONTEXT")); }
        public application_context _application_context { get { return get_application_context(); } }
        public void put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }

        public bool is_approval_role() { return IsADBEntity("approval_role"); }
        public bool _is_approval_role { get { return is_approval_role(); } }
        public approval_role get_approval_role() { return new approval_role (getEntityInstance("APPROVAL_ROLE")); }
        public approval_role _approval_role { get { return get_approval_role(); } }
        public void put_approval_role(approval_role inst) { putEntityInstance("APPROVAL_ROLE", inst); }

        public bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        public bool _is_configuration_design { get { return is_configuration_design(); } }
        public configuration_design get_configuration_design() { return new configuration_design (getEntityInstance("CONFIGURATION_DESIGN")); }
        public configuration_design _configuration_design { get { return get_configuration_design(); } }
        public void put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }

        public bool is_date_role() { return IsADBEntity("date_role"); }
        public bool _is_date_role { get { return is_date_role(); } }
        public date_role get_date_role() { return new date_role (getEntityInstance("DATE_ROLE")); }
        public date_role _date_role { get { return get_date_role(); } }
        public void put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }

        public bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        public bool _is_date_time_role { get { return is_date_time_role(); } }
        public date_time_role get_date_time_role() { return new date_time_role (getEntityInstance("DATE_TIME_ROLE")); }
        public date_time_role _date_time_role { get { return get_date_time_role(); } }
        public void put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }

        public bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        public bool _is_context_dependent_shape_representation { get { return is_context_dependent_shape_representation(); } }
        public context_dependent_shape_representation get_context_dependent_shape_representation() { return new context_dependent_shape_representation (getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION")); }
        public context_dependent_shape_representation _context_dependent_shape_representation { get { return get_context_dependent_shape_representation(); } }
        public void put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }

        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }

        public bool is_external_source() { return IsADBEntity("external_source"); }
        public bool _is_external_source { get { return is_external_source(); } }
        public external_source get_external_source() { return new external_source (getEntityInstance("EXTERNAL_SOURCE")); }
        public external_source _external_source { get { return get_external_source(); } }
        public void put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }

        public bool is_organization_role() { return IsADBEntity("organization_role"); }
        public bool _is_organization_role { get { return is_organization_role(); } }
        public organization_role get_organization_role() { return new organization_role (getEntityInstance("ORGANIZATION_ROLE")); }
        public organization_role _organization_role { get { return get_organization_role(); } }
        public void put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }

        public bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        public bool _is_person_and_organization_role { get { return is_person_and_organization_role(); } }
        public person_and_organization_role get_person_and_organization_role() { return new person_and_organization_role (getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); }
        public person_and_organization_role _person_and_organization_role { get { return get_person_and_organization_role(); } }
        public void put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }

        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }

        public bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        public bool _is_property_definition_representation { get { return is_property_definition_representation(); } }
        public property_definition_representation get_property_definition_representation() { return new property_definition_representation (getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
        public property_definition_representation _property_definition_representation { get { return get_property_definition_representation(); } }
        public void put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        };


    public class description_attribute_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public description_attribute_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public description_attribute_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public description_attribute_select_get() : base(null) { }

        public bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        public bool _is_action_request_solution { get { return is_action_request_solution(); } }
        public action_request_solution get_action_request_solution() { return new action_request_solution (getEntityInstance("ACTION_REQUEST_SOLUTION")); }
        public action_request_solution _action_request_solution { get { return get_action_request_solution(); } }
        public bool is_application_context() { return IsADBEntity("application_context"); }
        public bool _is_application_context { get { return is_application_context(); } }
        public application_context get_application_context() { return new application_context (getEntityInstance("APPLICATION_CONTEXT")); }
        public application_context _application_context { get { return get_application_context(); } }
        public bool is_approval_role() { return IsADBEntity("approval_role"); }
        public bool _is_approval_role { get { return is_approval_role(); } }
        public approval_role get_approval_role() { return new approval_role (getEntityInstance("APPROVAL_ROLE")); }
        public approval_role _approval_role { get { return get_approval_role(); } }
        public bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        public bool _is_configuration_design { get { return is_configuration_design(); } }
        public configuration_design get_configuration_design() { return new configuration_design (getEntityInstance("CONFIGURATION_DESIGN")); }
        public configuration_design _configuration_design { get { return get_configuration_design(); } }
        public bool is_date_role() { return IsADBEntity("date_role"); }
        public bool _is_date_role { get { return is_date_role(); } }
        public date_role get_date_role() { return new date_role (getEntityInstance("DATE_ROLE")); }
        public date_role _date_role { get { return get_date_role(); } }
        public bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        public bool _is_date_time_role { get { return is_date_time_role(); } }
        public date_time_role get_date_time_role() { return new date_time_role (getEntityInstance("DATE_TIME_ROLE")); }
        public date_time_role _date_time_role { get { return get_date_time_role(); } }
        public bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        public bool _is_context_dependent_shape_representation { get { return is_context_dependent_shape_representation(); } }
        public context_dependent_shape_representation get_context_dependent_shape_representation() { return new context_dependent_shape_representation (getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION")); }
        public context_dependent_shape_representation _context_dependent_shape_representation { get { return get_context_dependent_shape_representation(); } }
        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public bool is_external_source() { return IsADBEntity("external_source"); }
        public bool _is_external_source { get { return is_external_source(); } }
        public external_source get_external_source() { return new external_source (getEntityInstance("EXTERNAL_SOURCE")); }
        public external_source _external_source { get { return get_external_source(); } }
        public bool is_organization_role() { return IsADBEntity("organization_role"); }
        public bool _is_organization_role { get { return is_organization_role(); } }
        public organization_role get_organization_role() { return new organization_role (getEntityInstance("ORGANIZATION_ROLE")); }
        public organization_role _organization_role { get { return get_organization_role(); } }
        public bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        public bool _is_person_and_organization_role { get { return is_person_and_organization_role(); } }
        public person_and_organization_role get_person_and_organization_role() { return new person_and_organization_role (getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); }
        public person_and_organization_role _person_and_organization_role { get { return get_person_and_organization_role(); } }
        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        public bool _is_property_definition_representation { get { return is_property_definition_representation(); } }
        public property_definition_representation get_property_definition_representation() { return new property_definition_representation (getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
        public property_definition_representation _property_definition_representation { get { return get_property_definition_representation(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class description_attribute_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public description_attribute_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public description_attribute_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public description_attribute_select_put() : base(null) { }

        public void put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
        public void put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
        public void put_approval_role(approval_role inst) { putEntityInstance("APPROVAL_ROLE", inst); }
        public void put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
        public void put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
        public void put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
        public void put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
        public void put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
        public void put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
        public void put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
        public void put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        };


    public class dimensional_characteristic : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public dimensional_characteristic(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public dimensional_characteristic(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public dimensional_characteristic() : base(null) { }


        public bool is_dimensional_location() { return IsADBEntity("dimensional_location"); }
        public bool _is_dimensional_location { get { return is_dimensional_location(); } }
        public dimensional_location get_dimensional_location() { return new dimensional_location (getEntityInstance("DIMENSIONAL_LOCATION")); }
        public dimensional_location _dimensional_location { get { return get_dimensional_location(); } }
        public void put_dimensional_location(dimensional_location inst) { putEntityInstance("DIMENSIONAL_LOCATION", inst); }

        public bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        public bool _is_dimensional_size { get { return is_dimensional_size(); } }
        public dimensional_size get_dimensional_size() { return new dimensional_size (getEntityInstance("DIMENSIONAL_SIZE")); }
        public dimensional_size _dimensional_size { get { return get_dimensional_size(); } }
        public void put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
        };


    public class dimensional_characteristic_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public dimensional_characteristic_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public dimensional_characteristic_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public dimensional_characteristic_get() : base(null) { }

        public bool is_dimensional_location() { return IsADBEntity("dimensional_location"); }
        public bool _is_dimensional_location { get { return is_dimensional_location(); } }
        public dimensional_location get_dimensional_location() { return new dimensional_location (getEntityInstance("DIMENSIONAL_LOCATION")); }
        public dimensional_location _dimensional_location { get { return get_dimensional_location(); } }
        public bool is_dimensional_size() { return IsADBEntity("dimensional_size"); }
        public bool _is_dimensional_size { get { return is_dimensional_size(); } }
        public dimensional_size get_dimensional_size() { return new dimensional_size (getEntityInstance("DIMENSIONAL_SIZE")); }
        public dimensional_size _dimensional_size { get { return get_dimensional_size(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class dimensional_characteristic_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public dimensional_characteristic_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public dimensional_characteristic_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public dimensional_characteristic_put() : base(null) { }

        public void put_dimensional_location(dimensional_location inst) { putEntityInstance("DIMENSIONAL_LOCATION", inst); }
        public void put_dimensional_size(dimensional_size inst) { putEntityInstance("DIMENSIONAL_SIZE", inst); }
        };


    public class direction_count_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public direction_count_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public direction_count_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public direction_count_select() : base(null) { }


        public bool is_u_direction_count() { return IsADBType("U_DIRECTION_COUNT"); }
        //public bool _is_u_direction_count { get { return is_u_direction_count(); } }
        public IntValue? get_u_direction_count() { return get_IntValue("U_DIRECTION_COUNT", ifcengine.sdaiINTEGER); }
        public IntValue? _u_direction_count { get { return get_u_direction_count(); } }
        public void put_u_direction_count (IntValue value) { put_IntValue("U_DIRECTION_COUNT", ifcengine.sdaiINTEGER, value); }

        public bool is_v_direction_count() { return IsADBType("V_DIRECTION_COUNT"); }
        //public bool _is_v_direction_count { get { return is_v_direction_count(); } }
        public IntValue? get_v_direction_count() { return get_IntValue("V_DIRECTION_COUNT", ifcengine.sdaiINTEGER); }
        public IntValue? _v_direction_count { get { return get_v_direction_count(); } }
        public void put_v_direction_count (IntValue value) { put_IntValue("V_DIRECTION_COUNT", ifcengine.sdaiINTEGER, value); }
        };


    public class direction_count_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public direction_count_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public direction_count_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public direction_count_select_get() : base(null) { }

        public bool is_u_direction_count() { return IsADBType("U_DIRECTION_COUNT"); }
        //public bool _is_u_direction_count { get { return is_u_direction_count(); } }
        public IntValue? get_u_direction_count() { return get_IntValue("U_DIRECTION_COUNT", ifcengine.sdaiINTEGER); }
        public IntValue? _u_direction_count { get { return get_u_direction_count(); } }
        public bool is_v_direction_count() { return IsADBType("V_DIRECTION_COUNT"); }
        //public bool _is_v_direction_count { get { return is_v_direction_count(); } }
        public IntValue? get_v_direction_count() { return get_IntValue("V_DIRECTION_COUNT", ifcengine.sdaiINTEGER); }
        public IntValue? _v_direction_count { get { return get_v_direction_count(); } }

        public IntValue? as_int() { IntValue val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiINTEGER, out val) != 0) return val; else return null; }
        };


    public class direction_count_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public direction_count_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public direction_count_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public direction_count_select_put() : base(null) { }

        public void put_u_direction_count (IntValue value) { put_IntValue("U_DIRECTION_COUNT", ifcengine.sdaiINTEGER, value); }
        public void put_v_direction_count (IntValue value) { put_IntValue("V_DIRECTION_COUNT", ifcengine.sdaiINTEGER, value); }
        };


    public class document_identifier_assigned_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public document_identifier_assigned_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public document_identifier_assigned_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public document_identifier_assigned_item() : base(null) { }


        public bool is_document() { return IsADBEntity("document"); }
        public bool _is_document { get { return is_document(); } }
        public document get_document() { return new document (getEntityInstance("DOCUMENT")); }
        public document _document { get { return get_document(); } }
        public void put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
        };


    public class document_identifier_assigned_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public document_identifier_assigned_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public document_identifier_assigned_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public document_identifier_assigned_item_get() : base(null) { }

        public bool is_document() { return IsADBEntity("document"); }
        public bool _is_document { get { return is_document(); } }
        public document get_document() { return new document (getEntityInstance("DOCUMENT")); }
        public document _document { get { return get_document(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class document_identifier_assigned_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public document_identifier_assigned_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public document_identifier_assigned_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public document_identifier_assigned_item_put() : base(null) { }

        public void put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
        };


    public class draughting_callout_element : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_callout_element(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_callout_element(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_callout_element() : base(null) { }


        public bool is_annotation_text_occurrence() { return IsADBEntity("annotation_text_occurrence"); }
        public bool _is_annotation_text_occurrence { get { return is_annotation_text_occurrence(); } }
        public annotation_text_occurrence get_annotation_text_occurrence() { return new annotation_text_occurrence (getEntityInstance("ANNOTATION_TEXT_OCCURRENCE")); }
        public annotation_text_occurrence _annotation_text_occurrence { get { return get_annotation_text_occurrence(); } }
        public void put_annotation_text_occurrence(annotation_text_occurrence inst) { putEntityInstance("ANNOTATION_TEXT_OCCURRENCE", inst); }

        public bool is_annotation_symbol_occurrence() { return IsADBEntity("annotation_symbol_occurrence"); }
        public bool _is_annotation_symbol_occurrence { get { return is_annotation_symbol_occurrence(); } }
        public annotation_symbol_occurrence get_annotation_symbol_occurrence() { return new annotation_symbol_occurrence (getEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE")); }
        public annotation_symbol_occurrence _annotation_symbol_occurrence { get { return get_annotation_symbol_occurrence(); } }
        public void put_annotation_symbol_occurrence(annotation_symbol_occurrence inst) { putEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE", inst); }

        public bool is_annotation_curve_occurrence() { return IsADBEntity("annotation_curve_occurrence"); }
        public bool _is_annotation_curve_occurrence { get { return is_annotation_curve_occurrence(); } }
        public annotation_curve_occurrence get_annotation_curve_occurrence() { return new annotation_curve_occurrence (getEntityInstance("ANNOTATION_CURVE_OCCURRENCE")); }
        public annotation_curve_occurrence _annotation_curve_occurrence { get { return get_annotation_curve_occurrence(); } }
        public void put_annotation_curve_occurrence(annotation_curve_occurrence inst) { putEntityInstance("ANNOTATION_CURVE_OCCURRENCE", inst); }
        };


    public class draughting_callout_element_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_callout_element_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_callout_element_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_callout_element_get() : base(null) { }

        public bool is_annotation_text_occurrence() { return IsADBEntity("annotation_text_occurrence"); }
        public bool _is_annotation_text_occurrence { get { return is_annotation_text_occurrence(); } }
        public annotation_text_occurrence get_annotation_text_occurrence() { return new annotation_text_occurrence (getEntityInstance("ANNOTATION_TEXT_OCCURRENCE")); }
        public annotation_text_occurrence _annotation_text_occurrence { get { return get_annotation_text_occurrence(); } }
        public bool is_annotation_symbol_occurrence() { return IsADBEntity("annotation_symbol_occurrence"); }
        public bool _is_annotation_symbol_occurrence { get { return is_annotation_symbol_occurrence(); } }
        public annotation_symbol_occurrence get_annotation_symbol_occurrence() { return new annotation_symbol_occurrence (getEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE")); }
        public annotation_symbol_occurrence _annotation_symbol_occurrence { get { return get_annotation_symbol_occurrence(); } }
        public bool is_annotation_curve_occurrence() { return IsADBEntity("annotation_curve_occurrence"); }
        public bool _is_annotation_curve_occurrence { get { return is_annotation_curve_occurrence(); } }
        public annotation_curve_occurrence get_annotation_curve_occurrence() { return new annotation_curve_occurrence (getEntityInstance("ANNOTATION_CURVE_OCCURRENCE")); }
        public annotation_curve_occurrence _annotation_curve_occurrence { get { return get_annotation_curve_occurrence(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class draughting_callout_element_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_callout_element_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_callout_element_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_callout_element_put() : base(null) { }

        public void put_annotation_text_occurrence(annotation_text_occurrence inst) { putEntityInstance("ANNOTATION_TEXT_OCCURRENCE", inst); }
        public void put_annotation_symbol_occurrence(annotation_symbol_occurrence inst) { putEntityInstance("ANNOTATION_SYMBOL_OCCURRENCE", inst); }
        public void put_annotation_curve_occurrence(annotation_curve_occurrence inst) { putEntityInstance("ANNOTATION_CURVE_OCCURRENCE", inst); }
        };


    public class draughting_model_item_association_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_model_item_association_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_model_item_association_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_model_item_association_select() : base(null) { }


        public bool is_annotation_occurrence() { return IsADBEntity("annotation_occurrence"); }
        public bool _is_annotation_occurrence { get { return is_annotation_occurrence(); } }
        public annotation_occurrence get_annotation_occurrence() { return new annotation_occurrence (getEntityInstance("ANNOTATION_OCCURRENCE")); }
        public annotation_occurrence _annotation_occurrence { get { return get_annotation_occurrence(); } }
        public void put_annotation_occurrence(annotation_occurrence inst) { putEntityInstance("ANNOTATION_OCCURRENCE", inst); }

        public bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        public bool _is_draughting_callout { get { return is_draughting_callout(); } }
        public draughting_callout get_draughting_callout() { return new draughting_callout (getEntityInstance("DRAUGHTING_CALLOUT")); }
        public draughting_callout _draughting_callout { get { return get_draughting_callout(); } }
        public void put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
        };


    public class draughting_model_item_association_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_model_item_association_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_model_item_association_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_model_item_association_select_get() : base(null) { }

        public bool is_annotation_occurrence() { return IsADBEntity("annotation_occurrence"); }
        public bool _is_annotation_occurrence { get { return is_annotation_occurrence(); } }
        public annotation_occurrence get_annotation_occurrence() { return new annotation_occurrence (getEntityInstance("ANNOTATION_OCCURRENCE")); }
        public annotation_occurrence _annotation_occurrence { get { return get_annotation_occurrence(); } }
        public bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        public bool _is_draughting_callout { get { return is_draughting_callout(); } }
        public draughting_callout get_draughting_callout() { return new draughting_callout (getEntityInstance("DRAUGHTING_CALLOUT")); }
        public draughting_callout _draughting_callout { get { return get_draughting_callout(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class draughting_model_item_association_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_model_item_association_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_model_item_association_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_model_item_association_select_put() : base(null) { }

        public void put_annotation_occurrence(annotation_occurrence inst) { putEntityInstance("ANNOTATION_OCCURRENCE", inst); }
        public void put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
        };


    public class draughting_model_item_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_model_item_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_model_item_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_model_item_select() : base(null) { }


        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }
        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }

        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }
        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }

        public axis2_placement _axis2_placement() { return new axis2_placement(this); }
        public axis2_placement __axis2_placement { get { return _axis2_placement(); } }

        public bool is_camera_model() { return IsADBEntity("camera_model"); }
        public bool _is_camera_model { get { return is_camera_model(); } }
        public camera_model get_camera_model() { return new camera_model (getEntityInstance("CAMERA_MODEL")); }
        public camera_model _camera_model { get { return get_camera_model(); } }
        public void put_camera_model(camera_model inst) { putEntityInstance("CAMERA_MODEL", inst); }

        public bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        public bool _is_draughting_callout { get { return is_draughting_callout(); } }
        public draughting_callout get_draughting_callout() { return new draughting_callout (getEntityInstance("DRAUGHTING_CALLOUT")); }
        public draughting_callout _draughting_callout { get { return get_draughting_callout(); } }
        public void put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
        };


    public class draughting_model_item_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_model_item_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_model_item_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_model_item_select_get() : base(null) { }

        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }
        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }
        public axis2_placement_get get_axis2_placement() { return new axis2_placement_get(this); }
        public axis2_placement_get __axis2_placement { get { return get_axis2_placement(); } }
        public bool is_camera_model() { return IsADBEntity("camera_model"); }
        public bool _is_camera_model { get { return is_camera_model(); } }
        public camera_model get_camera_model() { return new camera_model (getEntityInstance("CAMERA_MODEL")); }
        public camera_model _camera_model { get { return get_camera_model(); } }
        public bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        public bool _is_draughting_callout { get { return is_draughting_callout(); } }
        public draughting_callout get_draughting_callout() { return new draughting_callout (getEntityInstance("DRAUGHTING_CALLOUT")); }
        public draughting_callout _draughting_callout { get { return get_draughting_callout(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class draughting_model_item_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_model_item_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_model_item_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_model_item_select_put() : base(null) { }

        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
        public axis2_placement_put put_axis2_placement() { return new axis2_placement_put(this); }
        public axis2_placement_put __axis2_placement { get { return put_axis2_placement(); } }
        public void put_camera_model(camera_model inst) { putEntityInstance("CAMERA_MODEL", inst); }
        public void put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
        };


    public class draughting_titled_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_titled_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_titled_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_titled_item() : base(null) { }


        public bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        public bool _is_drawing_revision { get { return is_drawing_revision(); } }
        public drawing_revision get_drawing_revision() { return new drawing_revision (getEntityInstance("DRAWING_REVISION")); }
        public drawing_revision _drawing_revision { get { return get_drawing_revision(); } }
        public void put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }

        public bool is_drawing_sheet_revision() { return IsADBEntity("drawing_sheet_revision"); }
        public bool _is_drawing_sheet_revision { get { return is_drawing_sheet_revision(); } }
        public drawing_sheet_revision get_drawing_sheet_revision() { return new drawing_sheet_revision (getEntityInstance("DRAWING_SHEET_REVISION")); }
        public drawing_sheet_revision _drawing_sheet_revision { get { return get_drawing_sheet_revision(); } }
        public void put_drawing_sheet_revision(drawing_sheet_revision inst) { putEntityInstance("DRAWING_SHEET_REVISION", inst); }
        };


    public class draughting_titled_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_titled_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_titled_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_titled_item_get() : base(null) { }

        public bool is_drawing_revision() { return IsADBEntity("drawing_revision"); }
        public bool _is_drawing_revision { get { return is_drawing_revision(); } }
        public drawing_revision get_drawing_revision() { return new drawing_revision (getEntityInstance("DRAWING_REVISION")); }
        public drawing_revision _drawing_revision { get { return get_drawing_revision(); } }
        public bool is_drawing_sheet_revision() { return IsADBEntity("drawing_sheet_revision"); }
        public bool _is_drawing_sheet_revision { get { return is_drawing_sheet_revision(); } }
        public drawing_sheet_revision get_drawing_sheet_revision() { return new drawing_sheet_revision (getEntityInstance("DRAWING_SHEET_REVISION")); }
        public drawing_sheet_revision _drawing_sheet_revision { get { return get_drawing_sheet_revision(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class draughting_titled_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public draughting_titled_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public draughting_titled_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public draughting_titled_item_put() : base(null) { }

        public void put_drawing_revision(drawing_revision inst) { putEntityInstance("DRAWING_REVISION", inst); }
        public void put_drawing_sheet_revision(drawing_sheet_revision inst) { putEntityInstance("DRAWING_SHEET_REVISION", inst); }
        };


    public class effectivity_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public effectivity_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public effectivity_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public effectivity_item() : base(null) { }


        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        public bool _is_product_definition_substitute { get { return is_product_definition_substitute(); } }
        public product_definition_substitute get_product_definition_substitute() { return new product_definition_substitute (getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
        public product_definition_substitute _product_definition_substitute { get { return get_product_definition_substitute(); } }
        public void put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
        };


    public class effectivity_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public effectivity_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public effectivity_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public effectivity_item_get() : base(null) { }

        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        public bool _is_product_definition_substitute { get { return is_product_definition_substitute(); } }
        public product_definition_substitute get_product_definition_substitute() { return new product_definition_substitute (getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
        public product_definition_substitute _product_definition_substitute { get { return get_product_definition_substitute(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class effectivity_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public effectivity_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public effectivity_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public effectivity_item_put() : base(null) { }

        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
        };


    public class event_occurrence_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public event_occurrence_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public event_occurrence_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public event_occurrence_item() : base(null) { }


        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
        };


    public class event_occurrence_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public event_occurrence_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public event_occurrence_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public event_occurrence_item_get() : base(null) { }

        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class event_occurrence_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public event_occurrence_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public event_occurrence_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public event_occurrence_item_put() : base(null) { }

        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
        };


    public class external_identification_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public external_identification_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public external_identification_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public external_identification_item() : base(null) { }


        public bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        public bool _is_action_relationship { get { return is_action_relationship(); } }
        public action_relationship get_action_relationship() { return new action_relationship (getEntityInstance("ACTION_RELATIONSHIP")); }
        public action_relationship _action_relationship { get { return get_action_relationship(); } }
        public void put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }

        public bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        public bool _is_action_request_status { get { return is_action_request_status(); } }
        public action_request_status get_action_request_status() { return new action_request_status (getEntityInstance("ACTION_REQUEST_STATUS")); }
        public action_request_status _action_request_status { get { return get_action_request_status(); } }
        public void put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }

        public bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        public bool _is_applied_organization_assignment { get { return is_applied_organization_assignment(); } }
        public applied_organization_assignment get_applied_organization_assignment() { return new applied_organization_assignment (getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
        public applied_organization_assignment _applied_organization_assignment { get { return get_applied_organization_assignment(); } }
        public void put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }

        public bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        public bool _is_applied_person_and_organization_assignment { get { return is_applied_person_and_organization_assignment(); } }
        public applied_person_and_organization_assignment get_applied_person_and_organization_assignment() { return new applied_person_and_organization_assignment (getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
        public applied_person_and_organization_assignment _applied_person_and_organization_assignment { get { return get_applied_person_and_organization_assignment(); } }
        public void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }

        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }

        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }

        public bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        public bool _is_date_and_time_assignment { get { return is_date_and_time_assignment(); } }
        public date_and_time_assignment get_date_and_time_assignment() { return new date_and_time_assignment (getEntityInstance("DATE_AND_TIME_ASSIGNMENT")); }
        public date_and_time_assignment _date_and_time_assignment { get { return get_date_and_time_assignment(); } }
        public void put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }

        public bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        public bool _is_date_assignment { get { return is_date_assignment(); } }
        public date_assignment get_date_assignment() { return new date_assignment (getEntityInstance("DATE_ASSIGNMENT")); }
        public date_assignment _date_assignment { get { return get_date_assignment(); } }
        public void put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }

        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }

        public bool is_external_source() { return IsADBEntity("external_source"); }
        public bool _is_external_source { get { return is_external_source(); } }
        public external_source get_external_source() { return new external_source (getEntityInstance("EXTERNAL_SOURCE")); }
        public external_source _external_source { get { return get_external_source(); } }
        public void put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }

        public bool is_externally_defined_class() { return IsADBEntity("externally_defined_class"); }
        public bool _is_externally_defined_class { get { return is_externally_defined_class(); } }
        public externally_defined_class get_externally_defined_class() { return new externally_defined_class (getEntityInstance("EXTERNALLY_DEFINED_CLASS")); }
        public externally_defined_class _externally_defined_class { get { return get_externally_defined_class(); } }
        public void put_externally_defined_class(externally_defined_class inst) { putEntityInstance("EXTERNALLY_DEFINED_CLASS", inst); }

        public bool is_externally_defined_context_dependent_unit() { return IsADBEntity("externally_defined_context_dependent_unit"); }
        public bool _is_externally_defined_context_dependent_unit { get { return is_externally_defined_context_dependent_unit(); } }
        public externally_defined_context_dependent_unit get_externally_defined_context_dependent_unit() { return new externally_defined_context_dependent_unit (getEntityInstance("EXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT")); }
        public externally_defined_context_dependent_unit _externally_defined_context_dependent_unit { get { return get_externally_defined_context_dependent_unit(); } }
        public void put_externally_defined_context_dependent_unit(externally_defined_context_dependent_unit inst) { putEntityInstance("EXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT", inst); }

        public bool is_externally_defined_conversion_based_unit() { return IsADBEntity("externally_defined_conversion_based_unit"); }
        public bool _is_externally_defined_conversion_based_unit { get { return is_externally_defined_conversion_based_unit(); } }
        public externally_defined_conversion_based_unit get_externally_defined_conversion_based_unit() { return new externally_defined_conversion_based_unit (getEntityInstance("EXTERNALLY_DEFINED_CONVERSION_BASED_UNIT")); }
        public externally_defined_conversion_based_unit _externally_defined_conversion_based_unit { get { return get_externally_defined_conversion_based_unit(); } }
        public void put_externally_defined_conversion_based_unit(externally_defined_conversion_based_unit inst) { putEntityInstance("EXTERNALLY_DEFINED_CONVERSION_BASED_UNIT", inst); }

        public bool is_externally_defined_general_property() { return IsADBEntity("externally_defined_general_property"); }
        public bool _is_externally_defined_general_property { get { return is_externally_defined_general_property(); } }
        public externally_defined_general_property get_externally_defined_general_property() { return new externally_defined_general_property (getEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY")); }
        public externally_defined_general_property _externally_defined_general_property { get { return get_externally_defined_general_property(); } }
        public void put_externally_defined_general_property(externally_defined_general_property inst) { putEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY", inst); }

        public bool is_externally_defined_picture_representation_item() { return IsADBEntity("externally_defined_picture_representation_item"); }
        public bool _is_externally_defined_picture_representation_item { get { return is_externally_defined_picture_representation_item(); } }
        public externally_defined_picture_representation_item get_externally_defined_picture_representation_item() { return new externally_defined_picture_representation_item (getEntityInstance("EXTERNALLY_DEFINED_PICTURE_REPRESENTATION_ITEM")); }
        public externally_defined_picture_representation_item _externally_defined_picture_representation_item { get { return get_externally_defined_picture_representation_item(); } }
        public void put_externally_defined_picture_representation_item(externally_defined_picture_representation_item inst) { putEntityInstance("EXTERNALLY_DEFINED_PICTURE_REPRESENTATION_ITEM", inst); }

        public bool is_externally_defined_representation_item() { return IsADBEntity("externally_defined_representation_item"); }
        public bool _is_externally_defined_representation_item { get { return is_externally_defined_representation_item(); } }
        public externally_defined_representation_item get_externally_defined_representation_item() { return new externally_defined_representation_item (getEntityInstance("EXTERNALLY_DEFINED_REPRESENTATION_ITEM")); }
        public externally_defined_representation_item _externally_defined_representation_item { get { return get_externally_defined_representation_item(); } }
        public void put_externally_defined_representation_item(externally_defined_representation_item inst) { putEntityInstance("EXTERNALLY_DEFINED_REPRESENTATION_ITEM", inst); }

        public bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        public bool _is_organizational_address { get { return is_organizational_address(); } }
        public organizational_address get_organizational_address() { return new organizational_address (getEntityInstance("ORGANIZATIONAL_ADDRESS")); }
        public organizational_address _organizational_address { get { return get_organizational_address(); } }
        public void put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_trimmed_curve() { return IsADBEntity("trimmed_curve"); }
        public bool _is_trimmed_curve { get { return is_trimmed_curve(); } }
        public trimmed_curve get_trimmed_curve() { return new trimmed_curve (getEntityInstance("TRIMMED_CURVE")); }
        public trimmed_curve _trimmed_curve { get { return get_trimmed_curve(); } }
        public void put_trimmed_curve(trimmed_curve inst) { putEntityInstance("TRIMMED_CURVE", inst); }

        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class external_identification_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public external_identification_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public external_identification_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public external_identification_item_get() : base(null) { }

        public bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        public bool _is_action_relationship { get { return is_action_relationship(); } }
        public action_relationship get_action_relationship() { return new action_relationship (getEntityInstance("ACTION_RELATIONSHIP")); }
        public action_relationship _action_relationship { get { return get_action_relationship(); } }
        public bool is_action_request_status() { return IsADBEntity("action_request_status"); }
        public bool _is_action_request_status { get { return is_action_request_status(); } }
        public action_request_status get_action_request_status() { return new action_request_status (getEntityInstance("ACTION_REQUEST_STATUS")); }
        public action_request_status _action_request_status { get { return get_action_request_status(); } }
        public bool is_applied_organization_assignment() { return IsADBEntity("applied_organization_assignment"); }
        public bool _is_applied_organization_assignment { get { return is_applied_organization_assignment(); } }
        public applied_organization_assignment get_applied_organization_assignment() { return new applied_organization_assignment (getEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT")); }
        public applied_organization_assignment _applied_organization_assignment { get { return get_applied_organization_assignment(); } }
        public bool is_applied_person_and_organization_assignment() { return IsADBEntity("applied_person_and_organization_assignment"); }
        public bool _is_applied_person_and_organization_assignment { get { return is_applied_person_and_organization_assignment(); } }
        public applied_person_and_organization_assignment get_applied_person_and_organization_assignment() { return new applied_person_and_organization_assignment (getEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT")); }
        public applied_person_and_organization_assignment _applied_person_and_organization_assignment { get { return get_applied_person_and_organization_assignment(); } }
        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public bool is_date_and_time_assignment() { return IsADBEntity("date_and_time_assignment"); }
        public bool _is_date_and_time_assignment { get { return is_date_and_time_assignment(); } }
        public date_and_time_assignment get_date_and_time_assignment() { return new date_and_time_assignment (getEntityInstance("DATE_AND_TIME_ASSIGNMENT")); }
        public date_and_time_assignment _date_and_time_assignment { get { return get_date_and_time_assignment(); } }
        public bool is_date_assignment() { return IsADBEntity("date_assignment"); }
        public bool _is_date_assignment { get { return is_date_assignment(); } }
        public date_assignment get_date_assignment() { return new date_assignment (getEntityInstance("DATE_ASSIGNMENT")); }
        public date_assignment _date_assignment { get { return get_date_assignment(); } }
        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public bool is_external_source() { return IsADBEntity("external_source"); }
        public bool _is_external_source { get { return is_external_source(); } }
        public external_source get_external_source() { return new external_source (getEntityInstance("EXTERNAL_SOURCE")); }
        public external_source _external_source { get { return get_external_source(); } }
        public bool is_externally_defined_class() { return IsADBEntity("externally_defined_class"); }
        public bool _is_externally_defined_class { get { return is_externally_defined_class(); } }
        public externally_defined_class get_externally_defined_class() { return new externally_defined_class (getEntityInstance("EXTERNALLY_DEFINED_CLASS")); }
        public externally_defined_class _externally_defined_class { get { return get_externally_defined_class(); } }
        public bool is_externally_defined_context_dependent_unit() { return IsADBEntity("externally_defined_context_dependent_unit"); }
        public bool _is_externally_defined_context_dependent_unit { get { return is_externally_defined_context_dependent_unit(); } }
        public externally_defined_context_dependent_unit get_externally_defined_context_dependent_unit() { return new externally_defined_context_dependent_unit (getEntityInstance("EXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT")); }
        public externally_defined_context_dependent_unit _externally_defined_context_dependent_unit { get { return get_externally_defined_context_dependent_unit(); } }
        public bool is_externally_defined_conversion_based_unit() { return IsADBEntity("externally_defined_conversion_based_unit"); }
        public bool _is_externally_defined_conversion_based_unit { get { return is_externally_defined_conversion_based_unit(); } }
        public externally_defined_conversion_based_unit get_externally_defined_conversion_based_unit() { return new externally_defined_conversion_based_unit (getEntityInstance("EXTERNALLY_DEFINED_CONVERSION_BASED_UNIT")); }
        public externally_defined_conversion_based_unit _externally_defined_conversion_based_unit { get { return get_externally_defined_conversion_based_unit(); } }
        public bool is_externally_defined_general_property() { return IsADBEntity("externally_defined_general_property"); }
        public bool _is_externally_defined_general_property { get { return is_externally_defined_general_property(); } }
        public externally_defined_general_property get_externally_defined_general_property() { return new externally_defined_general_property (getEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY")); }
        public externally_defined_general_property _externally_defined_general_property { get { return get_externally_defined_general_property(); } }
        public bool is_externally_defined_picture_representation_item() { return IsADBEntity("externally_defined_picture_representation_item"); }
        public bool _is_externally_defined_picture_representation_item { get { return is_externally_defined_picture_representation_item(); } }
        public externally_defined_picture_representation_item get_externally_defined_picture_representation_item() { return new externally_defined_picture_representation_item (getEntityInstance("EXTERNALLY_DEFINED_PICTURE_REPRESENTATION_ITEM")); }
        public externally_defined_picture_representation_item _externally_defined_picture_representation_item { get { return get_externally_defined_picture_representation_item(); } }
        public bool is_externally_defined_representation_item() { return IsADBEntity("externally_defined_representation_item"); }
        public bool _is_externally_defined_representation_item { get { return is_externally_defined_representation_item(); } }
        public externally_defined_representation_item get_externally_defined_representation_item() { return new externally_defined_representation_item (getEntityInstance("EXTERNALLY_DEFINED_REPRESENTATION_ITEM")); }
        public externally_defined_representation_item _externally_defined_representation_item { get { return get_externally_defined_representation_item(); } }
        public bool is_organizational_address() { return IsADBEntity("organizational_address"); }
        public bool _is_organizational_address { get { return is_organizational_address(); } }
        public organizational_address get_organizational_address() { return new organizational_address (getEntityInstance("ORGANIZATIONAL_ADDRESS")); }
        public organizational_address _organizational_address { get { return get_organizational_address(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_trimmed_curve() { return IsADBEntity("trimmed_curve"); }
        public bool _is_trimmed_curve { get { return is_trimmed_curve(); } }
        public trimmed_curve get_trimmed_curve() { return new trimmed_curve (getEntityInstance("TRIMMED_CURVE")); }
        public trimmed_curve _trimmed_curve { get { return get_trimmed_curve(); } }
        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class external_identification_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public external_identification_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public external_identification_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public external_identification_item_put() : base(null) { }

        public void put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
        public void put_action_request_status(action_request_status inst) { putEntityInstance("ACTION_REQUEST_STATUS", inst); }
        public void put_applied_organization_assignment(applied_organization_assignment inst) { putEntityInstance("APPLIED_ORGANIZATION_ASSIGNMENT", inst); }
        public void put_applied_person_and_organization_assignment(applied_person_and_organization_assignment inst) { putEntityInstance("APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT", inst); }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
        public void put_date_and_time_assignment(date_and_time_assignment inst) { putEntityInstance("DATE_AND_TIME_ASSIGNMENT", inst); }
        public void put_date_assignment(date_assignment inst) { putEntityInstance("DATE_ASSIGNMENT", inst); }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
        public void put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
        public void put_externally_defined_class(externally_defined_class inst) { putEntityInstance("EXTERNALLY_DEFINED_CLASS", inst); }
        public void put_externally_defined_context_dependent_unit(externally_defined_context_dependent_unit inst) { putEntityInstance("EXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT", inst); }
        public void put_externally_defined_conversion_based_unit(externally_defined_conversion_based_unit inst) { putEntityInstance("EXTERNALLY_DEFINED_CONVERSION_BASED_UNIT", inst); }
        public void put_externally_defined_general_property(externally_defined_general_property inst) { putEntityInstance("EXTERNALLY_DEFINED_GENERAL_PROPERTY", inst); }
        public void put_externally_defined_picture_representation_item(externally_defined_picture_representation_item inst) { putEntityInstance("EXTERNALLY_DEFINED_PICTURE_REPRESENTATION_ITEM", inst); }
        public void put_externally_defined_representation_item(externally_defined_representation_item inst) { putEntityInstance("EXTERNALLY_DEFINED_REPRESENTATION_ITEM", inst); }
        public void put_organizational_address(organizational_address inst) { putEntityInstance("ORGANIZATIONAL_ADDRESS", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_trimmed_curve(trimmed_curve inst) { putEntityInstance("TRIMMED_CURVE", inst); }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class fill_area_style_tile_shape_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public fill_area_style_tile_shape_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public fill_area_style_tile_shape_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public fill_area_style_tile_shape_select() : base(null) { }


        public bool is_fill_area_style_tile_curve_with_style() { return IsADBEntity("fill_area_style_tile_curve_with_style"); }
        public bool _is_fill_area_style_tile_curve_with_style { get { return is_fill_area_style_tile_curve_with_style(); } }
        public fill_area_style_tile_curve_with_style get_fill_area_style_tile_curve_with_style() { return new fill_area_style_tile_curve_with_style (getEntityInstance("FILL_AREA_STYLE_TILE_CURVE_WITH_STYLE")); }
        public fill_area_style_tile_curve_with_style _fill_area_style_tile_curve_with_style { get { return get_fill_area_style_tile_curve_with_style(); } }
        public void put_fill_area_style_tile_curve_with_style(fill_area_style_tile_curve_with_style inst) { putEntityInstance("FILL_AREA_STYLE_TILE_CURVE_WITH_STYLE", inst); }

        public bool is_fill_area_style_tile_coloured_region() { return IsADBEntity("fill_area_style_tile_coloured_region"); }
        public bool _is_fill_area_style_tile_coloured_region { get { return is_fill_area_style_tile_coloured_region(); } }
        public fill_area_style_tile_coloured_region get_fill_area_style_tile_coloured_region() { return new fill_area_style_tile_coloured_region (getEntityInstance("FILL_AREA_STYLE_TILE_COLOURED_REGION")); }
        public fill_area_style_tile_coloured_region _fill_area_style_tile_coloured_region { get { return get_fill_area_style_tile_coloured_region(); } }
        public void put_fill_area_style_tile_coloured_region(fill_area_style_tile_coloured_region inst) { putEntityInstance("FILL_AREA_STYLE_TILE_COLOURED_REGION", inst); }

        public bool is_fill_area_style_tile_symbol_with_style() { return IsADBEntity("fill_area_style_tile_symbol_with_style"); }
        public bool _is_fill_area_style_tile_symbol_with_style { get { return is_fill_area_style_tile_symbol_with_style(); } }
        public fill_area_style_tile_symbol_with_style get_fill_area_style_tile_symbol_with_style() { return new fill_area_style_tile_symbol_with_style (getEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE")); }
        public fill_area_style_tile_symbol_with_style _fill_area_style_tile_symbol_with_style { get { return get_fill_area_style_tile_symbol_with_style(); } }
        public void put_fill_area_style_tile_symbol_with_style(fill_area_style_tile_symbol_with_style inst) { putEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE", inst); }

        public bool is_pre_defined_tile() { return IsADBEntity("pre_defined_tile"); }
        public bool _is_pre_defined_tile { get { return is_pre_defined_tile(); } }
        public pre_defined_tile get_pre_defined_tile() { return new pre_defined_tile (getEntityInstance("PRE_DEFINED_TILE")); }
        public pre_defined_tile _pre_defined_tile { get { return get_pre_defined_tile(); } }
        public void put_pre_defined_tile(pre_defined_tile inst) { putEntityInstance("PRE_DEFINED_TILE", inst); }

        public bool is_externally_defined_tile() { return IsADBEntity("externally_defined_tile"); }
        public bool _is_externally_defined_tile { get { return is_externally_defined_tile(); } }
        public externally_defined_tile get_externally_defined_tile() { return new externally_defined_tile (getEntityInstance("EXTERNALLY_DEFINED_TILE")); }
        public externally_defined_tile _externally_defined_tile { get { return get_externally_defined_tile(); } }
        public void put_externally_defined_tile(externally_defined_tile inst) { putEntityInstance("EXTERNALLY_DEFINED_TILE", inst); }
        };


    public class fill_area_style_tile_shape_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public fill_area_style_tile_shape_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public fill_area_style_tile_shape_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public fill_area_style_tile_shape_select_get() : base(null) { }

        public bool is_fill_area_style_tile_curve_with_style() { return IsADBEntity("fill_area_style_tile_curve_with_style"); }
        public bool _is_fill_area_style_tile_curve_with_style { get { return is_fill_area_style_tile_curve_with_style(); } }
        public fill_area_style_tile_curve_with_style get_fill_area_style_tile_curve_with_style() { return new fill_area_style_tile_curve_with_style (getEntityInstance("FILL_AREA_STYLE_TILE_CURVE_WITH_STYLE")); }
        public fill_area_style_tile_curve_with_style _fill_area_style_tile_curve_with_style { get { return get_fill_area_style_tile_curve_with_style(); } }
        public bool is_fill_area_style_tile_coloured_region() { return IsADBEntity("fill_area_style_tile_coloured_region"); }
        public bool _is_fill_area_style_tile_coloured_region { get { return is_fill_area_style_tile_coloured_region(); } }
        public fill_area_style_tile_coloured_region get_fill_area_style_tile_coloured_region() { return new fill_area_style_tile_coloured_region (getEntityInstance("FILL_AREA_STYLE_TILE_COLOURED_REGION")); }
        public fill_area_style_tile_coloured_region _fill_area_style_tile_coloured_region { get { return get_fill_area_style_tile_coloured_region(); } }
        public bool is_fill_area_style_tile_symbol_with_style() { return IsADBEntity("fill_area_style_tile_symbol_with_style"); }
        public bool _is_fill_area_style_tile_symbol_with_style { get { return is_fill_area_style_tile_symbol_with_style(); } }
        public fill_area_style_tile_symbol_with_style get_fill_area_style_tile_symbol_with_style() { return new fill_area_style_tile_symbol_with_style (getEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE")); }
        public fill_area_style_tile_symbol_with_style _fill_area_style_tile_symbol_with_style { get { return get_fill_area_style_tile_symbol_with_style(); } }
        public bool is_pre_defined_tile() { return IsADBEntity("pre_defined_tile"); }
        public bool _is_pre_defined_tile { get { return is_pre_defined_tile(); } }
        public pre_defined_tile get_pre_defined_tile() { return new pre_defined_tile (getEntityInstance("PRE_DEFINED_TILE")); }
        public pre_defined_tile _pre_defined_tile { get { return get_pre_defined_tile(); } }
        public bool is_externally_defined_tile() { return IsADBEntity("externally_defined_tile"); }
        public bool _is_externally_defined_tile { get { return is_externally_defined_tile(); } }
        public externally_defined_tile get_externally_defined_tile() { return new externally_defined_tile (getEntityInstance("EXTERNALLY_DEFINED_TILE")); }
        public externally_defined_tile _externally_defined_tile { get { return get_externally_defined_tile(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class fill_area_style_tile_shape_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public fill_area_style_tile_shape_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public fill_area_style_tile_shape_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public fill_area_style_tile_shape_select_put() : base(null) { }

        public void put_fill_area_style_tile_curve_with_style(fill_area_style_tile_curve_with_style inst) { putEntityInstance("FILL_AREA_STYLE_TILE_CURVE_WITH_STYLE", inst); }
        public void put_fill_area_style_tile_coloured_region(fill_area_style_tile_coloured_region inst) { putEntityInstance("FILL_AREA_STYLE_TILE_COLOURED_REGION", inst); }
        public void put_fill_area_style_tile_symbol_with_style(fill_area_style_tile_symbol_with_style inst) { putEntityInstance("FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE", inst); }
        public void put_pre_defined_tile(pre_defined_tile inst) { putEntityInstance("PRE_DEFINED_TILE", inst); }
        public void put_externally_defined_tile(externally_defined_tile inst) { putEntityInstance("EXTERNALLY_DEFINED_TILE", inst); }
        };


    public class fill_style_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public fill_style_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public fill_style_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public fill_style_select() : base(null) { }


        public bool is_fill_area_style_colour() { return IsADBEntity("fill_area_style_colour"); }
        public bool _is_fill_area_style_colour { get { return is_fill_area_style_colour(); } }
        public fill_area_style_colour get_fill_area_style_colour() { return new fill_area_style_colour (getEntityInstance("FILL_AREA_STYLE_COLOUR")); }
        public fill_area_style_colour _fill_area_style_colour { get { return get_fill_area_style_colour(); } }
        public void put_fill_area_style_colour(fill_area_style_colour inst) { putEntityInstance("FILL_AREA_STYLE_COLOUR", inst); }

        public bool is_externally_defined_tile_style() { return IsADBEntity("externally_defined_tile_style"); }
        public bool _is_externally_defined_tile_style { get { return is_externally_defined_tile_style(); } }
        public externally_defined_tile_style get_externally_defined_tile_style() { return new externally_defined_tile_style (getEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE")); }
        public externally_defined_tile_style _externally_defined_tile_style { get { return get_externally_defined_tile_style(); } }
        public void put_externally_defined_tile_style(externally_defined_tile_style inst) { putEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE", inst); }

        public bool is_fill_area_style_tiles() { return IsADBEntity("fill_area_style_tiles"); }
        public bool _is_fill_area_style_tiles { get { return is_fill_area_style_tiles(); } }
        public fill_area_style_tiles get_fill_area_style_tiles() { return new fill_area_style_tiles (getEntityInstance("FILL_AREA_STYLE_TILES")); }
        public fill_area_style_tiles _fill_area_style_tiles { get { return get_fill_area_style_tiles(); } }
        public void put_fill_area_style_tiles(fill_area_style_tiles inst) { putEntityInstance("FILL_AREA_STYLE_TILES", inst); }

        public bool is_externally_defined_hatch_style() { return IsADBEntity("externally_defined_hatch_style"); }
        public bool _is_externally_defined_hatch_style { get { return is_externally_defined_hatch_style(); } }
        public externally_defined_hatch_style get_externally_defined_hatch_style() { return new externally_defined_hatch_style (getEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE")); }
        public externally_defined_hatch_style _externally_defined_hatch_style { get { return get_externally_defined_hatch_style(); } }
        public void put_externally_defined_hatch_style(externally_defined_hatch_style inst) { putEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE", inst); }

        public bool is_fill_area_style_hatching() { return IsADBEntity("fill_area_style_hatching"); }
        public bool _is_fill_area_style_hatching { get { return is_fill_area_style_hatching(); } }
        public fill_area_style_hatching get_fill_area_style_hatching() { return new fill_area_style_hatching (getEntityInstance("FILL_AREA_STYLE_HATCHING")); }
        public fill_area_style_hatching _fill_area_style_hatching { get { return get_fill_area_style_hatching(); } }
        public void put_fill_area_style_hatching(fill_area_style_hatching inst) { putEntityInstance("FILL_AREA_STYLE_HATCHING", inst); }
        };


    public class fill_style_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public fill_style_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public fill_style_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public fill_style_select_get() : base(null) { }

        public bool is_fill_area_style_colour() { return IsADBEntity("fill_area_style_colour"); }
        public bool _is_fill_area_style_colour { get { return is_fill_area_style_colour(); } }
        public fill_area_style_colour get_fill_area_style_colour() { return new fill_area_style_colour (getEntityInstance("FILL_AREA_STYLE_COLOUR")); }
        public fill_area_style_colour _fill_area_style_colour { get { return get_fill_area_style_colour(); } }
        public bool is_externally_defined_tile_style() { return IsADBEntity("externally_defined_tile_style"); }
        public bool _is_externally_defined_tile_style { get { return is_externally_defined_tile_style(); } }
        public externally_defined_tile_style get_externally_defined_tile_style() { return new externally_defined_tile_style (getEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE")); }
        public externally_defined_tile_style _externally_defined_tile_style { get { return get_externally_defined_tile_style(); } }
        public bool is_fill_area_style_tiles() { return IsADBEntity("fill_area_style_tiles"); }
        public bool _is_fill_area_style_tiles { get { return is_fill_area_style_tiles(); } }
        public fill_area_style_tiles get_fill_area_style_tiles() { return new fill_area_style_tiles (getEntityInstance("FILL_AREA_STYLE_TILES")); }
        public fill_area_style_tiles _fill_area_style_tiles { get { return get_fill_area_style_tiles(); } }
        public bool is_externally_defined_hatch_style() { return IsADBEntity("externally_defined_hatch_style"); }
        public bool _is_externally_defined_hatch_style { get { return is_externally_defined_hatch_style(); } }
        public externally_defined_hatch_style get_externally_defined_hatch_style() { return new externally_defined_hatch_style (getEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE")); }
        public externally_defined_hatch_style _externally_defined_hatch_style { get { return get_externally_defined_hatch_style(); } }
        public bool is_fill_area_style_hatching() { return IsADBEntity("fill_area_style_hatching"); }
        public bool _is_fill_area_style_hatching { get { return is_fill_area_style_hatching(); } }
        public fill_area_style_hatching get_fill_area_style_hatching() { return new fill_area_style_hatching (getEntityInstance("FILL_AREA_STYLE_HATCHING")); }
        public fill_area_style_hatching _fill_area_style_hatching { get { return get_fill_area_style_hatching(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class fill_style_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public fill_style_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public fill_style_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public fill_style_select_put() : base(null) { }

        public void put_fill_area_style_colour(fill_area_style_colour inst) { putEntityInstance("FILL_AREA_STYLE_COLOUR", inst); }
        public void put_externally_defined_tile_style(externally_defined_tile_style inst) { putEntityInstance("EXTERNALLY_DEFINED_TILE_STYLE", inst); }
        public void put_fill_area_style_tiles(fill_area_style_tiles inst) { putEntityInstance("FILL_AREA_STYLE_TILES", inst); }
        public void put_externally_defined_hatch_style(externally_defined_hatch_style inst) { putEntityInstance("EXTERNALLY_DEFINED_HATCH_STYLE", inst); }
        public void put_fill_area_style_hatching(fill_area_style_hatching inst) { putEntityInstance("FILL_AREA_STYLE_HATCHING", inst); }
        };


    public class font_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public font_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public font_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public font_select() : base(null) { }


        public bool is_pre_defined_text_font() { return IsADBEntity("pre_defined_text_font"); }
        public bool _is_pre_defined_text_font { get { return is_pre_defined_text_font(); } }
        public pre_defined_text_font get_pre_defined_text_font() { return new pre_defined_text_font (getEntityInstance("PRE_DEFINED_TEXT_FONT")); }
        public pre_defined_text_font _pre_defined_text_font { get { return get_pre_defined_text_font(); } }
        public void put_pre_defined_text_font(pre_defined_text_font inst) { putEntityInstance("PRE_DEFINED_TEXT_FONT", inst); }

        public bool is_externally_defined_text_font() { return IsADBEntity("externally_defined_text_font"); }
        public bool _is_externally_defined_text_font { get { return is_externally_defined_text_font(); } }
        public externally_defined_text_font get_externally_defined_text_font() { return new externally_defined_text_font (getEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT")); }
        public externally_defined_text_font _externally_defined_text_font { get { return get_externally_defined_text_font(); } }
        public void put_externally_defined_text_font(externally_defined_text_font inst) { putEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT", inst); }

        public bool is_text_font() { return IsADBEntity("text_font"); }
        public bool _is_text_font { get { return is_text_font(); } }
        public text_font get_text_font() { return new text_font (getEntityInstance("TEXT_FONT")); }
        public text_font _text_font { get { return get_text_font(); } }
        public void put_text_font(text_font inst) { putEntityInstance("TEXT_FONT", inst); }
        };


    public class font_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public font_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public font_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public font_select_get() : base(null) { }

        public bool is_pre_defined_text_font() { return IsADBEntity("pre_defined_text_font"); }
        public bool _is_pre_defined_text_font { get { return is_pre_defined_text_font(); } }
        public pre_defined_text_font get_pre_defined_text_font() { return new pre_defined_text_font (getEntityInstance("PRE_DEFINED_TEXT_FONT")); }
        public pre_defined_text_font _pre_defined_text_font { get { return get_pre_defined_text_font(); } }
        public bool is_externally_defined_text_font() { return IsADBEntity("externally_defined_text_font"); }
        public bool _is_externally_defined_text_font { get { return is_externally_defined_text_font(); } }
        public externally_defined_text_font get_externally_defined_text_font() { return new externally_defined_text_font (getEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT")); }
        public externally_defined_text_font _externally_defined_text_font { get { return get_externally_defined_text_font(); } }
        public bool is_text_font() { return IsADBEntity("text_font"); }
        public bool _is_text_font { get { return is_text_font(); } }
        public text_font get_text_font() { return new text_font (getEntityInstance("TEXT_FONT")); }
        public text_font _text_font { get { return get_text_font(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class font_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public font_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public font_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public font_select_put() : base(null) { }

        public void put_pre_defined_text_font(pre_defined_text_font inst) { putEntityInstance("PRE_DEFINED_TEXT_FONT", inst); }
        public void put_externally_defined_text_font(externally_defined_text_font inst) { putEntityInstance("EXTERNALLY_DEFINED_TEXT_FONT", inst); }
        public void put_text_font(text_font inst) { putEntityInstance("TEXT_FONT", inst); }
        };


    public class founded_item_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public founded_item_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public founded_item_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public founded_item_select() : base(null) { }


        public bool is_founded_item() { return IsADBEntity("founded_item"); }
        public bool _is_founded_item { get { return is_founded_item(); } }
        public founded_item get_founded_item() { return new founded_item (getEntityInstance("FOUNDED_ITEM")); }
        public founded_item _founded_item { get { return get_founded_item(); } }
        public void put_founded_item(founded_item inst) { putEntityInstance("FOUNDED_ITEM", inst); }

        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
        };


    public class founded_item_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public founded_item_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public founded_item_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public founded_item_select_get() : base(null) { }

        public bool is_founded_item() { return IsADBEntity("founded_item"); }
        public bool _is_founded_item { get { return is_founded_item(); } }
        public founded_item get_founded_item() { return new founded_item (getEntityInstance("FOUNDED_ITEM")); }
        public founded_item _founded_item { get { return get_founded_item(); } }
        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class founded_item_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public founded_item_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public founded_item_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public founded_item_select_put() : base(null) { }

        public void put_founded_item(founded_item inst) { putEntityInstance("FOUNDED_ITEM", inst); }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
        };


    public class generalized_surface_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public generalized_surface_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public generalized_surface_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public generalized_surface_select() : base(null) { }


        public bool is_surface() { return IsADBEntity("surface"); }
        public bool _is_surface { get { return is_surface(); } }
        public surface get_surface() { return new surface (getEntityInstance("SURFACE")); }
        public surface _surface { get { return get_surface(); } }
        public void put_surface(surface inst) { putEntityInstance("SURFACE", inst); }

        public bool is_face_surface() { return IsADBEntity("face_surface"); }
        public bool _is_face_surface { get { return is_face_surface(); } }
        public face_surface get_face_surface() { return new face_surface (getEntityInstance("FACE_SURFACE")); }
        public face_surface _face_surface { get { return get_face_surface(); } }
        public void put_face_surface(face_surface inst) { putEntityInstance("FACE_SURFACE", inst); }

        public bool is_surfaced_open_shell() { return IsADBEntity("surfaced_open_shell"); }
        public bool _is_surfaced_open_shell { get { return is_surfaced_open_shell(); } }
        public surfaced_open_shell get_surfaced_open_shell() { return new surfaced_open_shell (getEntityInstance("SURFACED_OPEN_SHELL")); }
        public surfaced_open_shell _surfaced_open_shell { get { return get_surfaced_open_shell(); } }
        public void put_surfaced_open_shell(surfaced_open_shell inst) { putEntityInstance("SURFACED_OPEN_SHELL", inst); }
        };


    public class generalized_surface_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public generalized_surface_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public generalized_surface_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public generalized_surface_select_get() : base(null) { }

        public bool is_surface() { return IsADBEntity("surface"); }
        public bool _is_surface { get { return is_surface(); } }
        public surface get_surface() { return new surface (getEntityInstance("SURFACE")); }
        public surface _surface { get { return get_surface(); } }
        public bool is_face_surface() { return IsADBEntity("face_surface"); }
        public bool _is_face_surface { get { return is_face_surface(); } }
        public face_surface get_face_surface() { return new face_surface (getEntityInstance("FACE_SURFACE")); }
        public face_surface _face_surface { get { return get_face_surface(); } }
        public bool is_surfaced_open_shell() { return IsADBEntity("surfaced_open_shell"); }
        public bool _is_surfaced_open_shell { get { return is_surfaced_open_shell(); } }
        public surfaced_open_shell get_surfaced_open_shell() { return new surfaced_open_shell (getEntityInstance("SURFACED_OPEN_SHELL")); }
        public surfaced_open_shell _surfaced_open_shell { get { return get_surfaced_open_shell(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class generalized_surface_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public generalized_surface_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public generalized_surface_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public generalized_surface_select_put() : base(null) { }

        public void put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
        public void put_face_surface(face_surface inst) { putEntityInstance("FACE_SURFACE", inst); }
        public void put_surfaced_open_shell(surfaced_open_shell inst) { putEntityInstance("SURFACED_OPEN_SHELL", inst); }
        };


    public class geometric_item_specific_usage_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public geometric_item_specific_usage_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public geometric_item_specific_usage_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public geometric_item_specific_usage_select() : base(null) { }


        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }

        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        };


    public class geometric_item_specific_usage_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public geometric_item_specific_usage_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public geometric_item_specific_usage_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public geometric_item_specific_usage_select_get() : base(null) { }

        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class geometric_item_specific_usage_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public geometric_item_specific_usage_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public geometric_item_specific_usage_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public geometric_item_specific_usage_select_put() : base(null) { }

        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        };


    public class geometric_set_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public geometric_set_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public geometric_set_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public geometric_set_select() : base(null) { }


        public bool is_point() { return IsADBEntity("point"); }
        public bool _is_point { get { return is_point(); } }
        public point get_point() { return new point (getEntityInstance("POINT")); }
        public point _point { get { return get_point(); } }
        public void put_point(point inst) { putEntityInstance("POINT", inst); }

        public bool is_curve() { return IsADBEntity("curve"); }
        public bool _is_curve { get { return is_curve(); } }
        public curve get_curve() { return new curve (getEntityInstance("CURVE")); }
        public curve _curve { get { return get_curve(); } }
        public void put_curve(curve inst) { putEntityInstance("CURVE", inst); }

        public bool is_surface() { return IsADBEntity("surface"); }
        public bool _is_surface { get { return is_surface(); } }
        public surface get_surface() { return new surface (getEntityInstance("SURFACE")); }
        public surface _surface { get { return get_surface(); } }
        public void put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
        };


    public class geometric_set_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public geometric_set_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public geometric_set_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public geometric_set_select_get() : base(null) { }

        public bool is_point() { return IsADBEntity("point"); }
        public bool _is_point { get { return is_point(); } }
        public point get_point() { return new point (getEntityInstance("POINT")); }
        public point _point { get { return get_point(); } }
        public bool is_curve() { return IsADBEntity("curve"); }
        public bool _is_curve { get { return is_curve(); } }
        public curve get_curve() { return new curve (getEntityInstance("CURVE")); }
        public curve _curve { get { return get_curve(); } }
        public bool is_surface() { return IsADBEntity("surface"); }
        public bool _is_surface { get { return is_surface(); } }
        public surface get_surface() { return new surface (getEntityInstance("SURFACE")); }
        public surface _surface { get { return get_surface(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class geometric_set_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public geometric_set_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public geometric_set_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public geometric_set_select_put() : base(null) { }

        public void put_point(point inst) { putEntityInstance("POINT", inst); }
        public void put_curve(curve inst) { putEntityInstance("CURVE", inst); }
        public void put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
        };


    public class groupable_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public groupable_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public groupable_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public groupable_item() : base(null) { }


        public bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        public bool _is_geometric_representation_item { get { return is_geometric_representation_item(); } }
        public geometric_representation_item get_geometric_representation_item() { return new geometric_representation_item (getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); }
        public geometric_representation_item _geometric_representation_item { get { return get_geometric_representation_item(); } }
        public void put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }

        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }

        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }
        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }

        public bool is_package_product_concept_feature() { return IsADBEntity("package_product_concept_feature"); }
        public bool _is_package_product_concept_feature { get { return is_package_product_concept_feature(); } }
        public package_product_concept_feature get_package_product_concept_feature() { return new package_product_concept_feature (getEntityInstance("PACKAGE_PRODUCT_CONCEPT_FEATURE")); }
        public package_product_concept_feature _package_product_concept_feature { get { return get_package_product_concept_feature(); } }
        public void put_package_product_concept_feature(package_product_concept_feature inst) { putEntityInstance("PACKAGE_PRODUCT_CONCEPT_FEATURE", inst); }

        public bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        public bool _is_product_concept_feature { get { return is_product_concept_feature(); } }
        public product_concept_feature get_product_concept_feature() { return new product_concept_feature (getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
        public product_concept_feature _product_concept_feature { get { return get_product_concept_feature(); } }
        public void put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        public bool _is_property_definition_representation { get { return is_property_definition_representation(); } }
        public property_definition_representation get_property_definition_representation() { return new property_definition_representation (getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
        public property_definition_representation _property_definition_representation { get { return get_property_definition_representation(); } }
        public void put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }

        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }

        public bool is_representation_relationship_with_transformation() { return IsADBEntity("representation_relationship_with_transformation"); }
        public bool _is_representation_relationship_with_transformation { get { return is_representation_relationship_with_transformation(); } }
        public representation_relationship_with_transformation get_representation_relationship_with_transformation() { return new representation_relationship_with_transformation (getEntityInstance("REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION")); }
        public representation_relationship_with_transformation _representation_relationship_with_transformation { get { return get_representation_relationship_with_transformation(); } }
        public void put_representation_relationship_with_transformation(representation_relationship_with_transformation inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION", inst); }

        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }

        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }

        public bool is_shape_representation_relationship() { return IsADBEntity("shape_representation_relationship"); }
        public bool _is_shape_representation_relationship { get { return is_shape_representation_relationship(); } }
        public shape_representation_relationship get_shape_representation_relationship() { return new shape_representation_relationship (getEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP")); }
        public shape_representation_relationship _shape_representation_relationship { get { return get_shape_representation_relationship(); } }
        public void put_shape_representation_relationship(shape_representation_relationship inst) { putEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP", inst); }

        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }
        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }

        public bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        public bool _is_topological_representation_item { get { return is_topological_representation_item(); } }
        public topological_representation_item get_topological_representation_item() { return new topological_representation_item (getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); }
        public topological_representation_item _topological_representation_item { get { return get_topological_representation_item(); } }
        public void put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
        };


    public class groupable_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public groupable_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public groupable_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public groupable_item_get() : base(null) { }

        public bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        public bool _is_geometric_representation_item { get { return is_geometric_representation_item(); } }
        public geometric_representation_item get_geometric_representation_item() { return new geometric_representation_item (getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); }
        public geometric_representation_item _geometric_representation_item { get { return get_geometric_representation_item(); } }
        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }
        public bool is_package_product_concept_feature() { return IsADBEntity("package_product_concept_feature"); }
        public bool _is_package_product_concept_feature { get { return is_package_product_concept_feature(); } }
        public package_product_concept_feature get_package_product_concept_feature() { return new package_product_concept_feature (getEntityInstance("PACKAGE_PRODUCT_CONCEPT_FEATURE")); }
        public package_product_concept_feature _package_product_concept_feature { get { return get_package_product_concept_feature(); } }
        public bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        public bool _is_product_concept_feature { get { return is_product_concept_feature(); } }
        public product_concept_feature get_product_concept_feature() { return new product_concept_feature (getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
        public product_concept_feature _product_concept_feature { get { return get_product_concept_feature(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        public bool _is_property_definition_representation { get { return is_property_definition_representation(); } }
        public property_definition_representation get_property_definition_representation() { return new property_definition_representation (getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
        public property_definition_representation _property_definition_representation { get { return get_property_definition_representation(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public bool is_representation_relationship_with_transformation() { return IsADBEntity("representation_relationship_with_transformation"); }
        public bool _is_representation_relationship_with_transformation { get { return is_representation_relationship_with_transformation(); } }
        public representation_relationship_with_transformation get_representation_relationship_with_transformation() { return new representation_relationship_with_transformation (getEntityInstance("REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION")); }
        public representation_relationship_with_transformation _representation_relationship_with_transformation { get { return get_representation_relationship_with_transformation(); } }
        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public bool is_shape_representation_relationship() { return IsADBEntity("shape_representation_relationship"); }
        public bool _is_shape_representation_relationship { get { return is_shape_representation_relationship(); } }
        public shape_representation_relationship get_shape_representation_relationship() { return new shape_representation_relationship (getEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP")); }
        public shape_representation_relationship _shape_representation_relationship { get { return get_shape_representation_relationship(); } }
        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }
        public bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        public bool _is_topological_representation_item { get { return is_topological_representation_item(); } }
        public topological_representation_item get_topological_representation_item() { return new topological_representation_item (getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); }
        public topological_representation_item _topological_representation_item { get { return get_topological_representation_item(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class groupable_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public groupable_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public groupable_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public groupable_item_put() : base(null) { }

        public void put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
        public void put_package_product_concept_feature(package_product_concept_feature inst) { putEntityInstance("PACKAGE_PRODUCT_CONCEPT_FEATURE", inst); }
        public void put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
        public void put_representation_relationship_with_transformation(representation_relationship_with_transformation inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION", inst); }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        public void put_shape_representation_relationship(shape_representation_relationship inst) { putEntityInstance("SHAPE_REPRESENTATION_RELATIONSHIP", inst); }
        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
        public void put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
        };


    public class id_attribute_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public id_attribute_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public id_attribute_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public id_attribute_select() : base(null) { }


        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public void put_action(action inst) { putEntityInstance("ACTION", inst); }

        public bool is_address() { return IsADBEntity("address"); }
        public bool _is_address { get { return is_address(); } }
        public address get_address() { return new address (getEntityInstance("ADDRESS")); }
        public address _address { get { return get_address(); } }
        public void put_address(address inst) { putEntityInstance("ADDRESS", inst); }

        public bool is_product_category() { return IsADBEntity("product_category"); }
        public bool _is_product_category { get { return is_product_category(); } }
        public product_category get_product_category() { return new product_category (getEntityInstance("PRODUCT_CATEGORY")); }
        public product_category _product_category { get { return get_product_category(); } }
        public void put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }

        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }

        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }

        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }

        public bool is_application_context() { return IsADBEntity("application_context"); }
        public bool _is_application_context { get { return is_application_context(); } }
        public application_context get_application_context() { return new application_context (getEntityInstance("APPLICATION_CONTEXT")); }
        public application_context _application_context { get { return get_application_context(); } }
        public void put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }

        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }

        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        };


    public class id_attribute_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public id_attribute_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public id_attribute_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public id_attribute_select_get() : base(null) { }

        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public bool is_address() { return IsADBEntity("address"); }
        public bool _is_address { get { return is_address(); } }
        public address get_address() { return new address (getEntityInstance("ADDRESS")); }
        public address _address { get { return get_address(); } }
        public bool is_product_category() { return IsADBEntity("product_category"); }
        public bool _is_product_category { get { return is_product_category(); } }
        public product_category get_product_category() { return new product_category (getEntityInstance("PRODUCT_CATEGORY")); }
        public product_category _product_category { get { return get_product_category(); } }
        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public bool is_application_context() { return IsADBEntity("application_context"); }
        public bool _is_application_context { get { return is_application_context(); } }
        public application_context get_application_context() { return new application_context (getEntityInstance("APPLICATION_CONTEXT")); }
        public application_context _application_context { get { return get_application_context(); } }
        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class id_attribute_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public id_attribute_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public id_attribute_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public id_attribute_select_put() : base(null) { }

        public void put_action(action inst) { putEntityInstance("ACTION", inst); }
        public void put_address(address inst) { putEntityInstance("ADDRESS", inst); }
        public void put_product_category(product_category inst) { putEntityInstance("PRODUCT_CATEGORY", inst); }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        public void put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        };


    public class instance_usage_context_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public instance_usage_context_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public instance_usage_context_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public instance_usage_context_select() : base(null) { }


        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        public bool _is_product_definition_usage { get { return is_product_definition_usage(); } }
        public product_definition_usage get_product_definition_usage() { return new product_definition_usage (getEntityInstance("PRODUCT_DEFINITION_USAGE")); }
        public product_definition_usage _product_definition_usage { get { return get_product_definition_usage(); } }
        public void put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
        };


    public class instance_usage_context_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public instance_usage_context_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public instance_usage_context_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public instance_usage_context_select_get() : base(null) { }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        public bool _is_product_definition_usage { get { return is_product_definition_usage(); } }
        public product_definition_usage get_product_definition_usage() { return new product_definition_usage (getEntityInstance("PRODUCT_DEFINITION_USAGE")); }
        public product_definition_usage _product_definition_usage { get { return get_product_definition_usage(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class instance_usage_context_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public instance_usage_context_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public instance_usage_context_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public instance_usage_context_select_put() : base(null) { }

        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
        };


    public class invisibility_context : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public invisibility_context(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public invisibility_context(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public invisibility_context() : base(null) { }


        public bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        public bool _is_draughting_model { get { return is_draughting_model(); } }
        public draughting_model get_draughting_model() { return new draughting_model (getEntityInstance("DRAUGHTING_MODEL")); }
        public draughting_model _draughting_model { get { return get_draughting_model(); } }
        public void put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }

        public bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        public bool _is_presentation_representation { get { return is_presentation_representation(); } }
        public presentation_representation get_presentation_representation() { return new presentation_representation (getEntityInstance("PRESENTATION_REPRESENTATION")); }
        public presentation_representation _presentation_representation { get { return get_presentation_representation(); } }
        public void put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }

        public bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        public bool _is_presentation_set { get { return is_presentation_set(); } }
        public presentation_set get_presentation_set() { return new presentation_set (getEntityInstance("PRESENTATION_SET")); }
        public presentation_set _presentation_set { get { return get_presentation_set(); } }
        public void put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
        };


    public class invisibility_context_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public invisibility_context_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public invisibility_context_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public invisibility_context_get() : base(null) { }

        public bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        public bool _is_draughting_model { get { return is_draughting_model(); } }
        public draughting_model get_draughting_model() { return new draughting_model (getEntityInstance("DRAUGHTING_MODEL")); }
        public draughting_model _draughting_model { get { return get_draughting_model(); } }
        public bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        public bool _is_presentation_representation { get { return is_presentation_representation(); } }
        public presentation_representation get_presentation_representation() { return new presentation_representation (getEntityInstance("PRESENTATION_REPRESENTATION")); }
        public presentation_representation _presentation_representation { get { return get_presentation_representation(); } }
        public bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        public bool _is_presentation_set { get { return is_presentation_set(); } }
        public presentation_set get_presentation_set() { return new presentation_set (getEntityInstance("PRESENTATION_SET")); }
        public presentation_set _presentation_set { get { return get_presentation_set(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class invisibility_context_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public invisibility_context_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public invisibility_context_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public invisibility_context_put() : base(null) { }

        public void put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
        public void put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
        public void put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
        };


    public class invisible_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public invisible_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public invisible_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public invisible_item() : base(null) { }


        public bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        public bool _is_draughting_callout { get { return is_draughting_callout(); } }
        public draughting_callout get_draughting_callout() { return new draughting_callout (getEntityInstance("DRAUGHTING_CALLOUT")); }
        public draughting_callout _draughting_callout { get { return get_draughting_callout(); } }
        public void put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }

        public bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        public bool _is_presentation_layer_assignment { get { return is_presentation_layer_assignment(); } }
        public presentation_layer_assignment get_presentation_layer_assignment() { return new presentation_layer_assignment (getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); }
        public presentation_layer_assignment _presentation_layer_assignment { get { return get_presentation_layer_assignment(); } }
        public void put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }

        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }
        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
        };


    public class invisible_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public invisible_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public invisible_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public invisible_item_get() : base(null) { }

        public bool is_draughting_callout() { return IsADBEntity("draughting_callout"); }
        public bool _is_draughting_callout { get { return is_draughting_callout(); } }
        public draughting_callout get_draughting_callout() { return new draughting_callout (getEntityInstance("DRAUGHTING_CALLOUT")); }
        public draughting_callout _draughting_callout { get { return get_draughting_callout(); } }
        public bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        public bool _is_presentation_layer_assignment { get { return is_presentation_layer_assignment(); } }
        public presentation_layer_assignment get_presentation_layer_assignment() { return new presentation_layer_assignment (getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); }
        public presentation_layer_assignment _presentation_layer_assignment { get { return get_presentation_layer_assignment(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class invisible_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public invisible_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public invisible_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public invisible_item_put() : base(null) { }

        public void put_draughting_callout(draughting_callout inst) { putEntityInstance("DRAUGHTING_CALLOUT", inst); }
        public void put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
        };


    public class layered_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public layered_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public layered_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public layered_item() : base(null) { }


        public bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        public bool _is_presentation_representation { get { return is_presentation_representation(); } }
        public presentation_representation get_presentation_representation() { return new presentation_representation (getEntityInstance("PRESENTATION_REPRESENTATION")); }
        public presentation_representation _presentation_representation { get { return get_presentation_representation(); } }
        public void put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }

        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
        };


    public class layered_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public layered_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public layered_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public layered_item_get() : base(null) { }

        public bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        public bool _is_presentation_representation { get { return is_presentation_representation(); } }
        public presentation_representation get_presentation_representation() { return new presentation_representation (getEntityInstance("PRESENTATION_REPRESENTATION")); }
        public presentation_representation _presentation_representation { get { return get_presentation_representation(); } }
        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class layered_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public layered_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public layered_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public layered_item_put() : base(null) { }

        public void put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
        };


    public class marker_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public marker_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public marker_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public marker_select() : base(null) { }


        public bool is_marker_type() { return IsADBType("MARKER_TYPE"); }
        public bool _is_marker_type { get { return is_marker_type(); } }
        public marker_type? get_marker_type() { int ind = getEnumerationIndex("MARKER_TYPE", EnumNames.marker_type_); return EnumValue<marker_type>.FromIndex(ind); }
        public marker_type? _marker_type { get { return get_marker_type(); } }
        public void put_marker_type(marker_type value) { TextValue val = EnumString<marker_type>.FromValue(value, EnumNames.marker_type_); putEnumerationValue("MARKER_TYPE", val); }

        public bool is_pre_defined_marker() { return IsADBEntity("pre_defined_marker"); }
        public bool _is_pre_defined_marker { get { return is_pre_defined_marker(); } }
        public pre_defined_marker get_pre_defined_marker() { return new pre_defined_marker (getEntityInstance("PRE_DEFINED_MARKER")); }
        public pre_defined_marker _pre_defined_marker { get { return get_pre_defined_marker(); } }
        public void put_pre_defined_marker(pre_defined_marker inst) { putEntityInstance("PRE_DEFINED_MARKER", inst); }
        };


    public class marker_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public marker_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public marker_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public marker_select_get() : base(null) { }

        public bool is_marker_type() { return IsADBType("MARKER_TYPE"); }
        public bool _is_marker_type { get { return is_marker_type(); } }
        public marker_type? get_marker_type() { int ind = getEnumerationIndex("MARKER_TYPE", EnumNames.marker_type_); return EnumValue<marker_type>.FromIndex(ind); }
        public marker_type? _marker_type { get { return get_marker_type(); } }
        public bool is_pre_defined_marker() { return IsADBEntity("pre_defined_marker"); }
        public bool _is_pre_defined_marker { get { return is_pre_defined_marker(); } }
        public pre_defined_marker get_pre_defined_marker() { return new pre_defined_marker (getEntityInstance("PRE_DEFINED_MARKER")); }
        public pre_defined_marker _pre_defined_marker { get { return get_pre_defined_marker(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class marker_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public marker_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public marker_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public marker_select_put() : base(null) { }

        public void put_marker_type(marker_type value) { TextValue val = EnumString<marker_type>.FromValue(value, EnumNames.marker_type_); putEnumerationValue("MARKER_TYPE", val); }
        public void put_pre_defined_marker(pre_defined_marker inst) { putEntityInstance("PRE_DEFINED_MARKER", inst); }
        };


    public class measure_value : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public measure_value(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public measure_value(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public measure_value() : base(null) { }


        public bool is_absorbed_dose_measure() { return IsADBType("ABSORBED_DOSE_MEASURE"); }
        //public bool _is_absorbed_dose_measure { get { return is_absorbed_dose_measure(); } }
        public double? get_absorbed_dose_measure() { return get_double("ABSORBED_DOSE_MEASURE", ifcengine.sdaiREAL); }
        public double? _absorbed_dose_measure { get { return get_absorbed_dose_measure(); } }
        public void put_absorbed_dose_measure (double value) { put_double("ABSORBED_DOSE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_dose_equivalent_measure() { return IsADBType("DOSE_EQUIVALENT_MEASURE"); }
        //public bool _is_dose_equivalent_measure { get { return is_dose_equivalent_measure(); } }
        public double? get_dose_equivalent_measure() { return get_double("DOSE_EQUIVALENT_MEASURE", ifcengine.sdaiREAL); }
        public double? _dose_equivalent_measure { get { return get_dose_equivalent_measure(); } }
        public void put_dose_equivalent_measure (double value) { put_double("DOSE_EQUIVALENT_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_radioactivity_measure() { return IsADBType("RADIOACTIVITY_MEASURE"); }
        //public bool _is_radioactivity_measure { get { return is_radioactivity_measure(); } }
        public double? get_radioactivity_measure() { return get_double("RADIOACTIVITY_MEASURE", ifcengine.sdaiREAL); }
        public double? _radioactivity_measure { get { return get_radioactivity_measure(); } }
        public void put_radioactivity_measure (double value) { put_double("RADIOACTIVITY_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_acceleration_measure() { return IsADBType("ACCELERATION_MEASURE"); }
        //public bool _is_acceleration_measure { get { return is_acceleration_measure(); } }
        public double? get_acceleration_measure() { return get_double("ACCELERATION_MEASURE", ifcengine.sdaiREAL); }
        public double? _acceleration_measure { get { return get_acceleration_measure(); } }
        public void put_acceleration_measure (double value) { put_double("ACCELERATION_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_amount_of_substance_measure() { return IsADBType("AMOUNT_OF_SUBSTANCE_MEASURE"); }
        //public bool _is_amount_of_substance_measure { get { return is_amount_of_substance_measure(); } }
        public double? get_amount_of_substance_measure() { return get_double("AMOUNT_OF_SUBSTANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _amount_of_substance_measure { get { return get_amount_of_substance_measure(); } }
        public void put_amount_of_substance_measure (double value) { put_double("AMOUNT_OF_SUBSTANCE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_area_measure() { return IsADBType("AREA_MEASURE"); }
        //public bool _is_area_measure { get { return is_area_measure(); } }
        public double? get_area_measure() { return get_double("AREA_MEASURE", ifcengine.sdaiREAL); }
        public double? _area_measure { get { return get_area_measure(); } }
        public void put_area_measure (double value) { put_double("AREA_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_celsius_temperature_measure() { return IsADBType("CELSIUS_TEMPERATURE_MEASURE"); }
        //public bool _is_celsius_temperature_measure { get { return is_celsius_temperature_measure(); } }
        public double? get_celsius_temperature_measure() { return get_double("CELSIUS_TEMPERATURE_MEASURE", ifcengine.sdaiREAL); }
        public double? _celsius_temperature_measure { get { return get_celsius_temperature_measure(); } }
        public void put_celsius_temperature_measure (double value) { put_double("CELSIUS_TEMPERATURE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_context_dependent_measure() { return IsADBType("CONTEXT_DEPENDENT_MEASURE"); }
        //public bool _is_context_dependent_measure { get { return is_context_dependent_measure(); } }
        public double? get_context_dependent_measure() { return get_double("CONTEXT_DEPENDENT_MEASURE", ifcengine.sdaiREAL); }
        public double? _context_dependent_measure { get { return get_context_dependent_measure(); } }
        public void put_context_dependent_measure (double value) { put_double("CONTEXT_DEPENDENT_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_count_measure() { return IsADBType("COUNT_MEASURE"); }
        //public bool _is_count_measure { get { return is_count_measure(); } }
        public double? get_count_measure() { return get_double("COUNT_MEASURE", ifcengine.sdaiREAL); }
        public double? _count_measure { get { return get_count_measure(); } }
        public void put_count_measure (double value) { put_double("COUNT_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        public bool _isdescriptive_measure { get { return is_descriptive_measure(); } }
        public TextValue get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); }
        public TextValue _descriptive_measure { get { return get_descriptive_measure(); } }
        public void put_descriptive_measure(TextValue value) { putTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING, value); }

        public bool is_capacitance_measure() { return IsADBType("CAPACITANCE_MEASURE"); }
        //public bool _is_capacitance_measure { get { return is_capacitance_measure(); } }
        public double? get_capacitance_measure() { return get_double("CAPACITANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _capacitance_measure { get { return get_capacitance_measure(); } }
        public void put_capacitance_measure (double value) { put_double("CAPACITANCE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_electric_charge_measure() { return IsADBType("ELECTRIC_CHARGE_MEASURE"); }
        //public bool _is_electric_charge_measure { get { return is_electric_charge_measure(); } }
        public double? get_electric_charge_measure() { return get_double("ELECTRIC_CHARGE_MEASURE", ifcengine.sdaiREAL); }
        public double? _electric_charge_measure { get { return get_electric_charge_measure(); } }
        public void put_electric_charge_measure (double value) { put_double("ELECTRIC_CHARGE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_conductance_measure() { return IsADBType("CONDUCTANCE_MEASURE"); }
        //public bool _is_conductance_measure { get { return is_conductance_measure(); } }
        public double? get_conductance_measure() { return get_double("CONDUCTANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _conductance_measure { get { return get_conductance_measure(); } }
        public void put_conductance_measure (double value) { put_double("CONDUCTANCE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_electric_current_measure() { return IsADBType("ELECTRIC_CURRENT_MEASURE"); }
        //public bool _is_electric_current_measure { get { return is_electric_current_measure(); } }
        public double? get_electric_current_measure() { return get_double("ELECTRIC_CURRENT_MEASURE", ifcengine.sdaiREAL); }
        public double? _electric_current_measure { get { return get_electric_current_measure(); } }
        public void put_electric_current_measure (double value) { put_double("ELECTRIC_CURRENT_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_electric_potential_measure() { return IsADBType("ELECTRIC_POTENTIAL_MEASURE"); }
        //public bool _is_electric_potential_measure { get { return is_electric_potential_measure(); } }
        public double? get_electric_potential_measure() { return get_double("ELECTRIC_POTENTIAL_MEASURE", ifcengine.sdaiREAL); }
        public double? _electric_potential_measure { get { return get_electric_potential_measure(); } }
        public void put_electric_potential_measure (double value) { put_double("ELECTRIC_POTENTIAL_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_energy_measure() { return IsADBType("ENERGY_MEASURE"); }
        //public bool _is_energy_measure { get { return is_energy_measure(); } }
        public double? get_energy_measure() { return get_double("ENERGY_MEASURE", ifcengine.sdaiREAL); }
        public double? _energy_measure { get { return get_energy_measure(); } }
        public void put_energy_measure (double value) { put_double("ENERGY_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_magnetic_flux_density_measure() { return IsADBType("MAGNETIC_FLUX_DENSITY_MEASURE"); }
        //public bool _is_magnetic_flux_density_measure { get { return is_magnetic_flux_density_measure(); } }
        public double? get_magnetic_flux_density_measure() { return get_double("MAGNETIC_FLUX_DENSITY_MEASURE", ifcengine.sdaiREAL); }
        public double? _magnetic_flux_density_measure { get { return get_magnetic_flux_density_measure(); } }
        public void put_magnetic_flux_density_measure (double value) { put_double("MAGNETIC_FLUX_DENSITY_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_force_measure() { return IsADBType("FORCE_MEASURE"); }
        //public bool _is_force_measure { get { return is_force_measure(); } }
        public double? get_force_measure() { return get_double("FORCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _force_measure { get { return get_force_measure(); } }
        public void put_force_measure (double value) { put_double("FORCE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_frequency_measure() { return IsADBType("FREQUENCY_MEASURE"); }
        //public bool _is_frequency_measure { get { return is_frequency_measure(); } }
        public double? get_frequency_measure() { return get_double("FREQUENCY_MEASURE", ifcengine.sdaiREAL); }
        public double? _frequency_measure { get { return get_frequency_measure(); } }
        public void put_frequency_measure (double value) { put_double("FREQUENCY_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_illuminance_measure() { return IsADBType("ILLUMINANCE_MEASURE"); }
        //public bool _is_illuminance_measure { get { return is_illuminance_measure(); } }
        public double? get_illuminance_measure() { return get_double("ILLUMINANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _illuminance_measure { get { return get_illuminance_measure(); } }
        public void put_illuminance_measure (double value) { put_double("ILLUMINANCE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_inductance_measure() { return IsADBType("INDUCTANCE_MEASURE"); }
        //public bool _is_inductance_measure { get { return is_inductance_measure(); } }
        public double? get_inductance_measure() { return get_double("INDUCTANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _inductance_measure { get { return get_inductance_measure(); } }
        public void put_inductance_measure (double value) { put_double("INDUCTANCE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        //public bool _is_length_measure { get { return is_length_measure(); } }
        public double? get_length_measure() { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _length_measure { get { return get_length_measure(); } }
        public void put_length_measure (double value) { put_double("LENGTH_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_luminous_flux_measure() { return IsADBType("LUMINOUS_FLUX_MEASURE"); }
        //public bool _is_luminous_flux_measure { get { return is_luminous_flux_measure(); } }
        public double? get_luminous_flux_measure() { return get_double("LUMINOUS_FLUX_MEASURE", ifcengine.sdaiREAL); }
        public double? _luminous_flux_measure { get { return get_luminous_flux_measure(); } }
        public void put_luminous_flux_measure (double value) { put_double("LUMINOUS_FLUX_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_luminous_intensity_measure() { return IsADBType("LUMINOUS_INTENSITY_MEASURE"); }
        //public bool _is_luminous_intensity_measure { get { return is_luminous_intensity_measure(); } }
        public double? get_luminous_intensity_measure() { return get_double("LUMINOUS_INTENSITY_MEASURE", ifcengine.sdaiREAL); }
        public double? _luminous_intensity_measure { get { return get_luminous_intensity_measure(); } }
        public void put_luminous_intensity_measure (double value) { put_double("LUMINOUS_INTENSITY_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_magnetic_flux_measure() { return IsADBType("MAGNETIC_FLUX_MEASURE"); }
        //public bool _is_magnetic_flux_measure { get { return is_magnetic_flux_measure(); } }
        public double? get_magnetic_flux_measure() { return get_double("MAGNETIC_FLUX_MEASURE", ifcengine.sdaiREAL); }
        public double? _magnetic_flux_measure { get { return get_magnetic_flux_measure(); } }
        public void put_magnetic_flux_measure (double value) { put_double("MAGNETIC_FLUX_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_mass_measure() { return IsADBType("MASS_MEASURE"); }
        //public bool _is_mass_measure { get { return is_mass_measure(); } }
        public double? get_mass_measure() { return get_double("MASS_MEASURE", ifcengine.sdaiREAL); }
        public double? _mass_measure { get { return get_mass_measure(); } }
        public void put_mass_measure (double value) { put_double("MASS_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_numeric_measure() { return IsADBType("NUMERIC_MEASURE"); }
        //public bool _is_numeric_measure { get { return is_numeric_measure(); } }
        public double? get_numeric_measure() { return get_double("NUMERIC_MEASURE", ifcengine.sdaiREAL); }
        public double? _numeric_measure { get { return get_numeric_measure(); } }
        public void put_numeric_measure (double value) { put_double("NUMERIC_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_non_negative_length_measure() { return IsADBType("NON_NEGATIVE_LENGTH_MEASURE"); }
        //public bool _is_non_negative_length_measure { get { return is_non_negative_length_measure(); } }
        public double? get_non_negative_length_measure() { return get_double("NON_NEGATIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _non_negative_length_measure { get { return get_non_negative_length_measure(); } }
        public void put_non_negative_length_measure (double value) { put_double("NON_NEGATIVE_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        //public bool _is_parameter_value { get { return is_parameter_value(); } }
        public double? get_parameter_value() { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
        public double? _parameter_value { get { return get_parameter_value(); } }
        public void put_parameter_value (double value) { put_double("PARAMETER_VALUE", ifcengine.sdaiREAL, value); }

        public bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        //public bool _is_plane_angle_measure { get { return is_plane_angle_measure(); } }
        public double? get_plane_angle_measure() { return get_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
        public double? _plane_angle_measure { get { return get_plane_angle_measure(); } }
        public void put_plane_angle_measure (double value) { put_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        //public bool _is_positive_length_measure { get { return is_positive_length_measure(); } }
        public double? get_positive_length_measure() { return get_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _positive_length_measure { get { return get_positive_length_measure(); } }
        public void put_positive_length_measure (double value) { put_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_positive_plane_angle_measure() { return IsADBType("POSITIVE_PLANE_ANGLE_MEASURE"); }
        //public bool _is_positive_plane_angle_measure { get { return is_positive_plane_angle_measure(); } }
        public double? get_positive_plane_angle_measure() { return get_double("POSITIVE_PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
        public double? _positive_plane_angle_measure { get { return get_positive_plane_angle_measure(); } }
        public void put_positive_plane_angle_measure (double value) { put_double("POSITIVE_PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_positive_ratio_measure() { return IsADBType("POSITIVE_RATIO_MEASURE"); }
        //public bool _is_positive_ratio_measure { get { return is_positive_ratio_measure(); } }
        public double? get_positive_ratio_measure() { return get_double("POSITIVE_RATIO_MEASURE", ifcengine.sdaiREAL); }
        public double? _positive_ratio_measure { get { return get_positive_ratio_measure(); } }
        public void put_positive_ratio_measure (double value) { put_double("POSITIVE_RATIO_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_power_measure() { return IsADBType("POWER_MEASURE"); }
        //public bool _is_power_measure { get { return is_power_measure(); } }
        public double? get_power_measure() { return get_double("POWER_MEASURE", ifcengine.sdaiREAL); }
        public double? _power_measure { get { return get_power_measure(); } }
        public void put_power_measure (double value) { put_double("POWER_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_pressure_measure() { return IsADBType("PRESSURE_MEASURE"); }
        //public bool _is_pressure_measure { get { return is_pressure_measure(); } }
        public double? get_pressure_measure() { return get_double("PRESSURE_MEASURE", ifcengine.sdaiREAL); }
        public double? _pressure_measure { get { return get_pressure_measure(); } }
        public void put_pressure_measure (double value) { put_double("PRESSURE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        //public bool _is_ratio_measure { get { return is_ratio_measure(); } }
        public double? get_ratio_measure() { return get_double("RATIO_MEASURE", ifcengine.sdaiREAL); }
        public double? _ratio_measure { get { return get_ratio_measure(); } }
        public void put_ratio_measure (double value) { put_double("RATIO_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_resistance_measure() { return IsADBType("RESISTANCE_MEASURE"); }
        //public bool _is_resistance_measure { get { return is_resistance_measure(); } }
        public double? get_resistance_measure() { return get_double("RESISTANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _resistance_measure { get { return get_resistance_measure(); } }
        public void put_resistance_measure (double value) { put_double("RESISTANCE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_solid_angle_measure() { return IsADBType("SOLID_ANGLE_MEASURE"); }
        //public bool _is_solid_angle_measure { get { return is_solid_angle_measure(); } }
        public double? get_solid_angle_measure() { return get_double("SOLID_ANGLE_MEASURE", ifcengine.sdaiREAL); }
        public double? _solid_angle_measure { get { return get_solid_angle_measure(); } }
        public void put_solid_angle_measure (double value) { put_double("SOLID_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_thermodynamic_temperature_measure() { return IsADBType("THERMODYNAMIC_TEMPERATURE_MEASURE"); }
        //public bool _is_thermodynamic_temperature_measure { get { return is_thermodynamic_temperature_measure(); } }
        public double? get_thermodynamic_temperature_measure() { return get_double("THERMODYNAMIC_TEMPERATURE_MEASURE", ifcengine.sdaiREAL); }
        public double? _thermodynamic_temperature_measure { get { return get_thermodynamic_temperature_measure(); } }
        public void put_thermodynamic_temperature_measure (double value) { put_double("THERMODYNAMIC_TEMPERATURE_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_time_measure() { return IsADBType("TIME_MEASURE"); }
        //public bool _is_time_measure { get { return is_time_measure(); } }
        public double? get_time_measure() { return get_double("TIME_MEASURE", ifcengine.sdaiREAL); }
        public double? _time_measure { get { return get_time_measure(); } }
        public void put_time_measure (double value) { put_double("TIME_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_velocity_measure() { return IsADBType("VELOCITY_MEASURE"); }
        //public bool _is_velocity_measure { get { return is_velocity_measure(); } }
        public double? get_velocity_measure() { return get_double("VELOCITY_MEASURE", ifcengine.sdaiREAL); }
        public double? _velocity_measure { get { return get_velocity_measure(); } }
        public void put_velocity_measure (double value) { put_double("VELOCITY_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_volume_measure() { return IsADBType("VOLUME_MEASURE"); }
        //public bool _is_volume_measure { get { return is_volume_measure(); } }
        public double? get_volume_measure() { return get_double("VOLUME_MEASURE", ifcengine.sdaiREAL); }
        public double? _volume_measure { get { return get_volume_measure(); } }
        public void put_volume_measure (double value) { put_double("VOLUME_MEASURE", ifcengine.sdaiREAL, value); }
        };


    public class measure_value_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public measure_value_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public measure_value_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public measure_value_get() : base(null) { }

        public bool is_absorbed_dose_measure() { return IsADBType("ABSORBED_DOSE_MEASURE"); }
        //public bool _is_absorbed_dose_measure { get { return is_absorbed_dose_measure(); } }
        public double? get_absorbed_dose_measure() { return get_double("ABSORBED_DOSE_MEASURE", ifcengine.sdaiREAL); }
        public double? _absorbed_dose_measure { get { return get_absorbed_dose_measure(); } }
        public bool is_dose_equivalent_measure() { return IsADBType("DOSE_EQUIVALENT_MEASURE"); }
        //public bool _is_dose_equivalent_measure { get { return is_dose_equivalent_measure(); } }
        public double? get_dose_equivalent_measure() { return get_double("DOSE_EQUIVALENT_MEASURE", ifcengine.sdaiREAL); }
        public double? _dose_equivalent_measure { get { return get_dose_equivalent_measure(); } }
        public bool is_radioactivity_measure() { return IsADBType("RADIOACTIVITY_MEASURE"); }
        //public bool _is_radioactivity_measure { get { return is_radioactivity_measure(); } }
        public double? get_radioactivity_measure() { return get_double("RADIOACTIVITY_MEASURE", ifcengine.sdaiREAL); }
        public double? _radioactivity_measure { get { return get_radioactivity_measure(); } }
        public bool is_acceleration_measure() { return IsADBType("ACCELERATION_MEASURE"); }
        //public bool _is_acceleration_measure { get { return is_acceleration_measure(); } }
        public double? get_acceleration_measure() { return get_double("ACCELERATION_MEASURE", ifcengine.sdaiREAL); }
        public double? _acceleration_measure { get { return get_acceleration_measure(); } }
        public bool is_amount_of_substance_measure() { return IsADBType("AMOUNT_OF_SUBSTANCE_MEASURE"); }
        //public bool _is_amount_of_substance_measure { get { return is_amount_of_substance_measure(); } }
        public double? get_amount_of_substance_measure() { return get_double("AMOUNT_OF_SUBSTANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _amount_of_substance_measure { get { return get_amount_of_substance_measure(); } }
        public bool is_area_measure() { return IsADBType("AREA_MEASURE"); }
        //public bool _is_area_measure { get { return is_area_measure(); } }
        public double? get_area_measure() { return get_double("AREA_MEASURE", ifcengine.sdaiREAL); }
        public double? _area_measure { get { return get_area_measure(); } }
        public bool is_celsius_temperature_measure() { return IsADBType("CELSIUS_TEMPERATURE_MEASURE"); }
        //public bool _is_celsius_temperature_measure { get { return is_celsius_temperature_measure(); } }
        public double? get_celsius_temperature_measure() { return get_double("CELSIUS_TEMPERATURE_MEASURE", ifcengine.sdaiREAL); }
        public double? _celsius_temperature_measure { get { return get_celsius_temperature_measure(); } }
        public bool is_context_dependent_measure() { return IsADBType("CONTEXT_DEPENDENT_MEASURE"); }
        //public bool _is_context_dependent_measure { get { return is_context_dependent_measure(); } }
        public double? get_context_dependent_measure() { return get_double("CONTEXT_DEPENDENT_MEASURE", ifcengine.sdaiREAL); }
        public double? _context_dependent_measure { get { return get_context_dependent_measure(); } }
        public bool is_count_measure() { return IsADBType("COUNT_MEASURE"); }
        //public bool _is_count_measure { get { return is_count_measure(); } }
        public double? get_count_measure() { return get_double("COUNT_MEASURE", ifcengine.sdaiREAL); }
        public double? _count_measure { get { return get_count_measure(); } }
        public bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        public bool _isdescriptive_measure { get { return is_descriptive_measure(); } }
        public TextValue get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); }
        public TextValue _descriptive_measure { get { return get_descriptive_measure(); } }
        public bool is_capacitance_measure() { return IsADBType("CAPACITANCE_MEASURE"); }
        //public bool _is_capacitance_measure { get { return is_capacitance_measure(); } }
        public double? get_capacitance_measure() { return get_double("CAPACITANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _capacitance_measure { get { return get_capacitance_measure(); } }
        public bool is_electric_charge_measure() { return IsADBType("ELECTRIC_CHARGE_MEASURE"); }
        //public bool _is_electric_charge_measure { get { return is_electric_charge_measure(); } }
        public double? get_electric_charge_measure() { return get_double("ELECTRIC_CHARGE_MEASURE", ifcengine.sdaiREAL); }
        public double? _electric_charge_measure { get { return get_electric_charge_measure(); } }
        public bool is_conductance_measure() { return IsADBType("CONDUCTANCE_MEASURE"); }
        //public bool _is_conductance_measure { get { return is_conductance_measure(); } }
        public double? get_conductance_measure() { return get_double("CONDUCTANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _conductance_measure { get { return get_conductance_measure(); } }
        public bool is_electric_current_measure() { return IsADBType("ELECTRIC_CURRENT_MEASURE"); }
        //public bool _is_electric_current_measure { get { return is_electric_current_measure(); } }
        public double? get_electric_current_measure() { return get_double("ELECTRIC_CURRENT_MEASURE", ifcengine.sdaiREAL); }
        public double? _electric_current_measure { get { return get_electric_current_measure(); } }
        public bool is_electric_potential_measure() { return IsADBType("ELECTRIC_POTENTIAL_MEASURE"); }
        //public bool _is_electric_potential_measure { get { return is_electric_potential_measure(); } }
        public double? get_electric_potential_measure() { return get_double("ELECTRIC_POTENTIAL_MEASURE", ifcengine.sdaiREAL); }
        public double? _electric_potential_measure { get { return get_electric_potential_measure(); } }
        public bool is_energy_measure() { return IsADBType("ENERGY_MEASURE"); }
        //public bool _is_energy_measure { get { return is_energy_measure(); } }
        public double? get_energy_measure() { return get_double("ENERGY_MEASURE", ifcengine.sdaiREAL); }
        public double? _energy_measure { get { return get_energy_measure(); } }
        public bool is_magnetic_flux_density_measure() { return IsADBType("MAGNETIC_FLUX_DENSITY_MEASURE"); }
        //public bool _is_magnetic_flux_density_measure { get { return is_magnetic_flux_density_measure(); } }
        public double? get_magnetic_flux_density_measure() { return get_double("MAGNETIC_FLUX_DENSITY_MEASURE", ifcengine.sdaiREAL); }
        public double? _magnetic_flux_density_measure { get { return get_magnetic_flux_density_measure(); } }
        public bool is_force_measure() { return IsADBType("FORCE_MEASURE"); }
        //public bool _is_force_measure { get { return is_force_measure(); } }
        public double? get_force_measure() { return get_double("FORCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _force_measure { get { return get_force_measure(); } }
        public bool is_frequency_measure() { return IsADBType("FREQUENCY_MEASURE"); }
        //public bool _is_frequency_measure { get { return is_frequency_measure(); } }
        public double? get_frequency_measure() { return get_double("FREQUENCY_MEASURE", ifcengine.sdaiREAL); }
        public double? _frequency_measure { get { return get_frequency_measure(); } }
        public bool is_illuminance_measure() { return IsADBType("ILLUMINANCE_MEASURE"); }
        //public bool _is_illuminance_measure { get { return is_illuminance_measure(); } }
        public double? get_illuminance_measure() { return get_double("ILLUMINANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _illuminance_measure { get { return get_illuminance_measure(); } }
        public bool is_inductance_measure() { return IsADBType("INDUCTANCE_MEASURE"); }
        //public bool _is_inductance_measure { get { return is_inductance_measure(); } }
        public double? get_inductance_measure() { return get_double("INDUCTANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _inductance_measure { get { return get_inductance_measure(); } }
        public bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        //public bool _is_length_measure { get { return is_length_measure(); } }
        public double? get_length_measure() { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _length_measure { get { return get_length_measure(); } }
        public bool is_luminous_flux_measure() { return IsADBType("LUMINOUS_FLUX_MEASURE"); }
        //public bool _is_luminous_flux_measure { get { return is_luminous_flux_measure(); } }
        public double? get_luminous_flux_measure() { return get_double("LUMINOUS_FLUX_MEASURE", ifcengine.sdaiREAL); }
        public double? _luminous_flux_measure { get { return get_luminous_flux_measure(); } }
        public bool is_luminous_intensity_measure() { return IsADBType("LUMINOUS_INTENSITY_MEASURE"); }
        //public bool _is_luminous_intensity_measure { get { return is_luminous_intensity_measure(); } }
        public double? get_luminous_intensity_measure() { return get_double("LUMINOUS_INTENSITY_MEASURE", ifcengine.sdaiREAL); }
        public double? _luminous_intensity_measure { get { return get_luminous_intensity_measure(); } }
        public bool is_magnetic_flux_measure() { return IsADBType("MAGNETIC_FLUX_MEASURE"); }
        //public bool _is_magnetic_flux_measure { get { return is_magnetic_flux_measure(); } }
        public double? get_magnetic_flux_measure() { return get_double("MAGNETIC_FLUX_MEASURE", ifcengine.sdaiREAL); }
        public double? _magnetic_flux_measure { get { return get_magnetic_flux_measure(); } }
        public bool is_mass_measure() { return IsADBType("MASS_MEASURE"); }
        //public bool _is_mass_measure { get { return is_mass_measure(); } }
        public double? get_mass_measure() { return get_double("MASS_MEASURE", ifcengine.sdaiREAL); }
        public double? _mass_measure { get { return get_mass_measure(); } }
        public bool is_numeric_measure() { return IsADBType("NUMERIC_MEASURE"); }
        //public bool _is_numeric_measure { get { return is_numeric_measure(); } }
        public double? get_numeric_measure() { return get_double("NUMERIC_MEASURE", ifcengine.sdaiREAL); }
        public double? _numeric_measure { get { return get_numeric_measure(); } }
        public bool is_non_negative_length_measure() { return IsADBType("NON_NEGATIVE_LENGTH_MEASURE"); }
        //public bool _is_non_negative_length_measure { get { return is_non_negative_length_measure(); } }
        public double? get_non_negative_length_measure() { return get_double("NON_NEGATIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _non_negative_length_measure { get { return get_non_negative_length_measure(); } }
        public bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        //public bool _is_parameter_value { get { return is_parameter_value(); } }
        public double? get_parameter_value() { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
        public double? _parameter_value { get { return get_parameter_value(); } }
        public bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        //public bool _is_plane_angle_measure { get { return is_plane_angle_measure(); } }
        public double? get_plane_angle_measure() { return get_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
        public double? _plane_angle_measure { get { return get_plane_angle_measure(); } }
        public bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        //public bool _is_positive_length_measure { get { return is_positive_length_measure(); } }
        public double? get_positive_length_measure() { return get_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _positive_length_measure { get { return get_positive_length_measure(); } }
        public bool is_positive_plane_angle_measure() { return IsADBType("POSITIVE_PLANE_ANGLE_MEASURE"); }
        //public bool _is_positive_plane_angle_measure { get { return is_positive_plane_angle_measure(); } }
        public double? get_positive_plane_angle_measure() { return get_double("POSITIVE_PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
        public double? _positive_plane_angle_measure { get { return get_positive_plane_angle_measure(); } }
        public bool is_positive_ratio_measure() { return IsADBType("POSITIVE_RATIO_MEASURE"); }
        //public bool _is_positive_ratio_measure { get { return is_positive_ratio_measure(); } }
        public double? get_positive_ratio_measure() { return get_double("POSITIVE_RATIO_MEASURE", ifcengine.sdaiREAL); }
        public double? _positive_ratio_measure { get { return get_positive_ratio_measure(); } }
        public bool is_power_measure() { return IsADBType("POWER_MEASURE"); }
        //public bool _is_power_measure { get { return is_power_measure(); } }
        public double? get_power_measure() { return get_double("POWER_MEASURE", ifcengine.sdaiREAL); }
        public double? _power_measure { get { return get_power_measure(); } }
        public bool is_pressure_measure() { return IsADBType("PRESSURE_MEASURE"); }
        //public bool _is_pressure_measure { get { return is_pressure_measure(); } }
        public double? get_pressure_measure() { return get_double("PRESSURE_MEASURE", ifcengine.sdaiREAL); }
        public double? _pressure_measure { get { return get_pressure_measure(); } }
        public bool is_ratio_measure() { return IsADBType("RATIO_MEASURE"); }
        //public bool _is_ratio_measure { get { return is_ratio_measure(); } }
        public double? get_ratio_measure() { return get_double("RATIO_MEASURE", ifcengine.sdaiREAL); }
        public double? _ratio_measure { get { return get_ratio_measure(); } }
        public bool is_resistance_measure() { return IsADBType("RESISTANCE_MEASURE"); }
        //public bool _is_resistance_measure { get { return is_resistance_measure(); } }
        public double? get_resistance_measure() { return get_double("RESISTANCE_MEASURE", ifcengine.sdaiREAL); }
        public double? _resistance_measure { get { return get_resistance_measure(); } }
        public bool is_solid_angle_measure() { return IsADBType("SOLID_ANGLE_MEASURE"); }
        //public bool _is_solid_angle_measure { get { return is_solid_angle_measure(); } }
        public double? get_solid_angle_measure() { return get_double("SOLID_ANGLE_MEASURE", ifcengine.sdaiREAL); }
        public double? _solid_angle_measure { get { return get_solid_angle_measure(); } }
        public bool is_thermodynamic_temperature_measure() { return IsADBType("THERMODYNAMIC_TEMPERATURE_MEASURE"); }
        //public bool _is_thermodynamic_temperature_measure { get { return is_thermodynamic_temperature_measure(); } }
        public double? get_thermodynamic_temperature_measure() { return get_double("THERMODYNAMIC_TEMPERATURE_MEASURE", ifcengine.sdaiREAL); }
        public double? _thermodynamic_temperature_measure { get { return get_thermodynamic_temperature_measure(); } }
        public bool is_time_measure() { return IsADBType("TIME_MEASURE"); }
        //public bool _is_time_measure { get { return is_time_measure(); } }
        public double? get_time_measure() { return get_double("TIME_MEASURE", ifcengine.sdaiREAL); }
        public double? _time_measure { get { return get_time_measure(); } }
        public bool is_velocity_measure() { return IsADBType("VELOCITY_MEASURE"); }
        //public bool _is_velocity_measure { get { return is_velocity_measure(); } }
        public double? get_velocity_measure() { return get_double("VELOCITY_MEASURE", ifcengine.sdaiREAL); }
        public double? _velocity_measure { get { return get_velocity_measure(); } }
        public bool is_volume_measure() { return IsADBType("VOLUME_MEASURE"); }
        //public bool _is_volume_measure { get { return is_volume_measure(); } }
        public double? get_volume_measure() { return get_double("VOLUME_MEASURE", ifcengine.sdaiREAL); }
        public double? _volume_measure { get { return get_volume_measure(); } }

        public double? as_double() { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; }
        public TextValue as_text() { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; }
        };


    public class measure_value_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public measure_value_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public measure_value_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public measure_value_put() : base(null) { }

        public void put_absorbed_dose_measure (double value) { put_double("ABSORBED_DOSE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_dose_equivalent_measure (double value) { put_double("DOSE_EQUIVALENT_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_radioactivity_measure (double value) { put_double("RADIOACTIVITY_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_acceleration_measure (double value) { put_double("ACCELERATION_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_amount_of_substance_measure (double value) { put_double("AMOUNT_OF_SUBSTANCE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_area_measure (double value) { put_double("AREA_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_celsius_temperature_measure (double value) { put_double("CELSIUS_TEMPERATURE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_context_dependent_measure (double value) { put_double("CONTEXT_DEPENDENT_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_count_measure (double value) { put_double("COUNT_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_descriptive_measure(TextValue value) { putTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING, value); }
        public void put_capacitance_measure (double value) { put_double("CAPACITANCE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_electric_charge_measure (double value) { put_double("ELECTRIC_CHARGE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_conductance_measure (double value) { put_double("CONDUCTANCE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_electric_current_measure (double value) { put_double("ELECTRIC_CURRENT_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_electric_potential_measure (double value) { put_double("ELECTRIC_POTENTIAL_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_energy_measure (double value) { put_double("ENERGY_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_magnetic_flux_density_measure (double value) { put_double("MAGNETIC_FLUX_DENSITY_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_force_measure (double value) { put_double("FORCE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_frequency_measure (double value) { put_double("FREQUENCY_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_illuminance_measure (double value) { put_double("ILLUMINANCE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_inductance_measure (double value) { put_double("INDUCTANCE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_length_measure (double value) { put_double("LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_luminous_flux_measure (double value) { put_double("LUMINOUS_FLUX_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_luminous_intensity_measure (double value) { put_double("LUMINOUS_INTENSITY_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_magnetic_flux_measure (double value) { put_double("MAGNETIC_FLUX_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_mass_measure (double value) { put_double("MASS_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_numeric_measure (double value) { put_double("NUMERIC_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_non_negative_length_measure (double value) { put_double("NON_NEGATIVE_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_parameter_value (double value) { put_double("PARAMETER_VALUE", ifcengine.sdaiREAL, value); }
        public void put_plane_angle_measure (double value) { put_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_positive_length_measure (double value) { put_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_positive_plane_angle_measure (double value) { put_double("POSITIVE_PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_positive_ratio_measure (double value) { put_double("POSITIVE_RATIO_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_power_measure (double value) { put_double("POWER_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_pressure_measure (double value) { put_double("PRESSURE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_ratio_measure (double value) { put_double("RATIO_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_resistance_measure (double value) { put_double("RESISTANCE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_solid_angle_measure (double value) { put_double("SOLID_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_thermodynamic_temperature_measure (double value) { put_double("THERMODYNAMIC_TEMPERATURE_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_time_measure (double value) { put_double("TIME_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_velocity_measure (double value) { put_double("VELOCITY_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_volume_measure (double value) { put_double("VOLUME_MEASURE", ifcengine.sdaiREAL, value); }
        };


    public class mechanical_design_and_draughting_relationship_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public mechanical_design_and_draughting_relationship_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public mechanical_design_and_draughting_relationship_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public mechanical_design_and_draughting_relationship_select() : base(null) { }


        public bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        public bool _is_draughting_model { get { return is_draughting_model(); } }
        public draughting_model get_draughting_model() { return new draughting_model (getEntityInstance("DRAUGHTING_MODEL")); }
        public draughting_model _draughting_model { get { return get_draughting_model(); } }
        public void put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }

        public bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        public bool _is_mechanical_design_geometric_presentation_representation { get { return is_mechanical_design_geometric_presentation_representation(); } }
        public mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation() { return new mechanical_design_geometric_presentation_representation (getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
        public mechanical_design_geometric_presentation_representation _mechanical_design_geometric_presentation_representation { get { return get_mechanical_design_geometric_presentation_representation(); } }
        public void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }

        public bool is_mechanical_design_presentation_representation_with_draughting() { return IsADBEntity("mechanical_design_presentation_representation_with_draughting"); }
        public bool _is_mechanical_design_presentation_representation_with_draughting { get { return is_mechanical_design_presentation_representation_with_draughting(); } }
        public mechanical_design_presentation_representation_with_draughting get_mechanical_design_presentation_representation_with_draughting() { return new mechanical_design_presentation_representation_with_draughting (getEntityInstance("MECHANICAL_DESIGN_PRESENTATION_REPRESENTATION_WITH_DRAUGHTING")); }
        public mechanical_design_presentation_representation_with_draughting _mechanical_design_presentation_representation_with_draughting { get { return get_mechanical_design_presentation_representation_with_draughting(); } }
        public void put_mechanical_design_presentation_representation_with_draughting(mechanical_design_presentation_representation_with_draughting inst) { putEntityInstance("MECHANICAL_DESIGN_PRESENTATION_REPRESENTATION_WITH_DRAUGHTING", inst); }

        public bool is_mechanical_design_shaded_presentation_representation() { return IsADBEntity("mechanical_design_shaded_presentation_representation"); }
        public bool _is_mechanical_design_shaded_presentation_representation { get { return is_mechanical_design_shaded_presentation_representation(); } }
        public mechanical_design_shaded_presentation_representation get_mechanical_design_shaded_presentation_representation() { return new mechanical_design_shaded_presentation_representation (getEntityInstance("MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION")); }
        public mechanical_design_shaded_presentation_representation _mechanical_design_shaded_presentation_representation { get { return get_mechanical_design_shaded_presentation_representation(); } }
        public void put_mechanical_design_shaded_presentation_representation(mechanical_design_shaded_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION", inst); }

        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
        };


    public class mechanical_design_and_draughting_relationship_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public mechanical_design_and_draughting_relationship_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public mechanical_design_and_draughting_relationship_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public mechanical_design_and_draughting_relationship_select_get() : base(null) { }

        public bool is_draughting_model() { return IsADBEntity("draughting_model"); }
        public bool _is_draughting_model { get { return is_draughting_model(); } }
        public draughting_model get_draughting_model() { return new draughting_model (getEntityInstance("DRAUGHTING_MODEL")); }
        public draughting_model _draughting_model { get { return get_draughting_model(); } }
        public bool is_mechanical_design_geometric_presentation_representation() { return IsADBEntity("mechanical_design_geometric_presentation_representation"); }
        public bool _is_mechanical_design_geometric_presentation_representation { get { return is_mechanical_design_geometric_presentation_representation(); } }
        public mechanical_design_geometric_presentation_representation get_mechanical_design_geometric_presentation_representation() { return new mechanical_design_geometric_presentation_representation (getEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")); }
        public mechanical_design_geometric_presentation_representation _mechanical_design_geometric_presentation_representation { get { return get_mechanical_design_geometric_presentation_representation(); } }
        public bool is_mechanical_design_presentation_representation_with_draughting() { return IsADBEntity("mechanical_design_presentation_representation_with_draughting"); }
        public bool _is_mechanical_design_presentation_representation_with_draughting { get { return is_mechanical_design_presentation_representation_with_draughting(); } }
        public mechanical_design_presentation_representation_with_draughting get_mechanical_design_presentation_representation_with_draughting() { return new mechanical_design_presentation_representation_with_draughting (getEntityInstance("MECHANICAL_DESIGN_PRESENTATION_REPRESENTATION_WITH_DRAUGHTING")); }
        public mechanical_design_presentation_representation_with_draughting _mechanical_design_presentation_representation_with_draughting { get { return get_mechanical_design_presentation_representation_with_draughting(); } }
        public bool is_mechanical_design_shaded_presentation_representation() { return IsADBEntity("mechanical_design_shaded_presentation_representation"); }
        public bool _is_mechanical_design_shaded_presentation_representation { get { return is_mechanical_design_shaded_presentation_representation(); } }
        public mechanical_design_shaded_presentation_representation get_mechanical_design_shaded_presentation_representation() { return new mechanical_design_shaded_presentation_representation (getEntityInstance("MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION")); }
        public mechanical_design_shaded_presentation_representation _mechanical_design_shaded_presentation_representation { get { return get_mechanical_design_shaded_presentation_representation(); } }
        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class mechanical_design_and_draughting_relationship_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public mechanical_design_and_draughting_relationship_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public mechanical_design_and_draughting_relationship_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public mechanical_design_and_draughting_relationship_select_put() : base(null) { }

        public void put_draughting_model(draughting_model inst) { putEntityInstance("DRAUGHTING_MODEL", inst); }
        public void put_mechanical_design_geometric_presentation_representation(mechanical_design_geometric_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION", inst); }
        public void put_mechanical_design_presentation_representation_with_draughting(mechanical_design_presentation_representation_with_draughting inst) { putEntityInstance("MECHANICAL_DESIGN_PRESENTATION_REPRESENTATION_WITH_DRAUGHTING", inst); }
        public void put_mechanical_design_shaded_presentation_representation(mechanical_design_shaded_presentation_representation inst) { putEntityInstance("MECHANICAL_DESIGN_SHADED_PRESENTATION_REPRESENTATION", inst); }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
        };


    public class mechanical_design_geometric_presentation_area_items : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public mechanical_design_geometric_presentation_area_items(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public mechanical_design_geometric_presentation_area_items(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public mechanical_design_geometric_presentation_area_items() : base(null) { }


        public axis2_placement _axis2_placement() { return new axis2_placement(this); }
        public axis2_placement __axis2_placement { get { return _axis2_placement(); } }

        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }
        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
        };


    public class mechanical_design_geometric_presentation_area_items_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public mechanical_design_geometric_presentation_area_items_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public mechanical_design_geometric_presentation_area_items_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public mechanical_design_geometric_presentation_area_items_get() : base(null) { }

        public axis2_placement_get get_axis2_placement() { return new axis2_placement_get(this); }
        public axis2_placement_get __axis2_placement { get { return get_axis2_placement(); } }
        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class mechanical_design_geometric_presentation_area_items_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public mechanical_design_geometric_presentation_area_items_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public mechanical_design_geometric_presentation_area_items_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public mechanical_design_geometric_presentation_area_items_put() : base(null) { }

        public axis2_placement_put put_axis2_placement() { return new axis2_placement_put(this); }
        public axis2_placement_put __axis2_placement { get { return put_axis2_placement(); } }
        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
        };


    public class mechanical_design_geometric_presentation_representation_items : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public mechanical_design_geometric_presentation_representation_items(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public mechanical_design_geometric_presentation_representation_items(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public mechanical_design_geometric_presentation_representation_items() : base(null) { }


        public axis2_placement _axis2_placement() { return new axis2_placement(this); }
        public axis2_placement __axis2_placement { get { return _axis2_placement(); } }

        public bool is_camera_model_d3() { return IsADBEntity("camera_model_d3"); }
        public bool _is_camera_model_d3 { get { return is_camera_model_d3(); } }
        public camera_model_d3 get_camera_model_d3() { return new camera_model_d3 (getEntityInstance("CAMERA_MODEL_D3")); }
        public camera_model_d3 _camera_model_d3 { get { return get_camera_model_d3(); } }
        public void put_camera_model_d3(camera_model_d3 inst) { putEntityInstance("CAMERA_MODEL_D3", inst); }

        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }
        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }

        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }
        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
        };


    public class mechanical_design_geometric_presentation_representation_items_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public mechanical_design_geometric_presentation_representation_items_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public mechanical_design_geometric_presentation_representation_items_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public mechanical_design_geometric_presentation_representation_items_get() : base(null) { }

        public axis2_placement_get get_axis2_placement() { return new axis2_placement_get(this); }
        public axis2_placement_get __axis2_placement { get { return get_axis2_placement(); } }
        public bool is_camera_model_d3() { return IsADBEntity("camera_model_d3"); }
        public bool _is_camera_model_d3 { get { return is_camera_model_d3(); } }
        public camera_model_d3 get_camera_model_d3() { return new camera_model_d3 (getEntityInstance("CAMERA_MODEL_D3")); }
        public camera_model_d3 _camera_model_d3 { get { return get_camera_model_d3(); } }
        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }
        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class mechanical_design_geometric_presentation_representation_items_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public mechanical_design_geometric_presentation_representation_items_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public mechanical_design_geometric_presentation_representation_items_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public mechanical_design_geometric_presentation_representation_items_put() : base(null) { }

        public axis2_placement_put put_axis2_placement() { return new axis2_placement_put(this); }
        public axis2_placement_put __axis2_placement { get { return put_axis2_placement(); } }
        public void put_camera_model_d3(camera_model_d3 inst) { putEntityInstance("CAMERA_MODEL_D3", inst); }
        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
        };


    public class multi_language_attribute_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public multi_language_attribute_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public multi_language_attribute_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public multi_language_attribute_item() : base(null) { }


        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }

        public bool is_application_context() { return IsADBEntity("application_context"); }
        public bool _is_application_context { get { return is_application_context(); } }
        public application_context get_application_context() { return new application_context (getEntityInstance("APPLICATION_CONTEXT")); }
        public application_context _application_context { get { return get_application_context(); } }
        public void put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }

        public bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        public bool _is_applied_certification_assignment { get { return is_applied_certification_assignment(); } }
        public applied_certification_assignment get_applied_certification_assignment() { return new applied_certification_assignment (getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT")); }
        public applied_certification_assignment _applied_certification_assignment { get { return get_applied_certification_assignment(); } }
        public void put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        public bool _is_applied_document_reference { get { return is_applied_document_reference(); } }
        public applied_document_reference get_applied_document_reference() { return new applied_document_reference (getEntityInstance("APPLIED_DOCUMENT_REFERENCE")); }
        public applied_document_reference _applied_document_reference { get { return get_applied_document_reference(); } }
        public void put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }

        public bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        public bool _is_applied_document_usage_constraint_assignment { get { return is_applied_document_usage_constraint_assignment(); } }
        public applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment() { return new applied_document_usage_constraint_assignment (getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT")); }
        public applied_document_usage_constraint_assignment _applied_document_usage_constraint_assignment { get { return get_applied_document_usage_constraint_assignment(); } }
        public void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }

        public bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        public bool _is_applied_external_identification_assignment { get { return is_applied_external_identification_assignment(); } }
        public applied_external_identification_assignment get_applied_external_identification_assignment() { return new applied_external_identification_assignment (getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")); }
        public applied_external_identification_assignment _applied_external_identification_assignment { get { return get_applied_external_identification_assignment(); } }
        public void put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        public bool _is_applied_organizational_project_assignment { get { return is_applied_organizational_project_assignment(); } }
        public applied_organizational_project_assignment get_applied_organizational_project_assignment() { return new applied_organizational_project_assignment (getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT")); }
        public applied_organizational_project_assignment _applied_organizational_project_assignment { get { return get_applied_organizational_project_assignment(); } }
        public void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }

        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }

        public bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        public bool _is_approval_relationship { get { return is_approval_relationship(); } }
        public approval_relationship get_approval_relationship() { return new approval_relationship (getEntityInstance("APPROVAL_RELATIONSHIP")); }
        public approval_relationship _approval_relationship { get { return get_approval_relationship(); } }
        public void put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }

        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }

        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }

        public bool is_attribute_value_assignment() { return IsADBEntity("attribute_value_assignment"); }
        public bool _is_attribute_value_assignment { get { return is_attribute_value_assignment(); } }
        public attribute_value_assignment get_attribute_value_assignment() { return new attribute_value_assignment (getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT")); }
        public attribute_value_assignment _attribute_value_assignment { get { return get_attribute_value_assignment(); } }
        public void put_attribute_value_assignment(attribute_value_assignment inst) { putEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT", inst); }

        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }

        public bool is_certification_type() { return IsADBEntity("certification_type"); }
        public bool _is_certification_type { get { return is_certification_type(); } }
        public certification_type get_certification_type() { return new certification_type (getEntityInstance("CERTIFICATION_TYPE")); }
        public certification_type _certification_type { get { return get_certification_type(); } }
        public void put_certification_type(certification_type inst) { putEntityInstance("CERTIFICATION_TYPE", inst); }

        public bool is_colour() { return IsADBEntity("colour"); }
        public bool _is_colour { get { return is_colour(); } }
        public colour get_colour() { return new colour (getEntityInstance("COLOUR")); }
        public colour _colour { get { return get_colour(); } }
        public void put_colour(colour inst) { putEntityInstance("COLOUR", inst); }

        public bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        public bool _is_configuration_design { get { return is_configuration_design(); } }
        public configuration_design get_configuration_design() { return new configuration_design (getEntityInstance("CONFIGURATION_DESIGN")); }
        public configuration_design _configuration_design { get { return get_configuration_design(); } }
        public void put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }

        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_date_role() { return IsADBEntity("date_role"); }
        public bool _is_date_role { get { return is_date_role(); } }
        public date_role get_date_role() { return new date_role (getEntityInstance("DATE_ROLE")); }
        public date_role _date_role { get { return get_date_role(); } }
        public void put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }

        public bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        public bool _is_date_time_role { get { return is_date_time_role(); } }
        public date_time_role get_date_time_role() { return new date_time_role (getEntityInstance("DATE_TIME_ROLE")); }
        public date_time_role _date_time_role { get { return get_date_time_role(); } }
        public void put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }

        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }

        public bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        public bool _is_document_relationship { get { return is_document_relationship(); } }
        public document_relationship get_document_relationship() { return new document_relationship (getEntityInstance("DOCUMENT_RELATIONSHIP")); }
        public document_relationship _document_relationship { get { return get_document_relationship(); } }
        public void put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }

        public bool is_document_usage_role() { return IsADBEntity("document_usage_role"); }
        public bool _is_document_usage_role { get { return is_document_usage_role(); } }
        public document_usage_role get_document_usage_role() { return new document_usage_role (getEntityInstance("DOCUMENT_USAGE_ROLE")); }
        public document_usage_role _document_usage_role { get { return get_document_usage_role(); } }
        public void put_document_usage_role(document_usage_role inst) { putEntityInstance("DOCUMENT_USAGE_ROLE", inst); }

        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }

        public bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        public bool _is_effectivity_relationship { get { return is_effectivity_relationship(); } }
        public effectivity_relationship get_effectivity_relationship() { return new effectivity_relationship (getEntityInstance("EFFECTIVITY_RELATIONSHIP")); }
        public effectivity_relationship _effectivity_relationship { get { return get_effectivity_relationship(); } }
        public void put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }

        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }

        public bool is_external_source() { return IsADBEntity("external_source"); }
        public bool _is_external_source { get { return is_external_source(); } }
        public external_source get_external_source() { return new external_source (getEntityInstance("EXTERNAL_SOURCE")); }
        public external_source _external_source { get { return get_external_source(); } }
        public void put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }

        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }

        public bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        public bool _is_general_property_relationship { get { return is_general_property_relationship(); } }
        public general_property_relationship get_general_property_relationship() { return new general_property_relationship (getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
        public general_property_relationship _general_property_relationship { get { return get_general_property_relationship(); } }
        public void put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }

        public bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        public bool _is_geometric_representation_item { get { return is_geometric_representation_item(); } }
        public geometric_representation_item get_geometric_representation_item() { return new geometric_representation_item (getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); }
        public geometric_representation_item _geometric_representation_item { get { return get_geometric_representation_item(); } }
        public void put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }

        public bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        public bool _is_geometric_tolerance { get { return is_geometric_tolerance(); } }
        public geometric_tolerance get_geometric_tolerance() { return new geometric_tolerance (getEntityInstance("GEOMETRIC_TOLERANCE")); }
        public geometric_tolerance _geometric_tolerance { get { return get_geometric_tolerance(); } }
        public void put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }

        public bool is_identification_role() { return IsADBEntity("identification_role"); }
        public bool _is_identification_role { get { return is_identification_role(); } }
        public identification_role get_identification_role() { return new identification_role (getEntityInstance("IDENTIFICATION_ROLE")); }
        public identification_role _identification_role { get { return get_identification_role(); } }
        public void put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }

        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        public bool _is_make_from_usage_option { get { return is_make_from_usage_option(); } }
        public make_from_usage_option get_make_from_usage_option() { return new make_from_usage_option (getEntityInstance("MAKE_FROM_USAGE_OPTION")); }
        public make_from_usage_option _make_from_usage_option { get { return get_make_from_usage_option(); } }
        public void put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }

        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }
        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }

        public bool is_object_role() { return IsADBEntity("object_role"); }
        public bool _is_object_role { get { return is_object_role(); } }
        public object_role get_object_role() { return new object_role (getEntityInstance("OBJECT_ROLE")); }
        public object_role _object_role { get { return get_object_role(); } }
        public void put_object_role(object_role inst) { putEntityInstance("OBJECT_ROLE", inst); }

        public bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        public bool _is_organization_relationship { get { return is_organization_relationship(); } }
        public organization_relationship get_organization_relationship() { return new organization_relationship (getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
        public organization_relationship _organization_relationship { get { return get_organization_relationship(); } }
        public void put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }

        public bool is_organization_role() { return IsADBEntity("organization_role"); }
        public bool _is_organization_role { get { return is_organization_role(); } }
        public organization_role get_organization_role() { return new organization_role (getEntityInstance("ORGANIZATION_ROLE")); }
        public organization_role _organization_role { get { return get_organization_role(); } }
        public void put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }

        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }

        public bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        public bool _is_organizational_project_relationship { get { return is_organizational_project_relationship(); } }
        public organizational_project_relationship get_organizational_project_relationship() { return new organizational_project_relationship (getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); }
        public organizational_project_relationship _organizational_project_relationship { get { return get_organizational_project_relationship(); } }
        public void put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }

        public bool is_organizational_project_role() { return IsADBEntity("organizational_project_role"); }
        public bool _is_organizational_project_role { get { return is_organizational_project_role(); } }
        public organizational_project_role get_organizational_project_role() { return new organizational_project_role (getEntityInstance("ORGANIZATIONAL_PROJECT_ROLE")); }
        public organizational_project_role _organizational_project_role { get { return get_organizational_project_role(); } }
        public void put_organizational_project_role(organizational_project_role inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_ROLE", inst); }

        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }

        public bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        public bool _is_person_and_organization_role { get { return is_person_and_organization_role(); } }
        public person_and_organization_role get_person_and_organization_role() { return new person_and_organization_role (getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); }
        public person_and_organization_role _person_and_organization_role { get { return get_person_and_organization_role(); } }
        public void put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }

        public bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        public bool _is_product_concept_relationship { get { return is_product_concept_relationship(); } }
        public product_concept_relationship get_product_concept_relationship() { return new product_concept_relationship (getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP")); }
        public product_concept_relationship _product_concept_relationship { get { return get_product_concept_relationship(); } }
        public void put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        public bool _is_product_definition_context { get { return is_product_definition_context(); } }
        public product_definition_context get_product_definition_context() { return new product_definition_context (getEntityInstance("PRODUCT_DEFINITION_CONTEXT")); }
        public product_definition_context _product_definition_context { get { return get_product_definition_context(); } }
        public void put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        public bool _is_product_definition_shape { get { return is_product_definition_shape(); } }
        public product_definition_shape get_product_definition_shape() { return new product_definition_shape (getEntityInstance("PRODUCT_DEFINITION_SHAPE")); }
        public product_definition_shape _product_definition_shape { get { return get_product_definition_shape(); } }
        public void put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }

        public bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        public bool _is_product_related_product_category { get { return is_product_related_product_category(); } }
        public product_related_product_category get_product_related_product_category() { return new product_related_product_category (getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY")); }
        public product_related_product_category _product_related_product_category { get { return get_product_related_product_category(); } }
        public void put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }

        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }

        public bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        public bool _is_representation_relationship { get { return is_representation_relationship(); } }
        public representation_relationship get_representation_relationship() { return new representation_relationship (getEntityInstance("REPRESENTATION_RELATIONSHIP")); }
        public representation_relationship _representation_relationship { get { return get_representation_relationship(); } }
        public void put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        public bool _is_security_classification_assignment { get { return is_security_classification_assignment(); } }
        public security_classification_assignment get_security_classification_assignment() { return new security_classification_assignment (getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public security_classification_assignment _security_classification_assignment { get { return get_security_classification_assignment(); } }
        public void put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }

        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }

        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }

        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }

        public bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        public bool _is_time_interval_role { get { return is_time_interval_role(); } }
        public time_interval_role get_time_interval_role() { return new time_interval_role (getEntityInstance("TIME_INTERVAL_ROLE")); }
        public time_interval_role _time_interval_role { get { return get_time_interval_role(); } }
        public void put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }

        public bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        public bool _is_topological_representation_item { get { return is_topological_representation_item(); } }
        public topological_representation_item get_topological_representation_item() { return new topological_representation_item (getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); }
        public topological_representation_item _topological_representation_item { get { return get_topological_representation_item(); } }
        public void put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }

        public bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        public bool _is_uncertainty_measure_with_unit { get { return is_uncertainty_measure_with_unit(); } }
        public uncertainty_measure_with_unit get_uncertainty_measure_with_unit() { return new uncertainty_measure_with_unit (getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); }
        public uncertainty_measure_with_unit _uncertainty_measure_with_unit { get { return get_uncertainty_measure_with_unit(); } }
        public void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }

        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
        };


    public class multi_language_attribute_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public multi_language_attribute_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public multi_language_attribute_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public multi_language_attribute_item_get() : base(null) { }

        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public bool is_application_context() { return IsADBEntity("application_context"); }
        public bool _is_application_context { get { return is_application_context(); } }
        public application_context get_application_context() { return new application_context (getEntityInstance("APPLICATION_CONTEXT")); }
        public application_context _application_context { get { return get_application_context(); } }
        public bool is_applied_certification_assignment() { return IsADBEntity("applied_certification_assignment"); }
        public bool _is_applied_certification_assignment { get { return is_applied_certification_assignment(); } }
        public applied_certification_assignment get_applied_certification_assignment() { return new applied_certification_assignment (getEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT")); }
        public applied_certification_assignment _applied_certification_assignment { get { return get_applied_certification_assignment(); } }
        public bool is_applied_document_reference() { return IsADBEntity("applied_document_reference"); }
        public bool _is_applied_document_reference { get { return is_applied_document_reference(); } }
        public applied_document_reference get_applied_document_reference() { return new applied_document_reference (getEntityInstance("APPLIED_DOCUMENT_REFERENCE")); }
        public applied_document_reference _applied_document_reference { get { return get_applied_document_reference(); } }
        public bool is_applied_document_usage_constraint_assignment() { return IsADBEntity("applied_document_usage_constraint_assignment"); }
        public bool _is_applied_document_usage_constraint_assignment { get { return is_applied_document_usage_constraint_assignment(); } }
        public applied_document_usage_constraint_assignment get_applied_document_usage_constraint_assignment() { return new applied_document_usage_constraint_assignment (getEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT")); }
        public applied_document_usage_constraint_assignment _applied_document_usage_constraint_assignment { get { return get_applied_document_usage_constraint_assignment(); } }
        public bool is_applied_external_identification_assignment() { return IsADBEntity("applied_external_identification_assignment"); }
        public bool _is_applied_external_identification_assignment { get { return is_applied_external_identification_assignment(); } }
        public applied_external_identification_assignment get_applied_external_identification_assignment() { return new applied_external_identification_assignment (getEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")); }
        public applied_external_identification_assignment _applied_external_identification_assignment { get { return get_applied_external_identification_assignment(); } }
        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public bool is_applied_organizational_project_assignment() { return IsADBEntity("applied_organizational_project_assignment"); }
        public bool _is_applied_organizational_project_assignment { get { return is_applied_organizational_project_assignment(); } }
        public applied_organizational_project_assignment get_applied_organizational_project_assignment() { return new applied_organizational_project_assignment (getEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT")); }
        public applied_organizational_project_assignment _applied_organizational_project_assignment { get { return get_applied_organizational_project_assignment(); } }
        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public bool is_approval_relationship() { return IsADBEntity("approval_relationship"); }
        public bool _is_approval_relationship { get { return is_approval_relationship(); } }
        public approval_relationship get_approval_relationship() { return new approval_relationship (getEntityInstance("APPROVAL_RELATIONSHIP")); }
        public approval_relationship _approval_relationship { get { return get_approval_relationship(); } }
        public bool is_approval_status() { return IsADBEntity("approval_status"); }
        public bool _is_approval_status { get { return is_approval_status(); } }
        public approval_status get_approval_status() { return new approval_status (getEntityInstance("APPROVAL_STATUS")); }
        public approval_status _approval_status { get { return get_approval_status(); } }
        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public bool is_attribute_value_assignment() { return IsADBEntity("attribute_value_assignment"); }
        public bool _is_attribute_value_assignment { get { return is_attribute_value_assignment(); } }
        public attribute_value_assignment get_attribute_value_assignment() { return new attribute_value_assignment (getEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT")); }
        public attribute_value_assignment _attribute_value_assignment { get { return get_attribute_value_assignment(); } }
        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public bool is_certification_type() { return IsADBEntity("certification_type"); }
        public bool _is_certification_type { get { return is_certification_type(); } }
        public certification_type get_certification_type() { return new certification_type (getEntityInstance("CERTIFICATION_TYPE")); }
        public certification_type _certification_type { get { return get_certification_type(); } }
        public bool is_colour() { return IsADBEntity("colour"); }
        public bool _is_colour { get { return is_colour(); } }
        public colour get_colour() { return new colour (getEntityInstance("COLOUR")); }
        public colour _colour { get { return get_colour(); } }
        public bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        public bool _is_configuration_design { get { return is_configuration_design(); } }
        public configuration_design get_configuration_design() { return new configuration_design (getEntityInstance("CONFIGURATION_DESIGN")); }
        public configuration_design _configuration_design { get { return get_configuration_design(); } }
        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_date_role() { return IsADBEntity("date_role"); }
        public bool _is_date_role { get { return is_date_role(); } }
        public date_role get_date_role() { return new date_role (getEntityInstance("DATE_ROLE")); }
        public date_role _date_role { get { return get_date_role(); } }
        public bool is_date_time_role() { return IsADBEntity("date_time_role"); }
        public bool _is_date_time_role { get { return is_date_time_role(); } }
        public date_time_role get_date_time_role() { return new date_time_role (getEntityInstance("DATE_TIME_ROLE")); }
        public date_time_role _date_time_role { get { return get_date_time_role(); } }
        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public bool is_document_relationship() { return IsADBEntity("document_relationship"); }
        public bool _is_document_relationship { get { return is_document_relationship(); } }
        public document_relationship get_document_relationship() { return new document_relationship (getEntityInstance("DOCUMENT_RELATIONSHIP")); }
        public document_relationship _document_relationship { get { return get_document_relationship(); } }
        public bool is_document_usage_role() { return IsADBEntity("document_usage_role"); }
        public bool _is_document_usage_role { get { return is_document_usage_role(); } }
        public document_usage_role get_document_usage_role() { return new document_usage_role (getEntityInstance("DOCUMENT_USAGE_ROLE")); }
        public document_usage_role _document_usage_role { get { return get_document_usage_role(); } }
        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public bool is_effectivity_relationship() { return IsADBEntity("effectivity_relationship"); }
        public bool _is_effectivity_relationship { get { return is_effectivity_relationship(); } }
        public effectivity_relationship get_effectivity_relationship() { return new effectivity_relationship (getEntityInstance("EFFECTIVITY_RELATIONSHIP")); }
        public effectivity_relationship _effectivity_relationship { get { return get_effectivity_relationship(); } }
        public bool is_event_occurrence() { return IsADBEntity("event_occurrence"); }
        public bool _is_event_occurrence { get { return is_event_occurrence(); } }
        public event_occurrence get_event_occurrence() { return new event_occurrence (getEntityInstance("EVENT_OCCURRENCE")); }
        public event_occurrence _event_occurrence { get { return get_event_occurrence(); } }
        public bool is_external_source() { return IsADBEntity("external_source"); }
        public bool _is_external_source { get { return is_external_source(); } }
        public external_source get_external_source() { return new external_source (getEntityInstance("EXTERNAL_SOURCE")); }
        public external_source _external_source { get { return get_external_source(); } }
        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public bool is_general_property_relationship() { return IsADBEntity("general_property_relationship"); }
        public bool _is_general_property_relationship { get { return is_general_property_relationship(); } }
        public general_property_relationship get_general_property_relationship() { return new general_property_relationship (getEntityInstance("GENERAL_PROPERTY_RELATIONSHIP")); }
        public general_property_relationship _general_property_relationship { get { return get_general_property_relationship(); } }
        public bool is_geometric_representation_item() { return IsADBEntity("geometric_representation_item"); }
        public bool _is_geometric_representation_item { get { return is_geometric_representation_item(); } }
        public geometric_representation_item get_geometric_representation_item() { return new geometric_representation_item (getEntityInstance("GEOMETRIC_REPRESENTATION_ITEM")); }
        public geometric_representation_item _geometric_representation_item { get { return get_geometric_representation_item(); } }
        public bool is_geometric_tolerance() { return IsADBEntity("geometric_tolerance"); }
        public bool _is_geometric_tolerance { get { return is_geometric_tolerance(); } }
        public geometric_tolerance get_geometric_tolerance() { return new geometric_tolerance (getEntityInstance("GEOMETRIC_TOLERANCE")); }
        public geometric_tolerance _geometric_tolerance { get { return get_geometric_tolerance(); } }
        public bool is_identification_role() { return IsADBEntity("identification_role"); }
        public bool _is_identification_role { get { return is_identification_role(); } }
        public identification_role get_identification_role() { return new identification_role (getEntityInstance("IDENTIFICATION_ROLE")); }
        public identification_role _identification_role { get { return get_identification_role(); } }
        public bool is_information_right() { return IsADBEntity("information_right"); }
        public bool _is_information_right { get { return is_information_right(); } }
        public information_right get_information_right() { return new information_right (getEntityInstance("INFORMATION_RIGHT")); }
        public information_right _information_right { get { return get_information_right(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        public bool _is_make_from_usage_option { get { return is_make_from_usage_option(); } }
        public make_from_usage_option get_make_from_usage_option() { return new make_from_usage_option (getEntityInstance("MAKE_FROM_USAGE_OPTION")); }
        public make_from_usage_option _make_from_usage_option { get { return get_make_from_usage_option(); } }
        public bool is_mapped_item() { return IsADBEntity("mapped_item"); }
        public bool _is_mapped_item { get { return is_mapped_item(); } }
        public mapped_item get_mapped_item() { return new mapped_item (getEntityInstance("MAPPED_ITEM")); }
        public mapped_item _mapped_item { get { return get_mapped_item(); } }
        public bool is_object_role() { return IsADBEntity("object_role"); }
        public bool _is_object_role { get { return is_object_role(); } }
        public object_role get_object_role() { return new object_role (getEntityInstance("OBJECT_ROLE")); }
        public object_role _object_role { get { return get_object_role(); } }
        public bool is_organization_relationship() { return IsADBEntity("organization_relationship"); }
        public bool _is_organization_relationship { get { return is_organization_relationship(); } }
        public organization_relationship get_organization_relationship() { return new organization_relationship (getEntityInstance("ORGANIZATION_RELATIONSHIP")); }
        public organization_relationship _organization_relationship { get { return get_organization_relationship(); } }
        public bool is_organization_role() { return IsADBEntity("organization_role"); }
        public bool _is_organization_role { get { return is_organization_role(); } }
        public organization_role get_organization_role() { return new organization_role (getEntityInstance("ORGANIZATION_ROLE")); }
        public organization_role _organization_role { get { return get_organization_role(); } }
        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public bool is_organizational_project_relationship() { return IsADBEntity("organizational_project_relationship"); }
        public bool _is_organizational_project_relationship { get { return is_organizational_project_relationship(); } }
        public organizational_project_relationship get_organizational_project_relationship() { return new organizational_project_relationship (getEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP")); }
        public organizational_project_relationship _organizational_project_relationship { get { return get_organizational_project_relationship(); } }
        public bool is_organizational_project_role() { return IsADBEntity("organizational_project_role"); }
        public bool _is_organizational_project_role { get { return is_organizational_project_role(); } }
        public organizational_project_role get_organizational_project_role() { return new organizational_project_role (getEntityInstance("ORGANIZATIONAL_PROJECT_ROLE")); }
        public organizational_project_role _organizational_project_role { get { return get_organizational_project_role(); } }
        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public bool is_person_and_organization_role() { return IsADBEntity("person_and_organization_role"); }
        public bool _is_person_and_organization_role { get { return is_person_and_organization_role(); } }
        public person_and_organization_role get_person_and_organization_role() { return new person_and_organization_role (getEntityInstance("PERSON_AND_ORGANIZATION_ROLE")); }
        public person_and_organization_role _person_and_organization_role { get { return get_person_and_organization_role(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public bool is_product_concept_relationship() { return IsADBEntity("product_concept_relationship"); }
        public bool _is_product_concept_relationship { get { return is_product_concept_relationship(); } }
        public product_concept_relationship get_product_concept_relationship() { return new product_concept_relationship (getEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP")); }
        public product_concept_relationship _product_concept_relationship { get { return get_product_concept_relationship(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_context() { return IsADBEntity("product_definition_context"); }
        public bool _is_product_definition_context { get { return is_product_definition_context(); } }
        public product_definition_context get_product_definition_context() { return new product_definition_context (getEntityInstance("PRODUCT_DEFINITION_CONTEXT")); }
        public product_definition_context _product_definition_context { get { return get_product_definition_context(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_product_definition_shape() { return IsADBEntity("product_definition_shape"); }
        public bool _is_product_definition_shape { get { return is_product_definition_shape(); } }
        public product_definition_shape get_product_definition_shape() { return new product_definition_shape (getEntityInstance("PRODUCT_DEFINITION_SHAPE")); }
        public product_definition_shape _product_definition_shape { get { return get_product_definition_shape(); } }
        public bool is_product_related_product_category() { return IsADBEntity("product_related_product_category"); }
        public bool _is_product_related_product_category { get { return is_product_related_product_category(); } }
        public product_related_product_category get_product_related_product_category() { return new product_related_product_category (getEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY")); }
        public product_related_product_category _product_related_product_category { get { return get_product_related_product_category(); } }
        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        public bool _is_representation_relationship { get { return is_representation_relationship(); } }
        public representation_relationship get_representation_relationship() { return new representation_relationship (getEntityInstance("REPRESENTATION_RELATIONSHIP")); }
        public representation_relationship _representation_relationship { get { return get_representation_relationship(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        public bool _is_security_classification_assignment { get { return is_security_classification_assignment(); } }
        public security_classification_assignment get_security_classification_assignment() { return new security_classification_assignment (getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public security_classification_assignment _security_classification_assignment { get { return get_security_classification_assignment(); } }
        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public bool is_time_interval_role() { return IsADBEntity("time_interval_role"); }
        public bool _is_time_interval_role { get { return is_time_interval_role(); } }
        public time_interval_role get_time_interval_role() { return new time_interval_role (getEntityInstance("TIME_INTERVAL_ROLE")); }
        public time_interval_role _time_interval_role { get { return get_time_interval_role(); } }
        public bool is_topological_representation_item() { return IsADBEntity("topological_representation_item"); }
        public bool _is_topological_representation_item { get { return is_topological_representation_item(); } }
        public topological_representation_item get_topological_representation_item() { return new topological_representation_item (getEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM")); }
        public topological_representation_item _topological_representation_item { get { return get_topological_representation_item(); } }
        public bool is_uncertainty_measure_with_unit() { return IsADBEntity("uncertainty_measure_with_unit"); }
        public bool _is_uncertainty_measure_with_unit { get { return is_uncertainty_measure_with_unit(); } }
        public uncertainty_measure_with_unit get_uncertainty_measure_with_unit() { return new uncertainty_measure_with_unit (getEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT")); }
        public uncertainty_measure_with_unit _uncertainty_measure_with_unit { get { return get_uncertainty_measure_with_unit(); } }
        public bool is_usage_association() { return IsADBEntity("usage_association"); }
        public bool _is_usage_association { get { return is_usage_association(); } }
        public usage_association get_usage_association() { return new usage_association (getEntityInstance("USAGE_ASSOCIATION")); }
        public usage_association _usage_association { get { return get_usage_association(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class multi_language_attribute_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public multi_language_attribute_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public multi_language_attribute_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public multi_language_attribute_item_put() : base(null) { }

        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
        public void put_application_context(application_context inst) { putEntityInstance("APPLICATION_CONTEXT", inst); }
        public void put_applied_certification_assignment(applied_certification_assignment inst) { putEntityInstance("APPLIED_CERTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_document_reference(applied_document_reference inst) { putEntityInstance("APPLIED_DOCUMENT_REFERENCE", inst); }
        public void put_applied_document_usage_constraint_assignment(applied_document_usage_constraint_assignment inst) { putEntityInstance("APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT", inst); }
        public void put_applied_external_identification_assignment(applied_external_identification_assignment inst) { putEntityInstance("APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_organizational_project_assignment(applied_organizational_project_assignment inst) { putEntityInstance("APPLIED_ORGANIZATIONAL_PROJECT_ASSIGNMENT", inst); }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
        public void put_approval_relationship(approval_relationship inst) { putEntityInstance("APPROVAL_RELATIONSHIP", inst); }
        public void put_approval_status(approval_status inst) { putEntityInstance("APPROVAL_STATUS", inst); }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
        public void put_attribute_value_assignment(attribute_value_assignment inst) { putEntityInstance("ATTRIBUTE_VALUE_ASSIGNMENT", inst); }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
        public void put_certification_type(certification_type inst) { putEntityInstance("CERTIFICATION_TYPE", inst); }
        public void put_colour(colour inst) { putEntityInstance("COLOUR", inst); }
        public void put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_date_role(date_role inst) { putEntityInstance("DATE_ROLE", inst); }
        public void put_date_time_role(date_time_role inst) { putEntityInstance("DATE_TIME_ROLE", inst); }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
        public void put_document_relationship(document_relationship inst) { putEntityInstance("DOCUMENT_RELATIONSHIP", inst); }
        public void put_document_usage_role(document_usage_role inst) { putEntityInstance("DOCUMENT_USAGE_ROLE", inst); }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
        public void put_effectivity_relationship(effectivity_relationship inst) { putEntityInstance("EFFECTIVITY_RELATIONSHIP", inst); }
        public void put_event_occurrence(event_occurrence inst) { putEntityInstance("EVENT_OCCURRENCE", inst); }
        public void put_external_source(external_source inst) { putEntityInstance("EXTERNAL_SOURCE", inst); }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
        public void put_general_property_relationship(general_property_relationship inst) { putEntityInstance("GENERAL_PROPERTY_RELATIONSHIP", inst); }
        public void put_geometric_representation_item(geometric_representation_item inst) { putEntityInstance("GEOMETRIC_REPRESENTATION_ITEM", inst); }
        public void put_geometric_tolerance(geometric_tolerance inst) { putEntityInstance("GEOMETRIC_TOLERANCE", inst); }
        public void put_identification_role(identification_role inst) { putEntityInstance("IDENTIFICATION_ROLE", inst); }
        public void put_information_right(information_right inst) { putEntityInstance("INFORMATION_RIGHT", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
        public void put_mapped_item(mapped_item inst) { putEntityInstance("MAPPED_ITEM", inst); }
        public void put_object_role(object_role inst) { putEntityInstance("OBJECT_ROLE", inst); }
        public void put_organization_relationship(organization_relationship inst) { putEntityInstance("ORGANIZATION_RELATIONSHIP", inst); }
        public void put_organization_role(organization_role inst) { putEntityInstance("ORGANIZATION_ROLE", inst); }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
        public void put_organizational_project_relationship(organizational_project_relationship inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_RELATIONSHIP", inst); }
        public void put_organizational_project_role(organizational_project_role inst) { putEntityInstance("ORGANIZATIONAL_PROJECT_ROLE", inst); }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
        public void put_person_and_organization_role(person_and_organization_role inst) { putEntityInstance("PERSON_AND_ORGANIZATION_ROLE", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
        public void put_product_concept_relationship(product_concept_relationship inst) { putEntityInstance("PRODUCT_CONCEPT_RELATIONSHIP", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_context(product_definition_context inst) { putEntityInstance("PRODUCT_DEFINITION_CONTEXT", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_product_definition_shape(product_definition_shape inst) { putEntityInstance("PRODUCT_DEFINITION_SHAPE", inst); }
        public void put_product_related_product_category(product_related_product_category inst) { putEntityInstance("PRODUCT_RELATED_PRODUCT_CATEGORY", inst); }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        public void put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
        public void put_time_interval_role(time_interval_role inst) { putEntityInstance("TIME_INTERVAL_ROLE", inst); }
        public void put_topological_representation_item(topological_representation_item inst) { putEntityInstance("TOPOLOGICAL_REPRESENTATION_ITEM", inst); }
        public void put_uncertainty_measure_with_unit(uncertainty_measure_with_unit inst) { putEntityInstance("UNCERTAINTY_MEASURE_WITH_UNIT", inst); }
        public void put_usage_association(usage_association inst) { putEntityInstance("USAGE_ASSOCIATION", inst); }
        };


    public class name_attribute_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_attribute_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_attribute_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_attribute_select() : base(null) { }


        public bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        public bool _is_action_request_solution { get { return is_action_request_solution(); } }
        public action_request_solution get_action_request_solution() { return new action_request_solution (getEntityInstance("ACTION_REQUEST_SOLUTION")); }
        public action_request_solution _action_request_solution { get { return get_action_request_solution(); } }
        public void put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }

        public bool is_address() { return IsADBEntity("address"); }
        public bool _is_address { get { return is_address(); } }
        public address get_address() { return new address (getEntityInstance("ADDRESS")); }
        public address _address { get { return get_address(); } }
        public void put_address(address inst) { putEntityInstance("ADDRESS", inst); }

        public bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        public bool _is_configuration_design { get { return is_configuration_design(); } }
        public configuration_design get_configuration_design() { return new configuration_design (getEntityInstance("CONFIGURATION_DESIGN")); }
        public configuration_design _configuration_design { get { return get_configuration_design(); } }
        public void put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }

        public bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        public bool _is_context_dependent_shape_representation { get { return is_context_dependent_shape_representation(); } }
        public context_dependent_shape_representation get_context_dependent_shape_representation() { return new context_dependent_shape_representation (getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION")); }
        public context_dependent_shape_representation _context_dependent_shape_representation { get { return get_context_dependent_shape_representation(); } }
        public void put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }

        public bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        public bool _is_derived_unit { get { return is_derived_unit(); } }
        public derived_unit get_derived_unit() { return new derived_unit (getEntityInstance("DERIVED_UNIT")); }
        public derived_unit _derived_unit { get { return get_derived_unit(); } }
        public void put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }

        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }

        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        public bool _is_product_definition_substitute { get { return is_product_definition_substitute(); } }
        public product_definition_substitute get_product_definition_substitute() { return new product_definition_substitute (getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
        public product_definition_substitute _product_definition_substitute { get { return get_product_definition_substitute(); } }
        public void put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }

        public bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        public bool _is_property_definition_representation { get { return is_property_definition_representation(); } }
        public property_definition_representation get_property_definition_representation() { return new property_definition_representation (getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
        public property_definition_representation _property_definition_representation { get { return get_property_definition_representation(); } }
        public void put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
        };


    public class name_attribute_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_attribute_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_attribute_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_attribute_select_get() : base(null) { }

        public bool is_action_request_solution() { return IsADBEntity("action_request_solution"); }
        public bool _is_action_request_solution { get { return is_action_request_solution(); } }
        public action_request_solution get_action_request_solution() { return new action_request_solution (getEntityInstance("ACTION_REQUEST_SOLUTION")); }
        public action_request_solution _action_request_solution { get { return get_action_request_solution(); } }
        public bool is_address() { return IsADBEntity("address"); }
        public bool _is_address { get { return is_address(); } }
        public address get_address() { return new address (getEntityInstance("ADDRESS")); }
        public address _address { get { return get_address(); } }
        public bool is_configuration_design() { return IsADBEntity("configuration_design"); }
        public bool _is_configuration_design { get { return is_configuration_design(); } }
        public configuration_design get_configuration_design() { return new configuration_design (getEntityInstance("CONFIGURATION_DESIGN")); }
        public configuration_design _configuration_design { get { return get_configuration_design(); } }
        public bool is_context_dependent_shape_representation() { return IsADBEntity("context_dependent_shape_representation"); }
        public bool _is_context_dependent_shape_representation { get { return is_context_dependent_shape_representation(); } }
        public context_dependent_shape_representation get_context_dependent_shape_representation() { return new context_dependent_shape_representation (getEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION")); }
        public context_dependent_shape_representation _context_dependent_shape_representation { get { return get_context_dependent_shape_representation(); } }
        public bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        public bool _is_derived_unit { get { return is_derived_unit(); } }
        public derived_unit get_derived_unit() { return new derived_unit (getEntityInstance("DERIVED_UNIT")); }
        public derived_unit _derived_unit { get { return get_derived_unit(); } }
        public bool is_effectivity() { return IsADBEntity("effectivity"); }
        public bool _is_effectivity { get { return is_effectivity(); } }
        public effectivity get_effectivity() { return new effectivity (getEntityInstance("EFFECTIVITY")); }
        public effectivity _effectivity { get { return get_effectivity(); } }
        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_substitute() { return IsADBEntity("product_definition_substitute"); }
        public bool _is_product_definition_substitute { get { return is_product_definition_substitute(); } }
        public product_definition_substitute get_product_definition_substitute() { return new product_definition_substitute (getEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE")); }
        public product_definition_substitute _product_definition_substitute { get { return get_product_definition_substitute(); } }
        public bool is_property_definition_representation() { return IsADBEntity("property_definition_representation"); }
        public bool _is_property_definition_representation { get { return is_property_definition_representation(); } }
        public property_definition_representation get_property_definition_representation() { return new property_definition_representation (getEntityInstance("PROPERTY_DEFINITION_REPRESENTATION")); }
        public property_definition_representation _property_definition_representation { get { return get_property_definition_representation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class name_attribute_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_attribute_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_attribute_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_attribute_select_put() : base(null) { }

        public void put_action_request_solution(action_request_solution inst) { putEntityInstance("ACTION_REQUEST_SOLUTION", inst); }
        public void put_address(address inst) { putEntityInstance("ADDRESS", inst); }
        public void put_configuration_design(configuration_design inst) { putEntityInstance("CONFIGURATION_DESIGN", inst); }
        public void put_context_dependent_shape_representation(context_dependent_shape_representation inst) { putEntityInstance("CONTEXT_DEPENDENT_SHAPE_REPRESENTATION", inst); }
        public void put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
        public void put_effectivity(effectivity inst) { putEntityInstance("EFFECTIVITY", inst); }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_substitute(product_definition_substitute inst) { putEntityInstance("PRODUCT_DEFINITION_SUBSTITUTE", inst); }
        public void put_property_definition_representation(property_definition_representation inst) { putEntityInstance("PROPERTY_DEFINITION_REPRESENTATION", inst); }
        };


    public class name_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_item() : base(null) { }


        public bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        public bool _is_assembly_component_usage { get { return is_assembly_component_usage(); } }
        public assembly_component_usage get_assembly_component_usage() { return new assembly_component_usage (getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); }
        public assembly_component_usage _assembly_component_usage { get { return get_assembly_component_usage(); } }
        public void put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }

        public bool is_external_class_library() { return IsADBEntity("external_class_library"); }
        public bool _is_external_class_library { get { return is_external_class_library(); } }
        public external_class_library get_external_class_library() { return new external_class_library (getEntityInstance("EXTERNAL_CLASS_LIBRARY")); }
        public external_class_library _external_class_library { get { return get_external_class_library(); } }
        public void put_external_class_library(external_class_library inst) { putEntityInstance("EXTERNAL_CLASS_LIBRARY", inst); }

        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }

        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        };


    public class name_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_item_get() : base(null) { }

        public bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        public bool _is_assembly_component_usage { get { return is_assembly_component_usage(); } }
        public assembly_component_usage get_assembly_component_usage() { return new assembly_component_usage (getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); }
        public assembly_component_usage _assembly_component_usage { get { return get_assembly_component_usage(); } }
        public bool is_external_class_library() { return IsADBEntity("external_class_library"); }
        public bool _is_external_class_library { get { return is_external_class_library(); } }
        public external_class_library get_external_class_library() { return new external_class_library (getEntityInstance("EXTERNAL_CLASS_LIBRARY")); }
        public external_class_library _external_class_library { get { return get_external_class_library(); } }
        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class name_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public name_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public name_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public name_item_put() : base(null) { }

        public void put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
        public void put_external_class_library(external_class_library inst) { putEntityInstance("EXTERNAL_CLASS_LIBRARY", inst); }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        };


    public class organization_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public organization_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public organization_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public organization_item() : base(null) { }


        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public void put_action(action inst) { putEntityInstance("ACTION", inst); }

        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }

        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }

        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }

        public bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        public bool _is_applied_classification_assignment { get { return is_applied_classification_assignment(); } }
        public applied_classification_assignment get_applied_classification_assignment() { return new applied_classification_assignment (getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
        public applied_classification_assignment _applied_classification_assignment { get { return get_applied_classification_assignment(); } }
        public void put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }

        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }

        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }

        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }

        public bool is_class_() { return IsADBEntity("class_"); }
        public bool _is_class_ { get { return is_class_(); } }
        public class_ get_class_() { return new class_ (getEntityInstance("CLASS")); }
        public class_ _class_ { get { return get_class_(); } }
        public void put_class_(class_ inst) { putEntityInstance("CLASS", inst); }

        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }

        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }

        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }

        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }

        public bool is_rule_action() { return IsADBEntity("rule_action"); }
        public bool _is_rule_action { get { return is_rule_action(); } }
        public rule_action get_rule_action() { return new rule_action (getEntityInstance("RULE_ACTION")); }
        public rule_action _rule_action { get { return get_rule_action(); } }
        public void put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }

        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class organization_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public organization_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public organization_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public organization_item_get() : base(null) { }

        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        public bool _is_applied_classification_assignment { get { return is_applied_classification_assignment(); } }
        public applied_classification_assignment get_applied_classification_assignment() { return new applied_classification_assignment (getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
        public applied_classification_assignment _applied_classification_assignment { get { return get_applied_classification_assignment(); } }
        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public bool is_class_() { return IsADBEntity("class_"); }
        public bool _is_class_ { get { return is_class_(); } }
        public class_ get_class_() { return new class_ (getEntityInstance("CLASS")); }
        public class_ _class_ { get { return get_class_(); } }
        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public bool is_rule_action() { return IsADBEntity("rule_action"); }
        public bool _is_rule_action { get { return is_rule_action(); } }
        public rule_action get_rule_action() { return new rule_action (getEntityInstance("RULE_ACTION")); }
        public rule_action _rule_action { get { return get_rule_action(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class organization_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public organization_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public organization_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public organization_item_put() : base(null) { }

        public void put_action(action inst) { putEntityInstance("ACTION", inst); }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
        public void put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
        public void put_class_(class_ inst) { putEntityInstance("CLASS", inst); }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
        public void put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class orientation_basis_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public orientation_basis_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public orientation_basis_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public orientation_basis_select() : base(null) { }


        public bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        public bool _is_axis2_placement_3d { get { return is_axis2_placement_3d(); } }
        public axis2_placement_3d get_axis2_placement_3d() { return new axis2_placement_3d (getEntityInstance("AXIS2_PLACEMENT_3D")); }
        public axis2_placement_3d _axis2_placement_3d { get { return get_axis2_placement_3d(); } }
        public void put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }

        public bool is_min_and_major_ply_orientation_basis() { return IsADBEntity("min_and_major_ply_orientation_basis"); }
        public bool _is_min_and_major_ply_orientation_basis { get { return is_min_and_major_ply_orientation_basis(); } }
        public min_and_major_ply_orientation_basis get_min_and_major_ply_orientation_basis() { return new min_and_major_ply_orientation_basis (getEntityInstance("MIN_AND_MAJOR_PLY_ORIENTATION_BASIS")); }
        public min_and_major_ply_orientation_basis _min_and_major_ply_orientation_basis { get { return get_min_and_major_ply_orientation_basis(); } }
        public void put_min_and_major_ply_orientation_basis(min_and_major_ply_orientation_basis inst) { putEntityInstance("MIN_AND_MAJOR_PLY_ORIENTATION_BASIS", inst); }
        };


    public class orientation_basis_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public orientation_basis_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public orientation_basis_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public orientation_basis_select_get() : base(null) { }

        public bool is_axis2_placement_3d() { return IsADBEntity("axis2_placement_3d"); }
        public bool _is_axis2_placement_3d { get { return is_axis2_placement_3d(); } }
        public axis2_placement_3d get_axis2_placement_3d() { return new axis2_placement_3d (getEntityInstance("AXIS2_PLACEMENT_3D")); }
        public axis2_placement_3d _axis2_placement_3d { get { return get_axis2_placement_3d(); } }
        public bool is_min_and_major_ply_orientation_basis() { return IsADBEntity("min_and_major_ply_orientation_basis"); }
        public bool _is_min_and_major_ply_orientation_basis { get { return is_min_and_major_ply_orientation_basis(); } }
        public min_and_major_ply_orientation_basis get_min_and_major_ply_orientation_basis() { return new min_and_major_ply_orientation_basis (getEntityInstance("MIN_AND_MAJOR_PLY_ORIENTATION_BASIS")); }
        public min_and_major_ply_orientation_basis _min_and_major_ply_orientation_basis { get { return get_min_and_major_ply_orientation_basis(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class orientation_basis_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public orientation_basis_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public orientation_basis_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public orientation_basis_select_put() : base(null) { }

        public void put_axis2_placement_3d(axis2_placement_3d inst) { putEntityInstance("AXIS2_PLACEMENT_3D", inst); }
        public void put_min_and_major_ply_orientation_basis(min_and_major_ply_orientation_basis inst) { putEntityInstance("MIN_AND_MAJOR_PLY_ORIENTATION_BASIS", inst); }
        };


    public class pcurve_or_surface : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public pcurve_or_surface(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public pcurve_or_surface(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public pcurve_or_surface() : base(null) { }


        public bool is_pcurve() { return IsADBEntity("pcurve"); }
        public bool _is_pcurve { get { return is_pcurve(); } }
        public pcurve get_pcurve() { return new pcurve (getEntityInstance("PCURVE")); }
        public pcurve _pcurve { get { return get_pcurve(); } }
        public void put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }

        public bool is_surface() { return IsADBEntity("surface"); }
        public bool _is_surface { get { return is_surface(); } }
        public surface get_surface() { return new surface (getEntityInstance("SURFACE")); }
        public surface _surface { get { return get_surface(); } }
        public void put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
        };


    public class pcurve_or_surface_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public pcurve_or_surface_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public pcurve_or_surface_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public pcurve_or_surface_get() : base(null) { }

        public bool is_pcurve() { return IsADBEntity("pcurve"); }
        public bool _is_pcurve { get { return is_pcurve(); } }
        public pcurve get_pcurve() { return new pcurve (getEntityInstance("PCURVE")); }
        public pcurve _pcurve { get { return get_pcurve(); } }
        public bool is_surface() { return IsADBEntity("surface"); }
        public bool _is_surface { get { return is_surface(); } }
        public surface get_surface() { return new surface (getEntityInstance("SURFACE")); }
        public surface _surface { get { return get_surface(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class pcurve_or_surface_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public pcurve_or_surface_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public pcurve_or_surface_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public pcurve_or_surface_put() : base(null) { }

        public void put_pcurve(pcurve inst) { putEntityInstance("PCURVE", inst); }
        public void put_surface(surface inst) { putEntityInstance("SURFACE", inst); }
        };


    public class person_and_organization_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public person_and_organization_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public person_and_organization_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public person_and_organization_item() : base(null) { }


        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public void put_action(action inst) { putEntityInstance("ACTION", inst); }

        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }

        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }

        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }

        public bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        public bool _is_applied_classification_assignment { get { return is_applied_classification_assignment(); } }
        public applied_classification_assignment get_applied_classification_assignment() { return new applied_classification_assignment (getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
        public applied_classification_assignment _applied_classification_assignment { get { return get_applied_classification_assignment(); } }
        public void put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }

        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }

        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }

        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }

        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }

        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }

        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }

        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }

        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }

        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }

        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }

        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }

        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }

        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }

        public bool is_rule_action() { return IsADBEntity("rule_action"); }
        public bool _is_rule_action { get { return is_rule_action(); } }
        public rule_action get_rule_action() { return new rule_action (getEntityInstance("RULE_ACTION")); }
        public rule_action _rule_action { get { return get_rule_action(); } }
        public void put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }

        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }

        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }

        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class person_and_organization_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public person_and_organization_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public person_and_organization_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public person_and_organization_item_get() : base(null) { }

        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public bool is_action_directive() { return IsADBEntity("action_directive"); }
        public bool _is_action_directive { get { return is_action_directive(); } }
        public action_directive get_action_directive() { return new action_directive (getEntityInstance("ACTION_DIRECTIVE")); }
        public action_directive _action_directive { get { return get_action_directive(); } }
        public bool is_alternate_product_relationship() { return IsADBEntity("alternate_product_relationship"); }
        public bool _is_alternate_product_relationship { get { return is_alternate_product_relationship(); } }
        public alternate_product_relationship get_alternate_product_relationship() { return new alternate_product_relationship (getEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP")); }
        public alternate_product_relationship _alternate_product_relationship { get { return get_alternate_product_relationship(); } }
        public bool is_applied_action_assignment() { return IsADBEntity("applied_action_assignment"); }
        public bool _is_applied_action_assignment { get { return is_applied_action_assignment(); } }
        public applied_action_assignment get_applied_action_assignment() { return new applied_action_assignment (getEntityInstance("APPLIED_ACTION_ASSIGNMENT")); }
        public applied_action_assignment _applied_action_assignment { get { return get_applied_action_assignment(); } }
        public bool is_applied_classification_assignment() { return IsADBEntity("applied_classification_assignment"); }
        public bool _is_applied_classification_assignment { get { return is_applied_classification_assignment(); } }
        public applied_classification_assignment get_applied_classification_assignment() { return new applied_classification_assignment (getEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT")); }
        public applied_classification_assignment _applied_classification_assignment { get { return get_applied_classification_assignment(); } }
        public bool is_applied_identification_assignment() { return IsADBEntity("applied_identification_assignment"); }
        public bool _is_applied_identification_assignment { get { return is_applied_identification_assignment(); } }
        public applied_identification_assignment get_applied_identification_assignment() { return new applied_identification_assignment (getEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT")); }
        public applied_identification_assignment _applied_identification_assignment { get { return get_applied_identification_assignment(); } }
        public bool is_applied_security_classification_assignment() { return IsADBEntity("applied_security_classification_assignment"); }
        public bool _is_applied_security_classification_assignment { get { return is_applied_security_classification_assignment(); } }
        public applied_security_classification_assignment get_applied_security_classification_assignment() { return new applied_security_classification_assignment (getEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public applied_security_classification_assignment _applied_security_classification_assignment { get { return get_applied_security_classification_assignment(); } }
        public bool is_approval() { return IsADBEntity("approval"); }
        public bool _is_approval { get { return is_approval(); } }
        public approval get_approval() { return new approval (getEntityInstance("APPROVAL")); }
        public approval _approval { get { return get_approval(); } }
        public bool is_assembly_component_usage_substitute() { return IsADBEntity("assembly_component_usage_substitute"); }
        public bool _is_assembly_component_usage_substitute { get { return is_assembly_component_usage_substitute(); } }
        public assembly_component_usage_substitute get_assembly_component_usage_substitute() { return new assembly_component_usage_substitute (getEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")); }
        public assembly_component_usage_substitute _assembly_component_usage_substitute { get { return get_assembly_component_usage_substitute(); } }
        public bool is_certification() { return IsADBEntity("certification"); }
        public bool _is_certification { get { return is_certification(); } }
        public certification get_certification() { return new certification (getEntityInstance("CERTIFICATION")); }
        public certification _certification { get { return get_certification(); } }
        public bool is_configuration_item() { return IsADBEntity("configuration_item"); }
        public bool _is_configuration_item { get { return is_configuration_item(); } }
        public configuration_item get_configuration_item() { return new configuration_item (getEntityInstance("CONFIGURATION_ITEM")); }
        public configuration_item _configuration_item { get { return get_configuration_item(); } }
        public bool is_contract() { return IsADBEntity("contract"); }
        public bool _is_contract { get { return is_contract(); } }
        public contract get_contract() { return new contract (getEntityInstance("CONTRACT")); }
        public contract _contract { get { return get_contract(); } }
        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public bool is_information_usage_right() { return IsADBEntity("information_usage_right"); }
        public bool _is_information_usage_right { get { return is_information_usage_right(); } }
        public information_usage_right get_information_usage_right() { return new information_usage_right (getEntityInstance("INFORMATION_USAGE_RIGHT")); }
        public information_usage_right _information_usage_right { get { return get_information_usage_right(); } }
        public bool is_organizational_project() { return IsADBEntity("organizational_project"); }
        public bool _is_organizational_project { get { return is_organizational_project(); } }
        public organizational_project get_organizational_project() { return new organizational_project (getEntityInstance("ORGANIZATIONAL_PROJECT")); }
        public organizational_project _organizational_project { get { return get_organizational_project(); } }
        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_formation_relationship() { return IsADBEntity("product_definition_formation_relationship"); }
        public bool _is_product_definition_formation_relationship { get { return is_product_definition_formation_relationship(); } }
        public product_definition_formation_relationship get_product_definition_formation_relationship() { return new product_definition_formation_relationship (getEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")); }
        public product_definition_formation_relationship _product_definition_formation_relationship { get { return get_product_definition_formation_relationship(); } }
        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public bool is_rule_action() { return IsADBEntity("rule_action"); }
        public bool _is_rule_action { get { return is_rule_action(); } }
        public rule_action get_rule_action() { return new rule_action (getEntityInstance("RULE_ACTION")); }
        public rule_action _rule_action { get { return get_rule_action(); } }
        public bool is_security_classification() { return IsADBEntity("security_classification"); }
        public bool _is_security_classification { get { return is_security_classification(); } }
        public security_classification get_security_classification() { return new security_classification (getEntityInstance("SECURITY_CLASSIFICATION")); }
        public security_classification _security_classification { get { return get_security_classification(); } }
        public bool is_shape_representation() { return IsADBEntity("shape_representation"); }
        public bool _is_shape_representation { get { return is_shape_representation(); } }
        public shape_representation get_shape_representation() { return new shape_representation (getEntityInstance("SHAPE_REPRESENTATION")); }
        public shape_representation _shape_representation { get { return get_shape_representation(); } }
        public bool is_versioned_action_request() { return IsADBEntity("versioned_action_request"); }
        public bool _is_versioned_action_request { get { return is_versioned_action_request(); } }
        public versioned_action_request get_versioned_action_request() { return new versioned_action_request (getEntityInstance("VERSIONED_ACTION_REQUEST")); }
        public versioned_action_request _versioned_action_request { get { return get_versioned_action_request(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class person_and_organization_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public person_and_organization_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public person_and_organization_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public person_and_organization_item_put() : base(null) { }

        public void put_action(action inst) { putEntityInstance("ACTION", inst); }
        public void put_action_directive(action_directive inst) { putEntityInstance("ACTION_DIRECTIVE", inst); }
        public void put_alternate_product_relationship(alternate_product_relationship inst) { putEntityInstance("ALTERNATE_PRODUCT_RELATIONSHIP", inst); }
        public void put_applied_action_assignment(applied_action_assignment inst) { putEntityInstance("APPLIED_ACTION_ASSIGNMENT", inst); }
        public void put_applied_classification_assignment(applied_classification_assignment inst) { putEntityInstance("APPLIED_CLASSIFICATION_ASSIGNMENT", inst); }
        public void put_applied_identification_assignment(applied_identification_assignment inst) { putEntityInstance("APPLIED_IDENTIFICATION_ASSIGNMENT", inst); }
        public void put_applied_security_classification_assignment(applied_security_classification_assignment inst) { putEntityInstance("APPLIED_SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
        public void put_approval(approval inst) { putEntityInstance("APPROVAL", inst); }
        public void put_assembly_component_usage_substitute(assembly_component_usage_substitute inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", inst); }
        public void put_certification(certification inst) { putEntityInstance("CERTIFICATION", inst); }
        public void put_configuration_item(configuration_item inst) { putEntityInstance("CONFIGURATION_ITEM", inst); }
        public void put_contract(contract inst) { putEntityInstance("CONTRACT", inst); }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
        public void put_information_usage_right(information_usage_right inst) { putEntityInstance("INFORMATION_USAGE_RIGHT", inst); }
        public void put_organizational_project(organizational_project inst) { putEntityInstance("ORGANIZATIONAL_PROJECT", inst); }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_formation_relationship(product_definition_formation_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION_RELATIONSHIP", inst); }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
        public void put_rule_action(rule_action inst) { putEntityInstance("RULE_ACTION", inst); }
        public void put_security_classification(security_classification inst) { putEntityInstance("SECURITY_CLASSIFICATION", inst); }
        public void put_shape_representation(shape_representation inst) { putEntityInstance("SHAPE_REPRESENTATION", inst); }
        public void put_versioned_action_request(versioned_action_request inst) { putEntityInstance("VERSIONED_ACTION_REQUEST", inst); }
        };


    public class person_organization_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public person_organization_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public person_organization_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public person_organization_select() : base(null) { }


        public bool is_person() { return IsADBEntity("person"); }
        public bool _is_person { get { return is_person(); } }
        public person get_person() { return new person (getEntityInstance("PERSON")); }
        public person _person { get { return get_person(); } }
        public void put_person(person inst) { putEntityInstance("PERSON", inst); }

        public bool is_organization() { return IsADBEntity("organization"); }
        public bool _is_organization { get { return is_organization(); } }
        public organization get_organization() { return new organization (getEntityInstance("ORGANIZATION")); }
        public organization _organization { get { return get_organization(); } }
        public void put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }

        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
        };


    public class person_organization_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public person_organization_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public person_organization_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public person_organization_select_get() : base(null) { }

        public bool is_person() { return IsADBEntity("person"); }
        public bool _is_person { get { return is_person(); } }
        public person get_person() { return new person (getEntityInstance("PERSON")); }
        public person _person { get { return get_person(); } }
        public bool is_organization() { return IsADBEntity("organization"); }
        public bool _is_organization { get { return is_organization(); } }
        public organization get_organization() { return new organization (getEntityInstance("ORGANIZATION")); }
        public organization _organization { get { return get_organization(); } }
        public bool is_person_and_organization() { return IsADBEntity("person_and_organization"); }
        public bool _is_person_and_organization { get { return is_person_and_organization(); } }
        public person_and_organization get_person_and_organization() { return new person_and_organization (getEntityInstance("PERSON_AND_ORGANIZATION")); }
        public person_and_organization _person_and_organization { get { return get_person_and_organization(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class person_organization_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public person_organization_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public person_organization_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public person_organization_select_put() : base(null) { }

        public void put_person(person inst) { putEntityInstance("PERSON", inst); }
        public void put_organization(organization inst) { putEntityInstance("ORGANIZATION", inst); }
        public void put_person_and_organization(person_and_organization inst) { putEntityInstance("PERSON_AND_ORGANIZATION", inst); }
        };


    public class picture_representation_item_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public picture_representation_item_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public picture_representation_item_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public picture_representation_item_select() : base(null) { }


        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }
        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }

        public bool is_planar_box() { return IsADBEntity("planar_box"); }
        public bool _is_planar_box { get { return is_planar_box(); } }
        public planar_box get_planar_box() { return new planar_box (getEntityInstance("PLANAR_BOX")); }
        public planar_box _planar_box { get { return get_planar_box(); } }
        public void put_planar_box(planar_box inst) { putEntityInstance("PLANAR_BOX", inst); }

        public bool is_axis2_placement_2d() { return IsADBEntity("axis2_placement_2d"); }
        public bool _is_axis2_placement_2d { get { return is_axis2_placement_2d(); } }
        public axis2_placement_2d get_axis2_placement_2d() { return new axis2_placement_2d (getEntityInstance("AXIS2_PLACEMENT_2D")); }
        public axis2_placement_2d _axis2_placement_2d { get { return get_axis2_placement_2d(); } }
        public void put_axis2_placement_2d(axis2_placement_2d inst) { putEntityInstance("AXIS2_PLACEMENT_2D", inst); }
        };


    public class picture_representation_item_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public picture_representation_item_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public picture_representation_item_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public picture_representation_item_select_get() : base(null) { }

        public bool is_styled_item() { return IsADBEntity("styled_item"); }
        public bool _is_styled_item { get { return is_styled_item(); } }
        public styled_item get_styled_item() { return new styled_item (getEntityInstance("STYLED_ITEM")); }
        public styled_item _styled_item { get { return get_styled_item(); } }
        public bool is_planar_box() { return IsADBEntity("planar_box"); }
        public bool _is_planar_box { get { return is_planar_box(); } }
        public planar_box get_planar_box() { return new planar_box (getEntityInstance("PLANAR_BOX")); }
        public planar_box _planar_box { get { return get_planar_box(); } }
        public bool is_axis2_placement_2d() { return IsADBEntity("axis2_placement_2d"); }
        public bool _is_axis2_placement_2d { get { return is_axis2_placement_2d(); } }
        public axis2_placement_2d get_axis2_placement_2d() { return new axis2_placement_2d (getEntityInstance("AXIS2_PLACEMENT_2D")); }
        public axis2_placement_2d _axis2_placement_2d { get { return get_axis2_placement_2d(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class picture_representation_item_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public picture_representation_item_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public picture_representation_item_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public picture_representation_item_select_put() : base(null) { }

        public void put_styled_item(styled_item inst) { putEntityInstance("STYLED_ITEM", inst); }
        public void put_planar_box(planar_box inst) { putEntityInstance("PLANAR_BOX", inst); }
        public void put_axis2_placement_2d(axis2_placement_2d inst) { putEntityInstance("AXIS2_PLACEMENT_2D", inst); }
        };


    public class plane_or_planar_box : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public plane_or_planar_box(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public plane_or_planar_box(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public plane_or_planar_box() : base(null) { }


        public bool is_plane() { return IsADBEntity("plane"); }
        public bool _is_plane { get { return is_plane(); } }
        public plane get_plane() { return new plane (getEntityInstance("PLANE")); }
        public plane _plane { get { return get_plane(); } }
        public void put_plane(plane inst) { putEntityInstance("PLANE", inst); }

        public bool is_planar_box() { return IsADBEntity("planar_box"); }
        public bool _is_planar_box { get { return is_planar_box(); } }
        public planar_box get_planar_box() { return new planar_box (getEntityInstance("PLANAR_BOX")); }
        public planar_box _planar_box { get { return get_planar_box(); } }
        public void put_planar_box(planar_box inst) { putEntityInstance("PLANAR_BOX", inst); }
        };


    public class plane_or_planar_box_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public plane_or_planar_box_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public plane_or_planar_box_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public plane_or_planar_box_get() : base(null) { }

        public bool is_plane() { return IsADBEntity("plane"); }
        public bool _is_plane { get { return is_plane(); } }
        public plane get_plane() { return new plane (getEntityInstance("PLANE")); }
        public plane _plane { get { return get_plane(); } }
        public bool is_planar_box() { return IsADBEntity("planar_box"); }
        public bool _is_planar_box { get { return is_planar_box(); } }
        public planar_box get_planar_box() { return new planar_box (getEntityInstance("PLANAR_BOX")); }
        public planar_box _planar_box { get { return get_planar_box(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class plane_or_planar_box_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public plane_or_planar_box_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public plane_or_planar_box_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public plane_or_planar_box_put() : base(null) { }

        public void put_plane(plane inst) { putEntityInstance("PLANE", inst); }
        public void put_planar_box(planar_box inst) { putEntityInstance("PLANAR_BOX", inst); }
        };


    public class point_and_vector_member : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public point_and_vector_member(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public point_and_vector_member(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public point_and_vector_member() : base(null) { }


        public bool is_point() { return IsADBEntity("point"); }
        public bool _is_point { get { return is_point(); } }
        public point get_point() { return new point (getEntityInstance("POINT")); }
        public point _point { get { return get_point(); } }
        public void put_point(point inst) { putEntityInstance("POINT", inst); }

        public bool is_direction() { return IsADBEntity("direction"); }
        public bool _is_direction { get { return is_direction(); } }
        public direction get_direction() { return new direction (getEntityInstance("DIRECTION")); }
        public direction _direction { get { return get_direction(); } }
        public void put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
        };


    public class point_and_vector_member_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public point_and_vector_member_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public point_and_vector_member_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public point_and_vector_member_get() : base(null) { }

        public bool is_point() { return IsADBEntity("point"); }
        public bool _is_point { get { return is_point(); } }
        public point get_point() { return new point (getEntityInstance("POINT")); }
        public point _point { get { return get_point(); } }
        public bool is_direction() { return IsADBEntity("direction"); }
        public bool _is_direction { get { return is_direction(); } }
        public direction get_direction() { return new direction (getEntityInstance("DIRECTION")); }
        public direction _direction { get { return get_direction(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class point_and_vector_member_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public point_and_vector_member_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public point_and_vector_member_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public point_and_vector_member_put() : base(null) { }

        public void put_point(point inst) { putEntityInstance("POINT", inst); }
        public void put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
        };


    public class presentation_representation_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_representation_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_representation_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_representation_select() : base(null) { }


        public bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        public bool _is_presentation_representation { get { return is_presentation_representation(); } }
        public presentation_representation get_presentation_representation() { return new presentation_representation (getEntityInstance("PRESENTATION_REPRESENTATION")); }
        public presentation_representation _presentation_representation { get { return get_presentation_representation(); } }
        public void put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }

        public bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        public bool _is_presentation_set { get { return is_presentation_set(); } }
        public presentation_set get_presentation_set() { return new presentation_set (getEntityInstance("PRESENTATION_SET")); }
        public presentation_set _presentation_set { get { return get_presentation_set(); } }
        public void put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
        };


    public class presentation_representation_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_representation_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_representation_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_representation_select_get() : base(null) { }

        public bool is_presentation_representation() { return IsADBEntity("presentation_representation"); }
        public bool _is_presentation_representation { get { return is_presentation_representation(); } }
        public presentation_representation get_presentation_representation() { return new presentation_representation (getEntityInstance("PRESENTATION_REPRESENTATION")); }
        public presentation_representation _presentation_representation { get { return get_presentation_representation(); } }
        public bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        public bool _is_presentation_set { get { return is_presentation_set(); } }
        public presentation_set get_presentation_set() { return new presentation_set (getEntityInstance("PRESENTATION_SET")); }
        public presentation_set _presentation_set { get { return get_presentation_set(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class presentation_representation_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_representation_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_representation_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_representation_select_put() : base(null) { }

        public void put_presentation_representation(presentation_representation inst) { putEntityInstance("PRESENTATION_REPRESENTATION", inst); }
        public void put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
        };


    public class presentation_size_assignment_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_size_assignment_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_size_assignment_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_size_assignment_select() : base(null) { }


        public bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        public bool _is_presentation_view { get { return is_presentation_view(); } }
        public presentation_view get_presentation_view() { return new presentation_view (getEntityInstance("PRESENTATION_VIEW")); }
        public presentation_view _presentation_view { get { return get_presentation_view(); } }
        public void put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }

        public bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        public bool _is_presentation_area { get { return is_presentation_area(); } }
        public presentation_area get_presentation_area() { return new presentation_area (getEntityInstance("PRESENTATION_AREA")); }
        public presentation_area _presentation_area { get { return get_presentation_area(); } }
        public void put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }

        public bool is_area_in_set() { return IsADBEntity("area_in_set"); }
        public bool _is_area_in_set { get { return is_area_in_set(); } }
        public area_in_set get_area_in_set() { return new area_in_set (getEntityInstance("AREA_IN_SET")); }
        public area_in_set _area_in_set { get { return get_area_in_set(); } }
        public void put_area_in_set(area_in_set inst) { putEntityInstance("AREA_IN_SET", inst); }
        };


    public class presentation_size_assignment_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_size_assignment_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_size_assignment_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_size_assignment_select_get() : base(null) { }

        public bool is_presentation_view() { return IsADBEntity("presentation_view"); }
        public bool _is_presentation_view { get { return is_presentation_view(); } }
        public presentation_view get_presentation_view() { return new presentation_view (getEntityInstance("PRESENTATION_VIEW")); }
        public presentation_view _presentation_view { get { return get_presentation_view(); } }
        public bool is_presentation_area() { return IsADBEntity("presentation_area"); }
        public bool _is_presentation_area { get { return is_presentation_area(); } }
        public presentation_area get_presentation_area() { return new presentation_area (getEntityInstance("PRESENTATION_AREA")); }
        public presentation_area _presentation_area { get { return get_presentation_area(); } }
        public bool is_area_in_set() { return IsADBEntity("area_in_set"); }
        public bool _is_area_in_set { get { return is_area_in_set(); } }
        public area_in_set get_area_in_set() { return new area_in_set (getEntityInstance("AREA_IN_SET")); }
        public area_in_set _area_in_set { get { return get_area_in_set(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class presentation_size_assignment_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_size_assignment_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_size_assignment_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_size_assignment_select_put() : base(null) { }

        public void put_presentation_view(presentation_view inst) { putEntityInstance("PRESENTATION_VIEW", inst); }
        public void put_presentation_area(presentation_area inst) { putEntityInstance("PRESENTATION_AREA", inst); }
        public void put_area_in_set(area_in_set inst) { putEntityInstance("AREA_IN_SET", inst); }
        };


    public class presentation_style_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_style_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_style_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_style_select() : base(null) { }


        public bool is_point_style() { return IsADBEntity("point_style"); }
        public bool _is_point_style { get { return is_point_style(); } }
        public point_style get_point_style() { return new point_style (getEntityInstance("POINT_STYLE")); }
        public point_style _point_style { get { return get_point_style(); } }
        public void put_point_style(point_style inst) { putEntityInstance("POINT_STYLE", inst); }

        public bool is_curve_style() { return IsADBEntity("curve_style"); }
        public bool _is_curve_style { get { return is_curve_style(); } }
        public curve_style get_curve_style() { return new curve_style (getEntityInstance("CURVE_STYLE")); }
        public curve_style _curve_style { get { return get_curve_style(); } }
        public void put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }

        public bool is_surface_style_usage() { return IsADBEntity("surface_style_usage"); }
        public bool _is_surface_style_usage { get { return is_surface_style_usage(); } }
        public surface_style_usage get_surface_style_usage() { return new surface_style_usage (getEntityInstance("SURFACE_STYLE_USAGE")); }
        public surface_style_usage _surface_style_usage { get { return get_surface_style_usage(); } }
        public void put_surface_style_usage(surface_style_usage inst) { putEntityInstance("SURFACE_STYLE_USAGE", inst); }

        public bool is_symbol_style() { return IsADBEntity("symbol_style"); }
        public bool _is_symbol_style { get { return is_symbol_style(); } }
        public symbol_style get_symbol_style() { return new symbol_style (getEntityInstance("SYMBOL_STYLE")); }
        public symbol_style _symbol_style { get { return get_symbol_style(); } }
        public void put_symbol_style(symbol_style inst) { putEntityInstance("SYMBOL_STYLE", inst); }

        public bool is_fill_area_style() { return IsADBEntity("fill_area_style"); }
        public bool _is_fill_area_style { get { return is_fill_area_style(); } }
        public fill_area_style get_fill_area_style() { return new fill_area_style (getEntityInstance("FILL_AREA_STYLE")); }
        public fill_area_style _fill_area_style { get { return get_fill_area_style(); } }
        public void put_fill_area_style(fill_area_style inst) { putEntityInstance("FILL_AREA_STYLE", inst); }

        public bool is_text_style() { return IsADBEntity("text_style"); }
        public bool _is_text_style { get { return is_text_style(); } }
        public text_style get_text_style() { return new text_style (getEntityInstance("TEXT_STYLE")); }
        public text_style _text_style { get { return get_text_style(); } }
        public void put_text_style(text_style inst) { putEntityInstance("TEXT_STYLE", inst); }

        public bool is_null_style() { return IsADBType("NULL_STYLE"); }
        public bool _is_null_style { get { return is_null_style(); } }
        public null_style? get_null_style() { int ind = getEnumerationIndex("NULL_STYLE", EnumNames.null_style_); return EnumValue<null_style>.FromIndex(ind); }
        public null_style? _null_style { get { return get_null_style(); } }
        public void put_null_style(null_style value) { TextValue val = EnumString<null_style>.FromValue(value, EnumNames.null_style_); putEnumerationValue("NULL_STYLE", val); }
        };


    public class presentation_style_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_style_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_style_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_style_select_get() : base(null) { }

        public bool is_point_style() { return IsADBEntity("point_style"); }
        public bool _is_point_style { get { return is_point_style(); } }
        public point_style get_point_style() { return new point_style (getEntityInstance("POINT_STYLE")); }
        public point_style _point_style { get { return get_point_style(); } }
        public bool is_curve_style() { return IsADBEntity("curve_style"); }
        public bool _is_curve_style { get { return is_curve_style(); } }
        public curve_style get_curve_style() { return new curve_style (getEntityInstance("CURVE_STYLE")); }
        public curve_style _curve_style { get { return get_curve_style(); } }
        public bool is_surface_style_usage() { return IsADBEntity("surface_style_usage"); }
        public bool _is_surface_style_usage { get { return is_surface_style_usage(); } }
        public surface_style_usage get_surface_style_usage() { return new surface_style_usage (getEntityInstance("SURFACE_STYLE_USAGE")); }
        public surface_style_usage _surface_style_usage { get { return get_surface_style_usage(); } }
        public bool is_symbol_style() { return IsADBEntity("symbol_style"); }
        public bool _is_symbol_style { get { return is_symbol_style(); } }
        public symbol_style get_symbol_style() { return new symbol_style (getEntityInstance("SYMBOL_STYLE")); }
        public symbol_style _symbol_style { get { return get_symbol_style(); } }
        public bool is_fill_area_style() { return IsADBEntity("fill_area_style"); }
        public bool _is_fill_area_style { get { return is_fill_area_style(); } }
        public fill_area_style get_fill_area_style() { return new fill_area_style (getEntityInstance("FILL_AREA_STYLE")); }
        public fill_area_style _fill_area_style { get { return get_fill_area_style(); } }
        public bool is_text_style() { return IsADBEntity("text_style"); }
        public bool _is_text_style { get { return is_text_style(); } }
        public text_style get_text_style() { return new text_style (getEntityInstance("TEXT_STYLE")); }
        public text_style _text_style { get { return get_text_style(); } }
        public bool is_null_style() { return IsADBType("NULL_STYLE"); }
        public bool _is_null_style { get { return is_null_style(); } }
        public null_style? get_null_style() { int ind = getEnumerationIndex("NULL_STYLE", EnumNames.null_style_); return EnumValue<null_style>.FromIndex(ind); }
        public null_style? _null_style { get { return get_null_style(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class presentation_style_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presentation_style_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presentation_style_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presentation_style_select_put() : base(null) { }

        public void put_point_style(point_style inst) { putEntityInstance("POINT_STYLE", inst); }
        public void put_curve_style(curve_style inst) { putEntityInstance("CURVE_STYLE", inst); }
        public void put_surface_style_usage(surface_style_usage inst) { putEntityInstance("SURFACE_STYLE_USAGE", inst); }
        public void put_symbol_style(symbol_style inst) { putEntityInstance("SYMBOL_STYLE", inst); }
        public void put_fill_area_style(fill_area_style inst) { putEntityInstance("FILL_AREA_STYLE", inst); }
        public void put_text_style(text_style inst) { putEntityInstance("TEXT_STYLE", inst); }
        public void put_null_style(null_style value) { TextValue val = EnumString<null_style>.FromValue(value, EnumNames.null_style_); putEnumerationValue("NULL_STYLE", val); }
        };


    public class presented_item_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presented_item_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presented_item_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presented_item_select() : base(null) { }


        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public void put_action(action inst) { putEntityInstance("ACTION", inst); }

        public bool is_action_method() { return IsADBEntity("action_method"); }
        public bool _is_action_method { get { return is_action_method(); } }
        public action_method get_action_method() { return new action_method (getEntityInstance("ACTION_METHOD")); }
        public action_method _action_method { get { return get_action_method(); } }
        public void put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }

        public bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        public bool _is_action_relationship { get { return is_action_relationship(); } }
        public action_relationship get_action_relationship() { return new action_relationship (getEntityInstance("ACTION_RELATIONSHIP")); }
        public action_relationship _action_relationship { get { return get_action_relationship(); } }
        public void put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }

        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }

        public bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        public bool _is_product_concept_feature { get { return is_product_concept_feature(); } }
        public product_concept_feature get_product_concept_feature() { return new product_concept_feature (getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
        public product_concept_feature _product_concept_feature { get { return get_product_concept_feature(); } }
        public void put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }

        public bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        public bool _is_product_concept_feature_category { get { return is_product_concept_feature_category(); } }
        public product_concept_feature_category get_product_concept_feature_category() { return new product_concept_feature_category (getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
        public product_concept_feature_category _product_concept_feature_category { get { return get_product_concept_feature_category(); } }
        public void put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        };


    public class presented_item_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presented_item_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presented_item_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presented_item_select_get() : base(null) { }

        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public bool is_action_method() { return IsADBEntity("action_method"); }
        public bool _is_action_method { get { return is_action_method(); } }
        public action_method get_action_method() { return new action_method (getEntityInstance("ACTION_METHOD")); }
        public action_method _action_method { get { return get_action_method(); } }
        public bool is_action_relationship() { return IsADBEntity("action_relationship"); }
        public bool _is_action_relationship { get { return is_action_relationship(); } }
        public action_relationship get_action_relationship() { return new action_relationship (getEntityInstance("ACTION_RELATIONSHIP")); }
        public action_relationship _action_relationship { get { return get_action_relationship(); } }
        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public bool is_product_concept_feature() { return IsADBEntity("product_concept_feature"); }
        public bool _is_product_concept_feature { get { return is_product_concept_feature(); } }
        public product_concept_feature get_product_concept_feature() { return new product_concept_feature (getEntityInstance("PRODUCT_CONCEPT_FEATURE")); }
        public product_concept_feature _product_concept_feature { get { return get_product_concept_feature(); } }
        public bool is_product_concept_feature_category() { return IsADBEntity("product_concept_feature_category"); }
        public bool _is_product_concept_feature_category { get { return is_product_concept_feature_category(); } }
        public product_concept_feature_category get_product_concept_feature_category() { return new product_concept_feature_category (getEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY")); }
        public product_concept_feature_category _product_concept_feature_category { get { return get_product_concept_feature_category(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class presented_item_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public presented_item_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public presented_item_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public presented_item_select_put() : base(null) { }

        public void put_action(action inst) { putEntityInstance("ACTION", inst); }
        public void put_action_method(action_method inst) { putEntityInstance("ACTION_METHOD", inst); }
        public void put_action_relationship(action_relationship inst) { putEntityInstance("ACTION_RELATIONSHIP", inst); }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
        public void put_product_concept_feature(product_concept_feature inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE", inst); }
        public void put_product_concept_feature_category(product_concept_feature_category inst) { putEntityInstance("PRODUCT_CONCEPT_FEATURE_CATEGORY", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        };


    public class product_definition_or_assembly_relationship : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_definition_or_assembly_relationship(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_definition_or_assembly_relationship(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_definition_or_assembly_relationship() : base(null) { }


        public bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        public bool _is_assembly_component_usage { get { return is_assembly_component_usage(); } }
        public assembly_component_usage get_assembly_component_usage() { return new assembly_component_usage (getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); }
        public assembly_component_usage _assembly_component_usage { get { return get_assembly_component_usage(); } }
        public void put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        };


    public class product_definition_or_assembly_relationship_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_definition_or_assembly_relationship_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_definition_or_assembly_relationship_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_definition_or_assembly_relationship_get() : base(null) { }

        public bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        public bool _is_assembly_component_usage { get { return is_assembly_component_usage(); } }
        public assembly_component_usage get_assembly_component_usage() { return new assembly_component_usage (getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); }
        public assembly_component_usage _assembly_component_usage { get { return get_assembly_component_usage(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class product_definition_or_assembly_relationship_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_definition_or_assembly_relationship_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_definition_or_assembly_relationship_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_definition_or_assembly_relationship_put() : base(null) { }

        public void put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        };


    public class product_definition_or_breakdown_element_usage : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_definition_or_breakdown_element_usage(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_definition_or_breakdown_element_usage(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_definition_or_breakdown_element_usage() : base(null) { }


        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        public bool _is_product_definition_usage { get { return is_product_definition_usage(); } }
        public product_definition_usage get_product_definition_usage() { return new product_definition_usage (getEntityInstance("PRODUCT_DEFINITION_USAGE")); }
        public product_definition_usage _product_definition_usage { get { return get_product_definition_usage(); } }
        public void put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
        };


    public class product_definition_or_breakdown_element_usage_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_definition_or_breakdown_element_usage_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_definition_or_breakdown_element_usage_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_definition_or_breakdown_element_usage_get() : base(null) { }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        public bool _is_product_definition_usage { get { return is_product_definition_usage(); } }
        public product_definition_usage get_product_definition_usage() { return new product_definition_usage (getEntityInstance("PRODUCT_DEFINITION_USAGE")); }
        public product_definition_usage _product_definition_usage { get { return get_product_definition_usage(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class product_definition_or_breakdown_element_usage_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_definition_or_breakdown_element_usage_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_definition_or_breakdown_element_usage_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_definition_or_breakdown_element_usage_put() : base(null) { }

        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
        };


    public class product_definition_or_product_definition_relationship : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_definition_or_product_definition_relationship(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_definition_or_product_definition_relationship(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_definition_or_product_definition_relationship() : base(null) { }


        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        public bool _is_product_definition_usage { get { return is_product_definition_usage(); } }
        public product_definition_usage get_product_definition_usage() { return new product_definition_usage (getEntityInstance("PRODUCT_DEFINITION_USAGE")); }
        public product_definition_usage _product_definition_usage { get { return get_product_definition_usage(); } }
        public void put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
        };


    public class product_definition_or_product_definition_relationship_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_definition_or_product_definition_relationship_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_definition_or_product_definition_relationship_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_definition_or_product_definition_relationship_get() : base(null) { }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        public bool _is_product_definition_usage { get { return is_product_definition_usage(); } }
        public product_definition_usage get_product_definition_usage() { return new product_definition_usage (getEntityInstance("PRODUCT_DEFINITION_USAGE")); }
        public product_definition_usage _product_definition_usage { get { return get_product_definition_usage(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class product_definition_or_product_definition_relationship_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_definition_or_product_definition_relationship_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_definition_or_product_definition_relationship_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_definition_or_product_definition_relationship_put() : base(null) { }

        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
        };


    public class product_or_formation_or_definition : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_or_formation_or_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_or_formation_or_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_or_formation_or_definition() : base(null) { }


        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        };


    public class product_or_formation_or_definition_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_or_formation_or_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_or_formation_or_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_or_formation_or_definition_get() : base(null) { }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class product_or_formation_or_definition_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public product_or_formation_or_definition_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public product_or_formation_or_definition_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public product_or_formation_or_definition_put() : base(null) { }

        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        };


    public class project_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public project_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public project_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public project_item() : base(null) { }


        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }

        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
        };


    public class project_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public project_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public project_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public project_item_get() : base(null) { }

        public bool is_executed_action() { return IsADBEntity("executed_action"); }
        public bool _is_executed_action { get { return is_executed_action(); } }
        public executed_action get_executed_action() { return new executed_action (getEntityInstance("EXECUTED_ACTION")); }
        public executed_action _executed_action { get { return get_executed_action(); } }
        public bool is_product_concept() { return IsADBEntity("product_concept"); }
        public bool _is_product_concept { get { return is_product_concept(); } }
        public product_concept get_product_concept() { return new product_concept (getEntityInstance("PRODUCT_CONCEPT")); }
        public product_concept _product_concept { get { return get_product_concept(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class project_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public project_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public project_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public project_item_put() : base(null) { }

        public void put_executed_action(executed_action inst) { putEntityInstance("EXECUTED_ACTION", inst); }
        public void put_product_concept(product_concept inst) { putEntityInstance("PRODUCT_CONCEPT", inst); }
        };


    public class rendering_properties_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rendering_properties_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rendering_properties_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rendering_properties_select() : base(null) { }


        public bool is_surface_style_reflectance_ambient() { return IsADBEntity("surface_style_reflectance_ambient"); }
        public bool _is_surface_style_reflectance_ambient { get { return is_surface_style_reflectance_ambient(); } }
        public surface_style_reflectance_ambient get_surface_style_reflectance_ambient() { return new surface_style_reflectance_ambient (getEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT")); }
        public surface_style_reflectance_ambient _surface_style_reflectance_ambient { get { return get_surface_style_reflectance_ambient(); } }
        public void put_surface_style_reflectance_ambient(surface_style_reflectance_ambient inst) { putEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT", inst); }

        public bool is_surface_style_transparent() { return IsADBEntity("surface_style_transparent"); }
        public bool _is_surface_style_transparent { get { return is_surface_style_transparent(); } }
        public surface_style_transparent get_surface_style_transparent() { return new surface_style_transparent (getEntityInstance("SURFACE_STYLE_TRANSPARENT")); }
        public surface_style_transparent _surface_style_transparent { get { return get_surface_style_transparent(); } }
        public void put_surface_style_transparent(surface_style_transparent inst) { putEntityInstance("SURFACE_STYLE_TRANSPARENT", inst); }
        };


    public class rendering_properties_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rendering_properties_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rendering_properties_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rendering_properties_select_get() : base(null) { }

        public bool is_surface_style_reflectance_ambient() { return IsADBEntity("surface_style_reflectance_ambient"); }
        public bool _is_surface_style_reflectance_ambient { get { return is_surface_style_reflectance_ambient(); } }
        public surface_style_reflectance_ambient get_surface_style_reflectance_ambient() { return new surface_style_reflectance_ambient (getEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT")); }
        public surface_style_reflectance_ambient _surface_style_reflectance_ambient { get { return get_surface_style_reflectance_ambient(); } }
        public bool is_surface_style_transparent() { return IsADBEntity("surface_style_transparent"); }
        public bool _is_surface_style_transparent { get { return is_surface_style_transparent(); } }
        public surface_style_transparent get_surface_style_transparent() { return new surface_style_transparent (getEntityInstance("SURFACE_STYLE_TRANSPARENT")); }
        public surface_style_transparent _surface_style_transparent { get { return get_surface_style_transparent(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class rendering_properties_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rendering_properties_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rendering_properties_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rendering_properties_select_put() : base(null) { }

        public void put_surface_style_reflectance_ambient(surface_style_reflectance_ambient inst) { putEntityInstance("SURFACE_STYLE_REFLECTANCE_AMBIENT", inst); }
        public void put_surface_style_transparent(surface_style_transparent inst) { putEntityInstance("SURFACE_STYLE_TRANSPARENT", inst); }
        };


    public class represented_definition : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public represented_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public represented_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public represented_definition() : base(null) { }


        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }

        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }

        public bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        public bool _is_property_definition_relationship { get { return is_property_definition_relationship(); } }
        public property_definition_relationship get_property_definition_relationship() { return new property_definition_relationship (getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); }
        public property_definition_relationship _property_definition_relationship { get { return get_property_definition_relationship(); } }
        public void put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }

        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }

        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        };


    public class represented_definition_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public represented_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public represented_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public represented_definition_get() : base(null) { }

        public bool is_general_property() { return IsADBEntity("general_property"); }
        public bool _is_general_property { get { return is_general_property(); } }
        public general_property get_general_property() { return new general_property (getEntityInstance("GENERAL_PROPERTY")); }
        public general_property _general_property { get { return get_general_property(); } }
        public bool is_property_definition() { return IsADBEntity("property_definition"); }
        public bool _is_property_definition { get { return is_property_definition(); } }
        public property_definition get_property_definition() { return new property_definition (getEntityInstance("PROPERTY_DEFINITION")); }
        public property_definition _property_definition { get { return get_property_definition(); } }
        public bool is_property_definition_relationship() { return IsADBEntity("property_definition_relationship"); }
        public bool _is_property_definition_relationship { get { return is_property_definition_relationship(); } }
        public property_definition_relationship get_property_definition_relationship() { return new property_definition_relationship (getEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP")); }
        public property_definition_relationship _property_definition_relationship { get { return get_property_definition_relationship(); } }
        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public bool is_shape_aspect_relationship() { return IsADBEntity("shape_aspect_relationship"); }
        public bool _is_shape_aspect_relationship { get { return is_shape_aspect_relationship(); } }
        public shape_aspect_relationship get_shape_aspect_relationship() { return new shape_aspect_relationship (getEntityInstance("SHAPE_ASPECT_RELATIONSHIP")); }
        public shape_aspect_relationship _shape_aspect_relationship { get { return get_shape_aspect_relationship(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class represented_definition_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public represented_definition_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public represented_definition_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public represented_definition_put() : base(null) { }

        public void put_general_property(general_property inst) { putEntityInstance("GENERAL_PROPERTY", inst); }
        public void put_property_definition(property_definition inst) { putEntityInstance("PROPERTY_DEFINITION", inst); }
        public void put_property_definition_relationship(property_definition_relationship inst) { putEntityInstance("PROPERTY_DEFINITION_RELATIONSHIP", inst); }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        public void put_shape_aspect_relationship(shape_aspect_relationship inst) { putEntityInstance("SHAPE_ASPECT_RELATIONSHIP", inst); }
        };


    public class requirement_satisfaction_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public requirement_satisfaction_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public requirement_satisfaction_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public requirement_satisfaction_item() : base(null) { }


        public requirement_assigned_item _requirement_assigned_item() { return new requirement_assigned_item(this); }
        public requirement_assigned_item __requirement_assigned_item { get { return _requirement_assigned_item(); } }
        };


    public class requirement_satisfaction_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public requirement_satisfaction_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public requirement_satisfaction_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public requirement_satisfaction_item_get() : base(null) { }

        public requirement_assigned_item_get get_requirement_assigned_item() { return new requirement_assigned_item_get(this); }
        public requirement_assigned_item_get __requirement_assigned_item { get { return get_requirement_assigned_item(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class requirement_satisfaction_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public requirement_satisfaction_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public requirement_satisfaction_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public requirement_satisfaction_item_put() : base(null) { }

        public requirement_assigned_item_put put_requirement_assigned_item() { return new requirement_assigned_item_put(this); }
        public requirement_assigned_item_put __requirement_assigned_item { get { return put_requirement_assigned_item(); } }
        };


    public class requirement_source_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public requirement_source_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public requirement_source_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public requirement_source_item() : base(null) { }


        public bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        public bool _is_characterized_object { get { return is_characterized_object(); } }
        public characterized_object get_characterized_object() { return new characterized_object (getEntityInstance("CHARACTERIZED_OBJECT")); }
        public characterized_object _characterized_object { get { return get_characterized_object(); } }
        public void put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }

        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }

        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }

        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        };


    public class requirement_source_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public requirement_source_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public requirement_source_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public requirement_source_item_get() : base(null) { }

        public bool is_characterized_object() { return IsADBEntity("characterized_object"); }
        public bool _is_characterized_object { get { return is_characterized_object(); } }
        public characterized_object get_characterized_object() { return new characterized_object (getEntityInstance("CHARACTERIZED_OBJECT")); }
        public characterized_object _characterized_object { get { return get_characterized_object(); } }
        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public bool is_group_relationship() { return IsADBEntity("group_relationship"); }
        public bool _is_group_relationship { get { return is_group_relationship(); } }
        public group_relationship get_group_relationship() { return new group_relationship (getEntityInstance("GROUP_RELATIONSHIP")); }
        public group_relationship _group_relationship { get { return get_group_relationship(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_relationship() { return IsADBEntity("product_definition_relationship"); }
        public bool _is_product_definition_relationship { get { return is_product_definition_relationship(); } }
        public product_definition_relationship get_product_definition_relationship() { return new product_definition_relationship (getEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP")); }
        public product_definition_relationship _product_definition_relationship { get { return get_product_definition_relationship(); } }
        public bool is_shape_aspect() { return IsADBEntity("shape_aspect"); }
        public bool _is_shape_aspect { get { return is_shape_aspect(); } }
        public shape_aspect get_shape_aspect() { return new shape_aspect (getEntityInstance("SHAPE_ASPECT")); }
        public shape_aspect _shape_aspect { get { return get_shape_aspect(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class requirement_source_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public requirement_source_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public requirement_source_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public requirement_source_item_put() : base(null) { }

        public void put_characterized_object(characterized_object inst) { putEntityInstance("CHARACTERIZED_OBJECT", inst); }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }
        public void put_group_relationship(group_relationship inst) { putEntityInstance("GROUP_RELATIONSHIP", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_relationship(product_definition_relationship inst) { putEntityInstance("PRODUCT_DEFINITION_RELATIONSHIP", inst); }
        public void put_shape_aspect(shape_aspect inst) { putEntityInstance("SHAPE_ASPECT", inst); }
        };


    public class reversible_topology_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology_item() : base(null) { }


        public bool is_edge() { return IsADBEntity("edge"); }
        public bool _is_edge { get { return is_edge(); } }
        public edge get_edge() { return new edge (getEntityInstance("EDGE")); }
        public edge _edge { get { return get_edge(); } }
        public void put_edge(edge inst) { putEntityInstance("EDGE", inst); }

        public bool is_path() { return IsADBEntity("path"); }
        public bool _is_path { get { return is_path(); } }
        public path get_path() { return new path (getEntityInstance("PATH")); }
        public path _path { get { return get_path(); } }
        public void put_path(path inst) { putEntityInstance("PATH", inst); }

        public bool is_face() { return IsADBEntity("face"); }
        public bool _is_face { get { return is_face(); } }
        public face get_face() { return new face (getEntityInstance("FACE")); }
        public face _face { get { return get_face(); } }
        public void put_face(face inst) { putEntityInstance("FACE", inst); }

        public bool is_face_bound() { return IsADBEntity("face_bound"); }
        public bool _is_face_bound { get { return is_face_bound(); } }
        public face_bound get_face_bound() { return new face_bound (getEntityInstance("FACE_BOUND")); }
        public face_bound _face_bound { get { return get_face_bound(); } }
        public void put_face_bound(face_bound inst) { putEntityInstance("FACE_BOUND", inst); }

        public bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        public bool _is_closed_shell { get { return is_closed_shell(); } }
        public closed_shell get_closed_shell() { return new closed_shell (getEntityInstance("CLOSED_SHELL")); }
        public closed_shell _closed_shell { get { return get_closed_shell(); } }
        public void put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }

        public bool is_open_shell() { return IsADBEntity("open_shell"); }
        public bool _is_open_shell { get { return is_open_shell(); } }
        public open_shell get_open_shell() { return new open_shell (getEntityInstance("OPEN_SHELL")); }
        public open_shell _open_shell { get { return get_open_shell(); } }
        public void put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }
        };


    public class reversible_topology_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology_item_get() : base(null) { }

        public bool is_edge() { return IsADBEntity("edge"); }
        public bool _is_edge { get { return is_edge(); } }
        public edge get_edge() { return new edge (getEntityInstance("EDGE")); }
        public edge _edge { get { return get_edge(); } }
        public bool is_path() { return IsADBEntity("path"); }
        public bool _is_path { get { return is_path(); } }
        public path get_path() { return new path (getEntityInstance("PATH")); }
        public path _path { get { return get_path(); } }
        public bool is_face() { return IsADBEntity("face"); }
        public bool _is_face { get { return is_face(); } }
        public face get_face() { return new face (getEntityInstance("FACE")); }
        public face _face { get { return get_face(); } }
        public bool is_face_bound() { return IsADBEntity("face_bound"); }
        public bool _is_face_bound { get { return is_face_bound(); } }
        public face_bound get_face_bound() { return new face_bound (getEntityInstance("FACE_BOUND")); }
        public face_bound _face_bound { get { return get_face_bound(); } }
        public bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        public bool _is_closed_shell { get { return is_closed_shell(); } }
        public closed_shell get_closed_shell() { return new closed_shell (getEntityInstance("CLOSED_SHELL")); }
        public closed_shell _closed_shell { get { return get_closed_shell(); } }
        public bool is_open_shell() { return IsADBEntity("open_shell"); }
        public bool _is_open_shell { get { return is_open_shell(); } }
        public open_shell get_open_shell() { return new open_shell (getEntityInstance("OPEN_SHELL")); }
        public open_shell _open_shell { get { return get_open_shell(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class reversible_topology_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology_item_put() : base(null) { }

        public void put_edge(edge inst) { putEntityInstance("EDGE", inst); }
        public void put_path(path inst) { putEntityInstance("PATH", inst); }
        public void put_face(face inst) { putEntityInstance("FACE", inst); }
        public void put_face_bound(face_bound inst) { putEntityInstance("FACE_BOUND", inst); }
        public void put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }
        public void put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }
        };


    public class reversible_topology : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology() : base(null) { }


        public reversible_topology_item _reversible_topology_item() { return new reversible_topology_item(this); }
        public reversible_topology_item __reversible_topology_item { get { return _reversible_topology_item(); } }

        public bool is_list_of_reversible_topology_item() { return IsADBType("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); }
        public bool _is_list_of_reversible_topology_item { get { return is_list_of_reversible_topology_item(); } }
        public list_of_reversible_topology_item get_list_of_reversible_topology_item() { SdaiAggr aggr = getAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new list_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); }
        public list_of_reversible_topology_item _list_of_reversible_topology_item { get { return get_list_of_reversible_topology_item(); } }
        public void put_list_of_reversible_topology_item(IEnumerable<reversible_topology_item> lst) { SdaiAggr aggr = (new list_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        //public void put_list_of_reversible_topology_item(IEnumerable lst) { SdaiAggr aggr = (new list_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }

        public bool is_set_of_reversible_topology_item() { return IsADBType("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); }
        public bool _is_set_of_reversible_topology_item { get { return is_set_of_reversible_topology_item(); } }
        public set_of_reversible_topology_item get_set_of_reversible_topology_item() { SdaiAggr aggr = getAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new set_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); }
        public set_of_reversible_topology_item _set_of_reversible_topology_item { get { return get_set_of_reversible_topology_item(); } }
        public void put_set_of_reversible_topology_item(IEnumerable<reversible_topology_item> lst) { SdaiAggr aggr = (new set_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        //public void put_set_of_reversible_topology_item(IEnumerable lst) { SdaiAggr aggr = (new set_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        };


    public class reversible_topology_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology_get() : base(null) { }

        public reversible_topology_item_get get_reversible_topology_item() { return new reversible_topology_item_get(this); }
        public reversible_topology_item_get __reversible_topology_item { get { return get_reversible_topology_item(); } }
        public bool is_list_of_reversible_topology_item() { return IsADBType("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); }
        public bool _is_list_of_reversible_topology_item { get { return is_list_of_reversible_topology_item(); } }
        public list_of_reversible_topology_item get_list_of_reversible_topology_item() { SdaiAggr aggr = getAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new list_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); }
        public list_of_reversible_topology_item _list_of_reversible_topology_item { get { return get_list_of_reversible_topology_item(); } }
        public bool is_set_of_reversible_topology_item() { return IsADBType("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); }
        public bool _is_set_of_reversible_topology_item { get { return is_set_of_reversible_topology_item(); } }
        public set_of_reversible_topology_item get_set_of_reversible_topology_item() { SdaiAggr aggr = getAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM"); return (new set_of_reversible_topology_itemSerializer()).FromSdaiAggr(m_instance, aggr); }
        public set_of_reversible_topology_item _set_of_reversible_topology_item { get { return get_set_of_reversible_topology_item(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class reversible_topology_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public reversible_topology_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public reversible_topology_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public reversible_topology_put() : base(null) { }

        public reversible_topology_item_put put_reversible_topology_item() { return new reversible_topology_item_put(this); }
        public reversible_topology_item_put __reversible_topology_item { get { return put_reversible_topology_item(); } }
        public void put_list_of_reversible_topology_item(IEnumerable<reversible_topology_item> lst) { SdaiAggr aggr = (new list_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        //public void put_list_of_reversible_topology_item(IEnumerable lst) { SdaiAggr aggr = (new list_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("LIST_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        public void put_set_of_reversible_topology_item(IEnumerable<reversible_topology_item> lst) { SdaiAggr aggr = (new set_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        //public void put_set_of_reversible_topology_item(IEnumerable lst) { SdaiAggr aggr = (new set_of_reversible_topology_itemSerializer()).ToSdaiAggr(lst, m_instance, null); putAggrValue("SET_OF_REVERSIBLE_TOPOLOGY_ITEM", aggr); }
        };


    public class role_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public role_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public role_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public role_select() : base(null) { }


        public bool is_action_assignment() { return IsADBEntity("action_assignment"); }
        public bool _is_action_assignment { get { return is_action_assignment(); } }
        public action_assignment get_action_assignment() { return new action_assignment (getEntityInstance("ACTION_ASSIGNMENT")); }
        public action_assignment _action_assignment { get { return get_action_assignment(); } }
        public void put_action_assignment(action_assignment inst) { putEntityInstance("ACTION_ASSIGNMENT", inst); }

        public bool is_action_request_assignment() { return IsADBEntity("action_request_assignment"); }
        public bool _is_action_request_assignment { get { return is_action_request_assignment(); } }
        public action_request_assignment get_action_request_assignment() { return new action_request_assignment (getEntityInstance("ACTION_REQUEST_ASSIGNMENT")); }
        public action_request_assignment _action_request_assignment { get { return get_action_request_assignment(); } }
        public void put_action_request_assignment(action_request_assignment inst) { putEntityInstance("ACTION_REQUEST_ASSIGNMENT", inst); }

        public bool is_approval_assignment() { return IsADBEntity("approval_assignment"); }
        public bool _is_approval_assignment { get { return is_approval_assignment(); } }
        public approval_assignment get_approval_assignment() { return new approval_assignment (getEntityInstance("APPROVAL_ASSIGNMENT")); }
        public approval_assignment _approval_assignment { get { return get_approval_assignment(); } }
        public void put_approval_assignment(approval_assignment inst) { putEntityInstance("APPROVAL_ASSIGNMENT", inst); }

        public bool is_approval_date_time() { return IsADBEntity("approval_date_time"); }
        public bool _is_approval_date_time { get { return is_approval_date_time(); } }
        public approval_date_time get_approval_date_time() { return new approval_date_time (getEntityInstance("APPROVAL_DATE_TIME")); }
        public approval_date_time _approval_date_time { get { return get_approval_date_time(); } }
        public void put_approval_date_time(approval_date_time inst) { putEntityInstance("APPROVAL_DATE_TIME", inst); }

        public bool is_certification_assignment() { return IsADBEntity("certification_assignment"); }
        public bool _is_certification_assignment { get { return is_certification_assignment(); } }
        public certification_assignment get_certification_assignment() { return new certification_assignment (getEntityInstance("CERTIFICATION_ASSIGNMENT")); }
        public certification_assignment _certification_assignment { get { return get_certification_assignment(); } }
        public void put_certification_assignment(certification_assignment inst) { putEntityInstance("CERTIFICATION_ASSIGNMENT", inst); }

        public bool is_contract_assignment() { return IsADBEntity("contract_assignment"); }
        public bool _is_contract_assignment { get { return is_contract_assignment(); } }
        public contract_assignment get_contract_assignment() { return new contract_assignment (getEntityInstance("CONTRACT_ASSIGNMENT")); }
        public contract_assignment _contract_assignment { get { return get_contract_assignment(); } }
        public void put_contract_assignment(contract_assignment inst) { putEntityInstance("CONTRACT_ASSIGNMENT", inst); }

        public bool is_document_reference() { return IsADBEntity("document_reference"); }
        public bool _is_document_reference { get { return is_document_reference(); } }
        public document_reference get_document_reference() { return new document_reference (getEntityInstance("DOCUMENT_REFERENCE")); }
        public document_reference _document_reference { get { return get_document_reference(); } }
        public void put_document_reference(document_reference inst) { putEntityInstance("DOCUMENT_REFERENCE", inst); }

        public bool is_effectivity_assignment() { return IsADBEntity("effectivity_assignment"); }
        public bool _is_effectivity_assignment { get { return is_effectivity_assignment(); } }
        public effectivity_assignment get_effectivity_assignment() { return new effectivity_assignment (getEntityInstance("EFFECTIVITY_ASSIGNMENT")); }
        public effectivity_assignment _effectivity_assignment { get { return get_effectivity_assignment(); } }
        public void put_effectivity_assignment(effectivity_assignment inst) { putEntityInstance("EFFECTIVITY_ASSIGNMENT", inst); }

        public bool is_group_assignment() { return IsADBEntity("group_assignment"); }
        public bool _is_group_assignment { get { return is_group_assignment(); } }
        public group_assignment get_group_assignment() { return new group_assignment (getEntityInstance("GROUP_ASSIGNMENT")); }
        public group_assignment _group_assignment { get { return get_group_assignment(); } }
        public void put_group_assignment(group_assignment inst) { putEntityInstance("GROUP_ASSIGNMENT", inst); }

        public bool is_name_assignment() { return IsADBEntity("name_assignment"); }
        public bool _is_name_assignment { get { return is_name_assignment(); } }
        public name_assignment get_name_assignment() { return new name_assignment (getEntityInstance("NAME_ASSIGNMENT")); }
        public name_assignment _name_assignment { get { return get_name_assignment(); } }
        public void put_name_assignment(name_assignment inst) { putEntityInstance("NAME_ASSIGNMENT", inst); }

        public bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        public bool _is_security_classification_assignment { get { return is_security_classification_assignment(); } }
        public security_classification_assignment get_security_classification_assignment() { return new security_classification_assignment (getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public security_classification_assignment _security_classification_assignment { get { return get_security_classification_assignment(); } }
        public void put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
        };


    public class role_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public role_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public role_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public role_select_get() : base(null) { }

        public bool is_action_assignment() { return IsADBEntity("action_assignment"); }
        public bool _is_action_assignment { get { return is_action_assignment(); } }
        public action_assignment get_action_assignment() { return new action_assignment (getEntityInstance("ACTION_ASSIGNMENT")); }
        public action_assignment _action_assignment { get { return get_action_assignment(); } }
        public bool is_action_request_assignment() { return IsADBEntity("action_request_assignment"); }
        public bool _is_action_request_assignment { get { return is_action_request_assignment(); } }
        public action_request_assignment get_action_request_assignment() { return new action_request_assignment (getEntityInstance("ACTION_REQUEST_ASSIGNMENT")); }
        public action_request_assignment _action_request_assignment { get { return get_action_request_assignment(); } }
        public bool is_approval_assignment() { return IsADBEntity("approval_assignment"); }
        public bool _is_approval_assignment { get { return is_approval_assignment(); } }
        public approval_assignment get_approval_assignment() { return new approval_assignment (getEntityInstance("APPROVAL_ASSIGNMENT")); }
        public approval_assignment _approval_assignment { get { return get_approval_assignment(); } }
        public bool is_approval_date_time() { return IsADBEntity("approval_date_time"); }
        public bool _is_approval_date_time { get { return is_approval_date_time(); } }
        public approval_date_time get_approval_date_time() { return new approval_date_time (getEntityInstance("APPROVAL_DATE_TIME")); }
        public approval_date_time _approval_date_time { get { return get_approval_date_time(); } }
        public bool is_certification_assignment() { return IsADBEntity("certification_assignment"); }
        public bool _is_certification_assignment { get { return is_certification_assignment(); } }
        public certification_assignment get_certification_assignment() { return new certification_assignment (getEntityInstance("CERTIFICATION_ASSIGNMENT")); }
        public certification_assignment _certification_assignment { get { return get_certification_assignment(); } }
        public bool is_contract_assignment() { return IsADBEntity("contract_assignment"); }
        public bool _is_contract_assignment { get { return is_contract_assignment(); } }
        public contract_assignment get_contract_assignment() { return new contract_assignment (getEntityInstance("CONTRACT_ASSIGNMENT")); }
        public contract_assignment _contract_assignment { get { return get_contract_assignment(); } }
        public bool is_document_reference() { return IsADBEntity("document_reference"); }
        public bool _is_document_reference { get { return is_document_reference(); } }
        public document_reference get_document_reference() { return new document_reference (getEntityInstance("DOCUMENT_REFERENCE")); }
        public document_reference _document_reference { get { return get_document_reference(); } }
        public bool is_effectivity_assignment() { return IsADBEntity("effectivity_assignment"); }
        public bool _is_effectivity_assignment { get { return is_effectivity_assignment(); } }
        public effectivity_assignment get_effectivity_assignment() { return new effectivity_assignment (getEntityInstance("EFFECTIVITY_ASSIGNMENT")); }
        public effectivity_assignment _effectivity_assignment { get { return get_effectivity_assignment(); } }
        public bool is_group_assignment() { return IsADBEntity("group_assignment"); }
        public bool _is_group_assignment { get { return is_group_assignment(); } }
        public group_assignment get_group_assignment() { return new group_assignment (getEntityInstance("GROUP_ASSIGNMENT")); }
        public group_assignment _group_assignment { get { return get_group_assignment(); } }
        public bool is_name_assignment() { return IsADBEntity("name_assignment"); }
        public bool _is_name_assignment { get { return is_name_assignment(); } }
        public name_assignment get_name_assignment() { return new name_assignment (getEntityInstance("NAME_ASSIGNMENT")); }
        public name_assignment _name_assignment { get { return get_name_assignment(); } }
        public bool is_security_classification_assignment() { return IsADBEntity("security_classification_assignment"); }
        public bool _is_security_classification_assignment { get { return is_security_classification_assignment(); } }
        public security_classification_assignment get_security_classification_assignment() { return new security_classification_assignment (getEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT")); }
        public security_classification_assignment _security_classification_assignment { get { return get_security_classification_assignment(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class role_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public role_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public role_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public role_select_put() : base(null) { }

        public void put_action_assignment(action_assignment inst) { putEntityInstance("ACTION_ASSIGNMENT", inst); }
        public void put_action_request_assignment(action_request_assignment inst) { putEntityInstance("ACTION_REQUEST_ASSIGNMENT", inst); }
        public void put_approval_assignment(approval_assignment inst) { putEntityInstance("APPROVAL_ASSIGNMENT", inst); }
        public void put_approval_date_time(approval_date_time inst) { putEntityInstance("APPROVAL_DATE_TIME", inst); }
        public void put_certification_assignment(certification_assignment inst) { putEntityInstance("CERTIFICATION_ASSIGNMENT", inst); }
        public void put_contract_assignment(contract_assignment inst) { putEntityInstance("CONTRACT_ASSIGNMENT", inst); }
        public void put_document_reference(document_reference inst) { putEntityInstance("DOCUMENT_REFERENCE", inst); }
        public void put_effectivity_assignment(effectivity_assignment inst) { putEntityInstance("EFFECTIVITY_ASSIGNMENT", inst); }
        public void put_group_assignment(group_assignment inst) { putEntityInstance("GROUP_ASSIGNMENT", inst); }
        public void put_name_assignment(name_assignment inst) { putEntityInstance("NAME_ASSIGNMENT", inst); }
        public void put_security_classification_assignment(security_classification_assignment inst) { putEntityInstance("SECURITY_CLASSIFICATION_ASSIGNMENT", inst); }
        };


    public class rule_superseded_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rule_superseded_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rule_superseded_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rule_superseded_item() : base(null) { }


        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class rule_superseded_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rule_superseded_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rule_superseded_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rule_superseded_item_get() : base(null) { }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class rule_superseded_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public rule_superseded_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public rule_superseded_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public rule_superseded_item_put() : base(null) { }

        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class security_classification_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public security_classification_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public security_classification_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public security_classification_item() : base(null) { }


        public bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        public bool _is_assembly_component_usage { get { return is_assembly_component_usage(); } }
        public assembly_component_usage get_assembly_component_usage() { return new assembly_component_usage (getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); }
        public assembly_component_usage _assembly_component_usage { get { return get_assembly_component_usage(); } }
        public void put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }

        public bool is_document() { return IsADBEntity("document"); }
        public bool _is_document { get { return is_document(); } }
        public document get_document() { return new document (getEntityInstance("DOCUMENT")); }
        public document _document { get { return get_document(); } }
        public void put_document(document inst) { putEntityInstance("DOCUMENT", inst); }

        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }

        public bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        public bool _is_make_from_usage_option { get { return is_make_from_usage_option(); } }
        public make_from_usage_option get_make_from_usage_option() { return new make_from_usage_option (getEntityInstance("MAKE_FROM_USAGE_OPTION")); }
        public make_from_usage_option _make_from_usage_option { get { return get_make_from_usage_option(); } }
        public void put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }

        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }

        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }

        public bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        public bool _is_product_definition_usage { get { return is_product_definition_usage(); } }
        public product_definition_usage get_product_definition_usage() { return new product_definition_usage (getEntityInstance("PRODUCT_DEFINITION_USAGE")); }
        public product_definition_usage _product_definition_usage { get { return get_product_definition_usage(); } }
        public void put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
        };


    public class security_classification_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public security_classification_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public security_classification_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public security_classification_item_get() : base(null) { }

        public bool is_assembly_component_usage() { return IsADBEntity("assembly_component_usage"); }
        public bool _is_assembly_component_usage { get { return is_assembly_component_usage(); } }
        public assembly_component_usage get_assembly_component_usage() { return new assembly_component_usage (getEntityInstance("ASSEMBLY_COMPONENT_USAGE")); }
        public assembly_component_usage _assembly_component_usage { get { return get_assembly_component_usage(); } }
        public bool is_document() { return IsADBEntity("document"); }
        public bool _is_document { get { return is_document(); } }
        public document get_document() { return new document (getEntityInstance("DOCUMENT")); }
        public document _document { get { return get_document(); } }
        public bool is_document_file() { return IsADBEntity("document_file"); }
        public bool _is_document_file { get { return is_document_file(); } }
        public document_file get_document_file() { return new document_file (getEntityInstance("DOCUMENT_FILE")); }
        public document_file _document_file { get { return get_document_file(); } }
        public bool is_make_from_usage_option() { return IsADBEntity("make_from_usage_option"); }
        public bool _is_make_from_usage_option { get { return is_make_from_usage_option(); } }
        public make_from_usage_option get_make_from_usage_option() { return new make_from_usage_option (getEntityInstance("MAKE_FROM_USAGE_OPTION")); }
        public make_from_usage_option _make_from_usage_option { get { return get_make_from_usage_option(); } }
        public bool is_product() { return IsADBEntity("product"); }
        public bool _is_product { get { return is_product(); } }
        public product get_product() { return new product (getEntityInstance("PRODUCT")); }
        public product _product { get { return get_product(); } }
        public bool is_product_definition() { return IsADBEntity("product_definition"); }
        public bool _is_product_definition { get { return is_product_definition(); } }
        public product_definition get_product_definition() { return new product_definition (getEntityInstance("PRODUCT_DEFINITION")); }
        public product_definition _product_definition { get { return get_product_definition(); } }
        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public bool is_product_definition_usage() { return IsADBEntity("product_definition_usage"); }
        public bool _is_product_definition_usage { get { return is_product_definition_usage(); } }
        public product_definition_usage get_product_definition_usage() { return new product_definition_usage (getEntityInstance("PRODUCT_DEFINITION_USAGE")); }
        public product_definition_usage _product_definition_usage { get { return get_product_definition_usage(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class security_classification_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public security_classification_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public security_classification_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public security_classification_item_put() : base(null) { }

        public void put_assembly_component_usage(assembly_component_usage inst) { putEntityInstance("ASSEMBLY_COMPONENT_USAGE", inst); }
        public void put_document(document inst) { putEntityInstance("DOCUMENT", inst); }
        public void put_document_file(document_file inst) { putEntityInstance("DOCUMENT_FILE", inst); }
        public void put_make_from_usage_option(make_from_usage_option inst) { putEntityInstance("MAKE_FROM_USAGE_OPTION", inst); }
        public void put_product(product inst) { putEntityInstance("PRODUCT", inst); }
        public void put_product_definition(product_definition inst) { putEntityInstance("PRODUCT_DEFINITION", inst); }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        public void put_product_definition_usage(product_definition_usage inst) { putEntityInstance("PRODUCT_DEFINITION_USAGE", inst); }
        };


    public class shell : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shell(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shell(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shell() : base(null) { }


        public bool is_vertex_shell() { return IsADBEntity("vertex_shell"); }
        public bool _is_vertex_shell { get { return is_vertex_shell(); } }
        public vertex_shell get_vertex_shell() { return new vertex_shell (getEntityInstance("VERTEX_SHELL")); }
        public vertex_shell _vertex_shell { get { return get_vertex_shell(); } }
        public void put_vertex_shell(vertex_shell inst) { putEntityInstance("VERTEX_SHELL", inst); }

        public bool is_wire_shell() { return IsADBEntity("wire_shell"); }
        public bool _is_wire_shell { get { return is_wire_shell(); } }
        public wire_shell get_wire_shell() { return new wire_shell (getEntityInstance("WIRE_SHELL")); }
        public wire_shell _wire_shell { get { return get_wire_shell(); } }
        public void put_wire_shell(wire_shell inst) { putEntityInstance("WIRE_SHELL", inst); }

        public bool is_open_shell() { return IsADBEntity("open_shell"); }
        public bool _is_open_shell { get { return is_open_shell(); } }
        public open_shell get_open_shell() { return new open_shell (getEntityInstance("OPEN_SHELL")); }
        public open_shell _open_shell { get { return get_open_shell(); } }
        public void put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }

        public bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        public bool _is_closed_shell { get { return is_closed_shell(); } }
        public closed_shell get_closed_shell() { return new closed_shell (getEntityInstance("CLOSED_SHELL")); }
        public closed_shell _closed_shell { get { return get_closed_shell(); } }
        public void put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }
        };


    public class shell_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shell_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shell_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shell_get() : base(null) { }

        public bool is_vertex_shell() { return IsADBEntity("vertex_shell"); }
        public bool _is_vertex_shell { get { return is_vertex_shell(); } }
        public vertex_shell get_vertex_shell() { return new vertex_shell (getEntityInstance("VERTEX_SHELL")); }
        public vertex_shell _vertex_shell { get { return get_vertex_shell(); } }
        public bool is_wire_shell() { return IsADBEntity("wire_shell"); }
        public bool _is_wire_shell { get { return is_wire_shell(); } }
        public wire_shell get_wire_shell() { return new wire_shell (getEntityInstance("WIRE_SHELL")); }
        public wire_shell _wire_shell { get { return get_wire_shell(); } }
        public bool is_open_shell() { return IsADBEntity("open_shell"); }
        public bool _is_open_shell { get { return is_open_shell(); } }
        public open_shell get_open_shell() { return new open_shell (getEntityInstance("OPEN_SHELL")); }
        public open_shell _open_shell { get { return get_open_shell(); } }
        public bool is_closed_shell() { return IsADBEntity("closed_shell"); }
        public bool _is_closed_shell { get { return is_closed_shell(); } }
        public closed_shell get_closed_shell() { return new closed_shell (getEntityInstance("CLOSED_SHELL")); }
        public closed_shell _closed_shell { get { return get_closed_shell(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class shell_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public shell_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public shell_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public shell_put() : base(null) { }

        public void put_vertex_shell(vertex_shell inst) { putEntityInstance("VERTEX_SHELL", inst); }
        public void put_wire_shell(wire_shell inst) { putEntityInstance("WIRE_SHELL", inst); }
        public void put_open_shell(open_shell inst) { putEntityInstance("OPEN_SHELL", inst); }
        public void put_closed_shell(closed_shell inst) { putEntityInstance("CLOSED_SHELL", inst); }
        };


    public class size_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public size_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public size_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public size_select() : base(null) { }


        public bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        //public bool _is_positive_length_measure { get { return is_positive_length_measure(); } }
        public double? get_positive_length_measure() { return get_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _positive_length_measure { get { return get_positive_length_measure(); } }
        public void put_positive_length_measure (double value) { put_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        public bool _is_measure_with_unit { get { return is_measure_with_unit(); } }
        public measure_with_unit get_measure_with_unit() { return new measure_with_unit (getEntityInstance("MEASURE_WITH_UNIT")); }
        public measure_with_unit _measure_with_unit { get { return get_measure_with_unit(); } }
        public void put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }

        public bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        public bool _isdescriptive_measure { get { return is_descriptive_measure(); } }
        public TextValue get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); }
        public TextValue _descriptive_measure { get { return get_descriptive_measure(); } }
        public void put_descriptive_measure(TextValue value) { putTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING, value); }
        };


    public class size_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public size_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public size_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public size_select_get() : base(null) { }

        public bool is_positive_length_measure() { return IsADBType("POSITIVE_LENGTH_MEASURE"); }
        //public bool _is_positive_length_measure { get { return is_positive_length_measure(); } }
        public double? get_positive_length_measure() { return get_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _positive_length_measure { get { return get_positive_length_measure(); } }
        public bool is_measure_with_unit() { return IsADBEntity("measure_with_unit"); }
        public bool _is_measure_with_unit { get { return is_measure_with_unit(); } }
        public measure_with_unit get_measure_with_unit() { return new measure_with_unit (getEntityInstance("MEASURE_WITH_UNIT")); }
        public measure_with_unit _measure_with_unit { get { return get_measure_with_unit(); } }
        public bool is_descriptive_measure() { return IsADBType("DESCRIPTIVE_MEASURE"); }
        public bool _isdescriptive_measure { get { return is_descriptive_measure(); } }
        public TextValue get_descriptive_measure() { return getTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING); }
        public TextValue _descriptive_measure { get { return get_descriptive_measure(); } }

        public double? as_double() { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; }
        public SdaiInstance as_instance() { return getEntityInstance(null); }
        public TextValue as_text() { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; }
        };


    public class size_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public size_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public size_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public size_select_put() : base(null) { }

        public void put_positive_length_measure (double value) { put_double("POSITIVE_LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_measure_with_unit(measure_with_unit inst) { putEntityInstance("MEASURE_WITH_UNIT", inst); }
        public void put_descriptive_measure(TextValue value) { putTextValue("DESCRIPTIVE_MEASURE", ifcengine.sdaiSTRING, value); }
        };


    public class sketch_basis_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public sketch_basis_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public sketch_basis_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public sketch_basis_select() : base(null) { }


        public bool is_curve_bounded_surface() { return IsADBEntity("curve_bounded_surface"); }
        public bool _is_curve_bounded_surface { get { return is_curve_bounded_surface(); } }
        public curve_bounded_surface get_curve_bounded_surface() { return new curve_bounded_surface (getEntityInstance("CURVE_BOUNDED_SURFACE")); }
        public curve_bounded_surface _curve_bounded_surface { get { return get_curve_bounded_surface(); } }
        public void put_curve_bounded_surface(curve_bounded_surface inst) { putEntityInstance("CURVE_BOUNDED_SURFACE", inst); }

        public bool is_face_surface() { return IsADBEntity("face_surface"); }
        public bool _is_face_surface { get { return is_face_surface(); } }
        public face_surface get_face_surface() { return new face_surface (getEntityInstance("FACE_SURFACE")); }
        public face_surface _face_surface { get { return get_face_surface(); } }
        public void put_face_surface(face_surface inst) { putEntityInstance("FACE_SURFACE", inst); }
        };


    public class sketch_basis_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public sketch_basis_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public sketch_basis_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public sketch_basis_select_get() : base(null) { }

        public bool is_curve_bounded_surface() { return IsADBEntity("curve_bounded_surface"); }
        public bool _is_curve_bounded_surface { get { return is_curve_bounded_surface(); } }
        public curve_bounded_surface get_curve_bounded_surface() { return new curve_bounded_surface (getEntityInstance("CURVE_BOUNDED_SURFACE")); }
        public curve_bounded_surface _curve_bounded_surface { get { return get_curve_bounded_surface(); } }
        public bool is_face_surface() { return IsADBEntity("face_surface"); }
        public bool _is_face_surface { get { return is_face_surface(); } }
        public face_surface get_face_surface() { return new face_surface (getEntityInstance("FACE_SURFACE")); }
        public face_surface _face_surface { get { return get_face_surface(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class sketch_basis_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public sketch_basis_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public sketch_basis_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public sketch_basis_select_put() : base(null) { }

        public void put_curve_bounded_surface(curve_bounded_surface inst) { putEntityInstance("CURVE_BOUNDED_SURFACE", inst); }
        public void put_face_surface(face_surface inst) { putEntityInstance("FACE_SURFACE", inst); }
        };


    public class source_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public source_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public source_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public source_item() : base(null) { }


        public bool is_identifier() { return IsADBType("IDENTIFIER"); }
        public bool _isidentifier { get { return is_identifier(); } }
        public TextValue get_identifier() { return getTextValue("IDENTIFIER", ifcengine.sdaiSTRING); }
        public TextValue _identifier { get { return get_identifier(); } }
        public void put_identifier(TextValue value) { putTextValue("IDENTIFIER", ifcengine.sdaiSTRING, value); }

        public bool is_message() { return IsADBType("MESSAGE"); }
        public bool _ismessage { get { return is_message(); } }
        public TextValue get_message() { return getTextValue("MESSAGE", ifcengine.sdaiSTRING); }
        public TextValue _message { get { return get_message(); } }
        public void put_message(TextValue value) { putTextValue("MESSAGE", ifcengine.sdaiSTRING, value); }
        };


    public class source_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public source_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public source_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public source_item_get() : base(null) { }

        public bool is_identifier() { return IsADBType("IDENTIFIER"); }
        public bool _isidentifier { get { return is_identifier(); } }
        public TextValue get_identifier() { return getTextValue("IDENTIFIER", ifcengine.sdaiSTRING); }
        public TextValue _identifier { get { return get_identifier(); } }
        public bool is_message() { return IsADBType("MESSAGE"); }
        public bool _ismessage { get { return is_message(); } }
        public TextValue get_message() { return getTextValue("MESSAGE", ifcengine.sdaiSTRING); }
        public TextValue _message { get { return get_message(); } }

        public TextValue as_text() { string val = null; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiSTRING, out val) != 0) return val; else return null; }
        };


    public class source_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public source_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public source_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public source_item_put() : base(null) { }

        public void put_identifier(TextValue value) { putTextValue("IDENTIFIER", ifcengine.sdaiSTRING, value); }
        public void put_message(TextValue value) { putTextValue("MESSAGE", ifcengine.sdaiSTRING, value); }
        };


    public class start_request_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public start_request_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public start_request_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public start_request_item() : base(null) { }


        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class start_request_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public start_request_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public start_request_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public start_request_item_get() : base(null) { }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class start_request_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public start_request_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public start_request_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public start_request_item_put() : base(null) { }

        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class string_representation_item_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public string_representation_item_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public string_representation_item_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public string_representation_item_select() : base(null) { }


        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }

        public bool is_included_text_block() { return IsADBEntity("included_text_block"); }
        public bool _is_included_text_block { get { return is_included_text_block(); } }
        public included_text_block get_included_text_block() { return new included_text_block (getEntityInstance("INCLUDED_TEXT_BLOCK")); }
        public included_text_block _included_text_block { get { return get_included_text_block(); } }
        public void put_included_text_block(included_text_block inst) { putEntityInstance("INCLUDED_TEXT_BLOCK", inst); }

        public bool is_structured_text_composition() { return IsADBEntity("structured_text_composition"); }
        public bool _is_structured_text_composition { get { return is_structured_text_composition(); } }
        public structured_text_composition get_structured_text_composition() { return new structured_text_composition (getEntityInstance("STRUCTURED_TEXT_COMPOSITION")); }
        public structured_text_composition _structured_text_composition { get { return get_structured_text_composition(); } }
        public void put_structured_text_composition(structured_text_composition inst) { putEntityInstance("STRUCTURED_TEXT_COMPOSITION", inst); }
        };


    public class string_representation_item_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public string_representation_item_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public string_representation_item_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public string_representation_item_select_get() : base(null) { }

        public bool is_descriptive_representation_item() { return IsADBEntity("descriptive_representation_item"); }
        public bool _is_descriptive_representation_item { get { return is_descriptive_representation_item(); } }
        public descriptive_representation_item get_descriptive_representation_item() { return new descriptive_representation_item (getEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM")); }
        public descriptive_representation_item _descriptive_representation_item { get { return get_descriptive_representation_item(); } }
        public bool is_included_text_block() { return IsADBEntity("included_text_block"); }
        public bool _is_included_text_block { get { return is_included_text_block(); } }
        public included_text_block get_included_text_block() { return new included_text_block (getEntityInstance("INCLUDED_TEXT_BLOCK")); }
        public included_text_block _included_text_block { get { return get_included_text_block(); } }
        public bool is_structured_text_composition() { return IsADBEntity("structured_text_composition"); }
        public bool _is_structured_text_composition { get { return is_structured_text_composition(); } }
        public structured_text_composition get_structured_text_composition() { return new structured_text_composition (getEntityInstance("STRUCTURED_TEXT_COMPOSITION")); }
        public structured_text_composition _structured_text_composition { get { return get_structured_text_composition(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class string_representation_item_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public string_representation_item_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public string_representation_item_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public string_representation_item_select_put() : base(null) { }

        public void put_descriptive_representation_item(descriptive_representation_item inst) { putEntityInstance("DESCRIPTIVE_REPRESENTATION_ITEM", inst); }
        public void put_included_text_block(included_text_block inst) { putEntityInstance("INCLUDED_TEXT_BLOCK", inst); }
        public void put_structured_text_composition(structured_text_composition inst) { putEntityInstance("STRUCTURED_TEXT_COMPOSITION", inst); }
        };


    public class style_context_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public style_context_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public style_context_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public style_context_select() : base(null) { }


        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public void put_group(group inst) { putEntityInstance("GROUP", inst); }

        public bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        public bool _is_presentation_layer_assignment { get { return is_presentation_layer_assignment(); } }
        public presentation_layer_assignment get_presentation_layer_assignment() { return new presentation_layer_assignment (getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); }
        public presentation_layer_assignment _presentation_layer_assignment { get { return get_presentation_layer_assignment(); } }
        public void put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }

        public bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        public bool _is_presentation_set { get { return is_presentation_set(); } }
        public presentation_set get_presentation_set() { return new presentation_set (getEntityInstance("PRESENTATION_SET")); }
        public presentation_set _presentation_set { get { return get_presentation_set(); } }
        public void put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }

        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }

        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }

        public bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        public bool _is_representation_relationship { get { return is_representation_relationship(); } }
        public representation_relationship get_representation_relationship() { return new representation_relationship (getEntityInstance("REPRESENTATION_RELATIONSHIP")); }
        public representation_relationship _representation_relationship { get { return get_representation_relationship(); } }
        public void put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }
        };


    public class style_context_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public style_context_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public style_context_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public style_context_select_get() : base(null) { }

        public bool is_group() { return IsADBEntity("group"); }
        public bool _is_group { get { return is_group(); } }
        public group get_group() { return new group (getEntityInstance("GROUP")); }
        public group _group { get { return get_group(); } }
        public bool is_presentation_layer_assignment() { return IsADBEntity("presentation_layer_assignment"); }
        public bool _is_presentation_layer_assignment { get { return is_presentation_layer_assignment(); } }
        public presentation_layer_assignment get_presentation_layer_assignment() { return new presentation_layer_assignment (getEntityInstance("PRESENTATION_LAYER_ASSIGNMENT")); }
        public presentation_layer_assignment _presentation_layer_assignment { get { return get_presentation_layer_assignment(); } }
        public bool is_presentation_set() { return IsADBEntity("presentation_set"); }
        public bool _is_presentation_set { get { return is_presentation_set(); } }
        public presentation_set get_presentation_set() { return new presentation_set (getEntityInstance("PRESENTATION_SET")); }
        public presentation_set _presentation_set { get { return get_presentation_set(); } }
        public bool is_representation() { return IsADBEntity("representation"); }
        public bool _is_representation { get { return is_representation(); } }
        public representation get_representation() { return new representation (getEntityInstance("REPRESENTATION")); }
        public representation _representation { get { return get_representation(); } }
        public bool is_representation_item() { return IsADBEntity("representation_item"); }
        public bool _is_representation_item { get { return is_representation_item(); } }
        public representation_item get_representation_item() { return new representation_item (getEntityInstance("REPRESENTATION_ITEM")); }
        public representation_item _representation_item { get { return get_representation_item(); } }
        public bool is_representation_relationship() { return IsADBEntity("representation_relationship"); }
        public bool _is_representation_relationship { get { return is_representation_relationship(); } }
        public representation_relationship get_representation_relationship() { return new representation_relationship (getEntityInstance("REPRESENTATION_RELATIONSHIP")); }
        public representation_relationship _representation_relationship { get { return get_representation_relationship(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class style_context_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public style_context_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public style_context_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public style_context_select_put() : base(null) { }

        public void put_group(group inst) { putEntityInstance("GROUP", inst); }
        public void put_presentation_layer_assignment(presentation_layer_assignment inst) { putEntityInstance("PRESENTATION_LAYER_ASSIGNMENT", inst); }
        public void put_presentation_set(presentation_set inst) { putEntityInstance("PRESENTATION_SET", inst); }
        public void put_representation(representation inst) { putEntityInstance("REPRESENTATION", inst); }
        public void put_representation_item(representation_item inst) { putEntityInstance("REPRESENTATION_ITEM", inst); }
        public void put_representation_relationship(representation_relationship inst) { putEntityInstance("REPRESENTATION_RELATIONSHIP", inst); }
        };


    public class surface_side_style_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_side_style_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_side_style_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_side_style_select() : base(null) { }


        public bool is_surface_side_style() { return IsADBEntity("surface_side_style"); }
        public bool _is_surface_side_style { get { return is_surface_side_style(); } }
        public surface_side_style get_surface_side_style() { return new surface_side_style (getEntityInstance("SURFACE_SIDE_STYLE")); }
        public surface_side_style _surface_side_style { get { return get_surface_side_style(); } }
        public void put_surface_side_style(surface_side_style inst) { putEntityInstance("SURFACE_SIDE_STYLE", inst); }

        public bool is_pre_defined_surface_side_style() { return IsADBEntity("pre_defined_surface_side_style"); }
        public bool _is_pre_defined_surface_side_style { get { return is_pre_defined_surface_side_style(); } }
        public pre_defined_surface_side_style get_pre_defined_surface_side_style() { return new pre_defined_surface_side_style (getEntityInstance("PRE_DEFINED_SURFACE_SIDE_STYLE")); }
        public pre_defined_surface_side_style _pre_defined_surface_side_style { get { return get_pre_defined_surface_side_style(); } }
        public void put_pre_defined_surface_side_style(pre_defined_surface_side_style inst) { putEntityInstance("PRE_DEFINED_SURFACE_SIDE_STYLE", inst); }
        };


    public class surface_side_style_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_side_style_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_side_style_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_side_style_select_get() : base(null) { }

        public bool is_surface_side_style() { return IsADBEntity("surface_side_style"); }
        public bool _is_surface_side_style { get { return is_surface_side_style(); } }
        public surface_side_style get_surface_side_style() { return new surface_side_style (getEntityInstance("SURFACE_SIDE_STYLE")); }
        public surface_side_style _surface_side_style { get { return get_surface_side_style(); } }
        public bool is_pre_defined_surface_side_style() { return IsADBEntity("pre_defined_surface_side_style"); }
        public bool _is_pre_defined_surface_side_style { get { return is_pre_defined_surface_side_style(); } }
        public pre_defined_surface_side_style get_pre_defined_surface_side_style() { return new pre_defined_surface_side_style (getEntityInstance("PRE_DEFINED_SURFACE_SIDE_STYLE")); }
        public pre_defined_surface_side_style _pre_defined_surface_side_style { get { return get_pre_defined_surface_side_style(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class surface_side_style_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_side_style_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_side_style_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_side_style_select_put() : base(null) { }

        public void put_surface_side_style(surface_side_style inst) { putEntityInstance("SURFACE_SIDE_STYLE", inst); }
        public void put_pre_defined_surface_side_style(pre_defined_surface_side_style inst) { putEntityInstance("PRE_DEFINED_SURFACE_SIDE_STYLE", inst); }
        };


    public class surface_style_element_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_style_element_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_style_element_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_style_element_select() : base(null) { }


        public bool is_surface_style_fill_area() { return IsADBEntity("surface_style_fill_area"); }
        public bool _is_surface_style_fill_area { get { return is_surface_style_fill_area(); } }
        public surface_style_fill_area get_surface_style_fill_area() { return new surface_style_fill_area (getEntityInstance("SURFACE_STYLE_FILL_AREA")); }
        public surface_style_fill_area _surface_style_fill_area { get { return get_surface_style_fill_area(); } }
        public void put_surface_style_fill_area(surface_style_fill_area inst) { putEntityInstance("SURFACE_STYLE_FILL_AREA", inst); }

        public bool is_surface_style_boundary() { return IsADBEntity("surface_style_boundary"); }
        public bool _is_surface_style_boundary { get { return is_surface_style_boundary(); } }
        public surface_style_boundary get_surface_style_boundary() { return new surface_style_boundary (getEntityInstance("SURFACE_STYLE_BOUNDARY")); }
        public surface_style_boundary _surface_style_boundary { get { return get_surface_style_boundary(); } }
        public void put_surface_style_boundary(surface_style_boundary inst) { putEntityInstance("SURFACE_STYLE_BOUNDARY", inst); }

        public bool is_surface_style_silhouette() { return IsADBEntity("surface_style_silhouette"); }
        public bool _is_surface_style_silhouette { get { return is_surface_style_silhouette(); } }
        public surface_style_silhouette get_surface_style_silhouette() { return new surface_style_silhouette (getEntityInstance("SURFACE_STYLE_SILHOUETTE")); }
        public surface_style_silhouette _surface_style_silhouette { get { return get_surface_style_silhouette(); } }
        public void put_surface_style_silhouette(surface_style_silhouette inst) { putEntityInstance("SURFACE_STYLE_SILHOUETTE", inst); }

        public bool is_surface_style_segmentation_curve() { return IsADBEntity("surface_style_segmentation_curve"); }
        public bool _is_surface_style_segmentation_curve { get { return is_surface_style_segmentation_curve(); } }
        public surface_style_segmentation_curve get_surface_style_segmentation_curve() { return new surface_style_segmentation_curve (getEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE")); }
        public surface_style_segmentation_curve _surface_style_segmentation_curve { get { return get_surface_style_segmentation_curve(); } }
        public void put_surface_style_segmentation_curve(surface_style_segmentation_curve inst) { putEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE", inst); }

        public bool is_surface_style_control_grid() { return IsADBEntity("surface_style_control_grid"); }
        public bool _is_surface_style_control_grid { get { return is_surface_style_control_grid(); } }
        public surface_style_control_grid get_surface_style_control_grid() { return new surface_style_control_grid (getEntityInstance("SURFACE_STYLE_CONTROL_GRID")); }
        public surface_style_control_grid _surface_style_control_grid { get { return get_surface_style_control_grid(); } }
        public void put_surface_style_control_grid(surface_style_control_grid inst) { putEntityInstance("SURFACE_STYLE_CONTROL_GRID", inst); }

        public bool is_surface_style_parameter_line() { return IsADBEntity("surface_style_parameter_line"); }
        public bool _is_surface_style_parameter_line { get { return is_surface_style_parameter_line(); } }
        public surface_style_parameter_line get_surface_style_parameter_line() { return new surface_style_parameter_line (getEntityInstance("SURFACE_STYLE_PARAMETER_LINE")); }
        public surface_style_parameter_line _surface_style_parameter_line { get { return get_surface_style_parameter_line(); } }
        public void put_surface_style_parameter_line(surface_style_parameter_line inst) { putEntityInstance("SURFACE_STYLE_PARAMETER_LINE", inst); }

        public bool is_surface_style_rendering() { return IsADBEntity("surface_style_rendering"); }
        public bool _is_surface_style_rendering { get { return is_surface_style_rendering(); } }
        public surface_style_rendering get_surface_style_rendering() { return new surface_style_rendering (getEntityInstance("SURFACE_STYLE_RENDERING")); }
        public surface_style_rendering _surface_style_rendering { get { return get_surface_style_rendering(); } }
        public void put_surface_style_rendering(surface_style_rendering inst) { putEntityInstance("SURFACE_STYLE_RENDERING", inst); }
        };


    public class surface_style_element_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_style_element_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_style_element_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_style_element_select_get() : base(null) { }

        public bool is_surface_style_fill_area() { return IsADBEntity("surface_style_fill_area"); }
        public bool _is_surface_style_fill_area { get { return is_surface_style_fill_area(); } }
        public surface_style_fill_area get_surface_style_fill_area() { return new surface_style_fill_area (getEntityInstance("SURFACE_STYLE_FILL_AREA")); }
        public surface_style_fill_area _surface_style_fill_area { get { return get_surface_style_fill_area(); } }
        public bool is_surface_style_boundary() { return IsADBEntity("surface_style_boundary"); }
        public bool _is_surface_style_boundary { get { return is_surface_style_boundary(); } }
        public surface_style_boundary get_surface_style_boundary() { return new surface_style_boundary (getEntityInstance("SURFACE_STYLE_BOUNDARY")); }
        public surface_style_boundary _surface_style_boundary { get { return get_surface_style_boundary(); } }
        public bool is_surface_style_silhouette() { return IsADBEntity("surface_style_silhouette"); }
        public bool _is_surface_style_silhouette { get { return is_surface_style_silhouette(); } }
        public surface_style_silhouette get_surface_style_silhouette() { return new surface_style_silhouette (getEntityInstance("SURFACE_STYLE_SILHOUETTE")); }
        public surface_style_silhouette _surface_style_silhouette { get { return get_surface_style_silhouette(); } }
        public bool is_surface_style_segmentation_curve() { return IsADBEntity("surface_style_segmentation_curve"); }
        public bool _is_surface_style_segmentation_curve { get { return is_surface_style_segmentation_curve(); } }
        public surface_style_segmentation_curve get_surface_style_segmentation_curve() { return new surface_style_segmentation_curve (getEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE")); }
        public surface_style_segmentation_curve _surface_style_segmentation_curve { get { return get_surface_style_segmentation_curve(); } }
        public bool is_surface_style_control_grid() { return IsADBEntity("surface_style_control_grid"); }
        public bool _is_surface_style_control_grid { get { return is_surface_style_control_grid(); } }
        public surface_style_control_grid get_surface_style_control_grid() { return new surface_style_control_grid (getEntityInstance("SURFACE_STYLE_CONTROL_GRID")); }
        public surface_style_control_grid _surface_style_control_grid { get { return get_surface_style_control_grid(); } }
        public bool is_surface_style_parameter_line() { return IsADBEntity("surface_style_parameter_line"); }
        public bool _is_surface_style_parameter_line { get { return is_surface_style_parameter_line(); } }
        public surface_style_parameter_line get_surface_style_parameter_line() { return new surface_style_parameter_line (getEntityInstance("SURFACE_STYLE_PARAMETER_LINE")); }
        public surface_style_parameter_line _surface_style_parameter_line { get { return get_surface_style_parameter_line(); } }
        public bool is_surface_style_rendering() { return IsADBEntity("surface_style_rendering"); }
        public bool _is_surface_style_rendering { get { return is_surface_style_rendering(); } }
        public surface_style_rendering get_surface_style_rendering() { return new surface_style_rendering (getEntityInstance("SURFACE_STYLE_RENDERING")); }
        public surface_style_rendering _surface_style_rendering { get { return get_surface_style_rendering(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class surface_style_element_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public surface_style_element_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public surface_style_element_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public surface_style_element_select_put() : base(null) { }

        public void put_surface_style_fill_area(surface_style_fill_area inst) { putEntityInstance("SURFACE_STYLE_FILL_AREA", inst); }
        public void put_surface_style_boundary(surface_style_boundary inst) { putEntityInstance("SURFACE_STYLE_BOUNDARY", inst); }
        public void put_surface_style_silhouette(surface_style_silhouette inst) { putEntityInstance("SURFACE_STYLE_SILHOUETTE", inst); }
        public void put_surface_style_segmentation_curve(surface_style_segmentation_curve inst) { putEntityInstance("SURFACE_STYLE_SEGMENTATION_CURVE", inst); }
        public void put_surface_style_control_grid(surface_style_control_grid inst) { putEntityInstance("SURFACE_STYLE_CONTROL_GRID", inst); }
        public void put_surface_style_parameter_line(surface_style_parameter_line inst) { putEntityInstance("SURFACE_STYLE_PARAMETER_LINE", inst); }
        public void put_surface_style_rendering(surface_style_rendering inst) { putEntityInstance("SURFACE_STYLE_RENDERING", inst); }
        };


    public class symbol_style_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public symbol_style_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public symbol_style_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public symbol_style_select() : base(null) { }


        public bool is_symbol_colour() { return IsADBEntity("symbol_colour"); }
        public bool _is_symbol_colour { get { return is_symbol_colour(); } }
        public symbol_colour get_symbol_colour() { return new symbol_colour (getEntityInstance("SYMBOL_COLOUR")); }
        public symbol_colour _symbol_colour { get { return get_symbol_colour(); } }
        public void put_symbol_colour(symbol_colour inst) { putEntityInstance("SYMBOL_COLOUR", inst); }
        };


    public class symbol_style_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public symbol_style_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public symbol_style_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public symbol_style_select_get() : base(null) { }

        public bool is_symbol_colour() { return IsADBEntity("symbol_colour"); }
        public bool _is_symbol_colour { get { return is_symbol_colour(); } }
        public symbol_colour get_symbol_colour() { return new symbol_colour (getEntityInstance("SYMBOL_COLOUR")); }
        public symbol_colour _symbol_colour { get { return get_symbol_colour(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class symbol_style_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public symbol_style_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public symbol_style_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public symbol_style_select_put() : base(null) { }

        public void put_symbol_colour(symbol_colour inst) { putEntityInstance("SYMBOL_COLOUR", inst); }
        };


    public class text_or_character : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public text_or_character(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public text_or_character(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public text_or_character() : base(null) { }


        public bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        public bool _is_annotation_text { get { return is_annotation_text(); } }
        public annotation_text get_annotation_text() { return new annotation_text (getEntityInstance("ANNOTATION_TEXT")); }
        public annotation_text _annotation_text { get { return get_annotation_text(); } }
        public void put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }

        public bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        public bool _is_annotation_text_character { get { return is_annotation_text_character(); } }
        public annotation_text_character get_annotation_text_character() { return new annotation_text_character (getEntityInstance("ANNOTATION_TEXT_CHARACTER")); }
        public annotation_text_character _annotation_text_character { get { return get_annotation_text_character(); } }
        public void put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }

        public bool is_composite_text() { return IsADBEntity("composite_text"); }
        public bool _is_composite_text { get { return is_composite_text(); } }
        public composite_text get_composite_text() { return new composite_text (getEntityInstance("COMPOSITE_TEXT")); }
        public composite_text _composite_text { get { return get_composite_text(); } }
        public void put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }

        public bool is_text_literal() { return IsADBEntity("text_literal"); }
        public bool _is_text_literal { get { return is_text_literal(); } }
        public text_literal get_text_literal() { return new text_literal (getEntityInstance("TEXT_LITERAL")); }
        public text_literal _text_literal { get { return get_text_literal(); } }
        public void put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
        };


    public class text_or_character_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public text_or_character_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public text_or_character_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public text_or_character_get() : base(null) { }

        public bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        public bool _is_annotation_text { get { return is_annotation_text(); } }
        public annotation_text get_annotation_text() { return new annotation_text (getEntityInstance("ANNOTATION_TEXT")); }
        public annotation_text _annotation_text { get { return get_annotation_text(); } }
        public bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        public bool _is_annotation_text_character { get { return is_annotation_text_character(); } }
        public annotation_text_character get_annotation_text_character() { return new annotation_text_character (getEntityInstance("ANNOTATION_TEXT_CHARACTER")); }
        public annotation_text_character _annotation_text_character { get { return get_annotation_text_character(); } }
        public bool is_composite_text() { return IsADBEntity("composite_text"); }
        public bool _is_composite_text { get { return is_composite_text(); } }
        public composite_text get_composite_text() { return new composite_text (getEntityInstance("COMPOSITE_TEXT")); }
        public composite_text _composite_text { get { return get_composite_text(); } }
        public bool is_text_literal() { return IsADBEntity("text_literal"); }
        public bool _is_text_literal { get { return is_text_literal(); } }
        public text_literal get_text_literal() { return new text_literal (getEntityInstance("TEXT_LITERAL")); }
        public text_literal _text_literal { get { return get_text_literal(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class text_or_character_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public text_or_character_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public text_or_character_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public text_or_character_put() : base(null) { }

        public void put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
        public void put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
        public void put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
        public void put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
        };


    public class text_string_representation_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public text_string_representation_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public text_string_representation_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public text_string_representation_item() : base(null) { }


        public bool is_text_literal() { return IsADBEntity("text_literal"); }
        public bool _is_text_literal { get { return is_text_literal(); } }
        public text_literal get_text_literal() { return new text_literal (getEntityInstance("TEXT_LITERAL")); }
        public text_literal _text_literal { get { return get_text_literal(); } }
        public void put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }

        public bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        public bool _is_annotation_text { get { return is_annotation_text(); } }
        public annotation_text get_annotation_text() { return new annotation_text (getEntityInstance("ANNOTATION_TEXT")); }
        public annotation_text _annotation_text { get { return get_annotation_text(); } }
        public void put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }

        public bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        public bool _is_annotation_text_character { get { return is_annotation_text_character(); } }
        public annotation_text_character get_annotation_text_character() { return new annotation_text_character (getEntityInstance("ANNOTATION_TEXT_CHARACTER")); }
        public annotation_text_character _annotation_text_character { get { return get_annotation_text_character(); } }
        public void put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }

        public bool is_composite_text() { return IsADBEntity("composite_text"); }
        public bool _is_composite_text { get { return is_composite_text(); } }
        public composite_text get_composite_text() { return new composite_text (getEntityInstance("COMPOSITE_TEXT")); }
        public composite_text _composite_text { get { return get_composite_text(); } }
        public void put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }

        public axis2_placement _axis2_placement() { return new axis2_placement(this); }
        public axis2_placement __axis2_placement { get { return _axis2_placement(); } }
        };


    public class text_string_representation_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public text_string_representation_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public text_string_representation_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public text_string_representation_item_get() : base(null) { }

        public bool is_text_literal() { return IsADBEntity("text_literal"); }
        public bool _is_text_literal { get { return is_text_literal(); } }
        public text_literal get_text_literal() { return new text_literal (getEntityInstance("TEXT_LITERAL")); }
        public text_literal _text_literal { get { return get_text_literal(); } }
        public bool is_annotation_text() { return IsADBEntity("annotation_text"); }
        public bool _is_annotation_text { get { return is_annotation_text(); } }
        public annotation_text get_annotation_text() { return new annotation_text (getEntityInstance("ANNOTATION_TEXT")); }
        public annotation_text _annotation_text { get { return get_annotation_text(); } }
        public bool is_annotation_text_character() { return IsADBEntity("annotation_text_character"); }
        public bool _is_annotation_text_character { get { return is_annotation_text_character(); } }
        public annotation_text_character get_annotation_text_character() { return new annotation_text_character (getEntityInstance("ANNOTATION_TEXT_CHARACTER")); }
        public annotation_text_character _annotation_text_character { get { return get_annotation_text_character(); } }
        public bool is_composite_text() { return IsADBEntity("composite_text"); }
        public bool _is_composite_text { get { return is_composite_text(); } }
        public composite_text get_composite_text() { return new composite_text (getEntityInstance("COMPOSITE_TEXT")); }
        public composite_text _composite_text { get { return get_composite_text(); } }
        public axis2_placement_get get_axis2_placement() { return new axis2_placement_get(this); }
        public axis2_placement_get __axis2_placement { get { return get_axis2_placement(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class text_string_representation_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public text_string_representation_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public text_string_representation_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public text_string_representation_item_put() : base(null) { }

        public void put_text_literal(text_literal inst) { putEntityInstance("TEXT_LITERAL", inst); }
        public void put_annotation_text(annotation_text inst) { putEntityInstance("ANNOTATION_TEXT", inst); }
        public void put_annotation_text_character(annotation_text_character inst) { putEntityInstance("ANNOTATION_TEXT_CHARACTER", inst); }
        public void put_composite_text(composite_text inst) { putEntityInstance("COMPOSITE_TEXT", inst); }
        public axis2_placement_put put_axis2_placement() { return new axis2_placement_put(this); }
        public axis2_placement_put __axis2_placement { get { return put_axis2_placement(); } }
        };


    public class time_interval_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public time_interval_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public time_interval_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public time_interval_item() : base(null) { }


        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public void put_action(action inst) { putEntityInstance("ACTION", inst); }

        public bool is_time_interval_based_effectivity() { return IsADBEntity("time_interval_based_effectivity"); }
        public bool _is_time_interval_based_effectivity { get { return is_time_interval_based_effectivity(); } }
        public time_interval_based_effectivity get_time_interval_based_effectivity() { return new time_interval_based_effectivity (getEntityInstance("TIME_INTERVAL_BASED_EFFECTIVITY")); }
        public time_interval_based_effectivity _time_interval_based_effectivity { get { return get_time_interval_based_effectivity(); } }
        public void put_time_interval_based_effectivity(time_interval_based_effectivity inst) { putEntityInstance("TIME_INTERVAL_BASED_EFFECTIVITY", inst); }
        };


    public class time_interval_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public time_interval_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public time_interval_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public time_interval_item_get() : base(null) { }

        public bool is_action() { return IsADBEntity("action"); }
        public bool _is_action { get { return is_action(); } }
        public action get_action() { return new action (getEntityInstance("ACTION")); }
        public action _action { get { return get_action(); } }
        public bool is_time_interval_based_effectivity() { return IsADBEntity("time_interval_based_effectivity"); }
        public bool _is_time_interval_based_effectivity { get { return is_time_interval_based_effectivity(); } }
        public time_interval_based_effectivity get_time_interval_based_effectivity() { return new time_interval_based_effectivity (getEntityInstance("TIME_INTERVAL_BASED_EFFECTIVITY")); }
        public time_interval_based_effectivity _time_interval_based_effectivity { get { return get_time_interval_based_effectivity(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class time_interval_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public time_interval_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public time_interval_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public time_interval_item_put() : base(null) { }

        public void put_action(action inst) { putEntityInstance("ACTION", inst); }
        public void put_time_interval_based_effectivity(time_interval_based_effectivity inst) { putEntityInstance("TIME_INTERVAL_BASED_EFFECTIVITY", inst); }
        };


    public class tolerance_method_definition : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public tolerance_method_definition(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public tolerance_method_definition(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public tolerance_method_definition() : base(null) { }


        public bool is_tolerance_value() { return IsADBEntity("tolerance_value"); }
        public bool _is_tolerance_value { get { return is_tolerance_value(); } }
        public tolerance_value get_tolerance_value() { return new tolerance_value (getEntityInstance("TOLERANCE_VALUE")); }
        public tolerance_value _tolerance_value { get { return get_tolerance_value(); } }
        public void put_tolerance_value(tolerance_value inst) { putEntityInstance("TOLERANCE_VALUE", inst); }

        public bool is_limits_and_fits() { return IsADBEntity("limits_and_fits"); }
        public bool _is_limits_and_fits { get { return is_limits_and_fits(); } }
        public limits_and_fits get_limits_and_fits() { return new limits_and_fits (getEntityInstance("LIMITS_AND_FITS")); }
        public limits_and_fits _limits_and_fits { get { return get_limits_and_fits(); } }
        public void put_limits_and_fits(limits_and_fits inst) { putEntityInstance("LIMITS_AND_FITS", inst); }
        };


    public class tolerance_method_definition_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public tolerance_method_definition_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public tolerance_method_definition_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public tolerance_method_definition_get() : base(null) { }

        public bool is_tolerance_value() { return IsADBEntity("tolerance_value"); }
        public bool _is_tolerance_value { get { return is_tolerance_value(); } }
        public tolerance_value get_tolerance_value() { return new tolerance_value (getEntityInstance("TOLERANCE_VALUE")); }
        public tolerance_value _tolerance_value { get { return get_tolerance_value(); } }
        public bool is_limits_and_fits() { return IsADBEntity("limits_and_fits"); }
        public bool _is_limits_and_fits { get { return is_limits_and_fits(); } }
        public limits_and_fits get_limits_and_fits() { return new limits_and_fits (getEntityInstance("LIMITS_AND_FITS")); }
        public limits_and_fits _limits_and_fits { get { return get_limits_and_fits(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class tolerance_method_definition_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public tolerance_method_definition_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public tolerance_method_definition_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public tolerance_method_definition_put() : base(null) { }

        public void put_tolerance_value(tolerance_value inst) { putEntityInstance("TOLERANCE_VALUE", inst); }
        public void put_limits_and_fits(limits_and_fits inst) { putEntityInstance("LIMITS_AND_FITS", inst); }
        };


    public class transformation : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public transformation(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public transformation(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public transformation() : base(null) { }


        public bool is_item_defined_transformation() { return IsADBEntity("item_defined_transformation"); }
        public bool _is_item_defined_transformation { get { return is_item_defined_transformation(); } }
        public item_defined_transformation get_item_defined_transformation() { return new item_defined_transformation (getEntityInstance("ITEM_DEFINED_TRANSFORMATION")); }
        public item_defined_transformation _item_defined_transformation { get { return get_item_defined_transformation(); } }
        public void put_item_defined_transformation(item_defined_transformation inst) { putEntityInstance("ITEM_DEFINED_TRANSFORMATION", inst); }

        public bool is_functionally_defined_transformation() { return IsADBEntity("functionally_defined_transformation"); }
        public bool _is_functionally_defined_transformation { get { return is_functionally_defined_transformation(); } }
        public functionally_defined_transformation get_functionally_defined_transformation() { return new functionally_defined_transformation (getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION")); }
        public functionally_defined_transformation _functionally_defined_transformation { get { return get_functionally_defined_transformation(); } }
        public void put_functionally_defined_transformation(functionally_defined_transformation inst) { putEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION", inst); }
        };


    public class transformation_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public transformation_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public transformation_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public transformation_get() : base(null) { }

        public bool is_item_defined_transformation() { return IsADBEntity("item_defined_transformation"); }
        public bool _is_item_defined_transformation { get { return is_item_defined_transformation(); } }
        public item_defined_transformation get_item_defined_transformation() { return new item_defined_transformation (getEntityInstance("ITEM_DEFINED_TRANSFORMATION")); }
        public item_defined_transformation _item_defined_transformation { get { return get_item_defined_transformation(); } }
        public bool is_functionally_defined_transformation() { return IsADBEntity("functionally_defined_transformation"); }
        public bool _is_functionally_defined_transformation { get { return is_functionally_defined_transformation(); } }
        public functionally_defined_transformation get_functionally_defined_transformation() { return new functionally_defined_transformation (getEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION")); }
        public functionally_defined_transformation _functionally_defined_transformation { get { return get_functionally_defined_transformation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class transformation_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public transformation_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public transformation_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public transformation_put() : base(null) { }

        public void put_item_defined_transformation(item_defined_transformation inst) { putEntityInstance("ITEM_DEFINED_TRANSFORMATION", inst); }
        public void put_functionally_defined_transformation(functionally_defined_transformation inst) { putEntityInstance("FUNCTIONALLY_DEFINED_TRANSFORMATION", inst); }
        };


    public class trim_condition_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public trim_condition_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public trim_condition_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public trim_condition_select() : base(null) { }


        public bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        //public bool _is_length_measure { get { return is_length_measure(); } }
        public double? get_length_measure() { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _length_measure { get { return get_length_measure(); } }
        public void put_length_measure (double value) { put_double("LENGTH_MEASURE", ifcengine.sdaiREAL, value); }

        public bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        //public bool _is_plane_angle_measure { get { return is_plane_angle_measure(); } }
        public double? get_plane_angle_measure() { return get_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
        public double? _plane_angle_measure { get { return get_plane_angle_measure(); } }
        public void put_plane_angle_measure (double value) { put_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }

        public generalized_surface_select _generalized_surface_select() { return new generalized_surface_select(this); }
        public generalized_surface_select __generalized_surface_select { get { return _generalized_surface_select(); } }

        public bool is_solid_model() { return IsADBEntity("solid_model"); }
        public bool _is_solid_model { get { return is_solid_model(); } }
        public solid_model get_solid_model() { return new solid_model (getEntityInstance("SOLID_MODEL")); }
        public solid_model _solid_model { get { return get_solid_model(); } }
        public void put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
        };


    public class trim_condition_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public trim_condition_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public trim_condition_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public trim_condition_select_get() : base(null) { }

        public bool is_length_measure() { return IsADBType("LENGTH_MEASURE"); }
        //public bool _is_length_measure { get { return is_length_measure(); } }
        public double? get_length_measure() { return get_double("LENGTH_MEASURE", ifcengine.sdaiREAL); }
        public double? _length_measure { get { return get_length_measure(); } }
        public bool is_plane_angle_measure() { return IsADBType("PLANE_ANGLE_MEASURE"); }
        //public bool _is_plane_angle_measure { get { return is_plane_angle_measure(); } }
        public double? get_plane_angle_measure() { return get_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL); }
        public double? _plane_angle_measure { get { return get_plane_angle_measure(); } }
        public generalized_surface_select_get get_generalized_surface_select() { return new generalized_surface_select_get(this); }
        public generalized_surface_select_get __generalized_surface_select { get { return get_generalized_surface_select(); } }
        public bool is_solid_model() { return IsADBEntity("solid_model"); }
        public bool _is_solid_model { get { return is_solid_model(); } }
        public solid_model get_solid_model() { return new solid_model (getEntityInstance("SOLID_MODEL")); }
        public solid_model _solid_model { get { return get_solid_model(); } }

        public double? as_double() { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; }
        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class trim_condition_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public trim_condition_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public trim_condition_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public trim_condition_select_put() : base(null) { }

        public void put_length_measure (double value) { put_double("LENGTH_MEASURE", ifcengine.sdaiREAL, value); }
        public void put_plane_angle_measure (double value) { put_double("PLANE_ANGLE_MEASURE", ifcengine.sdaiREAL, value); }
        public generalized_surface_select_put put_generalized_surface_select() { return new generalized_surface_select_put(this); }
        public generalized_surface_select_put __generalized_surface_select { get { return put_generalized_surface_select(); } }
        public void put_solid_model(solid_model inst) { putEntityInstance("SOLID_MODEL", inst); }
        };


    public class trimming_select : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public trimming_select(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public trimming_select(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public trimming_select() : base(null) { }


        public bool is_cartesian_point() { return IsADBEntity("cartesian_point"); }
        public bool _is_cartesian_point { get { return is_cartesian_point(); } }
        public cartesian_point get_cartesian_point() { return new cartesian_point (getEntityInstance("CARTESIAN_POINT")); }
        public cartesian_point _cartesian_point { get { return get_cartesian_point(); } }
        public void put_cartesian_point(cartesian_point inst) { putEntityInstance("CARTESIAN_POINT", inst); }

        public bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        //public bool _is_parameter_value { get { return is_parameter_value(); } }
        public double? get_parameter_value() { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
        public double? _parameter_value { get { return get_parameter_value(); } }
        public void put_parameter_value (double value) { put_double("PARAMETER_VALUE", ifcengine.sdaiREAL, value); }
        };


    public class trimming_select_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public trimming_select_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public trimming_select_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public trimming_select_get() : base(null) { }

        public bool is_cartesian_point() { return IsADBEntity("cartesian_point"); }
        public bool _is_cartesian_point { get { return is_cartesian_point(); } }
        public cartesian_point get_cartesian_point() { return new cartesian_point (getEntityInstance("CARTESIAN_POINT")); }
        public cartesian_point _cartesian_point { get { return get_cartesian_point(); } }
        public bool is_parameter_value() { return IsADBType("PARAMETER_VALUE"); }
        //public bool _is_parameter_value { get { return is_parameter_value(); } }
        public double? get_parameter_value() { return get_double("PARAMETER_VALUE", ifcengine.sdaiREAL); }
        public double? _parameter_value { get { return get_parameter_value(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        public double? as_double() { double val = 0; if (ifcengine.sdaiGetAttrBN(m_instance, m_attrName, ifcengine.sdaiREAL, out val) != 0) return val; else return null; }
        };


    public class trimming_select_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public trimming_select_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public trimming_select_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public trimming_select_put() : base(null) { }

        public void put_cartesian_point(cartesian_point inst) { putEntityInstance("CARTESIAN_POINT", inst); }
        public void put_parameter_value (double value) { put_double("PARAMETER_VALUE", ifcengine.sdaiREAL, value); }
        };


    public class unit : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public unit(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public unit(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public unit() : base(null) { }


        public bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        public bool _is_derived_unit { get { return is_derived_unit(); } }
        public derived_unit get_derived_unit() { return new derived_unit (getEntityInstance("DERIVED_UNIT")); }
        public derived_unit _derived_unit { get { return get_derived_unit(); } }
        public void put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }

        public bool is_named_unit() { return IsADBEntity("named_unit"); }
        public bool _is_named_unit { get { return is_named_unit(); } }
        public named_unit get_named_unit() { return new named_unit (getEntityInstance("NAMED_UNIT")); }
        public named_unit _named_unit { get { return get_named_unit(); } }
        public void put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
        };


    public class unit_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public unit_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public unit_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public unit_get() : base(null) { }

        public bool is_derived_unit() { return IsADBEntity("derived_unit"); }
        public bool _is_derived_unit { get { return is_derived_unit(); } }
        public derived_unit get_derived_unit() { return new derived_unit (getEntityInstance("DERIVED_UNIT")); }
        public derived_unit _derived_unit { get { return get_derived_unit(); } }
        public bool is_named_unit() { return IsADBEntity("named_unit"); }
        public bool _is_named_unit { get { return is_named_unit(); } }
        public named_unit get_named_unit() { return new named_unit (getEntityInstance("NAMED_UNIT")); }
        public named_unit _named_unit { get { return get_named_unit(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class unit_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public unit_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public unit_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public unit_put() : base(null) { }

        public void put_derived_unit(derived_unit inst) { putEntityInstance("DERIVED_UNIT", inst); }
        public void put_named_unit(named_unit inst) { putEntityInstance("NAMED_UNIT", inst); }
        };


    public class value_qualifier : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public value_qualifier(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public value_qualifier(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public value_qualifier() : base(null) { }


        public bool is_precision_qualifier() { return IsADBEntity("precision_qualifier"); }
        public bool _is_precision_qualifier { get { return is_precision_qualifier(); } }
        public precision_qualifier get_precision_qualifier() { return new precision_qualifier (getEntityInstance("PRECISION_QUALIFIER")); }
        public precision_qualifier _precision_qualifier { get { return get_precision_qualifier(); } }
        public void put_precision_qualifier(precision_qualifier inst) { putEntityInstance("PRECISION_QUALIFIER", inst); }

        public bool is_type_qualifier() { return IsADBEntity("type_qualifier"); }
        public bool _is_type_qualifier { get { return is_type_qualifier(); } }
        public type_qualifier get_type_qualifier() { return new type_qualifier (getEntityInstance("TYPE_QUALIFIER")); }
        public type_qualifier _type_qualifier { get { return get_type_qualifier(); } }
        public void put_type_qualifier(type_qualifier inst) { putEntityInstance("TYPE_QUALIFIER", inst); }

        public bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        public bool _is_uncertainty_qualifier { get { return is_uncertainty_qualifier(); } }
        public uncertainty_qualifier get_uncertainty_qualifier() { return new uncertainty_qualifier (getEntityInstance("UNCERTAINTY_QUALIFIER")); }
        public uncertainty_qualifier _uncertainty_qualifier { get { return get_uncertainty_qualifier(); } }
        public void put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
        };


    public class value_qualifier_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public value_qualifier_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public value_qualifier_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public value_qualifier_get() : base(null) { }

        public bool is_precision_qualifier() { return IsADBEntity("precision_qualifier"); }
        public bool _is_precision_qualifier { get { return is_precision_qualifier(); } }
        public precision_qualifier get_precision_qualifier() { return new precision_qualifier (getEntityInstance("PRECISION_QUALIFIER")); }
        public precision_qualifier _precision_qualifier { get { return get_precision_qualifier(); } }
        public bool is_type_qualifier() { return IsADBEntity("type_qualifier"); }
        public bool _is_type_qualifier { get { return is_type_qualifier(); } }
        public type_qualifier get_type_qualifier() { return new type_qualifier (getEntityInstance("TYPE_QUALIFIER")); }
        public type_qualifier _type_qualifier { get { return get_type_qualifier(); } }
        public bool is_uncertainty_qualifier() { return IsADBEntity("uncertainty_qualifier"); }
        public bool _is_uncertainty_qualifier { get { return is_uncertainty_qualifier(); } }
        public uncertainty_qualifier get_uncertainty_qualifier() { return new uncertainty_qualifier (getEntityInstance("UNCERTAINTY_QUALIFIER")); }
        public uncertainty_qualifier _uncertainty_qualifier { get { return get_uncertainty_qualifier(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class value_qualifier_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public value_qualifier_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public value_qualifier_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public value_qualifier_put() : base(null) { }

        public void put_precision_qualifier(precision_qualifier inst) { putEntityInstance("PRECISION_QUALIFIER", inst); }
        public void put_type_qualifier(type_qualifier inst) { putEntityInstance("TYPE_QUALIFIER", inst); }
        public void put_uncertainty_qualifier(uncertainty_qualifier inst) { putEntityInstance("UNCERTAINTY_QUALIFIER", inst); }
        };


    public class vector_or_direction : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public vector_or_direction(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public vector_or_direction(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public vector_or_direction() : base(null) { }


        public bool is_vector() { return IsADBEntity("vector"); }
        public bool _is_vector { get { return is_vector(); } }
        public vector get_vector() { return new vector (getEntityInstance("VECTOR")); }
        public vector _vector { get { return get_vector(); } }
        public void put_vector(vector inst) { putEntityInstance("VECTOR", inst); }

        public bool is_direction() { return IsADBEntity("direction"); }
        public bool _is_direction { get { return is_direction(); } }
        public direction get_direction() { return new direction (getEntityInstance("DIRECTION")); }
        public direction _direction { get { return get_direction(); } }
        public void put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
        };


    public class vector_or_direction_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public vector_or_direction_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public vector_or_direction_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public vector_or_direction_get() : base(null) { }

        public bool is_vector() { return IsADBEntity("vector"); }
        public bool _is_vector { get { return is_vector(); } }
        public vector get_vector() { return new vector (getEntityInstance("VECTOR")); }
        public vector _vector { get { return get_vector(); } }
        public bool is_direction() { return IsADBEntity("direction"); }
        public bool _is_direction { get { return is_direction(); } }
        public direction get_direction() { return new direction (getEntityInstance("DIRECTION")); }
        public direction _direction { get { return get_direction(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class vector_or_direction_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public vector_or_direction_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public vector_or_direction_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public vector_or_direction_put() : base(null) { }

        public void put_vector(vector inst) { putEntityInstance("VECTOR", inst); }
        public void put_direction(direction inst) { putEntityInstance("DIRECTION", inst); }
        };


    public class work_item : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public work_item(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public work_item(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public work_item() : base(null) { }


        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }
        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };


    public class work_item_get : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public work_item_get(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public work_item_get(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public work_item_get() : base(null) { }

        public bool is_product_definition_formation() { return IsADBEntity("product_definition_formation"); }
        public bool _is_product_definition_formation { get { return is_product_definition_formation(); } }
        public product_definition_formation get_product_definition_formation() { return new product_definition_formation (getEntityInstance("PRODUCT_DEFINITION_FORMATION")); }
        public product_definition_formation _product_definition_formation { get { return get_product_definition_formation(); } }

        public SdaiInstance as_instance() { return getEntityInstance(null); }
        };


    public class work_item_put : Select
    {
        /// <summary>
        /// Use this constructor if you want to put value for attribute (scalar or aggregation)
        /// </summary>
        /// <param name="instance">instance you intent to modify</param>
        /// <param name="attrName">scalar attribute you intent to modify, leave null for aggregations</param>
        /// <param name="adb">leave null, it is for internal workflow</param>
        public work_item_put(SdaiInstance instance, TextValue attrName = null, IntValue adb = 0) : base(instance, attrName, adb) { }
        
        /// <summary>
        /// Use this constructore to put nested select value
        /// </summary>
        /// <param name="outer">outer select</param>
        public work_item_put(Select outer) : base(outer) { }

        /// <summary>
        /// !!! do not use this constructor, it is for internal workflow
        /// </summary>
        public work_item_put() : base(null) { }

        public void put_product_definition_formation(product_definition_formation inst) { putEntityInstance("PRODUCT_DEFINITION_FORMATION", inst); }
        };

    //
    // Unnamed aggregations
    //
    public class set_of_derived_unit_element : List<derived_unit_element> { }
    class set_of_derived_unit_elementSerializer : AggrSerializerInstance<derived_unit_element, set_of_derived_unit_element> { }
    public class set_of_representation_item : List<representation_item> { }
    class set_of_representation_itemSerializer : AggrSerializerInstance<representation_item, set_of_representation_item> { }
    public class set_of_versioned_action_request : List<versioned_action_request> { }
    class set_of_versioned_action_requestSerializer : AggrSerializerInstance<versioned_action_request, set_of_versioned_action_request> { }
    public class set_of_face_bound : List<face_bound> { }
    class set_of_face_boundSerializer : AggrSerializerInstance<face_bound, set_of_face_bound> { }
    public class set_of_draughting_callout_element : List<draughting_callout_element> { }
    class set_of_draughting_callout_elementSerializer : AggrSerializerSelect<draughting_callout_element, set_of_draughting_callout_element> { }
    public class set_of_datum_reference : List<datum_reference> { }
    class set_of_datum_referenceSerializer : AggrSerializerInstance<datum_reference, set_of_datum_reference> { }
    public class set_of_presentation_style_assignment : List<presentation_style_assignment> { }
    class set_of_presentation_style_assignmentSerializer : AggrSerializerInstance<presentation_style_assignment, set_of_presentation_style_assignment> { }
    public class set_of_curve : List<curve> { }
    class set_of_curveSerializer : AggrSerializerInstance<curve, set_of_curve> { }
    public class set_of_annotation_plane_element : List<annotation_plane_element> { }
    class set_of_annotation_plane_elementSerializer : AggrSerializerSelect<annotation_plane_element, set_of_annotation_plane_element> { }
    public class set_of_shape_aspect_relationship : List<shape_aspect_relationship> { }
    class set_of_shape_aspect_relationshipSerializer : AggrSerializerInstance<shape_aspect_relationship, set_of_shape_aspect_relationship> { }
    public class set_of_application_context_element : List<application_context_element> { }
    class set_of_application_context_elementSerializer : AggrSerializerInstance<application_context_element, set_of_application_context_element> { }
    public class set_of_action_items : List<action_items> { }
    class set_of_action_itemsSerializer : AggrSerializerSelect<action_items, set_of_action_items> { }
    public class set_of_action_method_items : List<action_method_items> { }
    class set_of_action_method_itemsSerializer : AggrSerializerSelect<action_method_items, set_of_action_method_items> { }
    public class set_of_action_request_item : List<action_request_item> { }
    class set_of_action_request_itemSerializer : AggrSerializerSelect<action_request_item, set_of_action_request_item> { }
    public class set_of_approval_item : List<approval_item> { }
    class set_of_approval_itemSerializer : AggrSerializerSelect<approval_item, set_of_approval_item> { }
    public class set_of_attribute_classification_item : List<attribute_classification_item> { }
    class set_of_attribute_classification_itemSerializer : AggrSerializerSelect<attribute_classification_item, set_of_attribute_classification_item> { }
    public class set_of_certification_item : List<certification_item> { }
    class set_of_certification_itemSerializer : AggrSerializerSelect<certification_item, set_of_certification_item> { }
    public class set_of_classification_item : List<classification_item> { }
    class set_of_classification_itemSerializer : AggrSerializerSelect<classification_item, set_of_classification_item> { }
    public class set_of_contract_item : List<contract_item> { }
    class set_of_contract_itemSerializer : AggrSerializerSelect<contract_item, set_of_contract_item> { }
    public class set_of_date_and_time_item : List<date_and_time_item> { }
    class set_of_date_and_time_itemSerializer : AggrSerializerSelect<date_and_time_item, set_of_date_and_time_item> { }
    public class set_of_date_item : List<date_item> { }
    class set_of_date_itemSerializer : AggrSerializerSelect<date_item, set_of_date_item> { }
    public class set_of_document_reference_item : List<document_reference_item> { }
    class set_of_document_reference_itemSerializer : AggrSerializerSelect<document_reference_item, set_of_document_reference_item> { }
    public class set_of_effectivity_item : List<effectivity_item> { }
    class set_of_effectivity_itemSerializer : AggrSerializerSelect<effectivity_item, set_of_effectivity_item> { }
    public class set_of_event_occurrence_item : List<event_occurrence_item> { }
    class set_of_event_occurrence_itemSerializer : AggrSerializerSelect<event_occurrence_item, set_of_event_occurrence_item> { }
    public class set_of_external_identification_item : List<external_identification_item> { }
    class set_of_external_identification_itemSerializer : AggrSerializerSelect<external_identification_item, set_of_external_identification_item> { }
    public class set_of_groupable_item : List<groupable_item> { }
    class set_of_groupable_itemSerializer : AggrSerializerSelect<groupable_item, set_of_groupable_item> { }
    public class set_of_identification_item : List<identification_item> { }
    class set_of_identification_itemSerializer : AggrSerializerSelect<identification_item, set_of_identification_item> { }
    public class set_of_organization_item : List<organization_item> { }
    class set_of_organization_itemSerializer : AggrSerializerSelect<organization_item, set_of_organization_item> { }
    public class set_of_project_item : List<project_item> { }
    class set_of_project_itemSerializer : AggrSerializerSelect<project_item, set_of_project_item> { }
    public class set_of_person_and_organization_item : List<person_and_organization_item> { }
    class set_of_person_and_organization_itemSerializer : AggrSerializerSelect<person_and_organization_item, set_of_person_and_organization_item> { }
    public class set_of_presented_item_select : List<presented_item_select> { }
    class set_of_presented_item_selectSerializer : AggrSerializerSelect<presented_item_select, set_of_presented_item_select> { }
    public class set_of_security_classification_item : List<security_classification_item> { }
    class set_of_security_classification_itemSerializer : AggrSerializerSelect<security_classification_item, set_of_security_classification_item> { }
    public class set_of_time_interval_item : List<time_interval_item> { }
    class set_of_time_interval_itemSerializer : AggrSerializerSelect<time_interval_item, set_of_time_interval_item> { }
    public class set_of_product_definition : List<product_definition> { }
    class set_of_product_definitionSerializer : AggrSerializerInstance<product_definition, set_of_product_definition> { }
    public class set_of_attribute_language_item : List<attribute_language_item> { }
    class set_of_attribute_language_itemSerializer : AggrSerializerSelect<attribute_language_item, set_of_attribute_language_item> { }
    public class list_of_cartesian_point : List<cartesian_point> { }
    class list_of_cartesian_pointSerializer : AggrSerializerInstance<cartesian_point, list_of_cartesian_point> { }
    public class ListOfIntValue : List<IntValue> { }
    class ListOfIntValueSerializer : AggrSerializer_IntValue<IntValue, ListOfIntValue> { }
    public class list_of_parameter_value : List<double> { }
    class list_of_parameter_valueSerializer : AggrSerializer_double<double, list_of_parameter_value> { }
    public class list_of_list_of_cartesian_point : List<list_of_cartesian_point> { }
    class list_of_list_of_cartesian_pointSerializer : AggrSerializerAggr<list_of_cartesian_point, list_of_cartesian_pointSerializer, list_of_list_of_cartesian_point> { }
    public class list_of_generic_expression : List<generic_expression> { }
    class list_of_generic_expressionSerializer : AggrSerializerInstance<generic_expression, list_of_generic_expression> { }
    public class list_of_composite_curve_segment : List<composite_curve_segment> { }
    class list_of_composite_curve_segmentSerializer : AggrSerializerInstance<composite_curve_segment, list_of_composite_curve_segment> { }
    public class list_of_pcurve_or_surface : List<pcurve_or_surface> { }
    class list_of_pcurve_or_surfaceSerializer : AggrSerializerSelect<pcurve_or_surface, list_of_pcurve_or_surface> { }
    public class set_of_product_definition_or_breakdown_element_usage : List<product_definition_or_breakdown_element_usage> { }
    class set_of_product_definition_or_breakdown_element_usageSerializer : AggrSerializerSelect<product_definition_or_breakdown_element_usage, set_of_product_definition_or_breakdown_element_usage> { }
    public class set_of_oriented_closed_shell : List<oriented_closed_shell> { }
    class set_of_oriented_closed_shellSerializer : AggrSerializerInstance<oriented_closed_shell, set_of_oriented_closed_shell> { }
    public class set_of_camera_model_d3_multi_clipping_interection_select : List<camera_model_d3_multi_clipping_interection_select> { }
    class set_of_camera_model_d3_multi_clipping_interection_selectSerializer : AggrSerializerSelect<camera_model_d3_multi_clipping_interection_select, set_of_camera_model_d3_multi_clipping_interection_select> { }
    public class set_of_camera_model_d3_multi_clipping_union_select : List<camera_model_d3_multi_clipping_union_select> { }
    class set_of_camera_model_d3_multi_clipping_union_selectSerializer : AggrSerializerSelect<camera_model_d3_multi_clipping_union_select, set_of_camera_model_d3_multi_clipping_union_select> { }
    public class set_of_light_source : List<light_source> { }
    class set_of_light_sourceSerializer : AggrSerializerInstance<light_source, set_of_light_source> { }
    public class set_of_mapped_item : List<mapped_item> { }
    class set_of_mapped_itemSerializer : AggrSerializerInstance<mapped_item, set_of_mapped_item> { }
    public class list_of_length_measure : List<double> { }
    class list_of_length_measureSerializer : AggrSerializer_double<double, list_of_length_measure> { }
    public class set_of_approved_item : List<approved_item> { }
    class set_of_approved_itemSerializer : AggrSerializerSelect<approved_item, set_of_approved_item> { }
    public class set_of_certified_item : List<certified_item> { }
    class set_of_certified_itemSerializer : AggrSerializerSelect<certified_item, set_of_certified_item> { }
    public class set_of_contracted_item : List<contracted_item> { }
    class set_of_contracted_itemSerializer : AggrSerializerSelect<contracted_item, set_of_contracted_item> { }
    public class set_of_date_time_item : List<date_time_item> { }
    class set_of_date_time_itemSerializer : AggrSerializerSelect<date_time_item, set_of_date_time_item> { }
    public class set_of_cc_person_organization_item : List<cc_person_organization_item> { }
    class set_of_cc_person_organization_itemSerializer : AggrSerializerSelect<cc_person_organization_item, set_of_cc_person_organization_item> { }
    public class set_of_cc_classified_item : List<cc_classified_item> { }
    class set_of_cc_classified_itemSerializer : AggrSerializerSelect<cc_classified_item, set_of_cc_classified_item> { }
    public class set_of_cc_specified_item : List<cc_specified_item> { }
    class set_of_cc_specified_itemSerializer : AggrSerializerSelect<cc_specified_item, set_of_cc_specified_item> { }
    public class set_of_work_item : List<work_item> { }
    class set_of_work_itemSerializer : AggrSerializerSelect<work_item, set_of_work_item> { }
    public class set_of_change_request_item : List<change_request_item> { }
    class set_of_change_request_itemSerializer : AggrSerializerSelect<change_request_item, set_of_change_request_item> { }
    public class set_of_annotation_fill_area : List<annotation_fill_area> { }
    class set_of_annotation_fill_areaSerializer : AggrSerializerInstance<annotation_fill_area, set_of_annotation_fill_area> { }
    public class set_of_class_usage_effectivity_context_item : List<class_usage_effectivity_context_item> { }
    class set_of_class_usage_effectivity_context_itemSerializer : AggrSerializerSelect<class_usage_effectivity_context_item, set_of_class_usage_effectivity_context_item> { }
    public class set_of_face : List<face> { }
    class set_of_faceSerializer : AggrSerializerInstance<face, set_of_face> { }
    public class set_of_face_surface : List<face_surface> { }
    class set_of_face_surfaceSerializer : AggrSerializerInstance<face_surface, set_of_face_surface> { }
    public class list_of_face_surface : List<face_surface> { }
    class list_of_face_surfaceSerializer : AggrSerializerInstance<face_surface, list_of_face_surface> { }
    public class set_of_list_of_face_surface : List<list_of_face_surface> { }
    class set_of_list_of_face_surfaceSerializer : AggrSerializerAggr<list_of_face_surface, list_of_face_surfaceSerializer, set_of_list_of_face_surface> { }
    public class bag_of_composite_curve : List<composite_curve> { }
    class bag_of_composite_curveSerializer : AggrSerializerInstance<composite_curve, bag_of_composite_curve> { }
    public class set_of_characterized_definition : List<characterized_definition> { }
    class set_of_characterized_definitionSerializer : AggrSerializerSelect<characterized_definition, set_of_characterized_definition> { }
    public class set_of_text_or_character : List<text_or_character> { }
    class set_of_text_or_characterSerializer : AggrSerializerSelect<text_or_character, set_of_text_or_character> { }
    public class set_of_product_concept_feature_association : List<product_concept_feature_association> { }
    class set_of_product_concept_feature_associationSerializer : AggrSerializerInstance<product_concept_feature_association, set_of_product_concept_feature_association> { }
    public class set_of_configured_effectivity_item : List<configured_effectivity_item> { }
    class set_of_configured_effectivity_itemSerializer : AggrSerializerSelect<configured_effectivity_item, set_of_configured_effectivity_item> { }
    public class set_of_configured_effectivity_context_item : List<configured_effectivity_context_item> { }
    class set_of_configured_effectivity_context_itemSerializer : AggrSerializerSelect<configured_effectivity_context_item, set_of_configured_effectivity_context_item> { }
    public class set_of_edge : List<edge> { }
    class set_of_edgeSerializer : AggrSerializerInstance<edge, set_of_edge> { }
    public class set_of_invisible_item : List<invisible_item> { }
    class set_of_invisible_itemSerializer : AggrSerializerSelect<invisible_item, set_of_invisible_item> { }
    public class list_of_style_context_select : List<style_context_select> { }
    class list_of_style_context_selectSerializer : AggrSerializerSelect<style_context_select, list_of_style_context_select> { }
    public class set_of_boundary_curve : List<boundary_curve> { }
    class set_of_boundary_curveSerializer : AggrSerializerInstance<boundary_curve, set_of_boundary_curve> { }
    public class list_of_curve_style_font_pattern : List<curve_style_font_pattern> { }
    class list_of_curve_style_font_patternSerializer : AggrSerializerInstance<curve_style_font_pattern, list_of_curve_style_font_pattern> { }
    public class set_of_property_definition_representation : List<property_definition_representation> { }
    class set_of_property_definition_representationSerializer : AggrSerializerInstance<property_definition_representation, set_of_property_definition_representation> { }
    public class list_of_double : List<double> { }
    class list_of_doubleSerializer : AggrSerializer_double<double, list_of_double> { }
    public class set_of_document_representation_type : List<document_representation_type> { }
    class set_of_document_representation_typeSerializer : AggrSerializerInstance<document_representation_type, set_of_document_representation_type> { }
    public class set_of_document_identifier_assigned_item : List<document_identifier_assigned_item> { }
    class set_of_document_identifier_assigned_itemSerializer : AggrSerializerSelect<document_identifier_assigned_item, set_of_document_identifier_assigned_item> { }
    public class set_of_draughting_titled_item : List<draughting_titled_item> { }
    class set_of_draughting_titled_itemSerializer : AggrSerializerSelect<draughting_titled_item, set_of_draughting_titled_item> { }
    public class set_of_area_in_set : List<area_in_set> { }
    class set_of_area_in_setSerializer : AggrSerializerInstance<area_in_set, set_of_area_in_set> { }
    public class set_of_connected_edge_set : List<connected_edge_set> { }
    class set_of_connected_edge_setSerializer : AggrSerializerInstance<connected_edge_set, set_of_connected_edge_set> { }
    public class list_of_edge_curve : List<edge_curve> { }
    class list_of_edge_curveSerializer : AggrSerializerInstance<edge_curve, list_of_edge_curve> { }
    public class list_of_oriented_edge : List<oriented_edge> { }
    class list_of_oriented_edgeSerializer : AggrSerializerInstance<oriented_edge, list_of_oriented_edge> { }
    public class set_of_list_of_edge_curve : List<list_of_edge_curve> { }
    class set_of_list_of_edge_curveSerializer : AggrSerializerAggr<list_of_edge_curve, list_of_edge_curveSerializer, set_of_list_of_edge_curve> { }
    public class list_of_plane_angle_measure : List<double> { }
    class list_of_plane_angle_measureSerializer : AggrSerializer_double<double, list_of_plane_angle_measure> { }
    public class set_of_connected_face_set : List<connected_face_set> { }
    class set_of_connected_face_setSerializer : AggrSerializerInstance<connected_face_set, set_of_connected_face_set> { }
    public class set_of_fill_style_select : List<fill_style_select> { }
    class set_of_fill_style_selectSerializer : AggrSerializerSelect<fill_style_select, set_of_fill_style_select> { }
    public class set_of_fill_area_style_tile_shape_select : List<fill_area_style_tile_shape_select> { }
    class set_of_fill_area_style_tile_shape_selectSerializer : AggrSerializerSelect<fill_area_style_tile_shape_select, set_of_fill_area_style_tile_shape_select> { }
    public class set_of_geometric_set_select : List<geometric_set_select> { }
    class set_of_geometric_set_selectSerializer : AggrSerializerSelect<geometric_set_select, set_of_geometric_set_select> { }
    public class set_of_representation : List<representation> { }
    class set_of_representationSerializer : AggrSerializerInstance<representation, set_of_representation> { }
    public class set_of_uncertainty_measure_with_unit : List<uncertainty_measure_with_unit> { }
    class set_of_uncertainty_measure_with_unitSerializer : AggrSerializerInstance<uncertainty_measure_with_unit, set_of_uncertainty_measure_with_unit> { }
    public class set_of_unit : List<unit> { }
    class set_of_unitSerializer : AggrSerializerSelect<unit, set_of_unit> { }
    public class set_of_presentation_view : List<presentation_view> { }
    class set_of_presentation_viewSerializer : AggrSerializerInstance<presentation_view, set_of_presentation_view> { }
    public class set_of_instance_usage_context_select : List<instance_usage_context_select> { }
    class set_of_instance_usage_context_selectSerializer : AggrSerializerSelect<instance_usage_context_select, set_of_instance_usage_context_select> { }
    public class set_of_value_qualifier : List<value_qualifier> { }
    class set_of_value_qualifierSerializer : AggrSerializerSelect<value_qualifier, set_of_value_qualifier> { }
    public class set_of_multi_language_attribute_item : List<multi_language_attribute_item> { }
    class set_of_multi_language_attribute_itemSerializer : AggrSerializerSelect<multi_language_attribute_item, set_of_multi_language_attribute_item> { }
    public class set_of_attribute_language_assignment : List<attribute_language_assignment> { }
    class set_of_attribute_language_assignmentSerializer : AggrSerializerInstance<attribute_language_assignment, set_of_attribute_language_assignment> { }
    public class set_of_organization : List<organization> { }
    class set_of_organizationSerializer : AggrSerializerInstance<organization, set_of_organization> { }
    public class list_of_label : List<TextValue> { }
    class list_of_labelSerializer : AggrSerializerText<TextValue, list_of_label> { public list_of_labelSerializer() : base(ifcengine.sdaiSTRING) { } }
    public class set_of_person : List<person> { }
    class set_of_personSerializer : AggrSerializerInstance<person, set_of_person> { }
    public class set_of_auxiliary_geometric_representation_item : List<auxiliary_geometric_representation_item> { }
    class set_of_auxiliary_geometric_representation_itemSerializer : AggrSerializerInstance<auxiliary_geometric_representation_item, set_of_auxiliary_geometric_representation_item> { }
    public class set_of_layered_item : List<layered_item> { }
    class set_of_layered_itemSerializer : AggrSerializerSelect<layered_item, set_of_layered_item> { }
    public class set_of_presentation_style_select : List<presentation_style_select> { }
    class set_of_presentation_style_selectSerializer : AggrSerializerSelect<presentation_style_select, set_of_presentation_style_select> { }
    public class list_of_representation_item : List<representation_item> { }
    class list_of_representation_itemSerializer : AggrSerializerInstance<representation_item, list_of_representation_item> { }
    public class set_of_product_context : List<product_context> { }
    class set_of_product_contextSerializer : AggrSerializerInstance<product_context, set_of_product_context> { }
    public class set_of_category_usage_item : List<category_usage_item> { }
    class set_of_category_usage_itemSerializer : AggrSerializerSelect<category_usage_item, set_of_category_usage_item> { }
    public class set_of_product_definition_or_product_definition_relationship : List<product_definition_or_product_definition_relationship> { }
    class set_of_product_definition_or_product_definition_relationshipSerializer : AggrSerializerSelect<product_definition_or_product_definition_relationship, set_of_product_definition_or_product_definition_relationship> { }
    public class set_of_document : List<document> { }
    class set_of_documentSerializer : AggrSerializerInstance<document, set_of_document> { }
    public class set_of_characterized_product_composition_value : List<characterized_product_composition_value> { }
    class set_of_characterized_product_composition_valueSerializer : AggrSerializerSelect<characterized_product_composition_value, set_of_characterized_product_composition_value> { }
    public class set_of_product : List<product> { }
    class set_of_productSerializer : AggrSerializerInstance<product, set_of_product> { }
    public class set_of_shape_aspect : List<shape_aspect> { }
    class set_of_shape_aspectSerializer : AggrSerializerInstance<shape_aspect, set_of_shape_aspect> { }
    public class list_of_list_of_double : List<list_of_double> { }
    class list_of_list_of_doubleSerializer : AggrSerializerAggr<list_of_double, list_of_doubleSerializer, list_of_list_of_double> { }
    public class list_of_surface_patch : List<surface_patch> { }
    class list_of_surface_patchSerializer : AggrSerializerInstance<surface_patch, list_of_surface_patch> { }
    public class list_of_list_of_surface_patch : List<list_of_surface_patch> { }
    class list_of_list_of_surface_patchSerializer : AggrSerializerAggr<list_of_surface_patch, list_of_surface_patchSerializer, list_of_list_of_surface_patch> { }
    public class set_of_requirement_assigned_item : List<requirement_assigned_item> { }
    class set_of_requirement_assigned_itemSerializer : AggrSerializerSelect<requirement_assigned_item, set_of_requirement_assigned_item> { }
    public class set_of_rule_superseded_item : List<rule_superseded_item> { }
    class set_of_rule_superseded_itemSerializer : AggrSerializerSelect<rule_superseded_item, set_of_rule_superseded_item> { }
    public class set_of_requirement_satisfaction_item : List<requirement_satisfaction_item> { }
    class set_of_requirement_satisfaction_itemSerializer : AggrSerializerSelect<requirement_satisfaction_item, set_of_requirement_satisfaction_item> { }
    public class set_of_shell : List<shell> { }
    class set_of_shellSerializer : AggrSerializerSelect<shell, set_of_shell> { }
    public class list_of_positive_length_measure : List<double> { }
    class list_of_positive_length_measureSerializer : AggrSerializer_double<double, list_of_positive_length_measure> { }
    public class ListOfLOGICAL_VALUE : List<LOGICAL_VALUE> { }
    class ListOfLOGICAL_VALUESerializer : AggrSerializerEnum<LOGICAL_VALUE, ListOfLOGICAL_VALUE> { public ListOfLOGICAL_VALUESerializer() : base(EnumNames.LOGICAL_VALUE_, ifcengine.sdaiLOGICAL) { } };
    //class ListOfLOGICAL_VALUESerializer : AggrSerializerEnum<LOGICAL_VALUE, ListOfLOGICAL_VALUE> { public ListOfLOGICAL_VALUESerializer() : base(EnumNames.LOGICAL_VALUE_, ifcengine.sdaiENUM) { } };
    public class set_of_positive_integer : List<IntValue> { }
    class set_of_positive_integerSerializer : AggrSerializer_IntValue<IntValue, set_of_positive_integer> { }
    public class list_of_set_of_positive_integer : List<set_of_positive_integer> { }
    class list_of_set_of_positive_integerSerializer : AggrSerializerAggr<set_of_positive_integer, set_of_positive_integerSerializer, list_of_set_of_positive_integer> { }
    public class set_of_conical_stepped_hole_transition : List<conical_stepped_hole_transition> { }
    class set_of_conical_stepped_hole_transitionSerializer : AggrSerializerInstance<conical_stepped_hole_transition, set_of_conical_stepped_hole_transition> { }
    public class list_of_point : List<point> { }
    class list_of_pointSerializer : AggrSerializerInstance<point, list_of_point> { }
    public class list_of_blend_radius_variation_type : List<blend_radius_variation_type> { }
    class list_of_blend_radius_variation_typeSerializer : AggrSerializerEnum<blend_radius_variation_type, list_of_blend_radius_variation_type> { public list_of_blend_radius_variation_typeSerializer() : base(EnumNames.blend_radius_variation_type_, ifcengine.sdaiENUM) { } };
    //class list_of_blend_radius_variation_typeSerializer : AggrSerializerEnum<blend_radius_variation_type, list_of_blend_radius_variation_type> { public list_of_blend_radius_variation_typeSerializer() : base(EnumNames.blend_radius_variation_type_, ifcengine.sdaiENUM) { } };
    public class set_of_requirement_source_item : List<requirement_source_item> { }
    class set_of_requirement_source_itemSerializer : AggrSerializerSelect<requirement_source_item, set_of_requirement_source_item> { }
    public class set_of_start_request_item : List<start_request_item> { }
    class set_of_start_request_itemSerializer : AggrSerializerSelect<start_request_item, set_of_start_request_item> { }
    public class bag_of_rectangular_composite_surface : List<rectangular_composite_surface> { }
    class bag_of_rectangular_composite_surfaceSerializer : AggrSerializerInstance<rectangular_composite_surface, bag_of_rectangular_composite_surface> { }
    public class set_of_surface_style_element_select : List<surface_style_element_select> { }
    class set_of_surface_style_element_selectSerializer : AggrSerializerSelect<surface_style_element_select, set_of_surface_style_element_select> { }
    public class set_of_direction_count_select : List<direction_count_select> { }
    class set_of_direction_count_selectSerializer : AggrSerializerSelect<direction_count_select, set_of_direction_count_select> { }
    public class set_of_rendering_properties_select : List<rendering_properties_select> { }
    class set_of_rendering_properties_selectSerializer : AggrSerializerSelect<rendering_properties_select, set_of_rendering_properties_select> { }
    public class set_of_character_glyph_font_usage : List<character_glyph_font_usage> { }
    class set_of_character_glyph_font_usageSerializer : AggrSerializerInstance<character_glyph_font_usage, set_of_character_glyph_font_usage> { }
    public class set_of_text_font_in_family : List<text_font_in_family> { }
    class set_of_text_font_in_familySerializer : AggrSerializerInstance<text_font_in_family, set_of_text_font_in_family> { }
    public class set_of_box_characteristic_select : List<box_characteristic_select> { }
    class set_of_box_characteristic_selectSerializer : AggrSerializerSelect<box_characteristic_select, set_of_box_characteristic_select> { }
    public class set_of_geometric_tolerance : List<geometric_tolerance> { }
    class set_of_geometric_toleranceSerializer : AggrSerializerInstance<geometric_tolerance, set_of_geometric_tolerance> { }
    public class list_of_blend_end_condition_select : List<blend_end_condition_select> { }
    class list_of_blend_end_condition_selectSerializer : AggrSerializerSelect<blend_end_condition_select, list_of_blend_end_condition_select> { }
    public class set_of_trimming_select : List<trimming_select> { }
    class set_of_trimming_selectSerializer : AggrSerializerSelect<trimming_select, set_of_trimming_select> { }
    public class set_of_loop : List<loop> { }
    class set_of_loopSerializer : AggrSerializerInstance<loop, set_of_loop> { }

    //
    // Entities
    // 


    /// <summary>
    /// Provides utility methods to interact with an instnace of measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class measure_with_unit : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public measure_with_unit(SdaiInstance instance) : base(instance) { }
        public measure_with_unit() : base(0) { }

        public static implicit operator measure_with_unit(SdaiInstance instance) => new measure_with_unit(instance);

        /// <summary>
        /// Create new instace of measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        public measure_value_get get_value_component() { return new measure_value_get(m_instance, "value_component", 0); }
        public measure_value_get _value_component { get { return new measure_value_get(m_instance, "value_component", 0); } }
        public measure_value_put put_value_component() { return new measure_value_put(m_instance, "value_component", 0); }

        public unit_get get_unit_component() { return new unit_get(m_instance, "unit_component", 0); }
        public unit_get _unit_component { get { return new unit_get(m_instance, "unit_component", 0); } }
        public unit_put put_unit_component() { return new unit_put(m_instance, "unit_component", 0); }

        protected override TextValue EntityName() { return "measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of absorbed_dose_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class absorbed_dose_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of absorbed_dose_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public absorbed_dose_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public absorbed_dose_measure_with_unit() : base(0) { }

        public static implicit operator absorbed_dose_measure_with_unit(SdaiInstance instance) => new absorbed_dose_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of absorbed_dose_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new absorbed_dose_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "absorbed_dose_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "absorbed_dose_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of derived_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class derived_unit : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of derived_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public derived_unit(SdaiInstance instance) : base(instance) { }
        public derived_unit() : base(0) { }

        public static implicit operator derived_unit(SdaiInstance instance) => new derived_unit(instance);

        /// <summary>
        /// Create new instace of derived_unit and returns object of this class to interact with
        /// </summary>
        public static new derived_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "derived_unit"); Debug.Assert(inst != 0); return inst; }

        public set_of_derived_unit_element get_elements() { return (new set_of_derived_unit_elementSerializer()).FromAttr(m_instance, "elements"); }
        public set_of_derived_unit_element _elements { get { return get_elements(); } }
        public void put_elements(IEnumerable<derived_unit_element> lst) { (new set_of_derived_unit_elementSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        //public void put_elements_untyped(IEnumerable lst) { (new set_of_derived_unit_elementSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }

        protected override TextValue EntityName() { return "derived_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of absorbed_dose_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class absorbed_dose_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of absorbed_dose_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public absorbed_dose_unit(SdaiInstance instance) : base(instance) { }
        public absorbed_dose_unit() : base(0) { }

        public static implicit operator absorbed_dose_unit(SdaiInstance instance) => new absorbed_dose_unit(instance);

        /// <summary>
        /// Create new instace of absorbed_dose_unit and returns object of this class to interact with
        /// </summary>
        public static new absorbed_dose_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "absorbed_dose_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "absorbed_dose_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of property_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class property_definition : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of property_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public property_definition(SdaiInstance instance) : base(instance) { }
        public property_definition() : base(0) { }

        public static implicit operator property_definition(SdaiInstance instance) => new property_definition(instance);

        /// <summary>
        /// Create new instace of property_definition and returns object of this class to interact with
        /// </summary>
        public static new property_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "property_definition"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        public characterized_definition_get get_definition() { return new characterized_definition_get(m_instance, "definition", 0); }
        public characterized_definition_get _definition { get { return new characterized_definition_get(m_instance, "definition", 0); } }
        public characterized_definition_put put_definition() { return new characterized_definition_put(m_instance, "definition", 0); }

        protected override TextValue EntityName() { return "property_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of abstract_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class abstract_variable : property_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of abstract_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public abstract_variable(SdaiInstance instance) : base(instance) { }
        public abstract_variable() : base(0) { }

        public static implicit operator abstract_variable(SdaiInstance instance) => new abstract_variable(instance);

        /// <summary>
        /// Create new instace of abstract_variable and returns object of this class to interact with
        /// </summary>
        public static new abstract_variable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "abstract_variable"); Debug.Assert(inst != 0); return inst; }

        public representation get_used_representation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _used_representation { get { return get_used_representation(); } }
        public void put_used_representation(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, i); }
        public set_of_representation_item get_items() { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_representation_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<representation_item> lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public representation_context get_context_of_items() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, out inst); return new representation_context (inst); }
        public representation_context _context_of_items { get { return get_context_of_items(); } }
        public void put_context_of_items(representation_context inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "abstract_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of acceleration_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class acceleration_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of acceleration_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public acceleration_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public acceleration_measure_with_unit() : base(0) { }

        public static implicit operator acceleration_measure_with_unit(SdaiInstance instance) => new acceleration_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of acceleration_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new acceleration_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "acceleration_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "acceleration_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of acceleration_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class acceleration_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of acceleration_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public acceleration_unit(SdaiInstance instance) : base(instance) { }
        public acceleration_unit() : base(0) { }

        public static implicit operator acceleration_unit(SdaiInstance instance) => new acceleration_unit(instance);

        /// <summary>
        /// Create new instace of acceleration_unit and returns object of this class to interact with
        /// </summary>
        public static new acceleration_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "acceleration_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "acceleration_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action(SdaiInstance instance) : base(instance) { }
        public action() : base(0) { }

        public static implicit operator action(SdaiInstance instance) => new action(instance);

        /// <summary>
        /// Create new instace of action and returns object of this class to interact with
        /// </summary>
        public static new action Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public action_method get_chosen_method() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "chosen_method", ifcengine.sdaiINSTANCE, out inst); return new action_method (inst); }
        public action_method _chosen_method { get { return get_chosen_method(); } }
        public void put_chosen_method(action_method inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "chosen_method", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "action"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_assignment(SdaiInstance instance) : base(instance) { }
        public action_assignment() : base(0) { }

        public static implicit operator action_assignment(SdaiInstance instance) => new action_assignment(instance);

        public action get_assigned_action() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_action", ifcengine.sdaiINSTANCE, out inst); return new action (inst); }
        public action _assigned_action { get { return get_assigned_action(); } }
        public void put_assigned_action(action inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_action", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "action_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_directive
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_directive : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_directive
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_directive(SdaiInstance instance) : base(instance) { }
        public action_directive() : base(0) { }

        public static implicit operator action_directive(SdaiInstance instance) => new action_directive(instance);

        /// <summary>
        /// Create new instace of action_directive and returns object of this class to interact with
        /// </summary>
        public static new action_directive Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_directive"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public TextValue get_analysis() { return get_string("analysis", ifcengine.sdaiSTRING); }
        public TextValue _analysis { get { return get_analysis(); } }
        public void put_analysis(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "analysis", ifcengine.sdaiSTRING, value); }
        public TextValue get_comment() { return get_string("comment", ifcengine.sdaiSTRING); }
        public TextValue _comment { get { return get_comment(); } }
        public void put_comment(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "comment", ifcengine.sdaiSTRING, value); }
        public set_of_versioned_action_request get_requests() { return (new set_of_versioned_action_requestSerializer()).FromAttr(m_instance, "requests"); }
        public set_of_versioned_action_request _requests { get { return get_requests(); } }
        public void put_requests(IEnumerable<versioned_action_request> lst) { (new set_of_versioned_action_requestSerializer()).ToSdaiAggr(lst, m_instance, "requests"); }
        //public void put_requests_untyped(IEnumerable lst) { (new set_of_versioned_action_requestSerializer()).ToSdaiAggr(lst, m_instance, "requests"); }

        protected override TextValue EntityName() { return "action_directive"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_method
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_method : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_method
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_method(SdaiInstance instance) : base(instance) { }
        public action_method() : base(0) { }

        public static implicit operator action_method(SdaiInstance instance) => new action_method(instance);

        /// <summary>
        /// Create new instace of action_method and returns object of this class to interact with
        /// </summary>
        public static new action_method Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_method"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public TextValue get_consequence() { return get_string("consequence", ifcengine.sdaiSTRING); }
        public TextValue _consequence { get { return get_consequence(); } }
        public void put_consequence(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "consequence", ifcengine.sdaiSTRING, value); }
        public TextValue get_purpose() { return get_string("purpose", ifcengine.sdaiSTRING); }
        public TextValue _purpose { get { return get_purpose(); } }
        public void put_purpose(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "action_method"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_method_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_method_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_method_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_method_assignment(SdaiInstance instance) : base(instance) { }
        public action_method_assignment() : base(0) { }

        public static implicit operator action_method_assignment(SdaiInstance instance) => new action_method_assignment(instance);

        public action_method get_assigned_action_method() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_action_method", ifcengine.sdaiINSTANCE, out inst); return new action_method (inst); }
        public action_method _assigned_action_method { get { return get_assigned_action_method(); } }
        public void put_assigned_action_method(action_method inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_action_method", ifcengine.sdaiINSTANCE, i); }
        public action_method_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new action_method_role (inst); }
        public action_method_role _role { get { return get_role(); } }
        public void put_role(action_method_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "action_method_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_method_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_method_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_method_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_method_relationship(SdaiInstance instance) : base(instance) { }
        public action_method_relationship() : base(0) { }

        public static implicit operator action_method_relationship(SdaiInstance instance) => new action_method_relationship(instance);

        /// <summary>
        /// Create new instace of action_method_relationship and returns object of this class to interact with
        /// </summary>
        public static new action_method_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_method_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public action_method get_relating_method() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_method", ifcengine.sdaiINSTANCE, out inst); return new action_method (inst); }
        public action_method _relating_method { get { return get_relating_method(); } }
        public void put_relating_method(action_method inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_method", ifcengine.sdaiINSTANCE, i); }
        public action_method get_related_method() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_method", ifcengine.sdaiINSTANCE, out inst); return new action_method (inst); }
        public action_method _related_method { get { return get_related_method(); } }
        public void put_related_method(action_method inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_method", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "action_method_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_method_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_method_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_method_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_method_role(SdaiInstance instance) : base(instance) { }
        public action_method_role() : base(0) { }

        public static implicit operator action_method_role(SdaiInstance instance) => new action_method_role(instance);

        /// <summary>
        /// Create new instace of action_method_role and returns object of this class to interact with
        /// </summary>
        public static new action_method_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_method_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "action_method_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_property : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_property(SdaiInstance instance) : base(instance) { }
        public action_property() : base(0) { }

        public static implicit operator action_property(SdaiInstance instance) => new action_property(instance);

        /// <summary>
        /// Create new instace of action_property and returns object of this class to interact with
        /// </summary>
        public static new action_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_property"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        public characterized_action_definition_get get_definition() { return new characterized_action_definition_get(m_instance, "definition", 0); }
        public characterized_action_definition_get _definition { get { return new characterized_action_definition_get(m_instance, "definition", 0); } }
        public characterized_action_definition_put put_definition() { return new characterized_action_definition_put(m_instance, "definition", 0); }

        protected override TextValue EntityName() { return "action_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_property_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_property_representation : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_property_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_property_representation(SdaiInstance instance) : base(instance) { }
        public action_property_representation() : base(0) { }

        public static implicit operator action_property_representation(SdaiInstance instance) => new action_property_representation(instance);

        /// <summary>
        /// Create new instace of action_property_representation and returns object of this class to interact with
        /// </summary>
        public static new action_property_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_property_representation"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public action_property get_property() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "property", ifcengine.sdaiINSTANCE, out inst); return new action_property (inst); }
        public action_property _property { get { return get_property(); } }
        public void put_property(action_property inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "property", ifcengine.sdaiINSTANCE, i); }
        public representation get_representation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "representation", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _representation { get { return get_representation(); } }
        public void put_representation(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "representation", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "action_property_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_relationship(SdaiInstance instance) : base(instance) { }
        public action_relationship() : base(0) { }

        public static implicit operator action_relationship(SdaiInstance instance) => new action_relationship(instance);

        /// <summary>
        /// Create new instace of action_relationship and returns object of this class to interact with
        /// </summary>
        public static new action_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public action get_relating_action() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_action", ifcengine.sdaiINSTANCE, out inst); return new action (inst); }
        public action _relating_action { get { return get_relating_action(); } }
        public void put_relating_action(action inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_action", ifcengine.sdaiINSTANCE, i); }
        public action get_related_action() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_action", ifcengine.sdaiINSTANCE, out inst); return new action (inst); }
        public action _related_action { get { return get_related_action(); } }
        public void put_related_action(action inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_action", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "action_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_request_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_request_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_request_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_request_assignment(SdaiInstance instance) : base(instance) { }
        public action_request_assignment() : base(0) { }

        public static implicit operator action_request_assignment(SdaiInstance instance) => new action_request_assignment(instance);

        public versioned_action_request get_assigned_action_request() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_action_request", ifcengine.sdaiINSTANCE, out inst); return new versioned_action_request (inst); }
        public versioned_action_request _assigned_action_request { get { return get_assigned_action_request(); } }
        public void put_assigned_action_request(versioned_action_request inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_action_request", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "action_request_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_request_solution
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_request_solution : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_request_solution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_request_solution(SdaiInstance instance) : base(instance) { }
        public action_request_solution() : base(0) { }

        public static implicit operator action_request_solution(SdaiInstance instance) => new action_request_solution(instance);

        /// <summary>
        /// Create new instace of action_request_solution and returns object of this class to interact with
        /// </summary>
        public static new action_request_solution Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_request_solution"); Debug.Assert(inst != 0); return inst; }

        public action_method get_method() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "method", ifcengine.sdaiINSTANCE, out inst); return new action_method (inst); }
        public action_method _method { get { return get_method(); } }
        public void put_method(action_method inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "method", ifcengine.sdaiINSTANCE, i); }
        public versioned_action_request get_request() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "request", ifcengine.sdaiINSTANCE, out inst); return new versioned_action_request (inst); }
        public versioned_action_request _request { get { return get_request(); } }
        public void put_request(versioned_action_request inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "request", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "action_request_solution"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_request_status
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_request_status : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_request_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_request_status(SdaiInstance instance) : base(instance) { }
        public action_request_status() : base(0) { }

        public static implicit operator action_request_status(SdaiInstance instance) => new action_request_status(instance);

        /// <summary>
        /// Create new instace of action_request_status and returns object of this class to interact with
        /// </summary>
        public static new action_request_status Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_request_status"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_status() { return get_string("status", ifcengine.sdaiSTRING); }
        public TextValue _status { get { return get_status(); } }
        public void put_status(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "status", ifcengine.sdaiSTRING, value); }
        public versioned_action_request get_assigned_request() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_request", ifcengine.sdaiINSTANCE, out inst); return new versioned_action_request (inst); }
        public versioned_action_request _assigned_request { get { return get_assigned_request(); } }
        public void put_assigned_request(versioned_action_request inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_request", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "action_request_status"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of action_status
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class action_status : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of action_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public action_status(SdaiInstance instance) : base(instance) { }
        public action_status() : base(0) { }

        public static implicit operator action_status(SdaiInstance instance) => new action_status(instance);

        /// <summary>
        /// Create new instace of action_status and returns object of this class to interact with
        /// </summary>
        public static new action_status Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "action_status"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_status() { return get_string("status", ifcengine.sdaiSTRING); }
        public TextValue _status { get { return get_status(); } }
        public void put_status(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "status", ifcengine.sdaiSTRING, value); }
        public executed_action get_assigned_action() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_action", ifcengine.sdaiINSTANCE, out inst); return new executed_action (inst); }
        public executed_action _assigned_action { get { return get_assigned_action(); } }
        public void put_assigned_action(executed_action inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_action", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "action_status"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of address
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class address : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public address(SdaiInstance instance) : base(instance) { }
        public address() : base(0) { }

        public static implicit operator address(SdaiInstance instance) => new address(instance);

        /// <summary>
        /// Create new instace of address and returns object of this class to interact with
        /// </summary>
        public static new address Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "address"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_internal_location() { return get_string("internal_location", ifcengine.sdaiSTRING); }
        public TextValue _internal_location { get { return get_internal_location(); } }
        public void put_internal_location(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "internal_location", ifcengine.sdaiSTRING, value); }
        public TextValue get_street_number() { return get_string("street_number", ifcengine.sdaiSTRING); }
        public TextValue _street_number { get { return get_street_number(); } }
        public void put_street_number(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "street_number", ifcengine.sdaiSTRING, value); }
        public TextValue get_street() { return get_string("street", ifcengine.sdaiSTRING); }
        public TextValue _street { get { return get_street(); } }
        public void put_street(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "street", ifcengine.sdaiSTRING, value); }
        public TextValue get_postal_box() { return get_string("postal_box", ifcengine.sdaiSTRING); }
        public TextValue _postal_box { get { return get_postal_box(); } }
        public void put_postal_box(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "postal_box", ifcengine.sdaiSTRING, value); }
        public TextValue get_town() { return get_string("town", ifcengine.sdaiSTRING); }
        public TextValue _town { get { return get_town(); } }
        public void put_town(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "town", ifcengine.sdaiSTRING, value); }
        public TextValue get_region() { return get_string("region", ifcengine.sdaiSTRING); }
        public TextValue _region { get { return get_region(); } }
        public void put_region(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "region", ifcengine.sdaiSTRING, value); }
        public TextValue get_postal_code() { return get_string("postal_code", ifcengine.sdaiSTRING); }
        public TextValue _postal_code { get { return get_postal_code(); } }
        public void put_postal_code(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "postal_code", ifcengine.sdaiSTRING, value); }
        public TextValue get_country() { return get_string("country", ifcengine.sdaiSTRING); }
        public TextValue _country { get { return get_country(); } }
        public void put_country(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "country", ifcengine.sdaiSTRING, value); }
        public TextValue get_facsimile_number() { return get_string("facsimile_number", ifcengine.sdaiSTRING); }
        public TextValue _facsimile_number { get { return get_facsimile_number(); } }
        public void put_facsimile_number(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "facsimile_number", ifcengine.sdaiSTRING, value); }
        public TextValue get_telephone_number() { return get_string("telephone_number", ifcengine.sdaiSTRING); }
        public TextValue _telephone_number { get { return get_telephone_number(); } }
        public void put_telephone_number(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "telephone_number", ifcengine.sdaiSTRING, value); }
        public TextValue get_electronic_mail_address() { return get_string("electronic_mail_address", ifcengine.sdaiSTRING); }
        public TextValue _electronic_mail_address { get { return get_electronic_mail_address(); } }
        public void put_electronic_mail_address(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "electronic_mail_address", ifcengine.sdaiSTRING, value); }
        public TextValue get_telex_number() { return get_string("telex_number", ifcengine.sdaiSTRING); }
        public TextValue _telex_number { get { return get_telex_number(); } }
        public void put_telex_number(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "telex_number", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "address"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation(SdaiInstance instance) : base(instance) { }
        public representation() : base(0) { }

        public static implicit operator representation(SdaiInstance instance) => new representation(instance);

        /// <summary>
        /// Create new instace of representation and returns object of this class to interact with
        /// </summary>
        public static new representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public set_of_representation_item get_items() { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_representation_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<representation_item> lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public representation_context get_context_of_items() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, out inst); return new representation_context (inst); }
        public representation_context _context_of_items { get { return get_context_of_items(); } }
        public void put_context_of_items(representation_context inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_representation(SdaiInstance instance) : base(instance) { }
        public shape_representation() : base(0) { }

        public static implicit operator shape_representation(SdaiInstance instance) => new shape_representation(instance);

        /// <summary>
        /// Create new instace of shape_representation and returns object of this class to interact with
        /// </summary>
        public static new shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of advanced_brep_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class advanced_brep_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of advanced_brep_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public advanced_brep_shape_representation(SdaiInstance instance) : base(instance) { }
        public advanced_brep_shape_representation() : base(0) { }

        public static implicit operator advanced_brep_shape_representation(SdaiInstance instance) => new advanced_brep_shape_representation(instance);

        /// <summary>
        /// Create new instace of advanced_brep_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new advanced_brep_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "advanced_brep_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "advanced_brep_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_item : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_item(SdaiInstance instance) : base(instance) { }
        public representation_item() : base(0) { }

        public static implicit operator representation_item(SdaiInstance instance) => new representation_item(instance);

        /// <summary>
        /// Create new instace of representation_item and returns object of this class to interact with
        /// </summary>
        public static new representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_item"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of topological_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class topological_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of topological_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public topological_representation_item(SdaiInstance instance) : base(instance) { }
        public topological_representation_item() : base(0) { }

        public static implicit operator topological_representation_item(SdaiInstance instance) => new topological_representation_item(instance);

        /// <summary>
        /// Create new instace of topological_representation_item and returns object of this class to interact with
        /// </summary>
        public static new topological_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "topological_representation_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "topological_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face : topological_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face(SdaiInstance instance) : base(instance) { }
        public face() : base(0) { }

        public static implicit operator face(SdaiInstance instance) => new face(instance);

        /// <summary>
        /// Create new instace of face and returns object of this class to interact with
        /// </summary>
        public static new face Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face"); Debug.Assert(inst != 0); return inst; }

        public set_of_face_bound get_bounds() { return (new set_of_face_boundSerializer()).FromAttr(m_instance, "bounds"); }
        public set_of_face_bound _bounds { get { return get_bounds(); } }
        public void put_bounds(IEnumerable<face_bound> lst) { (new set_of_face_boundSerializer()).ToSdaiAggr(lst, m_instance, "bounds"); }
        //public void put_bounds_untyped(IEnumerable lst) { (new set_of_face_boundSerializer()).ToSdaiAggr(lst, m_instance, "bounds"); }

        protected override TextValue EntityName() { return "face"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_surface : face
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_surface(SdaiInstance instance) : base(instance) { }
        public face_surface() : base(0) { }

        public static implicit operator face_surface(SdaiInstance instance) => new face_surface(instance);

        /// <summary>
        /// Create new instace of face_surface and returns object of this class to interact with
        /// </summary>
        public static new face_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_surface"); Debug.Assert(inst != 0); return inst; }

        public surface get_face_geometry() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "face_geometry", ifcengine.sdaiINSTANCE, out inst); return new surface (inst); }
        public surface _face_geometry { get { return get_face_geometry(); } }
        public void put_face_geometry(surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "face_geometry", ifcengine.sdaiINSTANCE, i); }
        public bool? get_same_sense() { return get_bool("same_sense", ifcengine.sdaiBOOLEAN);}
        public bool? _same_sense { get { return get_same_sense(); } }
        public void put_same_sense(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "same_sense", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "face_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of advanced_face
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class advanced_face : face_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of advanced_face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public advanced_face(SdaiInstance instance) : base(instance) { }
        public advanced_face() : base(0) { }

        public static implicit operator advanced_face(SdaiInstance instance) => new advanced_face(instance);

        /// <summary>
        /// Create new instace of advanced_face and returns object of this class to interact with
        /// </summary>
        public static new advanced_face Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "advanced_face"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "advanced_face"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of alternate_product_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class alternate_product_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of alternate_product_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public alternate_product_relationship(SdaiInstance instance) : base(instance) { }
        public alternate_product_relationship() : base(0) { }

        public static implicit operator alternate_product_relationship(SdaiInstance instance) => new alternate_product_relationship(instance);

        /// <summary>
        /// Create new instace of alternate_product_relationship and returns object of this class to interact with
        /// </summary>
        public static new alternate_product_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "alternate_product_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_definition() { return get_string("definition", ifcengine.sdaiSTRING); }
        public TextValue _definition { get { return get_definition(); } }
        public void put_definition(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "definition", ifcengine.sdaiSTRING, value); }
        public product get_alternate() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "alternate", ifcengine.sdaiINSTANCE, out inst); return new product (inst); }
        public product _alternate { get { return get_alternate(); } }
        public void put_alternate(product inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "alternate", ifcengine.sdaiINSTANCE, i); }
        public product get_base_() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_", ifcengine.sdaiINSTANCE, out inst); return new product (inst); }
        public product _base_ { get { return get_base_(); } }
        public void put_base_(product inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "base_", ifcengine.sdaiINSTANCE, i); }
        public TextValue get_basis() { return get_string("basis", ifcengine.sdaiSTRING); }
        public TextValue _basis { get { return get_basis(); } }
        public void put_basis(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "basis", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "alternate_product_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of amount_of_substance_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class amount_of_substance_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of amount_of_substance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public amount_of_substance_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public amount_of_substance_measure_with_unit() : base(0) { }

        public static implicit operator amount_of_substance_measure_with_unit(SdaiInstance instance) => new amount_of_substance_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of amount_of_substance_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new amount_of_substance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "amount_of_substance_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "amount_of_substance_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of named_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class named_unit : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of named_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public named_unit(SdaiInstance instance) : base(instance) { }
        public named_unit() : base(0) { }

        public static implicit operator named_unit(SdaiInstance instance) => new named_unit(instance);

        /// <summary>
        /// Create new instace of named_unit and returns object of this class to interact with
        /// </summary>
        public static new named_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "named_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "named_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of amount_of_substance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class amount_of_substance_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of amount_of_substance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public amount_of_substance_unit(SdaiInstance instance) : base(instance) { }
        public amount_of_substance_unit() : base(0) { }

        public static implicit operator amount_of_substance_unit(SdaiInstance instance) => new amount_of_substance_unit(instance);

        /// <summary>
        /// Create new instace of amount_of_substance_unit and returns object of this class to interact with
        /// </summary>
        public static new amount_of_substance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "amount_of_substance_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "amount_of_substance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_item_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_item_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_item_relationship(SdaiInstance instance) : base(instance) { }
        public representation_item_relationship() : base(0) { }

        public static implicit operator representation_item_relationship(SdaiInstance instance) => new representation_item_relationship(instance);

        /// <summary>
        /// Create new instace of representation_item_relationship and returns object of this class to interact with
        /// </summary>
        public static new representation_item_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_item_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public representation_item get_relating_representation_item() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_representation_item", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _relating_representation_item { get { return get_relating_representation_item(); } }
        public void put_relating_representation_item(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_representation_item", ifcengine.sdaiINSTANCE, i); }
        public representation_item get_related_representation_item() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_representation_item", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _related_representation_item { get { return get_related_representation_item(); } }
        public void put_related_representation_item(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_representation_item", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "representation_item_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of angle_direction_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class angle_direction_reference : representation_item_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of angle_direction_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public angle_direction_reference(SdaiInstance instance) : base(instance) { }
        public angle_direction_reference() : base(0) { }

        public static implicit operator angle_direction_reference(SdaiInstance instance) => new angle_direction_reference(instance);

        /// <summary>
        /// Create new instace of angle_direction_reference and returns object of this class to interact with
        /// </summary>
        public static new angle_direction_reference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "angle_direction_reference"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "angle_direction_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_representation_item(SdaiInstance instance) : base(instance) { }
        public geometric_representation_item() : base(0) { }

        public static implicit operator geometric_representation_item(SdaiInstance instance) => new geometric_representation_item(instance);

        /// <summary>
        /// Create new instace of geometric_representation_item and returns object of this class to interact with
        /// </summary>
        public static new geometric_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_representation_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "geometric_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_callout : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_callout(SdaiInstance instance) : base(instance) { }
        public draughting_callout() : base(0) { }

        public static implicit operator draughting_callout(SdaiInstance instance) => new draughting_callout(instance);

        /// <summary>
        /// Create new instace of draughting_callout and returns object of this class to interact with
        /// </summary>
        public static new draughting_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_callout"); Debug.Assert(inst != 0); return inst; }

        public set_of_draughting_callout_element get_contents() { return (new set_of_draughting_callout_elementSerializer()).FromAttr(m_instance, "contents"); }
        public set_of_draughting_callout_element _contents { get { return get_contents(); } }
        public void put_contents(IEnumerable<draughting_callout_element> lst) { (new set_of_draughting_callout_elementSerializer()).ToSdaiAggr(lst, m_instance, "contents"); }
        //public void put_contents_untyped(IEnumerable lst) { (new set_of_draughting_callout_elementSerializer()).ToSdaiAggr(lst, m_instance, "contents"); }

        protected override TextValue EntityName() { return "draughting_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_curve_directed_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_curve_directed_callout : draughting_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_curve_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_curve_directed_callout(SdaiInstance instance) : base(instance) { }
        public dimension_curve_directed_callout() : base(0) { }

        public static implicit operator dimension_curve_directed_callout(SdaiInstance instance) => new dimension_curve_directed_callout(instance);

        /// <summary>
        /// Create new instace of dimension_curve_directed_callout and returns object of this class to interact with
        /// </summary>
        public static new dimension_curve_directed_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_curve_directed_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "dimension_curve_directed_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of angular_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class angular_dimension : dimension_curve_directed_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of angular_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public angular_dimension(SdaiInstance instance) : base(instance) { }
        public angular_dimension() : base(0) { }

        public static implicit operator angular_dimension(SdaiInstance instance) => new angular_dimension(instance);

        /// <summary>
        /// Create new instace of angular_dimension and returns object of this class to interact with
        /// </summary>
        public static new angular_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "angular_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "angular_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_aspect_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_aspect_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_aspect_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_aspect_relationship(SdaiInstance instance) : base(instance) { }
        public shape_aspect_relationship() : base(0) { }

        public static implicit operator shape_aspect_relationship(SdaiInstance instance) => new shape_aspect_relationship(instance);

        /// <summary>
        /// Create new instace of shape_aspect_relationship and returns object of this class to interact with
        /// </summary>
        public static new shape_aspect_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_aspect_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public shape_aspect get_relating_shape_aspect() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_shape_aspect", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect (inst); }
        public shape_aspect _relating_shape_aspect { get { return get_relating_shape_aspect(); } }
        public void put_relating_shape_aspect(shape_aspect inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_shape_aspect", ifcengine.sdaiINSTANCE, i); }
        public shape_aspect get_related_shape_aspect() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_shape_aspect", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect (inst); }
        public shape_aspect _related_shape_aspect { get { return get_related_shape_aspect(); } }
        public void put_related_shape_aspect(shape_aspect inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_shape_aspect", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "shape_aspect_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_location
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_location : shape_aspect_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_location(SdaiInstance instance) : base(instance) { }
        public dimensional_location() : base(0) { }

        public static implicit operator dimensional_location(SdaiInstance instance) => new dimensional_location(instance);

        /// <summary>
        /// Create new instace of dimensional_location and returns object of this class to interact with
        /// </summary>
        public static new dimensional_location Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_location"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "dimensional_location"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of angular_location
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class angular_location : dimensional_location
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of angular_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public angular_location(SdaiInstance instance) : base(instance) { }
        public angular_location() : base(0) { }

        public static implicit operator angular_location(SdaiInstance instance) => new angular_location(instance);

        /// <summary>
        /// Create new instace of angular_location and returns object of this class to interact with
        /// </summary>
        public static new angular_location Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "angular_location"); Debug.Assert(inst != 0); return inst; }

        public angle_relator? get_angle_selection() { var str = get_string("angle_selection", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.angle_relator_); return EnumValue<angle_relator>.FromIndex(ind); }
        public angle_relator? _angle_selection { get { return get_angle_selection(); } }
        public void put_angle_selection(angle_relator value) { var str = EnumString<angle_relator>.FromValue(value, EnumNames.angle_relator_); ifcengine.sdaiPutAttrBN(m_instance, "angle_selection", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "angular_location"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_size
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_size : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_size(SdaiInstance instance) : base(instance) { }
        public dimensional_size() : base(0) { }

        public static implicit operator dimensional_size(SdaiInstance instance) => new dimensional_size(instance);

        /// <summary>
        /// Create new instace of dimensional_size and returns object of this class to interact with
        /// </summary>
        public static new dimensional_size Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_size"); Debug.Assert(inst != 0); return inst; }

        public shape_aspect get_applies_to() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "applies_to", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect (inst); }
        public shape_aspect _applies_to { get { return get_applies_to(); } }
        public void put_applies_to(shape_aspect inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "applies_to", ifcengine.sdaiINSTANCE, i); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "dimensional_size"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of angular_size
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class angular_size : dimensional_size
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of angular_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public angular_size(SdaiInstance instance) : base(instance) { }
        public angular_size() : base(0) { }

        public static implicit operator angular_size(SdaiInstance instance) => new angular_size(instance);

        /// <summary>
        /// Create new instace of angular_size and returns object of this class to interact with
        /// </summary>
        public static new angular_size Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "angular_size"); Debug.Assert(inst != 0); return inst; }

        public angle_relator? get_angle_selection() { var str = get_string("angle_selection", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.angle_relator_); return EnumValue<angle_relator>.FromIndex(ind); }
        public angle_relator? _angle_selection { get { return get_angle_selection(); } }
        public void put_angle_selection(angle_relator value) { var str = EnumString<angle_relator>.FromValue(value, EnumNames.angle_relator_); ifcengine.sdaiPutAttrBN(m_instance, "angle_selection", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "angular_size"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_tolerance : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_tolerance(SdaiInstance instance) : base(instance) { }
        public geometric_tolerance() : base(0) { }

        public static implicit operator geometric_tolerance(SdaiInstance instance) => new geometric_tolerance(instance);

        /// <summary>
        /// Create new instace of geometric_tolerance and returns object of this class to interact with
        /// </summary>
        public static new geometric_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_tolerance"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public measure_with_unit get_magnitude() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "magnitude", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _magnitude { get { return get_magnitude(); } }
        public void put_magnitude(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "magnitude", ifcengine.sdaiINSTANCE, i); }
        public shape_aspect get_toleranced_shape_aspect() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "toleranced_shape_aspect", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect (inst); }
        public shape_aspect _toleranced_shape_aspect { get { return get_toleranced_shape_aspect(); } }
        public void put_toleranced_shape_aspect(shape_aspect inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "toleranced_shape_aspect", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "geometric_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_tolerance_with_datum_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_tolerance_with_datum_reference : geometric_tolerance
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_tolerance_with_datum_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_tolerance_with_datum_reference(SdaiInstance instance) : base(instance) { }
        public geometric_tolerance_with_datum_reference() : base(0) { }

        public static implicit operator geometric_tolerance_with_datum_reference(SdaiInstance instance) => new geometric_tolerance_with_datum_reference(instance);

        /// <summary>
        /// Create new instace of geometric_tolerance_with_datum_reference and returns object of this class to interact with
        /// </summary>
        public static new geometric_tolerance_with_datum_reference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_tolerance_with_datum_reference"); Debug.Assert(inst != 0); return inst; }

        public set_of_datum_reference get_datum_system() { return (new set_of_datum_referenceSerializer()).FromAttr(m_instance, "datum_system"); }
        public set_of_datum_reference _datum_system { get { return get_datum_system(); } }
        public void put_datum_system(IEnumerable<datum_reference> lst) { (new set_of_datum_referenceSerializer()).ToSdaiAggr(lst, m_instance, "datum_system"); }
        //public void put_datum_system_untyped(IEnumerable lst) { (new set_of_datum_referenceSerializer()).ToSdaiAggr(lst, m_instance, "datum_system"); }

        protected override TextValue EntityName() { return "geometric_tolerance_with_datum_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of angularity_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class angularity_tolerance : geometric_tolerance_with_datum_reference
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of angularity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public angularity_tolerance(SdaiInstance instance) : base(instance) { }
        public angularity_tolerance() : base(0) { }

        public static implicit operator angularity_tolerance(SdaiInstance instance) => new angularity_tolerance(instance);

        /// <summary>
        /// Create new instace of angularity_tolerance and returns object of this class to interact with
        /// </summary>
        public static new angularity_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "angularity_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "angularity_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of styled_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class styled_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public styled_item(SdaiInstance instance) : base(instance) { }
        public styled_item() : base(0) { }

        public static implicit operator styled_item(SdaiInstance instance) => new styled_item(instance);

        /// <summary>
        /// Create new instace of styled_item and returns object of this class to interact with
        /// </summary>
        public static new styled_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "styled_item"); Debug.Assert(inst != 0); return inst; }

        public set_of_presentation_style_assignment get_styles() { return (new set_of_presentation_style_assignmentSerializer()).FromAttr(m_instance, "styles"); }
        public set_of_presentation_style_assignment _styles { get { return get_styles(); } }
        public void put_styles(IEnumerable<presentation_style_assignment> lst) { (new set_of_presentation_style_assignmentSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }
        //public void put_styles_untyped(IEnumerable lst) { (new set_of_presentation_style_assignmentSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }
        public representation_item get_item() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "item", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _item { get { return get_item(); } }
        public void put_item(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "item", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "styled_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_occurrence : styled_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_occurrence() : base(0) { }

        public static implicit operator annotation_occurrence(SdaiInstance instance) => new annotation_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "annotation_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_curve_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_curve_occurrence : annotation_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_curve_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_curve_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_curve_occurrence() : base(0) { }

        public static implicit operator annotation_curve_occurrence(SdaiInstance instance) => new annotation_curve_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_curve_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_curve_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_curve_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "annotation_curve_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_fill_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_fill_area : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_fill_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_fill_area(SdaiInstance instance) : base(instance) { }
        public annotation_fill_area() : base(0) { }

        public static implicit operator annotation_fill_area(SdaiInstance instance) => new annotation_fill_area(instance);

        /// <summary>
        /// Create new instace of annotation_fill_area and returns object of this class to interact with
        /// </summary>
        public static new annotation_fill_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_fill_area"); Debug.Assert(inst != 0); return inst; }

        public set_of_curve get_boundaries() { return (new set_of_curveSerializer()).FromAttr(m_instance, "boundaries"); }
        public set_of_curve _boundaries { get { return get_boundaries(); } }
        public void put_boundaries(IEnumerable<curve> lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }
        //public void put_boundaries_untyped(IEnumerable lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }

        protected override TextValue EntityName() { return "annotation_fill_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_fill_area_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_fill_area_occurrence : annotation_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_fill_area_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_fill_area_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_fill_area_occurrence() : base(0) { }

        public static implicit operator annotation_fill_area_occurrence(SdaiInstance instance) => new annotation_fill_area_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_fill_area_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_fill_area_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_fill_area_occurrence"); Debug.Assert(inst != 0); return inst; }

        public point get_fill_style_target() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fill_style_target", ifcengine.sdaiINSTANCE, out inst); return new point (inst); }
        public point _fill_style_target { get { return get_fill_style_target(); } }
        public void put_fill_style_target(point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "fill_style_target", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "annotation_fill_area_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_occurrence_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_occurrence_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_occurrence_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_occurrence_relationship(SdaiInstance instance) : base(instance) { }
        public annotation_occurrence_relationship() : base(0) { }

        public static implicit operator annotation_occurrence_relationship(SdaiInstance instance) => new annotation_occurrence_relationship(instance);

        /// <summary>
        /// Create new instace of annotation_occurrence_relationship and returns object of this class to interact with
        /// </summary>
        public static new annotation_occurrence_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_occurrence_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public annotation_occurrence get_relating_annotation_occurrence() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_annotation_occurrence", ifcengine.sdaiINSTANCE, out inst); return new annotation_occurrence (inst); }
        public annotation_occurrence _relating_annotation_occurrence { get { return get_relating_annotation_occurrence(); } }
        public void put_relating_annotation_occurrence(annotation_occurrence inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_annotation_occurrence", ifcengine.sdaiINSTANCE, i); }
        public annotation_occurrence get_related_annotation_occurrence() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_annotation_occurrence", ifcengine.sdaiINSTANCE, out inst); return new annotation_occurrence (inst); }
        public annotation_occurrence _related_annotation_occurrence { get { return get_related_annotation_occurrence(); } }
        public void put_related_annotation_occurrence(annotation_occurrence inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_annotation_occurrence", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "annotation_occurrence_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_occurrence_associativity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_occurrence_associativity : annotation_occurrence_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_occurrence_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_occurrence_associativity(SdaiInstance instance) : base(instance) { }
        public annotation_occurrence_associativity() : base(0) { }

        public static implicit operator annotation_occurrence_associativity(SdaiInstance instance) => new annotation_occurrence_associativity(instance);

        /// <summary>
        /// Create new instace of annotation_occurrence_associativity and returns object of this class to interact with
        /// </summary>
        public static new annotation_occurrence_associativity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_occurrence_associativity"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "annotation_occurrence_associativity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_plane
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_plane : annotation_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_plane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_plane(SdaiInstance instance) : base(instance) { }
        public annotation_plane() : base(0) { }

        public static implicit operator annotation_plane(SdaiInstance instance) => new annotation_plane(instance);

        /// <summary>
        /// Create new instace of annotation_plane and returns object of this class to interact with
        /// </summary>
        public static new annotation_plane Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_plane"); Debug.Assert(inst != 0); return inst; }

        public set_of_annotation_plane_element get_elements() { return (new set_of_annotation_plane_elementSerializer()).FromAttr(m_instance, "elements"); }
        public set_of_annotation_plane_element _elements { get { return get_elements(); } }
        public void put_elements(IEnumerable<annotation_plane_element> lst) { (new set_of_annotation_plane_elementSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        //public void put_elements_untyped(IEnumerable lst) { (new set_of_annotation_plane_elementSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }

        protected override TextValue EntityName() { return "annotation_plane"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_symbol_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_symbol_occurrence : annotation_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_symbol_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_symbol_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_symbol_occurrence() : base(0) { }

        public static implicit operator annotation_symbol_occurrence(SdaiInstance instance) => new annotation_symbol_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_symbol_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_symbol_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_symbol_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "annotation_symbol_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_subfigure_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_subfigure_occurrence : annotation_symbol_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_subfigure_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_subfigure_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_subfigure_occurrence() : base(0) { }

        public static implicit operator annotation_subfigure_occurrence(SdaiInstance instance) => new annotation_subfigure_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_subfigure_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_subfigure_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_subfigure_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "annotation_subfigure_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mapped_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mapped_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mapped_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mapped_item(SdaiInstance instance) : base(instance) { }
        public mapped_item() : base(0) { }

        public static implicit operator mapped_item(SdaiInstance instance) => new mapped_item(instance);

        /// <summary>
        /// Create new instace of mapped_item and returns object of this class to interact with
        /// </summary>
        public static new mapped_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mapped_item"); Debug.Assert(inst != 0); return inst; }

        public representation_map get_mapping_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, out inst); return new representation_map (inst); }
        public representation_map _mapping_source { get { return get_mapping_source(); } }
        public void put_mapping_source(representation_map inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, i); }
        public representation_item get_mapping_target() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _mapping_target { get { return get_mapping_target(); } }
        public void put_mapping_target(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "mapped_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_symbol : mapped_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_symbol(SdaiInstance instance) : base(instance) { }
        public annotation_symbol() : base(0) { }

        public static implicit operator annotation_symbol(SdaiInstance instance) => new annotation_symbol(instance);

        /// <summary>
        /// Create new instace of annotation_symbol and returns object of this class to interact with
        /// </summary>
        public static new annotation_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "annotation_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_text
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_text : mapped_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_text
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_text(SdaiInstance instance) : base(instance) { }
        public annotation_text() : base(0) { }

        public static implicit operator annotation_text(SdaiInstance instance) => new annotation_text(instance);

        /// <summary>
        /// Create new instace of annotation_text and returns object of this class to interact with
        /// </summary>
        public static new annotation_text Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_text"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "annotation_text"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_text_character
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_text_character : mapped_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_text_character
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_text_character(SdaiInstance instance) : base(instance) { }
        public annotation_text_character() : base(0) { }

        public static implicit operator annotation_text_character(SdaiInstance instance) => new annotation_text_character(instance);

        /// <summary>
        /// Create new instace of annotation_text_character and returns object of this class to interact with
        /// </summary>
        public static new annotation_text_character Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_text_character"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_alignment() { return get_string("alignment", ifcengine.sdaiSTRING); }
        public TextValue _alignment { get { return get_alignment(); } }
        public void put_alignment(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "alignment", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "annotation_text_character"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of annotation_text_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class annotation_text_occurrence : annotation_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of annotation_text_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public annotation_text_occurrence(SdaiInstance instance) : base(instance) { }
        public annotation_text_occurrence() : base(0) { }

        public static implicit operator annotation_text_occurrence(SdaiInstance instance) => new annotation_text_occurrence(instance);

        /// <summary>
        /// Create new instace of annotation_text_occurrence and returns object of this class to interact with
        /// </summary>
        public static new annotation_text_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "annotation_text_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "annotation_text_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_aspect
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_aspect : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_aspect(SdaiInstance instance) : base(instance) { }
        public shape_aspect() : base(0) { }

        public static implicit operator shape_aspect(SdaiInstance instance) => new shape_aspect(instance);

        /// <summary>
        /// Create new instace of shape_aspect and returns object of this class to interact with
        /// </summary>
        public static new shape_aspect Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_aspect"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product_definition_shape get_of_shape() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "of_shape", ifcengine.sdaiINSTANCE, out inst); return new product_definition_shape (inst); }
        public product_definition_shape _of_shape { get { return get_of_shape(); } }
        public void put_of_shape(product_definition_shape inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "of_shape", ifcengine.sdaiINSTANCE, i); }
        public LOGICAL_VALUE? get_product_definitional() { var str = get_string("product_definitional", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _product_definitional { get { return get_product_definitional(); } }
        public void put_product_definitional(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "product_definitional", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "shape_aspect"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of derived_shape_aspect
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class derived_shape_aspect : shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of derived_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public derived_shape_aspect(SdaiInstance instance) : base(instance) { }
        public derived_shape_aspect() : base(0) { }

        public static implicit operator derived_shape_aspect(SdaiInstance instance) => new derived_shape_aspect(instance);

        /// <summary>
        /// Create new instace of derived_shape_aspect and returns object of this class to interact with
        /// </summary>
        public static new derived_shape_aspect Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "derived_shape_aspect"); Debug.Assert(inst != 0); return inst; }

        public set_of_shape_aspect_relationship get_deriving_relationships() { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "deriving_relationships"); }
        public set_of_shape_aspect_relationship _deriving_relationships { get { return get_deriving_relationships(); } }

        protected override TextValue EntityName() { return "derived_shape_aspect"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of apex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class apex : derived_shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of apex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public apex(SdaiInstance instance) : base(instance) { }
        public apex() : base(0) { }

        public static implicit operator apex(SdaiInstance instance) => new apex(instance);

        /// <summary>
        /// Create new instace of apex and returns object of this class to interact with
        /// </summary>
        public static new apex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "apex"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "apex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of application_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class application_context : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of application_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public application_context(SdaiInstance instance) : base(instance) { }
        public application_context() : base(0) { }

        public static implicit operator application_context(SdaiInstance instance) => new application_context(instance);

        /// <summary>
        /// Create new instace of application_context and returns object of this class to interact with
        /// </summary>
        public static new application_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "application_context"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_application() { return get_string("application", ifcengine.sdaiSTRING); }
        public TextValue _application { get { return get_application(); } }
        public void put_application(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "application", ifcengine.sdaiSTRING, value); }
        public set_of_application_context_element get_context_elements() { return (new set_of_application_context_elementSerializer()).FromAttr(m_instance, "context_elements"); }
        public set_of_application_context_element _context_elements { get { return get_context_elements(); } }

        protected override TextValue EntityName() { return "application_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of application_context_element
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class application_context_element : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of application_context_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public application_context_element(SdaiInstance instance) : base(instance) { }
        public application_context_element() : base(0) { }

        public static implicit operator application_context_element(SdaiInstance instance) => new application_context_element(instance);

        /// <summary>
        /// Create new instace of application_context_element and returns object of this class to interact with
        /// </summary>
        public static new application_context_element Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "application_context_element"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public application_context get_frame_of_reference() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, out inst); return new application_context (inst); }
        public application_context _frame_of_reference { get { return get_frame_of_reference(); } }
        public void put_frame_of_reference(application_context inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "application_context_element"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of application_protocol_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class application_protocol_definition : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of application_protocol_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public application_protocol_definition(SdaiInstance instance) : base(instance) { }
        public application_protocol_definition() : base(0) { }

        public static implicit operator application_protocol_definition(SdaiInstance instance) => new application_protocol_definition(instance);

        /// <summary>
        /// Create new instace of application_protocol_definition and returns object of this class to interact with
        /// </summary>
        public static new application_protocol_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "application_protocol_definition"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_status() { return get_string("status", ifcengine.sdaiSTRING); }
        public TextValue _status { get { return get_status(); } }
        public void put_status(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "status", ifcengine.sdaiSTRING, value); }
        public TextValue get_application_interpreted_model_schema_name() { return get_string("application_interpreted_model_schema_name", ifcengine.sdaiSTRING); }
        public TextValue _application_interpreted_model_schema_name { get { return get_application_interpreted_model_schema_name(); } }
        public void put_application_interpreted_model_schema_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "application_interpreted_model_schema_name", ifcengine.sdaiSTRING, value); }
        public IntValue? get_application_protocol_year() { return get_IntValue("application_protocol_year", ifcengine.sdaiINTEGER);}
        public IntValue? _application_protocol_year { get { return get_application_protocol_year(); } }
        public void put_application_protocol_year(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "application_protocol_year", ifcengine.sdaiINTEGER, ref value); }
        public application_context get_application() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "application", ifcengine.sdaiINSTANCE, out inst); return new application_context (inst); }
        public application_context _application { get { return get_application(); } }
        public void put_application(application_context inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "application", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "application_protocol_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_action_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_action_assignment : action_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_action_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_action_assignment(SdaiInstance instance) : base(instance) { }
        public applied_action_assignment() : base(0) { }

        public static implicit operator applied_action_assignment(SdaiInstance instance) => new applied_action_assignment(instance);

        /// <summary>
        /// Create new instace of applied_action_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_action_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_action_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_action_items get_items() { return (new set_of_action_itemsSerializer()).FromAttr(m_instance, "items"); }
        public set_of_action_items _items { get { return get_items(); } }
        public void put_items(IEnumerable<action_items> lst) { (new set_of_action_itemsSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_action_itemsSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_action_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_action_method_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_action_method_assignment : action_method_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_action_method_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_action_method_assignment(SdaiInstance instance) : base(instance) { }
        public applied_action_method_assignment() : base(0) { }

        public static implicit operator applied_action_method_assignment(SdaiInstance instance) => new applied_action_method_assignment(instance);

        /// <summary>
        /// Create new instace of applied_action_method_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_action_method_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_action_method_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_action_method_items get_items() { return (new set_of_action_method_itemsSerializer()).FromAttr(m_instance, "items"); }
        public set_of_action_method_items _items { get { return get_items(); } }
        public void put_items(IEnumerable<action_method_items> lst) { (new set_of_action_method_itemsSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_action_method_itemsSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_action_method_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_action_request_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_action_request_assignment : action_request_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_action_request_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_action_request_assignment(SdaiInstance instance) : base(instance) { }
        public applied_action_request_assignment() : base(0) { }

        public static implicit operator applied_action_request_assignment(SdaiInstance instance) => new applied_action_request_assignment(instance);

        /// <summary>
        /// Create new instace of applied_action_request_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_action_request_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_action_request_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_action_request_item get_items() { return (new set_of_action_request_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_action_request_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<action_request_item> lst) { (new set_of_action_request_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_action_request_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_action_request_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_assignment(SdaiInstance instance) : base(instance) { }
        public approval_assignment() : base(0) { }

        public static implicit operator approval_assignment(SdaiInstance instance) => new approval_assignment(instance);

        public approval get_assigned_approval() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_approval", ifcengine.sdaiINSTANCE, out inst); return new approval (inst); }
        public approval _assigned_approval { get { return get_assigned_approval(); } }
        public void put_assigned_approval(approval inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_approval", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "approval_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_approval_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_approval_assignment : approval_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_approval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_approval_assignment(SdaiInstance instance) : base(instance) { }
        public applied_approval_assignment() : base(0) { }

        public static implicit operator applied_approval_assignment(SdaiInstance instance) => new applied_approval_assignment(instance);

        /// <summary>
        /// Create new instace of applied_approval_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_approval_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_approval_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_approval_item get_items() { return (new set_of_approval_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_approval_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<approval_item> lst) { (new set_of_approval_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_approval_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_approval_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of attribute_classification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class attribute_classification_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of attribute_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public attribute_classification_assignment(SdaiInstance instance) : base(instance) { }
        public attribute_classification_assignment() : base(0) { }

        public static implicit operator attribute_classification_assignment(SdaiInstance instance) => new attribute_classification_assignment(instance);

        public group get_assigned_class() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_class", ifcengine.sdaiINSTANCE, out inst); return new group (inst); }
        public group _assigned_class { get { return get_assigned_class(); } }
        public void put_assigned_class(group inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_class", ifcengine.sdaiINSTANCE, i); }
        public TextValue get_attribute_name() { return get_string("attribute_name", ifcengine.sdaiSTRING); }
        public TextValue _attribute_name { get { return get_attribute_name(); } }
        public void put_attribute_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "attribute_name", ifcengine.sdaiSTRING, value); }
        public classification_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new classification_role (inst); }
        public classification_role _role { get { return get_role(); } }
        public void put_role(classification_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "attribute_classification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_attribute_classification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_attribute_classification_assignment : attribute_classification_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_attribute_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_attribute_classification_assignment(SdaiInstance instance) : base(instance) { }
        public applied_attribute_classification_assignment() : base(0) { }

        public static implicit operator applied_attribute_classification_assignment(SdaiInstance instance) => new applied_attribute_classification_assignment(instance);

        /// <summary>
        /// Create new instace of applied_attribute_classification_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_attribute_classification_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_attribute_classification_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_attribute_classification_item get_items() { return (new set_of_attribute_classification_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_attribute_classification_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<attribute_classification_item> lst) { (new set_of_attribute_classification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_attribute_classification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_attribute_classification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of certification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class certification_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of certification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public certification_assignment(SdaiInstance instance) : base(instance) { }
        public certification_assignment() : base(0) { }

        public static implicit operator certification_assignment(SdaiInstance instance) => new certification_assignment(instance);

        public certification get_assigned_certification() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_certification", ifcengine.sdaiINSTANCE, out inst); return new certification (inst); }
        public certification _assigned_certification { get { return get_assigned_certification(); } }
        public void put_assigned_certification(certification inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_certification", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "certification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_certification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_certification_assignment : certification_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_certification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_certification_assignment(SdaiInstance instance) : base(instance) { }
        public applied_certification_assignment() : base(0) { }

        public static implicit operator applied_certification_assignment(SdaiInstance instance) => new applied_certification_assignment(instance);

        /// <summary>
        /// Create new instace of applied_certification_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_certification_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_certification_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_certification_item get_items() { return (new set_of_certification_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_certification_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<certification_item> lst) { (new set_of_certification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_certification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_certification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of classification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class classification_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public classification_assignment(SdaiInstance instance) : base(instance) { }
        public classification_assignment() : base(0) { }

        public static implicit operator classification_assignment(SdaiInstance instance) => new classification_assignment(instance);

        public group get_assigned_class() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_class", ifcengine.sdaiINSTANCE, out inst); return new group (inst); }
        public group _assigned_class { get { return get_assigned_class(); } }
        public void put_assigned_class(group inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_class", ifcengine.sdaiINSTANCE, i); }
        public classification_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new classification_role (inst); }
        public classification_role _role { get { return get_role(); } }
        public void put_role(classification_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "classification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_classification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_classification_assignment : classification_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_classification_assignment(SdaiInstance instance) : base(instance) { }
        public applied_classification_assignment() : base(0) { }

        public static implicit operator applied_classification_assignment(SdaiInstance instance) => new applied_classification_assignment(instance);

        /// <summary>
        /// Create new instace of applied_classification_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_classification_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_classification_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_classification_item get_items() { return (new set_of_classification_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_classification_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<classification_item> lst) { (new set_of_classification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_classification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_classification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of contract_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class contract_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of contract_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public contract_assignment(SdaiInstance instance) : base(instance) { }
        public contract_assignment() : base(0) { }

        public static implicit operator contract_assignment(SdaiInstance instance) => new contract_assignment(instance);

        public contract get_assigned_contract() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_contract", ifcengine.sdaiINSTANCE, out inst); return new contract (inst); }
        public contract _assigned_contract { get { return get_assigned_contract(); } }
        public void put_assigned_contract(contract inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_contract", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "contract_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_contract_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_contract_assignment : contract_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_contract_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_contract_assignment(SdaiInstance instance) : base(instance) { }
        public applied_contract_assignment() : base(0) { }

        public static implicit operator applied_contract_assignment(SdaiInstance instance) => new applied_contract_assignment(instance);

        /// <summary>
        /// Create new instace of applied_contract_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_contract_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_contract_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_contract_item get_items() { return (new set_of_contract_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_contract_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<contract_item> lst) { (new set_of_contract_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_contract_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_contract_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_and_time_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_and_time_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_and_time_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_and_time_assignment(SdaiInstance instance) : base(instance) { }
        public date_and_time_assignment() : base(0) { }

        public static implicit operator date_and_time_assignment(SdaiInstance instance) => new date_and_time_assignment(instance);

        public date_and_time get_assigned_date_and_time() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_date_and_time", ifcengine.sdaiINSTANCE, out inst); return new date_and_time (inst); }
        public date_and_time _assigned_date_and_time { get { return get_assigned_date_and_time(); } }
        public void put_assigned_date_and_time(date_and_time inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_date_and_time", ifcengine.sdaiINSTANCE, i); }
        public date_time_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new date_time_role (inst); }
        public date_time_role _role { get { return get_role(); } }
        public void put_role(date_time_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "date_and_time_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_date_and_time_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_date_and_time_assignment : date_and_time_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_date_and_time_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_date_and_time_assignment(SdaiInstance instance) : base(instance) { }
        public applied_date_and_time_assignment() : base(0) { }

        public static implicit operator applied_date_and_time_assignment(SdaiInstance instance) => new applied_date_and_time_assignment(instance);

        /// <summary>
        /// Create new instace of applied_date_and_time_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_date_and_time_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_date_and_time_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_date_and_time_item get_items() { return (new set_of_date_and_time_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_date_and_time_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<date_and_time_item> lst) { (new set_of_date_and_time_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_date_and_time_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_date_and_time_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_assignment(SdaiInstance instance) : base(instance) { }
        public date_assignment() : base(0) { }

        public static implicit operator date_assignment(SdaiInstance instance) => new date_assignment(instance);

        public date get_assigned_date() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_date", ifcengine.sdaiINSTANCE, out inst); return new date (inst); }
        public date _assigned_date { get { return get_assigned_date(); } }
        public void put_assigned_date(date inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_date", ifcengine.sdaiINSTANCE, i); }
        public date_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new date_role (inst); }
        public date_role _role { get { return get_role(); } }
        public void put_role(date_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "date_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_date_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_date_assignment : date_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_date_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_date_assignment(SdaiInstance instance) : base(instance) { }
        public applied_date_assignment() : base(0) { }

        public static implicit operator applied_date_assignment(SdaiInstance instance) => new applied_date_assignment(instance);

        /// <summary>
        /// Create new instace of applied_date_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_date_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_date_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_date_item get_items() { return (new set_of_date_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_date_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<date_item> lst) { (new set_of_date_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_date_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_date_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_reference : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_reference(SdaiInstance instance) : base(instance) { }
        public document_reference() : base(0) { }

        public static implicit operator document_reference(SdaiInstance instance) => new document_reference(instance);

        public document get_assigned_document() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_document", ifcengine.sdaiINSTANCE, out inst); return new document (inst); }
        public document _assigned_document { get { return get_assigned_document(); } }
        public void put_assigned_document(document inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_document", ifcengine.sdaiINSTANCE, i); }
        public TextValue get_source() { return get_string("source", ifcengine.sdaiSTRING); }
        public TextValue _source { get { return get_source(); } }
        public void put_source(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "document_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_document_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_document_reference : document_reference
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_document_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_document_reference(SdaiInstance instance) : base(instance) { }
        public applied_document_reference() : base(0) { }

        public static implicit operator applied_document_reference(SdaiInstance instance) => new applied_document_reference(instance);

        /// <summary>
        /// Create new instace of applied_document_reference and returns object of this class to interact with
        /// </summary>
        public static new applied_document_reference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_document_reference"); Debug.Assert(inst != 0); return inst; }

        public set_of_document_reference_item get_items() { return (new set_of_document_reference_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_document_reference_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<document_reference_item> lst) { (new set_of_document_reference_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_document_reference_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_document_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_usage_constraint_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_usage_constraint_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_usage_constraint_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_usage_constraint_assignment(SdaiInstance instance) : base(instance) { }
        public document_usage_constraint_assignment() : base(0) { }

        public static implicit operator document_usage_constraint_assignment(SdaiInstance instance) => new document_usage_constraint_assignment(instance);

        public document_usage_constraint get_assigned_document_usage() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_document_usage", ifcengine.sdaiINSTANCE, out inst); return new document_usage_constraint (inst); }
        public document_usage_constraint _assigned_document_usage { get { return get_assigned_document_usage(); } }
        public void put_assigned_document_usage(document_usage_constraint inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_document_usage", ifcengine.sdaiINSTANCE, i); }
        public document_usage_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new document_usage_role (inst); }
        public document_usage_role _role { get { return get_role(); } }
        public void put_role(document_usage_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "document_usage_constraint_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_document_usage_constraint_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_document_usage_constraint_assignment : document_usage_constraint_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_document_usage_constraint_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_document_usage_constraint_assignment(SdaiInstance instance) : base(instance) { }
        public applied_document_usage_constraint_assignment() : base(0) { }

        public static implicit operator applied_document_usage_constraint_assignment(SdaiInstance instance) => new applied_document_usage_constraint_assignment(instance);

        /// <summary>
        /// Create new instace of applied_document_usage_constraint_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_document_usage_constraint_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_document_usage_constraint_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_document_reference_item get_items() { return (new set_of_document_reference_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_document_reference_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<document_reference_item> lst) { (new set_of_document_reference_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_document_reference_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_document_usage_constraint_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of effectivity_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class effectivity_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public effectivity_assignment(SdaiInstance instance) : base(instance) { }
        public effectivity_assignment() : base(0) { }

        public static implicit operator effectivity_assignment(SdaiInstance instance) => new effectivity_assignment(instance);

        public effectivity get_assigned_effectivity() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_effectivity", ifcengine.sdaiINSTANCE, out inst); return new effectivity (inst); }
        public effectivity _assigned_effectivity { get { return get_assigned_effectivity(); } }
        public void put_assigned_effectivity(effectivity inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_effectivity", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "effectivity_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_effectivity_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_effectivity_assignment : effectivity_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_effectivity_assignment(SdaiInstance instance) : base(instance) { }
        public applied_effectivity_assignment() : base(0) { }

        public static implicit operator applied_effectivity_assignment(SdaiInstance instance) => new applied_effectivity_assignment(instance);

        /// <summary>
        /// Create new instace of applied_effectivity_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_effectivity_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_effectivity_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_effectivity_item get_items() { return (new set_of_effectivity_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_effectivity_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<effectivity_item> lst) { (new set_of_effectivity_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_effectivity_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_effectivity_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of event_occurrence_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class event_occurrence_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of event_occurrence_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public event_occurrence_assignment(SdaiInstance instance) : base(instance) { }
        public event_occurrence_assignment() : base(0) { }

        public static implicit operator event_occurrence_assignment(SdaiInstance instance) => new event_occurrence_assignment(instance);

        public event_occurrence get_assigned_event_occurrence() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_event_occurrence", ifcengine.sdaiINSTANCE, out inst); return new event_occurrence (inst); }
        public event_occurrence _assigned_event_occurrence { get { return get_assigned_event_occurrence(); } }
        public void put_assigned_event_occurrence(event_occurrence inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_event_occurrence", ifcengine.sdaiINSTANCE, i); }
        public event_occurrence_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new event_occurrence_role (inst); }
        public event_occurrence_role _role { get { return get_role(); } }
        public void put_role(event_occurrence_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "event_occurrence_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_event_occurrence_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_event_occurrence_assignment : event_occurrence_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_event_occurrence_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_event_occurrence_assignment(SdaiInstance instance) : base(instance) { }
        public applied_event_occurrence_assignment() : base(0) { }

        public static implicit operator applied_event_occurrence_assignment(SdaiInstance instance) => new applied_event_occurrence_assignment(instance);

        /// <summary>
        /// Create new instace of applied_event_occurrence_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_event_occurrence_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_event_occurrence_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_event_occurrence_item get_items() { return (new set_of_event_occurrence_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_event_occurrence_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<event_occurrence_item> lst) { (new set_of_event_occurrence_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_event_occurrence_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_event_occurrence_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of identification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class identification_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public identification_assignment(SdaiInstance instance) : base(instance) { }
        public identification_assignment() : base(0) { }

        public static implicit operator identification_assignment(SdaiInstance instance) => new identification_assignment(instance);

        public TextValue get_assigned_id() { return get_string("assigned_id", ifcengine.sdaiSTRING); }
        public TextValue _assigned_id { get { return get_assigned_id(); } }
        public void put_assigned_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "assigned_id", ifcengine.sdaiSTRING, value); }
        public identification_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new identification_role (inst); }
        public identification_role _role { get { return get_role(); } }
        public void put_role(identification_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "identification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of external_identification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class external_identification_assignment : identification_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of external_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public external_identification_assignment(SdaiInstance instance) : base(instance) { }
        public external_identification_assignment() : base(0) { }

        public static implicit operator external_identification_assignment(SdaiInstance instance) => new external_identification_assignment(instance);

        public external_source get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _source { get { return get_source(); } }
        public void put_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "external_identification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_external_identification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_external_identification_assignment : external_identification_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_external_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_external_identification_assignment(SdaiInstance instance) : base(instance) { }
        public applied_external_identification_assignment() : base(0) { }

        public static implicit operator applied_external_identification_assignment(SdaiInstance instance) => new applied_external_identification_assignment(instance);

        /// <summary>
        /// Create new instace of applied_external_identification_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_external_identification_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_external_identification_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_external_identification_item get_items() { return (new set_of_external_identification_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_external_identification_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<external_identification_item> lst) { (new set_of_external_identification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_external_identification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_external_identification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_assignment(SdaiInstance instance) : base(instance) { }
        public group_assignment() : base(0) { }

        public static implicit operator group_assignment(SdaiInstance instance) => new group_assignment(instance);

        public group get_assigned_group() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_group", ifcengine.sdaiINSTANCE, out inst); return new group (inst); }
        public group _assigned_group { get { return get_assigned_group(); } }
        public void put_assigned_group(group inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_group", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "group_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_group_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_group_assignment : group_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_group_assignment(SdaiInstance instance) : base(instance) { }
        public applied_group_assignment() : base(0) { }

        public static implicit operator applied_group_assignment(SdaiInstance instance) => new applied_group_assignment(instance);

        /// <summary>
        /// Create new instace of applied_group_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_group_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_group_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_groupable_item get_items() { return (new set_of_groupable_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_groupable_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<groupable_item> lst) { (new set_of_groupable_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_groupable_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_group_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_identification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_identification_assignment : identification_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_identification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_identification_assignment(SdaiInstance instance) : base(instance) { }
        public applied_identification_assignment() : base(0) { }

        public static implicit operator applied_identification_assignment(SdaiInstance instance) => new applied_identification_assignment(instance);

        /// <summary>
        /// Create new instace of applied_identification_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_identification_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_identification_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_identification_item get_items() { return (new set_of_identification_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_identification_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<identification_item> lst) { (new set_of_identification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_identification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_identification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of name_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class name_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of name_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public name_assignment(SdaiInstance instance) : base(instance) { }
        public name_assignment() : base(0) { }

        public static implicit operator name_assignment(SdaiInstance instance) => new name_assignment(instance);

        public TextValue get_assigned_name() { return get_string("assigned_name", ifcengine.sdaiSTRING); }
        public TextValue _assigned_name { get { return get_assigned_name(); } }
        public void put_assigned_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "assigned_name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "name_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_name_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_name_assignment : name_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_name_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_name_assignment(SdaiInstance instance) : base(instance) { }
        public applied_name_assignment() : base(0) { }

        public static implicit operator applied_name_assignment(SdaiInstance instance) => new applied_name_assignment(instance);

        /// <summary>
        /// Create new instace of applied_name_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_name_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_name_assignment"); Debug.Assert(inst != 0); return inst; }


        public name_item_get get_item() { return new name_item_get(m_instance, "item", 0); }
        public name_item_get _item { get { return new name_item_get(m_instance, "item", 0); } }
        public name_item_put put_item() { return new name_item_put(m_instance, "item", 0); }

        protected override TextValue EntityName() { return "applied_name_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organization_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organization_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organization_assignment(SdaiInstance instance) : base(instance) { }
        public organization_assignment() : base(0) { }

        public static implicit operator organization_assignment(SdaiInstance instance) => new organization_assignment(instance);

        public organization get_assigned_organization() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_organization", ifcengine.sdaiINSTANCE, out inst); return new organization (inst); }
        public organization _assigned_organization { get { return get_assigned_organization(); } }
        public void put_assigned_organization(organization inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_organization", ifcengine.sdaiINSTANCE, i); }
        public organization_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new organization_role (inst); }
        public organization_role _role { get { return get_role(); } }
        public void put_role(organization_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "organization_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_organization_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_organization_assignment : organization_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_organization_assignment(SdaiInstance instance) : base(instance) { }
        public applied_organization_assignment() : base(0) { }

        public static implicit operator applied_organization_assignment(SdaiInstance instance) => new applied_organization_assignment(instance);

        /// <summary>
        /// Create new instace of applied_organization_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_organization_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_organization_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_organization_item get_items() { return (new set_of_organization_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_organization_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<organization_item> lst) { (new set_of_organization_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_organization_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_organization_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organizational_project_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organizational_project_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organizational_project_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organizational_project_assignment(SdaiInstance instance) : base(instance) { }
        public organizational_project_assignment() : base(0) { }

        public static implicit operator organizational_project_assignment(SdaiInstance instance) => new organizational_project_assignment(instance);

        public organizational_project get_assigned_organizational_project() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_organizational_project", ifcengine.sdaiINSTANCE, out inst); return new organizational_project (inst); }
        public organizational_project _assigned_organizational_project { get { return get_assigned_organizational_project(); } }
        public void put_assigned_organizational_project(organizational_project inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_organizational_project", ifcengine.sdaiINSTANCE, i); }
        public organizational_project_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new organizational_project_role (inst); }
        public organizational_project_role _role { get { return get_role(); } }
        public void put_role(organizational_project_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "organizational_project_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_organizational_project_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_organizational_project_assignment : organizational_project_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_organizational_project_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_organizational_project_assignment(SdaiInstance instance) : base(instance) { }
        public applied_organizational_project_assignment() : base(0) { }

        public static implicit operator applied_organizational_project_assignment(SdaiInstance instance) => new applied_organizational_project_assignment(instance);

        /// <summary>
        /// Create new instace of applied_organizational_project_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_organizational_project_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_organizational_project_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_project_item get_items() { return (new set_of_project_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_project_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<project_item> lst) { (new set_of_project_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_project_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_organizational_project_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person_and_organization_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person_and_organization_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person_and_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person_and_organization_assignment(SdaiInstance instance) : base(instance) { }
        public person_and_organization_assignment() : base(0) { }

        public static implicit operator person_and_organization_assignment(SdaiInstance instance) => new person_and_organization_assignment(instance);

        public person_and_organization get_assigned_person_and_organization() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_person_and_organization", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization (inst); }
        public person_and_organization _assigned_person_and_organization { get { return get_assigned_person_and_organization(); } }
        public void put_assigned_person_and_organization(person_and_organization inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_person_and_organization", ifcengine.sdaiINSTANCE, i); }
        public person_and_organization_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new person_and_organization_role (inst); }
        public person_and_organization_role _role { get { return get_role(); } }
        public void put_role(person_and_organization_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "person_and_organization_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_person_and_organization_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_person_and_organization_assignment : person_and_organization_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_person_and_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_person_and_organization_assignment(SdaiInstance instance) : base(instance) { }
        public applied_person_and_organization_assignment() : base(0) { }

        public static implicit operator applied_person_and_organization_assignment(SdaiInstance instance) => new applied_person_and_organization_assignment(instance);

        /// <summary>
        /// Create new instace of applied_person_and_organization_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_person_and_organization_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_person_and_organization_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_person_and_organization_item get_items() { return (new set_of_person_and_organization_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_person_and_organization_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<person_and_organization_item> lst) { (new set_of_person_and_organization_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_person_and_organization_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_person_and_organization_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presented_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presented_item : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presented_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presented_item(SdaiInstance instance) : base(instance) { }
        public presented_item() : base(0) { }

        public static implicit operator presented_item(SdaiInstance instance) => new presented_item(instance);


        protected override TextValue EntityName() { return "presented_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_presented_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_presented_item : presented_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_presented_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_presented_item(SdaiInstance instance) : base(instance) { }
        public applied_presented_item() : base(0) { }

        public static implicit operator applied_presented_item(SdaiInstance instance) => new applied_presented_item(instance);

        /// <summary>
        /// Create new instace of applied_presented_item and returns object of this class to interact with
        /// </summary>
        public static new applied_presented_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_presented_item"); Debug.Assert(inst != 0); return inst; }

        public set_of_presented_item_select get_items() { return (new set_of_presented_item_selectSerializer()).FromAttr(m_instance, "items"); }
        public set_of_presented_item_select _items { get { return get_items(); } }
        public void put_items(IEnumerable<presented_item_select> lst) { (new set_of_presented_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_presented_item_selectSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_presented_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of security_classification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class security_classification_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of security_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public security_classification_assignment(SdaiInstance instance) : base(instance) { }
        public security_classification_assignment() : base(0) { }

        public static implicit operator security_classification_assignment(SdaiInstance instance) => new security_classification_assignment(instance);

        public security_classification get_assigned_security_classification() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_security_classification", ifcengine.sdaiINSTANCE, out inst); return new security_classification (inst); }
        public security_classification _assigned_security_classification { get { return get_assigned_security_classification(); } }
        public void put_assigned_security_classification(security_classification inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_security_classification", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "security_classification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_security_classification_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_security_classification_assignment : security_classification_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_security_classification_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_security_classification_assignment(SdaiInstance instance) : base(instance) { }
        public applied_security_classification_assignment() : base(0) { }

        public static implicit operator applied_security_classification_assignment(SdaiInstance instance) => new applied_security_classification_assignment(instance);

        /// <summary>
        /// Create new instace of applied_security_classification_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_security_classification_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_security_classification_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_security_classification_item get_items() { return (new set_of_security_classification_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_security_classification_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<security_classification_item> lst) { (new set_of_security_classification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_security_classification_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_security_classification_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_interval_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_interval_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_interval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_interval_assignment(SdaiInstance instance) : base(instance) { }
        public time_interval_assignment() : base(0) { }

        public static implicit operator time_interval_assignment(SdaiInstance instance) => new time_interval_assignment(instance);

        public time_interval get_assigned_time_interval() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_time_interval", ifcengine.sdaiINSTANCE, out inst); return new time_interval (inst); }
        public time_interval _assigned_time_interval { get { return get_assigned_time_interval(); } }
        public void put_assigned_time_interval(time_interval inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_time_interval", ifcengine.sdaiINSTANCE, i); }
        public time_interval_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new time_interval_role (inst); }
        public time_interval_role _role { get { return get_role(); } }
        public void put_role(time_interval_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "time_interval_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_time_interval_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_time_interval_assignment : time_interval_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_time_interval_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_time_interval_assignment(SdaiInstance instance) : base(instance) { }
        public applied_time_interval_assignment() : base(0) { }

        public static implicit operator applied_time_interval_assignment(SdaiInstance instance) => new applied_time_interval_assignment(instance);

        /// <summary>
        /// Create new instace of applied_time_interval_assignment and returns object of this class to interact with
        /// </summary>
        public static new applied_time_interval_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_time_interval_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_time_interval_item get_items() { return (new set_of_time_interval_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_time_interval_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<time_interval_item> lst) { (new set_of_time_interval_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_time_interval_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "applied_time_interval_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of applied_usage_right
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class applied_usage_right : applied_action_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of applied_usage_right
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public applied_usage_right(SdaiInstance instance) : base(instance) { }
        public applied_usage_right() : base(0) { }

        public static implicit operator applied_usage_right(SdaiInstance instance) => new applied_usage_right(instance);

        /// <summary>
        /// Create new instace of applied_usage_right and returns object of this class to interact with
        /// </summary>
        public static new applied_usage_right Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "applied_usage_right"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "applied_usage_right"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval(SdaiInstance instance) : base(instance) { }
        public approval() : base(0) { }

        public static implicit operator approval(SdaiInstance instance) => new approval(instance);

        /// <summary>
        /// Create new instace of approval and returns object of this class to interact with
        /// </summary>
        public static new approval Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval"); Debug.Assert(inst != 0); return inst; }

        public approval_status get_status() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "status", ifcengine.sdaiINSTANCE, out inst); return new approval_status (inst); }
        public approval_status _status { get { return get_status(); } }
        public void put_status(approval_status inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "status", ifcengine.sdaiINSTANCE, i); }
        public TextValue get_level() { return get_string("level", ifcengine.sdaiSTRING); }
        public TextValue _level { get { return get_level(); } }
        public void put_level(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "level", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "approval"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_date_time
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_date_time : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_date_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_date_time(SdaiInstance instance) : base(instance) { }
        public approval_date_time() : base(0) { }

        public static implicit operator approval_date_time(SdaiInstance instance) => new approval_date_time(instance);

        /// <summary>
        /// Create new instace of approval_date_time and returns object of this class to interact with
        /// </summary>
        public static new approval_date_time Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval_date_time"); Debug.Assert(inst != 0); return inst; }


        public date_time_select_get get_date_time() { return new date_time_select_get(m_instance, "date_time", 0); }
        public date_time_select_get _date_time { get { return new date_time_select_get(m_instance, "date_time", 0); } }
        public date_time_select_put put_date_time() { return new date_time_select_put(m_instance, "date_time", 0); }
        public approval get_dated_approval() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dated_approval", ifcengine.sdaiINSTANCE, out inst); return new approval (inst); }
        public approval _dated_approval { get { return get_dated_approval(); } }
        public void put_dated_approval(approval inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dated_approval", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "approval_date_time"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_person_organization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_person_organization : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_person_organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_person_organization(SdaiInstance instance) : base(instance) { }
        public approval_person_organization() : base(0) { }

        public static implicit operator approval_person_organization(SdaiInstance instance) => new approval_person_organization(instance);

        /// <summary>
        /// Create new instace of approval_person_organization and returns object of this class to interact with
        /// </summary>
        public static new approval_person_organization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval_person_organization"); Debug.Assert(inst != 0); return inst; }


        public person_organization_select_get get_person_organization() { return new person_organization_select_get(m_instance, "person_organization", 0); }
        public person_organization_select_get _person_organization { get { return new person_organization_select_get(m_instance, "person_organization", 0); } }
        public person_organization_select_put put_person_organization() { return new person_organization_select_put(m_instance, "person_organization", 0); }
        public approval get_authorized_approval() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "authorized_approval", ifcengine.sdaiINSTANCE, out inst); return new approval (inst); }
        public approval _authorized_approval { get { return get_authorized_approval(); } }
        public void put_authorized_approval(approval inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "authorized_approval", ifcengine.sdaiINSTANCE, i); }
        public approval_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new approval_role (inst); }
        public approval_role _role { get { return get_role(); } }
        public void put_role(approval_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "approval_person_organization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_relationship(SdaiInstance instance) : base(instance) { }
        public approval_relationship() : base(0) { }

        public static implicit operator approval_relationship(SdaiInstance instance) => new approval_relationship(instance);

        /// <summary>
        /// Create new instace of approval_relationship and returns object of this class to interact with
        /// </summary>
        public static new approval_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public approval get_relating_approval() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_approval", ifcengine.sdaiINSTANCE, out inst); return new approval (inst); }
        public approval _relating_approval { get { return get_relating_approval(); } }
        public void put_relating_approval(approval inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_approval", ifcengine.sdaiINSTANCE, i); }
        public approval get_related_approval() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_approval", ifcengine.sdaiINSTANCE, out inst); return new approval (inst); }
        public approval _related_approval { get { return get_related_approval(); } }
        public void put_related_approval(approval inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_approval", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "approval_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_role(SdaiInstance instance) : base(instance) { }
        public approval_role() : base(0) { }

        public static implicit operator approval_role(SdaiInstance instance) => new approval_role(instance);

        /// <summary>
        /// Create new instace of approval_role and returns object of this class to interact with
        /// </summary>
        public static new approval_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_role() { return get_string("role", ifcengine.sdaiSTRING); }
        public TextValue _role { get { return get_role(); } }
        public void put_role(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "approval_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of approval_status
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class approval_status : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of approval_status
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public approval_status(SdaiInstance instance) : base(instance) { }
        public approval_status() : base(0) { }

        public static implicit operator approval_status(SdaiInstance instance) => new approval_status(instance);

        /// <summary>
        /// Create new instace of approval_status and returns object of this class to interact with
        /// </summary>
        public static new approval_status Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "approval_status"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "approval_status"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of area_in_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class area_in_set : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of area_in_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public area_in_set(SdaiInstance instance) : base(instance) { }
        public area_in_set() : base(0) { }

        public static implicit operator area_in_set(SdaiInstance instance) => new area_in_set(instance);

        /// <summary>
        /// Create new instace of area_in_set and returns object of this class to interact with
        /// </summary>
        public static new area_in_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "area_in_set"); Debug.Assert(inst != 0); return inst; }

        public presentation_area get_area() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "area", ifcengine.sdaiINSTANCE, out inst); return new presentation_area (inst); }
        public presentation_area _area { get { return get_area(); } }
        public void put_area(presentation_area inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "area", ifcengine.sdaiINSTANCE, i); }
        public presentation_set get_in_set() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "in_set", ifcengine.sdaiINSTANCE, out inst); return new presentation_set (inst); }
        public presentation_set _in_set { get { return get_in_set(); } }
        public void put_in_set(presentation_set inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "in_set", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "area_in_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of area_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class area_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of area_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public area_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public area_measure_with_unit() : base(0) { }

        public static implicit operator area_measure_with_unit(SdaiInstance instance) => new area_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of area_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new area_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "area_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "area_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of area_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class area_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of area_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public area_unit(SdaiInstance instance) : base(instance) { }
        public area_unit() : base(0) { }

        public static implicit operator area_unit(SdaiInstance instance) => new area_unit(instance);

        /// <summary>
        /// Create new instace of area_unit and returns object of this class to interact with
        /// </summary>
        public static new area_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "area_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "area_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_relationship(SdaiInstance instance) : base(instance) { }
        public product_definition_relationship() : base(0) { }

        public static implicit operator product_definition_relationship(SdaiInstance instance) => new product_definition_relationship(instance);

        /// <summary>
        /// Create new instace of product_definition_relationship and returns object of this class to interact with
        /// </summary>
        public static new product_definition_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product_definition get_relating_product_definition() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_product_definition", ifcengine.sdaiINSTANCE, out inst); return new product_definition (inst); }
        public product_definition _relating_product_definition { get { return get_relating_product_definition(); } }
        public void put_relating_product_definition(product_definition inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_product_definition", ifcengine.sdaiINSTANCE, i); }
        public product_definition get_related_product_definition() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_product_definition", ifcengine.sdaiINSTANCE, out inst); return new product_definition (inst); }
        public product_definition _related_product_definition { get { return get_related_product_definition(); } }
        public void put_related_product_definition(product_definition inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_product_definition", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "product_definition_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_usage : product_definition_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_usage(SdaiInstance instance) : base(instance) { }
        public product_definition_usage() : base(0) { }

        public static implicit operator product_definition_usage(SdaiInstance instance) => new product_definition_usage(instance);

        /// <summary>
        /// Create new instace of product_definition_usage and returns object of this class to interact with
        /// </summary>
        public static new product_definition_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_usage"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "product_definition_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_component_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_component_usage : product_definition_usage
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_component_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_component_usage(SdaiInstance instance) : base(instance) { }
        public assembly_component_usage() : base(0) { }

        public static implicit operator assembly_component_usage(SdaiInstance instance) => new assembly_component_usage(instance);

        /// <summary>
        /// Create new instace of assembly_component_usage and returns object of this class to interact with
        /// </summary>
        public static new assembly_component_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_component_usage"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_reference_designator() { return get_string("reference_designator", ifcengine.sdaiSTRING); }
        public TextValue _reference_designator { get { return get_reference_designator(); } }
        public void put_reference_designator(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "reference_designator", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "assembly_component_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assembly_component_usage_substitute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assembly_component_usage_substitute : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assembly_component_usage_substitute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assembly_component_usage_substitute(SdaiInstance instance) : base(instance) { }
        public assembly_component_usage_substitute() : base(0) { }

        public static implicit operator assembly_component_usage_substitute(SdaiInstance instance) => new assembly_component_usage_substitute(instance);

        /// <summary>
        /// Create new instace of assembly_component_usage_substitute and returns object of this class to interact with
        /// </summary>
        public static new assembly_component_usage_substitute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assembly_component_usage_substitute"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_definition() { return get_string("definition", ifcengine.sdaiSTRING); }
        public TextValue _definition { get { return get_definition(); } }
        public void put_definition(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "definition", ifcengine.sdaiSTRING, value); }
        public assembly_component_usage get_base_() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_", ifcengine.sdaiINSTANCE, out inst); return new assembly_component_usage (inst); }
        public assembly_component_usage _base_ { get { return get_base_(); } }
        public void put_base_(assembly_component_usage inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "base_", ifcengine.sdaiINSTANCE, i); }
        public assembly_component_usage get_substitute() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "substitute", ifcengine.sdaiINSTANCE, out inst); return new assembly_component_usage (inst); }
        public assembly_component_usage _substitute { get { return get_substitute(); } }
        public void put_substitute(assembly_component_usage inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "substitute", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "assembly_component_usage_substitute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of assigned_requirement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class assigned_requirement : group_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of assigned_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public assigned_requirement(SdaiInstance instance) : base(instance) { }
        public assigned_requirement() : base(0) { }

        public static implicit operator assigned_requirement(SdaiInstance instance) => new assigned_requirement(instance);

        /// <summary>
        /// Create new instace of assigned_requirement and returns object of this class to interact with
        /// </summary>
        public static new assigned_requirement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "assigned_requirement"); Debug.Assert(inst != 0); return inst; }

        public set_of_product_definition get_items() { return (new set_of_product_definitionSerializer()).FromAttr(m_instance, "items"); }
        public set_of_product_definition _items { get { return get_items(); } }
        public void put_items(IEnumerable<product_definition> lst) { (new set_of_product_definitionSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_product_definitionSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "assigned_requirement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of compound_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class compound_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of compound_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public compound_representation_item(SdaiInstance instance) : base(instance) { }
        public compound_representation_item() : base(0) { }

        public static implicit operator compound_representation_item(SdaiInstance instance) => new compound_representation_item(instance);

        /// <summary>
        /// Create new instace of compound_representation_item and returns object of this class to interact with
        /// </summary>
        public static new compound_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "compound_representation_item"); Debug.Assert(inst != 0); return inst; }


        public compound_item_definition_get get_item_element() { return new compound_item_definition_get(m_instance, "item_element", 0); }
        public compound_item_definition_get _item_element { get { return new compound_item_definition_get(m_instance, "item_element", 0); } }
        public compound_item_definition_put put_item_element() { return new compound_item_definition_put(m_instance, "item_element", 0); }

        protected override TextValue EntityName() { return "compound_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of atomic_formula
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class atomic_formula : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of atomic_formula
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public atomic_formula(SdaiInstance instance) : base(instance) { }
        public atomic_formula() : base(0) { }

        public static implicit operator atomic_formula(SdaiInstance instance) => new atomic_formula(instance);

        /// <summary>
        /// Create new instace of atomic_formula and returns object of this class to interact with
        /// </summary>
        public static new atomic_formula Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "atomic_formula"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "atomic_formula"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fact_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fact_type : property_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fact_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fact_type(SdaiInstance instance) : base(instance) { }
        public fact_type() : base(0) { }

        public static implicit operator fact_type(SdaiInstance instance) => new fact_type(instance);

        /// <summary>
        /// Create new instace of fact_type and returns object of this class to interact with
        /// </summary>
        public static new fact_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fact_type"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "fact_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of attribute_assertion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class attribute_assertion : fact_type
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of attribute_assertion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public attribute_assertion(SdaiInstance instance) : base(instance) { }
        public attribute_assertion() : base(0) { }

        public static implicit operator attribute_assertion(SdaiInstance instance) => new attribute_assertion(instance);

        /// <summary>
        /// Create new instace of attribute_assertion and returns object of this class to interact with
        /// </summary>
        public static new attribute_assertion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "attribute_assertion"); Debug.Assert(inst != 0); return inst; }

        public representation get_used_representation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _used_representation { get { return get_used_representation(); } }
        public void put_used_representation(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, i); }
        public set_of_representation_item get_items() { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_representation_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<representation_item> lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public representation_context get_context_of_items() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, out inst); return new representation_context (inst); }
        public representation_context _context_of_items { get { return get_context_of_items(); } }
        public void put_context_of_items(representation_context inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "attribute_assertion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of attribute_language_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class attribute_language_assignment : attribute_classification_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of attribute_language_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public attribute_language_assignment(SdaiInstance instance) : base(instance) { }
        public attribute_language_assignment() : base(0) { }

        public static implicit operator attribute_language_assignment(SdaiInstance instance) => new attribute_language_assignment(instance);

        /// <summary>
        /// Create new instace of attribute_language_assignment and returns object of this class to interact with
        /// </summary>
        public static new attribute_language_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "attribute_language_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_attribute_language_item get_items() { return (new set_of_attribute_language_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_attribute_language_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<attribute_language_item> lst) { (new set_of_attribute_language_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_attribute_language_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "attribute_language_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of attribute_value_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class attribute_value_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of attribute_value_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public attribute_value_assignment(SdaiInstance instance) : base(instance) { }
        public attribute_value_assignment() : base(0) { }

        public static implicit operator attribute_value_assignment(SdaiInstance instance) => new attribute_value_assignment(instance);

        public TextValue get_attribute_name() { return get_string("attribute_name", ifcengine.sdaiSTRING); }
        public TextValue _attribute_name { get { return get_attribute_name(); } }
        public void put_attribute_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "attribute_name", ifcengine.sdaiSTRING, value); }

        public attribute_type_get get_attribute_value() { return new attribute_type_get(m_instance, "attribute_value", 0); }
        public attribute_type_get _attribute_value { get { return new attribute_type_get(m_instance, "attribute_value", 0); } }
        public attribute_type_put put_attribute_value() { return new attribute_type_put(m_instance, "attribute_value", 0); }
        public attribute_value_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new attribute_value_role (inst); }
        public attribute_value_role _role { get { return get_role(); } }
        public void put_role(attribute_value_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "attribute_value_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of attribute_value_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class attribute_value_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of attribute_value_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public attribute_value_role(SdaiInstance instance) : base(instance) { }
        public attribute_value_role() : base(0) { }

        public static implicit operator attribute_value_role(SdaiInstance instance) => new attribute_value_role(instance);

        /// <summary>
        /// Create new instace of attribute_value_role and returns object of this class to interact with
        /// </summary>
        public static new attribute_value_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "attribute_value_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "attribute_value_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of auxiliary_geometric_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class auxiliary_geometric_representation_item : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of auxiliary_geometric_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public auxiliary_geometric_representation_item(SdaiInstance instance) : base(instance) { }
        public auxiliary_geometric_representation_item() : base(0) { }

        public static implicit operator auxiliary_geometric_representation_item(SdaiInstance instance) => new auxiliary_geometric_representation_item(instance);

        /// <summary>
        /// Create new instace of auxiliary_geometric_representation_item and returns object of this class to interact with
        /// </summary>
        public static new auxiliary_geometric_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "auxiliary_geometric_representation_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "auxiliary_geometric_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of placement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class placement : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public placement(SdaiInstance instance) : base(instance) { }
        public placement() : base(0) { }

        public static implicit operator placement(SdaiInstance instance) => new placement(instance);

        /// <summary>
        /// Create new instace of placement and returns object of this class to interact with
        /// </summary>
        public static new placement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "placement"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point get_location() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "location", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point (inst); }
        public cartesian_point _location { get { return get_location(); } }
        public void put_location(cartesian_point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "location", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "placement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of axis1_placement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class axis1_placement : placement
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of axis1_placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public axis1_placement(SdaiInstance instance) : base(instance) { }
        public axis1_placement() : base(0) { }

        public static implicit operator axis1_placement(SdaiInstance instance) => new axis1_placement(instance);

        /// <summary>
        /// Create new instace of axis1_placement and returns object of this class to interact with
        /// </summary>
        public static new axis1_placement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "axis1_placement"); Debug.Assert(inst != 0); return inst; }

        public direction get_axis() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _axis { get { return get_axis(); } }
        public void put_axis(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "axis1_placement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of axis2_placement_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class axis2_placement_2d : placement
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of axis2_placement_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public axis2_placement_2d(SdaiInstance instance) : base(instance) { }
        public axis2_placement_2d() : base(0) { }

        public static implicit operator axis2_placement_2d(SdaiInstance instance) => new axis2_placement_2d(instance);

        /// <summary>
        /// Create new instace of axis2_placement_2d and returns object of this class to interact with
        /// </summary>
        public static new axis2_placement_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "axis2_placement_2d"); Debug.Assert(inst != 0); return inst; }

        public direction get_ref_direction() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _ref_direction { get { return get_ref_direction(); } }
        public void put_ref_direction(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "axis2_placement_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of axis2_placement_3d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class axis2_placement_3d : placement
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of axis2_placement_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public axis2_placement_3d(SdaiInstance instance) : base(instance) { }
        public axis2_placement_3d() : base(0) { }

        public static implicit operator axis2_placement_3d(SdaiInstance instance) => new axis2_placement_3d(instance);

        /// <summary>
        /// Create new instace of axis2_placement_3d and returns object of this class to interact with
        /// </summary>
        public static new axis2_placement_3d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "axis2_placement_3d"); Debug.Assert(inst != 0); return inst; }

        public direction get_axis() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _axis { get { return get_axis(); } }
        public void put_axis(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }
        public direction get_ref_direction() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _ref_direction { get { return get_ref_direction(); } }
        public void put_ref_direction(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "axis2_placement_3d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve(SdaiInstance instance) : base(instance) { }
        public curve() : base(0) { }

        public static implicit operator curve(SdaiInstance instance) => new curve(instance);

        /// <summary>
        /// Create new instace of curve and returns object of this class to interact with
        /// </summary>
        public static new curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_curve : curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_curve(SdaiInstance instance) : base(instance) { }
        public bounded_curve() : base(0) { }

        public static implicit operator bounded_curve(SdaiInstance instance) => new bounded_curve(instance);

        /// <summary>
        /// Create new instace of bounded_curve and returns object of this class to interact with
        /// </summary>
        public static new bounded_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "bounded_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_curve : bounded_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_curve(SdaiInstance instance) : base(instance) { }
        public b_spline_curve() : base(0) { }

        public static implicit operator b_spline_curve(SdaiInstance instance) => new b_spline_curve(instance);

        /// <summary>
        /// Create new instace of b_spline_curve and returns object of this class to interact with
        /// </summary>
        public static new b_spline_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_curve"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_degree() { return get_IntValue("degree", ifcengine.sdaiINTEGER);}
        public IntValue? _degree { get { return get_degree(); } }
        public void put_degree(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "degree", ifcengine.sdaiINTEGER, ref value); }
        public list_of_cartesian_point get_control_points_list() { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points_list"); }
        public list_of_cartesian_point _control_points_list { get { return get_control_points_list(); } }
        public void put_control_points_list(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        //public void put_control_points_list_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public b_spline_curve_form? get_curve_form() { var str = get_string("curve_form", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.b_spline_curve_form_); return EnumValue<b_spline_curve_form>.FromIndex(ind); }
        public b_spline_curve_form? _curve_form { get { return get_curve_form(); } }
        public void put_curve_form(b_spline_curve_form value) { var str = EnumString<b_spline_curve_form>.FromValue(value, EnumNames.b_spline_curve_form_); ifcengine.sdaiPutAttrBN(m_instance, "curve_form", ifcengine.sdaiENUM, str); }
        public LOGICAL_VALUE? get_closed_curve() { var str = get_string("closed_curve", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _closed_curve { get { return get_closed_curve(); } }
        public void put_closed_curve(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "closed_curve", ifcengine.sdaiENUM, str); }
        public LOGICAL_VALUE? get_self_intersect() { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _self_intersect { get { return get_self_intersect(); } }
        public void put_self_intersect(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "b_spline_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_curve_with_knots
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_curve_with_knots : b_spline_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_curve_with_knots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_curve_with_knots(SdaiInstance instance) : base(instance) { }
        public b_spline_curve_with_knots() : base(0) { }

        public static implicit operator b_spline_curve_with_knots(SdaiInstance instance) => new b_spline_curve_with_knots(instance);

        /// <summary>
        /// Create new instace of b_spline_curve_with_knots and returns object of this class to interact with
        /// </summary>
        public static new b_spline_curve_with_knots Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_curve_with_knots"); Debug.Assert(inst != 0); return inst; }

        public ListOfIntValue get_knot_multiplicities() { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "knot_multiplicities"); }
        public ListOfIntValue _knot_multiplicities { get { return get_knot_multiplicities(); } }
        public void put_knot_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "knot_multiplicities"); }
        //public void put_knot_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "knot_multiplicities"); }
        public list_of_parameter_value get_knots() { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "knots"); }
        public list_of_parameter_value _knots { get { return get_knots(); } }
        public void put_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "knots"); }
        //public void put_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "knots"); }
        public knot_type? get_knot_spec() { var str = get_string("knot_spec", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.knot_type_); return EnumValue<knot_type>.FromIndex(ind); }
        public knot_type? _knot_spec { get { return get_knot_spec(); } }
        public void put_knot_spec(knot_type value) { var str = EnumString<knot_type>.FromValue(value, EnumNames.knot_type_); ifcengine.sdaiPutAttrBN(m_instance, "knot_spec", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "b_spline_curve_with_knots"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface(SdaiInstance instance) : base(instance) { }
        public surface() : base(0) { }

        public static implicit operator surface(SdaiInstance instance) => new surface(instance);

        /// <summary>
        /// Create new instace of surface and returns object of this class to interact with
        /// </summary>
        public static new surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_surface : surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_surface(SdaiInstance instance) : base(instance) { }
        public bounded_surface() : base(0) { }

        public static implicit operator bounded_surface(SdaiInstance instance) => new bounded_surface(instance);

        /// <summary>
        /// Create new instace of bounded_surface and returns object of this class to interact with
        /// </summary>
        public static new bounded_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "bounded_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_surface : bounded_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_surface(SdaiInstance instance) : base(instance) { }
        public b_spline_surface() : base(0) { }

        public static implicit operator b_spline_surface(SdaiInstance instance) => new b_spline_surface(instance);

        /// <summary>
        /// Create new instace of b_spline_surface and returns object of this class to interact with
        /// </summary>
        public static new b_spline_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_surface"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_u_degree() { return get_IntValue("u_degree", ifcengine.sdaiINTEGER);}
        public IntValue? _u_degree { get { return get_u_degree(); } }
        public void put_u_degree(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "u_degree", ifcengine.sdaiINTEGER, ref value); }
        public IntValue? get_v_degree() { return get_IntValue("v_degree", ifcengine.sdaiINTEGER);}
        public IntValue? _v_degree { get { return get_v_degree(); } }
        public void put_v_degree(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "v_degree", ifcengine.sdaiINTEGER, ref value); }
        public list_of_list_of_cartesian_point get_control_points_list() { return (new list_of_list_of_cartesian_pointSerializer()).FromAttr(m_instance, "control_points_list"); }
        public list_of_list_of_cartesian_point _control_points_list { get { return get_control_points_list(); } }
        public void put_control_points_list(IEnumerable<list_of_cartesian_point> lst) { (new list_of_list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        //public void put_control_points_list_untyped(IEnumerable lst) { (new list_of_list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "control_points_list"); }
        public b_spline_surface_form? get_surface_form() { var str = get_string("surface_form", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.b_spline_surface_form_); return EnumValue<b_spline_surface_form>.FromIndex(ind); }
        public b_spline_surface_form? _surface_form { get { return get_surface_form(); } }
        public void put_surface_form(b_spline_surface_form value) { var str = EnumString<b_spline_surface_form>.FromValue(value, EnumNames.b_spline_surface_form_); ifcengine.sdaiPutAttrBN(m_instance, "surface_form", ifcengine.sdaiENUM, str); }
        public LOGICAL_VALUE? get_u_closed() { var str = get_string("u_closed", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _u_closed { get { return get_u_closed(); } }
        public void put_u_closed(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "u_closed", ifcengine.sdaiENUM, str); }
        public LOGICAL_VALUE? get_v_closed() { var str = get_string("v_closed", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _v_closed { get { return get_v_closed(); } }
        public void put_v_closed(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "v_closed", ifcengine.sdaiENUM, str); }
        public LOGICAL_VALUE? get_self_intersect() { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _self_intersect { get { return get_self_intersect(); } }
        public void put_self_intersect(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "b_spline_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of b_spline_surface_with_knots
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class b_spline_surface_with_knots : b_spline_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of b_spline_surface_with_knots
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public b_spline_surface_with_knots(SdaiInstance instance) : base(instance) { }
        public b_spline_surface_with_knots() : base(0) { }

        public static implicit operator b_spline_surface_with_knots(SdaiInstance instance) => new b_spline_surface_with_knots(instance);

        /// <summary>
        /// Create new instace of b_spline_surface_with_knots and returns object of this class to interact with
        /// </summary>
        public static new b_spline_surface_with_knots Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "b_spline_surface_with_knots"); Debug.Assert(inst != 0); return inst; }

        public ListOfIntValue get_u_multiplicities() { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "u_multiplicities"); }
        public ListOfIntValue _u_multiplicities { get { return get_u_multiplicities(); } }
        public void put_u_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "u_multiplicities"); }
        //public void put_u_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "u_multiplicities"); }
        public ListOfIntValue get_v_multiplicities() { return (new ListOfIntValueSerializer()).FromAttr(m_instance, "v_multiplicities"); }
        public ListOfIntValue _v_multiplicities { get { return get_v_multiplicities(); } }
        public void put_v_multiplicities(IEnumerable<IntValue> lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "v_multiplicities"); }
        //public void put_v_multiplicities_untyped(IEnumerable lst) { (new ListOfIntValueSerializer()).ToSdaiAggr(lst, m_instance, "v_multiplicities"); }
        public list_of_parameter_value get_u_knots() { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "u_knots"); }
        public list_of_parameter_value _u_knots { get { return get_u_knots(); } }
        public void put_u_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "u_knots"); }
        //public void put_u_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "u_knots"); }
        public list_of_parameter_value get_v_knots() { return (new list_of_parameter_valueSerializer()).FromAttr(m_instance, "v_knots"); }
        public list_of_parameter_value _v_knots { get { return get_v_knots(); } }
        public void put_v_knots(IEnumerable<double> lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "v_knots"); }
        //public void put_v_knots_untyped(IEnumerable lst) { (new list_of_parameter_valueSerializer()).ToSdaiAggr(lst, m_instance, "v_knots"); }
        public knot_type? get_knot_spec() { var str = get_string("knot_spec", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.knot_type_); return EnumValue<knot_type>.FromIndex(ind); }
        public knot_type? _knot_spec { get { return get_knot_spec(); } }
        public void put_knot_spec(knot_type value) { var str = EnumString<knot_type>.FromValue(value, EnumNames.knot_type_); ifcengine.sdaiPutAttrBN(m_instance, "knot_spec", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "b_spline_surface_with_knots"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition(SdaiInstance instance) : base(instance) { }
        public product_definition() : base(0) { }

        public static implicit operator product_definition(SdaiInstance instance) => new product_definition(instance);

        /// <summary>
        /// Create new instace of product_definition and returns object of this class to interact with
        /// </summary>
        public static new product_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product_definition_formation get_formation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "formation", ifcengine.sdaiINSTANCE, out inst); return new product_definition_formation (inst); }
        public product_definition_formation _formation { get { return get_formation(); } }
        public void put_formation(product_definition_formation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "formation", ifcengine.sdaiINSTANCE, i); }
        public product_definition_context get_frame_of_reference() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, out inst); return new product_definition_context (inst); }
        public product_definition_context _frame_of_reference { get { return get_frame_of_reference(); } }
        public void put_frame_of_reference(product_definition_context inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "product_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rule_software_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rule_software_definition : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rule_software_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rule_software_definition(SdaiInstance instance) : base(instance) { }
        public rule_software_definition() : base(0) { }

        public static implicit operator rule_software_definition(SdaiInstance instance) => new rule_software_definition(instance);

        /// <summary>
        /// Create new instace of rule_software_definition and returns object of this class to interact with
        /// </summary>
        public static new rule_software_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rule_software_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "rule_software_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rule_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rule_definition : rule_software_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rule_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rule_definition(SdaiInstance instance) : base(instance) { }
        public rule_definition() : base(0) { }

        public static implicit operator rule_definition(SdaiInstance instance) => new rule_definition(instance);

        /// <summary>
        /// Create new instace of rule_definition and returns object of this class to interact with
        /// </summary>
        public static new rule_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rule_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "rule_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of back_chaining_rule
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class back_chaining_rule : rule_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of back_chaining_rule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public back_chaining_rule(SdaiInstance instance) : base(instance) { }
        public back_chaining_rule() : base(0) { }

        public static implicit operator back_chaining_rule(SdaiInstance instance) => new back_chaining_rule(instance);

        /// <summary>
        /// Create new instace of back_chaining_rule and returns object of this class to interact with
        /// </summary>
        public static new back_chaining_rule Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "back_chaining_rule"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "back_chaining_rule"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of back_chaining_rule_body
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class back_chaining_rule_body : property_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of back_chaining_rule_body
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public back_chaining_rule_body(SdaiInstance instance) : base(instance) { }
        public back_chaining_rule_body() : base(0) { }

        public static implicit operator back_chaining_rule_body(SdaiInstance instance) => new back_chaining_rule_body(instance);

        /// <summary>
        /// Create new instace of back_chaining_rule_body and returns object of this class to interact with
        /// </summary>
        public static new back_chaining_rule_body Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "back_chaining_rule_body"); Debug.Assert(inst != 0); return inst; }

        public representation get_used_representation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _used_representation { get { return get_used_representation(); } }
        public void put_used_representation(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, i); }
        public set_of_representation_item get_items() { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_representation_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<representation_item> lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public representation_context get_context_of_items() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, out inst); return new representation_context (inst); }
        public representation_context _context_of_items { get { return get_context_of_items(); } }
        public void put_context_of_items(representation_context inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "back_chaining_rule_body"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class colour : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public colour(SdaiInstance instance) : base(instance) { }
        public colour() : base(0) { }

        public static implicit operator colour(SdaiInstance instance) => new colour(instance);

        /// <summary>
        /// Create new instace of colour and returns object of this class to interact with
        /// </summary>
        public static new colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "colour"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of background_colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class background_colour : colour
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of background_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public background_colour(SdaiInstance instance) : base(instance) { }
        public background_colour() : base(0) { }

        public static implicit operator background_colour(SdaiInstance instance) => new background_colour(instance);

        /// <summary>
        /// Create new instace of background_colour and returns object of this class to interact with
        /// </summary>
        public static new background_colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "background_colour"); Debug.Assert(inst != 0); return inst; }


        public area_or_view_get get_presentation() { return new area_or_view_get(m_instance, "presentation", 0); }
        public area_or_view_get _presentation { get { return new area_or_view_get(m_instance, "presentation", 0); } }
        public area_or_view_put put_presentation() { return new area_or_view_put(m_instance, "presentation", 0); }

        protected override TextValue EntityName() { return "background_colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of beveled_sheet_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class beveled_sheet_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of beveled_sheet_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public beveled_sheet_representation(SdaiInstance instance) : base(instance) { }
        public beveled_sheet_representation() : base(0) { }

        public static implicit operator beveled_sheet_representation(SdaiInstance instance) => new beveled_sheet_representation(instance);

        /// <summary>
        /// Create new instace of beveled_sheet_representation and returns object of this class to interact with
        /// </summary>
        public static new beveled_sheet_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "beveled_sheet_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "beveled_sheet_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bezier_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bezier_curve : b_spline_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bezier_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bezier_curve(SdaiInstance instance) : base(instance) { }
        public bezier_curve() : base(0) { }

        public static implicit operator bezier_curve(SdaiInstance instance) => new bezier_curve(instance);

        /// <summary>
        /// Create new instace of bezier_curve and returns object of this class to interact with
        /// </summary>
        public static new bezier_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bezier_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "bezier_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bezier_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bezier_surface : b_spline_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bezier_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bezier_surface(SdaiInstance instance) : base(instance) { }
        public bezier_surface() : base(0) { }

        public static implicit operator bezier_surface(SdaiInstance instance) => new bezier_surface(instance);

        /// <summary>
        /// Create new instace of bezier_surface and returns object of this class to interact with
        /// </summary>
        public static new bezier_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bezier_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "bezier_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of generic_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class generic_expression : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public generic_expression(SdaiInstance instance) : base(instance) { }
        public generic_expression() : base(0) { }

        public static implicit operator generic_expression(SdaiInstance instance) => new generic_expression(instance);


        protected override TextValue EntityName() { return "generic_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of binary_generic_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class binary_generic_expression : generic_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of binary_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public binary_generic_expression(SdaiInstance instance) : base(instance) { }
        public binary_generic_expression() : base(0) { }

        public static implicit operator binary_generic_expression(SdaiInstance instance) => new binary_generic_expression(instance);

        public list_of_generic_expression get_operands() { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); }
        public list_of_generic_expression _operands { get { return get_operands(); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        //public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue EntityName() { return "binary_generic_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class expression : generic_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public expression(SdaiInstance instance) : base(instance) { }
        public expression() : base(0) { }

        public static implicit operator expression(SdaiInstance instance) => new expression(instance);


        protected override TextValue EntityName() { return "expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of numeric_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class numeric_expression : expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public numeric_expression(SdaiInstance instance) : base(instance) { }
        public numeric_expression() : base(0) { }

        public static implicit operator numeric_expression(SdaiInstance instance) => new numeric_expression(instance);


        protected override TextValue EntityName() { return "numeric_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of binary_numeric_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class binary_numeric_expression : numeric_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of binary_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public binary_numeric_expression(SdaiInstance instance) : base(instance) { }
        public binary_numeric_expression() : base(0) { }

        public static implicit operator binary_numeric_expression(SdaiInstance instance) => new binary_numeric_expression(instance);

        public list_of_generic_expression get_operands() { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); }
        public list_of_generic_expression _operands { get { return get_operands(); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        //public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue EntityName() { return "binary_numeric_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of binary_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class binary_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of binary_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public binary_representation_item(SdaiInstance instance) : base(instance) { }
        public binary_representation_item() : base(0) { }

        public static implicit operator binary_representation_item(SdaiInstance instance) => new binary_representation_item(instance);

        /// <summary>
        /// Create new instace of binary_representation_item and returns object of this class to interact with
        /// </summary>
        public static new binary_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "binary_representation_item"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_binary_value() { return get_string("binary_value", ifcengine.sdaiBINARY); }
        public TextValue _binary_value { get { return get_binary_value(); } }
        public void put_binary_value(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "binary_value", ifcengine.sdaiBINARY, value); }

        protected override TextValue EntityName() { return "binary_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of block
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class block : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of block
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public block(SdaiInstance instance) : base(instance) { }
        public block() : base(0) { }

        public static implicit operator block(SdaiInstance instance) => new block(instance);

        /// <summary>
        /// Create new instace of block and returns object of this class to interact with
        /// </summary>
        public static new block Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "block"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d get_position() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d (inst); }
        public axis2_placement_3d _position { get { return get_position(); } }
        public void put_position(axis2_placement_3d inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
        public double? get_x() { return get_double("x", ifcengine.sdaiREAL);}
        public double? _x { get { return get_x(); } }
        public void put_x(double value) { ifcengine.sdaiPutAttrBN(m_instance, "x", ifcengine.sdaiREAL, ref value); }
        public double? get_y() { return get_double("y", ifcengine.sdaiREAL);}
        public double? _y { get { return get_y(); } }
        public void put_y(double value) { ifcengine.sdaiPutAttrBN(m_instance, "y", ifcengine.sdaiREAL, ref value); }
        public double? get_z() { return get_double("z", ifcengine.sdaiREAL);}
        public double? _z { get { return get_z(); } }
        public void put_z(double value) { ifcengine.sdaiPutAttrBN(m_instance, "z", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "block"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boolean_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boolean_expression : expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boolean_expression(SdaiInstance instance) : base(instance) { }
        public boolean_expression() : base(0) { }

        public static implicit operator boolean_expression(SdaiInstance instance) => new boolean_expression(instance);


        protected override TextValue EntityName() { return "boolean_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of simple_boolean_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class simple_boolean_expression : boolean_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of simple_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public simple_boolean_expression(SdaiInstance instance) : base(instance) { }
        public simple_boolean_expression() : base(0) { }

        public static implicit operator simple_boolean_expression(SdaiInstance instance) => new simple_boolean_expression(instance);


        protected override TextValue EntityName() { return "simple_boolean_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boolean_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boolean_literal : simple_boolean_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boolean_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boolean_literal(SdaiInstance instance) : base(instance) { }
        public boolean_literal() : base(0) { }

        public static implicit operator boolean_literal(SdaiInstance instance) => new boolean_literal(instance);

        /// <summary>
        /// Create new instace of boolean_literal and returns object of this class to interact with
        /// </summary>
        public static new boolean_literal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boolean_literal"); Debug.Assert(inst != 0); return inst; }

        public bool? get_the_value() { return get_bool("the_value", ifcengine.sdaiBOOLEAN);}
        public bool? _the_value { get { return get_the_value(); } }
        public void put_the_value(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "the_value", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "boolean_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boolean_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boolean_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boolean_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boolean_representation_item(SdaiInstance instance) : base(instance) { }
        public boolean_representation_item() : base(0) { }

        public static implicit operator boolean_representation_item(SdaiInstance instance) => new boolean_representation_item(instance);

        /// <summary>
        /// Create new instace of boolean_representation_item and returns object of this class to interact with
        /// </summary>
        public static new boolean_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boolean_representation_item"); Debug.Assert(inst != 0); return inst; }

        public bool? get_the_value() { return get_bool("the_value", ifcengine.sdaiBOOLEAN);}
        public bool? _the_value { get { return get_the_value(); } }
        public void put_the_value(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "the_value", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "boolean_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boolean_result
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boolean_result : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boolean_result
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boolean_result(SdaiInstance instance) : base(instance) { }
        public boolean_result() : base(0) { }

        public static implicit operator boolean_result(SdaiInstance instance) => new boolean_result(instance);

        /// <summary>
        /// Create new instace of boolean_result and returns object of this class to interact with
        /// </summary>
        public static new boolean_result Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boolean_result"); Debug.Assert(inst != 0); return inst; }

        public boolean_operator? get_operator_() { var str = get_string("operator_", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.boolean_operator_); return EnumValue<boolean_operator>.FromIndex(ind); }
        public boolean_operator? _operator_ { get { return get_operator_(); } }
        public void put_operator_(boolean_operator value) { var str = EnumString<boolean_operator>.FromValue(value, EnumNames.boolean_operator_); ifcengine.sdaiPutAttrBN(m_instance, "operator_", ifcengine.sdaiENUM, str); }

        public boolean_operand_get get_first_operand() { return new boolean_operand_get(m_instance, "first_operand", 0); }
        public boolean_operand_get _first_operand { get { return new boolean_operand_get(m_instance, "first_operand", 0); } }
        public boolean_operand_put put_first_operand() { return new boolean_operand_put(m_instance, "first_operand", 0); }

        public boolean_operand_get get_second_operand() { return new boolean_operand_get(m_instance, "second_operand", 0); }
        public boolean_operand_get _second_operand { get { return new boolean_operand_get(m_instance, "second_operand", 0); } }
        public boolean_operand_put put_second_operand() { return new boolean_operand_put(m_instance, "second_operand", 0); }

        protected override TextValue EntityName() { return "boolean_result"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_curve : bounded_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_curve(SdaiInstance instance) : base(instance) { }
        public composite_curve() : base(0) { }

        public static implicit operator composite_curve(SdaiInstance instance) => new composite_curve(instance);

        /// <summary>
        /// Create new instace of composite_curve and returns object of this class to interact with
        /// </summary>
        public static new composite_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_curve"); Debug.Assert(inst != 0); return inst; }

        public list_of_composite_curve_segment get_segments() { return (new list_of_composite_curve_segmentSerializer()).FromAttr(m_instance, "segments"); }
        public list_of_composite_curve_segment _segments { get { return get_segments(); } }
        public void put_segments(IEnumerable<composite_curve_segment> lst) { (new list_of_composite_curve_segmentSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }
        //public void put_segments_untyped(IEnumerable lst) { (new list_of_composite_curve_segmentSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }
        public LOGICAL_VALUE? get_self_intersect() { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _self_intersect { get { return get_self_intersect(); } }
        public void put_self_intersect(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "composite_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_curve_on_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_curve_on_surface : composite_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_curve_on_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_curve_on_surface(SdaiInstance instance) : base(instance) { }
        public composite_curve_on_surface() : base(0) { }

        public static implicit operator composite_curve_on_surface(SdaiInstance instance) => new composite_curve_on_surface(instance);

        /// <summary>
        /// Create new instace of composite_curve_on_surface and returns object of this class to interact with
        /// </summary>
        public static new composite_curve_on_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_curve_on_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "composite_curve_on_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boundary_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boundary_curve : composite_curve_on_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boundary_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boundary_curve(SdaiInstance instance) : base(instance) { }
        public boundary_curve() : base(0) { }

        public static implicit operator boundary_curve(SdaiInstance instance) => new boundary_curve(instance);

        /// <summary>
        /// Create new instace of boundary_curve and returns object of this class to interact with
        /// </summary>
        public static new boundary_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boundary_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "boundary_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pcurve : curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pcurve(SdaiInstance instance) : base(instance) { }
        public pcurve() : base(0) { }

        public static implicit operator pcurve(SdaiInstance instance) => new pcurve(instance);

        /// <summary>
        /// Create new instace of pcurve and returns object of this class to interact with
        /// </summary>
        public static new pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pcurve"); Debug.Assert(inst != 0); return inst; }

        public surface get_basis_surface() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface (inst); }
        public surface _basis_surface { get { return get_basis_surface(); } }
        public void put_basis_surface(surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
        public definitional_representation get_reference_to_curve() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, out inst); return new definitional_representation (inst); }
        public definitional_representation _reference_to_curve { get { return get_reference_to_curve(); } }
        public void put_reference_to_curve(definitional_representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_pcurve : pcurve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_pcurve(SdaiInstance instance) : base(instance) { }
        public bounded_pcurve() : base(0) { }

        public static implicit operator bounded_pcurve(SdaiInstance instance) => new bounded_pcurve(instance);

        /// <summary>
        /// Create new instace of bounded_pcurve and returns object of this class to interact with
        /// </summary>
        public static new bounded_pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_pcurve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "bounded_pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_curve : curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_curve(SdaiInstance instance) : base(instance) { }
        public surface_curve() : base(0) { }

        public static implicit operator surface_curve(SdaiInstance instance) => new surface_curve(instance);

        /// <summary>
        /// Create new instace of surface_curve and returns object of this class to interact with
        /// </summary>
        public static new surface_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_curve"); Debug.Assert(inst != 0); return inst; }

        public curve get_curve_3d() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_3d", ifcengine.sdaiINSTANCE, out inst); return new curve (inst); }
        public curve _curve_3d { get { return get_curve_3d(); } }
        public void put_curve_3d(curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "curve_3d", ifcengine.sdaiINSTANCE, i); }
        public list_of_pcurve_or_surface get_associated_geometry() { return (new list_of_pcurve_or_surfaceSerializer()).FromAttr(m_instance, "associated_geometry"); }
        public list_of_pcurve_or_surface _associated_geometry { get { return get_associated_geometry(); } }
        public void put_associated_geometry(IEnumerable<pcurve_or_surface> lst) { (new list_of_pcurve_or_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "associated_geometry"); }
        //public void put_associated_geometry_untyped(IEnumerable lst) { (new list_of_pcurve_or_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "associated_geometry"); }
        public preferred_surface_curve_representation? get_master_representation() { var str = get_string("master_representation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.preferred_surface_curve_representation_); return EnumValue<preferred_surface_curve_representation>.FromIndex(ind); }
        public preferred_surface_curve_representation? _master_representation { get { return get_master_representation(); } }
        public void put_master_representation(preferred_surface_curve_representation value) { var str = EnumString<preferred_surface_curve_representation>.FromValue(value, EnumNames.preferred_surface_curve_representation_); ifcengine.sdaiPutAttrBN(m_instance, "master_representation", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "surface_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bounded_surface_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bounded_surface_curve : surface_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bounded_surface_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bounded_surface_curve(SdaiInstance instance) : base(instance) { }
        public bounded_surface_curve() : base(0) { }

        public static implicit operator bounded_surface_curve(SdaiInstance instance) => new bounded_surface_curve(instance);

        /// <summary>
        /// Create new instace of bounded_surface_curve and returns object of this class to interact with
        /// </summary>
        public static new bounded_surface_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bounded_surface_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "bounded_surface_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of founded_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class founded_item : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of founded_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public founded_item(SdaiInstance instance) : base(instance) { }
        public founded_item() : base(0) { }

        public static implicit operator founded_item(SdaiInstance instance) => new founded_item(instance);

        /// <summary>
        /// Create new instace of founded_item and returns object of this class to interact with
        /// </summary>
        public static new founded_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "founded_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "founded_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of box_domain
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class box_domain : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of box_domain
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public box_domain(SdaiInstance instance) : base(instance) { }
        public box_domain() : base(0) { }

        public static implicit operator box_domain(SdaiInstance instance) => new box_domain(instance);

        /// <summary>
        /// Create new instace of box_domain and returns object of this class to interact with
        /// </summary>
        public static new box_domain Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "box_domain"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point get_corner() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "corner", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point (inst); }
        public cartesian_point _corner { get { return get_corner(); } }
        public void put_corner(cartesian_point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "corner", ifcengine.sdaiINSTANCE, i); }
        public double? get_xlength() { return get_double("xlength", ifcengine.sdaiREAL);}
        public double? _xlength { get { return get_xlength(); } }
        public void put_xlength(double value) { ifcengine.sdaiPutAttrBN(m_instance, "xlength", ifcengine.sdaiREAL, ref value); }
        public double? get_ylength() { return get_double("ylength", ifcengine.sdaiREAL);}
        public double? _ylength { get { return get_ylength(); } }
        public void put_ylength(double value) { ifcengine.sdaiPutAttrBN(m_instance, "ylength", ifcengine.sdaiREAL, ref value); }
        public double? get_zlength() { return get_double("zlength", ifcengine.sdaiREAL);}
        public double? _zlength { get { return get_zlength(); } }
        public void put_zlength(double value) { ifcengine.sdaiPutAttrBN(m_instance, "zlength", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "box_domain"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of half_space_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class half_space_solid : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of half_space_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public half_space_solid(SdaiInstance instance) : base(instance) { }
        public half_space_solid() : base(0) { }

        public static implicit operator half_space_solid(SdaiInstance instance) => new half_space_solid(instance);

        /// <summary>
        /// Create new instace of half_space_solid and returns object of this class to interact with
        /// </summary>
        public static new half_space_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "half_space_solid"); Debug.Assert(inst != 0); return inst; }

        public surface get_base_surface() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_surface", ifcengine.sdaiINSTANCE, out inst); return new surface (inst); }
        public surface _base_surface { get { return get_base_surface(); } }
        public void put_base_surface(surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "base_surface", ifcengine.sdaiINSTANCE, i); }
        public bool? get_agreement_flag() { return get_bool("agreement_flag", ifcengine.sdaiBOOLEAN);}
        public bool? _agreement_flag { get { return get_agreement_flag(); } }
        public void put_agreement_flag(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "agreement_flag", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "half_space_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of boxed_half_space
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class boxed_half_space : half_space_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of boxed_half_space
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public boxed_half_space(SdaiInstance instance) : base(instance) { }
        public boxed_half_space() : base(0) { }

        public static implicit operator boxed_half_space(SdaiInstance instance) => new boxed_half_space(instance);

        /// <summary>
        /// Create new instace of boxed_half_space and returns object of this class to interact with
        /// </summary>
        public static new boxed_half_space Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "boxed_half_space"); Debug.Assert(inst != 0); return inst; }

        public box_domain get_enclosure() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "enclosure", ifcengine.sdaiINSTANCE, out inst); return new box_domain (inst); }
        public box_domain _enclosure { get { return get_enclosure(); } }
        public void put_enclosure(box_domain inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "enclosure", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "boxed_half_space"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of breakdown_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class breakdown_context : product_definition_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of breakdown_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public breakdown_context(SdaiInstance instance) : base(instance) { }
        public breakdown_context() : base(0) { }

        public static implicit operator breakdown_context(SdaiInstance instance) => new breakdown_context(instance);

        /// <summary>
        /// Create new instace of breakdown_context and returns object of this class to interact with
        /// </summary>
        public static new breakdown_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "breakdown_context"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "breakdown_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of breakdown_element_group_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class breakdown_element_group_assignment : group_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of breakdown_element_group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public breakdown_element_group_assignment(SdaiInstance instance) : base(instance) { }
        public breakdown_element_group_assignment() : base(0) { }

        public static implicit operator breakdown_element_group_assignment(SdaiInstance instance) => new breakdown_element_group_assignment(instance);

        /// <summary>
        /// Create new instace of breakdown_element_group_assignment and returns object of this class to interact with
        /// </summary>
        public static new breakdown_element_group_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "breakdown_element_group_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_product_definition_or_breakdown_element_usage get_items() { return (new set_of_product_definition_or_breakdown_element_usageSerializer()).FromAttr(m_instance, "items"); }
        public set_of_product_definition_or_breakdown_element_usage _items { get { return get_items(); } }
        public void put_items(IEnumerable<product_definition_or_breakdown_element_usage> lst) { (new set_of_product_definition_or_breakdown_element_usageSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_product_definition_or_breakdown_element_usageSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "breakdown_element_group_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of characterized_object
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class characterized_object : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of characterized_object
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public characterized_object(SdaiInstance instance) : base(instance) { }
        public characterized_object() : base(0) { }

        public static implicit operator characterized_object(SdaiInstance instance) => new characterized_object(instance);

        /// <summary>
        /// Create new instace of characterized_object and returns object of this class to interact with
        /// </summary>
        public static new characterized_object Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "characterized_object"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "characterized_object"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of breakdown_element_realization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class breakdown_element_realization : characterized_object
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of breakdown_element_realization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public breakdown_element_realization(SdaiInstance instance) : base(instance) { }
        public breakdown_element_realization() : base(0) { }

        public static implicit operator breakdown_element_realization(SdaiInstance instance) => new breakdown_element_realization(instance);

        /// <summary>
        /// Create new instace of breakdown_element_realization and returns object of this class to interact with
        /// </summary>
        public static new breakdown_element_realization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "breakdown_element_realization"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "breakdown_element_realization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of breakdown_element_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class breakdown_element_usage : product_definition_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of breakdown_element_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public breakdown_element_usage(SdaiInstance instance) : base(instance) { }
        public breakdown_element_usage() : base(0) { }

        public static implicit operator breakdown_element_usage(SdaiInstance instance) => new breakdown_element_usage(instance);

        /// <summary>
        /// Create new instace of breakdown_element_usage and returns object of this class to interact with
        /// </summary>
        public static new breakdown_element_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "breakdown_element_usage"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "breakdown_element_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of breakdown_of
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class breakdown_of : product_definition_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of breakdown_of
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public breakdown_of(SdaiInstance instance) : base(instance) { }
        public breakdown_of() : base(0) { }

        public static implicit operator breakdown_of(SdaiInstance instance) => new breakdown_of(instance);

        /// <summary>
        /// Create new instace of breakdown_of and returns object of this class to interact with
        /// </summary>
        public static new breakdown_of Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "breakdown_of"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "breakdown_of"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_model : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_model(SdaiInstance instance) : base(instance) { }
        public solid_model() : base(0) { }

        public static implicit operator solid_model(SdaiInstance instance) => new solid_model(instance);

        /// <summary>
        /// Create new instace of solid_model and returns object of this class to interact with
        /// </summary>
        public static new solid_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_model"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "solid_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of manifold_solid_brep
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class manifold_solid_brep : solid_model
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of manifold_solid_brep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public manifold_solid_brep(SdaiInstance instance) : base(instance) { }
        public manifold_solid_brep() : base(0) { }

        public static implicit operator manifold_solid_brep(SdaiInstance instance) => new manifold_solid_brep(instance);

        /// <summary>
        /// Create new instace of manifold_solid_brep and returns object of this class to interact with
        /// </summary>
        public static new manifold_solid_brep Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "manifold_solid_brep"); Debug.Assert(inst != 0); return inst; }

        public closed_shell get_outer() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "outer", ifcengine.sdaiINSTANCE, out inst); return new closed_shell (inst); }
        public closed_shell _outer { get { return get_outer(); } }
        public void put_outer(closed_shell inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "outer", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "manifold_solid_brep"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of brep_with_voids
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class brep_with_voids : manifold_solid_brep
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of brep_with_voids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public brep_with_voids(SdaiInstance instance) : base(instance) { }
        public brep_with_voids() : base(0) { }

        public static implicit operator brep_with_voids(SdaiInstance instance) => new brep_with_voids(instance);

        /// <summary>
        /// Create new instace of brep_with_voids and returns object of this class to interact with
        /// </summary>
        public static new brep_with_voids Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "brep_with_voids"); Debug.Assert(inst != 0); return inst; }

        public set_of_oriented_closed_shell get_voids() { return (new set_of_oriented_closed_shellSerializer()).FromAttr(m_instance, "voids"); }
        public set_of_oriented_closed_shell _voids { get { return get_voids(); } }
        public void put_voids(IEnumerable<oriented_closed_shell> lst) { (new set_of_oriented_closed_shellSerializer()).ToSdaiAggr(lst, m_instance, "voids"); }
        //public void put_voids_untyped(IEnumerable lst) { (new set_of_oriented_closed_shellSerializer()).ToSdaiAggr(lst, m_instance, "voids"); }

        protected override TextValue EntityName() { return "brep_with_voids"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of bytes_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class bytes_representation_item : binary_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of bytes_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public bytes_representation_item(SdaiInstance instance) : base(instance) { }
        public bytes_representation_item() : base(0) { }

        public static implicit operator bytes_representation_item(SdaiInstance instance) => new bytes_representation_item(instance);

        /// <summary>
        /// Create new instace of bytes_representation_item and returns object of this class to interact with
        /// </summary>
        public static new bytes_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "bytes_representation_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "bytes_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date(SdaiInstance instance) : base(instance) { }
        public date() : base(0) { }

        public static implicit operator date(SdaiInstance instance) => new date(instance);

        /// <summary>
        /// Create new instace of date and returns object of this class to interact with
        /// </summary>
        public static new date Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_year_component() { return get_IntValue("year_component", ifcengine.sdaiINTEGER);}
        public IntValue? _year_component { get { return get_year_component(); } }
        public void put_year_component(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "year_component", ifcengine.sdaiINTEGER, ref value); }

        protected override TextValue EntityName() { return "date"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of calendar_date
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class calendar_date : date
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of calendar_date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public calendar_date(SdaiInstance instance) : base(instance) { }
        public calendar_date() : base(0) { }

        public static implicit operator calendar_date(SdaiInstance instance) => new calendar_date(instance);

        /// <summary>
        /// Create new instace of calendar_date and returns object of this class to interact with
        /// </summary>
        public static new calendar_date Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "calendar_date"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_day_component() { return get_IntValue("day_component", ifcengine.sdaiINTEGER);}
        public IntValue? _day_component { get { return get_day_component(); } }
        public void put_day_component(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "day_component", ifcengine.sdaiINTEGER, ref value); }
        public IntValue? get_month_component() { return get_IntValue("month_component", ifcengine.sdaiINTEGER);}
        public IntValue? _month_component { get { return get_month_component(); } }
        public void put_month_component(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "month_component", ifcengine.sdaiINTEGER, ref value); }

        protected override TextValue EntityName() { return "calendar_date"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_image
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_image : mapped_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_image
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_image(SdaiInstance instance) : base(instance) { }
        public camera_image() : base(0) { }

        public static implicit operator camera_image(SdaiInstance instance) => new camera_image(instance);

        /// <summary>
        /// Create new instace of camera_image and returns object of this class to interact with
        /// </summary>
        public static new camera_image Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_image"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "camera_image"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_image_3d_with_scale
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_image_3d_with_scale : camera_image
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_image_3d_with_scale
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_image_3d_with_scale(SdaiInstance instance) : base(instance) { }
        public camera_image_3d_with_scale() : base(0) { }

        public static implicit operator camera_image_3d_with_scale(SdaiInstance instance) => new camera_image_3d_with_scale(instance);

        /// <summary>
        /// Create new instace of camera_image_3d_with_scale and returns object of this class to interact with
        /// </summary>
        public static new camera_image_3d_with_scale Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_image_3d_with_scale"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "camera_image_3d_with_scale"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_model : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_model(SdaiInstance instance) : base(instance) { }
        public camera_model() : base(0) { }

        public static implicit operator camera_model(SdaiInstance instance) => new camera_model(instance);


        protected override TextValue EntityName() { return "camera_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_model_d3
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_model_d3 : camera_model
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_model_d3
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_model_d3(SdaiInstance instance) : base(instance) { }
        public camera_model_d3() : base(0) { }

        public static implicit operator camera_model_d3(SdaiInstance instance) => new camera_model_d3(instance);

        /// <summary>
        /// Create new instace of camera_model_d3 and returns object of this class to interact with
        /// </summary>
        public static new camera_model_d3 Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_model_d3"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d get_view_reference_system() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "view_reference_system", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d (inst); }
        public axis2_placement_3d _view_reference_system { get { return get_view_reference_system(); } }
        public void put_view_reference_system(axis2_placement_3d inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "view_reference_system", ifcengine.sdaiINSTANCE, i); }
        public view_volume get_perspective_of_volume() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "perspective_of_volume", ifcengine.sdaiINSTANCE, out inst); return new view_volume (inst); }
        public view_volume _perspective_of_volume { get { return get_perspective_of_volume(); } }
        public void put_perspective_of_volume(view_volume inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "perspective_of_volume", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "camera_model_d3"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_model_d3_multi_clipping
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_model_d3_multi_clipping : camera_model_d3
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_model_d3_multi_clipping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_model_d3_multi_clipping(SdaiInstance instance) : base(instance) { }
        public camera_model_d3_multi_clipping() : base(0) { }

        public static implicit operator camera_model_d3_multi_clipping(SdaiInstance instance) => new camera_model_d3_multi_clipping(instance);

        /// <summary>
        /// Create new instace of camera_model_d3_multi_clipping and returns object of this class to interact with
        /// </summary>
        public static new camera_model_d3_multi_clipping Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_model_d3_multi_clipping"); Debug.Assert(inst != 0); return inst; }

        public set_of_camera_model_d3_multi_clipping_interection_select get_shape_clipping() { return (new set_of_camera_model_d3_multi_clipping_interection_selectSerializer()).FromAttr(m_instance, "shape_clipping"); }
        public set_of_camera_model_d3_multi_clipping_interection_select _shape_clipping { get { return get_shape_clipping(); } }
        public void put_shape_clipping(IEnumerable<camera_model_d3_multi_clipping_interection_select> lst) { (new set_of_camera_model_d3_multi_clipping_interection_selectSerializer()).ToSdaiAggr(lst, m_instance, "shape_clipping"); }
        //public void put_shape_clipping_untyped(IEnumerable lst) { (new set_of_camera_model_d3_multi_clipping_interection_selectSerializer()).ToSdaiAggr(lst, m_instance, "shape_clipping"); }

        protected override TextValue EntityName() { return "camera_model_d3_multi_clipping"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_model_d3_multi_clipping_intersection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_model_d3_multi_clipping_intersection : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_model_d3_multi_clipping_intersection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_model_d3_multi_clipping_intersection(SdaiInstance instance) : base(instance) { }
        public camera_model_d3_multi_clipping_intersection() : base(0) { }

        public static implicit operator camera_model_d3_multi_clipping_intersection(SdaiInstance instance) => new camera_model_d3_multi_clipping_intersection(instance);

        /// <summary>
        /// Create new instace of camera_model_d3_multi_clipping_intersection and returns object of this class to interact with
        /// </summary>
        public static new camera_model_d3_multi_clipping_intersection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_model_d3_multi_clipping_intersection"); Debug.Assert(inst != 0); return inst; }

        public set_of_camera_model_d3_multi_clipping_interection_select get_shape_clipping() { return (new set_of_camera_model_d3_multi_clipping_interection_selectSerializer()).FromAttr(m_instance, "shape_clipping"); }
        public set_of_camera_model_d3_multi_clipping_interection_select _shape_clipping { get { return get_shape_clipping(); } }
        public void put_shape_clipping(IEnumerable<camera_model_d3_multi_clipping_interection_select> lst) { (new set_of_camera_model_d3_multi_clipping_interection_selectSerializer()).ToSdaiAggr(lst, m_instance, "shape_clipping"); }
        //public void put_shape_clipping_untyped(IEnumerable lst) { (new set_of_camera_model_d3_multi_clipping_interection_selectSerializer()).ToSdaiAggr(lst, m_instance, "shape_clipping"); }

        protected override TextValue EntityName() { return "camera_model_d3_multi_clipping_intersection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_model_d3_multi_clipping_union
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_model_d3_multi_clipping_union : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_model_d3_multi_clipping_union
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_model_d3_multi_clipping_union(SdaiInstance instance) : base(instance) { }
        public camera_model_d3_multi_clipping_union() : base(0) { }

        public static implicit operator camera_model_d3_multi_clipping_union(SdaiInstance instance) => new camera_model_d3_multi_clipping_union(instance);

        /// <summary>
        /// Create new instace of camera_model_d3_multi_clipping_union and returns object of this class to interact with
        /// </summary>
        public static new camera_model_d3_multi_clipping_union Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_model_d3_multi_clipping_union"); Debug.Assert(inst != 0); return inst; }

        public set_of_camera_model_d3_multi_clipping_union_select get_shape_clipping() { return (new set_of_camera_model_d3_multi_clipping_union_selectSerializer()).FromAttr(m_instance, "shape_clipping"); }
        public set_of_camera_model_d3_multi_clipping_union_select _shape_clipping { get { return get_shape_clipping(); } }
        public void put_shape_clipping(IEnumerable<camera_model_d3_multi_clipping_union_select> lst) { (new set_of_camera_model_d3_multi_clipping_union_selectSerializer()).ToSdaiAggr(lst, m_instance, "shape_clipping"); }
        //public void put_shape_clipping_untyped(IEnumerable lst) { (new set_of_camera_model_d3_multi_clipping_union_selectSerializer()).ToSdaiAggr(lst, m_instance, "shape_clipping"); }

        protected override TextValue EntityName() { return "camera_model_d3_multi_clipping_union"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_model_d3_with_hlhsr
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_model_d3_with_hlhsr : camera_model_d3
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_model_d3_with_hlhsr
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_model_d3_with_hlhsr(SdaiInstance instance) : base(instance) { }
        public camera_model_d3_with_hlhsr() : base(0) { }

        public static implicit operator camera_model_d3_with_hlhsr(SdaiInstance instance) => new camera_model_d3_with_hlhsr(instance);

        /// <summary>
        /// Create new instace of camera_model_d3_with_hlhsr and returns object of this class to interact with
        /// </summary>
        public static new camera_model_d3_with_hlhsr Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_model_d3_with_hlhsr"); Debug.Assert(inst != 0); return inst; }

        public bool? get_hidden_line_surface_removal() { return get_bool("hidden_line_surface_removal", ifcengine.sdaiBOOLEAN);}
        public bool? _hidden_line_surface_removal { get { return get_hidden_line_surface_removal(); } }
        public void put_hidden_line_surface_removal(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "hidden_line_surface_removal", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "camera_model_d3_with_hlhsr"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_model_with_light_sources
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_model_with_light_sources : camera_model_d3
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_model_with_light_sources
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_model_with_light_sources(SdaiInstance instance) : base(instance) { }
        public camera_model_with_light_sources() : base(0) { }

        public static implicit operator camera_model_with_light_sources(SdaiInstance instance) => new camera_model_with_light_sources(instance);

        /// <summary>
        /// Create new instace of camera_model_with_light_sources and returns object of this class to interact with
        /// </summary>
        public static new camera_model_with_light_sources Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_model_with_light_sources"); Debug.Assert(inst != 0); return inst; }

        public set_of_light_source get_sources() { return (new set_of_light_sourceSerializer()).FromAttr(m_instance, "sources"); }
        public set_of_light_source _sources { get { return get_sources(); } }
        public void put_sources(IEnumerable<light_source> lst) { (new set_of_light_sourceSerializer()).ToSdaiAggr(lst, m_instance, "sources"); }
        //public void put_sources_untyped(IEnumerable lst) { (new set_of_light_sourceSerializer()).ToSdaiAggr(lst, m_instance, "sources"); }

        protected override TextValue EntityName() { return "camera_model_with_light_sources"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_map
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_map : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_map
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_map(SdaiInstance instance) : base(instance) { }
        public representation_map() : base(0) { }

        public static implicit operator representation_map(SdaiInstance instance) => new representation_map(instance);

        /// <summary>
        /// Create new instace of representation_map and returns object of this class to interact with
        /// </summary>
        public static new representation_map Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_map"); Debug.Assert(inst != 0); return inst; }

        public representation_item get_mapping_origin() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_origin", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _mapping_origin { get { return get_mapping_origin(); } }
        public void put_mapping_origin(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "mapping_origin", ifcengine.sdaiINSTANCE, i); }
        public representation get_mapped_representation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapped_representation", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _mapped_representation { get { return get_mapped_representation(); } }
        public void put_mapped_representation(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "mapped_representation", ifcengine.sdaiINSTANCE, i); }
        public set_of_mapped_item get_map_usage() { return (new set_of_mapped_itemSerializer()).FromAttr(m_instance, "map_usage"); }
        public set_of_mapped_item _map_usage { get { return get_map_usage(); } }

        protected override TextValue EntityName() { return "representation_map"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of camera_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class camera_usage : representation_map
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of camera_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public camera_usage(SdaiInstance instance) : base(instance) { }
        public camera_usage() : base(0) { }

        public static implicit operator camera_usage(SdaiInstance instance) => new camera_usage(instance);

        /// <summary>
        /// Create new instace of camera_usage and returns object of this class to interact with
        /// </summary>
        public static new camera_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "camera_usage"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "camera_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of capacitance_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class capacitance_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of capacitance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public capacitance_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public capacitance_measure_with_unit() : base(0) { }

        public static implicit operator capacitance_measure_with_unit(SdaiInstance instance) => new capacitance_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of capacitance_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new capacitance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "capacitance_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "capacitance_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of capacitance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class capacitance_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of capacitance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public capacitance_unit(SdaiInstance instance) : base(instance) { }
        public capacitance_unit() : base(0) { }

        public static implicit operator capacitance_unit(SdaiInstance instance) => new capacitance_unit(instance);

        /// <summary>
        /// Create new instace of capacitance_unit and returns object of this class to interact with
        /// </summary>
        public static new capacitance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "capacitance_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "capacitance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point(SdaiInstance instance) : base(instance) { }
        public point() : base(0) { }

        public static implicit operator point(SdaiInstance instance) => new point(instance);

        /// <summary>
        /// Create new instace of point and returns object of this class to interact with
        /// </summary>
        public static new point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_point : point
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_point(SdaiInstance instance) : base(instance) { }
        public cartesian_point() : base(0) { }

        public static implicit operator cartesian_point(SdaiInstance instance) => new cartesian_point(instance);

        /// <summary>
        /// Create new instace of cartesian_point and returns object of this class to interact with
        /// </summary>
        public static new cartesian_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_point"); Debug.Assert(inst != 0); return inst; }

        public list_of_length_measure get_coordinates() { return (new list_of_length_measureSerializer()).FromAttr(m_instance, "coordinates"); }
        public list_of_length_measure _coordinates { get { return get_coordinates(); } }
        public void put_coordinates(IEnumerable<double> lst) { (new list_of_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "coordinates"); }
        //public void put_coordinates_untyped(IEnumerable lst) { (new list_of_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "coordinates"); }

        protected override TextValue EntityName() { return "cartesian_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_transformation_operator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_transformation_operator : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_transformation_operator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_transformation_operator(SdaiInstance instance) : base(instance) { }
        public cartesian_transformation_operator() : base(0) { }

        public static implicit operator cartesian_transformation_operator(SdaiInstance instance) => new cartesian_transformation_operator(instance);

        /// <summary>
        /// Create new instace of cartesian_transformation_operator and returns object of this class to interact with
        /// </summary>
        public static new cartesian_transformation_operator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_transformation_operator"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public direction get_axis1() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis1", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _axis1 { get { return get_axis1(); } }
        public void put_axis1(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "axis1", ifcengine.sdaiINSTANCE, i); }
        public direction get_axis2() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis2", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _axis2 { get { return get_axis2(); } }
        public void put_axis2(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "axis2", ifcengine.sdaiINSTANCE, i); }
        public cartesian_point get_local_origin() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "local_origin", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point (inst); }
        public cartesian_point _local_origin { get { return get_local_origin(); } }
        public void put_local_origin(cartesian_point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "local_origin", ifcengine.sdaiINSTANCE, i); }
        public double? get_scale() { return get_double("scale", ifcengine.sdaiREAL);}
        public double? _scale { get { return get_scale(); } }
        public void put_scale(double value) { ifcengine.sdaiPutAttrBN(m_instance, "scale", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "cartesian_transformation_operator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_transformation_operator_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_transformation_operator_2d : cartesian_transformation_operator
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_transformation_operator_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_transformation_operator_2d(SdaiInstance instance) : base(instance) { }
        public cartesian_transformation_operator_2d() : base(0) { }

        public static implicit operator cartesian_transformation_operator_2d(SdaiInstance instance) => new cartesian_transformation_operator_2d(instance);

        /// <summary>
        /// Create new instace of cartesian_transformation_operator_2d and returns object of this class to interact with
        /// </summary>
        public static new cartesian_transformation_operator_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_transformation_operator_2d"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "cartesian_transformation_operator_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cartesian_transformation_operator_3d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cartesian_transformation_operator_3d : cartesian_transformation_operator
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cartesian_transformation_operator_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cartesian_transformation_operator_3d(SdaiInstance instance) : base(instance) { }
        public cartesian_transformation_operator_3d() : base(0) { }

        public static implicit operator cartesian_transformation_operator_3d(SdaiInstance instance) => new cartesian_transformation_operator_3d(instance);

        /// <summary>
        /// Create new instace of cartesian_transformation_operator_3d and returns object of this class to interact with
        /// </summary>
        public static new cartesian_transformation_operator_3d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cartesian_transformation_operator_3d"); Debug.Assert(inst != 0); return inst; }

        public direction get_axis3() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis3", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _axis3 { get { return get_axis3(); } }
        public void put_axis3(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "axis3", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "cartesian_transformation_operator_3d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cc_design_approval
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cc_design_approval : approval_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cc_design_approval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cc_design_approval(SdaiInstance instance) : base(instance) { }
        public cc_design_approval() : base(0) { }

        public static implicit operator cc_design_approval(SdaiInstance instance) => new cc_design_approval(instance);

        /// <summary>
        /// Create new instace of cc_design_approval and returns object of this class to interact with
        /// </summary>
        public static new cc_design_approval Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cc_design_approval"); Debug.Assert(inst != 0); return inst; }

        public set_of_approved_item get_items() { return (new set_of_approved_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_approved_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<approved_item> lst) { (new set_of_approved_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_approved_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "cc_design_approval"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cc_design_certification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cc_design_certification : certification_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cc_design_certification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cc_design_certification(SdaiInstance instance) : base(instance) { }
        public cc_design_certification() : base(0) { }

        public static implicit operator cc_design_certification(SdaiInstance instance) => new cc_design_certification(instance);

        /// <summary>
        /// Create new instace of cc_design_certification and returns object of this class to interact with
        /// </summary>
        public static new cc_design_certification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cc_design_certification"); Debug.Assert(inst != 0); return inst; }

        public set_of_certified_item get_items() { return (new set_of_certified_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_certified_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<certified_item> lst) { (new set_of_certified_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_certified_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "cc_design_certification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cc_design_contract
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cc_design_contract : contract_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cc_design_contract
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cc_design_contract(SdaiInstance instance) : base(instance) { }
        public cc_design_contract() : base(0) { }

        public static implicit operator cc_design_contract(SdaiInstance instance) => new cc_design_contract(instance);

        /// <summary>
        /// Create new instace of cc_design_contract and returns object of this class to interact with
        /// </summary>
        public static new cc_design_contract Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cc_design_contract"); Debug.Assert(inst != 0); return inst; }

        public set_of_contracted_item get_items() { return (new set_of_contracted_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_contracted_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<contracted_item> lst) { (new set_of_contracted_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_contracted_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "cc_design_contract"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cc_design_date_and_time_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cc_design_date_and_time_assignment : date_and_time_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cc_design_date_and_time_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cc_design_date_and_time_assignment(SdaiInstance instance) : base(instance) { }
        public cc_design_date_and_time_assignment() : base(0) { }

        public static implicit operator cc_design_date_and_time_assignment(SdaiInstance instance) => new cc_design_date_and_time_assignment(instance);

        /// <summary>
        /// Create new instace of cc_design_date_and_time_assignment and returns object of this class to interact with
        /// </summary>
        public static new cc_design_date_and_time_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cc_design_date_and_time_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_date_time_item get_items() { return (new set_of_date_time_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_date_time_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<date_time_item> lst) { (new set_of_date_time_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_date_time_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "cc_design_date_and_time_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cc_design_person_and_organization_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cc_design_person_and_organization_assignment : person_and_organization_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cc_design_person_and_organization_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cc_design_person_and_organization_assignment(SdaiInstance instance) : base(instance) { }
        public cc_design_person_and_organization_assignment() : base(0) { }

        public static implicit operator cc_design_person_and_organization_assignment(SdaiInstance instance) => new cc_design_person_and_organization_assignment(instance);

        /// <summary>
        /// Create new instace of cc_design_person_and_organization_assignment and returns object of this class to interact with
        /// </summary>
        public static new cc_design_person_and_organization_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cc_design_person_and_organization_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_cc_person_organization_item get_items() { return (new set_of_cc_person_organization_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_cc_person_organization_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<cc_person_organization_item> lst) { (new set_of_cc_person_organization_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_cc_person_organization_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "cc_design_person_and_organization_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cc_design_security_classification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cc_design_security_classification : security_classification_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cc_design_security_classification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cc_design_security_classification(SdaiInstance instance) : base(instance) { }
        public cc_design_security_classification() : base(0) { }

        public static implicit operator cc_design_security_classification(SdaiInstance instance) => new cc_design_security_classification(instance);

        /// <summary>
        /// Create new instace of cc_design_security_classification and returns object of this class to interact with
        /// </summary>
        public static new cc_design_security_classification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cc_design_security_classification"); Debug.Assert(inst != 0); return inst; }

        public set_of_cc_classified_item get_items() { return (new set_of_cc_classified_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_cc_classified_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<cc_classified_item> lst) { (new set_of_cc_classified_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_cc_classified_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "cc_design_security_classification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cc_design_specification_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cc_design_specification_reference : document_reference
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cc_design_specification_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cc_design_specification_reference(SdaiInstance instance) : base(instance) { }
        public cc_design_specification_reference() : base(0) { }

        public static implicit operator cc_design_specification_reference(SdaiInstance instance) => new cc_design_specification_reference(instance);

        /// <summary>
        /// Create new instace of cc_design_specification_reference and returns object of this class to interact with
        /// </summary>
        public static new cc_design_specification_reference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cc_design_specification_reference"); Debug.Assert(inst != 0); return inst; }

        public set_of_cc_specified_item get_items() { return (new set_of_cc_specified_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_cc_specified_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<cc_specified_item> lst) { (new set_of_cc_specified_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_cc_specified_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "cc_design_specification_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of celsius_temperature_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class celsius_temperature_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of celsius_temperature_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public celsius_temperature_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public celsius_temperature_measure_with_unit() : base(0) { }

        public static implicit operator celsius_temperature_measure_with_unit(SdaiInstance instance) => new celsius_temperature_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of celsius_temperature_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new celsius_temperature_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "celsius_temperature_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "celsius_temperature_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of centre_of_symmetry
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class centre_of_symmetry : derived_shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of centre_of_symmetry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public centre_of_symmetry(SdaiInstance instance) : base(instance) { }
        public centre_of_symmetry() : base(0) { }

        public static implicit operator centre_of_symmetry(SdaiInstance instance) => new centre_of_symmetry(instance);

        /// <summary>
        /// Create new instace of centre_of_symmetry and returns object of this class to interact with
        /// </summary>
        public static new centre_of_symmetry Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "centre_of_symmetry"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "centre_of_symmetry"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of certification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class certification : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of certification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public certification(SdaiInstance instance) : base(instance) { }
        public certification() : base(0) { }

        public static implicit operator certification(SdaiInstance instance) => new certification(instance);

        /// <summary>
        /// Create new instace of certification and returns object of this class to interact with
        /// </summary>
        public static new certification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "certification"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_purpose() { return get_string("purpose", ifcengine.sdaiSTRING); }
        public TextValue _purpose { get { return get_purpose(); } }
        public void put_purpose(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
        public certification_type get_kind() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, out inst); return new certification_type (inst); }
        public certification_type _kind { get { return get_kind(); } }
        public void put_kind(certification_type inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "certification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of certification_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class certification_type : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of certification_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public certification_type(SdaiInstance instance) : base(instance) { }
        public certification_type() : base(0) { }

        public static implicit operator certification_type(SdaiInstance instance) => new certification_type(instance);

        /// <summary>
        /// Create new instace of certification_type and returns object of this class to interact with
        /// </summary>
        public static new certification_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "certification_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "certification_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of change
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class change : action_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of change
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public change(SdaiInstance instance) : base(instance) { }
        public change() : base(0) { }

        public static implicit operator change(SdaiInstance instance) => new change(instance);

        /// <summary>
        /// Create new instace of change and returns object of this class to interact with
        /// </summary>
        public static new change Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "change"); Debug.Assert(inst != 0); return inst; }

        public set_of_work_item get_items() { return (new set_of_work_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_work_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<work_item> lst) { (new set_of_work_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_work_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "change"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of change_request
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class change_request : action_request_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of change_request
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public change_request(SdaiInstance instance) : base(instance) { }
        public change_request() : base(0) { }

        public static implicit operator change_request(SdaiInstance instance) => new change_request(instance);

        /// <summary>
        /// Create new instace of change_request and returns object of this class to interact with
        /// </summary>
        public static new change_request Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "change_request"); Debug.Assert(inst != 0); return inst; }

        public set_of_change_request_item get_items() { return (new set_of_change_request_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_change_request_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<change_request_item> lst) { (new set_of_change_request_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_change_request_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "change_request"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of character_glyph_font_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class character_glyph_font_usage : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of character_glyph_font_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public character_glyph_font_usage(SdaiInstance instance) : base(instance) { }
        public character_glyph_font_usage() : base(0) { }

        public static implicit operator character_glyph_font_usage(SdaiInstance instance) => new character_glyph_font_usage(instance);

        /// <summary>
        /// Create new instace of character_glyph_font_usage and returns object of this class to interact with
        /// </summary>
        public static new character_glyph_font_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "character_glyph_font_usage"); Debug.Assert(inst != 0); return inst; }

        public generic_character_glyph_symbol get_character() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "character", ifcengine.sdaiINSTANCE, out inst); return new generic_character_glyph_symbol (inst); }
        public generic_character_glyph_symbol _character { get { return get_character(); } }
        public void put_character(generic_character_glyph_symbol inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "character", ifcengine.sdaiINSTANCE, i); }
        public text_font get_font() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "font", ifcengine.sdaiINSTANCE, out inst); return new text_font (inst); }
        public text_font _font { get { return get_font(); } }
        public void put_font(text_font inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "font", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "character_glyph_font_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of character_glyph_style_outline
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class character_glyph_style_outline : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of character_glyph_style_outline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public character_glyph_style_outline(SdaiInstance instance) : base(instance) { }
        public character_glyph_style_outline() : base(0) { }

        public static implicit operator character_glyph_style_outline(SdaiInstance instance) => new character_glyph_style_outline(instance);

        /// <summary>
        /// Create new instace of character_glyph_style_outline and returns object of this class to interact with
        /// </summary>
        public static new character_glyph_style_outline Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "character_glyph_style_outline"); Debug.Assert(inst != 0); return inst; }

        public curve_style get_outline_style() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "outline_style", ifcengine.sdaiINSTANCE, out inst); return new curve_style (inst); }
        public curve_style _outline_style { get { return get_outline_style(); } }
        public void put_outline_style(curve_style inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "outline_style", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "character_glyph_style_outline"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of character_glyph_style_stroke
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class character_glyph_style_stroke : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of character_glyph_style_stroke
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public character_glyph_style_stroke(SdaiInstance instance) : base(instance) { }
        public character_glyph_style_stroke() : base(0) { }

        public static implicit operator character_glyph_style_stroke(SdaiInstance instance) => new character_glyph_style_stroke(instance);

        /// <summary>
        /// Create new instace of character_glyph_style_stroke and returns object of this class to interact with
        /// </summary>
        public static new character_glyph_style_stroke Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "character_glyph_style_stroke"); Debug.Assert(inst != 0); return inst; }

        public curve_style get_stroke_style() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "stroke_style", ifcengine.sdaiINSTANCE, out inst); return new curve_style (inst); }
        public curve_style _stroke_style { get { return get_stroke_style(); } }
        public void put_stroke_style(curve_style inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "stroke_style", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "character_glyph_style_stroke"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symbol_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symbol_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symbol_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symbol_representation(SdaiInstance instance) : base(instance) { }
        public symbol_representation() : base(0) { }

        public static implicit operator symbol_representation(SdaiInstance instance) => new symbol_representation(instance);

        /// <summary>
        /// Create new instace of symbol_representation and returns object of this class to interact with
        /// </summary>
        public static new symbol_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symbol_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "symbol_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of generic_character_glyph_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class generic_character_glyph_symbol : symbol_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of generic_character_glyph_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public generic_character_glyph_symbol(SdaiInstance instance) : base(instance) { }
        public generic_character_glyph_symbol() : base(0) { }

        public static implicit operator generic_character_glyph_symbol(SdaiInstance instance) => new generic_character_glyph_symbol(instance);


        protected override TextValue EntityName() { return "generic_character_glyph_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of character_glyph_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class character_glyph_symbol : generic_character_glyph_symbol
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of character_glyph_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public character_glyph_symbol(SdaiInstance instance) : base(instance) { }
        public character_glyph_symbol() : base(0) { }

        public static implicit operator character_glyph_symbol(SdaiInstance instance) => new character_glyph_symbol(instance);

        /// <summary>
        /// Create new instace of character_glyph_symbol and returns object of this class to interact with
        /// </summary>
        public static new character_glyph_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "character_glyph_symbol"); Debug.Assert(inst != 0); return inst; }

        public planar_extent get_character_box() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "character_box", ifcengine.sdaiINSTANCE, out inst); return new planar_extent (inst); }
        public planar_extent _character_box { get { return get_character_box(); } }
        public void put_character_box(planar_extent inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "character_box", ifcengine.sdaiINSTANCE, i); }
        public double? get_baseline_ratio() { return get_double("baseline_ratio", ifcengine.sdaiREAL);}
        public double? _baseline_ratio { get { return get_baseline_ratio(); } }
        public void put_baseline_ratio(double value) { ifcengine.sdaiPutAttrBN(m_instance, "baseline_ratio", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "character_glyph_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of character_glyph_symbol_outline
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class character_glyph_symbol_outline : character_glyph_symbol
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of character_glyph_symbol_outline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public character_glyph_symbol_outline(SdaiInstance instance) : base(instance) { }
        public character_glyph_symbol_outline() : base(0) { }

        public static implicit operator character_glyph_symbol_outline(SdaiInstance instance) => new character_glyph_symbol_outline(instance);

        /// <summary>
        /// Create new instace of character_glyph_symbol_outline and returns object of this class to interact with
        /// </summary>
        public static new character_glyph_symbol_outline Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "character_glyph_symbol_outline"); Debug.Assert(inst != 0); return inst; }

        public set_of_annotation_fill_area get_outlines() { return (new set_of_annotation_fill_areaSerializer()).FromAttr(m_instance, "outlines"); }
        public set_of_annotation_fill_area _outlines { get { return get_outlines(); } }
        public void put_outlines(IEnumerable<annotation_fill_area> lst) { (new set_of_annotation_fill_areaSerializer()).ToSdaiAggr(lst, m_instance, "outlines"); }
        //public void put_outlines_untyped(IEnumerable lst) { (new set_of_annotation_fill_areaSerializer()).ToSdaiAggr(lst, m_instance, "outlines"); }

        protected override TextValue EntityName() { return "character_glyph_symbol_outline"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of character_glyph_symbol_stroke
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class character_glyph_symbol_stroke : character_glyph_symbol
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of character_glyph_symbol_stroke
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public character_glyph_symbol_stroke(SdaiInstance instance) : base(instance) { }
        public character_glyph_symbol_stroke() : base(0) { }

        public static implicit operator character_glyph_symbol_stroke(SdaiInstance instance) => new character_glyph_symbol_stroke(instance);

        /// <summary>
        /// Create new instace of character_glyph_symbol_stroke and returns object of this class to interact with
        /// </summary>
        public static new character_glyph_symbol_stroke Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "character_glyph_symbol_stroke"); Debug.Assert(inst != 0); return inst; }

        public set_of_curve get_strokes() { return (new set_of_curveSerializer()).FromAttr(m_instance, "strokes"); }
        public set_of_curve _strokes { get { return get_strokes(); } }
        public void put_strokes(IEnumerable<curve> lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "strokes"); }
        //public void put_strokes_untyped(IEnumerable lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "strokes"); }

        protected override TextValue EntityName() { return "character_glyph_symbol_stroke"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of general_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class general_property : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of general_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public general_property(SdaiInstance instance) : base(instance) { }
        public general_property() : base(0) { }

        public static implicit operator general_property(SdaiInstance instance) => new general_property(instance);

        /// <summary>
        /// Create new instace of general_property and returns object of this class to interact with
        /// </summary>
        public static new general_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "general_property"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "general_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of characteristic_data_column_header
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class characteristic_data_column_header : general_property
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of characteristic_data_column_header
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public characteristic_data_column_header(SdaiInstance instance) : base(instance) { }
        public characteristic_data_column_header() : base(0) { }

        public static implicit operator characteristic_data_column_header(SdaiInstance instance) => new characteristic_data_column_header(instance);

        /// <summary>
        /// Create new instace of characteristic_data_column_header and returns object of this class to interact with
        /// </summary>
        public static new characteristic_data_column_header Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "characteristic_data_column_header"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "characteristic_data_column_header"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of general_property_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class general_property_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of general_property_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public general_property_relationship(SdaiInstance instance) : base(instance) { }
        public general_property_relationship() : base(0) { }

        public static implicit operator general_property_relationship(SdaiInstance instance) => new general_property_relationship(instance);

        /// <summary>
        /// Create new instace of general_property_relationship and returns object of this class to interact with
        /// </summary>
        public static new general_property_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "general_property_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public general_property get_relating_property() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_property", ifcengine.sdaiINSTANCE, out inst); return new general_property (inst); }
        public general_property _relating_property { get { return get_relating_property(); } }
        public void put_relating_property(general_property inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_property", ifcengine.sdaiINSTANCE, i); }
        public general_property get_related_property() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_property", ifcengine.sdaiINSTANCE, out inst); return new general_property (inst); }
        public general_property _related_property { get { return get_related_property(); } }
        public void put_related_property(general_property inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_property", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "general_property_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of characteristic_data_column_header_link
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class characteristic_data_column_header_link : general_property_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of characteristic_data_column_header_link
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public characteristic_data_column_header_link(SdaiInstance instance) : base(instance) { }
        public characteristic_data_column_header_link() : base(0) { }

        public static implicit operator characteristic_data_column_header_link(SdaiInstance instance) => new characteristic_data_column_header_link(instance);

        /// <summary>
        /// Create new instace of characteristic_data_column_header_link and returns object of this class to interact with
        /// </summary>
        public static new characteristic_data_column_header_link Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "characteristic_data_column_header_link"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "characteristic_data_column_header_link"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of characteristic_data_table_header
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class characteristic_data_table_header : general_property
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of characteristic_data_table_header
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public characteristic_data_table_header(SdaiInstance instance) : base(instance) { }
        public characteristic_data_table_header() : base(0) { }

        public static implicit operator characteristic_data_table_header(SdaiInstance instance) => new characteristic_data_table_header(instance);

        /// <summary>
        /// Create new instace of characteristic_data_table_header and returns object of this class to interact with
        /// </summary>
        public static new characteristic_data_table_header Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "characteristic_data_table_header"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "characteristic_data_table_header"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of characteristic_data_table_header_decomposition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class characteristic_data_table_header_decomposition : general_property_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of characteristic_data_table_header_decomposition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public characteristic_data_table_header_decomposition(SdaiInstance instance) : base(instance) { }
        public characteristic_data_table_header_decomposition() : base(0) { }

        public static implicit operator characteristic_data_table_header_decomposition(SdaiInstance instance) => new characteristic_data_table_header_decomposition(instance);

        /// <summary>
        /// Create new instace of characteristic_data_table_header_decomposition and returns object of this class to interact with
        /// </summary>
        public static new characteristic_data_table_header_decomposition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "characteristic_data_table_header_decomposition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "characteristic_data_table_header_decomposition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group(SdaiInstance instance) : base(instance) { }
        public group() : base(0) { }

        public static implicit operator group(SdaiInstance instance) => new group(instance);

        /// <summary>
        /// Create new instace of group and returns object of this class to interact with
        /// </summary>
        public static new group Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "group"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of characteristic_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class characteristic_type : group
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of characteristic_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public characteristic_type(SdaiInstance instance) : base(instance) { }
        public characteristic_type() : base(0) { }

        public static implicit operator characteristic_type(SdaiInstance instance) => new characteristic_type(instance);

        /// <summary>
        /// Create new instace of characteristic_type and returns object of this class to interact with
        /// </summary>
        public static new characteristic_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "characteristic_type"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "characteristic_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of characterized_class
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class characterized_class : characterized_object
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of characterized_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public characterized_class(SdaiInstance instance) : base(instance) { }
        public characterized_class() : base(0) { }

        public static implicit operator characterized_class(SdaiInstance instance) => new characterized_class(instance);

        /// <summary>
        /// Create new instace of characterized_class and returns object of this class to interact with
        /// </summary>
        public static new characterized_class Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "characterized_class"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "characterized_class"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conic : curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conic(SdaiInstance instance) : base(instance) { }
        public conic() : base(0) { }

        public static implicit operator conic(SdaiInstance instance) => new conic(instance);

        /// <summary>
        /// Create new instace of conic and returns object of this class to interact with
        /// </summary>
        public static new conic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conic"); Debug.Assert(inst != 0); return inst; }


        public axis2_placement_get get_position() { return new axis2_placement_get(m_instance, "position", 0); }
        public axis2_placement_get _position { get { return new axis2_placement_get(m_instance, "position", 0); } }
        public axis2_placement_put put_position() { return new axis2_placement_put(m_instance, "position", 0); }

        protected override TextValue EntityName() { return "conic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of circle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class circle : conic
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of circle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public circle(SdaiInstance instance) : base(instance) { }
        public circle() : base(0) { }

        public static implicit operator circle(SdaiInstance instance) => new circle(instance);

        /// <summary>
        /// Create new instace of circle and returns object of this class to interact with
        /// </summary>
        public static new circle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "circle"); Debug.Assert(inst != 0); return inst; }

        public double? get_radius() { return get_double("radius", ifcengine.sdaiREAL);}
        public double? _radius { get { return get_radius(); } }
        public void put_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "circle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of circular_runout_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class circular_runout_tolerance : geometric_tolerance_with_datum_reference
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of circular_runout_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public circular_runout_tolerance(SdaiInstance instance) : base(instance) { }
        public circular_runout_tolerance() : base(0) { }

        public static implicit operator circular_runout_tolerance(SdaiInstance instance) => new circular_runout_tolerance(instance);

        /// <summary>
        /// Create new instace of circular_runout_tolerance and returns object of this class to interact with
        /// </summary>
        public static new circular_runout_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "circular_runout_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "circular_runout_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of class_
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class class_ : group
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of class_
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public class_(SdaiInstance instance) : base(instance) { }
        public class_() : base(0) { }

        public static implicit operator class_(SdaiInstance instance) => new class_(instance);

        /// <summary>
        /// Create new instace of class_ and returns object of this class to interact with
        /// </summary>
        public static new class_ Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "class_"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "class_"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of class_by_extension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class class_by_extension : class_
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of class_by_extension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public class_by_extension(SdaiInstance instance) : base(instance) { }
        public class_by_extension() : base(0) { }

        public static implicit operator class_by_extension(SdaiInstance instance) => new class_by_extension(instance);

        /// <summary>
        /// Create new instace of class_by_extension and returns object of this class to interact with
        /// </summary>
        public static new class_by_extension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "class_by_extension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "class_by_extension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of class_by_intension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class class_by_intension : class_
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of class_by_intension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public class_by_intension(SdaiInstance instance) : base(instance) { }
        public class_by_intension() : base(0) { }

        public static implicit operator class_by_intension(SdaiInstance instance) => new class_by_intension(instance);

        /// <summary>
        /// Create new instace of class_by_intension and returns object of this class to interact with
        /// </summary>
        public static new class_by_intension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "class_by_intension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "class_by_intension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of class_system
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class class_system : group
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of class_system
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public class_system(SdaiInstance instance) : base(instance) { }
        public class_system() : base(0) { }

        public static implicit operator class_system(SdaiInstance instance) => new class_system(instance);

        /// <summary>
        /// Create new instace of class_system and returns object of this class to interact with
        /// </summary>
        public static new class_system Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "class_system"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "class_system"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of effectivity_context_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class effectivity_context_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public effectivity_context_assignment(SdaiInstance instance) : base(instance) { }
        public effectivity_context_assignment() : base(0) { }

        public static implicit operator effectivity_context_assignment(SdaiInstance instance) => new effectivity_context_assignment(instance);

        public effectivity_assignment get_assigned_effectivity_assignment() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "assigned_effectivity_assignment", ifcengine.sdaiINSTANCE, out inst); return new effectivity_assignment (inst); }
        public effectivity_assignment _assigned_effectivity_assignment { get { return get_assigned_effectivity_assignment(); } }
        public void put_assigned_effectivity_assignment(effectivity_assignment inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "assigned_effectivity_assignment", ifcengine.sdaiINSTANCE, i); }
        public effectivity_context_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new effectivity_context_role (inst); }
        public effectivity_context_role _role { get { return get_role(); } }
        public void put_role(effectivity_context_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "effectivity_context_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of class_usage_effectivity_context_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class class_usage_effectivity_context_assignment : effectivity_context_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of class_usage_effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public class_usage_effectivity_context_assignment(SdaiInstance instance) : base(instance) { }
        public class_usage_effectivity_context_assignment() : base(0) { }

        public static implicit operator class_usage_effectivity_context_assignment(SdaiInstance instance) => new class_usage_effectivity_context_assignment(instance);

        /// <summary>
        /// Create new instace of class_usage_effectivity_context_assignment and returns object of this class to interact with
        /// </summary>
        public static new class_usage_effectivity_context_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "class_usage_effectivity_context_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_class_usage_effectivity_context_item get_items() { return (new set_of_class_usage_effectivity_context_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_class_usage_effectivity_context_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<class_usage_effectivity_context_item> lst) { (new set_of_class_usage_effectivity_context_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_class_usage_effectivity_context_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "class_usage_effectivity_context_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of classification_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class classification_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of classification_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public classification_role(SdaiInstance instance) : base(instance) { }
        public classification_role() : base(0) { }

        public static implicit operator classification_role(SdaiInstance instance) => new classification_role(instance);

        /// <summary>
        /// Create new instace of classification_role and returns object of this class to interact with
        /// </summary>
        public static new classification_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "classification_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "classification_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of connected_face_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class connected_face_set : topological_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of connected_face_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public connected_face_set(SdaiInstance instance) : base(instance) { }
        public connected_face_set() : base(0) { }

        public static implicit operator connected_face_set(SdaiInstance instance) => new connected_face_set(instance);

        /// <summary>
        /// Create new instace of connected_face_set and returns object of this class to interact with
        /// </summary>
        public static new connected_face_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "connected_face_set"); Debug.Assert(inst != 0); return inst; }

        public set_of_face get_cfs_faces() { return (new set_of_faceSerializer()).FromAttr(m_instance, "cfs_faces"); }
        public set_of_face _cfs_faces { get { return get_cfs_faces(); } }
        public void put_cfs_faces(IEnumerable<face> lst) { (new set_of_faceSerializer()).ToSdaiAggr(lst, m_instance, "cfs_faces"); }
        //public void put_cfs_faces_untyped(IEnumerable lst) { (new set_of_faceSerializer()).ToSdaiAggr(lst, m_instance, "cfs_faces"); }

        protected override TextValue EntityName() { return "connected_face_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of closed_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class closed_shell : connected_face_set
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of closed_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public closed_shell(SdaiInstance instance) : base(instance) { }
        public closed_shell() : base(0) { }

        public static implicit operator closed_shell(SdaiInstance instance) => new closed_shell(instance);

        /// <summary>
        /// Create new instace of closed_shell and returns object of this class to interact with
        /// </summary>
        public static new closed_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "closed_shell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "closed_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coaxiality_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coaxiality_tolerance : geometric_tolerance_with_datum_reference
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coaxiality_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coaxiality_tolerance(SdaiInstance instance) : base(instance) { }
        public coaxiality_tolerance() : base(0) { }

        public static implicit operator coaxiality_tolerance(SdaiInstance instance) => new coaxiality_tolerance(instance);

        /// <summary>
        /// Create new instace of coaxiality_tolerance and returns object of this class to interact with
        /// </summary>
        public static new coaxiality_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "coaxiality_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "coaxiality_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of colour_specification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class colour_specification : colour
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of colour_specification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public colour_specification(SdaiInstance instance) : base(instance) { }
        public colour_specification() : base(0) { }

        public static implicit operator colour_specification(SdaiInstance instance) => new colour_specification(instance);

        /// <summary>
        /// Create new instace of colour_specification and returns object of this class to interact with
        /// </summary>
        public static new colour_specification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "colour_specification"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "colour_specification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of colour_rgb
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class colour_rgb : colour_specification
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of colour_rgb
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public colour_rgb(SdaiInstance instance) : base(instance) { }
        public colour_rgb() : base(0) { }

        public static implicit operator colour_rgb(SdaiInstance instance) => new colour_rgb(instance);

        /// <summary>
        /// Create new instace of colour_rgb and returns object of this class to interact with
        /// </summary>
        public static new colour_rgb Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "colour_rgb"); Debug.Assert(inst != 0); return inst; }

        public double? get_red() { return get_double("red", ifcengine.sdaiREAL);}
        public double? _red { get { return get_red(); } }
        public void put_red(double value) { ifcengine.sdaiPutAttrBN(m_instance, "red", ifcengine.sdaiREAL, ref value); }
        public double? get_green() { return get_double("green", ifcengine.sdaiREAL);}
        public double? _green { get { return get_green(); } }
        public void put_green(double value) { ifcengine.sdaiPutAttrBN(m_instance, "green", ifcengine.sdaiREAL, ref value); }
        public double? get_blue() { return get_double("blue", ifcengine.sdaiREAL);}
        public double? _blue { get { return get_blue(); } }
        public void put_blue(double value) { ifcengine.sdaiPutAttrBN(m_instance, "blue", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "colour_rgb"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_shape_aspect
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_shape_aspect : shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_shape_aspect(SdaiInstance instance) : base(instance) { }
        public composite_shape_aspect() : base(0) { }

        public static implicit operator composite_shape_aspect(SdaiInstance instance) => new composite_shape_aspect(instance);

        /// <summary>
        /// Create new instace of composite_shape_aspect and returns object of this class to interact with
        /// </summary>
        public static new composite_shape_aspect Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_shape_aspect"); Debug.Assert(inst != 0); return inst; }

        public set_of_shape_aspect_relationship get_component_relationships() { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "component_relationships"); }
        public set_of_shape_aspect_relationship _component_relationships { get { return get_component_relationships(); } }

        protected override TextValue EntityName() { return "composite_shape_aspect"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of common_datum
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class common_datum : composite_shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of common_datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public common_datum(SdaiInstance instance) : base(instance) { }
        public common_datum() : base(0) { }

        public static implicit operator common_datum(SdaiInstance instance) => new common_datum(instance);

        /// <summary>
        /// Create new instace of common_datum and returns object of this class to interact with
        /// </summary>
        public static new common_datum Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "common_datum"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_identification() { return get_string("identification", ifcengine.sdaiSTRING); }
        public TextValue _identification { get { return get_identification(); } }
        public void put_identification(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "identification", ifcengine.sdaiSTRING, value); }
        public set_of_shape_aspect_relationship get_established_by_relationships() { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "established_by_relationships"); }
        public set_of_shape_aspect_relationship _established_by_relationships { get { return get_established_by_relationships(); } }

        protected override TextValue EntityName() { return "common_datum"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of comparison_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class comparison_expression : boolean_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of comparison_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public comparison_expression(SdaiInstance instance) : base(instance) { }
        public comparison_expression() : base(0) { }

        public static implicit operator comparison_expression(SdaiInstance instance) => new comparison_expression(instance);

        public list_of_generic_expression get_operands() { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); }
        public list_of_generic_expression _operands { get { return get_operands(); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        //public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue EntityName() { return "comparison_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of complex_clause
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class complex_clause : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of complex_clause
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public complex_clause(SdaiInstance instance) : base(instance) { }
        public complex_clause() : base(0) { }

        public static implicit operator complex_clause(SdaiInstance instance) => new complex_clause(instance);

        /// <summary>
        /// Create new instace of complex_clause and returns object of this class to interact with
        /// </summary>
        public static new complex_clause Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "complex_clause"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "complex_clause"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of complex_conjunctive_clause
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class complex_conjunctive_clause : complex_clause
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of complex_conjunctive_clause
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public complex_conjunctive_clause(SdaiInstance instance) : base(instance) { }
        public complex_conjunctive_clause() : base(0) { }

        public static implicit operator complex_conjunctive_clause(SdaiInstance instance) => new complex_conjunctive_clause(instance);

        /// <summary>
        /// Create new instace of complex_conjunctive_clause and returns object of this class to interact with
        /// </summary>
        public static new complex_conjunctive_clause Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "complex_conjunctive_clause"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "complex_conjunctive_clause"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of complex_disjunctive_clause
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class complex_disjunctive_clause : complex_clause
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of complex_disjunctive_clause
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public complex_disjunctive_clause(SdaiInstance instance) : base(instance) { }
        public complex_disjunctive_clause() : base(0) { }

        public static implicit operator complex_disjunctive_clause(SdaiInstance instance) => new complex_disjunctive_clause(instance);

        /// <summary>
        /// Create new instace of complex_disjunctive_clause and returns object of this class to interact with
        /// </summary>
        public static new complex_disjunctive_clause Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "complex_disjunctive_clause"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "complex_disjunctive_clause"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of modified_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class modified_solid : solid_model
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of modified_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public modified_solid(SdaiInstance instance) : base(instance) { }
        public modified_solid() : base(0) { }

        public static implicit operator modified_solid(SdaiInstance instance) => new modified_solid(instance);

        public TextValue get_rationale() { return get_string("rationale", ifcengine.sdaiSTRING); }
        public TextValue _rationale { get { return get_rationale(); } }
        public void put_rationale(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "rationale", ifcengine.sdaiSTRING, value); }

        public base_solid_select_get get_base_solid() { return new base_solid_select_get(m_instance, "base_solid", 0); }
        public base_solid_select_get _base_solid { get { return new base_solid_select_get(m_instance, "base_solid", 0); } }
        public base_solid_select_put put_base_solid() { return new base_solid_select_put(m_instance, "base_solid", 0); }

        protected override TextValue EntityName() { return "modified_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shelled_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shelled_solid : modified_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shelled_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shelled_solid(SdaiInstance instance) : base(instance) { }
        public shelled_solid() : base(0) { }

        public static implicit operator shelled_solid(SdaiInstance instance) => new shelled_solid(instance);

        /// <summary>
        /// Create new instace of shelled_solid and returns object of this class to interact with
        /// </summary>
        public static new shelled_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shelled_solid"); Debug.Assert(inst != 0); return inst; }

        public set_of_face_surface get_deleted_face_set() { return (new set_of_face_surfaceSerializer()).FromAttr(m_instance, "deleted_face_set"); }
        public set_of_face_surface _deleted_face_set { get { return get_deleted_face_set(); } }
        public void put_deleted_face_set(IEnumerable<face_surface> lst) { (new set_of_face_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "deleted_face_set"); }
        //public void put_deleted_face_set_untyped(IEnumerable lst) { (new set_of_face_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "deleted_face_set"); }
        public double? get_thickness() { return get_double("thickness", ifcengine.sdaiREAL);}
        public double? _thickness { get { return get_thickness(); } }
        public void put_thickness(double value) { ifcengine.sdaiPutAttrBN(m_instance, "thickness", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "shelled_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of complex_shelled_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class complex_shelled_solid : shelled_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of complex_shelled_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public complex_shelled_solid(SdaiInstance instance) : base(instance) { }
        public complex_shelled_solid() : base(0) { }

        public static implicit operator complex_shelled_solid(SdaiInstance instance) => new complex_shelled_solid(instance);

        /// <summary>
        /// Create new instace of complex_shelled_solid and returns object of this class to interact with
        /// </summary>
        public static new complex_shelled_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "complex_shelled_solid"); Debug.Assert(inst != 0); return inst; }

        public set_of_list_of_face_surface get_thickened_face_list() { return (new set_of_list_of_face_surfaceSerializer()).FromAttr(m_instance, "thickened_face_list"); }
        public set_of_list_of_face_surface _thickened_face_list { get { return get_thickened_face_list(); } }
        public void put_thickened_face_list(IEnumerable<list_of_face_surface> lst) { (new set_of_list_of_face_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "thickened_face_list"); }
        //public void put_thickened_face_list_untyped(IEnumerable lst) { (new set_of_list_of_face_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "thickened_face_list"); }
        public list_of_length_measure get_thickness_list() { return (new list_of_length_measureSerializer()).FromAttr(m_instance, "thickness_list"); }
        public list_of_length_measure _thickness_list { get { return get_thickness_list(); } }
        public void put_thickness_list(IEnumerable<double> lst) { (new list_of_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "thickness_list"); }
        //public void put_thickness_list_untyped(IEnumerable lst) { (new list_of_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "thickness_list"); }

        protected override TextValue EntityName() { return "complex_shelled_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_assembly_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_assembly_definition : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_assembly_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_assembly_definition(SdaiInstance instance) : base(instance) { }
        public composite_assembly_definition() : base(0) { }

        public static implicit operator composite_assembly_definition(SdaiInstance instance) => new composite_assembly_definition(instance);

        /// <summary>
        /// Create new instace of composite_assembly_definition and returns object of this class to interact with
        /// </summary>
        public static new composite_assembly_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_assembly_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "composite_assembly_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_assembly_sequence_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_assembly_sequence_definition : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_assembly_sequence_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_assembly_sequence_definition(SdaiInstance instance) : base(instance) { }
        public composite_assembly_sequence_definition() : base(0) { }

        public static implicit operator composite_assembly_sequence_definition(SdaiInstance instance) => new composite_assembly_sequence_definition(instance);

        /// <summary>
        /// Create new instace of composite_assembly_sequence_definition and returns object of this class to interact with
        /// </summary>
        public static new composite_assembly_sequence_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_assembly_sequence_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "composite_assembly_sequence_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of laminate_table
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class laminate_table : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of laminate_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public laminate_table(SdaiInstance instance) : base(instance) { }
        public laminate_table() : base(0) { }

        public static implicit operator laminate_table(SdaiInstance instance) => new laminate_table(instance);

        /// <summary>
        /// Create new instace of laminate_table and returns object of this class to interact with
        /// </summary>
        public static new laminate_table Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "laminate_table"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "laminate_table"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of part_laminate_table
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class part_laminate_table : laminate_table
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of part_laminate_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public part_laminate_table(SdaiInstance instance) : base(instance) { }
        public part_laminate_table() : base(0) { }

        public static implicit operator part_laminate_table(SdaiInstance instance) => new part_laminate_table(instance);

        /// <summary>
        /// Create new instace of part_laminate_table and returns object of this class to interact with
        /// </summary>
        public static new part_laminate_table Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "part_laminate_table"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "part_laminate_table"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_assembly_table
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_assembly_table : part_laminate_table
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_assembly_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_assembly_table(SdaiInstance instance) : base(instance) { }
        public composite_assembly_table() : base(0) { }

        public static implicit operator composite_assembly_table(SdaiInstance instance) => new composite_assembly_table(instance);

        /// <summary>
        /// Create new instace of composite_assembly_table and returns object of this class to interact with
        /// </summary>
        public static new composite_assembly_table Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_assembly_table"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "composite_assembly_table"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_curve_segment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_curve_segment : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_curve_segment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_curve_segment(SdaiInstance instance) : base(instance) { }
        public composite_curve_segment() : base(0) { }

        public static implicit operator composite_curve_segment(SdaiInstance instance) => new composite_curve_segment(instance);

        /// <summary>
        /// Create new instace of composite_curve_segment and returns object of this class to interact with
        /// </summary>
        public static new composite_curve_segment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_curve_segment"); Debug.Assert(inst != 0); return inst; }

        public transition_code? get_transition() { var str = get_string("transition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.transition_code_); return EnumValue<transition_code>.FromIndex(ind); }
        public transition_code? _transition { get { return get_transition(); } }
        public void put_transition(transition_code value) { var str = EnumString<transition_code>.FromValue(value, EnumNames.transition_code_); ifcengine.sdaiPutAttrBN(m_instance, "transition", ifcengine.sdaiENUM, str); }
        public bool? get_same_sense() { return get_bool("same_sense", ifcengine.sdaiBOOLEAN);}
        public bool? _same_sense { get { return get_same_sense(); } }
        public void put_same_sense(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "same_sense", ifcengine.sdaiBOOLEAN, ref value); }
        public curve get_parent_curve() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, out inst); return new curve (inst); }
        public curve _parent_curve { get { return get_parent_curve(); } }
        public void put_parent_curve(curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, i); }
        public bag_of_composite_curve get_using_curves() { return (new bag_of_composite_curveSerializer()).FromAttr(m_instance, "using_curves"); }
        public bag_of_composite_curve _using_curves { get { return get_using_curves(); } }

        protected override TextValue EntityName() { return "composite_curve_segment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_designation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_designation : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_designation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_designation(SdaiInstance instance) : base(instance) { }
        public material_designation() : base(0) { }

        public static implicit operator material_designation(SdaiInstance instance) => new material_designation(instance);

        /// <summary>
        /// Create new instace of material_designation and returns object of this class to interact with
        /// </summary>
        public static new material_designation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_designation"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public set_of_characterized_definition get_definitions() { return (new set_of_characterized_definitionSerializer()).FromAttr(m_instance, "definitions"); }
        public set_of_characterized_definition _definitions { get { return get_definitions(); } }
        public void put_definitions(IEnumerable<characterized_definition> lst) { (new set_of_characterized_definitionSerializer()).ToSdaiAggr(lst, m_instance, "definitions"); }
        //public void put_definitions_untyped(IEnumerable lst) { (new set_of_characterized_definitionSerializer()).ToSdaiAggr(lst, m_instance, "definitions"); }

        protected override TextValue EntityName() { return "material_designation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_material_designation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_material_designation : material_designation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_material_designation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_material_designation(SdaiInstance instance) : base(instance) { }
        public composite_material_designation() : base(0) { }

        public static implicit operator composite_material_designation(SdaiInstance instance) => new composite_material_designation(instance);

        /// <summary>
        /// Create new instace of composite_material_designation and returns object of this class to interact with
        /// </summary>
        public static new composite_material_designation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_material_designation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "composite_material_designation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_sheet_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_sheet_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_sheet_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_sheet_representation(SdaiInstance instance) : base(instance) { }
        public composite_sheet_representation() : base(0) { }

        public static implicit operator composite_sheet_representation(SdaiInstance instance) => new composite_sheet_representation(instance);

        /// <summary>
        /// Create new instace of composite_sheet_representation and returns object of this class to interact with
        /// </summary>
        public static new composite_sheet_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_sheet_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "composite_sheet_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_text
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_text : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_text
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_text(SdaiInstance instance) : base(instance) { }
        public composite_text() : base(0) { }

        public static implicit operator composite_text(SdaiInstance instance) => new composite_text(instance);

        /// <summary>
        /// Create new instace of composite_text and returns object of this class to interact with
        /// </summary>
        public static new composite_text Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_text"); Debug.Assert(inst != 0); return inst; }

        public set_of_text_or_character get_collected_text() { return (new set_of_text_or_characterSerializer()).FromAttr(m_instance, "collected_text"); }
        public set_of_text_or_character _collected_text { get { return get_collected_text(); } }
        public void put_collected_text(IEnumerable<text_or_character> lst) { (new set_of_text_or_characterSerializer()).ToSdaiAggr(lst, m_instance, "collected_text"); }
        //public void put_collected_text_untyped(IEnumerable lst) { (new set_of_text_or_characterSerializer()).ToSdaiAggr(lst, m_instance, "collected_text"); }

        protected override TextValue EntityName() { return "composite_text"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_text_with_associated_curves
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_text_with_associated_curves : composite_text
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_text_with_associated_curves
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_text_with_associated_curves(SdaiInstance instance) : base(instance) { }
        public composite_text_with_associated_curves() : base(0) { }

        public static implicit operator composite_text_with_associated_curves(SdaiInstance instance) => new composite_text_with_associated_curves(instance);

        /// <summary>
        /// Create new instace of composite_text_with_associated_curves and returns object of this class to interact with
        /// </summary>
        public static new composite_text_with_associated_curves Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_text_with_associated_curves"); Debug.Assert(inst != 0); return inst; }

        public set_of_curve get_associated_curves() { return (new set_of_curveSerializer()).FromAttr(m_instance, "associated_curves"); }
        public set_of_curve _associated_curves { get { return get_associated_curves(); } }
        public void put_associated_curves(IEnumerable<curve> lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "associated_curves"); }
        //public void put_associated_curves_untyped(IEnumerable lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "associated_curves"); }

        protected override TextValue EntityName() { return "composite_text_with_associated_curves"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_text_with_blanking_box
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_text_with_blanking_box : composite_text
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_text_with_blanking_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_text_with_blanking_box(SdaiInstance instance) : base(instance) { }
        public composite_text_with_blanking_box() : base(0) { }

        public static implicit operator composite_text_with_blanking_box(SdaiInstance instance) => new composite_text_with_blanking_box(instance);

        /// <summary>
        /// Create new instace of composite_text_with_blanking_box and returns object of this class to interact with
        /// </summary>
        public static new composite_text_with_blanking_box Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_text_with_blanking_box"); Debug.Assert(inst != 0); return inst; }

        public planar_box get_blanking() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "blanking", ifcengine.sdaiINSTANCE, out inst); return new planar_box (inst); }
        public planar_box _blanking { get { return get_blanking(); } }
        public void put_blanking(planar_box inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "blanking", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "composite_text_with_blanking_box"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_text_with_delineation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_text_with_delineation : composite_text
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_text_with_delineation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_text_with_delineation(SdaiInstance instance) : base(instance) { }
        public composite_text_with_delineation() : base(0) { }

        public static implicit operator composite_text_with_delineation(SdaiInstance instance) => new composite_text_with_delineation(instance);

        /// <summary>
        /// Create new instace of composite_text_with_delineation and returns object of this class to interact with
        /// </summary>
        public static new composite_text_with_delineation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_text_with_delineation"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_delineation() { return get_string("delineation", ifcengine.sdaiSTRING); }
        public TextValue _delineation { get { return get_delineation(); } }
        public void put_delineation(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "delineation", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "composite_text_with_delineation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of composite_text_with_extent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class composite_text_with_extent : composite_text
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of composite_text_with_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public composite_text_with_extent(SdaiInstance instance) : base(instance) { }
        public composite_text_with_extent() : base(0) { }

        public static implicit operator composite_text_with_extent(SdaiInstance instance) => new composite_text_with_extent(instance);

        /// <summary>
        /// Create new instace of composite_text_with_extent and returns object of this class to interact with
        /// </summary>
        public static new composite_text_with_extent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "composite_text_with_extent"); Debug.Assert(inst != 0); return inst; }

        public planar_extent get_extent() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extent", ifcengine.sdaiINSTANCE, out inst); return new planar_extent (inst); }
        public planar_extent _extent { get { return get_extent(); } }
        public void put_extent(planar_extent inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "extent", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "composite_text_with_extent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of compound_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class compound_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of compound_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public compound_shape_representation(SdaiInstance instance) : base(instance) { }
        public compound_shape_representation() : base(0) { }

        public static implicit operator compound_shape_representation(SdaiInstance instance) => new compound_shape_representation(instance);

        /// <summary>
        /// Create new instace of compound_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new compound_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "compound_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "compound_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of concentricity_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class concentricity_tolerance : geometric_tolerance_with_datum_reference
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of concentricity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public concentricity_tolerance(SdaiInstance instance) : base(instance) { }
        public concentricity_tolerance() : base(0) { }

        public static implicit operator concentricity_tolerance(SdaiInstance instance) => new concentricity_tolerance(instance);

        /// <summary>
        /// Create new instace of concentricity_tolerance and returns object of this class to interact with
        /// </summary>
        public static new concentricity_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "concentricity_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "concentricity_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of concept_feature_operator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class concept_feature_operator : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of concept_feature_operator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public concept_feature_operator(SdaiInstance instance) : base(instance) { }
        public concept_feature_operator() : base(0) { }

        public static implicit operator concept_feature_operator(SdaiInstance instance) => new concept_feature_operator(instance);

        /// <summary>
        /// Create new instace of concept_feature_operator and returns object of this class to interact with
        /// </summary>
        public static new concept_feature_operator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "concept_feature_operator"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "concept_feature_operator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of concept_feature_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class concept_feature_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of concept_feature_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public concept_feature_relationship(SdaiInstance instance) : base(instance) { }
        public concept_feature_relationship() : base(0) { }

        public static implicit operator concept_feature_relationship(SdaiInstance instance) => new concept_feature_relationship(instance);

        /// <summary>
        /// Create new instace of concept_feature_relationship and returns object of this class to interact with
        /// </summary>
        public static new concept_feature_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "concept_feature_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product_concept_feature get_relating_product_concept_feature() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_product_concept_feature", ifcengine.sdaiINSTANCE, out inst); return new product_concept_feature (inst); }
        public product_concept_feature _relating_product_concept_feature { get { return get_relating_product_concept_feature(); } }
        public void put_relating_product_concept_feature(product_concept_feature inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_product_concept_feature", ifcengine.sdaiINSTANCE, i); }
        public product_concept_feature get_related_product_concept_feature() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_product_concept_feature", ifcengine.sdaiINSTANCE, out inst); return new product_concept_feature (inst); }
        public product_concept_feature _related_product_concept_feature { get { return get_related_product_concept_feature(); } }
        public void put_related_product_concept_feature(product_concept_feature inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_product_concept_feature", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "concept_feature_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of concept_feature_relationship_with_condition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class concept_feature_relationship_with_condition : concept_feature_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of concept_feature_relationship_with_condition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public concept_feature_relationship_with_condition(SdaiInstance instance) : base(instance) { }
        public concept_feature_relationship_with_condition() : base(0) { }

        public static implicit operator concept_feature_relationship_with_condition(SdaiInstance instance) => new concept_feature_relationship_with_condition(instance);

        /// <summary>
        /// Create new instace of concept_feature_relationship_with_condition and returns object of this class to interact with
        /// </summary>
        public static new concept_feature_relationship_with_condition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "concept_feature_relationship_with_condition"); Debug.Assert(inst != 0); return inst; }

        public concept_feature_operator get_conditional_operator() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "conditional_operator", ifcengine.sdaiINSTANCE, out inst); return new concept_feature_operator (inst); }
        public concept_feature_operator _conditional_operator { get { return get_conditional_operator(); } }
        public void put_conditional_operator(concept_feature_operator inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "conditional_operator", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "concept_feature_relationship_with_condition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_feature : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_feature(SdaiInstance instance) : base(instance) { }
        public product_concept_feature() : base(0) { }

        public static implicit operator product_concept_feature(SdaiInstance instance) => new product_concept_feature(instance);

        /// <summary>
        /// Create new instace of product_concept_feature and returns object of this class to interact with
        /// </summary>
        public static new product_concept_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_feature"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "product_concept_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conditional_concept_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conditional_concept_feature : product_concept_feature
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conditional_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conditional_concept_feature(SdaiInstance instance) : base(instance) { }
        public conditional_concept_feature() : base(0) { }

        public static implicit operator conditional_concept_feature(SdaiInstance instance) => new conditional_concept_feature(instance);

        /// <summary>
        /// Create new instace of conditional_concept_feature and returns object of this class to interact with
        /// </summary>
        public static new conditional_concept_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conditional_concept_feature"); Debug.Assert(inst != 0); return inst; }

        public concept_feature_relationship_with_condition get_condition() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "condition", ifcengine.sdaiINSTANCE, out inst); return new concept_feature_relationship_with_condition (inst); }
        public concept_feature_relationship_with_condition _condition { get { return get_condition(); } }
        public void put_condition(concept_feature_relationship_with_condition inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "condition", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "conditional_concept_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conductance_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conductance_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conductance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conductance_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public conductance_measure_with_unit() : base(0) { }

        public static implicit operator conductance_measure_with_unit(SdaiInstance instance) => new conductance_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of conductance_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new conductance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conductance_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "conductance_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conductance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conductance_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conductance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conductance_unit(SdaiInstance instance) : base(instance) { }
        public conductance_unit() : base(0) { }

        public static implicit operator conductance_unit(SdaiInstance instance) => new conductance_unit(instance);

        /// <summary>
        /// Create new instace of conductance_unit and returns object of this class to interact with
        /// </summary>
        public static new conductance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conductance_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "conductance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configuration_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configuration_item : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configuration_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configuration_item(SdaiInstance instance) : base(instance) { }
        public configuration_item() : base(0) { }

        public static implicit operator configuration_item(SdaiInstance instance) => new configuration_item(instance);

        /// <summary>
        /// Create new instace of configuration_item and returns object of this class to interact with
        /// </summary>
        public static new configuration_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configuration_item"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product_concept get_item_concept() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "item_concept", ifcengine.sdaiINSTANCE, out inst); return new product_concept (inst); }
        public product_concept _item_concept { get { return get_item_concept(); } }
        public void put_item_concept(product_concept inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "item_concept", ifcengine.sdaiINSTANCE, i); }
        public TextValue get_purpose() { return get_string("purpose", ifcengine.sdaiSTRING); }
        public TextValue _purpose { get { return get_purpose(); } }
        public void put_purpose(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "configuration_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configurable_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configurable_item : configuration_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configurable_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configurable_item(SdaiInstance instance) : base(instance) { }
        public configurable_item() : base(0) { }

        public static implicit operator configurable_item(SdaiInstance instance) => new configurable_item(instance);

        /// <summary>
        /// Create new instace of configurable_item and returns object of this class to interact with
        /// </summary>
        public static new configurable_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configurable_item"); Debug.Assert(inst != 0); return inst; }

        public set_of_product_concept_feature_association get_item_concept_feature() { return (new set_of_product_concept_feature_associationSerializer()).FromAttr(m_instance, "item_concept_feature"); }
        public set_of_product_concept_feature_association _item_concept_feature { get { return get_item_concept_feature(); } }
        public void put_item_concept_feature(IEnumerable<product_concept_feature_association> lst) { (new set_of_product_concept_feature_associationSerializer()).ToSdaiAggr(lst, m_instance, "item_concept_feature"); }
        //public void put_item_concept_feature_untyped(IEnumerable lst) { (new set_of_product_concept_feature_associationSerializer()).ToSdaiAggr(lst, m_instance, "item_concept_feature"); }

        protected override TextValue EntityName() { return "configurable_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configuration_design
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configuration_design : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configuration_design
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configuration_design(SdaiInstance instance) : base(instance) { }
        public configuration_design() : base(0) { }

        public static implicit operator configuration_design(SdaiInstance instance) => new configuration_design(instance);

        /// <summary>
        /// Create new instace of configuration_design and returns object of this class to interact with
        /// </summary>
        public static new configuration_design Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configuration_design"); Debug.Assert(inst != 0); return inst; }

        public configuration_item get_configuration() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "configuration", ifcengine.sdaiINSTANCE, out inst); return new configuration_item (inst); }
        public configuration_item _configuration { get { return get_configuration(); } }
        public void put_configuration(configuration_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "configuration", ifcengine.sdaiINSTANCE, i); }

        public configuration_design_item_get get_design() { return new configuration_design_item_get(m_instance, "design", 0); }
        public configuration_design_item_get _design { get { return new configuration_design_item_get(m_instance, "design", 0); } }
        public configuration_design_item_put put_design() { return new configuration_design_item_put(m_instance, "design", 0); }

        protected override TextValue EntityName() { return "configuration_design"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class effectivity : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public effectivity(SdaiInstance instance) : base(instance) { }
        public effectivity() : base(0) { }

        public static implicit operator effectivity(SdaiInstance instance) => new effectivity(instance);

        /// <summary>
        /// Create new instace of effectivity and returns object of this class to interact with
        /// </summary>
        public static new effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "effectivity"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_effectivity : effectivity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_effectivity(SdaiInstance instance) : base(instance) { }
        public product_definition_effectivity() : base(0) { }

        public static implicit operator product_definition_effectivity(SdaiInstance instance) => new product_definition_effectivity(instance);

        /// <summary>
        /// Create new instace of product_definition_effectivity and returns object of this class to interact with
        /// </summary>
        public static new product_definition_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_effectivity"); Debug.Assert(inst != 0); return inst; }

        public product_definition_relationship get_usage() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "usage", ifcengine.sdaiINSTANCE, out inst); return new product_definition_relationship (inst); }
        public product_definition_relationship _usage { get { return get_usage(); } }
        public void put_usage(product_definition_relationship inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "usage", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "product_definition_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configuration_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configuration_effectivity : product_definition_effectivity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configuration_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configuration_effectivity(SdaiInstance instance) : base(instance) { }
        public configuration_effectivity() : base(0) { }

        public static implicit operator configuration_effectivity(SdaiInstance instance) => new configuration_effectivity(instance);

        /// <summary>
        /// Create new instace of configuration_effectivity and returns object of this class to interact with
        /// </summary>
        public static new configuration_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configuration_effectivity"); Debug.Assert(inst != 0); return inst; }

        public configuration_design get_configuration() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "configuration", ifcengine.sdaiINSTANCE, out inst); return new configuration_design (inst); }
        public configuration_design _configuration { get { return get_configuration(); } }
        public void put_configuration(configuration_design inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "configuration", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "configuration_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configuration_item_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configuration_item_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configuration_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configuration_item_relationship(SdaiInstance instance) : base(instance) { }
        public configuration_item_relationship() : base(0) { }

        public static implicit operator configuration_item_relationship(SdaiInstance instance) => new configuration_item_relationship(instance);

        /// <summary>
        /// Create new instace of configuration_item_relationship and returns object of this class to interact with
        /// </summary>
        public static new configuration_item_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configuration_item_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public configuration_item get_relating_configuration_item() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_configuration_item", ifcengine.sdaiINSTANCE, out inst); return new configuration_item (inst); }
        public configuration_item _relating_configuration_item { get { return get_relating_configuration_item(); } }
        public void put_relating_configuration_item(configuration_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_configuration_item", ifcengine.sdaiINSTANCE, i); }
        public configuration_item get_related_configuration_item() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_configuration_item", ifcengine.sdaiINSTANCE, out inst); return new configuration_item (inst); }
        public configuration_item _related_configuration_item { get { return get_related_configuration_item(); } }
        public void put_related_configuration_item(configuration_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_configuration_item", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "configuration_item_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configuration_item_hierarchical_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configuration_item_hierarchical_relationship : configuration_item_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configuration_item_hierarchical_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configuration_item_hierarchical_relationship(SdaiInstance instance) : base(instance) { }
        public configuration_item_hierarchical_relationship() : base(0) { }

        public static implicit operator configuration_item_hierarchical_relationship(SdaiInstance instance) => new configuration_item_hierarchical_relationship(instance);

        /// <summary>
        /// Create new instace of configuration_item_hierarchical_relationship and returns object of this class to interact with
        /// </summary>
        public static new configuration_item_hierarchical_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configuration_item_hierarchical_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "configuration_item_hierarchical_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configuration_item_revision_sequence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configuration_item_revision_sequence : configuration_item_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configuration_item_revision_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configuration_item_revision_sequence(SdaiInstance instance) : base(instance) { }
        public configuration_item_revision_sequence() : base(0) { }

        public static implicit operator configuration_item_revision_sequence(SdaiInstance instance) => new configuration_item_revision_sequence(instance);

        /// <summary>
        /// Create new instace of configuration_item_revision_sequence and returns object of this class to interact with
        /// </summary>
        public static new configuration_item_revision_sequence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configuration_item_revision_sequence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "configuration_item_revision_sequence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configured_effectivity_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configured_effectivity_assignment : effectivity_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configured_effectivity_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configured_effectivity_assignment(SdaiInstance instance) : base(instance) { }
        public configured_effectivity_assignment() : base(0) { }

        public static implicit operator configured_effectivity_assignment(SdaiInstance instance) => new configured_effectivity_assignment(instance);

        /// <summary>
        /// Create new instace of configured_effectivity_assignment and returns object of this class to interact with
        /// </summary>
        public static new configured_effectivity_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configured_effectivity_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_configured_effectivity_item get_items() { return (new set_of_configured_effectivity_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_configured_effectivity_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<configured_effectivity_item> lst) { (new set_of_configured_effectivity_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_configured_effectivity_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "configured_effectivity_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of configured_effectivity_context_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class configured_effectivity_context_assignment : effectivity_context_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of configured_effectivity_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public configured_effectivity_context_assignment(SdaiInstance instance) : base(instance) { }
        public configured_effectivity_context_assignment() : base(0) { }

        public static implicit operator configured_effectivity_context_assignment(SdaiInstance instance) => new configured_effectivity_context_assignment(instance);

        /// <summary>
        /// Create new instace of configured_effectivity_context_assignment and returns object of this class to interact with
        /// </summary>
        public static new configured_effectivity_context_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "configured_effectivity_context_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_configured_effectivity_context_item get_items() { return (new set_of_configured_effectivity_context_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_configured_effectivity_context_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<configured_effectivity_context_item> lst) { (new set_of_configured_effectivity_context_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_configured_effectivity_context_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "configured_effectivity_context_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conical_stepped_hole_transition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conical_stepped_hole_transition : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conical_stepped_hole_transition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conical_stepped_hole_transition(SdaiInstance instance) : base(instance) { }
        public conical_stepped_hole_transition() : base(0) { }

        public static implicit operator conical_stepped_hole_transition(SdaiInstance instance) => new conical_stepped_hole_transition(instance);

        /// <summary>
        /// Create new instace of conical_stepped_hole_transition and returns object of this class to interact with
        /// </summary>
        public static new conical_stepped_hole_transition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conical_stepped_hole_transition"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_transition_number() { return get_IntValue("transition_number", ifcengine.sdaiINTEGER);}
        public IntValue? _transition_number { get { return get_transition_number(); } }
        public void put_transition_number(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "transition_number", ifcengine.sdaiINTEGER, ref value); }
        public double? get_cone_apex_angle() { return get_double("cone_apex_angle", ifcengine.sdaiREAL);}
        public double? _cone_apex_angle { get { return get_cone_apex_angle(); } }
        public void put_cone_apex_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "cone_apex_angle", ifcengine.sdaiREAL, ref value); }
        public double? get_cone_base_radius() { return get_double("cone_base_radius", ifcengine.sdaiREAL);}
        public double? _cone_base_radius { get { return get_cone_base_radius(); } }
        public void put_cone_base_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "cone_base_radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "conical_stepped_hole_transition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of elementary_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class elementary_surface : surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of elementary_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public elementary_surface(SdaiInstance instance) : base(instance) { }
        public elementary_surface() : base(0) { }

        public static implicit operator elementary_surface(SdaiInstance instance) => new elementary_surface(instance);

        /// <summary>
        /// Create new instace of elementary_surface and returns object of this class to interact with
        /// </summary>
        public static new elementary_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "elementary_surface"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d get_position() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d (inst); }
        public axis2_placement_3d _position { get { return get_position(); } }
        public void put_position(axis2_placement_3d inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "elementary_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conical_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conical_surface : elementary_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conical_surface(SdaiInstance instance) : base(instance) { }
        public conical_surface() : base(0) { }

        public static implicit operator conical_surface(SdaiInstance instance) => new conical_surface(instance);

        /// <summary>
        /// Create new instace of conical_surface and returns object of this class to interact with
        /// </summary>
        public static new conical_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conical_surface"); Debug.Assert(inst != 0); return inst; }

        public double? get_radius() { return get_double("radius", ifcengine.sdaiREAL);}
        public double? _radius { get { return get_radius(); } }
        public void put_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref value); }
        public double? get_semi_angle() { return get_double("semi_angle", ifcengine.sdaiREAL);}
        public double? _semi_angle { get { return get_semi_angle(); } }
        public void put_semi_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "semi_angle", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "conical_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of connected_edge_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class connected_edge_set : topological_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of connected_edge_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public connected_edge_set(SdaiInstance instance) : base(instance) { }
        public connected_edge_set() : base(0) { }

        public static implicit operator connected_edge_set(SdaiInstance instance) => new connected_edge_set(instance);

        /// <summary>
        /// Create new instace of connected_edge_set and returns object of this class to interact with
        /// </summary>
        public static new connected_edge_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "connected_edge_set"); Debug.Assert(inst != 0); return inst; }

        public set_of_edge get_ces_edges() { return (new set_of_edgeSerializer()).FromAttr(m_instance, "ces_edges"); }
        public set_of_edge _ces_edges { get { return get_ces_edges(); } }
        public void put_ces_edges(IEnumerable<edge> lst) { (new set_of_edgeSerializer()).ToSdaiAggr(lst, m_instance, "ces_edges"); }
        //public void put_ces_edges_untyped(IEnumerable lst) { (new set_of_edgeSerializer()).ToSdaiAggr(lst, m_instance, "ces_edges"); }

        protected override TextValue EntityName() { return "connected_edge_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of connected_face_sub_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class connected_face_sub_set : connected_face_set
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of connected_face_sub_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public connected_face_sub_set(SdaiInstance instance) : base(instance) { }
        public connected_face_sub_set() : base(0) { }

        public static implicit operator connected_face_sub_set(SdaiInstance instance) => new connected_face_sub_set(instance);

        /// <summary>
        /// Create new instace of connected_face_sub_set and returns object of this class to interact with
        /// </summary>
        public static new connected_face_sub_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "connected_face_sub_set"); Debug.Assert(inst != 0); return inst; }

        public connected_face_set get_parent_face_set() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_face_set", ifcengine.sdaiINSTANCE, out inst); return new connected_face_set (inst); }
        public connected_face_set _parent_face_set { get { return get_parent_face_set(); } }
        public void put_parent_face_set(connected_face_set inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "parent_face_set", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "connected_face_sub_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of constructive_geometry_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class constructive_geometry_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of constructive_geometry_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public constructive_geometry_representation(SdaiInstance instance) : base(instance) { }
        public constructive_geometry_representation() : base(0) { }

        public static implicit operator constructive_geometry_representation(SdaiInstance instance) => new constructive_geometry_representation(instance);

        /// <summary>
        /// Create new instace of constructive_geometry_representation and returns object of this class to interact with
        /// </summary>
        public static new constructive_geometry_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "constructive_geometry_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "constructive_geometry_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_relationship(SdaiInstance instance) : base(instance) { }
        public representation_relationship() : base(0) { }

        public static implicit operator representation_relationship(SdaiInstance instance) => new representation_relationship(instance);

        /// <summary>
        /// Create new instace of representation_relationship and returns object of this class to interact with
        /// </summary>
        public static new representation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public representation get_rep_1() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rep_1", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _rep_1 { get { return get_rep_1(); } }
        public void put_rep_1(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "rep_1", ifcengine.sdaiINSTANCE, i); }
        public representation get_rep_2() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rep_2", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _rep_2 { get { return get_rep_2(); } }
        public void put_rep_2(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "rep_2", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "representation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of constructive_geometry_representation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class constructive_geometry_representation_relationship : representation_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of constructive_geometry_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public constructive_geometry_representation_relationship(SdaiInstance instance) : base(instance) { }
        public constructive_geometry_representation_relationship() : base(0) { }

        public static implicit operator constructive_geometry_representation_relationship(SdaiInstance instance) => new constructive_geometry_representation_relationship(instance);

        /// <summary>
        /// Create new instace of constructive_geometry_representation_relationship and returns object of this class to interact with
        /// </summary>
        public static new constructive_geometry_representation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "constructive_geometry_representation_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "constructive_geometry_representation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of contact_ratio_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class contact_ratio_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of contact_ratio_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public contact_ratio_representation(SdaiInstance instance) : base(instance) { }
        public contact_ratio_representation() : base(0) { }

        public static implicit operator contact_ratio_representation(SdaiInstance instance) => new contact_ratio_representation(instance);

        /// <summary>
        /// Create new instace of contact_ratio_representation and returns object of this class to interact with
        /// </summary>
        public static new contact_ratio_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "contact_ratio_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "contact_ratio_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of invisibility
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class invisibility : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of invisibility
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public invisibility(SdaiInstance instance) : base(instance) { }
        public invisibility() : base(0) { }

        public static implicit operator invisibility(SdaiInstance instance) => new invisibility(instance);

        /// <summary>
        /// Create new instace of invisibility and returns object of this class to interact with
        /// </summary>
        public static new invisibility Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "invisibility"); Debug.Assert(inst != 0); return inst; }

        public set_of_invisible_item get_invisible_items() { return (new set_of_invisible_itemSerializer()).FromAttr(m_instance, "invisible_items"); }
        public set_of_invisible_item _invisible_items { get { return get_invisible_items(); } }
        public void put_invisible_items(IEnumerable<invisible_item> lst) { (new set_of_invisible_itemSerializer()).ToSdaiAggr(lst, m_instance, "invisible_items"); }
        //public void put_invisible_items_untyped(IEnumerable lst) { (new set_of_invisible_itemSerializer()).ToSdaiAggr(lst, m_instance, "invisible_items"); }

        protected override TextValue EntityName() { return "invisibility"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of context_dependent_invisibility
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class context_dependent_invisibility : invisibility
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of context_dependent_invisibility
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public context_dependent_invisibility(SdaiInstance instance) : base(instance) { }
        public context_dependent_invisibility() : base(0) { }

        public static implicit operator context_dependent_invisibility(SdaiInstance instance) => new context_dependent_invisibility(instance);

        /// <summary>
        /// Create new instace of context_dependent_invisibility and returns object of this class to interact with
        /// </summary>
        public static new context_dependent_invisibility Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "context_dependent_invisibility"); Debug.Assert(inst != 0); return inst; }


        public invisibility_context_get get_presentation_context() { return new invisibility_context_get(m_instance, "presentation_context", 0); }
        public invisibility_context_get _presentation_context { get { return new invisibility_context_get(m_instance, "presentation_context", 0); } }
        public invisibility_context_put put_presentation_context() { return new invisibility_context_put(m_instance, "presentation_context", 0); }

        protected override TextValue EntityName() { return "context_dependent_invisibility"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of over_riding_styled_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class over_riding_styled_item : styled_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public over_riding_styled_item(SdaiInstance instance) : base(instance) { }
        public over_riding_styled_item() : base(0) { }

        public static implicit operator over_riding_styled_item(SdaiInstance instance) => new over_riding_styled_item(instance);

        /// <summary>
        /// Create new instace of over_riding_styled_item and returns object of this class to interact with
        /// </summary>
        public static new over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "over_riding_styled_item"); Debug.Assert(inst != 0); return inst; }

        public styled_item get_over_ridden_style() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "over_ridden_style", ifcengine.sdaiINSTANCE, out inst); return new styled_item (inst); }
        public styled_item _over_ridden_style { get { return get_over_ridden_style(); } }
        public void put_over_ridden_style(styled_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "over_ridden_style", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "over_riding_styled_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of context_dependent_over_riding_styled_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class context_dependent_over_riding_styled_item : over_riding_styled_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of context_dependent_over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public context_dependent_over_riding_styled_item(SdaiInstance instance) : base(instance) { }
        public context_dependent_over_riding_styled_item() : base(0) { }

        public static implicit operator context_dependent_over_riding_styled_item(SdaiInstance instance) => new context_dependent_over_riding_styled_item(instance);

        /// <summary>
        /// Create new instace of context_dependent_over_riding_styled_item and returns object of this class to interact with
        /// </summary>
        public static new context_dependent_over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "context_dependent_over_riding_styled_item"); Debug.Assert(inst != 0); return inst; }

        public list_of_style_context_select get_style_context() { return (new list_of_style_context_selectSerializer()).FromAttr(m_instance, "style_context"); }
        public list_of_style_context_select _style_context { get { return get_style_context(); } }
        public void put_style_context(IEnumerable<style_context_select> lst) { (new list_of_style_context_selectSerializer()).ToSdaiAggr(lst, m_instance, "style_context"); }
        //public void put_style_context_untyped(IEnumerable lst) { (new list_of_style_context_selectSerializer()).ToSdaiAggr(lst, m_instance, "style_context"); }

        protected override TextValue EntityName() { return "context_dependent_over_riding_styled_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of context_dependent_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class context_dependent_shape_representation : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of context_dependent_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public context_dependent_shape_representation(SdaiInstance instance) : base(instance) { }
        public context_dependent_shape_representation() : base(0) { }

        public static implicit operator context_dependent_shape_representation(SdaiInstance instance) => new context_dependent_shape_representation(instance);

        /// <summary>
        /// Create new instace of context_dependent_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new context_dependent_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "context_dependent_shape_representation"); Debug.Assert(inst != 0); return inst; }

        public shape_representation_relationship get_representation_relation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "representation_relation", ifcengine.sdaiINSTANCE, out inst); return new shape_representation_relationship (inst); }
        public shape_representation_relationship _representation_relation { get { return get_representation_relation(); } }
        public void put_representation_relation(shape_representation_relationship inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "representation_relation", ifcengine.sdaiINSTANCE, i); }
        public product_definition_shape get_represented_product_relation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "represented_product_relation", ifcengine.sdaiINSTANCE, out inst); return new product_definition_shape (inst); }
        public product_definition_shape _represented_product_relation { get { return get_represented_product_relation(); } }
        public void put_represented_product_relation(product_definition_shape inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "represented_product_relation", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "context_dependent_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of context_dependent_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class context_dependent_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of context_dependent_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public context_dependent_unit(SdaiInstance instance) : base(instance) { }
        public context_dependent_unit() : base(0) { }

        public static implicit operator context_dependent_unit(SdaiInstance instance) => new context_dependent_unit(instance);

        /// <summary>
        /// Create new instace of context_dependent_unit and returns object of this class to interact with
        /// </summary>
        public static new context_dependent_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "context_dependent_unit"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "context_dependent_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of contract
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class contract : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of contract
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public contract(SdaiInstance instance) : base(instance) { }
        public contract() : base(0) { }

        public static implicit operator contract(SdaiInstance instance) => new contract(instance);

        /// <summary>
        /// Create new instace of contract and returns object of this class to interact with
        /// </summary>
        public static new contract Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "contract"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_purpose() { return get_string("purpose", ifcengine.sdaiSTRING); }
        public TextValue _purpose { get { return get_purpose(); } }
        public void put_purpose(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
        public contract_type get_kind() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, out inst); return new contract_type (inst); }
        public contract_type _kind { get { return get_kind(); } }
        public void put_kind(contract_type inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "contract"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of contract_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class contract_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of contract_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public contract_relationship(SdaiInstance instance) : base(instance) { }
        public contract_relationship() : base(0) { }

        public static implicit operator contract_relationship(SdaiInstance instance) => new contract_relationship(instance);

        /// <summary>
        /// Create new instace of contract_relationship and returns object of this class to interact with
        /// </summary>
        public static new contract_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "contract_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public contract get_relating_contract() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_contract", ifcengine.sdaiINSTANCE, out inst); return new contract (inst); }
        public contract _relating_contract { get { return get_relating_contract(); } }
        public void put_relating_contract(contract inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_contract", ifcengine.sdaiINSTANCE, i); }
        public contract get_related_contract() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_contract", ifcengine.sdaiINSTANCE, out inst); return new contract (inst); }
        public contract _related_contract { get { return get_related_contract(); } }
        public void put_related_contract(contract inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_contract", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "contract_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of contract_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class contract_type : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of contract_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public contract_type(SdaiInstance instance) : base(instance) { }
        public contract_type() : base(0) { }

        public static implicit operator contract_type(SdaiInstance instance) => new contract_type(instance);

        /// <summary>
        /// Create new instace of contract_type and returns object of this class to interact with
        /// </summary>
        public static new contract_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "contract_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "contract_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of conversion_based_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class conversion_based_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of conversion_based_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public conversion_based_unit(SdaiInstance instance) : base(instance) { }
        public conversion_based_unit() : base(0) { }

        public static implicit operator conversion_based_unit(SdaiInstance instance) => new conversion_based_unit(instance);

        /// <summary>
        /// Create new instace of conversion_based_unit and returns object of this class to interact with
        /// </summary>
        public static new conversion_based_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "conversion_based_unit"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public measure_with_unit get_conversion_factor() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "conversion_factor", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _conversion_factor { get { return get_conversion_factor(); } }
        public void put_conversion_factor(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "conversion_factor", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "conversion_based_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of coordinated_universal_time_offset
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class coordinated_universal_time_offset : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of coordinated_universal_time_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public coordinated_universal_time_offset(SdaiInstance instance) : base(instance) { }
        public coordinated_universal_time_offset() : base(0) { }

        public static implicit operator coordinated_universal_time_offset(SdaiInstance instance) => new coordinated_universal_time_offset(instance);

        /// <summary>
        /// Create new instace of coordinated_universal_time_offset and returns object of this class to interact with
        /// </summary>
        public static new coordinated_universal_time_offset Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "coordinated_universal_time_offset"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_hour_offset() { return get_IntValue("hour_offset", ifcengine.sdaiINTEGER);}
        public IntValue? _hour_offset { get { return get_hour_offset(); } }
        public void put_hour_offset(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "hour_offset", ifcengine.sdaiINTEGER, ref value); }
        public IntValue? get_minute_offset() { return get_IntValue("minute_offset", ifcengine.sdaiINTEGER);}
        public IntValue? _minute_offset { get { return get_minute_offset(); } }
        public void put_minute_offset(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "minute_offset", ifcengine.sdaiINTEGER, ref value); }
        public ahead_or_behind? get_sense() { var str = get_string("sense", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.ahead_or_behind_); return EnumValue<ahead_or_behind>.FromIndex(ind); }
        public ahead_or_behind? _sense { get { return get_sense(); } }
        public void put_sense(ahead_or_behind value) { var str = EnumString<ahead_or_behind>.FromValue(value, EnumNames.ahead_or_behind_); ifcengine.sdaiPutAttrBN(m_instance, "sense", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "coordinated_universal_time_offset"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of csg_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class csg_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of csg_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public csg_shape_representation(SdaiInstance instance) : base(instance) { }
        public csg_shape_representation() : base(0) { }

        public static implicit operator csg_shape_representation(SdaiInstance instance) => new csg_shape_representation(instance);

        /// <summary>
        /// Create new instace of csg_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new csg_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "csg_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "csg_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of csg_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class csg_solid : solid_model
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of csg_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public csg_solid(SdaiInstance instance) : base(instance) { }
        public csg_solid() : base(0) { }

        public static implicit operator csg_solid(SdaiInstance instance) => new csg_solid(instance);

        /// <summary>
        /// Create new instace of csg_solid and returns object of this class to interact with
        /// </summary>
        public static new csg_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "csg_solid"); Debug.Assert(inst != 0); return inst; }


        public csg_select_get get_tree_root_expression() { return new csg_select_get(m_instance, "tree_root_expression", 0); }
        public csg_select_get _tree_root_expression { get { return new csg_select_get(m_instance, "tree_root_expression", 0); } }
        public csg_select_put put_tree_root_expression() { return new csg_select_put(m_instance, "tree_root_expression", 0); }

        protected override TextValue EntityName() { return "csg_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of currency
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class currency : context_dependent_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of currency
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public currency(SdaiInstance instance) : base(instance) { }
        public currency() : base(0) { }

        public static implicit operator currency(SdaiInstance instance) => new currency(instance);


        protected override TextValue EntityName() { return "currency"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of currency_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class currency_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of currency_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public currency_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public currency_measure_with_unit() : base(0) { }

        public static implicit operator currency_measure_with_unit(SdaiInstance instance) => new currency_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of currency_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new currency_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "currency_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "currency_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_bounded_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_bounded_surface : bounded_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_bounded_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_bounded_surface(SdaiInstance instance) : base(instance) { }
        public curve_bounded_surface() : base(0) { }

        public static implicit operator curve_bounded_surface(SdaiInstance instance) => new curve_bounded_surface(instance);

        /// <summary>
        /// Create new instace of curve_bounded_surface and returns object of this class to interact with
        /// </summary>
        public static new curve_bounded_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_bounded_surface"); Debug.Assert(inst != 0); return inst; }

        public surface get_basis_surface() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface (inst); }
        public surface _basis_surface { get { return get_basis_surface(); } }
        public void put_basis_surface(surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
        public set_of_boundary_curve get_boundaries() { return (new set_of_boundary_curveSerializer()).FromAttr(m_instance, "boundaries"); }
        public set_of_boundary_curve _boundaries { get { return get_boundaries(); } }
        public void put_boundaries(IEnumerable<boundary_curve> lst) { (new set_of_boundary_curveSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }
        //public void put_boundaries_untyped(IEnumerable lst) { (new set_of_boundary_curveSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }
        public bool? get_implicit_outer() { return get_bool("implicit_outer", ifcengine.sdaiBOOLEAN);}
        public bool? _implicit_outer { get { return get_implicit_outer(); } }
        public void put_implicit_outer(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "implicit_outer", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "curve_bounded_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_dimension : dimension_curve_directed_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_dimension(SdaiInstance instance) : base(instance) { }
        public curve_dimension() : base(0) { }

        public static implicit operator curve_dimension(SdaiInstance instance) => new curve_dimension(instance);

        /// <summary>
        /// Create new instace of curve_dimension and returns object of this class to interact with
        /// </summary>
        public static new curve_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "curve_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_replica : curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_replica(SdaiInstance instance) : base(instance) { }
        public curve_replica() : base(0) { }

        public static implicit operator curve_replica(SdaiInstance instance) => new curve_replica(instance);

        /// <summary>
        /// Create new instace of curve_replica and returns object of this class to interact with
        /// </summary>
        public static new curve_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_replica"); Debug.Assert(inst != 0); return inst; }

        public curve get_parent_curve() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, out inst); return new curve (inst); }
        public curve _parent_curve { get { return get_parent_curve(); } }
        public void put_parent_curve(curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "parent_curve", ifcengine.sdaiINSTANCE, i); }
        public cartesian_transformation_operator get_transformation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator (inst); }
        public cartesian_transformation_operator _transformation { get { return get_transformation(); } }
        public void put_transformation(cartesian_transformation_operator inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "curve_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_style : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_style(SdaiInstance instance) : base(instance) { }
        public curve_style() : base(0) { }

        public static implicit operator curve_style(SdaiInstance instance) => new curve_style(instance);

        /// <summary>
        /// Create new instace of curve_style and returns object of this class to interact with
        /// </summary>
        public static new curve_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        public curve_font_or_scaled_curve_font_select_get get_curve_font() { return new curve_font_or_scaled_curve_font_select_get(m_instance, "curve_font", 0); }
        public curve_font_or_scaled_curve_font_select_get _curve_font { get { return new curve_font_or_scaled_curve_font_select_get(m_instance, "curve_font", 0); } }
        public curve_font_or_scaled_curve_font_select_put put_curve_font() { return new curve_font_or_scaled_curve_font_select_put(m_instance, "curve_font", 0); }

        public size_select_get get_curve_width() { return new size_select_get(m_instance, "curve_width", 0); }
        public size_select_get _curve_width { get { return new size_select_get(m_instance, "curve_width", 0); } }
        public size_select_put put_curve_width() { return new size_select_put(m_instance, "curve_width", 0); }
        public colour get_curve_colour() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "curve_colour", ifcengine.sdaiINSTANCE, out inst); return new colour (inst); }
        public colour _curve_colour { get { return get_curve_colour(); } }
        public void put_curve_colour(colour inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "curve_colour", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "curve_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_style_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_style_font : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_style_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_style_font(SdaiInstance instance) : base(instance) { }
        public curve_style_font() : base(0) { }

        public static implicit operator curve_style_font(SdaiInstance instance) => new curve_style_font(instance);

        /// <summary>
        /// Create new instace of curve_style_font and returns object of this class to interact with
        /// </summary>
        public static new curve_style_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_style_font"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public list_of_curve_style_font_pattern get_pattern_list() { return (new list_of_curve_style_font_patternSerializer()).FromAttr(m_instance, "pattern_list"); }
        public list_of_curve_style_font_pattern _pattern_list { get { return get_pattern_list(); } }
        public void put_pattern_list(IEnumerable<curve_style_font_pattern> lst) { (new list_of_curve_style_font_patternSerializer()).ToSdaiAggr(lst, m_instance, "pattern_list"); }
        //public void put_pattern_list_untyped(IEnumerable lst) { (new list_of_curve_style_font_patternSerializer()).ToSdaiAggr(lst, m_instance, "pattern_list"); }

        protected override TextValue EntityName() { return "curve_style_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_style_font_and_scaling
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_style_font_and_scaling : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_style_font_and_scaling
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_style_font_and_scaling(SdaiInstance instance) : base(instance) { }
        public curve_style_font_and_scaling() : base(0) { }

        public static implicit operator curve_style_font_and_scaling(SdaiInstance instance) => new curve_style_font_and_scaling(instance);

        /// <summary>
        /// Create new instace of curve_style_font_and_scaling and returns object of this class to interact with
        /// </summary>
        public static new curve_style_font_and_scaling Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_style_font_and_scaling"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        public curve_style_font_select_get get_curve_font() { return new curve_style_font_select_get(m_instance, "curve_font", 0); }
        public curve_style_font_select_get _curve_font { get { return new curve_style_font_select_get(m_instance, "curve_font", 0); } }
        public curve_style_font_select_put put_curve_font() { return new curve_style_font_select_put(m_instance, "curve_font", 0); }
        public double? get_curve_font_scaling() { return get_double("curve_font_scaling", ifcengine.sdaiREAL);}
        public double? _curve_font_scaling { get { return get_curve_font_scaling(); } }
        public void put_curve_font_scaling(double value) { ifcengine.sdaiPutAttrBN(m_instance, "curve_font_scaling", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "curve_style_font_and_scaling"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_style_font_pattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_style_font_pattern : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_style_font_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_style_font_pattern(SdaiInstance instance) : base(instance) { }
        public curve_style_font_pattern() : base(0) { }

        public static implicit operator curve_style_font_pattern(SdaiInstance instance) => new curve_style_font_pattern(instance);

        /// <summary>
        /// Create new instace of curve_style_font_pattern and returns object of this class to interact with
        /// </summary>
        public static new curve_style_font_pattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_style_font_pattern"); Debug.Assert(inst != 0); return inst; }

        public double? get_visible_segment_length() { return get_double("visible_segment_length", ifcengine.sdaiREAL);}
        public double? _visible_segment_length { get { return get_visible_segment_length(); } }
        public void put_visible_segment_length(double value) { ifcengine.sdaiPutAttrBN(m_instance, "visible_segment_length", ifcengine.sdaiREAL, ref value); }
        public double? get_invisible_segment_length() { return get_double("invisible_segment_length", ifcengine.sdaiREAL);}
        public double? _invisible_segment_length { get { return get_invisible_segment_length(); } }
        public void put_invisible_segment_length(double value) { ifcengine.sdaiPutAttrBN(m_instance, "invisible_segment_length", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "curve_style_font_pattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_style_rendering
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_style_rendering : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_style_rendering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_style_rendering(SdaiInstance instance) : base(instance) { }
        public curve_style_rendering() : base(0) { }

        public static implicit operator curve_style_rendering(SdaiInstance instance) => new curve_style_rendering(instance);

        /// <summary>
        /// Create new instace of curve_style_rendering and returns object of this class to interact with
        /// </summary>
        public static new curve_style_rendering Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_style_rendering"); Debug.Assert(inst != 0); return inst; }

        public shading_curve_method? get_rendering_method() { var str = get_string("rendering_method", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.shading_curve_method_); return EnumValue<shading_curve_method>.FromIndex(ind); }
        public shading_curve_method? _rendering_method { get { return get_rendering_method(); } }
        public void put_rendering_method(shading_curve_method value) { var str = EnumString<shading_curve_method>.FromValue(value, EnumNames.shading_curve_method_); ifcengine.sdaiPutAttrBN(m_instance, "rendering_method", ifcengine.sdaiENUM, str); }
        public surface_rendering_properties get_rendering_properties() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rendering_properties", ifcengine.sdaiINSTANCE, out inst); return new surface_rendering_properties (inst); }
        public surface_rendering_properties _rendering_properties { get { return get_rendering_properties(); } }
        public void put_rendering_properties(surface_rendering_properties inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "rendering_properties", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "curve_style_rendering"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of curve_swept_solid_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class curve_swept_solid_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of curve_swept_solid_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public curve_swept_solid_shape_representation(SdaiInstance instance) : base(instance) { }
        public curve_swept_solid_shape_representation() : base(0) { }

        public static implicit operator curve_swept_solid_shape_representation(SdaiInstance instance) => new curve_swept_solid_shape_representation(instance);

        /// <summary>
        /// Create new instace of curve_swept_solid_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new curve_swept_solid_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "curve_swept_solid_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "curve_swept_solid_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cylindrical_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cylindrical_surface : elementary_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cylindrical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cylindrical_surface(SdaiInstance instance) : base(instance) { }
        public cylindrical_surface() : base(0) { }

        public static implicit operator cylindrical_surface(SdaiInstance instance) => new cylindrical_surface(instance);

        /// <summary>
        /// Create new instace of cylindrical_surface and returns object of this class to interact with
        /// </summary>
        public static new cylindrical_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cylindrical_surface"); Debug.Assert(inst != 0); return inst; }

        public double? get_radius() { return get_double("radius", ifcengine.sdaiREAL);}
        public double? _radius { get { return get_radius(); } }
        public void put_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "cylindrical_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of cylindricity_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class cylindricity_tolerance : geometric_tolerance
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of cylindricity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public cylindricity_tolerance(SdaiInstance instance) : base(instance) { }
        public cylindricity_tolerance() : base(0) { }

        public static implicit operator cylindricity_tolerance(SdaiInstance instance) => new cylindricity_tolerance(instance);

        /// <summary>
        /// Create new instace of cylindricity_tolerance and returns object of this class to interact with
        /// </summary>
        public static new cylindricity_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "cylindricity_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "cylindricity_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of data_environment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class data_environment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of data_environment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public data_environment(SdaiInstance instance) : base(instance) { }
        public data_environment() : base(0) { }

        public static implicit operator data_environment(SdaiInstance instance) => new data_environment(instance);

        /// <summary>
        /// Create new instace of data_environment and returns object of this class to interact with
        /// </summary>
        public static new data_environment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "data_environment"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public set_of_property_definition_representation get_elements() { return (new set_of_property_definition_representationSerializer()).FromAttr(m_instance, "elements"); }
        public set_of_property_definition_representation _elements { get { return get_elements(); } }
        public void put_elements(IEnumerable<property_definition_representation> lst) { (new set_of_property_definition_representationSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        //public void put_elements_untyped(IEnumerable lst) { (new set_of_property_definition_representationSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }

        protected override TextValue EntityName() { return "data_environment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_and_time
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_and_time : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_and_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_and_time(SdaiInstance instance) : base(instance) { }
        public date_and_time() : base(0) { }

        public static implicit operator date_and_time(SdaiInstance instance) => new date_and_time(instance);

        /// <summary>
        /// Create new instace of date_and_time and returns object of this class to interact with
        /// </summary>
        public static new date_and_time Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date_and_time"); Debug.Assert(inst != 0); return inst; }

        public date get_date_component() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "date_component", ifcengine.sdaiINSTANCE, out inst); return new date (inst); }
        public date _date_component { get { return get_date_component(); } }
        public void put_date_component(date inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "date_component", ifcengine.sdaiINSTANCE, i); }
        public local_time get_time_component() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "time_component", ifcengine.sdaiINSTANCE, out inst); return new local_time (inst); }
        public local_time _time_component { get { return get_time_component(); } }
        public void put_time_component(local_time inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "time_component", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "date_and_time"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_representation_item(SdaiInstance instance) : base(instance) { }
        public date_representation_item() : base(0) { }

        public static implicit operator date_representation_item(SdaiInstance instance) => new date_representation_item(instance);

        /// <summary>
        /// Create new instace of date_representation_item and returns object of this class to interact with
        /// </summary>
        public static new date_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date_representation_item"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_year_component() { return get_IntValue("year_component", ifcengine.sdaiINTEGER);}
        public IntValue? _year_component { get { return get_year_component(); } }
        public void put_year_component(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "year_component", ifcengine.sdaiINTEGER, ref value); }

        protected override TextValue EntityName() { return "date_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_role(SdaiInstance instance) : base(instance) { }
        public date_role() : base(0) { }

        public static implicit operator date_role(SdaiInstance instance) => new date_role(instance);

        /// <summary>
        /// Create new instace of date_role and returns object of this class to interact with
        /// </summary>
        public static new date_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "date_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_time_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_time_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_time_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_time_representation_item(SdaiInstance instance) : base(instance) { }
        public date_time_representation_item() : base(0) { }

        public static implicit operator date_time_representation_item(SdaiInstance instance) => new date_time_representation_item(instance);

        /// <summary>
        /// Create new instace of date_time_representation_item and returns object of this class to interact with
        /// </summary>
        public static new date_time_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date_time_representation_item"); Debug.Assert(inst != 0); return inst; }

        public date get_date_component() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "date_component", ifcengine.sdaiINSTANCE, out inst); return new date (inst); }
        public date _date_component { get { return get_date_component(); } }
        public void put_date_component(date inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "date_component", ifcengine.sdaiINSTANCE, i); }
        public local_time get_time_component() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "time_component", ifcengine.sdaiINSTANCE, out inst); return new local_time (inst); }
        public local_time _time_component { get { return get_time_component(); } }
        public void put_time_component(local_time inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "time_component", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "date_time_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of date_time_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class date_time_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of date_time_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public date_time_role(SdaiInstance instance) : base(instance) { }
        public date_time_role() : base(0) { }

        public static implicit operator date_time_role(SdaiInstance instance) => new date_time_role(instance);

        /// <summary>
        /// Create new instace of date_time_role and returns object of this class to interact with
        /// </summary>
        public static new date_time_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "date_time_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "date_time_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dated_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dated_effectivity : effectivity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dated_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dated_effectivity(SdaiInstance instance) : base(instance) { }
        public dated_effectivity() : base(0) { }

        public static implicit operator dated_effectivity(SdaiInstance instance) => new dated_effectivity(instance);

        /// <summary>
        /// Create new instace of dated_effectivity and returns object of this class to interact with
        /// </summary>
        public static new dated_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dated_effectivity"); Debug.Assert(inst != 0); return inst; }


        public date_time_or_event_occurrence_get get_effectivity_end_date() { return new date_time_or_event_occurrence_get(m_instance, "effectivity_end_date", 0); }
        public date_time_or_event_occurrence_get _effectivity_end_date { get { return new date_time_or_event_occurrence_get(m_instance, "effectivity_end_date", 0); } }
        public date_time_or_event_occurrence_put put_effectivity_end_date() { return new date_time_or_event_occurrence_put(m_instance, "effectivity_end_date", 0); }

        public date_time_or_event_occurrence_get get_effectivity_start_date() { return new date_time_or_event_occurrence_get(m_instance, "effectivity_start_date", 0); }
        public date_time_or_event_occurrence_get _effectivity_start_date { get { return new date_time_or_event_occurrence_get(m_instance, "effectivity_start_date", 0); } }
        public date_time_or_event_occurrence_put put_effectivity_start_date() { return new date_time_or_event_occurrence_put(m_instance, "effectivity_start_date", 0); }

        protected override TextValue EntityName() { return "dated_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum : shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum(SdaiInstance instance) : base(instance) { }
        public datum() : base(0) { }

        public static implicit operator datum(SdaiInstance instance) => new datum(instance);

        /// <summary>
        /// Create new instace of datum and returns object of this class to interact with
        /// </summary>
        public static new datum Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_identification() { return get_string("identification", ifcengine.sdaiSTRING); }
        public TextValue _identification { get { return get_identification(); } }
        public void put_identification(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "identification", ifcengine.sdaiSTRING, value); }
        public set_of_shape_aspect_relationship get_established_by_relationships() { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "established_by_relationships"); }
        public set_of_shape_aspect_relationship _established_by_relationships { get { return get_established_by_relationships(); } }

        protected override TextValue EntityName() { return "datum"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum_feature : shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum_feature(SdaiInstance instance) : base(instance) { }
        public datum_feature() : base(0) { }

        public static implicit operator datum_feature(SdaiInstance instance) => new datum_feature(instance);

        /// <summary>
        /// Create new instace of datum_feature and returns object of this class to interact with
        /// </summary>
        public static new datum_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum_feature"); Debug.Assert(inst != 0); return inst; }

        public set_of_shape_aspect_relationship get_feature_basis_relationship() { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "feature_basis_relationship"); }
        public set_of_shape_aspect_relationship _feature_basis_relationship { get { return get_feature_basis_relationship(); } }

        protected override TextValue EntityName() { return "datum_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum_feature_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum_feature_callout : draughting_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum_feature_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum_feature_callout(SdaiInstance instance) : base(instance) { }
        public datum_feature_callout() : base(0) { }

        public static implicit operator datum_feature_callout(SdaiInstance instance) => new datum_feature_callout(instance);

        /// <summary>
        /// Create new instace of datum_feature_callout and returns object of this class to interact with
        /// </summary>
        public static new datum_feature_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum_feature_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "datum_feature_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum_reference
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum_reference : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum_reference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum_reference(SdaiInstance instance) : base(instance) { }
        public datum_reference() : base(0) { }

        public static implicit operator datum_reference(SdaiInstance instance) => new datum_reference(instance);

        /// <summary>
        /// Create new instace of datum_reference and returns object of this class to interact with
        /// </summary>
        public static new datum_reference Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum_reference"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_precedence() { return get_IntValue("precedence", ifcengine.sdaiINTEGER);}
        public IntValue? _precedence { get { return get_precedence(); } }
        public void put_precedence(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "precedence", ifcengine.sdaiINTEGER, ref value); }
        public datum get_referenced_datum() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "referenced_datum", ifcengine.sdaiINSTANCE, out inst); return new datum (inst); }
        public datum _referenced_datum { get { return get_referenced_datum(); } }
        public void put_referenced_datum(datum inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "referenced_datum", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "datum_reference"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum_target
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum_target : shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum_target
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum_target(SdaiInstance instance) : base(instance) { }
        public datum_target() : base(0) { }

        public static implicit operator datum_target(SdaiInstance instance) => new datum_target(instance);

        /// <summary>
        /// Create new instace of datum_target and returns object of this class to interact with
        /// </summary>
        public static new datum_target Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum_target"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_target_id() { return get_string("target_id", ifcengine.sdaiSTRING); }
        public TextValue _target_id { get { return get_target_id(); } }
        public void put_target_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "target_id", ifcengine.sdaiSTRING, value); }
        public set_of_shape_aspect_relationship get_target_basis_relationship() { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "target_basis_relationship"); }
        public set_of_shape_aspect_relationship _target_basis_relationship { get { return get_target_basis_relationship(); } }

        protected override TextValue EntityName() { return "datum_target"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of datum_target_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class datum_target_callout : draughting_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of datum_target_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public datum_target_callout(SdaiInstance instance) : base(instance) { }
        public datum_target_callout() : base(0) { }

        public static implicit operator datum_target_callout(SdaiInstance instance) => new datum_target_callout(instance);

        /// <summary>
        /// Create new instace of datum_target_callout and returns object of this class to interact with
        /// </summary>
        public static new datum_target_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "datum_target_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "datum_target_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of default_tolerance_table
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class default_tolerance_table : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of default_tolerance_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public default_tolerance_table(SdaiInstance instance) : base(instance) { }
        public default_tolerance_table() : base(0) { }

        public static implicit operator default_tolerance_table(SdaiInstance instance) => new default_tolerance_table(instance);

        /// <summary>
        /// Create new instace of default_tolerance_table and returns object of this class to interact with
        /// </summary>
        public static new default_tolerance_table Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "default_tolerance_table"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "default_tolerance_table"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of default_tolerance_table_cell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class default_tolerance_table_cell : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of default_tolerance_table_cell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public default_tolerance_table_cell(SdaiInstance instance) : base(instance) { }
        public default_tolerance_table_cell() : base(0) { }

        public static implicit operator default_tolerance_table_cell(SdaiInstance instance) => new default_tolerance_table_cell(instance);

        /// <summary>
        /// Create new instace of default_tolerance_table_cell and returns object of this class to interact with
        /// </summary>
        public static new default_tolerance_table_cell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "default_tolerance_table_cell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "default_tolerance_table_cell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of defined_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class defined_symbol : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public defined_symbol(SdaiInstance instance) : base(instance) { }
        public defined_symbol() : base(0) { }

        public static implicit operator defined_symbol(SdaiInstance instance) => new defined_symbol(instance);

        /// <summary>
        /// Create new instace of defined_symbol and returns object of this class to interact with
        /// </summary>
        public static new defined_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "defined_symbol"); Debug.Assert(inst != 0); return inst; }


        public defined_symbol_select_get get_definition() { return new defined_symbol_select_get(m_instance, "definition", 0); }
        public defined_symbol_select_get _definition { get { return new defined_symbol_select_get(m_instance, "definition", 0); } }
        public defined_symbol_select_put put_definition() { return new defined_symbol_select_put(m_instance, "definition", 0); }
        public symbol_target get_target() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "target", ifcengine.sdaiINSTANCE, out inst); return new symbol_target (inst); }
        public symbol_target _target { get { return get_target(); } }
        public void put_target(symbol_target inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "target", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "defined_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of definitional_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class definitional_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of definitional_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public definitional_representation(SdaiInstance instance) : base(instance) { }
        public definitional_representation() : base(0) { }

        public static implicit operator definitional_representation(SdaiInstance instance) => new definitional_representation(instance);

        /// <summary>
        /// Create new instace of definitional_representation and returns object of this class to interact with
        /// </summary>
        public static new definitional_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "definitional_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "definitional_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of definitional_representation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class definitional_representation_relationship : representation_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of definitional_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public definitional_representation_relationship(SdaiInstance instance) : base(instance) { }
        public definitional_representation_relationship() : base(0) { }

        public static implicit operator definitional_representation_relationship(SdaiInstance instance) => new definitional_representation_relationship(instance);

        /// <summary>
        /// Create new instace of definitional_representation_relationship and returns object of this class to interact with
        /// </summary>
        public static new definitional_representation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "definitional_representation_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "definitional_representation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of definitional_representation_relationship_with_same_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class definitional_representation_relationship_with_same_context : definitional_representation_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of definitional_representation_relationship_with_same_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public definitional_representation_relationship_with_same_context(SdaiInstance instance) : base(instance) { }
        public definitional_representation_relationship_with_same_context() : base(0) { }

        public static implicit operator definitional_representation_relationship_with_same_context(SdaiInstance instance) => new definitional_representation_relationship_with_same_context(instance);

        /// <summary>
        /// Create new instace of definitional_representation_relationship_with_same_context and returns object of this class to interact with
        /// </summary>
        public static new definitional_representation_relationship_with_same_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "definitional_representation_relationship_with_same_context"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "definitional_representation_relationship_with_same_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of degenerate_pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class degenerate_pcurve : point
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of degenerate_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public degenerate_pcurve(SdaiInstance instance) : base(instance) { }
        public degenerate_pcurve() : base(0) { }

        public static implicit operator degenerate_pcurve(SdaiInstance instance) => new degenerate_pcurve(instance);

        /// <summary>
        /// Create new instace of degenerate_pcurve and returns object of this class to interact with
        /// </summary>
        public static new degenerate_pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "degenerate_pcurve"); Debug.Assert(inst != 0); return inst; }

        public surface get_basis_surface() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface (inst); }
        public surface _basis_surface { get { return get_basis_surface(); } }
        public void put_basis_surface(surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
        public definitional_representation get_reference_to_curve() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, out inst); return new definitional_representation (inst); }
        public definitional_representation _reference_to_curve { get { return get_reference_to_curve(); } }
        public void put_reference_to_curve(definitional_representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "reference_to_curve", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "degenerate_pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of toroidal_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class toroidal_surface : elementary_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of toroidal_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public toroidal_surface(SdaiInstance instance) : base(instance) { }
        public toroidal_surface() : base(0) { }

        public static implicit operator toroidal_surface(SdaiInstance instance) => new toroidal_surface(instance);

        /// <summary>
        /// Create new instace of toroidal_surface and returns object of this class to interact with
        /// </summary>
        public static new toroidal_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "toroidal_surface"); Debug.Assert(inst != 0); return inst; }

        public double? get_major_radius() { return get_double("major_radius", ifcengine.sdaiREAL);}
        public double? _major_radius { get { return get_major_radius(); } }
        public void put_major_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "major_radius", ifcengine.sdaiREAL, ref value); }
        public double? get_minor_radius() { return get_double("minor_radius", ifcengine.sdaiREAL);}
        public double? _minor_radius { get { return get_minor_radius(); } }
        public void put_minor_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "minor_radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "toroidal_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of degenerate_toroidal_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class degenerate_toroidal_surface : toroidal_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of degenerate_toroidal_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public degenerate_toroidal_surface(SdaiInstance instance) : base(instance) { }
        public degenerate_toroidal_surface() : base(0) { }

        public static implicit operator degenerate_toroidal_surface(SdaiInstance instance) => new degenerate_toroidal_surface(instance);

        /// <summary>
        /// Create new instace of degenerate_toroidal_surface and returns object of this class to interact with
        /// </summary>
        public static new degenerate_toroidal_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "degenerate_toroidal_surface"); Debug.Assert(inst != 0); return inst; }

        public bool? get_select_outer() { return get_bool("select_outer", ifcengine.sdaiBOOLEAN);}
        public bool? _select_outer { get { return get_select_outer(); } }
        public void put_select_outer(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "select_outer", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "degenerate_toroidal_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of derived_unit_element
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class derived_unit_element : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of derived_unit_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public derived_unit_element(SdaiInstance instance) : base(instance) { }
        public derived_unit_element() : base(0) { }

        public static implicit operator derived_unit_element(SdaiInstance instance) => new derived_unit_element(instance);

        /// <summary>
        /// Create new instace of derived_unit_element and returns object of this class to interact with
        /// </summary>
        public static new derived_unit_element Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "derived_unit_element"); Debug.Assert(inst != 0); return inst; }

        public named_unit get_unit() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "unit", ifcengine.sdaiINSTANCE, out inst); return new named_unit (inst); }
        public named_unit _unit { get { return get_unit(); } }
        public void put_unit(named_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "unit", ifcengine.sdaiINSTANCE, i); }
        public double? get_exponent() { return get_double("exponent", ifcengine.sdaiREAL);}
        public double? _exponent { get { return get_exponent(); } }
        public void put_exponent(double value) { ifcengine.sdaiPutAttrBN(m_instance, "exponent", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "derived_unit_element"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of description_attribute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class description_attribute : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of description_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public description_attribute(SdaiInstance instance) : base(instance) { }
        public description_attribute() : base(0) { }

        public static implicit operator description_attribute(SdaiInstance instance) => new description_attribute(instance);

        /// <summary>
        /// Create new instace of description_attribute and returns object of this class to interact with
        /// </summary>
        public static new description_attribute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "description_attribute"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_attribute_value() { return get_string("attribute_value", ifcengine.sdaiSTRING); }
        public TextValue _attribute_value { get { return get_attribute_value(); } }
        public void put_attribute_value(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "attribute_value", ifcengine.sdaiSTRING, value); }

        public description_attribute_select_get get_described_item() { return new description_attribute_select_get(m_instance, "described_item", 0); }
        public description_attribute_select_get _described_item { get { return new description_attribute_select_get(m_instance, "described_item", 0); } }
        public description_attribute_select_put put_described_item() { return new description_attribute_select_put(m_instance, "described_item", 0); }

        protected override TextValue EntityName() { return "description_attribute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of descriptive_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class descriptive_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of descriptive_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public descriptive_representation_item(SdaiInstance instance) : base(instance) { }
        public descriptive_representation_item() : base(0) { }

        public static implicit operator descriptive_representation_item(SdaiInstance instance) => new descriptive_representation_item(instance);

        /// <summary>
        /// Create new instace of descriptive_representation_item and returns object of this class to interact with
        /// </summary>
        public static new descriptive_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "descriptive_representation_item"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "descriptive_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_context : application_context_element
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_context(SdaiInstance instance) : base(instance) { }
        public product_definition_context() : base(0) { }

        public static implicit operator product_definition_context(SdaiInstance instance) => new product_definition_context(instance);

        /// <summary>
        /// Create new instace of product_definition_context and returns object of this class to interact with
        /// </summary>
        public static new product_definition_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_context"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_life_cycle_stage() { return get_string("life_cycle_stage", ifcengine.sdaiSTRING); }
        public TextValue _life_cycle_stage { get { return get_life_cycle_stage(); } }
        public void put_life_cycle_stage(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "life_cycle_stage", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "product_definition_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_context : product_definition_context
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_context(SdaiInstance instance) : base(instance) { }
        public design_context() : base(0) { }

        public static implicit operator design_context(SdaiInstance instance) => new design_context(instance);

        /// <summary>
        /// Create new instace of design_context and returns object of this class to interact with
        /// </summary>
        public static new design_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_context"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "design_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of design_make_from_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class design_make_from_relationship : product_definition_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of design_make_from_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public design_make_from_relationship(SdaiInstance instance) : base(instance) { }
        public design_make_from_relationship() : base(0) { }

        public static implicit operator design_make_from_relationship(SdaiInstance instance) => new design_make_from_relationship(instance);

        /// <summary>
        /// Create new instace of design_make_from_relationship and returns object of this class to interact with
        /// </summary>
        public static new design_make_from_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "design_make_from_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "design_make_from_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of diameter_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class diameter_dimension : dimension_curve_directed_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of diameter_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public diameter_dimension(SdaiInstance instance) : base(instance) { }
        public diameter_dimension() : base(0) { }

        public static implicit operator diameter_dimension(SdaiInstance instance) => new diameter_dimension(instance);

        /// <summary>
        /// Create new instace of diameter_dimension and returns object of this class to interact with
        /// </summary>
        public static new diameter_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "diameter_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "diameter_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ratio_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ratio_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ratio_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ratio_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public ratio_measure_with_unit() : base(0) { }

        public static implicit operator ratio_measure_with_unit(SdaiInstance instance) => new ratio_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of ratio_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new ratio_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ratio_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "ratio_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dielectric_constant_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dielectric_constant_measure_with_unit : ratio_measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dielectric_constant_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dielectric_constant_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public dielectric_constant_measure_with_unit() : base(0) { }

        public static implicit operator dielectric_constant_measure_with_unit(SdaiInstance instance) => new dielectric_constant_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of dielectric_constant_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new dielectric_constant_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dielectric_constant_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "dielectric_constant_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_callout : draughting_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_callout(SdaiInstance instance) : base(instance) { }
        public dimension_callout() : base(0) { }

        public static implicit operator dimension_callout(SdaiInstance instance) => new dimension_callout(instance);

        /// <summary>
        /// Create new instace of dimension_callout and returns object of this class to interact with
        /// </summary>
        public static new dimension_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "dimension_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_callout_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_callout_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_callout_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_callout_relationship(SdaiInstance instance) : base(instance) { }
        public draughting_callout_relationship() : base(0) { }

        public static implicit operator draughting_callout_relationship(SdaiInstance instance) => new draughting_callout_relationship(instance);

        /// <summary>
        /// Create new instace of draughting_callout_relationship and returns object of this class to interact with
        /// </summary>
        public static new draughting_callout_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_callout_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public draughting_callout get_relating_draughting_callout() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_draughting_callout", ifcengine.sdaiINSTANCE, out inst); return new draughting_callout (inst); }
        public draughting_callout _relating_draughting_callout { get { return get_relating_draughting_callout(); } }
        public void put_relating_draughting_callout(draughting_callout inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_draughting_callout", ifcengine.sdaiINSTANCE, i); }
        public draughting_callout get_related_draughting_callout() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_draughting_callout", ifcengine.sdaiINSTANCE, out inst); return new draughting_callout (inst); }
        public draughting_callout _related_draughting_callout { get { return get_related_draughting_callout(); } }
        public void put_related_draughting_callout(draughting_callout inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_draughting_callout", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "draughting_callout_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_callout_component_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_callout_component_relationship : draughting_callout_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_callout_component_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_callout_component_relationship(SdaiInstance instance) : base(instance) { }
        public dimension_callout_component_relationship() : base(0) { }

        public static implicit operator dimension_callout_component_relationship(SdaiInstance instance) => new dimension_callout_component_relationship(instance);

        /// <summary>
        /// Create new instace of dimension_callout_component_relationship and returns object of this class to interact with
        /// </summary>
        public static new dimension_callout_component_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_callout_component_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "dimension_callout_component_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_callout_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_callout_relationship : draughting_callout_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_callout_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_callout_relationship(SdaiInstance instance) : base(instance) { }
        public dimension_callout_relationship() : base(0) { }

        public static implicit operator dimension_callout_relationship(SdaiInstance instance) => new dimension_callout_relationship(instance);

        /// <summary>
        /// Create new instace of dimension_callout_relationship and returns object of this class to interact with
        /// </summary>
        public static new dimension_callout_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_callout_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "dimension_callout_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_curve : annotation_curve_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_curve(SdaiInstance instance) : base(instance) { }
        public dimension_curve() : base(0) { }

        public static implicit operator dimension_curve(SdaiInstance instance) => new dimension_curve(instance);

        /// <summary>
        /// Create new instace of dimension_curve and returns object of this class to interact with
        /// </summary>
        public static new dimension_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "dimension_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of terminator_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class terminator_symbol : annotation_symbol_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public terminator_symbol(SdaiInstance instance) : base(instance) { }
        public terminator_symbol() : base(0) { }

        public static implicit operator terminator_symbol(SdaiInstance instance) => new terminator_symbol(instance);

        /// <summary>
        /// Create new instace of terminator_symbol and returns object of this class to interact with
        /// </summary>
        public static new terminator_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "terminator_symbol"); Debug.Assert(inst != 0); return inst; }

        public annotation_curve_occurrence get_annotated_curve() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "annotated_curve", ifcengine.sdaiINSTANCE, out inst); return new annotation_curve_occurrence (inst); }
        public annotation_curve_occurrence _annotated_curve { get { return get_annotated_curve(); } }
        public void put_annotated_curve(annotation_curve_occurrence inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "annotated_curve", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "terminator_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_curve_terminator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_curve_terminator : terminator_symbol
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_curve_terminator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_curve_terminator(SdaiInstance instance) : base(instance) { }
        public dimension_curve_terminator() : base(0) { }

        public static implicit operator dimension_curve_terminator(SdaiInstance instance) => new dimension_curve_terminator(instance);

        /// <summary>
        /// Create new instace of dimension_curve_terminator and returns object of this class to interact with
        /// </summary>
        public static new dimension_curve_terminator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_curve_terminator"); Debug.Assert(inst != 0); return inst; }

        public dimension_extent_usage? get_role() { var str = get_string("role", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.dimension_extent_usage_); return EnumValue<dimension_extent_usage>.FromIndex(ind); }
        public dimension_extent_usage? _role { get { return get_role(); } }
        public void put_role(dimension_extent_usage value) { var str = EnumString<dimension_extent_usage>.FromValue(value, EnumNames.dimension_extent_usage_); ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "dimension_curve_terminator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_curve_terminator_to_projection_curve_associativity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_curve_terminator_to_projection_curve_associativity : annotation_occurrence_associativity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_curve_terminator_to_projection_curve_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_curve_terminator_to_projection_curve_associativity(SdaiInstance instance) : base(instance) { }
        public dimension_curve_terminator_to_projection_curve_associativity() : base(0) { }

        public static implicit operator dimension_curve_terminator_to_projection_curve_associativity(SdaiInstance instance) => new dimension_curve_terminator_to_projection_curve_associativity(instance);

        /// <summary>
        /// Create new instace of dimension_curve_terminator_to_projection_curve_associativity and returns object of this class to interact with
        /// </summary>
        public static new dimension_curve_terminator_to_projection_curve_associativity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_curve_terminator_to_projection_curve_associativity"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "dimension_curve_terminator_to_projection_curve_associativity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_pair
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_pair : draughting_callout_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_pair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_pair(SdaiInstance instance) : base(instance) { }
        public dimension_pair() : base(0) { }

        public static implicit operator dimension_pair(SdaiInstance instance) => new dimension_pair(instance);

        /// <summary>
        /// Create new instace of dimension_pair and returns object of this class to interact with
        /// </summary>
        public static new dimension_pair Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_pair"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "dimension_pair"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_related_tolerance_zone_element
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_related_tolerance_zone_element : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_related_tolerance_zone_element
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_related_tolerance_zone_element(SdaiInstance instance) : base(instance) { }
        public dimension_related_tolerance_zone_element() : base(0) { }

        public static implicit operator dimension_related_tolerance_zone_element(SdaiInstance instance) => new dimension_related_tolerance_zone_element(instance);

        /// <summary>
        /// Create new instace of dimension_related_tolerance_zone_element and returns object of this class to interact with
        /// </summary>
        public static new dimension_related_tolerance_zone_element Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_related_tolerance_zone_element"); Debug.Assert(inst != 0); return inst; }

        public dimensional_location get_related_dimension() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_dimension", ifcengine.sdaiINSTANCE, out inst); return new dimensional_location (inst); }
        public dimensional_location _related_dimension { get { return get_related_dimension(); } }
        public void put_related_dimension(dimensional_location inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_dimension", ifcengine.sdaiINSTANCE, i); }
        public tolerance_zone_definition get_related_element() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_element", ifcengine.sdaiINSTANCE, out inst); return new tolerance_zone_definition (inst); }
        public tolerance_zone_definition _related_element { get { return get_related_element(); } }
        public void put_related_element(tolerance_zone_definition inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_element", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "dimension_related_tolerance_zone_element"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_literal : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_literal(SdaiInstance instance) : base(instance) { }
        public text_literal() : base(0) { }

        public static implicit operator text_literal(SdaiInstance instance) => new text_literal(instance);

        /// <summary>
        /// Create new instace of text_literal and returns object of this class to interact with
        /// </summary>
        public static new text_literal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_literal"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_literal() { return get_string("literal", ifcengine.sdaiSTRING); }
        public TextValue _literal { get { return get_literal(); } }
        public void put_literal(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "literal", ifcengine.sdaiSTRING, value); }

        public axis2_placement_get get_placement() { return new axis2_placement_get(m_instance, "placement", 0); }
        public axis2_placement_get _placement { get { return new axis2_placement_get(m_instance, "placement", 0); } }
        public axis2_placement_put put_placement() { return new axis2_placement_put(m_instance, "placement", 0); }
        public TextValue get_alignment() { return get_string("alignment", ifcengine.sdaiSTRING); }
        public TextValue _alignment { get { return get_alignment(); } }
        public void put_alignment(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "alignment", ifcengine.sdaiSTRING, value); }
        public text_path? get_path() { var str = get_string("path", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.text_path_); return EnumValue<text_path>.FromIndex(ind); }
        public text_path? _path { get { return get_path(); } }
        public void put_path(text_path value) { var str = EnumString<text_path>.FromValue(value, EnumNames.text_path_); ifcengine.sdaiPutAttrBN(m_instance, "path", ifcengine.sdaiENUM, str); }

        public font_select_get get_font() { return new font_select_get(m_instance, "font", 0); }
        public font_select_get _font { get { return new font_select_get(m_instance, "font", 0); } }
        public font_select_put put_font() { return new font_select_put(m_instance, "font", 0); }

        protected override TextValue EntityName() { return "text_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimension_text_associativity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimension_text_associativity : text_literal
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimension_text_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimension_text_associativity(SdaiInstance instance) : base(instance) { }
        public dimension_text_associativity() : base(0) { }

        public static implicit operator dimension_text_associativity(SdaiInstance instance) => new dimension_text_associativity(instance);

        /// <summary>
        /// Create new instace of dimension_text_associativity and returns object of this class to interact with
        /// </summary>
        public static new dimension_text_associativity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimension_text_associativity"); Debug.Assert(inst != 0); return inst; }

        public representation_map get_mapping_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, out inst); return new representation_map (inst); }
        public representation_map _mapping_source { get { return get_mapping_source(); } }
        public void put_mapping_source(representation_map inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, i); }
        public representation_item get_mapping_target() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _mapping_target { get { return get_mapping_target(); } }
        public void put_mapping_target(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "dimension_text_associativity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_characteristic_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_characteristic_representation : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_characteristic_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_characteristic_representation(SdaiInstance instance) : base(instance) { }
        public dimensional_characteristic_representation() : base(0) { }

        public static implicit operator dimensional_characteristic_representation(SdaiInstance instance) => new dimensional_characteristic_representation(instance);

        /// <summary>
        /// Create new instace of dimensional_characteristic_representation and returns object of this class to interact with
        /// </summary>
        public static new dimensional_characteristic_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_characteristic_representation"); Debug.Assert(inst != 0); return inst; }


        public dimensional_characteristic_get get_dimension() { return new dimensional_characteristic_get(m_instance, "dimension", 0); }
        public dimensional_characteristic_get _dimension { get { return new dimensional_characteristic_get(m_instance, "dimension", 0); } }
        public dimensional_characteristic_put put_dimension() { return new dimensional_characteristic_put(m_instance, "dimension", 0); }
        public shape_dimension_representation get_representation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "representation", ifcengine.sdaiINSTANCE, out inst); return new shape_dimension_representation (inst); }
        public shape_dimension_representation _representation { get { return get_representation(); } }
        public void put_representation(shape_dimension_representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "representation", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "dimensional_characteristic_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_exponents
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_exponents : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_exponents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_exponents(SdaiInstance instance) : base(instance) { }
        public dimensional_exponents() : base(0) { }

        public static implicit operator dimensional_exponents(SdaiInstance instance) => new dimensional_exponents(instance);

        /// <summary>
        /// Create new instace of dimensional_exponents and returns object of this class to interact with
        /// </summary>
        public static new dimensional_exponents Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_exponents"); Debug.Assert(inst != 0); return inst; }

        public double? get_length_exponent() { return get_double("length_exponent", ifcengine.sdaiREAL);}
        public double? _length_exponent { get { return get_length_exponent(); } }
        public void put_length_exponent(double value) { ifcengine.sdaiPutAttrBN(m_instance, "length_exponent", ifcengine.sdaiREAL, ref value); }
        public double? get_mass_exponent() { return get_double("mass_exponent", ifcengine.sdaiREAL);}
        public double? _mass_exponent { get { return get_mass_exponent(); } }
        public void put_mass_exponent(double value) { ifcengine.sdaiPutAttrBN(m_instance, "mass_exponent", ifcengine.sdaiREAL, ref value); }
        public double? get_time_exponent() { return get_double("time_exponent", ifcengine.sdaiREAL);}
        public double? _time_exponent { get { return get_time_exponent(); } }
        public void put_time_exponent(double value) { ifcengine.sdaiPutAttrBN(m_instance, "time_exponent", ifcengine.sdaiREAL, ref value); }
        public double? get_electric_current_exponent() { return get_double("electric_current_exponent", ifcengine.sdaiREAL);}
        public double? _electric_current_exponent { get { return get_electric_current_exponent(); } }
        public void put_electric_current_exponent(double value) { ifcengine.sdaiPutAttrBN(m_instance, "electric_current_exponent", ifcengine.sdaiREAL, ref value); }
        public double? get_thermodynamic_temperature_exponent() { return get_double("thermodynamic_temperature_exponent", ifcengine.sdaiREAL);}
        public double? _thermodynamic_temperature_exponent { get { return get_thermodynamic_temperature_exponent(); } }
        public void put_thermodynamic_temperature_exponent(double value) { ifcengine.sdaiPutAttrBN(m_instance, "thermodynamic_temperature_exponent", ifcengine.sdaiREAL, ref value); }
        public double? get_amount_of_substance_exponent() { return get_double("amount_of_substance_exponent", ifcengine.sdaiREAL);}
        public double? _amount_of_substance_exponent { get { return get_amount_of_substance_exponent(); } }
        public void put_amount_of_substance_exponent(double value) { ifcengine.sdaiPutAttrBN(m_instance, "amount_of_substance_exponent", ifcengine.sdaiREAL, ref value); }
        public double? get_luminous_intensity_exponent() { return get_double("luminous_intensity_exponent", ifcengine.sdaiREAL);}
        public double? _luminous_intensity_exponent { get { return get_luminous_intensity_exponent(); } }
        public void put_luminous_intensity_exponent(double value) { ifcengine.sdaiPutAttrBN(m_instance, "luminous_intensity_exponent", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "dimensional_exponents"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_location_with_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_location_with_path : dimensional_location
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_location_with_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_location_with_path(SdaiInstance instance) : base(instance) { }
        public dimensional_location_with_path() : base(0) { }

        public static implicit operator dimensional_location_with_path(SdaiInstance instance) => new dimensional_location_with_path(instance);

        /// <summary>
        /// Create new instace of dimensional_location_with_path and returns object of this class to interact with
        /// </summary>
        public static new dimensional_location_with_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_location_with_path"); Debug.Assert(inst != 0); return inst; }

        public shape_aspect get_path() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "path", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect (inst); }
        public shape_aspect _path { get { return get_path(); } }
        public void put_path(shape_aspect inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "path", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "dimensional_location_with_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dimensional_size_with_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dimensional_size_with_path : dimensional_size
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dimensional_size_with_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dimensional_size_with_path(SdaiInstance instance) : base(instance) { }
        public dimensional_size_with_path() : base(0) { }

        public static implicit operator dimensional_size_with_path(SdaiInstance instance) => new dimensional_size_with_path(instance);

        /// <summary>
        /// Create new instace of dimensional_size_with_path and returns object of this class to interact with
        /// </summary>
        public static new dimensional_size_with_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dimensional_size_with_path"); Debug.Assert(inst != 0); return inst; }

        public shape_aspect get_path() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "path", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect (inst); }
        public shape_aspect _path { get { return get_path(); } }
        public void put_path(shape_aspect inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "path", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "dimensional_size_with_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of executed_action
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class executed_action : action
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of executed_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public executed_action(SdaiInstance instance) : base(instance) { }
        public executed_action() : base(0) { }

        public static implicit operator executed_action(SdaiInstance instance) => new executed_action(instance);

        /// <summary>
        /// Create new instace of executed_action and returns object of this class to interact with
        /// </summary>
        public static new executed_action Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "executed_action"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "executed_action"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of directed_action
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class directed_action : executed_action
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of directed_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public directed_action(SdaiInstance instance) : base(instance) { }
        public directed_action() : base(0) { }

        public static implicit operator directed_action(SdaiInstance instance) => new directed_action(instance);

        /// <summary>
        /// Create new instace of directed_action and returns object of this class to interact with
        /// </summary>
        public static new directed_action Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "directed_action"); Debug.Assert(inst != 0); return inst; }

        public action_directive get_directive() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "directive", ifcengine.sdaiINSTANCE, out inst); return new action_directive (inst); }
        public action_directive _directive { get { return get_directive(); } }
        public void put_directive(action_directive inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "directive", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "directed_action"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of directed_dimensional_location
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class directed_dimensional_location : dimensional_location
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of directed_dimensional_location
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public directed_dimensional_location(SdaiInstance instance) : base(instance) { }
        public directed_dimensional_location() : base(0) { }

        public static implicit operator directed_dimensional_location(SdaiInstance instance) => new directed_dimensional_location(instance);

        /// <summary>
        /// Create new instace of directed_dimensional_location and returns object of this class to interact with
        /// </summary>
        public static new directed_dimensional_location Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "directed_dimensional_location"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "directed_dimensional_location"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of direction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class direction : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of direction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public direction(SdaiInstance instance) : base(instance) { }
        public direction() : base(0) { }

        public static implicit operator direction(SdaiInstance instance) => new direction(instance);

        /// <summary>
        /// Create new instace of direction and returns object of this class to interact with
        /// </summary>
        public static new direction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "direction"); Debug.Assert(inst != 0); return inst; }

        public list_of_double get_direction_ratios() { return (new list_of_doubleSerializer()).FromAttr(m_instance, "direction_ratios"); }
        public list_of_double _direction_ratios { get { return get_direction_ratios(); } }
        public void put_direction_ratios(IEnumerable<double> lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "direction_ratios"); }
        //public void put_direction_ratios_untyped(IEnumerable lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "direction_ratios"); }

        protected override TextValue EntityName() { return "direction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document(SdaiInstance instance) : base(instance) { }
        public document() : base(0) { }

        public static implicit operator document(SdaiInstance instance) => new document(instance);

        /// <summary>
        /// Create new instace of document and returns object of this class to interact with
        /// </summary>
        public static new document Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public document_type get_kind() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, out inst); return new document_type (inst); }
        public document_type _kind { get { return get_kind(); } }
        public void put_kind(document_type inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "kind", ifcengine.sdaiINSTANCE, i); }
        public set_of_document_representation_type get_representation_types() { return (new set_of_document_representation_typeSerializer()).FromAttr(m_instance, "representation_types"); }
        public set_of_document_representation_type _representation_types { get { return get_representation_types(); } }

        protected override TextValue EntityName() { return "document"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_file
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_file : document
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_file
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_file(SdaiInstance instance) : base(instance) { }
        public document_file() : base(0) { }

        public static implicit operator document_file(SdaiInstance instance) => new document_file(instance);

        /// <summary>
        /// Create new instace of document_file and returns object of this class to interact with
        /// </summary>
        public static new document_file Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_file"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "document_file"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_identifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_identifier : group
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_identifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_identifier(SdaiInstance instance) : base(instance) { }
        public document_identifier() : base(0) { }

        public static implicit operator document_identifier(SdaiInstance instance) => new document_identifier(instance);

        /// <summary>
        /// Create new instace of document_identifier and returns object of this class to interact with
        /// </summary>
        public static new document_identifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_identifier"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "document_identifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_identifier_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_identifier_assignment : group_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_identifier_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_identifier_assignment(SdaiInstance instance) : base(instance) { }
        public document_identifier_assignment() : base(0) { }

        public static implicit operator document_identifier_assignment(SdaiInstance instance) => new document_identifier_assignment(instance);

        /// <summary>
        /// Create new instace of document_identifier_assignment and returns object of this class to interact with
        /// </summary>
        public static new document_identifier_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_identifier_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_document_identifier_assigned_item get_items() { return (new set_of_document_identifier_assigned_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_document_identifier_assigned_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<document_identifier_assigned_item> lst) { (new set_of_document_identifier_assigned_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_document_identifier_assigned_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "document_identifier_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_product_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_product_association : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_product_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_product_association(SdaiInstance instance) : base(instance) { }
        public document_product_association() : base(0) { }

        public static implicit operator document_product_association(SdaiInstance instance) => new document_product_association(instance);

        /// <summary>
        /// Create new instace of document_product_association and returns object of this class to interact with
        /// </summary>
        public static new document_product_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_product_association"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public document get_relating_document() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_document", ifcengine.sdaiINSTANCE, out inst); return new document (inst); }
        public document _relating_document { get { return get_relating_document(); } }
        public void put_relating_document(document inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_document", ifcengine.sdaiINSTANCE, i); }

        public product_or_formation_or_definition_get get_related_product() { return new product_or_formation_or_definition_get(m_instance, "related_product", 0); }
        public product_or_formation_or_definition_get _related_product { get { return new product_or_formation_or_definition_get(m_instance, "related_product", 0); } }
        public product_or_formation_or_definition_put put_related_product() { return new product_or_formation_or_definition_put(m_instance, "related_product", 0); }

        protected override TextValue EntityName() { return "document_product_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_product_equivalence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_product_equivalence : document_product_association
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_product_equivalence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_product_equivalence(SdaiInstance instance) : base(instance) { }
        public document_product_equivalence() : base(0) { }

        public static implicit operator document_product_equivalence(SdaiInstance instance) => new document_product_equivalence(instance);

        /// <summary>
        /// Create new instace of document_product_equivalence and returns object of this class to interact with
        /// </summary>
        public static new document_product_equivalence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_product_equivalence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "document_product_equivalence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_relationship(SdaiInstance instance) : base(instance) { }
        public document_relationship() : base(0) { }

        public static implicit operator document_relationship(SdaiInstance instance) => new document_relationship(instance);

        /// <summary>
        /// Create new instace of document_relationship and returns object of this class to interact with
        /// </summary>
        public static new document_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public document get_relating_document() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_document", ifcengine.sdaiINSTANCE, out inst); return new document (inst); }
        public document _relating_document { get { return get_relating_document(); } }
        public void put_relating_document(document inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_document", ifcengine.sdaiINSTANCE, i); }
        public document get_related_document() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_document", ifcengine.sdaiINSTANCE, out inst); return new document (inst); }
        public document _related_document { get { return get_related_document(); } }
        public void put_related_document(document inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_document", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "document_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_representation_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_representation_type : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_representation_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_representation_type(SdaiInstance instance) : base(instance) { }
        public document_representation_type() : base(0) { }

        public static implicit operator document_representation_type(SdaiInstance instance) => new document_representation_type(instance);

        /// <summary>
        /// Create new instace of document_representation_type and returns object of this class to interact with
        /// </summary>
        public static new document_representation_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_representation_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public document get_represented_document() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "represented_document", ifcengine.sdaiINSTANCE, out inst); return new document (inst); }
        public document _represented_document { get { return get_represented_document(); } }
        public void put_represented_document(document inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "represented_document", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "document_representation_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_type
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_type : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_type
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_type(SdaiInstance instance) : base(instance) { }
        public document_type() : base(0) { }

        public static implicit operator document_type(SdaiInstance instance) => new document_type(instance);

        /// <summary>
        /// Create new instace of document_type and returns object of this class to interact with
        /// </summary>
        public static new document_type Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_type"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_product_data_type() { return get_string("product_data_type", ifcengine.sdaiSTRING); }
        public TextValue _product_data_type { get { return get_product_data_type(); } }
        public void put_product_data_type(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "product_data_type", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "document_type"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_usage_constraint
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_usage_constraint : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_usage_constraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_usage_constraint(SdaiInstance instance) : base(instance) { }
        public document_usage_constraint() : base(0) { }

        public static implicit operator document_usage_constraint(SdaiInstance instance) => new document_usage_constraint(instance);

        /// <summary>
        /// Create new instace of document_usage_constraint and returns object of this class to interact with
        /// </summary>
        public static new document_usage_constraint Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_usage_constraint"); Debug.Assert(inst != 0); return inst; }

        public document get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new document (inst); }
        public document _source { get { return get_source(); } }
        public void put_source(document inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }
        public TextValue get_subject_element() { return get_string("subject_element", ifcengine.sdaiSTRING); }
        public TextValue _subject_element { get { return get_subject_element(); } }
        public void put_subject_element(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "subject_element", ifcengine.sdaiSTRING, value); }
        public TextValue get_subject_element_value() { return get_string("subject_element_value", ifcengine.sdaiSTRING); }
        public TextValue _subject_element_value { get { return get_subject_element_value(); } }
        public void put_subject_element_value(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "subject_element_value", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "document_usage_constraint"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of document_usage_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class document_usage_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of document_usage_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public document_usage_role(SdaiInstance instance) : base(instance) { }
        public document_usage_role() : base(0) { }

        public static implicit operator document_usage_role(SdaiInstance instance) => new document_usage_role(instance);

        /// <summary>
        /// Create new instace of document_usage_role and returns object of this class to interact with
        /// </summary>
        public static new document_usage_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "document_usage_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "document_usage_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dose_equivalent_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dose_equivalent_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dose_equivalent_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dose_equivalent_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public dose_equivalent_measure_with_unit() : base(0) { }

        public static implicit operator dose_equivalent_measure_with_unit(SdaiInstance instance) => new dose_equivalent_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of dose_equivalent_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new dose_equivalent_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dose_equivalent_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "dose_equivalent_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of dose_equivalent_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class dose_equivalent_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of dose_equivalent_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public dose_equivalent_unit(SdaiInstance instance) : base(instance) { }
        public dose_equivalent_unit() : base(0) { }

        public static implicit operator dose_equivalent_unit(SdaiInstance instance) => new dose_equivalent_unit(instance);

        /// <summary>
        /// Create new instace of dose_equivalent_unit and returns object of this class to interact with
        /// </summary>
        public static new dose_equivalent_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "dose_equivalent_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "dose_equivalent_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of double_offset_shelled_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class double_offset_shelled_solid : shelled_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of double_offset_shelled_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public double_offset_shelled_solid(SdaiInstance instance) : base(instance) { }
        public double_offset_shelled_solid() : base(0) { }

        public static implicit operator double_offset_shelled_solid(SdaiInstance instance) => new double_offset_shelled_solid(instance);

        /// <summary>
        /// Create new instace of double_offset_shelled_solid and returns object of this class to interact with
        /// </summary>
        public static new double_offset_shelled_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "double_offset_shelled_solid"); Debug.Assert(inst != 0); return inst; }

        public double? get_thickness2() { return get_double("thickness2", ifcengine.sdaiREAL);}
        public double? _thickness2 { get { return get_thickness2(); } }
        public void put_thickness2(double value) { ifcengine.sdaiPutAttrBN(m_instance, "thickness2", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "double_offset_shelled_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_defined_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_defined_transformation : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_defined_transformation(SdaiInstance instance) : base(instance) { }
        public item_defined_transformation() : base(0) { }

        public static implicit operator item_defined_transformation(SdaiInstance instance) => new item_defined_transformation(instance);

        /// <summary>
        /// Create new instace of item_defined_transformation and returns object of this class to interact with
        /// </summary>
        public static new item_defined_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_defined_transformation"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public representation_item get_transform_item_1() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transform_item_1", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _transform_item_1 { get { return get_transform_item_1(); } }
        public void put_transform_item_1(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "transform_item_1", ifcengine.sdaiINSTANCE, i); }
        public representation_item get_transform_item_2() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transform_item_2", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _transform_item_2 { get { return get_transform_item_2(); } }
        public void put_transform_item_2(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "transform_item_2", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "item_defined_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of transformation_with_derived_angle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class transformation_with_derived_angle : item_defined_transformation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of transformation_with_derived_angle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public transformation_with_derived_angle(SdaiInstance instance) : base(instance) { }
        public transformation_with_derived_angle() : base(0) { }

        public static implicit operator transformation_with_derived_angle(SdaiInstance instance) => new transformation_with_derived_angle(instance);

        /// <summary>
        /// Create new instace of transformation_with_derived_angle and returns object of this class to interact with
        /// </summary>
        public static new transformation_with_derived_angle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "transformation_with_derived_angle"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "transformation_with_derived_angle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draped_defined_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draped_defined_transformation : transformation_with_derived_angle
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draped_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draped_defined_transformation(SdaiInstance instance) : base(instance) { }
        public draped_defined_transformation() : base(0) { }

        public static implicit operator draped_defined_transformation(SdaiInstance instance) => new draped_defined_transformation(instance);

        /// <summary>
        /// Create new instace of draped_defined_transformation and returns object of this class to interact with
        /// </summary>
        public static new draped_defined_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draped_defined_transformation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "draped_defined_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_annotation_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_annotation_occurrence : annotation_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_annotation_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_annotation_occurrence(SdaiInstance instance) : base(instance) { }
        public draughting_annotation_occurrence() : base(0) { }

        public static implicit operator draughting_annotation_occurrence(SdaiInstance instance) => new draughting_annotation_occurrence(instance);

        /// <summary>
        /// Create new instace of draughting_annotation_occurrence and returns object of this class to interact with
        /// </summary>
        public static new draughting_annotation_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_annotation_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "draughting_annotation_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_elements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_elements : draughting_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_elements(SdaiInstance instance) : base(instance) { }
        public draughting_elements() : base(0) { }

        public static implicit operator draughting_elements(SdaiInstance instance) => new draughting_elements(instance);

        /// <summary>
        /// Create new instace of draughting_elements and returns object of this class to interact with
        /// </summary>
        public static new draughting_elements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_elements"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "draughting_elements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_model : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_model(SdaiInstance instance) : base(instance) { }
        public draughting_model() : base(0) { }

        public static implicit operator draughting_model(SdaiInstance instance) => new draughting_model(instance);

        /// <summary>
        /// Create new instace of draughting_model and returns object of this class to interact with
        /// </summary>
        public static new draughting_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_model"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "draughting_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of item_identified_representation_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class item_identified_representation_usage : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of item_identified_representation_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public item_identified_representation_usage(SdaiInstance instance) : base(instance) { }
        public item_identified_representation_usage() : base(0) { }

        public static implicit operator item_identified_representation_usage(SdaiInstance instance) => new item_identified_representation_usage(instance);

        /// <summary>
        /// Create new instace of item_identified_representation_usage and returns object of this class to interact with
        /// </summary>
        public static new item_identified_representation_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "item_identified_representation_usage"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        public represented_definition_get get_definition() { return new represented_definition_get(m_instance, "definition", 0); }
        public represented_definition_get _definition { get { return new represented_definition_get(m_instance, "definition", 0); } }
        public represented_definition_put put_definition() { return new represented_definition_put(m_instance, "definition", 0); }
        public representation get_used_representation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _used_representation { get { return get_used_representation(); } }
        public void put_used_representation(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, i); }
        public representation_item get_identified_item() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "identified_item", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _identified_item { get { return get_identified_item(); } }
        public void put_identified_item(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "identified_item", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "item_identified_representation_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_model_item_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_model_item_association : item_identified_representation_usage
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_model_item_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_model_item_association(SdaiInstance instance) : base(instance) { }
        public draughting_model_item_association() : base(0) { }

        public static implicit operator draughting_model_item_association(SdaiInstance instance) => new draughting_model_item_association(instance);

        /// <summary>
        /// Create new instace of draughting_model_item_association and returns object of this class to interact with
        /// </summary>
        public static new draughting_model_item_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_model_item_association"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "draughting_model_item_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_item : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_item(SdaiInstance instance) : base(instance) { }
        public pre_defined_item() : base(0) { }

        public static implicit operator pre_defined_item(SdaiInstance instance) => new pre_defined_item(instance);

        /// <summary>
        /// Create new instace of pre_defined_item and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_item"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "pre_defined_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_colour : pre_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_colour(SdaiInstance instance) : base(instance) { }
        public pre_defined_colour() : base(0) { }

        public static implicit operator pre_defined_colour(SdaiInstance instance) => new pre_defined_colour(instance);

        /// <summary>
        /// Create new instace of pre_defined_colour and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_colour"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_pre_defined_colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_pre_defined_colour : pre_defined_colour
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_pre_defined_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_pre_defined_colour(SdaiInstance instance) : base(instance) { }
        public draughting_pre_defined_colour() : base(0) { }

        public static implicit operator draughting_pre_defined_colour(SdaiInstance instance) => new draughting_pre_defined_colour(instance);

        /// <summary>
        /// Create new instace of draughting_pre_defined_colour and returns object of this class to interact with
        /// </summary>
        public static new draughting_pre_defined_colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_pre_defined_colour"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "draughting_pre_defined_colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_curve_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_curve_font : pre_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_curve_font(SdaiInstance instance) : base(instance) { }
        public pre_defined_curve_font() : base(0) { }

        public static implicit operator pre_defined_curve_font(SdaiInstance instance) => new pre_defined_curve_font(instance);

        /// <summary>
        /// Create new instace of pre_defined_curve_font and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_curve_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_curve_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_pre_defined_curve_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_pre_defined_curve_font : pre_defined_curve_font
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_pre_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_pre_defined_curve_font(SdaiInstance instance) : base(instance) { }
        public draughting_pre_defined_curve_font() : base(0) { }

        public static implicit operator draughting_pre_defined_curve_font(SdaiInstance instance) => new draughting_pre_defined_curve_font(instance);

        /// <summary>
        /// Create new instace of draughting_pre_defined_curve_font and returns object of this class to interact with
        /// </summary>
        public static new draughting_pre_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_pre_defined_curve_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "draughting_pre_defined_curve_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_text_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_text_font : pre_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_text_font(SdaiInstance instance) : base(instance) { }
        public pre_defined_text_font() : base(0) { }

        public static implicit operator pre_defined_text_font(SdaiInstance instance) => new pre_defined_text_font(instance);

        /// <summary>
        /// Create new instace of pre_defined_text_font and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_text_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_text_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_text_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_pre_defined_text_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_pre_defined_text_font : pre_defined_text_font
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_pre_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_pre_defined_text_font(SdaiInstance instance) : base(instance) { }
        public draughting_pre_defined_text_font() : base(0) { }

        public static implicit operator draughting_pre_defined_text_font(SdaiInstance instance) => new draughting_pre_defined_text_font(instance);

        /// <summary>
        /// Create new instace of draughting_pre_defined_text_font and returns object of this class to interact with
        /// </summary>
        public static new draughting_pre_defined_text_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_pre_defined_text_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "draughting_pre_defined_text_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_subfigure_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_subfigure_representation : symbol_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_subfigure_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_subfigure_representation(SdaiInstance instance) : base(instance) { }
        public draughting_subfigure_representation() : base(0) { }

        public static implicit operator draughting_subfigure_representation(SdaiInstance instance) => new draughting_subfigure_representation(instance);

        /// <summary>
        /// Create new instace of draughting_subfigure_representation and returns object of this class to interact with
        /// </summary>
        public static new draughting_subfigure_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_subfigure_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "draughting_subfigure_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_symbol_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_symbol_representation : symbol_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_symbol_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_symbol_representation(SdaiInstance instance) : base(instance) { }
        public draughting_symbol_representation() : base(0) { }

        public static implicit operator draughting_symbol_representation(SdaiInstance instance) => new draughting_symbol_representation(instance);

        /// <summary>
        /// Create new instace of draughting_symbol_representation and returns object of this class to interact with
        /// </summary>
        public static new draughting_symbol_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_symbol_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "draughting_symbol_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_literal_with_delineation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_literal_with_delineation : text_literal
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_literal_with_delineation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_literal_with_delineation(SdaiInstance instance) : base(instance) { }
        public text_literal_with_delineation() : base(0) { }

        public static implicit operator text_literal_with_delineation(SdaiInstance instance) => new text_literal_with_delineation(instance);

        /// <summary>
        /// Create new instace of text_literal_with_delineation and returns object of this class to interact with
        /// </summary>
        public static new text_literal_with_delineation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_literal_with_delineation"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_delineation() { return get_string("delineation", ifcengine.sdaiSTRING); }
        public TextValue _delineation { get { return get_delineation(); } }
        public void put_delineation(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "delineation", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "text_literal_with_delineation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_text_literal_with_delineation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_text_literal_with_delineation : text_literal_with_delineation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_text_literal_with_delineation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_text_literal_with_delineation(SdaiInstance instance) : base(instance) { }
        public draughting_text_literal_with_delineation() : base(0) { }

        public static implicit operator draughting_text_literal_with_delineation(SdaiInstance instance) => new draughting_text_literal_with_delineation(instance);

        /// <summary>
        /// Create new instace of draughting_text_literal_with_delineation and returns object of this class to interact with
        /// </summary>
        public static new draughting_text_literal_with_delineation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_text_literal_with_delineation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "draughting_text_literal_with_delineation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of draughting_title
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class draughting_title : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of draughting_title
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public draughting_title(SdaiInstance instance) : base(instance) { }
        public draughting_title() : base(0) { }

        public static implicit operator draughting_title(SdaiInstance instance) => new draughting_title(instance);

        /// <summary>
        /// Create new instace of draughting_title and returns object of this class to interact with
        /// </summary>
        public static new draughting_title Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "draughting_title"); Debug.Assert(inst != 0); return inst; }

        public set_of_draughting_titled_item get_items() { return (new set_of_draughting_titled_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_draughting_titled_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<draughting_titled_item> lst) { (new set_of_draughting_titled_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_draughting_titled_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public TextValue get_language() { return get_string("language", ifcengine.sdaiSTRING); }
        public TextValue _language { get { return get_language(); } }
        public void put_language(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "language", ifcengine.sdaiSTRING, value); }
        public TextValue get_contents() { return get_string("contents", ifcengine.sdaiSTRING); }
        public TextValue _contents { get { return get_contents(); } }
        public void put_contents(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "contents", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "draughting_title"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_definition : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_definition(SdaiInstance instance) : base(instance) { }
        public drawing_definition() : base(0) { }

        public static implicit operator drawing_definition(SdaiInstance instance) => new drawing_definition(instance);

        /// <summary>
        /// Create new instace of drawing_definition and returns object of this class to interact with
        /// </summary>
        public static new drawing_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_definition"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_drawing_number() { return get_string("drawing_number", ifcengine.sdaiSTRING); }
        public TextValue _drawing_number { get { return get_drawing_number(); } }
        public void put_drawing_number(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "drawing_number", ifcengine.sdaiSTRING, value); }
        public TextValue get_drawing_type() { return get_string("drawing_type", ifcengine.sdaiSTRING); }
        public TextValue _drawing_type { get { return get_drawing_type(); } }
        public void put_drawing_type(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "drawing_type", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "drawing_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_set : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_set(SdaiInstance instance) : base(instance) { }
        public presentation_set() : base(0) { }

        public static implicit operator presentation_set(SdaiInstance instance) => new presentation_set(instance);

        /// <summary>
        /// Create new instace of presentation_set and returns object of this class to interact with
        /// </summary>
        public static new presentation_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_set"); Debug.Assert(inst != 0); return inst; }

        public set_of_area_in_set get_areas() { return (new set_of_area_in_setSerializer()).FromAttr(m_instance, "areas"); }
        public set_of_area_in_set _areas { get { return get_areas(); } }

        protected override TextValue EntityName() { return "presentation_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_revision
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_revision : presentation_set
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_revision
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_revision(SdaiInstance instance) : base(instance) { }
        public drawing_revision() : base(0) { }

        public static implicit operator drawing_revision(SdaiInstance instance) => new drawing_revision(instance);

        /// <summary>
        /// Create new instace of drawing_revision and returns object of this class to interact with
        /// </summary>
        public static new drawing_revision Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_revision"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_revision_identifier() { return get_string("revision_identifier", ifcengine.sdaiSTRING); }
        public TextValue _revision_identifier { get { return get_revision_identifier(); } }
        public void put_revision_identifier(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "revision_identifier", ifcengine.sdaiSTRING, value); }
        public drawing_definition get_drawing_identifier() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "drawing_identifier", ifcengine.sdaiINSTANCE, out inst); return new drawing_definition (inst); }
        public drawing_definition _drawing_identifier { get { return get_drawing_identifier(); } }
        public void put_drawing_identifier(drawing_definition inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "drawing_identifier", ifcengine.sdaiINSTANCE, i); }
        public TextValue get_intended_scale() { return get_string("intended_scale", ifcengine.sdaiSTRING); }
        public TextValue _intended_scale { get { return get_intended_scale(); } }
        public void put_intended_scale(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "intended_scale", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "drawing_revision"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_revision_sequence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_revision_sequence : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_revision_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_revision_sequence(SdaiInstance instance) : base(instance) { }
        public drawing_revision_sequence() : base(0) { }

        public static implicit operator drawing_revision_sequence(SdaiInstance instance) => new drawing_revision_sequence(instance);

        /// <summary>
        /// Create new instace of drawing_revision_sequence and returns object of this class to interact with
        /// </summary>
        public static new drawing_revision_sequence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_revision_sequence"); Debug.Assert(inst != 0); return inst; }

        public drawing_revision get_predecessor() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "predecessor", ifcengine.sdaiINSTANCE, out inst); return new drawing_revision (inst); }
        public drawing_revision _predecessor { get { return get_predecessor(); } }
        public void put_predecessor(drawing_revision inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "predecessor", ifcengine.sdaiINSTANCE, i); }
        public drawing_revision get_successor() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "successor", ifcengine.sdaiINSTANCE, out inst); return new drawing_revision (inst); }
        public drawing_revision _successor { get { return get_successor(); } }
        public void put_successor(drawing_revision inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "successor", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "drawing_revision_sequence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_representation(SdaiInstance instance) : base(instance) { }
        public presentation_representation() : base(0) { }

        public static implicit operator presentation_representation(SdaiInstance instance) => new presentation_representation(instance);

        /// <summary>
        /// Create new instace of presentation_representation and returns object of this class to interact with
        /// </summary>
        public static new presentation_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "presentation_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_area : presentation_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_area(SdaiInstance instance) : base(instance) { }
        public presentation_area() : base(0) { }

        public static implicit operator presentation_area(SdaiInstance instance) => new presentation_area(instance);

        /// <summary>
        /// Create new instace of presentation_area and returns object of this class to interact with
        /// </summary>
        public static new presentation_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_area"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "presentation_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_sheet_revision
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_sheet_revision : presentation_area
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_sheet_revision
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_sheet_revision(SdaiInstance instance) : base(instance) { }
        public drawing_sheet_revision() : base(0) { }

        public static implicit operator drawing_sheet_revision(SdaiInstance instance) => new drawing_sheet_revision(instance);

        /// <summary>
        /// Create new instace of drawing_sheet_revision and returns object of this class to interact with
        /// </summary>
        public static new drawing_sheet_revision Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_sheet_revision"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_revision_identifier() { return get_string("revision_identifier", ifcengine.sdaiSTRING); }
        public TextValue _revision_identifier { get { return get_revision_identifier(); } }
        public void put_revision_identifier(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "revision_identifier", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "drawing_sheet_revision"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_sheet_revision_sequence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_sheet_revision_sequence : representation_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_sheet_revision_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_sheet_revision_sequence(SdaiInstance instance) : base(instance) { }
        public drawing_sheet_revision_sequence() : base(0) { }

        public static implicit operator drawing_sheet_revision_sequence(SdaiInstance instance) => new drawing_sheet_revision_sequence(instance);

        /// <summary>
        /// Create new instace of drawing_sheet_revision_sequence and returns object of this class to interact with
        /// </summary>
        public static new drawing_sheet_revision_sequence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_sheet_revision_sequence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "drawing_sheet_revision_sequence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of drawing_sheet_revision_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class drawing_sheet_revision_usage : area_in_set
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of drawing_sheet_revision_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public drawing_sheet_revision_usage(SdaiInstance instance) : base(instance) { }
        public drawing_sheet_revision_usage() : base(0) { }

        public static implicit operator drawing_sheet_revision_usage(SdaiInstance instance) => new drawing_sheet_revision_usage(instance);

        /// <summary>
        /// Create new instace of drawing_sheet_revision_usage and returns object of this class to interact with
        /// </summary>
        public static new drawing_sheet_revision_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "drawing_sheet_revision_usage"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_sheet_number() { return get_string("sheet_number", ifcengine.sdaiSTRING); }
        public TextValue _sheet_number { get { return get_sheet_number(); } }
        public void put_sheet_number(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "sheet_number", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "drawing_sheet_revision_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge : topological_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge(SdaiInstance instance) : base(instance) { }
        public edge() : base(0) { }

        public static implicit operator edge(SdaiInstance instance) => new edge(instance);

        /// <summary>
        /// Create new instace of edge and returns object of this class to interact with
        /// </summary>
        public static new edge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge"); Debug.Assert(inst != 0); return inst; }

        public vertex get_edge_start() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_start", ifcengine.sdaiINSTANCE, out inst); return new vertex (inst); }
        public vertex _edge_start { get { return get_edge_start(); } }
        public void put_edge_start(vertex inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "edge_start", ifcengine.sdaiINSTANCE, i); }
        public vertex get_edge_end() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_end", ifcengine.sdaiINSTANCE, out inst); return new vertex (inst); }
        public vertex _edge_end { get { return get_edge_end(); } }
        public void put_edge_end(vertex inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "edge_end", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "edge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_based_wireframe_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_based_wireframe_model : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_based_wireframe_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_based_wireframe_model(SdaiInstance instance) : base(instance) { }
        public edge_based_wireframe_model() : base(0) { }

        public static implicit operator edge_based_wireframe_model(SdaiInstance instance) => new edge_based_wireframe_model(instance);

        /// <summary>
        /// Create new instace of edge_based_wireframe_model and returns object of this class to interact with
        /// </summary>
        public static new edge_based_wireframe_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_based_wireframe_model"); Debug.Assert(inst != 0); return inst; }

        public set_of_connected_edge_set get_ebwm_boundary() { return (new set_of_connected_edge_setSerializer()).FromAttr(m_instance, "ebwm_boundary"); }
        public set_of_connected_edge_set _ebwm_boundary { get { return get_ebwm_boundary(); } }
        public void put_ebwm_boundary(IEnumerable<connected_edge_set> lst) { (new set_of_connected_edge_setSerializer()).ToSdaiAggr(lst, m_instance, "ebwm_boundary"); }
        //public void put_ebwm_boundary_untyped(IEnumerable lst) { (new set_of_connected_edge_setSerializer()).ToSdaiAggr(lst, m_instance, "ebwm_boundary"); }

        protected override TextValue EntityName() { return "edge_based_wireframe_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_based_wireframe_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_based_wireframe_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_based_wireframe_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_based_wireframe_shape_representation(SdaiInstance instance) : base(instance) { }
        public edge_based_wireframe_shape_representation() : base(0) { }

        public static implicit operator edge_based_wireframe_shape_representation(SdaiInstance instance) => new edge_based_wireframe_shape_representation(instance);

        /// <summary>
        /// Create new instace of edge_based_wireframe_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new edge_based_wireframe_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_based_wireframe_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "edge_based_wireframe_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_blended_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_blended_solid : modified_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_blended_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_blended_solid(SdaiInstance instance) : base(instance) { }
        public edge_blended_solid() : base(0) { }

        public static implicit operator edge_blended_solid(SdaiInstance instance) => new edge_blended_solid(instance);

        public list_of_edge_curve get_blended_edges() { return (new list_of_edge_curveSerializer()).FromAttr(m_instance, "blended_edges"); }
        public list_of_edge_curve _blended_edges { get { return get_blended_edges(); } }
        public void put_blended_edges(IEnumerable<edge_curve> lst) { (new list_of_edge_curveSerializer()).ToSdaiAggr(lst, m_instance, "blended_edges"); }
        //public void put_blended_edges_untyped(IEnumerable lst) { (new list_of_edge_curveSerializer()).ToSdaiAggr(lst, m_instance, "blended_edges"); }

        protected override TextValue EntityName() { return "edge_blended_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_curve : edge
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_curve(SdaiInstance instance) : base(instance) { }
        public edge_curve() : base(0) { }

        public static implicit operator edge_curve(SdaiInstance instance) => new edge_curve(instance);

        /// <summary>
        /// Create new instace of edge_curve and returns object of this class to interact with
        /// </summary>
        public static new edge_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_curve"); Debug.Assert(inst != 0); return inst; }

        public curve get_edge_geometry() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_geometry", ifcengine.sdaiINSTANCE, out inst); return new curve (inst); }
        public curve _edge_geometry { get { return get_edge_geometry(); } }
        public void put_edge_geometry(curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "edge_geometry", ifcengine.sdaiINSTANCE, i); }
        public bool? get_same_sense() { return get_bool("same_sense", ifcengine.sdaiBOOLEAN);}
        public bool? _same_sense { get { return get_same_sense(); } }
        public void put_same_sense(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "same_sense", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "edge_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class loop : topological_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public loop(SdaiInstance instance) : base(instance) { }
        public loop() : base(0) { }

        public static implicit operator loop(SdaiInstance instance) => new loop(instance);

        /// <summary>
        /// Create new instace of loop and returns object of this class to interact with
        /// </summary>
        public static new loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "loop"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of edge_loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class edge_loop : loop
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of edge_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public edge_loop(SdaiInstance instance) : base(instance) { }
        public edge_loop() : base(0) { }

        public static implicit operator edge_loop(SdaiInstance instance) => new edge_loop(instance);

        /// <summary>
        /// Create new instace of edge_loop and returns object of this class to interact with
        /// </summary>
        public static new edge_loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "edge_loop"); Debug.Assert(inst != 0); return inst; }

        public list_of_oriented_edge get_edge_list() { return (new list_of_oriented_edgeSerializer()).FromAttr(m_instance, "edge_list"); }
        public list_of_oriented_edge _edge_list { get { return get_edge_list(); } }
        public void put_edge_list(IEnumerable<oriented_edge> lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }
        //public void put_edge_list_untyped(IEnumerable lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }

        protected override TextValue EntityName() { return "edge_loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of effectivity_context_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class effectivity_context_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of effectivity_context_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public effectivity_context_role(SdaiInstance instance) : base(instance) { }
        public effectivity_context_role() : base(0) { }

        public static implicit operator effectivity_context_role(SdaiInstance instance) => new effectivity_context_role(instance);

        /// <summary>
        /// Create new instace of effectivity_context_role and returns object of this class to interact with
        /// </summary>
        public static new effectivity_context_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "effectivity_context_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "effectivity_context_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of effectivity_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class effectivity_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of effectivity_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public effectivity_relationship(SdaiInstance instance) : base(instance) { }
        public effectivity_relationship() : base(0) { }

        public static implicit operator effectivity_relationship(SdaiInstance instance) => new effectivity_relationship(instance);

        /// <summary>
        /// Create new instace of effectivity_relationship and returns object of this class to interact with
        /// </summary>
        public static new effectivity_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "effectivity_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public effectivity get_related_effectivity() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_effectivity", ifcengine.sdaiINSTANCE, out inst); return new effectivity (inst); }
        public effectivity _related_effectivity { get { return get_related_effectivity(); } }
        public void put_related_effectivity(effectivity inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_effectivity", ifcengine.sdaiINSTANCE, i); }
        public effectivity get_relating_effectivity() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_effectivity", ifcengine.sdaiINSTANCE, out inst); return new effectivity (inst); }
        public effectivity _relating_effectivity { get { return get_relating_effectivity(); } }
        public void put_relating_effectivity(effectivity inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_effectivity", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "effectivity_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of electric_charge_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class electric_charge_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of electric_charge_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public electric_charge_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public electric_charge_measure_with_unit() : base(0) { }

        public static implicit operator electric_charge_measure_with_unit(SdaiInstance instance) => new electric_charge_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of electric_charge_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new electric_charge_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "electric_charge_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "electric_charge_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of electric_charge_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class electric_charge_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of electric_charge_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public electric_charge_unit(SdaiInstance instance) : base(instance) { }
        public electric_charge_unit() : base(0) { }

        public static implicit operator electric_charge_unit(SdaiInstance instance) => new electric_charge_unit(instance);

        /// <summary>
        /// Create new instace of electric_charge_unit and returns object of this class to interact with
        /// </summary>
        public static new electric_charge_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "electric_charge_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "electric_charge_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of electric_current_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class electric_current_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of electric_current_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public electric_current_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public electric_current_measure_with_unit() : base(0) { }

        public static implicit operator electric_current_measure_with_unit(SdaiInstance instance) => new electric_current_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of electric_current_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new electric_current_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "electric_current_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "electric_current_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of electric_current_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class electric_current_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of electric_current_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public electric_current_unit(SdaiInstance instance) : base(instance) { }
        public electric_current_unit() : base(0) { }

        public static implicit operator electric_current_unit(SdaiInstance instance) => new electric_current_unit(instance);

        /// <summary>
        /// Create new instace of electric_current_unit and returns object of this class to interact with
        /// </summary>
        public static new electric_current_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "electric_current_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "electric_current_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of electric_potential_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class electric_potential_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of electric_potential_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public electric_potential_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public electric_potential_measure_with_unit() : base(0) { }

        public static implicit operator electric_potential_measure_with_unit(SdaiInstance instance) => new electric_potential_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of electric_potential_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new electric_potential_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "electric_potential_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "electric_potential_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of electric_potential_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class electric_potential_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of electric_potential_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public electric_potential_unit(SdaiInstance instance) : base(instance) { }
        public electric_potential_unit() : base(0) { }

        public static implicit operator electric_potential_unit(SdaiInstance instance) => new electric_potential_unit(instance);

        /// <summary>
        /// Create new instace of electric_potential_unit and returns object of this class to interact with
        /// </summary>
        public static new electric_potential_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "electric_potential_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "electric_potential_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of elementary_brep_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class elementary_brep_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of elementary_brep_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public elementary_brep_shape_representation(SdaiInstance instance) : base(instance) { }
        public elementary_brep_shape_representation() : base(0) { }

        public static implicit operator elementary_brep_shape_representation(SdaiInstance instance) => new elementary_brep_shape_representation(instance);

        /// <summary>
        /// Create new instace of elementary_brep_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new elementary_brep_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "elementary_brep_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "elementary_brep_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ellipse
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ellipse : conic
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ellipse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ellipse(SdaiInstance instance) : base(instance) { }
        public ellipse() : base(0) { }

        public static implicit operator ellipse(SdaiInstance instance) => new ellipse(instance);

        /// <summary>
        /// Create new instace of ellipse and returns object of this class to interact with
        /// </summary>
        public static new ellipse Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ellipse"); Debug.Assert(inst != 0); return inst; }

        public double? get_semi_axis_1() { return get_double("semi_axis_1", ifcengine.sdaiREAL);}
        public double? _semi_axis_1 { get { return get_semi_axis_1(); } }
        public void put_semi_axis_1(double value) { ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_1", ifcengine.sdaiREAL, ref value); }
        public double? get_semi_axis_2() { return get_double("semi_axis_2", ifcengine.sdaiREAL);}
        public double? _semi_axis_2 { get { return get_semi_axis_2(); } }
        public void put_semi_axis_2(double value) { ifcengine.sdaiPutAttrBN(m_instance, "semi_axis_2", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "ellipse"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of energy_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class energy_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of energy_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public energy_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public energy_measure_with_unit() : base(0) { }

        public static implicit operator energy_measure_with_unit(SdaiInstance instance) => new energy_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of energy_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new energy_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "energy_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "energy_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of energy_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class energy_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of energy_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public energy_unit(SdaiInstance instance) : base(instance) { }
        public energy_unit() : base(0) { }

        public static implicit operator energy_unit(SdaiInstance instance) => new energy_unit(instance);

        /// <summary>
        /// Create new instace of energy_unit and returns object of this class to interact with
        /// </summary>
        public static new energy_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "energy_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "energy_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of entity_assertion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class entity_assertion : fact_type
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of entity_assertion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public entity_assertion(SdaiInstance instance) : base(instance) { }
        public entity_assertion() : base(0) { }

        public static implicit operator entity_assertion(SdaiInstance instance) => new entity_assertion(instance);

        /// <summary>
        /// Create new instace of entity_assertion and returns object of this class to interact with
        /// </summary>
        public static new entity_assertion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "entity_assertion"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "entity_assertion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of enum_reference_prefix
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class enum_reference_prefix : descriptive_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of enum_reference_prefix
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public enum_reference_prefix(SdaiInstance instance) : base(instance) { }
        public enum_reference_prefix() : base(0) { }

        public static implicit operator enum_reference_prefix(SdaiInstance instance) => new enum_reference_prefix(instance);

        /// <summary>
        /// Create new instace of enum_reference_prefix and returns object of this class to interact with
        /// </summary>
        public static new enum_reference_prefix Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "enum_reference_prefix"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "enum_reference_prefix"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of environment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class environment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of environment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public environment(SdaiInstance instance) : base(instance) { }
        public environment() : base(0) { }

        public static implicit operator environment(SdaiInstance instance) => new environment(instance);

        /// <summary>
        /// Create new instace of environment and returns object of this class to interact with
        /// </summary>
        public static new environment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "environment"); Debug.Assert(inst != 0); return inst; }

        public generic_variable get_syntactic_representation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "syntactic_representation", ifcengine.sdaiINSTANCE, out inst); return new generic_variable (inst); }
        public generic_variable _syntactic_representation { get { return get_syntactic_representation(); } }
        public void put_syntactic_representation(generic_variable inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "syntactic_representation", ifcengine.sdaiINSTANCE, i); }
        public variable_semantics get_semantics() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "semantics", ifcengine.sdaiINSTANCE, out inst); return new variable_semantics (inst); }
        public variable_semantics _semantics { get { return get_semantics(); } }
        public void put_semantics(variable_semantics inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "semantics", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "environment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of evaluated_characteristic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class evaluated_characteristic : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of evaluated_characteristic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public evaluated_characteristic(SdaiInstance instance) : base(instance) { }
        public evaluated_characteristic() : base(0) { }

        public static implicit operator evaluated_characteristic(SdaiInstance instance) => new evaluated_characteristic(instance);

        /// <summary>
        /// Create new instace of evaluated_characteristic and returns object of this class to interact with
        /// </summary>
        public static new evaluated_characteristic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "evaluated_characteristic"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public representation get_rep_1() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rep_1", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _rep_1 { get { return get_rep_1(); } }
        public void put_rep_1(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "rep_1", ifcengine.sdaiINSTANCE, i); }
        public representation get_rep_2() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rep_2", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _rep_2 { get { return get_rep_2(); } }
        public void put_rep_2(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "rep_2", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "evaluated_characteristic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of evaluated_degenerate_pcurve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class evaluated_degenerate_pcurve : degenerate_pcurve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of evaluated_degenerate_pcurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public evaluated_degenerate_pcurve(SdaiInstance instance) : base(instance) { }
        public evaluated_degenerate_pcurve() : base(0) { }

        public static implicit operator evaluated_degenerate_pcurve(SdaiInstance instance) => new evaluated_degenerate_pcurve(instance);

        /// <summary>
        /// Create new instace of evaluated_degenerate_pcurve and returns object of this class to interact with
        /// </summary>
        public static new evaluated_degenerate_pcurve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "evaluated_degenerate_pcurve"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point get_equivalent_point() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "equivalent_point", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point (inst); }
        public cartesian_point _equivalent_point { get { return get_equivalent_point(); } }
        public void put_equivalent_point(cartesian_point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "equivalent_point", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "evaluated_degenerate_pcurve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of evaluation_product_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class evaluation_product_definition : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of evaluation_product_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public evaluation_product_definition(SdaiInstance instance) : base(instance) { }
        public evaluation_product_definition() : base(0) { }

        public static implicit operator evaluation_product_definition(SdaiInstance instance) => new evaluation_product_definition(instance);

        /// <summary>
        /// Create new instace of evaluation_product_definition and returns object of this class to interact with
        /// </summary>
        public static new evaluation_product_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "evaluation_product_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "evaluation_product_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of event_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class event_occurrence : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of event_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public event_occurrence(SdaiInstance instance) : base(instance) { }
        public event_occurrence() : base(0) { }

        public static implicit operator event_occurrence(SdaiInstance instance) => new event_occurrence(instance);

        /// <summary>
        /// Create new instace of event_occurrence and returns object of this class to interact with
        /// </summary>
        public static new event_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "event_occurrence"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "event_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of event_occurrence_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class event_occurrence_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of event_occurrence_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public event_occurrence_relationship(SdaiInstance instance) : base(instance) { }
        public event_occurrence_relationship() : base(0) { }

        public static implicit operator event_occurrence_relationship(SdaiInstance instance) => new event_occurrence_relationship(instance);

        /// <summary>
        /// Create new instace of event_occurrence_relationship and returns object of this class to interact with
        /// </summary>
        public static new event_occurrence_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "event_occurrence_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public event_occurrence get_relating_event() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_event", ifcengine.sdaiINSTANCE, out inst); return new event_occurrence (inst); }
        public event_occurrence _relating_event { get { return get_relating_event(); } }
        public void put_relating_event(event_occurrence inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_event", ifcengine.sdaiINSTANCE, i); }
        public event_occurrence get_related_event() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_event", ifcengine.sdaiINSTANCE, out inst); return new event_occurrence (inst); }
        public event_occurrence _related_event { get { return get_related_event(); } }
        public void put_related_event(event_occurrence inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_event", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "event_occurrence_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of event_occurrence_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class event_occurrence_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of event_occurrence_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public event_occurrence_role(SdaiInstance instance) : base(instance) { }
        public event_occurrence_role() : base(0) { }

        public static implicit operator event_occurrence_role(SdaiInstance instance) => new event_occurrence_role(instance);

        /// <summary>
        /// Create new instace of event_occurrence_role and returns object of this class to interact with
        /// </summary>
        public static new event_occurrence_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "event_occurrence_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "event_occurrence_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_feature_category
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_feature_category : group
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_feature_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_feature_category(SdaiInstance instance) : base(instance) { }
        public product_concept_feature_category() : base(0) { }

        public static implicit operator product_concept_feature_category(SdaiInstance instance) => new product_concept_feature_category(instance);

        /// <summary>
        /// Create new instace of product_concept_feature_category and returns object of this class to interact with
        /// </summary>
        public static new product_concept_feature_category Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_feature_category"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "product_concept_feature_category"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of exclusive_product_concept_feature_category
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class exclusive_product_concept_feature_category : product_concept_feature_category
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of exclusive_product_concept_feature_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public exclusive_product_concept_feature_category(SdaiInstance instance) : base(instance) { }
        public exclusive_product_concept_feature_category() : base(0) { }

        public static implicit operator exclusive_product_concept_feature_category(SdaiInstance instance) => new exclusive_product_concept_feature_category(instance);

        /// <summary>
        /// Create new instace of exclusive_product_concept_feature_category and returns object of this class to interact with
        /// </summary>
        public static new exclusive_product_concept_feature_category Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "exclusive_product_concept_feature_category"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "exclusive_product_concept_feature_category"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uncertainty_qualifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uncertainty_qualifier : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uncertainty_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uncertainty_qualifier(SdaiInstance instance) : base(instance) { }
        public uncertainty_qualifier() : base(0) { }

        public static implicit operator uncertainty_qualifier(SdaiInstance instance) => new uncertainty_qualifier(instance);

        /// <summary>
        /// Create new instace of uncertainty_qualifier and returns object of this class to interact with
        /// </summary>
        public static new uncertainty_qualifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uncertainty_qualifier"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_measure_name() { return get_string("measure_name", ifcengine.sdaiSTRING); }
        public TextValue _measure_name { get { return get_measure_name(); } }
        public void put_measure_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "measure_name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "uncertainty_qualifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of standard_uncertainty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class standard_uncertainty : uncertainty_qualifier
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of standard_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public standard_uncertainty(SdaiInstance instance) : base(instance) { }
        public standard_uncertainty() : base(0) { }

        public static implicit operator standard_uncertainty(SdaiInstance instance) => new standard_uncertainty(instance);

        /// <summary>
        /// Create new instace of standard_uncertainty and returns object of this class to interact with
        /// </summary>
        public static new standard_uncertainty Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "standard_uncertainty"); Debug.Assert(inst != 0); return inst; }

        public double? get_uncertainty_value() { return get_double("uncertainty_value", ifcengine.sdaiREAL);}
        public double? _uncertainty_value { get { return get_uncertainty_value(); } }
        public void put_uncertainty_value(double value) { ifcengine.sdaiPutAttrBN(m_instance, "uncertainty_value", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "standard_uncertainty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of expanded_uncertainty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class expanded_uncertainty : standard_uncertainty
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of expanded_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public expanded_uncertainty(SdaiInstance instance) : base(instance) { }
        public expanded_uncertainty() : base(0) { }

        public static implicit operator expanded_uncertainty(SdaiInstance instance) => new expanded_uncertainty(instance);

        /// <summary>
        /// Create new instace of expanded_uncertainty and returns object of this class to interact with
        /// </summary>
        public static new expanded_uncertainty Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "expanded_uncertainty"); Debug.Assert(inst != 0); return inst; }

        public double? get_coverage_factor() { return get_double("coverage_factor", ifcengine.sdaiREAL);}
        public double? _coverage_factor { get { return get_coverage_factor(); } }
        public void put_coverage_factor(double value) { ifcengine.sdaiPutAttrBN(m_instance, "coverage_factor", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "expanded_uncertainty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of explicit_procedural_representation_item_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class explicit_procedural_representation_item_relationship : representation_item_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of explicit_procedural_representation_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public explicit_procedural_representation_item_relationship(SdaiInstance instance) : base(instance) { }
        public explicit_procedural_representation_item_relationship() : base(0) { }

        public static implicit operator explicit_procedural_representation_item_relationship(SdaiInstance instance) => new explicit_procedural_representation_item_relationship(instance);

        /// <summary>
        /// Create new instace of explicit_procedural_representation_item_relationship and returns object of this class to interact with
        /// </summary>
        public static new explicit_procedural_representation_item_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "explicit_procedural_representation_item_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "explicit_procedural_representation_item_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of explicit_procedural_geometric_representation_item_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class explicit_procedural_geometric_representation_item_relationship : explicit_procedural_representation_item_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of explicit_procedural_geometric_representation_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public explicit_procedural_geometric_representation_item_relationship(SdaiInstance instance) : base(instance) { }
        public explicit_procedural_geometric_representation_item_relationship() : base(0) { }

        public static implicit operator explicit_procedural_geometric_representation_item_relationship(SdaiInstance instance) => new explicit_procedural_geometric_representation_item_relationship(instance);

        /// <summary>
        /// Create new instace of explicit_procedural_geometric_representation_item_relationship and returns object of this class to interact with
        /// </summary>
        public static new explicit_procedural_geometric_representation_item_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "explicit_procedural_geometric_representation_item_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "explicit_procedural_geometric_representation_item_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of explicit_procedural_representation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class explicit_procedural_representation_relationship : representation_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of explicit_procedural_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public explicit_procedural_representation_relationship(SdaiInstance instance) : base(instance) { }
        public explicit_procedural_representation_relationship() : base(0) { }

        public static implicit operator explicit_procedural_representation_relationship(SdaiInstance instance) => new explicit_procedural_representation_relationship(instance);

        /// <summary>
        /// Create new instace of explicit_procedural_representation_relationship and returns object of this class to interact with
        /// </summary>
        public static new explicit_procedural_representation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "explicit_procedural_representation_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "explicit_procedural_representation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of explicit_procedural_shape_representation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class explicit_procedural_shape_representation_relationship : explicit_procedural_representation_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of explicit_procedural_shape_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public explicit_procedural_shape_representation_relationship(SdaiInstance instance) : base(instance) { }
        public explicit_procedural_shape_representation_relationship() : base(0) { }

        public static implicit operator explicit_procedural_shape_representation_relationship(SdaiInstance instance) => new explicit_procedural_shape_representation_relationship(instance);

        /// <summary>
        /// Create new instace of explicit_procedural_shape_representation_relationship and returns object of this class to interact with
        /// </summary>
        public static new explicit_procedural_shape_representation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "explicit_procedural_shape_representation_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "explicit_procedural_shape_representation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of expression_conversion_based_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class expression_conversion_based_unit : context_dependent_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of expression_conversion_based_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public expression_conversion_based_unit(SdaiInstance instance) : base(instance) { }
        public expression_conversion_based_unit() : base(0) { }

        public static implicit operator expression_conversion_based_unit(SdaiInstance instance) => new expression_conversion_based_unit(instance);

        /// <summary>
        /// Create new instace of expression_conversion_based_unit and returns object of this class to interact with
        /// </summary>
        public static new expression_conversion_based_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "expression_conversion_based_unit"); Debug.Assert(inst != 0); return inst; }

        public environment get_associated_variable_environment() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "associated_variable_environment", ifcengine.sdaiINSTANCE, out inst); return new environment (inst); }
        public environment _associated_variable_environment { get { return get_associated_variable_environment(); } }

        protected override TextValue EntityName() { return "expression_conversion_based_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extension : derived_shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extension(SdaiInstance instance) : base(instance) { }
        public extension() : base(0) { }

        public static implicit operator extension(SdaiInstance instance) => new extension(instance);

        /// <summary>
        /// Create new instace of extension and returns object of this class to interact with
        /// </summary>
        public static new extension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "extension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extent : characterized_object
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extent(SdaiInstance instance) : base(instance) { }
        public extent() : base(0) { }

        public static implicit operator extent(SdaiInstance instance) => new extent(instance);

        /// <summary>
        /// Create new instace of extent and returns object of this class to interact with
        /// </summary>
        public static new extent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extent"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "extent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of external_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class external_source : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of external_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public external_source(SdaiInstance instance) : base(instance) { }
        public external_source() : base(0) { }

        public static implicit operator external_source(SdaiInstance instance) => new external_source(instance);

        /// <summary>
        /// Create new instace of external_source and returns object of this class to interact with
        /// </summary>
        public static new external_source Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "external_source"); Debug.Assert(inst != 0); return inst; }


        public source_item_get get_source_id() { return new source_item_get(m_instance, "source_id", 0); }
        public source_item_get _source_id { get { return new source_item_get(m_instance, "source_id", 0); } }
        public source_item_put put_source_id() { return new source_item_put(m_instance, "source_id", 0); }

        protected override TextValue EntityName() { return "external_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of external_class_library
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class external_class_library : external_source
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of external_class_library
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public external_class_library(SdaiInstance instance) : base(instance) { }
        public external_class_library() : base(0) { }

        public static implicit operator external_class_library(SdaiInstance instance) => new external_class_library(instance);

        /// <summary>
        /// Create new instace of external_class_library and returns object of this class to interact with
        /// </summary>
        public static new external_class_library Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "external_class_library"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "external_class_library"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of external_source_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class external_source_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of external_source_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public external_source_relationship(SdaiInstance instance) : base(instance) { }
        public external_source_relationship() : base(0) { }

        public static implicit operator external_source_relationship(SdaiInstance instance) => new external_source_relationship(instance);

        /// <summary>
        /// Create new instace of external_source_relationship and returns object of this class to interact with
        /// </summary>
        public static new external_source_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "external_source_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public external_source get_relating_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _relating_source { get { return get_relating_source(); } }
        public void put_relating_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_source", ifcengine.sdaiINSTANCE, i); }
        public external_source get_related_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _related_source { get { return get_related_source(); } }
        public void put_related_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_source", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "external_source_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_class
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_class : class_
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_class(SdaiInstance instance) : base(instance) { }
        public externally_defined_class() : base(0) { }

        public static implicit operator externally_defined_class(SdaiInstance instance) => new externally_defined_class(instance);

        /// <summary>
        /// Create new instace of externally_defined_class and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_class Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_class"); Debug.Assert(inst != 0); return inst; }


        public source_item_get get_item_id() { return new source_item_get(m_instance, "item_id", 0); }
        public source_item_get _item_id { get { return new source_item_get(m_instance, "item_id", 0); } }
        public source_item_put put_item_id() { return new source_item_put(m_instance, "item_id", 0); }
        public external_source get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _source { get { return get_source(); } }
        public void put_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "externally_defined_class"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_colour : colour_specification
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_colour(SdaiInstance instance) : base(instance) { }
        public externally_defined_colour() : base(0) { }

        public static implicit operator externally_defined_colour(SdaiInstance instance) => new externally_defined_colour(instance);

        /// <summary>
        /// Create new instace of externally_defined_colour and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_colour"); Debug.Assert(inst != 0); return inst; }


        public source_item_get get_item_id() { return new source_item_get(m_instance, "item_id", 0); }
        public source_item_get _item_id { get { return new source_item_get(m_instance, "item_id", 0); } }
        public source_item_put put_item_id() { return new source_item_put(m_instance, "item_id", 0); }
        public external_source get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _source { get { return get_source(); } }
        public void put_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "externally_defined_colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_context_dependent_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_context_dependent_unit : context_dependent_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_context_dependent_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_context_dependent_unit(SdaiInstance instance) : base(instance) { }
        public externally_defined_context_dependent_unit() : base(0) { }

        public static implicit operator externally_defined_context_dependent_unit(SdaiInstance instance) => new externally_defined_context_dependent_unit(instance);

        /// <summary>
        /// Create new instace of externally_defined_context_dependent_unit and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_context_dependent_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_context_dependent_unit"); Debug.Assert(inst != 0); return inst; }


        public source_item_get get_item_id() { return new source_item_get(m_instance, "item_id", 0); }
        public source_item_get _item_id { get { return new source_item_get(m_instance, "item_id", 0); } }
        public source_item_put put_item_id() { return new source_item_put(m_instance, "item_id", 0); }
        public external_source get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _source { get { return get_source(); } }
        public void put_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "externally_defined_context_dependent_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_conversion_based_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_conversion_based_unit : conversion_based_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_conversion_based_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_conversion_based_unit(SdaiInstance instance) : base(instance) { }
        public externally_defined_conversion_based_unit() : base(0) { }

        public static implicit operator externally_defined_conversion_based_unit(SdaiInstance instance) => new externally_defined_conversion_based_unit(instance);

        /// <summary>
        /// Create new instace of externally_defined_conversion_based_unit and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_conversion_based_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_conversion_based_unit"); Debug.Assert(inst != 0); return inst; }


        public source_item_get get_item_id() { return new source_item_get(m_instance, "item_id", 0); }
        public source_item_get _item_id { get { return new source_item_get(m_instance, "item_id", 0); } }
        public source_item_put put_item_id() { return new source_item_put(m_instance, "item_id", 0); }
        public external_source get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _source { get { return get_source(); } }
        public void put_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "externally_defined_conversion_based_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_currency
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_currency : currency
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_currency
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_currency(SdaiInstance instance) : base(instance) { }
        public externally_defined_currency() : base(0) { }

        public static implicit operator externally_defined_currency(SdaiInstance instance) => new externally_defined_currency(instance);

        /// <summary>
        /// Create new instace of externally_defined_currency and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_currency Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_currency"); Debug.Assert(inst != 0); return inst; }


        public source_item_get get_item_id() { return new source_item_get(m_instance, "item_id", 0); }
        public source_item_get _item_id { get { return new source_item_get(m_instance, "item_id", 0); } }
        public source_item_put put_item_id() { return new source_item_put(m_instance, "item_id", 0); }
        public external_source get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _source { get { return get_source(); } }
        public void put_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "externally_defined_currency"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_item : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_item(SdaiInstance instance) : base(instance) { }
        public externally_defined_item() : base(0) { }

        public static implicit operator externally_defined_item(SdaiInstance instance) => new externally_defined_item(instance);

        /// <summary>
        /// Create new instace of externally_defined_item and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_item"); Debug.Assert(inst != 0); return inst; }


        public source_item_get get_item_id() { return new source_item_get(m_instance, "item_id", 0); }
        public source_item_get _item_id { get { return new source_item_get(m_instance, "item_id", 0); } }
        public source_item_put put_item_id() { return new source_item_put(m_instance, "item_id", 0); }
        public external_source get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _source { get { return get_source(); } }
        public void put_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "externally_defined_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_curve_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_curve_font : externally_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_curve_font(SdaiInstance instance) : base(instance) { }
        public externally_defined_curve_font() : base(0) { }

        public static implicit operator externally_defined_curve_font(SdaiInstance instance) => new externally_defined_curve_font(instance);

        /// <summary>
        /// Create new instace of externally_defined_curve_font and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_curve_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "externally_defined_curve_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_dimension_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_dimension_definition : dimensional_size
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_dimension_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_dimension_definition(SdaiInstance instance) : base(instance) { }
        public externally_defined_dimension_definition() : base(0) { }

        public static implicit operator externally_defined_dimension_definition(SdaiInstance instance) => new externally_defined_dimension_definition(instance);

        /// <summary>
        /// Create new instace of externally_defined_dimension_definition and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_dimension_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_dimension_definition"); Debug.Assert(inst != 0); return inst; }


        public source_item_get get_item_id() { return new source_item_get(m_instance, "item_id", 0); }
        public source_item_get _item_id { get { return new source_item_get(m_instance, "item_id", 0); } }
        public source_item_put put_item_id() { return new source_item_put(m_instance, "item_id", 0); }
        public external_source get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _source { get { return get_source(); } }
        public void put_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "externally_defined_dimension_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_general_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_general_property : general_property
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_general_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_general_property(SdaiInstance instance) : base(instance) { }
        public externally_defined_general_property() : base(0) { }

        public static implicit operator externally_defined_general_property(SdaiInstance instance) => new externally_defined_general_property(instance);

        /// <summary>
        /// Create new instace of externally_defined_general_property and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_general_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_general_property"); Debug.Assert(inst != 0); return inst; }


        public source_item_get get_item_id() { return new source_item_get(m_instance, "item_id", 0); }
        public source_item_get _item_id { get { return new source_item_get(m_instance, "item_id", 0); } }
        public source_item_put put_item_id() { return new source_item_put(m_instance, "item_id", 0); }
        public external_source get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _source { get { return get_source(); } }
        public void put_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "externally_defined_general_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_hatch_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_hatch_style : externally_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_hatch_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_hatch_style(SdaiInstance instance) : base(instance) { }
        public externally_defined_hatch_style() : base(0) { }

        public static implicit operator externally_defined_hatch_style(SdaiInstance instance) => new externally_defined_hatch_style(instance);

        /// <summary>
        /// Create new instace of externally_defined_hatch_style and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_hatch_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_hatch_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "externally_defined_hatch_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_item_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_item_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_item_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_item_relationship(SdaiInstance instance) : base(instance) { }
        public externally_defined_item_relationship() : base(0) { }

        public static implicit operator externally_defined_item_relationship(SdaiInstance instance) => new externally_defined_item_relationship(instance);

        /// <summary>
        /// Create new instace of externally_defined_item_relationship and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_item_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_item_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public externally_defined_item get_relating_item() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_item", ifcengine.sdaiINSTANCE, out inst); return new externally_defined_item (inst); }
        public externally_defined_item _relating_item { get { return get_relating_item(); } }
        public void put_relating_item(externally_defined_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_item", ifcengine.sdaiINSTANCE, i); }
        public externally_defined_item get_related_item() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_item", ifcengine.sdaiINSTANCE, out inst); return new externally_defined_item (inst); }
        public externally_defined_item _related_item { get { return get_related_item(); } }
        public void put_related_item(externally_defined_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_item", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "externally_defined_item_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_symbol : externally_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_symbol(SdaiInstance instance) : base(instance) { }
        public externally_defined_symbol() : base(0) { }

        public static implicit operator externally_defined_symbol(SdaiInstance instance) => new externally_defined_symbol(instance);

        /// <summary>
        /// Create new instace of externally_defined_symbol and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "externally_defined_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_marker
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_marker : externally_defined_symbol
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_marker
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_marker(SdaiInstance instance) : base(instance) { }
        public externally_defined_marker() : base(0) { }

        public static implicit operator externally_defined_marker(SdaiInstance instance) => new externally_defined_marker(instance);

        /// <summary>
        /// Create new instace of externally_defined_marker and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_marker Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_marker"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "externally_defined_marker"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of picture_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class picture_representation_item : bytes_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of picture_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public picture_representation_item(SdaiInstance instance) : base(instance) { }
        public picture_representation_item() : base(0) { }

        public static implicit operator picture_representation_item(SdaiInstance instance) => new picture_representation_item(instance);


        protected override TextValue EntityName() { return "picture_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_picture_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_picture_representation_item : picture_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_picture_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_picture_representation_item(SdaiInstance instance) : base(instance) { }
        public externally_defined_picture_representation_item() : base(0) { }

        public static implicit operator externally_defined_picture_representation_item(SdaiInstance instance) => new externally_defined_picture_representation_item(instance);

        /// <summary>
        /// Create new instace of externally_defined_picture_representation_item and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_picture_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_picture_representation_item"); Debug.Assert(inst != 0); return inst; }

        public applied_external_identification_assignment get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new applied_external_identification_assignment (inst); }
        public applied_external_identification_assignment _source { get { return get_source(); } }

        protected override TextValue EntityName() { return "externally_defined_picture_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_representation_item(SdaiInstance instance) : base(instance) { }
        public externally_defined_representation_item() : base(0) { }

        public static implicit operator externally_defined_representation_item(SdaiInstance instance) => new externally_defined_representation_item(instance);

        /// <summary>
        /// Create new instace of externally_defined_representation_item and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_representation_item"); Debug.Assert(inst != 0); return inst; }


        public source_item_get get_item_id() { return new source_item_get(m_instance, "item_id", 0); }
        public source_item_get _item_id { get { return new source_item_get(m_instance, "item_id", 0); } }
        public source_item_put put_item_id() { return new source_item_put(m_instance, "item_id", 0); }
        public external_source get_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, out inst); return new external_source (inst); }
        public external_source _source { get { return get_source(); } }
        public void put_source(external_source inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "externally_defined_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_string
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_string : externally_defined_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_string
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_string(SdaiInstance instance) : base(instance) { }
        public externally_defined_string() : base(0) { }

        public static implicit operator externally_defined_string(SdaiInstance instance) => new externally_defined_string(instance);

        /// <summary>
        /// Create new instace of externally_defined_string and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_string Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_string"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "externally_defined_string"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_terminator_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_terminator_symbol : externally_defined_symbol
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_terminator_symbol(SdaiInstance instance) : base(instance) { }
        public externally_defined_terminator_symbol() : base(0) { }

        public static implicit operator externally_defined_terminator_symbol(SdaiInstance instance) => new externally_defined_terminator_symbol(instance);

        /// <summary>
        /// Create new instace of externally_defined_terminator_symbol and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_terminator_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_terminator_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "externally_defined_terminator_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_text_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_text_font : externally_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_text_font(SdaiInstance instance) : base(instance) { }
        public externally_defined_text_font() : base(0) { }

        public static implicit operator externally_defined_text_font(SdaiInstance instance) => new externally_defined_text_font(instance);

        /// <summary>
        /// Create new instace of externally_defined_text_font and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_text_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_text_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "externally_defined_text_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_tile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_tile : externally_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_tile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_tile(SdaiInstance instance) : base(instance) { }
        public externally_defined_tile() : base(0) { }

        public static implicit operator externally_defined_tile(SdaiInstance instance) => new externally_defined_tile(instance);

        /// <summary>
        /// Create new instace of externally_defined_tile and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_tile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_tile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "externally_defined_tile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of externally_defined_tile_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class externally_defined_tile_style : externally_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of externally_defined_tile_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public externally_defined_tile_style(SdaiInstance instance) : base(instance) { }
        public externally_defined_tile_style() : base(0) { }

        public static implicit operator externally_defined_tile_style(SdaiInstance instance) => new externally_defined_tile_style(instance);

        /// <summary>
        /// Create new instace of externally_defined_tile_style and returns object of this class to interact with
        /// </summary>
        public static new externally_defined_tile_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "externally_defined_tile_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "externally_defined_tile_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of swept_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class swept_area_solid : solid_model
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public swept_area_solid(SdaiInstance instance) : base(instance) { }
        public swept_area_solid() : base(0) { }

        public static implicit operator swept_area_solid(SdaiInstance instance) => new swept_area_solid(instance);

        /// <summary>
        /// Create new instace of swept_area_solid and returns object of this class to interact with
        /// </summary>
        public static new swept_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "swept_area_solid"); Debug.Assert(inst != 0); return inst; }

        public curve_bounded_surface get_swept_area() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "swept_area", ifcengine.sdaiINSTANCE, out inst); return new curve_bounded_surface (inst); }
        public curve_bounded_surface _swept_area { get { return get_swept_area(); } }
        public void put_swept_area(curve_bounded_surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "swept_area", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "swept_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extruded_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extruded_area_solid : swept_area_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extruded_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extruded_area_solid(SdaiInstance instance) : base(instance) { }
        public extruded_area_solid() : base(0) { }

        public static implicit operator extruded_area_solid(SdaiInstance instance) => new extruded_area_solid(instance);

        /// <summary>
        /// Create new instace of extruded_area_solid and returns object of this class to interact with
        /// </summary>
        public static new extruded_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extruded_area_solid"); Debug.Assert(inst != 0); return inst; }

        public direction get_extruded_direction() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _extruded_direction { get { return get_extruded_direction(); } }
        public void put_extruded_direction(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, i); }
        public double? get_depth() { return get_double("depth", ifcengine.sdaiREAL);}
        public double? _depth { get { return get_depth(); } }
        public void put_depth(double value) { ifcengine.sdaiPutAttrBN(m_instance, "depth", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "extruded_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of swept_face_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class swept_face_solid : solid_model
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of swept_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public swept_face_solid(SdaiInstance instance) : base(instance) { }
        public swept_face_solid() : base(0) { }

        public static implicit operator swept_face_solid(SdaiInstance instance) => new swept_face_solid(instance);

        /// <summary>
        /// Create new instace of swept_face_solid and returns object of this class to interact with
        /// </summary>
        public static new swept_face_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "swept_face_solid"); Debug.Assert(inst != 0); return inst; }

        public face_surface get_swept_face() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "swept_face", ifcengine.sdaiINSTANCE, out inst); return new face_surface (inst); }
        public face_surface _swept_face { get { return get_swept_face(); } }
        public void put_swept_face(face_surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "swept_face", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "swept_face_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extruded_face_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extruded_face_solid : swept_face_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extruded_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extruded_face_solid(SdaiInstance instance) : base(instance) { }
        public extruded_face_solid() : base(0) { }

        public static implicit operator extruded_face_solid(SdaiInstance instance) => new extruded_face_solid(instance);

        /// <summary>
        /// Create new instace of extruded_face_solid and returns object of this class to interact with
        /// </summary>
        public static new extruded_face_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extruded_face_solid"); Debug.Assert(inst != 0); return inst; }

        public direction get_extruded_direction() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _extruded_direction { get { return get_extruded_direction(); } }
        public void put_extruded_direction(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "extruded_direction", ifcengine.sdaiINSTANCE, i); }
        public double? get_depth() { return get_double("depth", ifcengine.sdaiREAL);}
        public double? _depth { get { return get_depth(); } }
        public void put_depth(double value) { ifcengine.sdaiPutAttrBN(m_instance, "depth", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "extruded_face_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extruded_face_solid_with_trim_conditions
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extruded_face_solid_with_trim_conditions : extruded_face_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extruded_face_solid_with_trim_conditions
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extruded_face_solid_with_trim_conditions(SdaiInstance instance) : base(instance) { }
        public extruded_face_solid_with_trim_conditions() : base(0) { }

        public static implicit operator extruded_face_solid_with_trim_conditions(SdaiInstance instance) => new extruded_face_solid_with_trim_conditions(instance);

        /// <summary>
        /// Create new instace of extruded_face_solid_with_trim_conditions and returns object of this class to interact with
        /// </summary>
        public static new extruded_face_solid_with_trim_conditions Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extruded_face_solid_with_trim_conditions"); Debug.Assert(inst != 0); return inst; }


        public trim_condition_select_get get_first_trim_condition() { return new trim_condition_select_get(m_instance, "first_trim_condition", 0); }
        public trim_condition_select_get _first_trim_condition { get { return new trim_condition_select_get(m_instance, "first_trim_condition", 0); } }
        public trim_condition_select_put put_first_trim_condition() { return new trim_condition_select_put(m_instance, "first_trim_condition", 0); }

        public trim_condition_select_get get_second_trim_condition() { return new trim_condition_select_get(m_instance, "second_trim_condition", 0); }
        public trim_condition_select_get _second_trim_condition { get { return new trim_condition_select_get(m_instance, "second_trim_condition", 0); } }
        public trim_condition_select_put put_second_trim_condition() { return new trim_condition_select_put(m_instance, "second_trim_condition", 0); }
        public trim_intent? get_first_trim_intent() { var str = get_string("first_trim_intent", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.trim_intent_); return EnumValue<trim_intent>.FromIndex(ind); }
        public trim_intent? _first_trim_intent { get { return get_first_trim_intent(); } }
        public void put_first_trim_intent(trim_intent value) { var str = EnumString<trim_intent>.FromValue(value, EnumNames.trim_intent_); ifcengine.sdaiPutAttrBN(m_instance, "first_trim_intent", ifcengine.sdaiENUM, str); }
        public trim_intent? get_second_trim_intent() { var str = get_string("second_trim_intent", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.trim_intent_); return EnumValue<trim_intent>.FromIndex(ind); }
        public trim_intent? _second_trim_intent { get { return get_second_trim_intent(); } }
        public void put_second_trim_intent(trim_intent value) { var str = EnumString<trim_intent>.FromValue(value, EnumNames.trim_intent_); ifcengine.sdaiPutAttrBN(m_instance, "second_trim_intent", ifcengine.sdaiENUM, str); }
        public double? get_first_offset() { return get_double("first_offset", ifcengine.sdaiREAL);}
        public double? _first_offset { get { return get_first_offset(); } }
        public void put_first_offset(double value) { ifcengine.sdaiPutAttrBN(m_instance, "first_offset", ifcengine.sdaiREAL, ref value); }
        public double? get_second_offset() { return get_double("second_offset", ifcengine.sdaiREAL);}
        public double? _second_offset { get { return get_second_offset(); } }
        public void put_second_offset(double value) { ifcengine.sdaiPutAttrBN(m_instance, "second_offset", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "extruded_face_solid_with_trim_conditions"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extruded_face_solid_with_draft_angle
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extruded_face_solid_with_draft_angle : extruded_face_solid_with_trim_conditions
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extruded_face_solid_with_draft_angle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extruded_face_solid_with_draft_angle(SdaiInstance instance) : base(instance) { }
        public extruded_face_solid_with_draft_angle() : base(0) { }

        public static implicit operator extruded_face_solid_with_draft_angle(SdaiInstance instance) => new extruded_face_solid_with_draft_angle(instance);

        /// <summary>
        /// Create new instace of extruded_face_solid_with_draft_angle and returns object of this class to interact with
        /// </summary>
        public static new extruded_face_solid_with_draft_angle Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extruded_face_solid_with_draft_angle"); Debug.Assert(inst != 0); return inst; }

        public double? get_draft_angle() { return get_double("draft_angle", ifcengine.sdaiREAL);}
        public double? _draft_angle { get { return get_draft_angle(); } }
        public void put_draft_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "draft_angle", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "extruded_face_solid_with_draft_angle"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of extruded_face_solid_with_multiple_draft_angles
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class extruded_face_solid_with_multiple_draft_angles : extruded_face_solid_with_trim_conditions
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of extruded_face_solid_with_multiple_draft_angles
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public extruded_face_solid_with_multiple_draft_angles(SdaiInstance instance) : base(instance) { }
        public extruded_face_solid_with_multiple_draft_angles() : base(0) { }

        public static implicit operator extruded_face_solid_with_multiple_draft_angles(SdaiInstance instance) => new extruded_face_solid_with_multiple_draft_angles(instance);

        /// <summary>
        /// Create new instace of extruded_face_solid_with_multiple_draft_angles and returns object of this class to interact with
        /// </summary>
        public static new extruded_face_solid_with_multiple_draft_angles Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "extruded_face_solid_with_multiple_draft_angles"); Debug.Assert(inst != 0); return inst; }

        public set_of_list_of_edge_curve get_drafted_edges() { return (new set_of_list_of_edge_curveSerializer()).FromAttr(m_instance, "drafted_edges"); }
        public set_of_list_of_edge_curve _drafted_edges { get { return get_drafted_edges(); } }
        public void put_drafted_edges(IEnumerable<list_of_edge_curve> lst) { (new set_of_list_of_edge_curveSerializer()).ToSdaiAggr(lst, m_instance, "drafted_edges"); }
        //public void put_drafted_edges_untyped(IEnumerable lst) { (new set_of_list_of_edge_curveSerializer()).ToSdaiAggr(lst, m_instance, "drafted_edges"); }
        public list_of_plane_angle_measure get_draft_angles() { return (new list_of_plane_angle_measureSerializer()).FromAttr(m_instance, "draft_angles"); }
        public list_of_plane_angle_measure _draft_angles { get { return get_draft_angles(); } }
        public void put_draft_angles(IEnumerable<double> lst) { (new list_of_plane_angle_measureSerializer()).ToSdaiAggr(lst, m_instance, "draft_angles"); }
        //public void put_draft_angles_untyped(IEnumerable lst) { (new list_of_plane_angle_measureSerializer()).ToSdaiAggr(lst, m_instance, "draft_angles"); }

        protected override TextValue EntityName() { return "extruded_face_solid_with_multiple_draft_angles"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_based_surface_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_based_surface_model : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_based_surface_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_based_surface_model(SdaiInstance instance) : base(instance) { }
        public face_based_surface_model() : base(0) { }

        public static implicit operator face_based_surface_model(SdaiInstance instance) => new face_based_surface_model(instance);

        /// <summary>
        /// Create new instace of face_based_surface_model and returns object of this class to interact with
        /// </summary>
        public static new face_based_surface_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_based_surface_model"); Debug.Assert(inst != 0); return inst; }

        public set_of_connected_face_set get_fbsm_faces() { return (new set_of_connected_face_setSerializer()).FromAttr(m_instance, "fbsm_faces"); }
        public set_of_connected_face_set _fbsm_faces { get { return get_fbsm_faces(); } }
        public void put_fbsm_faces(IEnumerable<connected_face_set> lst) { (new set_of_connected_face_setSerializer()).ToSdaiAggr(lst, m_instance, "fbsm_faces"); }
        //public void put_fbsm_faces_untyped(IEnumerable lst) { (new set_of_connected_face_setSerializer()).ToSdaiAggr(lst, m_instance, "fbsm_faces"); }

        protected override TextValue EntityName() { return "face_based_surface_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_bound
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_bound : topological_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_bound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_bound(SdaiInstance instance) : base(instance) { }
        public face_bound() : base(0) { }

        public static implicit operator face_bound(SdaiInstance instance) => new face_bound(instance);

        /// <summary>
        /// Create new instace of face_bound and returns object of this class to interact with
        /// </summary>
        public static new face_bound Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_bound"); Debug.Assert(inst != 0); return inst; }

        public loop get_bound() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "bound", ifcengine.sdaiINSTANCE, out inst); return new loop (inst); }
        public loop _bound { get { return get_bound(); } }
        public void put_bound(loop inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "bound", ifcengine.sdaiINSTANCE, i); }
        public bool? get_orientation() { return get_bool("orientation", ifcengine.sdaiBOOLEAN);}
        public bool? _orientation { get { return get_orientation(); } }
        public void put_orientation(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "face_bound"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of face_outer_bound
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class face_outer_bound : face_bound
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of face_outer_bound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public face_outer_bound(SdaiInstance instance) : base(instance) { }
        public face_outer_bound() : base(0) { }

        public static implicit operator face_outer_bound(SdaiInstance instance) => new face_outer_bound(instance);

        /// <summary>
        /// Create new instace of face_outer_bound and returns object of this class to interact with
        /// </summary>
        public static new face_outer_bound Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "face_outer_bound"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "face_outer_bound"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of faceted_brep
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class faceted_brep : manifold_solid_brep
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of faceted_brep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public faceted_brep(SdaiInstance instance) : base(instance) { }
        public faceted_brep() : base(0) { }

        public static implicit operator faceted_brep(SdaiInstance instance) => new faceted_brep(instance);

        /// <summary>
        /// Create new instace of faceted_brep and returns object of this class to interact with
        /// </summary>
        public static new faceted_brep Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "faceted_brep"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "faceted_brep"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of faceted_brep_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class faceted_brep_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of faceted_brep_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public faceted_brep_shape_representation(SdaiInstance instance) : base(instance) { }
        public faceted_brep_shape_representation() : base(0) { }

        public static implicit operator faceted_brep_shape_representation(SdaiInstance instance) => new faceted_brep_shape_representation(instance);

        /// <summary>
        /// Create new instace of faceted_brep_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new faceted_brep_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "faceted_brep_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "faceted_brep_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style(SdaiInstance instance) : base(instance) { }
        public fill_area_style() : base(0) { }

        public static implicit operator fill_area_style(SdaiInstance instance) => new fill_area_style(instance);

        /// <summary>
        /// Create new instace of fill_area_style and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public set_of_fill_style_select get_fill_styles() { return (new set_of_fill_style_selectSerializer()).FromAttr(m_instance, "fill_styles"); }
        public set_of_fill_style_select _fill_styles { get { return get_fill_styles(); } }
        public void put_fill_styles(IEnumerable<fill_style_select> lst) { (new set_of_fill_style_selectSerializer()).ToSdaiAggr(lst, m_instance, "fill_styles"); }
        //public void put_fill_styles_untyped(IEnumerable lst) { (new set_of_fill_style_selectSerializer()).ToSdaiAggr(lst, m_instance, "fill_styles"); }

        protected override TextValue EntityName() { return "fill_area_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style_colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style_colour : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style_colour(SdaiInstance instance) : base(instance) { }
        public fill_area_style_colour() : base(0) { }

        public static implicit operator fill_area_style_colour(SdaiInstance instance) => new fill_area_style_colour(instance);

        /// <summary>
        /// Create new instace of fill_area_style_colour and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style_colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style_colour"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public colour get_fill_colour() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fill_colour", ifcengine.sdaiINSTANCE, out inst); return new colour (inst); }
        public colour _fill_colour { get { return get_fill_colour(); } }
        public void put_fill_colour(colour inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "fill_colour", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "fill_area_style_colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style_hatching
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style_hatching : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style_hatching
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style_hatching(SdaiInstance instance) : base(instance) { }
        public fill_area_style_hatching() : base(0) { }

        public static implicit operator fill_area_style_hatching(SdaiInstance instance) => new fill_area_style_hatching(instance);

        /// <summary>
        /// Create new instace of fill_area_style_hatching and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style_hatching Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style_hatching"); Debug.Assert(inst != 0); return inst; }

        public curve_style get_hatch_line_appearance() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "hatch_line_appearance", ifcengine.sdaiINSTANCE, out inst); return new curve_style (inst); }
        public curve_style _hatch_line_appearance { get { return get_hatch_line_appearance(); } }
        public void put_hatch_line_appearance(curve_style inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "hatch_line_appearance", ifcengine.sdaiINSTANCE, i); }
        public one_direction_repeat_factor get_start_of_next_hatch_line() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "start_of_next_hatch_line", ifcengine.sdaiINSTANCE, out inst); return new one_direction_repeat_factor (inst); }
        public one_direction_repeat_factor _start_of_next_hatch_line { get { return get_start_of_next_hatch_line(); } }
        public void put_start_of_next_hatch_line(one_direction_repeat_factor inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "start_of_next_hatch_line", ifcengine.sdaiINSTANCE, i); }
        public cartesian_point get_point_of_reference_hatch_line() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "point_of_reference_hatch_line", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point (inst); }
        public cartesian_point _point_of_reference_hatch_line { get { return get_point_of_reference_hatch_line(); } }
        public void put_point_of_reference_hatch_line(cartesian_point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "point_of_reference_hatch_line", ifcengine.sdaiINSTANCE, i); }
        public cartesian_point get_pattern_start() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "pattern_start", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point (inst); }
        public cartesian_point _pattern_start { get { return get_pattern_start(); } }
        public void put_pattern_start(cartesian_point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "pattern_start", ifcengine.sdaiINSTANCE, i); }
        public double? get_hatch_line_angle() { return get_double("hatch_line_angle", ifcengine.sdaiREAL);}
        public double? _hatch_line_angle { get { return get_hatch_line_angle(); } }
        public void put_hatch_line_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "hatch_line_angle", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "fill_area_style_hatching"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style_tile_coloured_region
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style_tile_coloured_region : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style_tile_coloured_region
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style_tile_coloured_region(SdaiInstance instance) : base(instance) { }
        public fill_area_style_tile_coloured_region() : base(0) { }

        public static implicit operator fill_area_style_tile_coloured_region(SdaiInstance instance) => new fill_area_style_tile_coloured_region(instance);

        /// <summary>
        /// Create new instace of fill_area_style_tile_coloured_region and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style_tile_coloured_region Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style_tile_coloured_region"); Debug.Assert(inst != 0); return inst; }


        public curve_or_annotation_curve_occurrence_get get_closed_curve() { return new curve_or_annotation_curve_occurrence_get(m_instance, "closed_curve", 0); }
        public curve_or_annotation_curve_occurrence_get _closed_curve { get { return new curve_or_annotation_curve_occurrence_get(m_instance, "closed_curve", 0); } }
        public curve_or_annotation_curve_occurrence_put put_closed_curve() { return new curve_or_annotation_curve_occurrence_put(m_instance, "closed_curve", 0); }
        public colour get_region_colour() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "region_colour", ifcengine.sdaiINSTANCE, out inst); return new colour (inst); }
        public colour _region_colour { get { return get_region_colour(); } }
        public void put_region_colour(colour inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "region_colour", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "fill_area_style_tile_coloured_region"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style_tile_curve_with_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style_tile_curve_with_style : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style_tile_curve_with_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style_tile_curve_with_style(SdaiInstance instance) : base(instance) { }
        public fill_area_style_tile_curve_with_style() : base(0) { }

        public static implicit operator fill_area_style_tile_curve_with_style(SdaiInstance instance) => new fill_area_style_tile_curve_with_style(instance);

        /// <summary>
        /// Create new instace of fill_area_style_tile_curve_with_style and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style_tile_curve_with_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style_tile_curve_with_style"); Debug.Assert(inst != 0); return inst; }

        public annotation_curve_occurrence get_styled_curve() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "styled_curve", ifcengine.sdaiINSTANCE, out inst); return new annotation_curve_occurrence (inst); }
        public annotation_curve_occurrence _styled_curve { get { return get_styled_curve(); } }
        public void put_styled_curve(annotation_curve_occurrence inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "styled_curve", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "fill_area_style_tile_curve_with_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style_tile_symbol_with_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style_tile_symbol_with_style : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style_tile_symbol_with_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style_tile_symbol_with_style(SdaiInstance instance) : base(instance) { }
        public fill_area_style_tile_symbol_with_style() : base(0) { }

        public static implicit operator fill_area_style_tile_symbol_with_style(SdaiInstance instance) => new fill_area_style_tile_symbol_with_style(instance);

        /// <summary>
        /// Create new instace of fill_area_style_tile_symbol_with_style and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style_tile_symbol_with_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style_tile_symbol_with_style"); Debug.Assert(inst != 0); return inst; }

        public annotation_symbol_occurrence get_symbol() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "symbol", ifcengine.sdaiINSTANCE, out inst); return new annotation_symbol_occurrence (inst); }
        public annotation_symbol_occurrence _symbol { get { return get_symbol(); } }
        public void put_symbol(annotation_symbol_occurrence inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "symbol", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "fill_area_style_tile_symbol_with_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of fill_area_style_tiles
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class fill_area_style_tiles : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of fill_area_style_tiles
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public fill_area_style_tiles(SdaiInstance instance) : base(instance) { }
        public fill_area_style_tiles() : base(0) { }

        public static implicit operator fill_area_style_tiles(SdaiInstance instance) => new fill_area_style_tiles(instance);

        /// <summary>
        /// Create new instace of fill_area_style_tiles and returns object of this class to interact with
        /// </summary>
        public static new fill_area_style_tiles Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "fill_area_style_tiles"); Debug.Assert(inst != 0); return inst; }

        public two_direction_repeat_factor get_tiling_pattern() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "tiling_pattern", ifcengine.sdaiINSTANCE, out inst); return new two_direction_repeat_factor (inst); }
        public two_direction_repeat_factor _tiling_pattern { get { return get_tiling_pattern(); } }
        public void put_tiling_pattern(two_direction_repeat_factor inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "tiling_pattern", ifcengine.sdaiINSTANCE, i); }
        public set_of_fill_area_style_tile_shape_select get_tiles() { return (new set_of_fill_area_style_tile_shape_selectSerializer()).FromAttr(m_instance, "tiles"); }
        public set_of_fill_area_style_tile_shape_select _tiles { get { return get_tiles(); } }
        public void put_tiles(IEnumerable<fill_area_style_tile_shape_select> lst) { (new set_of_fill_area_style_tile_shape_selectSerializer()).ToSdaiAggr(lst, m_instance, "tiles"); }
        //public void put_tiles_untyped(IEnumerable lst) { (new set_of_fill_area_style_tile_shape_selectSerializer()).ToSdaiAggr(lst, m_instance, "tiles"); }
        public double? get_tiling_scale() { return get_double("tiling_scale", ifcengine.sdaiREAL);}
        public double? _tiling_scale { get { return get_tiling_scale(); } }
        public void put_tiling_scale(double value) { ifcengine.sdaiPutAttrBN(m_instance, "tiling_scale", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "fill_area_style_tiles"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_representation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_representation_relationship : representation_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_representation_relationship(SdaiInstance instance) : base(instance) { }
        public shape_representation_relationship() : base(0) { }

        public static implicit operator shape_representation_relationship(SdaiInstance instance) => new shape_representation_relationship(instance);

        /// <summary>
        /// Create new instace of shape_representation_relationship and returns object of this class to interact with
        /// </summary>
        public static new shape_representation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_representation_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "shape_representation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of flat_pattern_ply_representation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class flat_pattern_ply_representation_relationship : shape_representation_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of flat_pattern_ply_representation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public flat_pattern_ply_representation_relationship(SdaiInstance instance) : base(instance) { }
        public flat_pattern_ply_representation_relationship() : base(0) { }

        public static implicit operator flat_pattern_ply_representation_relationship(SdaiInstance instance) => new flat_pattern_ply_representation_relationship(instance);

        /// <summary>
        /// Create new instace of flat_pattern_ply_representation_relationship and returns object of this class to interact with
        /// </summary>
        public static new flat_pattern_ply_representation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "flat_pattern_ply_representation_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "flat_pattern_ply_representation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of flatness_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class flatness_tolerance : geometric_tolerance
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of flatness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public flatness_tolerance(SdaiInstance instance) : base(instance) { }
        public flatness_tolerance() : base(0) { }

        public static implicit operator flatness_tolerance(SdaiInstance instance) => new flatness_tolerance(instance);

        /// <summary>
        /// Create new instace of flatness_tolerance and returns object of this class to interact with
        /// </summary>
        public static new flatness_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "flatness_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "flatness_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of force_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class force_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of force_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public force_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public force_measure_with_unit() : base(0) { }

        public static implicit operator force_measure_with_unit(SdaiInstance instance) => new force_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of force_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new force_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "force_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "force_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of force_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class force_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of force_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public force_unit(SdaiInstance instance) : base(instance) { }
        public force_unit() : base(0) { }

        public static implicit operator force_unit(SdaiInstance instance) => new force_unit(instance);

        /// <summary>
        /// Create new instace of force_unit and returns object of this class to interact with
        /// </summary>
        public static new force_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "force_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "force_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of forward_chaining_rule
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class forward_chaining_rule : rule_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of forward_chaining_rule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public forward_chaining_rule(SdaiInstance instance) : base(instance) { }
        public forward_chaining_rule() : base(0) { }

        public static implicit operator forward_chaining_rule(SdaiInstance instance) => new forward_chaining_rule(instance);

        /// <summary>
        /// Create new instace of forward_chaining_rule and returns object of this class to interact with
        /// </summary>
        public static new forward_chaining_rule Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "forward_chaining_rule"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "forward_chaining_rule"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of forward_chaining_rule_premise
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class forward_chaining_rule_premise : property_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of forward_chaining_rule_premise
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public forward_chaining_rule_premise(SdaiInstance instance) : base(instance) { }
        public forward_chaining_rule_premise() : base(0) { }

        public static implicit operator forward_chaining_rule_premise(SdaiInstance instance) => new forward_chaining_rule_premise(instance);

        /// <summary>
        /// Create new instace of forward_chaining_rule_premise and returns object of this class to interact with
        /// </summary>
        public static new forward_chaining_rule_premise Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "forward_chaining_rule_premise"); Debug.Assert(inst != 0); return inst; }

        public representation get_used_representation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _used_representation { get { return get_used_representation(); } }
        public void put_used_representation(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, i); }
        public set_of_representation_item get_items() { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_representation_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<representation_item> lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public representation_context get_context_of_items() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, out inst); return new representation_context (inst); }
        public representation_context _context_of_items { get { return get_context_of_items(); } }
        public void put_context_of_items(representation_context inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "context_of_items", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "forward_chaining_rule_premise"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of frequency_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class frequency_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of frequency_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public frequency_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public frequency_measure_with_unit() : base(0) { }

        public static implicit operator frequency_measure_with_unit(SdaiInstance instance) => new frequency_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of frequency_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new frequency_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "frequency_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "frequency_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of frequency_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class frequency_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of frequency_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public frequency_unit(SdaiInstance instance) : base(instance) { }
        public frequency_unit() : base(0) { }

        public static implicit operator frequency_unit(SdaiInstance instance) => new frequency_unit(instance);

        /// <summary>
        /// Create new instace of frequency_unit and returns object of this class to interact with
        /// </summary>
        public static new frequency_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "frequency_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "frequency_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of func
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class func : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of func
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public func(SdaiInstance instance) : base(instance) { }
        public func() : base(0) { }

        public static implicit operator func(SdaiInstance instance) => new func(instance);

        /// <summary>
        /// Create new instace of func and returns object of this class to interact with
        /// </summary>
        public static new func Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "func"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "func"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of functional_breakdown_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class functional_breakdown_context : breakdown_context
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of functional_breakdown_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public functional_breakdown_context(SdaiInstance instance) : base(instance) { }
        public functional_breakdown_context() : base(0) { }

        public static implicit operator functional_breakdown_context(SdaiInstance instance) => new functional_breakdown_context(instance);

        /// <summary>
        /// Create new instace of functional_breakdown_context and returns object of this class to interact with
        /// </summary>
        public static new functional_breakdown_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "functional_breakdown_context"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "functional_breakdown_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of functional_element_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class functional_element_usage : breakdown_element_usage
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of functional_element_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public functional_element_usage(SdaiInstance instance) : base(instance) { }
        public functional_element_usage() : base(0) { }

        public static implicit operator functional_element_usage(SdaiInstance instance) => new functional_element_usage(instance);

        /// <summary>
        /// Create new instace of functional_element_usage and returns object of this class to interact with
        /// </summary>
        public static new functional_element_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "functional_element_usage"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "functional_element_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of functionally_defined_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class functionally_defined_transformation : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of functionally_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public functionally_defined_transformation(SdaiInstance instance) : base(instance) { }
        public functionally_defined_transformation() : base(0) { }

        public static implicit operator functionally_defined_transformation(SdaiInstance instance) => new functionally_defined_transformation(instance);

        /// <summary>
        /// Create new instace of functionally_defined_transformation and returns object of this class to interact with
        /// </summary>
        public static new functionally_defined_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "functionally_defined_transformation"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "functionally_defined_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of general_material_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class general_material_property : general_property
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of general_material_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public general_material_property(SdaiInstance instance) : base(instance) { }
        public general_material_property() : base(0) { }

        public static implicit operator general_material_property(SdaiInstance instance) => new general_material_property(instance);

        /// <summary>
        /// Create new instace of general_material_property and returns object of this class to interact with
        /// </summary>
        public static new general_material_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "general_material_property"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "general_material_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of general_property_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class general_property_association : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of general_property_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public general_property_association(SdaiInstance instance) : base(instance) { }
        public general_property_association() : base(0) { }

        public static implicit operator general_property_association(SdaiInstance instance) => new general_property_association(instance);

        /// <summary>
        /// Create new instace of general_property_association and returns object of this class to interact with
        /// </summary>
        public static new general_property_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "general_property_association"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public general_property get_base_definition() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_definition", ifcengine.sdaiINSTANCE, out inst); return new general_property (inst); }
        public general_property _base_definition { get { return get_base_definition(); } }
        public void put_base_definition(general_property inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "base_definition", ifcengine.sdaiINSTANCE, i); }

        public derived_property_select_get get_derived_definition() { return new derived_property_select_get(m_instance, "derived_definition", 0); }
        public derived_property_select_get _derived_definition { get { return new derived_property_select_get(m_instance, "derived_definition", 0); } }
        public derived_property_select_put put_derived_definition() { return new derived_property_select_put(m_instance, "derived_definition", 0); }

        protected override TextValue EntityName() { return "general_property_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of simple_generic_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class simple_generic_expression : generic_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of simple_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public simple_generic_expression(SdaiInstance instance) : base(instance) { }
        public simple_generic_expression() : base(0) { }

        public static implicit operator simple_generic_expression(SdaiInstance instance) => new simple_generic_expression(instance);


        protected override TextValue EntityName() { return "simple_generic_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of generic_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class generic_literal : simple_generic_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of generic_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public generic_literal(SdaiInstance instance) : base(instance) { }
        public generic_literal() : base(0) { }

        public static implicit operator generic_literal(SdaiInstance instance) => new generic_literal(instance);


        protected override TextValue EntityName() { return "generic_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of generic_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class generic_variable : simple_generic_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of generic_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public generic_variable(SdaiInstance instance) : base(instance) { }
        public generic_variable() : base(0) { }

        public static implicit operator generic_variable(SdaiInstance instance) => new generic_variable(instance);

        public environment get_interpretation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "interpretation", ifcengine.sdaiINSTANCE, out inst); return new environment (inst); }
        public environment _interpretation { get { return get_interpretation(); } }

        protected override TextValue EntityName() { return "generic_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_alignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_alignment : derived_shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_alignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_alignment(SdaiInstance instance) : base(instance) { }
        public geometric_alignment() : base(0) { }

        public static implicit operator geometric_alignment(SdaiInstance instance) => new geometric_alignment(instance);

        /// <summary>
        /// Create new instace of geometric_alignment and returns object of this class to interact with
        /// </summary>
        public static new geometric_alignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_alignment"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "geometric_alignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_set : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_set(SdaiInstance instance) : base(instance) { }
        public geometric_set() : base(0) { }

        public static implicit operator geometric_set(SdaiInstance instance) => new geometric_set(instance);

        /// <summary>
        /// Create new instace of geometric_set and returns object of this class to interact with
        /// </summary>
        public static new geometric_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_set"); Debug.Assert(inst != 0); return inst; }

        public set_of_geometric_set_select get_elements() { return (new set_of_geometric_set_selectSerializer()).FromAttr(m_instance, "elements"); }
        public set_of_geometric_set_select _elements { get { return get_elements(); } }
        public void put_elements(IEnumerable<geometric_set_select> lst) { (new set_of_geometric_set_selectSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        //public void put_elements_untyped(IEnumerable lst) { (new set_of_geometric_set_selectSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }

        protected override TextValue EntityName() { return "geometric_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_curve_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_curve_set : geometric_set
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_curve_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_curve_set(SdaiInstance instance) : base(instance) { }
        public geometric_curve_set() : base(0) { }

        public static implicit operator geometric_curve_set(SdaiInstance instance) => new geometric_curve_set(instance);

        /// <summary>
        /// Create new instace of geometric_curve_set and returns object of this class to interact with
        /// </summary>
        public static new geometric_curve_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_curve_set"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "geometric_curve_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_intersection
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_intersection : derived_shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_intersection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_intersection(SdaiInstance instance) : base(instance) { }
        public geometric_intersection() : base(0) { }

        public static implicit operator geometric_intersection(SdaiInstance instance) => new geometric_intersection(instance);

        /// <summary>
        /// Create new instace of geometric_intersection and returns object of this class to interact with
        /// </summary>
        public static new geometric_intersection Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_intersection"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "geometric_intersection"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_item_specific_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_item_specific_usage : item_identified_representation_usage
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_item_specific_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_item_specific_usage(SdaiInstance instance) : base(instance) { }
        public geometric_item_specific_usage() : base(0) { }

        public static implicit operator geometric_item_specific_usage(SdaiInstance instance) => new geometric_item_specific_usage(instance);

        /// <summary>
        /// Create new instace of geometric_item_specific_usage and returns object of this class to interact with
        /// </summary>
        public static new geometric_item_specific_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_item_specific_usage"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "geometric_item_specific_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_model_element_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_model_element_relationship : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_model_element_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_model_element_relationship(SdaiInstance instance) : base(instance) { }
        public geometric_model_element_relationship() : base(0) { }

        public static implicit operator geometric_model_element_relationship(SdaiInstance instance) => new geometric_model_element_relationship(instance);

        /// <summary>
        /// Create new instace of geometric_model_element_relationship and returns object of this class to interact with
        /// </summary>
        public static new geometric_model_element_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_model_element_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public representation_item get_relating_representation_item() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_representation_item", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _relating_representation_item { get { return get_relating_representation_item(); } }
        public void put_relating_representation_item(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_representation_item", ifcengine.sdaiINSTANCE, i); }
        public representation_item get_related_representation_item() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_representation_item", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _related_representation_item { get { return get_related_representation_item(); } }
        public void put_related_representation_item(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_representation_item", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "geometric_model_element_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_context : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_context(SdaiInstance instance) : base(instance) { }
        public representation_context() : base(0) { }

        public static implicit operator representation_context(SdaiInstance instance) => new representation_context(instance);

        /// <summary>
        /// Create new instace of representation_context and returns object of this class to interact with
        /// </summary>
        public static new representation_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_context"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_context_identifier() { return get_string("context_identifier", ifcengine.sdaiSTRING); }
        public TextValue _context_identifier { get { return get_context_identifier(); } }
        public void put_context_identifier(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "context_identifier", ifcengine.sdaiSTRING, value); }
        public TextValue get_context_type() { return get_string("context_type", ifcengine.sdaiSTRING); }
        public TextValue _context_type { get { return get_context_type(); } }
        public void put_context_type(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "context_type", ifcengine.sdaiSTRING, value); }
        public set_of_representation get_representations_in_context() { return (new set_of_representationSerializer()).FromAttr(m_instance, "representations_in_context"); }
        public set_of_representation _representations_in_context { get { return get_representations_in_context(); } }

        protected override TextValue EntityName() { return "representation_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_representation_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_representation_context : representation_context
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_representation_context(SdaiInstance instance) : base(instance) { }
        public geometric_representation_context() : base(0) { }

        public static implicit operator geometric_representation_context(SdaiInstance instance) => new geometric_representation_context(instance);

        /// <summary>
        /// Create new instace of geometric_representation_context and returns object of this class to interact with
        /// </summary>
        public static new geometric_representation_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_representation_context"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_coordinate_space_dimension() { return get_IntValue("coordinate_space_dimension", ifcengine.sdaiINTEGER);}
        public IntValue? _coordinate_space_dimension { get { return get_coordinate_space_dimension(); } }
        public void put_coordinate_space_dimension(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "coordinate_space_dimension", ifcengine.sdaiINTEGER, ref value); }

        protected override TextValue EntityName() { return "geometric_representation_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_tolerance_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_tolerance_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_tolerance_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_tolerance_relationship(SdaiInstance instance) : base(instance) { }
        public geometric_tolerance_relationship() : base(0) { }

        public static implicit operator geometric_tolerance_relationship(SdaiInstance instance) => new geometric_tolerance_relationship(instance);

        /// <summary>
        /// Create new instace of geometric_tolerance_relationship and returns object of this class to interact with
        /// </summary>
        public static new geometric_tolerance_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_tolerance_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public geometric_tolerance get_relating_geometric_tolerance() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_geometric_tolerance", ifcengine.sdaiINSTANCE, out inst); return new geometric_tolerance (inst); }
        public geometric_tolerance _relating_geometric_tolerance { get { return get_relating_geometric_tolerance(); } }
        public void put_relating_geometric_tolerance(geometric_tolerance inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_geometric_tolerance", ifcengine.sdaiINSTANCE, i); }
        public geometric_tolerance get_related_geometric_tolerance() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_geometric_tolerance", ifcengine.sdaiINSTANCE, out inst); return new geometric_tolerance (inst); }
        public geometric_tolerance _related_geometric_tolerance { get { return get_related_geometric_tolerance(); } }
        public void put_related_geometric_tolerance(geometric_tolerance inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_geometric_tolerance", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "geometric_tolerance_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometric_tolerance_with_defined_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometric_tolerance_with_defined_unit : geometric_tolerance
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometric_tolerance_with_defined_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometric_tolerance_with_defined_unit(SdaiInstance instance) : base(instance) { }
        public geometric_tolerance_with_defined_unit() : base(0) { }

        public static implicit operator geometric_tolerance_with_defined_unit(SdaiInstance instance) => new geometric_tolerance_with_defined_unit(instance);

        /// <summary>
        /// Create new instace of geometric_tolerance_with_defined_unit and returns object of this class to interact with
        /// </summary>
        public static new geometric_tolerance_with_defined_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometric_tolerance_with_defined_unit"); Debug.Assert(inst != 0); return inst; }

        public measure_with_unit get_unit_size() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "unit_size", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _unit_size { get { return get_unit_size(); } }
        public void put_unit_size(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "unit_size", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "geometric_tolerance_with_defined_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometrical_tolerance_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometrical_tolerance_callout : draughting_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometrical_tolerance_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometrical_tolerance_callout(SdaiInstance instance) : base(instance) { }
        public geometrical_tolerance_callout() : base(0) { }

        public static implicit operator geometrical_tolerance_callout(SdaiInstance instance) => new geometrical_tolerance_callout(instance);

        /// <summary>
        /// Create new instace of geometrical_tolerance_callout and returns object of this class to interact with
        /// </summary>
        public static new geometrical_tolerance_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometrical_tolerance_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "geometrical_tolerance_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometrically_bounded_2d_wireframe_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometrically_bounded_2d_wireframe_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometrically_bounded_2d_wireframe_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometrically_bounded_2d_wireframe_representation(SdaiInstance instance) : base(instance) { }
        public geometrically_bounded_2d_wireframe_representation() : base(0) { }

        public static implicit operator geometrically_bounded_2d_wireframe_representation(SdaiInstance instance) => new geometrically_bounded_2d_wireframe_representation(instance);

        /// <summary>
        /// Create new instace of geometrically_bounded_2d_wireframe_representation and returns object of this class to interact with
        /// </summary>
        public static new geometrically_bounded_2d_wireframe_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometrically_bounded_2d_wireframe_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "geometrically_bounded_2d_wireframe_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometrically_bounded_surface_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometrically_bounded_surface_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometrically_bounded_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometrically_bounded_surface_shape_representation(SdaiInstance instance) : base(instance) { }
        public geometrically_bounded_surface_shape_representation() : base(0) { }

        public static implicit operator geometrically_bounded_surface_shape_representation(SdaiInstance instance) => new geometrically_bounded_surface_shape_representation(instance);

        /// <summary>
        /// Create new instace of geometrically_bounded_surface_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new geometrically_bounded_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometrically_bounded_surface_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "geometrically_bounded_surface_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of geometrically_bounded_wireframe_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class geometrically_bounded_wireframe_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of geometrically_bounded_wireframe_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public geometrically_bounded_wireframe_shape_representation(SdaiInstance instance) : base(instance) { }
        public geometrically_bounded_wireframe_shape_representation() : base(0) { }

        public static implicit operator geometrically_bounded_wireframe_shape_representation(SdaiInstance instance) => new geometrically_bounded_wireframe_shape_representation(instance);

        /// <summary>
        /// Create new instace of geometrically_bounded_wireframe_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new geometrically_bounded_wireframe_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "geometrically_bounded_wireframe_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "geometrically_bounded_wireframe_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of global_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class global_assignment : representation_item_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of global_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public global_assignment(SdaiInstance instance) : base(instance) { }
        public global_assignment() : base(0) { }

        public static implicit operator global_assignment(SdaiInstance instance) => new global_assignment(instance);

        /// <summary>
        /// Create new instace of global_assignment and returns object of this class to interact with
        /// </summary>
        public static new global_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "global_assignment"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "global_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of global_uncertainty_assigned_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class global_uncertainty_assigned_context : representation_context
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of global_uncertainty_assigned_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public global_uncertainty_assigned_context(SdaiInstance instance) : base(instance) { }
        public global_uncertainty_assigned_context() : base(0) { }

        public static implicit operator global_uncertainty_assigned_context(SdaiInstance instance) => new global_uncertainty_assigned_context(instance);

        /// <summary>
        /// Create new instace of global_uncertainty_assigned_context and returns object of this class to interact with
        /// </summary>
        public static new global_uncertainty_assigned_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "global_uncertainty_assigned_context"); Debug.Assert(inst != 0); return inst; }

        public set_of_uncertainty_measure_with_unit get_uncertainty() { return (new set_of_uncertainty_measure_with_unitSerializer()).FromAttr(m_instance, "uncertainty"); }
        public set_of_uncertainty_measure_with_unit _uncertainty { get { return get_uncertainty(); } }
        public void put_uncertainty(IEnumerable<uncertainty_measure_with_unit> lst) { (new set_of_uncertainty_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "uncertainty"); }
        //public void put_uncertainty_untyped(IEnumerable lst) { (new set_of_uncertainty_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "uncertainty"); }

        protected override TextValue EntityName() { return "global_uncertainty_assigned_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of global_unit_assigned_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class global_unit_assigned_context : representation_context
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of global_unit_assigned_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public global_unit_assigned_context(SdaiInstance instance) : base(instance) { }
        public global_unit_assigned_context() : base(0) { }

        public static implicit operator global_unit_assigned_context(SdaiInstance instance) => new global_unit_assigned_context(instance);

        /// <summary>
        /// Create new instace of global_unit_assigned_context and returns object of this class to interact with
        /// </summary>
        public static new global_unit_assigned_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "global_unit_assigned_context"); Debug.Assert(inst != 0); return inst; }

        public set_of_unit get_units() { return (new set_of_unitSerializer()).FromAttr(m_instance, "units"); }
        public set_of_unit _units { get { return get_units(); } }
        public void put_units(IEnumerable<unit> lst) { (new set_of_unitSerializer()).ToSdaiAggr(lst, m_instance, "units"); }
        //public void put_units_untyped(IEnumerable lst) { (new set_of_unitSerializer()).ToSdaiAggr(lst, m_instance, "units"); }

        protected override TextValue EntityName() { return "global_unit_assigned_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ground_fact
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ground_fact : atomic_formula
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ground_fact
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ground_fact(SdaiInstance instance) : base(instance) { }
        public ground_fact() : base(0) { }

        public static implicit operator ground_fact(SdaiInstance instance) => new ground_fact(instance);

        /// <summary>
        /// Create new instace of ground_fact and returns object of this class to interact with
        /// </summary>
        public static new ground_fact Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ground_fact"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "ground_fact"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of group_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class group_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of group_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public group_relationship(SdaiInstance instance) : base(instance) { }
        public group_relationship() : base(0) { }

        public static implicit operator group_relationship(SdaiInstance instance) => new group_relationship(instance);

        /// <summary>
        /// Create new instace of group_relationship and returns object of this class to interact with
        /// </summary>
        public static new group_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "group_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public group get_relating_group() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_group", ifcengine.sdaiINSTANCE, out inst); return new group (inst); }
        public group _relating_group { get { return get_relating_group(); } }
        public void put_relating_group(group inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_group", ifcengine.sdaiINSTANCE, i); }
        public group get_related_group() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_group", ifcengine.sdaiINSTANCE, out inst); return new group (inst); }
        public group _related_group { get { return get_related_group(); } }
        public void put_related_group(group inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_group", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "group_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of hardness_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class hardness_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of hardness_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public hardness_representation(SdaiInstance instance) : base(instance) { }
        public hardness_representation() : base(0) { }

        public static implicit operator hardness_representation(SdaiInstance instance) => new hardness_representation(instance);

        /// <summary>
        /// Create new instace of hardness_representation and returns object of this class to interact with
        /// </summary>
        public static new hardness_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "hardness_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "hardness_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of hidden_element_over_riding_styled_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class hidden_element_over_riding_styled_item : context_dependent_over_riding_styled_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of hidden_element_over_riding_styled_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public hidden_element_over_riding_styled_item(SdaiInstance instance) : base(instance) { }
        public hidden_element_over_riding_styled_item() : base(0) { }

        public static implicit operator hidden_element_over_riding_styled_item(SdaiInstance instance) => new hidden_element_over_riding_styled_item(instance);

        /// <summary>
        /// Create new instace of hidden_element_over_riding_styled_item and returns object of this class to interact with
        /// </summary>
        public static new hidden_element_over_riding_styled_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "hidden_element_over_riding_styled_item"); Debug.Assert(inst != 0); return inst; }

        public set_of_presentation_view get_container() { return (new set_of_presentation_viewSerializer()).FromAttr(m_instance, "container"); }
        public set_of_presentation_view _container { get { return get_container(); } }

        protected override TextValue EntityName() { return "hidden_element_over_riding_styled_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of hyperbola
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class hyperbola : conic
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of hyperbola
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public hyperbola(SdaiInstance instance) : base(instance) { }
        public hyperbola() : base(0) { }

        public static implicit operator hyperbola(SdaiInstance instance) => new hyperbola(instance);

        /// <summary>
        /// Create new instace of hyperbola and returns object of this class to interact with
        /// </summary>
        public static new hyperbola Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "hyperbola"); Debug.Assert(inst != 0); return inst; }

        public double? get_semi_axis() { return get_double("semi_axis", ifcengine.sdaiREAL);}
        public double? _semi_axis { get { return get_semi_axis(); } }
        public void put_semi_axis(double value) { ifcengine.sdaiPutAttrBN(m_instance, "semi_axis", ifcengine.sdaiREAL, ref value); }
        public double? get_semi_imag_axis() { return get_double("semi_imag_axis", ifcengine.sdaiREAL);}
        public double? _semi_imag_axis { get { return get_semi_imag_axis(); } }
        public void put_semi_imag_axis(double value) { ifcengine.sdaiPutAttrBN(m_instance, "semi_imag_axis", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "hyperbola"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of id_attribute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class id_attribute : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of id_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public id_attribute(SdaiInstance instance) : base(instance) { }
        public id_attribute() : base(0) { }

        public static implicit operator id_attribute(SdaiInstance instance) => new id_attribute(instance);

        /// <summary>
        /// Create new instace of id_attribute and returns object of this class to interact with
        /// </summary>
        public static new id_attribute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "id_attribute"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_attribute_value() { return get_string("attribute_value", ifcengine.sdaiSTRING); }
        public TextValue _attribute_value { get { return get_attribute_value(); } }
        public void put_attribute_value(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "attribute_value", ifcengine.sdaiSTRING, value); }

        public id_attribute_select_get get_identified_item() { return new id_attribute_select_get(m_instance, "identified_item", 0); }
        public id_attribute_select_get _identified_item { get { return new id_attribute_select_get(m_instance, "identified_item", 0); } }
        public id_attribute_select_put put_identified_item() { return new id_attribute_select_put(m_instance, "identified_item", 0); }

        protected override TextValue EntityName() { return "id_attribute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of identification_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class identification_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of identification_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public identification_role(SdaiInstance instance) : base(instance) { }
        public identification_role() : base(0) { }

        public static implicit operator identification_role(SdaiInstance instance) => new identification_role(instance);

        /// <summary>
        /// Create new instace of identification_role and returns object of this class to interact with
        /// </summary>
        public static new identification_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "identification_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "identification_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of illuminance_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class illuminance_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of illuminance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public illuminance_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public illuminance_measure_with_unit() : base(0) { }

        public static implicit operator illuminance_measure_with_unit(SdaiInstance instance) => new illuminance_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of illuminance_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new illuminance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "illuminance_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "illuminance_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of illuminance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class illuminance_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of illuminance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public illuminance_unit(SdaiInstance instance) : base(instance) { }
        public illuminance_unit() : base(0) { }

        public static implicit operator illuminance_unit(SdaiInstance instance) => new illuminance_unit(instance);

        /// <summary>
        /// Create new instace of illuminance_unit and returns object of this class to interact with
        /// </summary>
        public static new illuminance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "illuminance_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "illuminance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of included_text_block
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class included_text_block : mapped_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of included_text_block
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public included_text_block(SdaiInstance instance) : base(instance) { }
        public included_text_block() : base(0) { }

        public static implicit operator included_text_block(SdaiInstance instance) => new included_text_block(instance);

        /// <summary>
        /// Create new instace of included_text_block and returns object of this class to interact with
        /// </summary>
        public static new included_text_block Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "included_text_block"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "included_text_block"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of inclusion_product_concept_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class inclusion_product_concept_feature : conditional_concept_feature
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of inclusion_product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public inclusion_product_concept_feature(SdaiInstance instance) : base(instance) { }
        public inclusion_product_concept_feature() : base(0) { }

        public static implicit operator inclusion_product_concept_feature(SdaiInstance instance) => new inclusion_product_concept_feature(instance);

        /// <summary>
        /// Create new instace of inclusion_product_concept_feature and returns object of this class to interact with
        /// </summary>
        public static new inclusion_product_concept_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "inclusion_product_concept_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "inclusion_product_concept_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of user_selected_elements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class user_selected_elements : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of user_selected_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public user_selected_elements(SdaiInstance instance) : base(instance) { }
        public user_selected_elements() : base(0) { }

        public static implicit operator user_selected_elements(SdaiInstance instance) => new user_selected_elements(instance);

        /// <summary>
        /// Create new instace of user_selected_elements and returns object of this class to interact with
        /// </summary>
        public static new user_selected_elements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "user_selected_elements"); Debug.Assert(inst != 0); return inst; }

        public set_of_representation_item get_picked_items() { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "picked_items"); }
        public set_of_representation_item _picked_items { get { return get_picked_items(); } }
        public void put_picked_items(IEnumerable<representation_item> lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "picked_items"); }
        //public void put_picked_items_untyped(IEnumerable lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "picked_items"); }

        protected override TextValue EntityName() { return "user_selected_elements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of indirectly_selected_elements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class indirectly_selected_elements : user_selected_elements
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of indirectly_selected_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public indirectly_selected_elements(SdaiInstance instance) : base(instance) { }
        public indirectly_selected_elements() : base(0) { }

        public static implicit operator indirectly_selected_elements(SdaiInstance instance) => new indirectly_selected_elements(instance);

        /// <summary>
        /// Create new instace of indirectly_selected_elements and returns object of this class to interact with
        /// </summary>
        public static new indirectly_selected_elements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "indirectly_selected_elements"); Debug.Assert(inst != 0); return inst; }

        public set_of_representation_item get_indirectly_picked_items() { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "indirectly_picked_items"); }
        public set_of_representation_item _indirectly_picked_items { get { return get_indirectly_picked_items(); } }
        public void put_indirectly_picked_items(IEnumerable<representation_item> lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "indirectly_picked_items"); }
        //public void put_indirectly_picked_items_untyped(IEnumerable lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "indirectly_picked_items"); }

        protected override TextValue EntityName() { return "indirectly_selected_elements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of indirectly_selected_shape_elements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class indirectly_selected_shape_elements : indirectly_selected_elements
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of indirectly_selected_shape_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public indirectly_selected_shape_elements(SdaiInstance instance) : base(instance) { }
        public indirectly_selected_shape_elements() : base(0) { }

        public static implicit operator indirectly_selected_shape_elements(SdaiInstance instance) => new indirectly_selected_shape_elements(instance);

        /// <summary>
        /// Create new instace of indirectly_selected_shape_elements and returns object of this class to interact with
        /// </summary>
        public static new indirectly_selected_shape_elements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "indirectly_selected_shape_elements"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "indirectly_selected_shape_elements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of inductance_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class inductance_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of inductance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public inductance_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public inductance_measure_with_unit() : base(0) { }

        public static implicit operator inductance_measure_with_unit(SdaiInstance instance) => new inductance_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of inductance_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new inductance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "inductance_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "inductance_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of inductance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class inductance_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of inductance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public inductance_unit(SdaiInstance instance) : base(instance) { }
        public inductance_unit() : base(0) { }

        public static implicit operator inductance_unit(SdaiInstance instance) => new inductance_unit(instance);

        /// <summary>
        /// Create new instace of inductance_unit and returns object of this class to interact with
        /// </summary>
        public static new inductance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "inductance_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "inductance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of information_right
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class information_right : action_method
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of information_right
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public information_right(SdaiInstance instance) : base(instance) { }
        public information_right() : base(0) { }

        public static implicit operator information_right(SdaiInstance instance) => new information_right(instance);

        /// <summary>
        /// Create new instace of information_right and returns object of this class to interact with
        /// </summary>
        public static new information_right Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "information_right"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "information_right"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of information_usage_right
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class information_usage_right : action_method
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of information_usage_right
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public information_usage_right(SdaiInstance instance) : base(instance) { }
        public information_usage_right() : base(0) { }

        public static implicit operator information_usage_right(SdaiInstance instance) => new information_usage_right(instance);

        /// <summary>
        /// Create new instace of information_usage_right and returns object of this class to interact with
        /// </summary>
        public static new information_usage_right Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "information_usage_right"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "information_usage_right"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of instance_usage_context_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class instance_usage_context_assignment : product_definition_context
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of instance_usage_context_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public instance_usage_context_assignment(SdaiInstance instance) : base(instance) { }
        public instance_usage_context_assignment() : base(0) { }

        public static implicit operator instance_usage_context_assignment(SdaiInstance instance) => new instance_usage_context_assignment(instance);

        /// <summary>
        /// Create new instace of instance_usage_context_assignment and returns object of this class to interact with
        /// </summary>
        public static new instance_usage_context_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "instance_usage_context_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_instance_usage_context_select get_items() { return (new set_of_instance_usage_context_selectSerializer()).FromAttr(m_instance, "items"); }
        public set_of_instance_usage_context_select _items { get { return get_items(); } }
        public void put_items(IEnumerable<instance_usage_context_select> lst) { (new set_of_instance_usage_context_selectSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_instance_usage_context_selectSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "instance_usage_context_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of instanced_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class instanced_feature : shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of instanced_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public instanced_feature(SdaiInstance instance) : base(instance) { }
        public instanced_feature() : base(0) { }

        public static implicit operator instanced_feature(SdaiInstance instance) => new instanced_feature(instance);

        /// <summary>
        /// Create new instace of instanced_feature and returns object of this class to interact with
        /// </summary>
        public static new instanced_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "instanced_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "instanced_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of simple_numeric_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class simple_numeric_expression : numeric_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of simple_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public simple_numeric_expression(SdaiInstance instance) : base(instance) { }
        public simple_numeric_expression() : base(0) { }

        public static implicit operator simple_numeric_expression(SdaiInstance instance) => new simple_numeric_expression(instance);


        protected override TextValue EntityName() { return "simple_numeric_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of literal_number
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class literal_number : simple_numeric_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of literal_number
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public literal_number(SdaiInstance instance) : base(instance) { }
        public literal_number() : base(0) { }

        public static implicit operator literal_number(SdaiInstance instance) => new literal_number(instance);

        public double? get_the_value() { return get_double("the_value", ifcengine.sdaiREAL);}
        public double? _the_value { get { return get_the_value(); } }
        public void put_the_value(double value) { ifcengine.sdaiPutAttrBN(m_instance, "the_value", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "literal_number"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of int_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class int_literal : literal_number
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of int_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public int_literal(SdaiInstance instance) : base(instance) { }
        public int_literal() : base(0) { }

        public static implicit operator int_literal(SdaiInstance instance) => new int_literal(instance);

        /// <summary>
        /// Create new instace of int_literal and returns object of this class to interact with
        /// </summary>
        public static new int_literal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "int_literal"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "int_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of integer_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class integer_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of integer_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public integer_representation_item(SdaiInstance instance) : base(instance) { }
        public integer_representation_item() : base(0) { }

        public static implicit operator integer_representation_item(SdaiInstance instance) => new integer_representation_item(instance);

        /// <summary>
        /// Create new instace of integer_representation_item and returns object of this class to interact with
        /// </summary>
        public static new integer_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "integer_representation_item"); Debug.Assert(inst != 0); return inst; }

        public double? get_the_value() { return get_double("the_value", ifcengine.sdaiREAL);}
        public double? _the_value { get { return get_the_value(); } }
        public void put_the_value(double value) { ifcengine.sdaiPutAttrBN(m_instance, "the_value", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "integer_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of intersection_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class intersection_curve : surface_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of intersection_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public intersection_curve(SdaiInstance instance) : base(instance) { }
        public intersection_curve() : base(0) { }

        public static implicit operator intersection_curve(SdaiInstance instance) => new intersection_curve(instance);

        /// <summary>
        /// Create new instace of intersection_curve and returns object of this class to interact with
        /// </summary>
        public static new intersection_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "intersection_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "intersection_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of interval_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class interval_expression : boolean_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of interval_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public interval_expression(SdaiInstance instance) : base(instance) { }
        public interval_expression() : base(0) { }

        public static implicit operator interval_expression(SdaiInstance instance) => new interval_expression(instance);

        /// <summary>
        /// Create new instace of interval_expression and returns object of this class to interact with
        /// </summary>
        public static new interval_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "interval_expression"); Debug.Assert(inst != 0); return inst; }

        public list_of_generic_expression get_operands() { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); }
        public list_of_generic_expression _operands { get { return get_operands(); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        //public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue EntityName() { return "interval_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of iso4217_currency
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class iso4217_currency : currency
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of iso4217_currency
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public iso4217_currency(SdaiInstance instance) : base(instance) { }
        public iso4217_currency() : base(0) { }

        public static implicit operator iso4217_currency(SdaiInstance instance) => new iso4217_currency(instance);

        /// <summary>
        /// Create new instace of iso4217_currency and returns object of this class to interact with
        /// </summary>
        public static new iso4217_currency Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "iso4217_currency"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "iso4217_currency"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of known_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class known_source : external_source
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of known_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public known_source(SdaiInstance instance) : base(instance) { }
        public known_source() : base(0) { }

        public static implicit operator known_source(SdaiInstance instance) => new known_source(instance);

        /// <summary>
        /// Create new instace of known_source and returns object of this class to interact with
        /// </summary>
        public static new known_source Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "known_source"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "known_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of laid_defined_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class laid_defined_transformation : transformation_with_derived_angle
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of laid_defined_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public laid_defined_transformation(SdaiInstance instance) : base(instance) { }
        public laid_defined_transformation() : base(0) { }

        public static implicit operator laid_defined_transformation(SdaiInstance instance) => new laid_defined_transformation(instance);

        /// <summary>
        /// Create new instace of laid_defined_transformation and returns object of this class to interact with
        /// </summary>
        public static new laid_defined_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "laid_defined_transformation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "laid_defined_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of language
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class language : group
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of language
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public language(SdaiInstance instance) : base(instance) { }
        public language() : base(0) { }

        public static implicit operator language(SdaiInstance instance) => new language(instance);

        /// <summary>
        /// Create new instace of language and returns object of this class to interact with
        /// </summary>
        public static new language Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "language"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "language"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of leader_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class leader_curve : annotation_curve_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of leader_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public leader_curve(SdaiInstance instance) : base(instance) { }
        public leader_curve() : base(0) { }

        public static implicit operator leader_curve(SdaiInstance instance) => new leader_curve(instance);

        /// <summary>
        /// Create new instace of leader_curve and returns object of this class to interact with
        /// </summary>
        public static new leader_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "leader_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "leader_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of leader_directed_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class leader_directed_callout : draughting_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of leader_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public leader_directed_callout(SdaiInstance instance) : base(instance) { }
        public leader_directed_callout() : base(0) { }

        public static implicit operator leader_directed_callout(SdaiInstance instance) => new leader_directed_callout(instance);

        /// <summary>
        /// Create new instace of leader_directed_callout and returns object of this class to interact with
        /// </summary>
        public static new leader_directed_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "leader_directed_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "leader_directed_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of leader_directed_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class leader_directed_dimension : leader_directed_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of leader_directed_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public leader_directed_dimension(SdaiInstance instance) : base(instance) { }
        public leader_directed_dimension() : base(0) { }

        public static implicit operator leader_directed_dimension(SdaiInstance instance) => new leader_directed_dimension(instance);

        /// <summary>
        /// Create new instace of leader_directed_dimension and returns object of this class to interact with
        /// </summary>
        public static new leader_directed_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "leader_directed_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "leader_directed_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of leader_terminator
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class leader_terminator : terminator_symbol
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of leader_terminator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public leader_terminator(SdaiInstance instance) : base(instance) { }
        public leader_terminator() : base(0) { }

        public static implicit operator leader_terminator(SdaiInstance instance) => new leader_terminator(instance);

        /// <summary>
        /// Create new instace of leader_terminator and returns object of this class to interact with
        /// </summary>
        public static new leader_terminator Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "leader_terminator"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "leader_terminator"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of length_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class length_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of length_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public length_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public length_measure_with_unit() : base(0) { }

        public static implicit operator length_measure_with_unit(SdaiInstance instance) => new length_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of length_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new length_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "length_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "length_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of length_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class length_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of length_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public length_unit(SdaiInstance instance) : base(instance) { }
        public length_unit() : base(0) { }

        public static implicit operator length_unit(SdaiInstance instance) => new length_unit(instance);

        /// <summary>
        /// Create new instace of length_unit and returns object of this class to interact with
        /// </summary>
        public static new length_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "length_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "length_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of light_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class light_source : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of light_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public light_source(SdaiInstance instance) : base(instance) { }
        public light_source() : base(0) { }

        public static implicit operator light_source(SdaiInstance instance) => new light_source(instance);

        /// <summary>
        /// Create new instace of light_source and returns object of this class to interact with
        /// </summary>
        public static new light_source Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "light_source"); Debug.Assert(inst != 0); return inst; }

        public colour get_light_colour() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "light_colour", ifcengine.sdaiINSTANCE, out inst); return new colour (inst); }
        public colour _light_colour { get { return get_light_colour(); } }
        public void put_light_colour(colour inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "light_colour", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "light_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of light_source_ambient
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class light_source_ambient : light_source
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of light_source_ambient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public light_source_ambient(SdaiInstance instance) : base(instance) { }
        public light_source_ambient() : base(0) { }

        public static implicit operator light_source_ambient(SdaiInstance instance) => new light_source_ambient(instance);

        /// <summary>
        /// Create new instace of light_source_ambient and returns object of this class to interact with
        /// </summary>
        public static new light_source_ambient Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "light_source_ambient"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "light_source_ambient"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of light_source_directional
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class light_source_directional : light_source
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of light_source_directional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public light_source_directional(SdaiInstance instance) : base(instance) { }
        public light_source_directional() : base(0) { }

        public static implicit operator light_source_directional(SdaiInstance instance) => new light_source_directional(instance);

        /// <summary>
        /// Create new instace of light_source_directional and returns object of this class to interact with
        /// </summary>
        public static new light_source_directional Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "light_source_directional"); Debug.Assert(inst != 0); return inst; }

        public direction get_orientation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _orientation { get { return get_orientation(); } }
        public void put_orientation(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "light_source_directional"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of light_source_positional
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class light_source_positional : light_source
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of light_source_positional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public light_source_positional(SdaiInstance instance) : base(instance) { }
        public light_source_positional() : base(0) { }

        public static implicit operator light_source_positional(SdaiInstance instance) => new light_source_positional(instance);

        /// <summary>
        /// Create new instace of light_source_positional and returns object of this class to interact with
        /// </summary>
        public static new light_source_positional Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "light_source_positional"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point get_position() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point (inst); }
        public cartesian_point _position { get { return get_position(); } }
        public void put_position(cartesian_point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
        public double? get_constant_attenuation() { return get_double("constant_attenuation", ifcengine.sdaiREAL);}
        public double? _constant_attenuation { get { return get_constant_attenuation(); } }
        public void put_constant_attenuation(double value) { ifcengine.sdaiPutAttrBN(m_instance, "constant_attenuation", ifcengine.sdaiREAL, ref value); }
        public double? get_distance_attenuation() { return get_double("distance_attenuation", ifcengine.sdaiREAL);}
        public double? _distance_attenuation { get { return get_distance_attenuation(); } }
        public void put_distance_attenuation(double value) { ifcengine.sdaiPutAttrBN(m_instance, "distance_attenuation", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "light_source_positional"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of light_source_spot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class light_source_spot : light_source
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of light_source_spot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public light_source_spot(SdaiInstance instance) : base(instance) { }
        public light_source_spot() : base(0) { }

        public static implicit operator light_source_spot(SdaiInstance instance) => new light_source_spot(instance);

        /// <summary>
        /// Create new instace of light_source_spot and returns object of this class to interact with
        /// </summary>
        public static new light_source_spot Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "light_source_spot"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point get_position() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point (inst); }
        public cartesian_point _position { get { return get_position(); } }
        public void put_position(cartesian_point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
        public direction get_orientation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _orientation { get { return get_orientation(); } }
        public void put_orientation(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, i); }
        public double? get_concentration_exponent() { return get_double("concentration_exponent", ifcengine.sdaiREAL);}
        public double? _concentration_exponent { get { return get_concentration_exponent(); } }
        public void put_concentration_exponent(double value) { ifcengine.sdaiPutAttrBN(m_instance, "concentration_exponent", ifcengine.sdaiREAL, ref value); }
        public double? get_constant_attenuation() { return get_double("constant_attenuation", ifcengine.sdaiREAL);}
        public double? _constant_attenuation { get { return get_constant_attenuation(); } }
        public void put_constant_attenuation(double value) { ifcengine.sdaiPutAttrBN(m_instance, "constant_attenuation", ifcengine.sdaiREAL, ref value); }
        public double? get_distance_attenuation() { return get_double("distance_attenuation", ifcengine.sdaiREAL);}
        public double? _distance_attenuation { get { return get_distance_attenuation(); } }
        public void put_distance_attenuation(double value) { ifcengine.sdaiPutAttrBN(m_instance, "distance_attenuation", ifcengine.sdaiREAL, ref value); }
        public double? get_spread_angle() { return get_double("spread_angle", ifcengine.sdaiREAL);}
        public double? _spread_angle { get { return get_spread_angle(); } }
        public void put_spread_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "spread_angle", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "light_source_spot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of limits_and_fits
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class limits_and_fits : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of limits_and_fits
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public limits_and_fits(SdaiInstance instance) : base(instance) { }
        public limits_and_fits() : base(0) { }

        public static implicit operator limits_and_fits(SdaiInstance instance) => new limits_and_fits(instance);

        /// <summary>
        /// Create new instace of limits_and_fits and returns object of this class to interact with
        /// </summary>
        public static new limits_and_fits Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "limits_and_fits"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_form_variance() { return get_string("form_variance", ifcengine.sdaiSTRING); }
        public TextValue _form_variance { get { return get_form_variance(); } }
        public void put_form_variance(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "form_variance", ifcengine.sdaiSTRING, value); }
        public TextValue get_zone_variance() { return get_string("zone_variance", ifcengine.sdaiSTRING); }
        public TextValue _zone_variance { get { return get_zone_variance(); } }
        public void put_zone_variance(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "zone_variance", ifcengine.sdaiSTRING, value); }
        public TextValue get_grade() { return get_string("grade", ifcengine.sdaiSTRING); }
        public TextValue _grade { get { return get_grade(); } }
        public void put_grade(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "grade", ifcengine.sdaiSTRING, value); }
        public TextValue get_source() { return get_string("source", ifcengine.sdaiSTRING); }
        public TextValue _source { get { return get_source(); } }
        public void put_source(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "source", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "limits_and_fits"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of line
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class line : curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public line(SdaiInstance instance) : base(instance) { }
        public line() : base(0) { }

        public static implicit operator line(SdaiInstance instance) => new line(instance);

        /// <summary>
        /// Create new instace of line and returns object of this class to interact with
        /// </summary>
        public static new line Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "line"); Debug.Assert(inst != 0); return inst; }

        public cartesian_point get_pnt() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "pnt", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point (inst); }
        public cartesian_point _pnt { get { return get_pnt(); } }
        public void put_pnt(cartesian_point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "pnt", ifcengine.sdaiINSTANCE, i); }
        public vector get_dir() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dir", ifcengine.sdaiINSTANCE, out inst); return new vector (inst); }
        public vector _dir { get { return get_dir(); } }
        public void put_dir(vector inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dir", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "line"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of line_profile_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class line_profile_tolerance : geometric_tolerance
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of line_profile_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public line_profile_tolerance(SdaiInstance instance) : base(instance) { }
        public line_profile_tolerance() : base(0) { }

        public static implicit operator line_profile_tolerance(SdaiInstance instance) => new line_profile_tolerance(instance);

        /// <summary>
        /// Create new instace of line_profile_tolerance and returns object of this class to interact with
        /// </summary>
        public static new line_profile_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "line_profile_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "line_profile_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of linear_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class linear_dimension : dimension_curve_directed_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of linear_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public linear_dimension(SdaiInstance instance) : base(instance) { }
        public linear_dimension() : base(0) { }

        public static implicit operator linear_dimension(SdaiInstance instance) => new linear_dimension(instance);

        /// <summary>
        /// Create new instace of linear_dimension and returns object of this class to interact with
        /// </summary>
        public static new linear_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "linear_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "linear_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of simple_clause
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class simple_clause : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of simple_clause
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public simple_clause(SdaiInstance instance) : base(instance) { }
        public simple_clause() : base(0) { }

        public static implicit operator simple_clause(SdaiInstance instance) => new simple_clause(instance);

        /// <summary>
        /// Create new instace of simple_clause and returns object of this class to interact with
        /// </summary>
        public static new simple_clause Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "simple_clause"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "simple_clause"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of literal_conjunction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class literal_conjunction : simple_clause
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of literal_conjunction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public literal_conjunction(SdaiInstance instance) : base(instance) { }
        public literal_conjunction() : base(0) { }

        public static implicit operator literal_conjunction(SdaiInstance instance) => new literal_conjunction(instance);

        /// <summary>
        /// Create new instace of literal_conjunction and returns object of this class to interact with
        /// </summary>
        public static new literal_conjunction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "literal_conjunction"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "literal_conjunction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of literal_disjunction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class literal_disjunction : simple_clause
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of literal_disjunction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public literal_disjunction(SdaiInstance instance) : base(instance) { }
        public literal_disjunction() : base(0) { }

        public static implicit operator literal_disjunction(SdaiInstance instance) => new literal_disjunction(instance);

        /// <summary>
        /// Create new instace of literal_disjunction and returns object of this class to interact with
        /// </summary>
        public static new literal_disjunction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "literal_disjunction"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "literal_disjunction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of local_time
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class local_time : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of local_time
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public local_time(SdaiInstance instance) : base(instance) { }
        public local_time() : base(0) { }

        public static implicit operator local_time(SdaiInstance instance) => new local_time(instance);

        /// <summary>
        /// Create new instace of local_time and returns object of this class to interact with
        /// </summary>
        public static new local_time Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "local_time"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_hour_component() { return get_IntValue("hour_component", ifcengine.sdaiINTEGER);}
        public IntValue? _hour_component { get { return get_hour_component(); } }
        public void put_hour_component(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "hour_component", ifcengine.sdaiINTEGER, ref value); }
        public IntValue? get_minute_component() { return get_IntValue("minute_component", ifcengine.sdaiINTEGER);}
        public IntValue? _minute_component { get { return get_minute_component(); } }
        public void put_minute_component(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "minute_component", ifcengine.sdaiINTEGER, ref value); }
        public double? get_second_component() { return get_double("second_component", ifcengine.sdaiREAL);}
        public double? _second_component { get { return get_second_component(); } }
        public void put_second_component(double value) { ifcengine.sdaiPutAttrBN(m_instance, "second_component", ifcengine.sdaiREAL, ref value); }
        public coordinated_universal_time_offset get_zone() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "zone", ifcengine.sdaiINSTANCE, out inst); return new coordinated_universal_time_offset (inst); }
        public coordinated_universal_time_offset _zone { get { return get_zone(); } }
        public void put_zone(coordinated_universal_time_offset inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "zone", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "local_time"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of logical_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class logical_literal : generic_literal
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of logical_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public logical_literal(SdaiInstance instance) : base(instance) { }
        public logical_literal() : base(0) { }

        public static implicit operator logical_literal(SdaiInstance instance) => new logical_literal(instance);

        /// <summary>
        /// Create new instace of logical_literal and returns object of this class to interact with
        /// </summary>
        public static new logical_literal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "logical_literal"); Debug.Assert(inst != 0); return inst; }

        public LOGICAL_VALUE? get_lit_value() { var str = get_string("lit_value", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _lit_value { get { return get_lit_value(); } }
        public void put_lit_value(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "lit_value", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "logical_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of logical_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class logical_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of logical_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public logical_representation_item(SdaiInstance instance) : base(instance) { }
        public logical_representation_item() : base(0) { }

        public static implicit operator logical_representation_item(SdaiInstance instance) => new logical_representation_item(instance);

        /// <summary>
        /// Create new instace of logical_representation_item and returns object of this class to interact with
        /// </summary>
        public static new logical_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "logical_representation_item"); Debug.Assert(inst != 0); return inst; }

        public LOGICAL_VALUE? get_lit_value() { var str = get_string("lit_value", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _lit_value { get { return get_lit_value(); } }
        public void put_lit_value(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "lit_value", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "logical_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of loss_tangent_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class loss_tangent_measure_with_unit : ratio_measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of loss_tangent_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public loss_tangent_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public loss_tangent_measure_with_unit() : base(0) { }

        public static implicit operator loss_tangent_measure_with_unit(SdaiInstance instance) => new loss_tangent_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of loss_tangent_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new loss_tangent_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "loss_tangent_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "loss_tangent_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of lot_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class lot_effectivity : effectivity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of lot_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public lot_effectivity(SdaiInstance instance) : base(instance) { }
        public lot_effectivity() : base(0) { }

        public static implicit operator lot_effectivity(SdaiInstance instance) => new lot_effectivity(instance);

        /// <summary>
        /// Create new instace of lot_effectivity and returns object of this class to interact with
        /// </summary>
        public static new lot_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "lot_effectivity"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_effectivity_lot_id() { return get_string("effectivity_lot_id", ifcengine.sdaiSTRING); }
        public TextValue _effectivity_lot_id { get { return get_effectivity_lot_id(); } }
        public void put_effectivity_lot_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "effectivity_lot_id", ifcengine.sdaiSTRING, value); }
        public measure_with_unit get_effectivity_lot_size() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "effectivity_lot_size", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _effectivity_lot_size { get { return get_effectivity_lot_size(); } }
        public void put_effectivity_lot_size(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "effectivity_lot_size", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "lot_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of luminous_flux_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class luminous_flux_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of luminous_flux_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public luminous_flux_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public luminous_flux_measure_with_unit() : base(0) { }

        public static implicit operator luminous_flux_measure_with_unit(SdaiInstance instance) => new luminous_flux_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of luminous_flux_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new luminous_flux_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "luminous_flux_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "luminous_flux_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of luminous_flux_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class luminous_flux_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of luminous_flux_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public luminous_flux_unit(SdaiInstance instance) : base(instance) { }
        public luminous_flux_unit() : base(0) { }

        public static implicit operator luminous_flux_unit(SdaiInstance instance) => new luminous_flux_unit(instance);

        /// <summary>
        /// Create new instace of luminous_flux_unit and returns object of this class to interact with
        /// </summary>
        public static new luminous_flux_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "luminous_flux_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "luminous_flux_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of luminous_intensity_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class luminous_intensity_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of luminous_intensity_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public luminous_intensity_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public luminous_intensity_measure_with_unit() : base(0) { }

        public static implicit operator luminous_intensity_measure_with_unit(SdaiInstance instance) => new luminous_intensity_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of luminous_intensity_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new luminous_intensity_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "luminous_intensity_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "luminous_intensity_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of luminous_intensity_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class luminous_intensity_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of luminous_intensity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public luminous_intensity_unit(SdaiInstance instance) : base(instance) { }
        public luminous_intensity_unit() : base(0) { }

        public static implicit operator luminous_intensity_unit(SdaiInstance instance) => new luminous_intensity_unit(instance);

        /// <summary>
        /// Create new instace of luminous_intensity_unit and returns object of this class to interact with
        /// </summary>
        public static new luminous_intensity_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "luminous_intensity_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "luminous_intensity_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of magnetic_flux_density_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class magnetic_flux_density_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of magnetic_flux_density_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public magnetic_flux_density_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public magnetic_flux_density_measure_with_unit() : base(0) { }

        public static implicit operator magnetic_flux_density_measure_with_unit(SdaiInstance instance) => new magnetic_flux_density_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of magnetic_flux_density_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new magnetic_flux_density_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "magnetic_flux_density_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "magnetic_flux_density_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of magnetic_flux_density_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class magnetic_flux_density_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of magnetic_flux_density_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public magnetic_flux_density_unit(SdaiInstance instance) : base(instance) { }
        public magnetic_flux_density_unit() : base(0) { }

        public static implicit operator magnetic_flux_density_unit(SdaiInstance instance) => new magnetic_flux_density_unit(instance);

        /// <summary>
        /// Create new instace of magnetic_flux_density_unit and returns object of this class to interact with
        /// </summary>
        public static new magnetic_flux_density_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "magnetic_flux_density_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "magnetic_flux_density_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of magnetic_flux_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class magnetic_flux_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of magnetic_flux_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public magnetic_flux_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public magnetic_flux_measure_with_unit() : base(0) { }

        public static implicit operator magnetic_flux_measure_with_unit(SdaiInstance instance) => new magnetic_flux_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of magnetic_flux_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new magnetic_flux_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "magnetic_flux_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "magnetic_flux_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of magnetic_flux_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class magnetic_flux_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of magnetic_flux_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public magnetic_flux_unit(SdaiInstance instance) : base(instance) { }
        public magnetic_flux_unit() : base(0) { }

        public static implicit operator magnetic_flux_unit(SdaiInstance instance) => new magnetic_flux_unit(instance);

        /// <summary>
        /// Create new instace of magnetic_flux_unit and returns object of this class to interact with
        /// </summary>
        public static new magnetic_flux_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "magnetic_flux_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "magnetic_flux_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of make_from_usage_option
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class make_from_usage_option : product_definition_usage
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of make_from_usage_option
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public make_from_usage_option(SdaiInstance instance) : base(instance) { }
        public make_from_usage_option() : base(0) { }

        public static implicit operator make_from_usage_option(SdaiInstance instance) => new make_from_usage_option(instance);

        /// <summary>
        /// Create new instace of make_from_usage_option and returns object of this class to interact with
        /// </summary>
        public static new make_from_usage_option Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "make_from_usage_option"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_ranking() { return get_IntValue("ranking", ifcengine.sdaiINTEGER);}
        public IntValue? _ranking { get { return get_ranking(); } }
        public void put_ranking(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "ranking", ifcengine.sdaiINTEGER, ref value); }
        public TextValue get_ranking_rationale() { return get_string("ranking_rationale", ifcengine.sdaiSTRING); }
        public TextValue _ranking_rationale { get { return get_ranking_rationale(); } }
        public void put_ranking_rationale(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "ranking_rationale", ifcengine.sdaiSTRING, value); }
        public measure_with_unit get_quantity() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "quantity", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _quantity { get { return get_quantity(); } }
        public void put_quantity(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "quantity", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "make_from_usage_option"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of manifold_subsurface_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class manifold_subsurface_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of manifold_subsurface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public manifold_subsurface_shape_representation(SdaiInstance instance) : base(instance) { }
        public manifold_subsurface_shape_representation() : base(0) { }

        public static implicit operator manifold_subsurface_shape_representation(SdaiInstance instance) => new manifold_subsurface_shape_representation(instance);

        /// <summary>
        /// Create new instace of manifold_subsurface_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new manifold_subsurface_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "manifold_subsurface_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "manifold_subsurface_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of manifold_surface_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class manifold_surface_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of manifold_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public manifold_surface_shape_representation(SdaiInstance instance) : base(instance) { }
        public manifold_surface_shape_representation() : base(0) { }

        public static implicit operator manifold_surface_shape_representation(SdaiInstance instance) => new manifold_surface_shape_representation(instance);

        /// <summary>
        /// Create new instace of manifold_surface_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new manifold_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "manifold_surface_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "manifold_surface_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mass_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mass_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mass_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mass_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public mass_measure_with_unit() : base(0) { }

        public static implicit operator mass_measure_with_unit(SdaiInstance instance) => new mass_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of mass_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new mass_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mass_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "mass_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mass_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mass_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mass_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mass_unit(SdaiInstance instance) : base(instance) { }
        public mass_unit() : base(0) { }

        public static implicit operator mass_unit(SdaiInstance instance) => new mass_unit(instance);

        /// <summary>
        /// Create new instace of mass_unit and returns object of this class to interact with
        /// </summary>
        public static new mass_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mass_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "mass_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_designation_characterization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_designation_characterization : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_designation_characterization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_designation_characterization(SdaiInstance instance) : base(instance) { }
        public material_designation_characterization() : base(0) { }

        public static implicit operator material_designation_characterization(SdaiInstance instance) => new material_designation_characterization(instance);

        /// <summary>
        /// Create new instace of material_designation_characterization and returns object of this class to interact with
        /// </summary>
        public static new material_designation_characterization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_designation_characterization"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public material_designation get_designation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "designation", ifcengine.sdaiINSTANCE, out inst); return new material_designation (inst); }
        public material_designation _designation { get { return get_designation(); } }
        public void put_designation(material_designation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "designation", ifcengine.sdaiINSTANCE, i); }

        public characterized_material_property_get get_property() { return new characterized_material_property_get(m_instance, "property", 0); }
        public characterized_material_property_get _property { get { return new characterized_material_property_get(m_instance, "property", 0); } }
        public characterized_material_property_put put_property() { return new characterized_material_property_put(m_instance, "property", 0); }

        protected override TextValue EntityName() { return "material_designation_characterization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_property
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_property : property_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_property
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_property(SdaiInstance instance) : base(instance) { }
        public material_property() : base(0) { }

        public static implicit operator material_property(SdaiInstance instance) => new material_property(instance);

        /// <summary>
        /// Create new instace of material_property and returns object of this class to interact with
        /// </summary>
        public static new material_property Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_property"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "material_property"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of property_definition_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class property_definition_representation : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of property_definition_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public property_definition_representation(SdaiInstance instance) : base(instance) { }
        public property_definition_representation() : base(0) { }

        public static implicit operator property_definition_representation(SdaiInstance instance) => new property_definition_representation(instance);

        /// <summary>
        /// Create new instace of property_definition_representation and returns object of this class to interact with
        /// </summary>
        public static new property_definition_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "property_definition_representation"); Debug.Assert(inst != 0); return inst; }


        public represented_definition_get get_definition() { return new represented_definition_get(m_instance, "definition", 0); }
        public represented_definition_get _definition { get { return new represented_definition_get(m_instance, "definition", 0); } }
        public represented_definition_put put_definition() { return new represented_definition_put(m_instance, "definition", 0); }
        public representation get_used_representation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, out inst); return new representation (inst); }
        public representation _used_representation { get { return get_used_representation(); } }
        public void put_used_representation(representation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "used_representation", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "property_definition_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of material_property_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class material_property_representation : property_definition_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of material_property_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public material_property_representation(SdaiInstance instance) : base(instance) { }
        public material_property_representation() : base(0) { }

        public static implicit operator material_property_representation(SdaiInstance instance) => new material_property_representation(instance);

        /// <summary>
        /// Create new instace of material_property_representation and returns object of this class to interact with
        /// </summary>
        public static new material_property_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "material_property_representation"); Debug.Assert(inst != 0); return inst; }

        public data_environment get_dependent_environment() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dependent_environment", ifcengine.sdaiINSTANCE, out inst); return new data_environment (inst); }
        public data_environment _dependent_environment { get { return get_dependent_environment(); } }
        public void put_dependent_environment(data_environment inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dependent_environment", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "material_property_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of measure_qualification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class measure_qualification : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of measure_qualification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public measure_qualification(SdaiInstance instance) : base(instance) { }
        public measure_qualification() : base(0) { }

        public static implicit operator measure_qualification(SdaiInstance instance) => new measure_qualification(instance);

        /// <summary>
        /// Create new instace of measure_qualification and returns object of this class to interact with
        /// </summary>
        public static new measure_qualification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "measure_qualification"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public measure_with_unit get_qualified_measure() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "qualified_measure", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _qualified_measure { get { return get_qualified_measure(); } }
        public void put_qualified_measure(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "qualified_measure", ifcengine.sdaiINSTANCE, i); }
        public set_of_value_qualifier get_qualifiers() { return (new set_of_value_qualifierSerializer()).FromAttr(m_instance, "qualifiers"); }
        public set_of_value_qualifier _qualifiers { get { return get_qualifiers(); } }
        public void put_qualifiers(IEnumerable<value_qualifier> lst) { (new set_of_value_qualifierSerializer()).ToSdaiAggr(lst, m_instance, "qualifiers"); }
        //public void put_qualifiers_untyped(IEnumerable lst) { (new set_of_value_qualifierSerializer()).ToSdaiAggr(lst, m_instance, "qualifiers"); }

        protected override TextValue EntityName() { return "measure_qualification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of measure_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class measure_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of measure_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public measure_representation_item(SdaiInstance instance) : base(instance) { }
        public measure_representation_item() : base(0) { }

        public static implicit operator measure_representation_item(SdaiInstance instance) => new measure_representation_item(instance);

        /// <summary>
        /// Create new instace of measure_representation_item and returns object of this class to interact with
        /// </summary>
        public static new measure_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "measure_representation_item"); Debug.Assert(inst != 0); return inst; }


        public measure_value_get get_value_component() { return new measure_value_get(m_instance, "value_component", 0); }
        public measure_value_get _value_component { get { return new measure_value_get(m_instance, "value_component", 0); } }
        public measure_value_put put_value_component() { return new measure_value_put(m_instance, "value_component", 0); }

        public unit_get get_unit_component() { return new unit_get(m_instance, "unit_component", 0); }
        public unit_get _unit_component { get { return new unit_get(m_instance, "unit_component", 0); } }
        public unit_put put_unit_component() { return new unit_put(m_instance, "unit_component", 0); }

        protected override TextValue EntityName() { return "measure_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_context : application_context_element
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_context(SdaiInstance instance) : base(instance) { }
        public product_context() : base(0) { }

        public static implicit operator product_context(SdaiInstance instance) => new product_context(instance);

        /// <summary>
        /// Create new instace of product_context and returns object of this class to interact with
        /// </summary>
        public static new product_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_context"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_discipline_type() { return get_string("discipline_type", ifcengine.sdaiSTRING); }
        public TextValue _discipline_type { get { return get_discipline_type(); } }
        public void put_discipline_type(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "discipline_type", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "product_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mechanical_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mechanical_context : product_context
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mechanical_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mechanical_context(SdaiInstance instance) : base(instance) { }
        public mechanical_context() : base(0) { }

        public static implicit operator mechanical_context(SdaiInstance instance) => new mechanical_context(instance);

        /// <summary>
        /// Create new instace of mechanical_context and returns object of this class to interact with
        /// </summary>
        public static new mechanical_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mechanical_context"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "mechanical_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mechanical_design_and_draughting_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mechanical_design_and_draughting_relationship : definitional_representation_relationship_with_same_context
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mechanical_design_and_draughting_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mechanical_design_and_draughting_relationship(SdaiInstance instance) : base(instance) { }
        public mechanical_design_and_draughting_relationship() : base(0) { }

        public static implicit operator mechanical_design_and_draughting_relationship(SdaiInstance instance) => new mechanical_design_and_draughting_relationship(instance);

        /// <summary>
        /// Create new instace of mechanical_design_and_draughting_relationship and returns object of this class to interact with
        /// </summary>
        public static new mechanical_design_and_draughting_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mechanical_design_and_draughting_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "mechanical_design_and_draughting_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mechanical_design_geometric_presentation_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mechanical_design_geometric_presentation_area : presentation_area
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mechanical_design_geometric_presentation_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mechanical_design_geometric_presentation_area(SdaiInstance instance) : base(instance) { }
        public mechanical_design_geometric_presentation_area() : base(0) { }

        public static implicit operator mechanical_design_geometric_presentation_area(SdaiInstance instance) => new mechanical_design_geometric_presentation_area(instance);

        /// <summary>
        /// Create new instace of mechanical_design_geometric_presentation_area and returns object of this class to interact with
        /// </summary>
        public static new mechanical_design_geometric_presentation_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mechanical_design_geometric_presentation_area"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "mechanical_design_geometric_presentation_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mechanical_design_geometric_presentation_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mechanical_design_geometric_presentation_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mechanical_design_geometric_presentation_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mechanical_design_geometric_presentation_representation(SdaiInstance instance) : base(instance) { }
        public mechanical_design_geometric_presentation_representation() : base(0) { }

        public static implicit operator mechanical_design_geometric_presentation_representation(SdaiInstance instance) => new mechanical_design_geometric_presentation_representation(instance);

        /// <summary>
        /// Create new instace of mechanical_design_geometric_presentation_representation and returns object of this class to interact with
        /// </summary>
        public static new mechanical_design_geometric_presentation_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mechanical_design_geometric_presentation_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "mechanical_design_geometric_presentation_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mechanical_design_presentation_representation_with_draughting
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mechanical_design_presentation_representation_with_draughting : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mechanical_design_presentation_representation_with_draughting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mechanical_design_presentation_representation_with_draughting(SdaiInstance instance) : base(instance) { }
        public mechanical_design_presentation_representation_with_draughting() : base(0) { }

        public static implicit operator mechanical_design_presentation_representation_with_draughting(SdaiInstance instance) => new mechanical_design_presentation_representation_with_draughting(instance);

        /// <summary>
        /// Create new instace of mechanical_design_presentation_representation_with_draughting and returns object of this class to interact with
        /// </summary>
        public static new mechanical_design_presentation_representation_with_draughting Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mechanical_design_presentation_representation_with_draughting"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "mechanical_design_presentation_representation_with_draughting"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mechanical_design_shaded_presentation_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mechanical_design_shaded_presentation_area : presentation_area
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mechanical_design_shaded_presentation_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mechanical_design_shaded_presentation_area(SdaiInstance instance) : base(instance) { }
        public mechanical_design_shaded_presentation_area() : base(0) { }

        public static implicit operator mechanical_design_shaded_presentation_area(SdaiInstance instance) => new mechanical_design_shaded_presentation_area(instance);

        /// <summary>
        /// Create new instace of mechanical_design_shaded_presentation_area and returns object of this class to interact with
        /// </summary>
        public static new mechanical_design_shaded_presentation_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mechanical_design_shaded_presentation_area"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "mechanical_design_shaded_presentation_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of mechanical_design_shaded_presentation_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class mechanical_design_shaded_presentation_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of mechanical_design_shaded_presentation_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public mechanical_design_shaded_presentation_representation(SdaiInstance instance) : base(instance) { }
        public mechanical_design_shaded_presentation_representation() : base(0) { }

        public static implicit operator mechanical_design_shaded_presentation_representation(SdaiInstance instance) => new mechanical_design_shaded_presentation_representation(instance);

        /// <summary>
        /// Create new instace of mechanical_design_shaded_presentation_representation and returns object of this class to interact with
        /// </summary>
        public static new mechanical_design_shaded_presentation_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "mechanical_design_shaded_presentation_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "mechanical_design_shaded_presentation_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of min_and_major_ply_orientation_basis
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class min_and_major_ply_orientation_basis : representation_item_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of min_and_major_ply_orientation_basis
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public min_and_major_ply_orientation_basis(SdaiInstance instance) : base(instance) { }
        public min_and_major_ply_orientation_basis() : base(0) { }

        public static implicit operator min_and_major_ply_orientation_basis(SdaiInstance instance) => new min_and_major_ply_orientation_basis(instance);

        /// <summary>
        /// Create new instace of min_and_major_ply_orientation_basis and returns object of this class to interact with
        /// </summary>
        public static new min_and_major_ply_orientation_basis Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "min_and_major_ply_orientation_basis"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "min_and_major_ply_orientation_basis"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of modified_geometric_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class modified_geometric_tolerance : geometric_tolerance
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of modified_geometric_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public modified_geometric_tolerance(SdaiInstance instance) : base(instance) { }
        public modified_geometric_tolerance() : base(0) { }

        public static implicit operator modified_geometric_tolerance(SdaiInstance instance) => new modified_geometric_tolerance(instance);

        /// <summary>
        /// Create new instace of modified_geometric_tolerance and returns object of this class to interact with
        /// </summary>
        public static new modified_geometric_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "modified_geometric_tolerance"); Debug.Assert(inst != 0); return inst; }

        public limit_condition? get_modifier() { var str = get_string("modifier", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.limit_condition_); return EnumValue<limit_condition>.FromIndex(ind); }
        public limit_condition? _modifier { get { return get_modifier(); } }
        public void put_modifier(limit_condition value) { var str = EnumString<limit_condition>.FromValue(value, EnumNames.limit_condition_); ifcengine.sdaiPutAttrBN(m_instance, "modifier", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "modified_geometric_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of modified_solid_with_placed_configuration
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class modified_solid_with_placed_configuration : modified_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of modified_solid_with_placed_configuration
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public modified_solid_with_placed_configuration(SdaiInstance instance) : base(instance) { }
        public modified_solid_with_placed_configuration() : base(0) { }

        public static implicit operator modified_solid_with_placed_configuration(SdaiInstance instance) => new modified_solid_with_placed_configuration(instance);

        public axis2_placement_3d get_placing() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "placing", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d (inst); }
        public axis2_placement_3d _placing { get { return get_placing(); } }
        public void put_placing(axis2_placement_3d inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "placing", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "modified_solid_with_placed_configuration"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of moments_of_inertia_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class moments_of_inertia_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of moments_of_inertia_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public moments_of_inertia_representation(SdaiInstance instance) : base(instance) { }
        public moments_of_inertia_representation() : base(0) { }

        public static implicit operator moments_of_inertia_representation(SdaiInstance instance) => new moments_of_inertia_representation(instance);

        /// <summary>
        /// Create new instace of moments_of_inertia_representation and returns object of this class to interact with
        /// </summary>
        public static new moments_of_inertia_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "moments_of_inertia_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "moments_of_inertia_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of multi_language_attribute_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class multi_language_attribute_assignment : attribute_value_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of multi_language_attribute_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public multi_language_attribute_assignment(SdaiInstance instance) : base(instance) { }
        public multi_language_attribute_assignment() : base(0) { }

        public static implicit operator multi_language_attribute_assignment(SdaiInstance instance) => new multi_language_attribute_assignment(instance);

        /// <summary>
        /// Create new instace of multi_language_attribute_assignment and returns object of this class to interact with
        /// </summary>
        public static new multi_language_attribute_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "multi_language_attribute_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_multi_language_attribute_item get_items() { return (new set_of_multi_language_attribute_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_multi_language_attribute_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<multi_language_attribute_item> lst) { (new set_of_multi_language_attribute_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_multi_language_attribute_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        public set_of_attribute_language_assignment get_language_indication() { return (new set_of_attribute_language_assignmentSerializer()).FromAttr(m_instance, "language_indication"); }
        public set_of_attribute_language_assignment _language_indication { get { return get_language_indication(); } }

        protected override TextValue EntityName() { return "multi_language_attribute_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of multiple_arity_boolean_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class multiple_arity_boolean_expression : boolean_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of multiple_arity_boolean_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public multiple_arity_boolean_expression(SdaiInstance instance) : base(instance) { }
        public multiple_arity_boolean_expression() : base(0) { }

        public static implicit operator multiple_arity_boolean_expression(SdaiInstance instance) => new multiple_arity_boolean_expression(instance);

        public list_of_generic_expression get_operands() { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); }
        public list_of_generic_expression _operands { get { return get_operands(); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        //public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue EntityName() { return "multiple_arity_boolean_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of multiple_arity_generic_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class multiple_arity_generic_expression : generic_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of multiple_arity_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public multiple_arity_generic_expression(SdaiInstance instance) : base(instance) { }
        public multiple_arity_generic_expression() : base(0) { }

        public static implicit operator multiple_arity_generic_expression(SdaiInstance instance) => new multiple_arity_generic_expression(instance);

        public list_of_generic_expression get_operands() { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); }
        public list_of_generic_expression _operands { get { return get_operands(); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        //public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue EntityName() { return "multiple_arity_generic_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of multiple_arity_numeric_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class multiple_arity_numeric_expression : numeric_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of multiple_arity_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public multiple_arity_numeric_expression(SdaiInstance instance) : base(instance) { }
        public multiple_arity_numeric_expression() : base(0) { }

        public static implicit operator multiple_arity_numeric_expression(SdaiInstance instance) => new multiple_arity_numeric_expression(instance);

        public list_of_generic_expression get_operands() { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); }
        public list_of_generic_expression _operands { get { return get_operands(); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        //public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue EntityName() { return "multiple_arity_numeric_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of name_attribute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class name_attribute : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of name_attribute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public name_attribute(SdaiInstance instance) : base(instance) { }
        public name_attribute() : base(0) { }

        public static implicit operator name_attribute(SdaiInstance instance) => new name_attribute(instance);

        /// <summary>
        /// Create new instace of name_attribute and returns object of this class to interact with
        /// </summary>
        public static new name_attribute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "name_attribute"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_attribute_value() { return get_string("attribute_value", ifcengine.sdaiSTRING); }
        public TextValue _attribute_value { get { return get_attribute_value(); } }
        public void put_attribute_value(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "attribute_value", ifcengine.sdaiSTRING, value); }

        public name_attribute_select_get get_named_item() { return new name_attribute_select_get(m_instance, "named_item", 0); }
        public name_attribute_select_get _named_item { get { return new name_attribute_select_get(m_instance, "named_item", 0); } }
        public name_attribute_select_put put_named_item() { return new name_attribute_select_put(m_instance, "named_item", 0); }

        protected override TextValue EntityName() { return "name_attribute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of next_assembly_usage_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class next_assembly_usage_occurrence : assembly_component_usage
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of next_assembly_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public next_assembly_usage_occurrence(SdaiInstance instance) : base(instance) { }
        public next_assembly_usage_occurrence() : base(0) { }

        public static implicit operator next_assembly_usage_occurrence(SdaiInstance instance) => new next_assembly_usage_occurrence(instance);

        /// <summary>
        /// Create new instace of next_assembly_usage_occurrence and returns object of this class to interact with
        /// </summary>
        public static new next_assembly_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "next_assembly_usage_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "next_assembly_usage_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of non_manifold_surface_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class non_manifold_surface_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of non_manifold_surface_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public non_manifold_surface_shape_representation(SdaiInstance instance) : base(instance) { }
        public non_manifold_surface_shape_representation() : base(0) { }

        public static implicit operator non_manifold_surface_shape_representation(SdaiInstance instance) => new non_manifold_surface_shape_representation(instance);

        /// <summary>
        /// Create new instace of non_manifold_surface_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new non_manifold_surface_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "non_manifold_surface_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "non_manifold_surface_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of null_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class null_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of null_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public null_representation_item(SdaiInstance instance) : base(instance) { }
        public null_representation_item() : base(0) { }

        public static implicit operator null_representation_item(SdaiInstance instance) => new null_representation_item(instance);

        /// <summary>
        /// Create new instace of null_representation_item and returns object of this class to interact with
        /// </summary>
        public static new null_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "null_representation_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "null_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of object_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class object_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of object_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public object_role(SdaiInstance instance) : base(instance) { }
        public object_role() : base(0) { }

        public static implicit operator object_role(SdaiInstance instance) => new object_role(instance);

        /// <summary>
        /// Create new instace of object_role and returns object of this class to interact with
        /// </summary>
        public static new object_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "object_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "object_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of offset_curve_2d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class offset_curve_2d : curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of offset_curve_2d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public offset_curve_2d(SdaiInstance instance) : base(instance) { }
        public offset_curve_2d() : base(0) { }

        public static implicit operator offset_curve_2d(SdaiInstance instance) => new offset_curve_2d(instance);

        /// <summary>
        /// Create new instace of offset_curve_2d and returns object of this class to interact with
        /// </summary>
        public static new offset_curve_2d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "offset_curve_2d"); Debug.Assert(inst != 0); return inst; }

        public curve get_basis_curve() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve (inst); }
        public curve _basis_curve { get { return get_basis_curve(); } }
        public void put_basis_curve(curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
        public double? get_distance() { return get_double("distance", ifcengine.sdaiREAL);}
        public double? _distance { get { return get_distance(); } }
        public void put_distance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "distance", ifcengine.sdaiREAL, ref value); }
        public LOGICAL_VALUE? get_self_intersect() { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _self_intersect { get { return get_self_intersect(); } }
        public void put_self_intersect(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "offset_curve_2d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of offset_curve_3d
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class offset_curve_3d : curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of offset_curve_3d
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public offset_curve_3d(SdaiInstance instance) : base(instance) { }
        public offset_curve_3d() : base(0) { }

        public static implicit operator offset_curve_3d(SdaiInstance instance) => new offset_curve_3d(instance);

        /// <summary>
        /// Create new instace of offset_curve_3d and returns object of this class to interact with
        /// </summary>
        public static new offset_curve_3d Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "offset_curve_3d"); Debug.Assert(inst != 0); return inst; }

        public curve get_basis_curve() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve (inst); }
        public curve _basis_curve { get { return get_basis_curve(); } }
        public void put_basis_curve(curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
        public double? get_distance() { return get_double("distance", ifcengine.sdaiREAL);}
        public double? _distance { get { return get_distance(); } }
        public void put_distance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "distance", ifcengine.sdaiREAL, ref value); }
        public LOGICAL_VALUE? get_self_intersect() { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _self_intersect { get { return get_self_intersect(); } }
        public void put_self_intersect(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); }
        public direction get_ref_direction() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _ref_direction { get { return get_ref_direction(); } }
        public void put_ref_direction(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "ref_direction", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "offset_curve_3d"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of offset_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class offset_surface : surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of offset_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public offset_surface(SdaiInstance instance) : base(instance) { }
        public offset_surface() : base(0) { }

        public static implicit operator offset_surface(SdaiInstance instance) => new offset_surface(instance);

        /// <summary>
        /// Create new instace of offset_surface and returns object of this class to interact with
        /// </summary>
        public static new offset_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "offset_surface"); Debug.Assert(inst != 0); return inst; }

        public surface get_basis_surface() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface (inst); }
        public surface _basis_surface { get { return get_basis_surface(); } }
        public void put_basis_surface(surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
        public double? get_distance() { return get_double("distance", ifcengine.sdaiREAL);}
        public double? _distance { get { return get_distance(); } }
        public void put_distance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "distance", ifcengine.sdaiREAL, ref value); }
        public LOGICAL_VALUE? get_self_intersect() { var str = get_string("self_intersect", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.LOGICAL_VALUE_); return EnumValue<LOGICAL_VALUE>.FromIndex(ind); }
        public LOGICAL_VALUE? _self_intersect { get { return get_self_intersect(); } }
        public void put_self_intersect(LOGICAL_VALUE value) { var str = EnumString<LOGICAL_VALUE>.FromValue(value, EnumNames.LOGICAL_VALUE_); ifcengine.sdaiPutAttrBN(m_instance, "self_intersect", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "offset_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of one_direction_repeat_factor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class one_direction_repeat_factor : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of one_direction_repeat_factor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public one_direction_repeat_factor(SdaiInstance instance) : base(instance) { }
        public one_direction_repeat_factor() : base(0) { }

        public static implicit operator one_direction_repeat_factor(SdaiInstance instance) => new one_direction_repeat_factor(instance);

        /// <summary>
        /// Create new instace of one_direction_repeat_factor and returns object of this class to interact with
        /// </summary>
        public static new one_direction_repeat_factor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "one_direction_repeat_factor"); Debug.Assert(inst != 0); return inst; }

        public vector get_repeat_factor() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "repeat_factor", ifcengine.sdaiINSTANCE, out inst); return new vector (inst); }
        public vector _repeat_factor { get { return get_repeat_factor(); } }
        public void put_repeat_factor(vector inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "repeat_factor", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "one_direction_repeat_factor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of open_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class open_shell : connected_face_set
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public open_shell(SdaiInstance instance) : base(instance) { }
        public open_shell() : base(0) { }

        public static implicit operator open_shell(SdaiInstance instance) => new open_shell(instance);

        /// <summary>
        /// Create new instace of open_shell and returns object of this class to interact with
        /// </summary>
        public static new open_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "open_shell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "open_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ordinal_date
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ordinal_date : date
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ordinal_date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ordinal_date(SdaiInstance instance) : base(instance) { }
        public ordinal_date() : base(0) { }

        public static implicit operator ordinal_date(SdaiInstance instance) => new ordinal_date(instance);

        /// <summary>
        /// Create new instace of ordinal_date and returns object of this class to interact with
        /// </summary>
        public static new ordinal_date Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ordinal_date"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_day_component() { return get_IntValue("day_component", ifcengine.sdaiINTEGER);}
        public IntValue? _day_component { get { return get_day_component(); } }
        public void put_day_component(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "day_component", ifcengine.sdaiINTEGER, ref value); }

        protected override TextValue EntityName() { return "ordinal_date"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of projection_directed_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class projection_directed_callout : draughting_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of projection_directed_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public projection_directed_callout(SdaiInstance instance) : base(instance) { }
        public projection_directed_callout() : base(0) { }

        public static implicit operator projection_directed_callout(SdaiInstance instance) => new projection_directed_callout(instance);

        /// <summary>
        /// Create new instace of projection_directed_callout and returns object of this class to interact with
        /// </summary>
        public static new projection_directed_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "projection_directed_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "projection_directed_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ordinate_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ordinate_dimension : projection_directed_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ordinate_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ordinate_dimension(SdaiInstance instance) : base(instance) { }
        public ordinate_dimension() : base(0) { }

        public static implicit operator ordinate_dimension(SdaiInstance instance) => new ordinate_dimension(instance);

        /// <summary>
        /// Create new instace of ordinate_dimension and returns object of this class to interact with
        /// </summary>
        public static new ordinate_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ordinate_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "ordinate_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organization : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organization(SdaiInstance instance) : base(instance) { }
        public organization() : base(0) { }

        public static implicit operator organization(SdaiInstance instance) => new organization(instance);

        /// <summary>
        /// Create new instace of organization and returns object of this class to interact with
        /// </summary>
        public static new organization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organization"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "organization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organization_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organization_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organization_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organization_relationship(SdaiInstance instance) : base(instance) { }
        public organization_relationship() : base(0) { }

        public static implicit operator organization_relationship(SdaiInstance instance) => new organization_relationship(instance);

        /// <summary>
        /// Create new instace of organization_relationship and returns object of this class to interact with
        /// </summary>
        public static new organization_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organization_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public organization get_relating_organization() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_organization", ifcengine.sdaiINSTANCE, out inst); return new organization (inst); }
        public organization _relating_organization { get { return get_relating_organization(); } }
        public void put_relating_organization(organization inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_organization", ifcengine.sdaiINSTANCE, i); }
        public organization get_related_organization() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_organization", ifcengine.sdaiINSTANCE, out inst); return new organization (inst); }
        public organization _related_organization { get { return get_related_organization(); } }
        public void put_related_organization(organization inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_organization", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "organization_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organization_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organization_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organization_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organization_role(SdaiInstance instance) : base(instance) { }
        public organization_role() : base(0) { }

        public static implicit operator organization_role(SdaiInstance instance) => new organization_role(instance);

        /// <summary>
        /// Create new instace of organization_role and returns object of this class to interact with
        /// </summary>
        public static new organization_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organization_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "organization_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organizational_address
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organizational_address : address
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organizational_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organizational_address(SdaiInstance instance) : base(instance) { }
        public organizational_address() : base(0) { }

        public static implicit operator organizational_address(SdaiInstance instance) => new organizational_address(instance);

        /// <summary>
        /// Create new instace of organizational_address and returns object of this class to interact with
        /// </summary>
        public static new organizational_address Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organizational_address"); Debug.Assert(inst != 0); return inst; }

        public set_of_organization get_organizations() { return (new set_of_organizationSerializer()).FromAttr(m_instance, "organizations"); }
        public set_of_organization _organizations { get { return get_organizations(); } }
        public void put_organizations(IEnumerable<organization> lst) { (new set_of_organizationSerializer()).ToSdaiAggr(lst, m_instance, "organizations"); }
        //public void put_organizations_untyped(IEnumerable lst) { (new set_of_organizationSerializer()).ToSdaiAggr(lst, m_instance, "organizations"); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "organizational_address"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organizational_project
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organizational_project : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organizational_project
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organizational_project(SdaiInstance instance) : base(instance) { }
        public organizational_project() : base(0) { }

        public static implicit operator organizational_project(SdaiInstance instance) => new organizational_project(instance);

        /// <summary>
        /// Create new instace of organizational_project and returns object of this class to interact with
        /// </summary>
        public static new organizational_project Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organizational_project"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public set_of_organization get_responsible_organizations() { return (new set_of_organizationSerializer()).FromAttr(m_instance, "responsible_organizations"); }
        public set_of_organization _responsible_organizations { get { return get_responsible_organizations(); } }
        public void put_responsible_organizations(IEnumerable<organization> lst) { (new set_of_organizationSerializer()).ToSdaiAggr(lst, m_instance, "responsible_organizations"); }
        //public void put_responsible_organizations_untyped(IEnumerable lst) { (new set_of_organizationSerializer()).ToSdaiAggr(lst, m_instance, "responsible_organizations"); }

        protected override TextValue EntityName() { return "organizational_project"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organizational_project_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organizational_project_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organizational_project_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organizational_project_relationship(SdaiInstance instance) : base(instance) { }
        public organizational_project_relationship() : base(0) { }

        public static implicit operator organizational_project_relationship(SdaiInstance instance) => new organizational_project_relationship(instance);

        /// <summary>
        /// Create new instace of organizational_project_relationship and returns object of this class to interact with
        /// </summary>
        public static new organizational_project_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organizational_project_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public organizational_project get_relating_organizational_project() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_organizational_project", ifcengine.sdaiINSTANCE, out inst); return new organizational_project (inst); }
        public organizational_project _relating_organizational_project { get { return get_relating_organizational_project(); } }
        public void put_relating_organizational_project(organizational_project inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_organizational_project", ifcengine.sdaiINSTANCE, i); }
        public organizational_project get_related_organizational_project() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_organizational_project", ifcengine.sdaiINSTANCE, out inst); return new organizational_project (inst); }
        public organizational_project _related_organizational_project { get { return get_related_organizational_project(); } }
        public void put_related_organizational_project(organizational_project inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_organizational_project", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "organizational_project_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of organizational_project_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class organizational_project_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of organizational_project_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public organizational_project_role(SdaiInstance instance) : base(instance) { }
        public organizational_project_role() : base(0) { }

        public static implicit operator organizational_project_role(SdaiInstance instance) => new organizational_project_role(instance);

        /// <summary>
        /// Create new instace of organizational_project_role and returns object of this class to interact with
        /// </summary>
        public static new organizational_project_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "organizational_project_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "organizational_project_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_closed_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_closed_shell : closed_shell
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_closed_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_closed_shell(SdaiInstance instance) : base(instance) { }
        public oriented_closed_shell() : base(0) { }

        public static implicit operator oriented_closed_shell(SdaiInstance instance) => new oriented_closed_shell(instance);

        /// <summary>
        /// Create new instace of oriented_closed_shell and returns object of this class to interact with
        /// </summary>
        public static new oriented_closed_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_closed_shell"); Debug.Assert(inst != 0); return inst; }

        public closed_shell get_closed_shell_element() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "closed_shell_element", ifcengine.sdaiINSTANCE, out inst); return new closed_shell (inst); }
        public closed_shell _closed_shell_element { get { return get_closed_shell_element(); } }
        public void put_closed_shell_element(closed_shell inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "closed_shell_element", ifcengine.sdaiINSTANCE, i); }
        public bool? get_orientation() { return get_bool("orientation", ifcengine.sdaiBOOLEAN);}
        public bool? _orientation { get { return get_orientation(); } }
        public void put_orientation(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "oriented_closed_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_edge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_edge : edge
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_edge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_edge(SdaiInstance instance) : base(instance) { }
        public oriented_edge() : base(0) { }

        public static implicit operator oriented_edge(SdaiInstance instance) => new oriented_edge(instance);

        /// <summary>
        /// Create new instace of oriented_edge and returns object of this class to interact with
        /// </summary>
        public static new oriented_edge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_edge"); Debug.Assert(inst != 0); return inst; }

        public edge get_edge_element() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "edge_element", ifcengine.sdaiINSTANCE, out inst); return new edge (inst); }
        public edge _edge_element { get { return get_edge_element(); } }
        public void put_edge_element(edge inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "edge_element", ifcengine.sdaiINSTANCE, i); }
        public bool? get_orientation() { return get_bool("orientation", ifcengine.sdaiBOOLEAN);}
        public bool? _orientation { get { return get_orientation(); } }
        public void put_orientation(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "oriented_edge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_face
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_face : face
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_face
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_face(SdaiInstance instance) : base(instance) { }
        public oriented_face() : base(0) { }

        public static implicit operator oriented_face(SdaiInstance instance) => new oriented_face(instance);

        /// <summary>
        /// Create new instace of oriented_face and returns object of this class to interact with
        /// </summary>
        public static new oriented_face Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_face"); Debug.Assert(inst != 0); return inst; }

        public face get_face_element() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "face_element", ifcengine.sdaiINSTANCE, out inst); return new face (inst); }
        public face _face_element { get { return get_face_element(); } }
        public void put_face_element(face inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "face_element", ifcengine.sdaiINSTANCE, i); }
        public bool? get_orientation() { return get_bool("orientation", ifcengine.sdaiBOOLEAN);}
        public bool? _orientation { get { return get_orientation(); } }
        public void put_orientation(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "oriented_face"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_open_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_open_shell : open_shell
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_open_shell(SdaiInstance instance) : base(instance) { }
        public oriented_open_shell() : base(0) { }

        public static implicit operator oriented_open_shell(SdaiInstance instance) => new oriented_open_shell(instance);

        /// <summary>
        /// Create new instace of oriented_open_shell and returns object of this class to interact with
        /// </summary>
        public static new oriented_open_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_open_shell"); Debug.Assert(inst != 0); return inst; }

        public open_shell get_open_shell_element() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "open_shell_element", ifcengine.sdaiINSTANCE, out inst); return new open_shell (inst); }
        public open_shell _open_shell_element { get { return get_open_shell_element(); } }
        public void put_open_shell_element(open_shell inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "open_shell_element", ifcengine.sdaiINSTANCE, i); }
        public bool? get_orientation() { return get_bool("orientation", ifcengine.sdaiBOOLEAN);}
        public bool? _orientation { get { return get_orientation(); } }
        public void put_orientation(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "oriented_open_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class path : topological_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public path(SdaiInstance instance) : base(instance) { }
        public path() : base(0) { }

        public static implicit operator path(SdaiInstance instance) => new path(instance);

        /// <summary>
        /// Create new instace of path and returns object of this class to interact with
        /// </summary>
        public static new path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "path"); Debug.Assert(inst != 0); return inst; }

        public list_of_oriented_edge get_edge_list() { return (new list_of_oriented_edgeSerializer()).FromAttr(m_instance, "edge_list"); }
        public list_of_oriented_edge _edge_list { get { return get_edge_list(); } }
        public void put_edge_list(IEnumerable<oriented_edge> lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }
        //public void put_edge_list_untyped(IEnumerable lst) { (new list_of_oriented_edgeSerializer()).ToSdaiAggr(lst, m_instance, "edge_list"); }

        protected override TextValue EntityName() { return "path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_path : path
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_path(SdaiInstance instance) : base(instance) { }
        public oriented_path() : base(0) { }

        public static implicit operator oriented_path(SdaiInstance instance) => new oriented_path(instance);

        /// <summary>
        /// Create new instace of oriented_path and returns object of this class to interact with
        /// </summary>
        public static new oriented_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_path"); Debug.Assert(inst != 0); return inst; }

        public path get_path_element() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "path_element", ifcengine.sdaiINSTANCE, out inst); return new path (inst); }
        public path _path_element { get { return get_path_element(); } }
        public void put_path_element(path inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "path_element", ifcengine.sdaiINSTANCE, i); }
        public bool? get_orientation() { return get_bool("orientation", ifcengine.sdaiBOOLEAN);}
        public bool? _orientation { get { return get_orientation(); } }
        public void put_orientation(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "oriented_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of oriented_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class oriented_surface : surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of oriented_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public oriented_surface(SdaiInstance instance) : base(instance) { }
        public oriented_surface() : base(0) { }

        public static implicit operator oriented_surface(SdaiInstance instance) => new oriented_surface(instance);

        /// <summary>
        /// Create new instace of oriented_surface and returns object of this class to interact with
        /// </summary>
        public static new oriented_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "oriented_surface"); Debug.Assert(inst != 0); return inst; }

        public bool? get_orientation() { return get_bool("orientation", ifcengine.sdaiBOOLEAN);}
        public bool? _orientation { get { return get_orientation(); } }
        public void put_orientation(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "oriented_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of outer_boundary_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class outer_boundary_curve : boundary_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of outer_boundary_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public outer_boundary_curve(SdaiInstance instance) : base(instance) { }
        public outer_boundary_curve() : base(0) { }

        public static implicit operator outer_boundary_curve(SdaiInstance instance) => new outer_boundary_curve(instance);

        /// <summary>
        /// Create new instace of outer_boundary_curve and returns object of this class to interact with
        /// </summary>
        public static new outer_boundary_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "outer_boundary_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "outer_boundary_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of package_product_concept_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class package_product_concept_feature : product_concept_feature
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of package_product_concept_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public package_product_concept_feature(SdaiInstance instance) : base(instance) { }
        public package_product_concept_feature() : base(0) { }

        public static implicit operator package_product_concept_feature(SdaiInstance instance) => new package_product_concept_feature(instance);

        /// <summary>
        /// Create new instace of package_product_concept_feature and returns object of this class to interact with
        /// </summary>
        public static new package_product_concept_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "package_product_concept_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "package_product_concept_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of parabola
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class parabola : conic
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of parabola
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public parabola(SdaiInstance instance) : base(instance) { }
        public parabola() : base(0) { }

        public static implicit operator parabola(SdaiInstance instance) => new parabola(instance);

        /// <summary>
        /// Create new instace of parabola and returns object of this class to interact with
        /// </summary>
        public static new parabola Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "parabola"); Debug.Assert(inst != 0); return inst; }

        public double? get_focal_dist() { return get_double("focal_dist", ifcengine.sdaiREAL);}
        public double? _focal_dist { get { return get_focal_dist(); } }
        public void put_focal_dist(double value) { ifcengine.sdaiPutAttrBN(m_instance, "focal_dist", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "parabola"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of parallel_offset
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class parallel_offset : derived_shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of parallel_offset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public parallel_offset(SdaiInstance instance) : base(instance) { }
        public parallel_offset() : base(0) { }

        public static implicit operator parallel_offset(SdaiInstance instance) => new parallel_offset(instance);

        /// <summary>
        /// Create new instace of parallel_offset and returns object of this class to interact with
        /// </summary>
        public static new parallel_offset Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "parallel_offset"); Debug.Assert(inst != 0); return inst; }

        public measure_with_unit get_offset() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "offset", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _offset { get { return get_offset(); } }
        public void put_offset(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "offset", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "parallel_offset"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of parallelism_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class parallelism_tolerance : geometric_tolerance_with_datum_reference
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of parallelism_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public parallelism_tolerance(SdaiInstance instance) : base(instance) { }
        public parallelism_tolerance() : base(0) { }

        public static implicit operator parallelism_tolerance(SdaiInstance instance) => new parallelism_tolerance(instance);

        /// <summary>
        /// Create new instace of parallelism_tolerance and returns object of this class to interact with
        /// </summary>
        public static new parallelism_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "parallelism_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "parallelism_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of parametric_representation_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class parametric_representation_context : representation_context
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of parametric_representation_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public parametric_representation_context(SdaiInstance instance) : base(instance) { }
        public parametric_representation_context() : base(0) { }

        public static implicit operator parametric_representation_context(SdaiInstance instance) => new parametric_representation_context(instance);

        /// <summary>
        /// Create new instace of parametric_representation_context and returns object of this class to interact with
        /// </summary>
        public static new parametric_representation_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "parametric_representation_context"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "parametric_representation_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of partial_document_with_structured_text_representation_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class partial_document_with_structured_text_representation_assignment : applied_document_usage_constraint_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of partial_document_with_structured_text_representation_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public partial_document_with_structured_text_representation_assignment(SdaiInstance instance) : base(instance) { }
        public partial_document_with_structured_text_representation_assignment() : base(0) { }

        public static implicit operator partial_document_with_structured_text_representation_assignment(SdaiInstance instance) => new partial_document_with_structured_text_representation_assignment(instance);

        /// <summary>
        /// Create new instace of partial_document_with_structured_text_representation_assignment and returns object of this class to interact with
        /// </summary>
        public static new partial_document_with_structured_text_representation_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "partial_document_with_structured_text_representation_assignment"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "partial_document_with_structured_text_representation_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of percentage_laminate_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class percentage_laminate_definition : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of percentage_laminate_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public percentage_laminate_definition(SdaiInstance instance) : base(instance) { }
        public percentage_laminate_definition() : base(0) { }

        public static implicit operator percentage_laminate_definition(SdaiInstance instance) => new percentage_laminate_definition(instance);

        /// <summary>
        /// Create new instace of percentage_laminate_definition and returns object of this class to interact with
        /// </summary>
        public static new percentage_laminate_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "percentage_laminate_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "percentage_laminate_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of zone_structural_makeup
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class zone_structural_makeup : laminate_table
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of zone_structural_makeup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public zone_structural_makeup(SdaiInstance instance) : base(instance) { }
        public zone_structural_makeup() : base(0) { }

        public static implicit operator zone_structural_makeup(SdaiInstance instance) => new zone_structural_makeup(instance);

        /// <summary>
        /// Create new instace of zone_structural_makeup and returns object of this class to interact with
        /// </summary>
        public static new zone_structural_makeup Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "zone_structural_makeup"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "zone_structural_makeup"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of percentage_laminate_table
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class percentage_laminate_table : zone_structural_makeup
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of percentage_laminate_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public percentage_laminate_table(SdaiInstance instance) : base(instance) { }
        public percentage_laminate_table() : base(0) { }

        public static implicit operator percentage_laminate_table(SdaiInstance instance) => new percentage_laminate_table(instance);

        /// <summary>
        /// Create new instace of percentage_laminate_table and returns object of this class to interact with
        /// </summary>
        public static new percentage_laminate_table Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "percentage_laminate_table"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "percentage_laminate_table"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of percentage_ply_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class percentage_ply_definition : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of percentage_ply_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public percentage_ply_definition(SdaiInstance instance) : base(instance) { }
        public percentage_ply_definition() : base(0) { }

        public static implicit operator percentage_ply_definition(SdaiInstance instance) => new percentage_ply_definition(instance);

        /// <summary>
        /// Create new instace of percentage_ply_definition and returns object of this class to interact with
        /// </summary>
        public static new percentage_ply_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "percentage_ply_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "percentage_ply_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of perpendicular_to
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class perpendicular_to : derived_shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of perpendicular_to
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public perpendicular_to(SdaiInstance instance) : base(instance) { }
        public perpendicular_to() : base(0) { }

        public static implicit operator perpendicular_to(SdaiInstance instance) => new perpendicular_to(instance);

        /// <summary>
        /// Create new instace of perpendicular_to and returns object of this class to interact with
        /// </summary>
        public static new perpendicular_to Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "perpendicular_to"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "perpendicular_to"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of perpendicularity_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class perpendicularity_tolerance : geometric_tolerance_with_datum_reference
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of perpendicularity_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public perpendicularity_tolerance(SdaiInstance instance) : base(instance) { }
        public perpendicularity_tolerance() : base(0) { }

        public static implicit operator perpendicularity_tolerance(SdaiInstance instance) => new perpendicularity_tolerance(instance);

        /// <summary>
        /// Create new instace of perpendicularity_tolerance and returns object of this class to interact with
        /// </summary>
        public static new perpendicularity_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "perpendicularity_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "perpendicularity_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person(SdaiInstance instance) : base(instance) { }
        public person() : base(0) { }

        public static implicit operator person(SdaiInstance instance) => new person(instance);

        /// <summary>
        /// Create new instace of person and returns object of this class to interact with
        /// </summary>
        public static new person Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "person"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_last_name() { return get_string("last_name", ifcengine.sdaiSTRING); }
        public TextValue _last_name { get { return get_last_name(); } }
        public void put_last_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "last_name", ifcengine.sdaiSTRING, value); }
        public TextValue get_first_name() { return get_string("first_name", ifcengine.sdaiSTRING); }
        public TextValue _first_name { get { return get_first_name(); } }
        public void put_first_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "first_name", ifcengine.sdaiSTRING, value); }
        public list_of_label get_middle_names() { return (new list_of_labelSerializer()).FromAttr(m_instance, "middle_names"); }
        public list_of_label _middle_names { get { return get_middle_names(); } }
        public void put_middle_names(IEnumerable<TextValue> lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "middle_names"); }
        //public void put_middle_names_untyped(IEnumerable lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "middle_names"); }
        public list_of_label get_prefix_titles() { return (new list_of_labelSerializer()).FromAttr(m_instance, "prefix_titles"); }
        public list_of_label _prefix_titles { get { return get_prefix_titles(); } }
        public void put_prefix_titles(IEnumerable<TextValue> lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "prefix_titles"); }
        //public void put_prefix_titles_untyped(IEnumerable lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "prefix_titles"); }
        public list_of_label get_suffix_titles() { return (new list_of_labelSerializer()).FromAttr(m_instance, "suffix_titles"); }
        public list_of_label _suffix_titles { get { return get_suffix_titles(); } }
        public void put_suffix_titles(IEnumerable<TextValue> lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "suffix_titles"); }
        //public void put_suffix_titles_untyped(IEnumerable lst) { (new list_of_labelSerializer()).ToSdaiAggr(lst, m_instance, "suffix_titles"); }

        protected override TextValue EntityName() { return "person"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person_and_organization
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person_and_organization : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person_and_organization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person_and_organization(SdaiInstance instance) : base(instance) { }
        public person_and_organization() : base(0) { }

        public static implicit operator person_and_organization(SdaiInstance instance) => new person_and_organization(instance);

        /// <summary>
        /// Create new instace of person_and_organization and returns object of this class to interact with
        /// </summary>
        public static new person_and_organization Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "person_and_organization"); Debug.Assert(inst != 0); return inst; }

        public person get_the_person() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "the_person", ifcengine.sdaiINSTANCE, out inst); return new person (inst); }
        public person _the_person { get { return get_the_person(); } }
        public void put_the_person(person inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "the_person", ifcengine.sdaiINSTANCE, i); }
        public organization get_the_organization() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "the_organization", ifcengine.sdaiINSTANCE, out inst); return new organization (inst); }
        public organization _the_organization { get { return get_the_organization(); } }
        public void put_the_organization(organization inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "the_organization", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "person_and_organization"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person_and_organization_address
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person_and_organization_address : organizational_address
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person_and_organization_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person_and_organization_address(SdaiInstance instance) : base(instance) { }
        public person_and_organization_address() : base(0) { }

        public static implicit operator person_and_organization_address(SdaiInstance instance) => new person_and_organization_address(instance);

        /// <summary>
        /// Create new instace of person_and_organization_address and returns object of this class to interact with
        /// </summary>
        public static new person_and_organization_address Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "person_and_organization_address"); Debug.Assert(inst != 0); return inst; }

        public set_of_person get_people() { return (new set_of_personSerializer()).FromAttr(m_instance, "people"); }
        public set_of_person _people { get { return get_people(); } }
        public void put_people(IEnumerable<person> lst) { (new set_of_personSerializer()).ToSdaiAggr(lst, m_instance, "people"); }
        //public void put_people_untyped(IEnumerable lst) { (new set_of_personSerializer()).ToSdaiAggr(lst, m_instance, "people"); }

        protected override TextValue EntityName() { return "person_and_organization_address"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of person_and_organization_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class person_and_organization_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of person_and_organization_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public person_and_organization_role(SdaiInstance instance) : base(instance) { }
        public person_and_organization_role() : base(0) { }

        public static implicit operator person_and_organization_role(SdaiInstance instance) => new person_and_organization_role(instance);

        /// <summary>
        /// Create new instace of person_and_organization_role and returns object of this class to interact with
        /// </summary>
        public static new person_and_organization_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "person_and_organization_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "person_and_organization_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of personal_address
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class personal_address : address
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of personal_address
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public personal_address(SdaiInstance instance) : base(instance) { }
        public personal_address() : base(0) { }

        public static implicit operator personal_address(SdaiInstance instance) => new personal_address(instance);

        /// <summary>
        /// Create new instace of personal_address and returns object of this class to interact with
        /// </summary>
        public static new personal_address Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "personal_address"); Debug.Assert(inst != 0); return inst; }

        public set_of_person get_people() { return (new set_of_personSerializer()).FromAttr(m_instance, "people"); }
        public set_of_person _people { get { return get_people(); } }
        public void put_people(IEnumerable<person> lst) { (new set_of_personSerializer()).ToSdaiAggr(lst, m_instance, "people"); }
        //public void put_people_untyped(IEnumerable lst) { (new set_of_personSerializer()).ToSdaiAggr(lst, m_instance, "people"); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "personal_address"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of physical_breakdown_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class physical_breakdown_context : breakdown_context
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of physical_breakdown_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public physical_breakdown_context(SdaiInstance instance) : base(instance) { }
        public physical_breakdown_context() : base(0) { }

        public static implicit operator physical_breakdown_context(SdaiInstance instance) => new physical_breakdown_context(instance);

        /// <summary>
        /// Create new instace of physical_breakdown_context and returns object of this class to interact with
        /// </summary>
        public static new physical_breakdown_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "physical_breakdown_context"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "physical_breakdown_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of physical_element_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class physical_element_usage : breakdown_element_usage
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of physical_element_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public physical_element_usage(SdaiInstance instance) : base(instance) { }
        public physical_element_usage() : base(0) { }

        public static implicit operator physical_element_usage(SdaiInstance instance) => new physical_element_usage(instance);

        /// <summary>
        /// Create new instace of physical_element_usage and returns object of this class to interact with
        /// </summary>
        public static new physical_element_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "physical_element_usage"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "physical_element_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_view
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_view : presentation_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_view
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_view(SdaiInstance instance) : base(instance) { }
        public presentation_view() : base(0) { }

        public static implicit operator presentation_view(SdaiInstance instance) => new presentation_view(instance);

        /// <summary>
        /// Create new instace of presentation_view and returns object of this class to interact with
        /// </summary>
        public static new presentation_view Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_view"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "presentation_view"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of picture_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class picture_representation : presentation_view
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of picture_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public picture_representation(SdaiInstance instance) : base(instance) { }
        public picture_representation() : base(0) { }

        public static implicit operator picture_representation(SdaiInstance instance) => new picture_representation(instance);

        /// <summary>
        /// Create new instace of picture_representation and returns object of this class to interact with
        /// </summary>
        public static new picture_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "picture_representation"); Debug.Assert(inst != 0); return inst; }

        public presentation_size get_size() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "size", ifcengine.sdaiINSTANCE, out inst); return new presentation_size (inst); }
        public presentation_size _size { get { return get_size(); } }

        protected override TextValue EntityName() { return "picture_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of placed_datum_target_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class placed_datum_target_feature : datum_target
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of placed_datum_target_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public placed_datum_target_feature(SdaiInstance instance) : base(instance) { }
        public placed_datum_target_feature() : base(0) { }

        public static implicit operator placed_datum_target_feature(SdaiInstance instance) => new placed_datum_target_feature(instance);

        /// <summary>
        /// Create new instace of placed_datum_target_feature and returns object of this class to interact with
        /// </summary>
        public static new placed_datum_target_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "placed_datum_target_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "placed_datum_target_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of placed_feature
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class placed_feature : shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of placed_feature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public placed_feature(SdaiInstance instance) : base(instance) { }
        public placed_feature() : base(0) { }

        public static implicit operator placed_feature(SdaiInstance instance) => new placed_feature(instance);

        /// <summary>
        /// Create new instace of placed_feature and returns object of this class to interact with
        /// </summary>
        public static new placed_feature Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "placed_feature"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "placed_feature"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of planar_extent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class planar_extent : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of planar_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public planar_extent(SdaiInstance instance) : base(instance) { }
        public planar_extent() : base(0) { }

        public static implicit operator planar_extent(SdaiInstance instance) => new planar_extent(instance);

        /// <summary>
        /// Create new instace of planar_extent and returns object of this class to interact with
        /// </summary>
        public static new planar_extent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "planar_extent"); Debug.Assert(inst != 0); return inst; }

        public double? get_size_in_x() { return get_double("size_in_x", ifcengine.sdaiREAL);}
        public double? _size_in_x { get { return get_size_in_x(); } }
        public void put_size_in_x(double value) { ifcengine.sdaiPutAttrBN(m_instance, "size_in_x", ifcengine.sdaiREAL, ref value); }
        public double? get_size_in_y() { return get_double("size_in_y", ifcengine.sdaiREAL);}
        public double? _size_in_y { get { return get_size_in_y(); } }
        public void put_size_in_y(double value) { ifcengine.sdaiPutAttrBN(m_instance, "size_in_y", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "planar_extent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of planar_box
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class planar_box : planar_extent
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of planar_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public planar_box(SdaiInstance instance) : base(instance) { }
        public planar_box() : base(0) { }

        public static implicit operator planar_box(SdaiInstance instance) => new planar_box(instance);

        /// <summary>
        /// Create new instace of planar_box and returns object of this class to interact with
        /// </summary>
        public static new planar_box Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "planar_box"); Debug.Assert(inst != 0); return inst; }


        public axis2_placement_get get_placement() { return new axis2_placement_get(m_instance, "placement", 0); }
        public axis2_placement_get _placement { get { return new axis2_placement_get(m_instance, "placement", 0); } }
        public axis2_placement_put put_placement() { return new axis2_placement_put(m_instance, "placement", 0); }

        protected override TextValue EntityName() { return "planar_box"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plane
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plane : elementary_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plane(SdaiInstance instance) : base(instance) { }
        public plane() : base(0) { }

        public static implicit operator plane(SdaiInstance instance) => new plane(instance);

        /// <summary>
        /// Create new instace of plane and returns object of this class to interact with
        /// </summary>
        public static new plane Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plane"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "plane"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plane_angle_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plane_angle_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plane_angle_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plane_angle_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public plane_angle_measure_with_unit() : base(0) { }

        public static implicit operator plane_angle_measure_with_unit(SdaiInstance instance) => new plane_angle_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of plane_angle_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new plane_angle_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plane_angle_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "plane_angle_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plane_angle_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plane_angle_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plane_angle_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plane_angle_unit(SdaiInstance instance) : base(instance) { }
        public plane_angle_unit() : base(0) { }

        public static implicit operator plane_angle_unit(SdaiInstance instance) => new plane_angle_unit(instance);

        /// <summary>
        /// Create new instace of plane_angle_unit and returns object of this class to interact with
        /// </summary>
        public static new plane_angle_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plane_angle_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "plane_angle_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of plus_minus_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class plus_minus_tolerance : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of plus_minus_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public plus_minus_tolerance(SdaiInstance instance) : base(instance) { }
        public plus_minus_tolerance() : base(0) { }

        public static implicit operator plus_minus_tolerance(SdaiInstance instance) => new plus_minus_tolerance(instance);

        /// <summary>
        /// Create new instace of plus_minus_tolerance and returns object of this class to interact with
        /// </summary>
        public static new plus_minus_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "plus_minus_tolerance"); Debug.Assert(inst != 0); return inst; }


        public tolerance_method_definition_get get_range() { return new tolerance_method_definition_get(m_instance, "range", 0); }
        public tolerance_method_definition_get _range { get { return new tolerance_method_definition_get(m_instance, "range", 0); } }
        public tolerance_method_definition_put put_range() { return new tolerance_method_definition_put(m_instance, "range", 0); }

        public dimensional_characteristic_get get_toleranced_dimension() { return new dimensional_characteristic_get(m_instance, "toleranced_dimension", 0); }
        public dimensional_characteristic_get _toleranced_dimension { get { return new dimensional_characteristic_get(m_instance, "toleranced_dimension", 0); } }
        public dimensional_characteristic_put put_toleranced_dimension() { return new dimensional_characteristic_put(m_instance, "toleranced_dimension", 0); }

        protected override TextValue EntityName() { return "plus_minus_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ply_laminate_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ply_laminate_definition : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ply_laminate_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ply_laminate_definition(SdaiInstance instance) : base(instance) { }
        public ply_laminate_definition() : base(0) { }

        public static implicit operator ply_laminate_definition(SdaiInstance instance) => new ply_laminate_definition(instance);

        /// <summary>
        /// Create new instace of ply_laminate_definition and returns object of this class to interact with
        /// </summary>
        public static new ply_laminate_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ply_laminate_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "ply_laminate_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ply_laminate_sequence_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ply_laminate_sequence_definition : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ply_laminate_sequence_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ply_laminate_sequence_definition(SdaiInstance instance) : base(instance) { }
        public ply_laminate_sequence_definition() : base(0) { }

        public static implicit operator ply_laminate_sequence_definition(SdaiInstance instance) => new ply_laminate_sequence_definition(instance);

        /// <summary>
        /// Create new instace of ply_laminate_sequence_definition and returns object of this class to interact with
        /// </summary>
        public static new ply_laminate_sequence_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ply_laminate_sequence_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "ply_laminate_sequence_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ply_laminate_table
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ply_laminate_table : part_laminate_table
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ply_laminate_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ply_laminate_table(SdaiInstance instance) : base(instance) { }
        public ply_laminate_table() : base(0) { }

        public static implicit operator ply_laminate_table(SdaiInstance instance) => new ply_laminate_table(instance);

        /// <summary>
        /// Create new instace of ply_laminate_table and returns object of this class to interact with
        /// </summary>
        public static new ply_laminate_table Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ply_laminate_table"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "ply_laminate_table"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_and_vector
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_and_vector : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_and_vector
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_and_vector(SdaiInstance instance) : base(instance) { }
        public point_and_vector() : base(0) { }

        public static implicit operator point_and_vector(SdaiInstance instance) => new point_and_vector(instance);

        /// <summary>
        /// Create new instace of point_and_vector and returns object of this class to interact with
        /// </summary>
        public static new point_and_vector Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_and_vector"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "point_and_vector"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_curve : point
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_curve(SdaiInstance instance) : base(instance) { }
        public point_on_curve() : base(0) { }

        public static implicit operator point_on_curve(SdaiInstance instance) => new point_on_curve(instance);

        /// <summary>
        /// Create new instace of point_on_curve and returns object of this class to interact with
        /// </summary>
        public static new point_on_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_curve"); Debug.Assert(inst != 0); return inst; }

        public curve get_basis_curve() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve (inst); }
        public curve _basis_curve { get { return get_basis_curve(); } }
        public void put_basis_curve(curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
        public double? get_point_parameter() { return get_double("point_parameter", ifcengine.sdaiREAL);}
        public double? _point_parameter { get { return get_point_parameter(); } }
        public void put_point_parameter(double value) { ifcengine.sdaiPutAttrBN(m_instance, "point_parameter", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "point_on_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_on_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_on_surface : point
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_on_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_on_surface(SdaiInstance instance) : base(instance) { }
        public point_on_surface() : base(0) { }

        public static implicit operator point_on_surface(SdaiInstance instance) => new point_on_surface(instance);

        /// <summary>
        /// Create new instace of point_on_surface and returns object of this class to interact with
        /// </summary>
        public static new point_on_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_on_surface"); Debug.Assert(inst != 0); return inst; }

        public surface get_basis_surface() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface (inst); }
        public surface _basis_surface { get { return get_basis_surface(); } }
        public void put_basis_surface(surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
        public double? get_point_parameter_u() { return get_double("point_parameter_u", ifcengine.sdaiREAL);}
        public double? _point_parameter_u { get { return get_point_parameter_u(); } }
        public void put_point_parameter_u(double value) { ifcengine.sdaiPutAttrBN(m_instance, "point_parameter_u", ifcengine.sdaiREAL, ref value); }
        public double? get_point_parameter_v() { return get_double("point_parameter_v", ifcengine.sdaiREAL);}
        public double? _point_parameter_v { get { return get_point_parameter_v(); } }
        public void put_point_parameter_v(double value) { ifcengine.sdaiPutAttrBN(m_instance, "point_parameter_v", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "point_on_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_path
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_path : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_path
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_path(SdaiInstance instance) : base(instance) { }
        public point_path() : base(0) { }

        public static implicit operator point_path(SdaiInstance instance) => new point_path(instance);

        /// <summary>
        /// Create new instace of point_path and returns object of this class to interact with
        /// </summary>
        public static new point_path Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_path"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "point_path"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_replica : point
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_replica(SdaiInstance instance) : base(instance) { }
        public point_replica() : base(0) { }

        public static implicit operator point_replica(SdaiInstance instance) => new point_replica(instance);

        /// <summary>
        /// Create new instace of point_replica and returns object of this class to interact with
        /// </summary>
        public static new point_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_replica"); Debug.Assert(inst != 0); return inst; }

        public point get_parent_pt() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_pt", ifcengine.sdaiINSTANCE, out inst); return new point (inst); }
        public point _parent_pt { get { return get_parent_pt(); } }
        public void put_parent_pt(point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "parent_pt", ifcengine.sdaiINSTANCE, i); }
        public cartesian_transformation_operator get_transformation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator (inst); }
        public cartesian_transformation_operator _transformation { get { return get_transformation(); } }
        public void put_transformation(cartesian_transformation_operator inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "point_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of point_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class point_style : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of point_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public point_style(SdaiInstance instance) : base(instance) { }
        public point_style() : base(0) { }

        public static implicit operator point_style(SdaiInstance instance) => new point_style(instance);

        /// <summary>
        /// Create new instace of point_style and returns object of this class to interact with
        /// </summary>
        public static new point_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "point_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        public marker_select_get get_marker() { return new marker_select_get(m_instance, "marker", 0); }
        public marker_select_get _marker { get { return new marker_select_get(m_instance, "marker", 0); } }
        public marker_select_put put_marker() { return new marker_select_put(m_instance, "marker", 0); }

        public size_select_get get_marker_size() { return new size_select_get(m_instance, "marker_size", 0); }
        public size_select_get _marker_size { get { return new size_select_get(m_instance, "marker_size", 0); } }
        public size_select_put put_marker_size() { return new size_select_put(m_instance, "marker_size", 0); }
        public colour get_marker_colour() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "marker_colour", ifcengine.sdaiINSTANCE, out inst); return new colour (inst); }
        public colour _marker_colour { get { return get_marker_colour(); } }
        public void put_marker_colour(colour inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "marker_colour", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "point_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of polar_complex_number_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class polar_complex_number_literal : generic_literal
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of polar_complex_number_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public polar_complex_number_literal(SdaiInstance instance) : base(instance) { }
        public polar_complex_number_literal() : base(0) { }

        public static implicit operator polar_complex_number_literal(SdaiInstance instance) => new polar_complex_number_literal(instance);

        /// <summary>
        /// Create new instace of polar_complex_number_literal and returns object of this class to interact with
        /// </summary>
        public static new polar_complex_number_literal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "polar_complex_number_literal"); Debug.Assert(inst != 0); return inst; }

        public double? get_radius() { return get_double("radius", ifcengine.sdaiREAL);}
        public double? _radius { get { return get_radius(); } }
        public void put_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref value); }
        public double? get_angle() { return get_double("angle", ifcengine.sdaiREAL);}
        public double? _angle { get { return get_angle(); } }
        public void put_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "angle", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "polar_complex_number_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of poly_loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class poly_loop : loop
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of poly_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public poly_loop(SdaiInstance instance) : base(instance) { }
        public poly_loop() : base(0) { }

        public static implicit operator poly_loop(SdaiInstance instance) => new poly_loop(instance);

        /// <summary>
        /// Create new instace of poly_loop and returns object of this class to interact with
        /// </summary>
        public static new poly_loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "poly_loop"); Debug.Assert(inst != 0); return inst; }

        public list_of_cartesian_point get_polygon() { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "polygon"); }
        public list_of_cartesian_point _polygon { get { return get_polygon(); } }
        public void put_polygon(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "polygon"); }
        //public void put_polygon_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "polygon"); }

        protected override TextValue EntityName() { return "poly_loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of polyline
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class polyline : bounded_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of polyline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public polyline(SdaiInstance instance) : base(instance) { }
        public polyline() : base(0) { }

        public static implicit operator polyline(SdaiInstance instance) => new polyline(instance);

        /// <summary>
        /// Create new instace of polyline and returns object of this class to interact with
        /// </summary>
        public static new polyline Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "polyline"); Debug.Assert(inst != 0); return inst; }

        public list_of_cartesian_point get_points() { return (new list_of_cartesian_pointSerializer()).FromAttr(m_instance, "points"); }
        public list_of_cartesian_point _points { get { return get_points(); } }
        public void put_points(IEnumerable<cartesian_point> lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "points"); }
        //public void put_points_untyped(IEnumerable lst) { (new list_of_cartesian_pointSerializer()).ToSdaiAggr(lst, m_instance, "points"); }

        protected override TextValue EntityName() { return "polyline"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of position_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class position_tolerance : geometric_tolerance
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of position_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public position_tolerance(SdaiInstance instance) : base(instance) { }
        public position_tolerance() : base(0) { }

        public static implicit operator position_tolerance(SdaiInstance instance) => new position_tolerance(instance);

        /// <summary>
        /// Create new instace of position_tolerance and returns object of this class to interact with
        /// </summary>
        public static new position_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "position_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "position_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of positioned_sketch
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class positioned_sketch : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of positioned_sketch
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public positioned_sketch(SdaiInstance instance) : base(instance) { }
        public positioned_sketch() : base(0) { }

        public static implicit operator positioned_sketch(SdaiInstance instance) => new positioned_sketch(instance);

        /// <summary>
        /// Create new instace of positioned_sketch and returns object of this class to interact with
        /// </summary>
        public static new positioned_sketch Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "positioned_sketch"); Debug.Assert(inst != 0); return inst; }


        public sketch_basis_select_get get_sketch_basis() { return new sketch_basis_select_get(m_instance, "sketch_basis", 0); }
        public sketch_basis_select_get _sketch_basis { get { return new sketch_basis_select_get(m_instance, "sketch_basis", 0); } }
        public sketch_basis_select_put put_sketch_basis() { return new sketch_basis_select_put(m_instance, "sketch_basis", 0); }
        public set_of_auxiliary_geometric_representation_item get_auxiliary_elements() { return (new set_of_auxiliary_geometric_representation_itemSerializer()).FromAttr(m_instance, "auxiliary_elements"); }
        public set_of_auxiliary_geometric_representation_item _auxiliary_elements { get { return get_auxiliary_elements(); } }
        public void put_auxiliary_elements(IEnumerable<auxiliary_geometric_representation_item> lst) { (new set_of_auxiliary_geometric_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "auxiliary_elements"); }
        //public void put_auxiliary_elements_untyped(IEnumerable lst) { (new set_of_auxiliary_geometric_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "auxiliary_elements"); }

        protected override TextValue EntityName() { return "positioned_sketch"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of power_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class power_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of power_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public power_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public power_measure_with_unit() : base(0) { }

        public static implicit operator power_measure_with_unit(SdaiInstance instance) => new power_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of power_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new power_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "power_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "power_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of power_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class power_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of power_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public power_unit(SdaiInstance instance) : base(instance) { }
        public power_unit() : base(0) { }

        public static implicit operator power_unit(SdaiInstance instance) => new power_unit(instance);

        /// <summary>
        /// Create new instace of power_unit and returns object of this class to interact with
        /// </summary>
        public static new power_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "power_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "power_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_symbol : pre_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_symbol() : base(0) { }

        public static implicit operator pre_defined_symbol(SdaiInstance instance) => new pre_defined_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_dimension_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_dimension_symbol : pre_defined_symbol
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_dimension_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_dimension_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_dimension_symbol() : base(0) { }

        public static implicit operator pre_defined_dimension_symbol(SdaiInstance instance) => new pre_defined_dimension_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_dimension_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_dimension_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_dimension_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_dimension_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_geometrical_tolerance_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_geometrical_tolerance_symbol : pre_defined_symbol
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_geometrical_tolerance_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_geometrical_tolerance_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_geometrical_tolerance_symbol() : base(0) { }

        public static implicit operator pre_defined_geometrical_tolerance_symbol(SdaiInstance instance) => new pre_defined_geometrical_tolerance_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_geometrical_tolerance_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_geometrical_tolerance_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_geometrical_tolerance_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_geometrical_tolerance_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_marker
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_marker : pre_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_marker
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_marker(SdaiInstance instance) : base(instance) { }
        public pre_defined_marker() : base(0) { }

        public static implicit operator pre_defined_marker(SdaiInstance instance) => new pre_defined_marker(instance);

        /// <summary>
        /// Create new instace of pre_defined_marker and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_marker Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_marker"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_marker"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_point_marker_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_point_marker_symbol : pre_defined_marker
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_point_marker_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_point_marker_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_point_marker_symbol() : base(0) { }

        public static implicit operator pre_defined_point_marker_symbol(SdaiInstance instance) => new pre_defined_point_marker_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_point_marker_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_point_marker_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_point_marker_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_point_marker_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_surface_condition_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_surface_condition_symbol : pre_defined_symbol
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_surface_condition_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_surface_condition_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_surface_condition_symbol() : base(0) { }

        public static implicit operator pre_defined_surface_condition_symbol(SdaiInstance instance) => new pre_defined_surface_condition_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_surface_condition_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_surface_condition_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_surface_condition_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_surface_condition_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_surface_side_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_surface_side_style : pre_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_surface_side_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_surface_side_style(SdaiInstance instance) : base(instance) { }
        public pre_defined_surface_side_style() : base(0) { }

        public static implicit operator pre_defined_surface_side_style(SdaiInstance instance) => new pre_defined_surface_side_style(instance);

        /// <summary>
        /// Create new instace of pre_defined_surface_side_style and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_surface_side_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_surface_side_style"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_surface_side_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_terminator_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_terminator_symbol : pre_defined_symbol
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_terminator_symbol(SdaiInstance instance) : base(instance) { }
        public pre_defined_terminator_symbol() : base(0) { }

        public static implicit operator pre_defined_terminator_symbol(SdaiInstance instance) => new pre_defined_terminator_symbol(instance);

        /// <summary>
        /// Create new instace of pre_defined_terminator_symbol and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_terminator_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_terminator_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_terminator_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pre_defined_tile
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pre_defined_tile : pre_defined_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pre_defined_tile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pre_defined_tile(SdaiInstance instance) : base(instance) { }
        public pre_defined_tile() : base(0) { }

        public static implicit operator pre_defined_tile(SdaiInstance instance) => new pre_defined_tile(instance);

        /// <summary>
        /// Create new instace of pre_defined_tile and returns object of this class to interact with
        /// </summary>
        public static new pre_defined_tile Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pre_defined_tile"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pre_defined_tile"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of precision_qualifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class precision_qualifier : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of precision_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public precision_qualifier(SdaiInstance instance) : base(instance) { }
        public precision_qualifier() : base(0) { }

        public static implicit operator precision_qualifier(SdaiInstance instance) => new precision_qualifier(instance);

        /// <summary>
        /// Create new instace of precision_qualifier and returns object of this class to interact with
        /// </summary>
        public static new precision_qualifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "precision_qualifier"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_precision_value() { return get_IntValue("precision_value", ifcengine.sdaiINTEGER);}
        public IntValue? _precision_value { get { return get_precision_value(); } }
        public void put_precision_value(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "precision_value", ifcengine.sdaiINTEGER, ref value); }

        protected override TextValue EntityName() { return "precision_qualifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of predefined_picture_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class predefined_picture_representation_item : picture_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of predefined_picture_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public predefined_picture_representation_item(SdaiInstance instance) : base(instance) { }
        public predefined_picture_representation_item() : base(0) { }

        public static implicit operator predefined_picture_representation_item(SdaiInstance instance) => new predefined_picture_representation_item(instance);

        /// <summary>
        /// Create new instace of predefined_picture_representation_item and returns object of this class to interact with
        /// </summary>
        public static new predefined_picture_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "predefined_picture_representation_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "predefined_picture_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_layer_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_layer_assignment : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_layer_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_layer_assignment(SdaiInstance instance) : base(instance) { }
        public presentation_layer_assignment() : base(0) { }

        public static implicit operator presentation_layer_assignment(SdaiInstance instance) => new presentation_layer_assignment(instance);

        /// <summary>
        /// Create new instace of presentation_layer_assignment and returns object of this class to interact with
        /// </summary>
        public static new presentation_layer_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_layer_assignment"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public set_of_layered_item get_assigned_items() { return (new set_of_layered_itemSerializer()).FromAttr(m_instance, "assigned_items"); }
        public set_of_layered_item _assigned_items { get { return get_assigned_items(); } }
        public void put_assigned_items(IEnumerable<layered_item> lst) { (new set_of_layered_itemSerializer()).ToSdaiAggr(lst, m_instance, "assigned_items"); }
        //public void put_assigned_items_untyped(IEnumerable lst) { (new set_of_layered_itemSerializer()).ToSdaiAggr(lst, m_instance, "assigned_items"); }

        protected override TextValue EntityName() { return "presentation_layer_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_size
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_size : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_size
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_size(SdaiInstance instance) : base(instance) { }
        public presentation_size() : base(0) { }

        public static implicit operator presentation_size(SdaiInstance instance) => new presentation_size(instance);

        /// <summary>
        /// Create new instace of presentation_size and returns object of this class to interact with
        /// </summary>
        public static new presentation_size Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_size"); Debug.Assert(inst != 0); return inst; }


        public presentation_size_assignment_select_get get_unit() { return new presentation_size_assignment_select_get(m_instance, "unit", 0); }
        public presentation_size_assignment_select_get _unit { get { return new presentation_size_assignment_select_get(m_instance, "unit", 0); } }
        public presentation_size_assignment_select_put put_unit() { return new presentation_size_assignment_select_put(m_instance, "unit", 0); }
        public planar_box get_size() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "size", ifcengine.sdaiINSTANCE, out inst); return new planar_box (inst); }
        public planar_box _size { get { return get_size(); } }
        public void put_size(planar_box inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "size", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "presentation_size"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_style_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_style_assignment : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_style_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_style_assignment(SdaiInstance instance) : base(instance) { }
        public presentation_style_assignment() : base(0) { }

        public static implicit operator presentation_style_assignment(SdaiInstance instance) => new presentation_style_assignment(instance);

        /// <summary>
        /// Create new instace of presentation_style_assignment and returns object of this class to interact with
        /// </summary>
        public static new presentation_style_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_style_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_presentation_style_select get_styles() { return (new set_of_presentation_style_selectSerializer()).FromAttr(m_instance, "styles"); }
        public set_of_presentation_style_select _styles { get { return get_styles(); } }
        public void put_styles(IEnumerable<presentation_style_select> lst) { (new set_of_presentation_style_selectSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }
        //public void put_styles_untyped(IEnumerable lst) { (new set_of_presentation_style_selectSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }

        protected override TextValue EntityName() { return "presentation_style_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presentation_style_by_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presentation_style_by_context : presentation_style_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presentation_style_by_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presentation_style_by_context(SdaiInstance instance) : base(instance) { }
        public presentation_style_by_context() : base(0) { }

        public static implicit operator presentation_style_by_context(SdaiInstance instance) => new presentation_style_by_context(instance);

        /// <summary>
        /// Create new instace of presentation_style_by_context and returns object of this class to interact with
        /// </summary>
        public static new presentation_style_by_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presentation_style_by_context"); Debug.Assert(inst != 0); return inst; }


        public style_context_select_get get_style_context() { return new style_context_select_get(m_instance, "style_context", 0); }
        public style_context_select_get _style_context { get { return new style_context_select_get(m_instance, "style_context", 0); } }
        public style_context_select_put put_style_context() { return new style_context_select_put(m_instance, "style_context", 0); }

        protected override TextValue EntityName() { return "presentation_style_by_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of presented_item_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class presented_item_representation : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of presented_item_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public presented_item_representation(SdaiInstance instance) : base(instance) { }
        public presented_item_representation() : base(0) { }

        public static implicit operator presented_item_representation(SdaiInstance instance) => new presented_item_representation(instance);

        /// <summary>
        /// Create new instace of presented_item_representation and returns object of this class to interact with
        /// </summary>
        public static new presented_item_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "presented_item_representation"); Debug.Assert(inst != 0); return inst; }


        public presentation_representation_select_get get_presentation() { return new presentation_representation_select_get(m_instance, "presentation", 0); }
        public presentation_representation_select_get _presentation { get { return new presentation_representation_select_get(m_instance, "presentation", 0); } }
        public presentation_representation_select_put put_presentation() { return new presentation_representation_select_put(m_instance, "presentation", 0); }
        public presented_item get_item() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "item", ifcengine.sdaiINSTANCE, out inst); return new presented_item (inst); }
        public presented_item _item { get { return get_item(); } }
        public void put_item(presented_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "item", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "presented_item_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pressure_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pressure_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pressure_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pressure_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public pressure_measure_with_unit() : base(0) { }

        public static implicit operator pressure_measure_with_unit(SdaiInstance instance) => new pressure_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of pressure_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new pressure_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pressure_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pressure_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of pressure_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class pressure_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of pressure_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public pressure_unit(SdaiInstance instance) : base(instance) { }
        public pressure_unit() : base(0) { }

        public static implicit operator pressure_unit(SdaiInstance instance) => new pressure_unit(instance);

        /// <summary>
        /// Create new instace of pressure_unit and returns object of this class to interact with
        /// </summary>
        public static new pressure_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "pressure_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "pressure_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of procedural_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class procedural_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of procedural_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public procedural_representation(SdaiInstance instance) : base(instance) { }
        public procedural_representation() : base(0) { }

        public static implicit operator procedural_representation(SdaiInstance instance) => new procedural_representation(instance);

        /// <summary>
        /// Create new instace of procedural_representation and returns object of this class to interact with
        /// </summary>
        public static new procedural_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "procedural_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "procedural_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of procedural_representation_sequence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class procedural_representation_sequence : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of procedural_representation_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public procedural_representation_sequence(SdaiInstance instance) : base(instance) { }
        public procedural_representation_sequence() : base(0) { }

        public static implicit operator procedural_representation_sequence(SdaiInstance instance) => new procedural_representation_sequence(instance);

        /// <summary>
        /// Create new instace of procedural_representation_sequence and returns object of this class to interact with
        /// </summary>
        public static new procedural_representation_sequence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "procedural_representation_sequence"); Debug.Assert(inst != 0); return inst; }

        public list_of_representation_item get_elements() { return (new list_of_representation_itemSerializer()).FromAttr(m_instance, "elements"); }
        public list_of_representation_item _elements { get { return get_elements(); } }
        public void put_elements(IEnumerable<representation_item> lst) { (new list_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        //public void put_elements_untyped(IEnumerable lst) { (new list_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        public set_of_representation_item get_suppressed_items() { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "suppressed_items"); }
        public set_of_representation_item _suppressed_items { get { return get_suppressed_items(); } }
        public void put_suppressed_items(IEnumerable<representation_item> lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "suppressed_items"); }
        //public void put_suppressed_items_untyped(IEnumerable lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "suppressed_items"); }
        public TextValue get_rationale() { return get_string("rationale", ifcengine.sdaiSTRING); }
        public TextValue _rationale { get { return get_rationale(); } }
        public void put_rationale(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "rationale", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "procedural_representation_sequence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of procedural_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class procedural_shape_representation : procedural_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of procedural_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public procedural_shape_representation(SdaiInstance instance) : base(instance) { }
        public procedural_shape_representation() : base(0) { }

        public static implicit operator procedural_shape_representation(SdaiInstance instance) => new procedural_shape_representation(instance);

        /// <summary>
        /// Create new instace of procedural_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new procedural_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "procedural_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "procedural_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of procedural_shape_representation_sequence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class procedural_shape_representation_sequence : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of procedural_shape_representation_sequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public procedural_shape_representation_sequence(SdaiInstance instance) : base(instance) { }
        public procedural_shape_representation_sequence() : base(0) { }

        public static implicit operator procedural_shape_representation_sequence(SdaiInstance instance) => new procedural_shape_representation_sequence(instance);

        /// <summary>
        /// Create new instace of procedural_shape_representation_sequence and returns object of this class to interact with
        /// </summary>
        public static new procedural_shape_representation_sequence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "procedural_shape_representation_sequence"); Debug.Assert(inst != 0); return inst; }

        public list_of_representation_item get_elements() { return (new list_of_representation_itemSerializer()).FromAttr(m_instance, "elements"); }
        public list_of_representation_item _elements { get { return get_elements(); } }
        public void put_elements(IEnumerable<representation_item> lst) { (new list_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        //public void put_elements_untyped(IEnumerable lst) { (new list_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "elements"); }
        public set_of_representation_item get_suppressed_items() { return (new set_of_representation_itemSerializer()).FromAttr(m_instance, "suppressed_items"); }
        public set_of_representation_item _suppressed_items { get { return get_suppressed_items(); } }
        public void put_suppressed_items(IEnumerable<representation_item> lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "suppressed_items"); }
        //public void put_suppressed_items_untyped(IEnumerable lst) { (new set_of_representation_itemSerializer()).ToSdaiAggr(lst, m_instance, "suppressed_items"); }
        public TextValue get_rationale() { return get_string("rationale", ifcengine.sdaiSTRING); }
        public TextValue _rationale { get { return get_rationale(); } }
        public void put_rationale(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "rationale", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "procedural_shape_representation_sequence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product(SdaiInstance instance) : base(instance) { }
        public product() : base(0) { }

        public static implicit operator product(SdaiInstance instance) => new product(instance);

        /// <summary>
        /// Create new instace of product and returns object of this class to interact with
        /// </summary>
        public static new product Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public set_of_product_context get_frame_of_reference() { return (new set_of_product_contextSerializer()).FromAttr(m_instance, "frame_of_reference"); }
        public set_of_product_context _frame_of_reference { get { return get_frame_of_reference(); } }
        public void put_frame_of_reference(IEnumerable<product_context> lst) { (new set_of_product_contextSerializer()).ToSdaiAggr(lst, m_instance, "frame_of_reference"); }
        //public void put_frame_of_reference_untyped(IEnumerable lst) { (new set_of_product_contextSerializer()).ToSdaiAggr(lst, m_instance, "frame_of_reference"); }

        protected override TextValue EntityName() { return "product"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_category
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_category : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_category(SdaiInstance instance) : base(instance) { }
        public product_category() : base(0) { }

        public static implicit operator product_category(SdaiInstance instance) => new product_category(instance);

        /// <summary>
        /// Create new instace of product_category and returns object of this class to interact with
        /// </summary>
        public static new product_category Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_category"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "product_category"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept(SdaiInstance instance) : base(instance) { }
        public product_concept() : base(0) { }

        public static implicit operator product_concept(SdaiInstance instance) => new product_concept(instance);

        /// <summary>
        /// Create new instace of product_concept and returns object of this class to interact with
        /// </summary>
        public static new product_concept Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product_concept_context get_market_context() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "market_context", ifcengine.sdaiINSTANCE, out inst); return new product_concept_context (inst); }
        public product_concept_context _market_context { get { return get_market_context(); } }
        public void put_market_context(product_concept_context inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "market_context", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "product_concept"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_class
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_class : product_concept
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_class
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_class(SdaiInstance instance) : base(instance) { }
        public product_class() : base(0) { }

        public static implicit operator product_class(SdaiInstance instance) => new product_class(instance);

        /// <summary>
        /// Create new instace of product_class and returns object of this class to interact with
        /// </summary>
        public static new product_class Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_class"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "product_class"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_context
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_context : application_context_element
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_context
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_context(SdaiInstance instance) : base(instance) { }
        public product_concept_context() : base(0) { }

        public static implicit operator product_concept_context(SdaiInstance instance) => new product_concept_context(instance);

        /// <summary>
        /// Create new instace of product_concept_context and returns object of this class to interact with
        /// </summary>
        public static new product_concept_context Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_context"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_market_segment_type() { return get_string("market_segment_type", ifcengine.sdaiSTRING); }
        public TextValue _market_segment_type { get { return get_market_segment_type(); } }
        public void put_market_segment_type(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "market_segment_type", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "product_concept_context"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_feature_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_feature_association : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_feature_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_feature_association(SdaiInstance instance) : base(instance) { }
        public product_concept_feature_association() : base(0) { }

        public static implicit operator product_concept_feature_association(SdaiInstance instance) => new product_concept_feature_association(instance);

        /// <summary>
        /// Create new instace of product_concept_feature_association and returns object of this class to interact with
        /// </summary>
        public static new product_concept_feature_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_feature_association"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product_concept get_concept() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "concept", ifcengine.sdaiINSTANCE, out inst); return new product_concept (inst); }
        public product_concept _concept { get { return get_concept(); } }
        public void put_concept(product_concept inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "concept", ifcengine.sdaiINSTANCE, i); }
        public product_concept_feature get_feature() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "feature", ifcengine.sdaiINSTANCE, out inst); return new product_concept_feature (inst); }
        public product_concept_feature _feature { get { return get_feature(); } }
        public void put_feature(product_concept_feature inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "feature", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "product_concept_feature_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_feature_category_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_feature_category_usage : group_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_feature_category_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_feature_category_usage(SdaiInstance instance) : base(instance) { }
        public product_concept_feature_category_usage() : base(0) { }

        public static implicit operator product_concept_feature_category_usage(SdaiInstance instance) => new product_concept_feature_category_usage(instance);

        /// <summary>
        /// Create new instace of product_concept_feature_category_usage and returns object of this class to interact with
        /// </summary>
        public static new product_concept_feature_category_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_feature_category_usage"); Debug.Assert(inst != 0); return inst; }

        public set_of_category_usage_item get_items() { return (new set_of_category_usage_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_category_usage_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<category_usage_item> lst) { (new set_of_category_usage_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_category_usage_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "product_concept_feature_category_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_concept_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_concept_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_concept_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_concept_relationship(SdaiInstance instance) : base(instance) { }
        public product_concept_relationship() : base(0) { }

        public static implicit operator product_concept_relationship(SdaiInstance instance) => new product_concept_relationship(instance);

        /// <summary>
        /// Create new instace of product_concept_relationship and returns object of this class to interact with
        /// </summary>
        public static new product_concept_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_concept_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product_concept get_relating_product_concept() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_product_concept", ifcengine.sdaiINSTANCE, out inst); return new product_concept (inst); }
        public product_concept _relating_product_concept { get { return get_relating_product_concept(); } }
        public void put_relating_product_concept(product_concept inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_product_concept", ifcengine.sdaiINSTANCE, i); }
        public product_concept get_related_product_concept() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_product_concept", ifcengine.sdaiINSTANCE, out inst); return new product_concept (inst); }
        public product_concept _related_product_concept { get { return get_related_product_concept(); } }
        public void put_related_product_concept(product_concept inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_product_concept", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "product_concept_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_context_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_context_association : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_context_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_context_association(SdaiInstance instance) : base(instance) { }
        public product_definition_context_association() : base(0) { }

        public static implicit operator product_definition_context_association(SdaiInstance instance) => new product_definition_context_association(instance);

        /// <summary>
        /// Create new instace of product_definition_context_association and returns object of this class to interact with
        /// </summary>
        public static new product_definition_context_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_context_association"); Debug.Assert(inst != 0); return inst; }

        public product_definition get_definition() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "definition", ifcengine.sdaiINSTANCE, out inst); return new product_definition (inst); }
        public product_definition _definition { get { return get_definition(); } }
        public void put_definition(product_definition inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "definition", ifcengine.sdaiINSTANCE, i); }
        public product_definition_context get_frame_of_reference() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, out inst); return new product_definition_context (inst); }
        public product_definition_context _frame_of_reference { get { return get_frame_of_reference(); } }
        public void put_frame_of_reference(product_definition_context inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "frame_of_reference", ifcengine.sdaiINSTANCE, i); }
        public product_definition_context_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new product_definition_context_role (inst); }
        public product_definition_context_role _role { get { return get_role(); } }
        public void put_role(product_definition_context_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "product_definition_context_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_context_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_context_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_context_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_context_role(SdaiInstance instance) : base(instance) { }
        public product_definition_context_role() : base(0) { }

        public static implicit operator product_definition_context_role(SdaiInstance instance) => new product_definition_context_role(instance);

        /// <summary>
        /// Create new instace of product_definition_context_role and returns object of this class to interact with
        /// </summary>
        public static new product_definition_context_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_context_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "product_definition_context_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_element_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_element_relationship : group
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_element_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_element_relationship(SdaiInstance instance) : base(instance) { }
        public product_definition_element_relationship() : base(0) { }

        public static implicit operator product_definition_element_relationship(SdaiInstance instance) => new product_definition_element_relationship(instance);

        /// <summary>
        /// Create new instace of product_definition_element_relationship and returns object of this class to interact with
        /// </summary>
        public static new product_definition_element_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_element_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "product_definition_element_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_formation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_formation : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_formation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_formation(SdaiInstance instance) : base(instance) { }
        public product_definition_formation() : base(0) { }

        public static implicit operator product_definition_formation(SdaiInstance instance) => new product_definition_formation(instance);

        /// <summary>
        /// Create new instace of product_definition_formation and returns object of this class to interact with
        /// </summary>
        public static new product_definition_formation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_formation"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product get_of_product() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "of_product", ifcengine.sdaiINSTANCE, out inst); return new product (inst); }
        public product _of_product { get { return get_of_product(); } }
        public void put_of_product(product inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "of_product", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "product_definition_formation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_formation_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_formation_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_formation_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_formation_relationship(SdaiInstance instance) : base(instance) { }
        public product_definition_formation_relationship() : base(0) { }

        public static implicit operator product_definition_formation_relationship(SdaiInstance instance) => new product_definition_formation_relationship(instance);

        /// <summary>
        /// Create new instace of product_definition_formation_relationship and returns object of this class to interact with
        /// </summary>
        public static new product_definition_formation_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_formation_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product_definition_formation get_relating_product_definition_formation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_product_definition_formation", ifcengine.sdaiINSTANCE, out inst); return new product_definition_formation (inst); }
        public product_definition_formation _relating_product_definition_formation { get { return get_relating_product_definition_formation(); } }
        public void put_relating_product_definition_formation(product_definition_formation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_product_definition_formation", ifcengine.sdaiINSTANCE, i); }
        public product_definition_formation get_related_product_definition_formation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_product_definition_formation", ifcengine.sdaiINSTANCE, out inst); return new product_definition_formation (inst); }
        public product_definition_formation _related_product_definition_formation { get { return get_related_product_definition_formation(); } }
        public void put_related_product_definition_formation(product_definition_formation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_product_definition_formation", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "product_definition_formation_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_formation_with_specified_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_formation_with_specified_source : product_definition_formation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_formation_with_specified_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_formation_with_specified_source(SdaiInstance instance) : base(instance) { }
        public product_definition_formation_with_specified_source() : base(0) { }

        public static implicit operator product_definition_formation_with_specified_source(SdaiInstance instance) => new product_definition_formation_with_specified_source(instance);

        /// <summary>
        /// Create new instace of product_definition_formation_with_specified_source and returns object of this class to interact with
        /// </summary>
        public static new product_definition_formation_with_specified_source Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_formation_with_specified_source"); Debug.Assert(inst != 0); return inst; }

        public source? get_make_or_buy() { var str = get_string("make_or_buy", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.source_); return EnumValue<source>.FromIndex(ind); }
        public source? _make_or_buy { get { return get_make_or_buy(); } }
        public void put_make_or_buy(source value) { var str = EnumString<source>.FromValue(value, EnumNames.source_); ifcengine.sdaiPutAttrBN(m_instance, "make_or_buy", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "product_definition_formation_with_specified_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_group_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_group_assignment : group_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_group_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_group_assignment(SdaiInstance instance) : base(instance) { }
        public product_definition_group_assignment() : base(0) { }

        public static implicit operator product_definition_group_assignment(SdaiInstance instance) => new product_definition_group_assignment(instance);

        /// <summary>
        /// Create new instace of product_definition_group_assignment and returns object of this class to interact with
        /// </summary>
        public static new product_definition_group_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_group_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_product_definition_or_product_definition_relationship get_items() { return (new set_of_product_definition_or_product_definition_relationshipSerializer()).FromAttr(m_instance, "items"); }
        public set_of_product_definition_or_product_definition_relationship _items { get { return get_items(); } }
        public void put_items(IEnumerable<product_definition_or_product_definition_relationship> lst) { (new set_of_product_definition_or_product_definition_relationshipSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_product_definition_or_product_definition_relationshipSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "product_definition_group_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_occurrence_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_occurrence_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_occurrence_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_occurrence_relationship(SdaiInstance instance) : base(instance) { }
        public product_definition_occurrence_relationship() : base(0) { }

        public static implicit operator product_definition_occurrence_relationship(SdaiInstance instance) => new product_definition_occurrence_relationship(instance);

        /// <summary>
        /// Create new instace of product_definition_occurrence_relationship and returns object of this class to interact with
        /// </summary>
        public static new product_definition_occurrence_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_occurrence_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product_definition get_occurrence() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "occurrence", ifcengine.sdaiINSTANCE, out inst); return new product_definition (inst); }
        public product_definition _occurrence { get { return get_occurrence(); } }
        public void put_occurrence(product_definition inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "occurrence", ifcengine.sdaiINSTANCE, i); }
        public assembly_component_usage get_occurrence_usage() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "occurrence_usage", ifcengine.sdaiINSTANCE, out inst); return new assembly_component_usage (inst); }
        public assembly_component_usage _occurrence_usage { get { return get_occurrence_usage(); } }
        public void put_occurrence_usage(assembly_component_usage inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "occurrence_usage", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "product_definition_occurrence_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_shape
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_shape : property_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_shape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_shape(SdaiInstance instance) : base(instance) { }
        public product_definition_shape() : base(0) { }

        public static implicit operator product_definition_shape(SdaiInstance instance) => new product_definition_shape(instance);

        /// <summary>
        /// Create new instace of product_definition_shape and returns object of this class to interact with
        /// </summary>
        public static new product_definition_shape Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_shape"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "product_definition_shape"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_substitute
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_substitute : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_substitute
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_substitute(SdaiInstance instance) : base(instance) { }
        public product_definition_substitute() : base(0) { }

        public static implicit operator product_definition_substitute(SdaiInstance instance) => new product_definition_substitute(instance);

        /// <summary>
        /// Create new instace of product_definition_substitute and returns object of this class to interact with
        /// </summary>
        public static new product_definition_substitute Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_substitute"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public product_definition_relationship get_context_relationship() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "context_relationship", ifcengine.sdaiINSTANCE, out inst); return new product_definition_relationship (inst); }
        public product_definition_relationship _context_relationship { get { return get_context_relationship(); } }
        public void put_context_relationship(product_definition_relationship inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "context_relationship", ifcengine.sdaiINSTANCE, i); }
        public product_definition get_substitute_definition() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "substitute_definition", ifcengine.sdaiINSTANCE, out inst); return new product_definition (inst); }
        public product_definition _substitute_definition { get { return get_substitute_definition(); } }
        public void put_substitute_definition(product_definition inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "substitute_definition", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "product_definition_substitute"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_definition_with_associated_documents
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_definition_with_associated_documents : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_definition_with_associated_documents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_definition_with_associated_documents(SdaiInstance instance) : base(instance) { }
        public product_definition_with_associated_documents() : base(0) { }

        public static implicit operator product_definition_with_associated_documents(SdaiInstance instance) => new product_definition_with_associated_documents(instance);

        /// <summary>
        /// Create new instace of product_definition_with_associated_documents and returns object of this class to interact with
        /// </summary>
        public static new product_definition_with_associated_documents Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_definition_with_associated_documents"); Debug.Assert(inst != 0); return inst; }

        public set_of_document get_documentation_ids() { return (new set_of_documentSerializer()).FromAttr(m_instance, "documentation_ids"); }
        public set_of_document _documentation_ids { get { return get_documentation_ids(); } }
        public void put_documentation_ids(IEnumerable<document> lst) { (new set_of_documentSerializer()).ToSdaiAggr(lst, m_instance, "documentation_ids"); }
        //public void put_documentation_ids_untyped(IEnumerable lst) { (new set_of_documentSerializer()).ToSdaiAggr(lst, m_instance, "documentation_ids"); }

        protected override TextValue EntityName() { return "product_definition_with_associated_documents"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_identification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_identification : configuration_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_identification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_identification(SdaiInstance instance) : base(instance) { }
        public product_identification() : base(0) { }

        public static implicit operator product_identification(SdaiInstance instance) => new product_identification(instance);

        /// <summary>
        /// Create new instace of product_identification and returns object of this class to interact with
        /// </summary>
        public static new product_identification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_identification"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "product_identification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_material_composition_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_material_composition_relationship : product_definition_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_material_composition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_material_composition_relationship(SdaiInstance instance) : base(instance) { }
        public product_material_composition_relationship() : base(0) { }

        public static implicit operator product_material_composition_relationship(SdaiInstance instance) => new product_material_composition_relationship(instance);

        /// <summary>
        /// Create new instace of product_material_composition_relationship and returns object of this class to interact with
        /// </summary>
        public static new product_material_composition_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_material_composition_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_class_() { return get_string("class_", ifcengine.sdaiSTRING); }
        public TextValue _class_ { get { return get_class_(); } }
        public void put_class_(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "class_", ifcengine.sdaiSTRING, value); }
        public set_of_characterized_product_composition_value get_constituent_amount() { return (new set_of_characterized_product_composition_valueSerializer()).FromAttr(m_instance, "constituent_amount"); }
        public set_of_characterized_product_composition_value _constituent_amount { get { return get_constituent_amount(); } }
        public void put_constituent_amount(IEnumerable<characterized_product_composition_value> lst) { (new set_of_characterized_product_composition_valueSerializer()).ToSdaiAggr(lst, m_instance, "constituent_amount"); }
        //public void put_constituent_amount_untyped(IEnumerable lst) { (new set_of_characterized_product_composition_valueSerializer()).ToSdaiAggr(lst, m_instance, "constituent_amount"); }
        public TextValue get_composition_basis() { return get_string("composition_basis", ifcengine.sdaiSTRING); }
        public TextValue _composition_basis { get { return get_composition_basis(); } }
        public void put_composition_basis(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "composition_basis", ifcengine.sdaiSTRING, value); }
        public TextValue get_determination_method() { return get_string("determination_method", ifcengine.sdaiSTRING); }
        public TextValue _determination_method { get { return get_determination_method(); } }
        public void put_determination_method(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "determination_method", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "product_material_composition_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_related_product_category
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_related_product_category : product_category
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_related_product_category
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_related_product_category(SdaiInstance instance) : base(instance) { }
        public product_related_product_category() : base(0) { }

        public static implicit operator product_related_product_category(SdaiInstance instance) => new product_related_product_category(instance);

        /// <summary>
        /// Create new instace of product_related_product_category and returns object of this class to interact with
        /// </summary>
        public static new product_related_product_category Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_related_product_category"); Debug.Assert(inst != 0); return inst; }

        public set_of_product get_products() { return (new set_of_productSerializer()).FromAttr(m_instance, "products"); }
        public set_of_product _products { get { return get_products(); } }
        public void put_products(IEnumerable<product> lst) { (new set_of_productSerializer()).ToSdaiAggr(lst, m_instance, "products"); }
        //public void put_products_untyped(IEnumerable lst) { (new set_of_productSerializer()).ToSdaiAggr(lst, m_instance, "products"); }

        protected override TextValue EntityName() { return "product_related_product_category"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of product_specification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class product_specification : product_identification
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of product_specification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public product_specification(SdaiInstance instance) : base(instance) { }
        public product_specification() : base(0) { }

        public static implicit operator product_specification(SdaiInstance instance) => new product_specification(instance);

        /// <summary>
        /// Create new instace of product_specification and returns object of this class to interact with
        /// </summary>
        public static new product_specification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "product_specification"); Debug.Assert(inst != 0); return inst; }

        public set_of_product_concept_feature_association get_item_concept_feature() { return (new set_of_product_concept_feature_associationSerializer()).FromAttr(m_instance, "item_concept_feature"); }
        public set_of_product_concept_feature_association _item_concept_feature { get { return get_item_concept_feature(); } }
        public void put_item_concept_feature(IEnumerable<product_concept_feature_association> lst) { (new set_of_product_concept_feature_associationSerializer()).ToSdaiAggr(lst, m_instance, "item_concept_feature"); }
        //public void put_item_concept_feature_untyped(IEnumerable lst) { (new set_of_product_concept_feature_associationSerializer()).ToSdaiAggr(lst, m_instance, "item_concept_feature"); }

        protected override TextValue EntityName() { return "product_specification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tolerance_zone_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tolerance_zone_definition : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tolerance_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tolerance_zone_definition(SdaiInstance instance) : base(instance) { }
        public tolerance_zone_definition() : base(0) { }

        public static implicit operator tolerance_zone_definition(SdaiInstance instance) => new tolerance_zone_definition(instance);

        /// <summary>
        /// Create new instace of tolerance_zone_definition and returns object of this class to interact with
        /// </summary>
        public static new tolerance_zone_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tolerance_zone_definition"); Debug.Assert(inst != 0); return inst; }

        public tolerance_zone get_zone() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "zone", ifcengine.sdaiINSTANCE, out inst); return new tolerance_zone (inst); }
        public tolerance_zone _zone { get { return get_zone(); } }
        public void put_zone(tolerance_zone inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "zone", ifcengine.sdaiINSTANCE, i); }
        public set_of_shape_aspect get_boundaries() { return (new set_of_shape_aspectSerializer()).FromAttr(m_instance, "boundaries"); }
        public set_of_shape_aspect _boundaries { get { return get_boundaries(); } }
        public void put_boundaries(IEnumerable<shape_aspect> lst) { (new set_of_shape_aspectSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }
        //public void put_boundaries_untyped(IEnumerable lst) { (new set_of_shape_aspectSerializer()).ToSdaiAggr(lst, m_instance, "boundaries"); }

        protected override TextValue EntityName() { return "tolerance_zone_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of projected_zone_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class projected_zone_definition : tolerance_zone_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of projected_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public projected_zone_definition(SdaiInstance instance) : base(instance) { }
        public projected_zone_definition() : base(0) { }

        public static implicit operator projected_zone_definition(SdaiInstance instance) => new projected_zone_definition(instance);

        /// <summary>
        /// Create new instace of projected_zone_definition and returns object of this class to interact with
        /// </summary>
        public static new projected_zone_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "projected_zone_definition"); Debug.Assert(inst != 0); return inst; }

        public shape_aspect get_projection_end() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "projection_end", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect (inst); }
        public shape_aspect _projection_end { get { return get_projection_end(); } }
        public void put_projection_end(shape_aspect inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "projection_end", ifcengine.sdaiINSTANCE, i); }
        public measure_with_unit get_projected_length() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "projected_length", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _projected_length { get { return get_projected_length(); } }
        public void put_projected_length(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "projected_length", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "projected_zone_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of projection_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class projection_curve : annotation_curve_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of projection_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public projection_curve(SdaiInstance instance) : base(instance) { }
        public projection_curve() : base(0) { }

        public static implicit operator projection_curve(SdaiInstance instance) => new projection_curve(instance);

        /// <summary>
        /// Create new instace of projection_curve and returns object of this class to interact with
        /// </summary>
        public static new projection_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "projection_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "projection_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of promissory_usage_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class promissory_usage_occurrence : assembly_component_usage
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of promissory_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public promissory_usage_occurrence(SdaiInstance instance) : base(instance) { }
        public promissory_usage_occurrence() : base(0) { }

        public static implicit operator promissory_usage_occurrence(SdaiInstance instance) => new promissory_usage_occurrence(instance);

        /// <summary>
        /// Create new instace of promissory_usage_occurrence and returns object of this class to interact with
        /// </summary>
        public static new promissory_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "promissory_usage_occurrence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "promissory_usage_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of property_definition_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class property_definition_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of property_definition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public property_definition_relationship(SdaiInstance instance) : base(instance) { }
        public property_definition_relationship() : base(0) { }

        public static implicit operator property_definition_relationship(SdaiInstance instance) => new property_definition_relationship(instance);

        /// <summary>
        /// Create new instace of property_definition_relationship and returns object of this class to interact with
        /// </summary>
        public static new property_definition_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "property_definition_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public property_definition get_relating_property_definition() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_property_definition", ifcengine.sdaiINSTANCE, out inst); return new property_definition (inst); }
        public property_definition _relating_property_definition { get { return get_relating_property_definition(); } }
        public void put_relating_property_definition(property_definition inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_property_definition", ifcengine.sdaiINSTANCE, i); }
        public property_definition get_related_property_definition() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_property_definition", ifcengine.sdaiINSTANCE, out inst); return new property_definition (inst); }
        public property_definition _related_property_definition { get { return get_related_property_definition(); } }
        public void put_related_property_definition(property_definition inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_property_definition", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "property_definition_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of qualified_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class qualified_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of qualified_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public qualified_representation_item(SdaiInstance instance) : base(instance) { }
        public qualified_representation_item() : base(0) { }

        public static implicit operator qualified_representation_item(SdaiInstance instance) => new qualified_representation_item(instance);

        /// <summary>
        /// Create new instace of qualified_representation_item and returns object of this class to interact with
        /// </summary>
        public static new qualified_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "qualified_representation_item"); Debug.Assert(inst != 0); return inst; }

        public set_of_value_qualifier get_qualifiers() { return (new set_of_value_qualifierSerializer()).FromAttr(m_instance, "qualifiers"); }
        public set_of_value_qualifier _qualifiers { get { return get_qualifiers(); } }
        public void put_qualifiers(IEnumerable<value_qualifier> lst) { (new set_of_value_qualifierSerializer()).ToSdaiAggr(lst, m_instance, "qualifiers"); }
        //public void put_qualifiers_untyped(IEnumerable lst) { (new set_of_value_qualifierSerializer()).ToSdaiAggr(lst, m_instance, "qualifiers"); }

        protected override TextValue EntityName() { return "qualified_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of qualitative_uncertainty
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class qualitative_uncertainty : uncertainty_qualifier
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of qualitative_uncertainty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public qualitative_uncertainty(SdaiInstance instance) : base(instance) { }
        public qualitative_uncertainty() : base(0) { }

        public static implicit operator qualitative_uncertainty(SdaiInstance instance) => new qualitative_uncertainty(instance);

        /// <summary>
        /// Create new instace of qualitative_uncertainty and returns object of this class to interact with
        /// </summary>
        public static new qualitative_uncertainty Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "qualitative_uncertainty"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_uncertainty_value() { return get_string("uncertainty_value", ifcengine.sdaiSTRING); }
        public TextValue _uncertainty_value { get { return get_uncertainty_value(); } }
        public void put_uncertainty_value(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "uncertainty_value", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "qualitative_uncertainty"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of quantified_assembly_component_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class quantified_assembly_component_usage : assembly_component_usage
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of quantified_assembly_component_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public quantified_assembly_component_usage(SdaiInstance instance) : base(instance) { }
        public quantified_assembly_component_usage() : base(0) { }

        public static implicit operator quantified_assembly_component_usage(SdaiInstance instance) => new quantified_assembly_component_usage(instance);

        /// <summary>
        /// Create new instace of quantified_assembly_component_usage and returns object of this class to interact with
        /// </summary>
        public static new quantified_assembly_component_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "quantified_assembly_component_usage"); Debug.Assert(inst != 0); return inst; }

        public measure_with_unit get_quantity() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "quantity", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _quantity { get { return get_quantity(); } }
        public void put_quantity(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "quantity", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "quantified_assembly_component_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of quasi_uniform_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class quasi_uniform_curve : b_spline_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of quasi_uniform_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public quasi_uniform_curve(SdaiInstance instance) : base(instance) { }
        public quasi_uniform_curve() : base(0) { }

        public static implicit operator quasi_uniform_curve(SdaiInstance instance) => new quasi_uniform_curve(instance);

        /// <summary>
        /// Create new instace of quasi_uniform_curve and returns object of this class to interact with
        /// </summary>
        public static new quasi_uniform_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "quasi_uniform_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "quasi_uniform_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of quasi_uniform_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class quasi_uniform_surface : b_spline_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of quasi_uniform_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public quasi_uniform_surface(SdaiInstance instance) : base(instance) { }
        public quasi_uniform_surface() : base(0) { }

        public static implicit operator quasi_uniform_surface(SdaiInstance instance) => new quasi_uniform_surface(instance);

        /// <summary>
        /// Create new instace of quasi_uniform_surface and returns object of this class to interact with
        /// </summary>
        public static new quasi_uniform_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "quasi_uniform_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "quasi_uniform_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of radioactivity_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class radioactivity_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of radioactivity_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public radioactivity_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public radioactivity_measure_with_unit() : base(0) { }

        public static implicit operator radioactivity_measure_with_unit(SdaiInstance instance) => new radioactivity_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of radioactivity_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new radioactivity_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "radioactivity_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "radioactivity_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of radioactivity_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class radioactivity_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of radioactivity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public radioactivity_unit(SdaiInstance instance) : base(instance) { }
        public radioactivity_unit() : base(0) { }

        public static implicit operator radioactivity_unit(SdaiInstance instance) => new radioactivity_unit(instance);

        /// <summary>
        /// Create new instace of radioactivity_unit and returns object of this class to interact with
        /// </summary>
        public static new radioactivity_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "radioactivity_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "radioactivity_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of radius_dimension
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class radius_dimension : dimension_curve_directed_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of radius_dimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public radius_dimension(SdaiInstance instance) : base(instance) { }
        public radius_dimension() : base(0) { }

        public static implicit operator radius_dimension(SdaiInstance instance) => new radius_dimension(instance);

        /// <summary>
        /// Create new instace of radius_dimension and returns object of this class to interact with
        /// </summary>
        public static new radius_dimension Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "radius_dimension"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "radius_dimension"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of range_characteristic
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class range_characteristic : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of range_characteristic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public range_characteristic(SdaiInstance instance) : base(instance) { }
        public range_characteristic() : base(0) { }

        public static implicit operator range_characteristic(SdaiInstance instance) => new range_characteristic(instance);

        /// <summary>
        /// Create new instace of range_characteristic and returns object of this class to interact with
        /// </summary>
        public static new range_characteristic Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "range_characteristic"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "range_characteristic"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ratio_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ratio_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ratio_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ratio_unit(SdaiInstance instance) : base(instance) { }
        public ratio_unit() : base(0) { }

        public static implicit operator ratio_unit(SdaiInstance instance) => new ratio_unit(instance);

        /// <summary>
        /// Create new instace of ratio_unit and returns object of this class to interact with
        /// </summary>
        public static new ratio_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ratio_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "ratio_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rational_b_spline_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rational_b_spline_curve : b_spline_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rational_b_spline_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rational_b_spline_curve(SdaiInstance instance) : base(instance) { }
        public rational_b_spline_curve() : base(0) { }

        public static implicit operator rational_b_spline_curve(SdaiInstance instance) => new rational_b_spline_curve(instance);

        /// <summary>
        /// Create new instace of rational_b_spline_curve and returns object of this class to interact with
        /// </summary>
        public static new rational_b_spline_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rational_b_spline_curve"); Debug.Assert(inst != 0); return inst; }

        public list_of_double get_weights_data() { return (new list_of_doubleSerializer()).FromAttr(m_instance, "weights_data"); }
        public list_of_double _weights_data { get { return get_weights_data(); } }
        public void put_weights_data(IEnumerable<double> lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        //public void put_weights_data_untyped(IEnumerable lst) { (new list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }

        protected override TextValue EntityName() { return "rational_b_spline_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rational_b_spline_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rational_b_spline_surface : b_spline_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rational_b_spline_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rational_b_spline_surface(SdaiInstance instance) : base(instance) { }
        public rational_b_spline_surface() : base(0) { }

        public static implicit operator rational_b_spline_surface(SdaiInstance instance) => new rational_b_spline_surface(instance);

        /// <summary>
        /// Create new instace of rational_b_spline_surface and returns object of this class to interact with
        /// </summary>
        public static new rational_b_spline_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rational_b_spline_surface"); Debug.Assert(inst != 0); return inst; }

        public list_of_list_of_double get_weights_data() { return (new list_of_list_of_doubleSerializer()).FromAttr(m_instance, "weights_data"); }
        public list_of_list_of_double _weights_data { get { return get_weights_data(); } }
        public void put_weights_data(IEnumerable<list_of_double> lst) { (new list_of_list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }
        //public void put_weights_data_untyped(IEnumerable lst) { (new list_of_list_of_doubleSerializer()).ToSdaiAggr(lst, m_instance, "weights_data"); }

        protected override TextValue EntityName() { return "rational_b_spline_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rational_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rational_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rational_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rational_representation_item(SdaiInstance instance) : base(instance) { }
        public rational_representation_item() : base(0) { }

        public static implicit operator rational_representation_item(SdaiInstance instance) => new rational_representation_item(instance);

        /// <summary>
        /// Create new instace of rational_representation_item and returns object of this class to interact with
        /// </summary>
        public static new rational_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rational_representation_item"); Debug.Assert(inst != 0); return inst; }

        public list_of_generic_expression get_operands() { return (new list_of_generic_expressionSerializer()).FromAttr(m_instance, "operands"); }
        public list_of_generic_expression _operands { get { return get_operands(); } }
        public void put_operands(IEnumerable<generic_expression> lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }
        //public void put_operands_untyped(IEnumerable lst) { (new list_of_generic_expressionSerializer()).ToSdaiAggr(lst, m_instance, "operands"); }

        protected override TextValue EntityName() { return "rational_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of real_literal
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class real_literal : literal_number
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of real_literal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public real_literal(SdaiInstance instance) : base(instance) { }
        public real_literal() : base(0) { }

        public static implicit operator real_literal(SdaiInstance instance) => new real_literal(instance);

        /// <summary>
        /// Create new instace of real_literal and returns object of this class to interact with
        /// </summary>
        public static new real_literal Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "real_literal"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "real_literal"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of real_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class real_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of real_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public real_representation_item(SdaiInstance instance) : base(instance) { }
        public real_representation_item() : base(0) { }

        public static implicit operator real_representation_item(SdaiInstance instance) => new real_representation_item(instance);

        /// <summary>
        /// Create new instace of real_representation_item and returns object of this class to interact with
        /// </summary>
        public static new real_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "real_representation_item"); Debug.Assert(inst != 0); return inst; }

        public double? get_the_value() { return get_double("the_value", ifcengine.sdaiREAL);}
        public double? _the_value { get { return get_the_value(); } }
        public void put_the_value(double value) { ifcengine.sdaiPutAttrBN(m_instance, "the_value", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "real_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rectangular_composite_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rectangular_composite_surface : bounded_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rectangular_composite_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rectangular_composite_surface(SdaiInstance instance) : base(instance) { }
        public rectangular_composite_surface() : base(0) { }

        public static implicit operator rectangular_composite_surface(SdaiInstance instance) => new rectangular_composite_surface(instance);

        /// <summary>
        /// Create new instace of rectangular_composite_surface and returns object of this class to interact with
        /// </summary>
        public static new rectangular_composite_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rectangular_composite_surface"); Debug.Assert(inst != 0); return inst; }

        public list_of_list_of_surface_patch get_segments() { return (new list_of_list_of_surface_patchSerializer()).FromAttr(m_instance, "segments"); }
        public list_of_list_of_surface_patch _segments { get { return get_segments(); } }
        public void put_segments(IEnumerable<list_of_surface_patch> lst) { (new list_of_list_of_surface_patchSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }
        //public void put_segments_untyped(IEnumerable lst) { (new list_of_list_of_surface_patchSerializer()).ToSdaiAggr(lst, m_instance, "segments"); }

        protected override TextValue EntityName() { return "rectangular_composite_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rectangular_trimmed_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rectangular_trimmed_surface : bounded_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rectangular_trimmed_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rectangular_trimmed_surface(SdaiInstance instance) : base(instance) { }
        public rectangular_trimmed_surface() : base(0) { }

        public static implicit operator rectangular_trimmed_surface(SdaiInstance instance) => new rectangular_trimmed_surface(instance);

        /// <summary>
        /// Create new instace of rectangular_trimmed_surface and returns object of this class to interact with
        /// </summary>
        public static new rectangular_trimmed_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rectangular_trimmed_surface"); Debug.Assert(inst != 0); return inst; }

        public surface get_basis_surface() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, out inst); return new surface (inst); }
        public surface _basis_surface { get { return get_basis_surface(); } }
        public void put_basis_surface(surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "basis_surface", ifcengine.sdaiINSTANCE, i); }
        public double? get_u1() { return get_double("u1", ifcengine.sdaiREAL);}
        public double? _u1 { get { return get_u1(); } }
        public void put_u1(double value) { ifcengine.sdaiPutAttrBN(m_instance, "u1", ifcengine.sdaiREAL, ref value); }
        public double? get_u2() { return get_double("u2", ifcengine.sdaiREAL);}
        public double? _u2 { get { return get_u2(); } }
        public void put_u2(double value) { ifcengine.sdaiPutAttrBN(m_instance, "u2", ifcengine.sdaiREAL, ref value); }
        public double? get_v1() { return get_double("v1", ifcengine.sdaiREAL);}
        public double? _v1 { get { return get_v1(); } }
        public void put_v1(double value) { ifcengine.sdaiPutAttrBN(m_instance, "v1", ifcengine.sdaiREAL, ref value); }
        public double? get_v2() { return get_double("v2", ifcengine.sdaiREAL);}
        public double? _v2 { get { return get_v2(); } }
        public void put_v2(double value) { ifcengine.sdaiPutAttrBN(m_instance, "v2", ifcengine.sdaiREAL, ref value); }
        public bool? get_usense() { return get_bool("usense", ifcengine.sdaiBOOLEAN);}
        public bool? _usense { get { return get_usense(); } }
        public void put_usense(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "usense", ifcengine.sdaiBOOLEAN, ref value); }
        public bool? get_vsense() { return get_bool("vsense", ifcengine.sdaiBOOLEAN);}
        public bool? _vsense { get { return get_vsense(); } }
        public void put_vsense(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "vsense", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "rectangular_trimmed_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of referenced_modified_datum
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class referenced_modified_datum : datum_reference
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of referenced_modified_datum
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public referenced_modified_datum(SdaiInstance instance) : base(instance) { }
        public referenced_modified_datum() : base(0) { }

        public static implicit operator referenced_modified_datum(SdaiInstance instance) => new referenced_modified_datum(instance);

        /// <summary>
        /// Create new instace of referenced_modified_datum and returns object of this class to interact with
        /// </summary>
        public static new referenced_modified_datum Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "referenced_modified_datum"); Debug.Assert(inst != 0); return inst; }

        public limit_condition? get_modifier() { var str = get_string("modifier", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.limit_condition_); return EnumValue<limit_condition>.FromIndex(ind); }
        public limit_condition? _modifier { get { return get_modifier(); } }
        public void put_modifier(limit_condition value) { var str = EnumString<limit_condition>.FromValue(value, EnumNames.limit_condition_); ifcengine.sdaiPutAttrBN(m_instance, "modifier", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "referenced_modified_datum"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of relative_event_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class relative_event_occurrence : event_occurrence
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of relative_event_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public relative_event_occurrence(SdaiInstance instance) : base(instance) { }
        public relative_event_occurrence() : base(0) { }

        public static implicit operator relative_event_occurrence(SdaiInstance instance) => new relative_event_occurrence(instance);

        /// <summary>
        /// Create new instace of relative_event_occurrence and returns object of this class to interact with
        /// </summary>
        public static new relative_event_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "relative_event_occurrence"); Debug.Assert(inst != 0); return inst; }

        public event_occurrence get_base_event() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "base_event", ifcengine.sdaiINSTANCE, out inst); return new event_occurrence (inst); }
        public event_occurrence _base_event { get { return get_base_event(); } }
        public void put_base_event(event_occurrence inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "base_event", ifcengine.sdaiINSTANCE, i); }
        public time_measure_with_unit get_offset() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "offset", ifcengine.sdaiINSTANCE, out inst); return new time_measure_with_unit (inst); }
        public time_measure_with_unit _offset { get { return get_offset(); } }
        public void put_offset(time_measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "offset", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "relative_event_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rep_item_group
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rep_item_group : group
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rep_item_group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rep_item_group(SdaiInstance instance) : base(instance) { }
        public rep_item_group() : base(0) { }

        public static implicit operator rep_item_group(SdaiInstance instance) => new rep_item_group(instance);

        /// <summary>
        /// Create new instace of rep_item_group and returns object of this class to interact with
        /// </summary>
        public static new rep_item_group Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rep_item_group"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "rep_item_group"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of reparametrised_composite_curve_segment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class reparametrised_composite_curve_segment : composite_curve_segment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of reparametrised_composite_curve_segment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public reparametrised_composite_curve_segment(SdaiInstance instance) : base(instance) { }
        public reparametrised_composite_curve_segment() : base(0) { }

        public static implicit operator reparametrised_composite_curve_segment(SdaiInstance instance) => new reparametrised_composite_curve_segment(instance);

        /// <summary>
        /// Create new instace of reparametrised_composite_curve_segment and returns object of this class to interact with
        /// </summary>
        public static new reparametrised_composite_curve_segment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "reparametrised_composite_curve_segment"); Debug.Assert(inst != 0); return inst; }

        public double? get_param_length() { return get_double("param_length", ifcengine.sdaiREAL);}
        public double? _param_length { get { return get_param_length(); } }
        public void put_param_length(double value) { ifcengine.sdaiPutAttrBN(m_instance, "param_length", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "reparametrised_composite_curve_segment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of representation_relationship_with_transformation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class representation_relationship_with_transformation : representation_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of representation_relationship_with_transformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public representation_relationship_with_transformation(SdaiInstance instance) : base(instance) { }
        public representation_relationship_with_transformation() : base(0) { }

        public static implicit operator representation_relationship_with_transformation(SdaiInstance instance) => new representation_relationship_with_transformation(instance);

        /// <summary>
        /// Create new instace of representation_relationship_with_transformation and returns object of this class to interact with
        /// </summary>
        public static new representation_relationship_with_transformation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "representation_relationship_with_transformation"); Debug.Assert(inst != 0); return inst; }


        public transformation_get get_transformation_operator() { return new transformation_get(m_instance, "transformation_operator", 0); }
        public transformation_get _transformation_operator { get { return new transformation_get(m_instance, "transformation_operator", 0); } }
        public transformation_put put_transformation_operator() { return new transformation_put(m_instance, "transformation_operator", 0); }

        protected override TextValue EntityName() { return "representation_relationship_with_transformation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of requirement_assigned_object
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class requirement_assigned_object : group_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of requirement_assigned_object
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public requirement_assigned_object(SdaiInstance instance) : base(instance) { }
        public requirement_assigned_object() : base(0) { }

        public static implicit operator requirement_assigned_object(SdaiInstance instance) => new requirement_assigned_object(instance);

        /// <summary>
        /// Create new instace of requirement_assigned_object and returns object of this class to interact with
        /// </summary>
        public static new requirement_assigned_object Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "requirement_assigned_object"); Debug.Assert(inst != 0); return inst; }

        public set_of_requirement_assigned_item get_items() { return (new set_of_requirement_assigned_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_requirement_assigned_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<requirement_assigned_item> lst) { (new set_of_requirement_assigned_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_requirement_assigned_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "requirement_assigned_object"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of requirement_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class requirement_assignment : characterized_object
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of requirement_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public requirement_assignment(SdaiInstance instance) : base(instance) { }
        public requirement_assignment() : base(0) { }

        public static implicit operator requirement_assignment(SdaiInstance instance) => new requirement_assignment(instance);

        /// <summary>
        /// Create new instace of requirement_assignment and returns object of this class to interact with
        /// </summary>
        public static new requirement_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "requirement_assignment"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "requirement_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of requirement_source
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class requirement_source : group
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of requirement_source
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public requirement_source(SdaiInstance instance) : base(instance) { }
        public requirement_source() : base(0) { }

        public static implicit operator requirement_source(SdaiInstance instance) => new requirement_source(instance);

        /// <summary>
        /// Create new instace of requirement_source and returns object of this class to interact with
        /// </summary>
        public static new requirement_source Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "requirement_source"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "requirement_source"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of requirement_view_definition_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class requirement_view_definition_relationship : product_definition_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of requirement_view_definition_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public requirement_view_definition_relationship(SdaiInstance instance) : base(instance) { }
        public requirement_view_definition_relationship() : base(0) { }

        public static implicit operator requirement_view_definition_relationship(SdaiInstance instance) => new requirement_view_definition_relationship(instance);

        /// <summary>
        /// Create new instace of requirement_view_definition_relationship and returns object of this class to interact with
        /// </summary>
        public static new requirement_view_definition_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "requirement_view_definition_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "requirement_view_definition_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of resistance_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class resistance_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of resistance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public resistance_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public resistance_measure_with_unit() : base(0) { }

        public static implicit operator resistance_measure_with_unit(SdaiInstance instance) => new resistance_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of resistance_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new resistance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "resistance_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "resistance_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of resistance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class resistance_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of resistance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public resistance_unit(SdaiInstance instance) : base(instance) { }
        public resistance_unit() : base(0) { }

        public static implicit operator resistance_unit(SdaiInstance instance) => new resistance_unit(instance);

        /// <summary>
        /// Create new instace of resistance_unit and returns object of this class to interact with
        /// </summary>
        public static new resistance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "resistance_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "resistance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of revolved_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class revolved_area_solid : swept_area_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of revolved_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public revolved_area_solid(SdaiInstance instance) : base(instance) { }
        public revolved_area_solid() : base(0) { }

        public static implicit operator revolved_area_solid(SdaiInstance instance) => new revolved_area_solid(instance);

        /// <summary>
        /// Create new instace of revolved_area_solid and returns object of this class to interact with
        /// </summary>
        public static new revolved_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "revolved_area_solid"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement get_axis() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement (inst); }
        public axis1_placement _axis { get { return get_axis(); } }
        public void put_axis(axis1_placement inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }
        public double? get_angle() { return get_double("angle", ifcengine.sdaiREAL);}
        public double? _angle { get { return get_angle(); } }
        public void put_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "angle", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "revolved_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of revolved_face_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class revolved_face_solid : swept_face_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of revolved_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public revolved_face_solid(SdaiInstance instance) : base(instance) { }
        public revolved_face_solid() : base(0) { }

        public static implicit operator revolved_face_solid(SdaiInstance instance) => new revolved_face_solid(instance);

        /// <summary>
        /// Create new instace of revolved_face_solid and returns object of this class to interact with
        /// </summary>
        public static new revolved_face_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "revolved_face_solid"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement get_axis() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement (inst); }
        public axis1_placement _axis { get { return get_axis(); } }
        public void put_axis(axis1_placement inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "axis", ifcengine.sdaiINSTANCE, i); }
        public double? get_angle() { return get_double("angle", ifcengine.sdaiREAL);}
        public double? _angle { get { return get_angle(); } }
        public void put_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "angle", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "revolved_face_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of revolved_face_solid_with_trim_conditions
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class revolved_face_solid_with_trim_conditions : revolved_face_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of revolved_face_solid_with_trim_conditions
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public revolved_face_solid_with_trim_conditions(SdaiInstance instance) : base(instance) { }
        public revolved_face_solid_with_trim_conditions() : base(0) { }

        public static implicit operator revolved_face_solid_with_trim_conditions(SdaiInstance instance) => new revolved_face_solid_with_trim_conditions(instance);

        /// <summary>
        /// Create new instace of revolved_face_solid_with_trim_conditions and returns object of this class to interact with
        /// </summary>
        public static new revolved_face_solid_with_trim_conditions Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "revolved_face_solid_with_trim_conditions"); Debug.Assert(inst != 0); return inst; }


        public trim_condition_select_get get_first_trim_condition() { return new trim_condition_select_get(m_instance, "first_trim_condition", 0); }
        public trim_condition_select_get _first_trim_condition { get { return new trim_condition_select_get(m_instance, "first_trim_condition", 0); } }
        public trim_condition_select_put put_first_trim_condition() { return new trim_condition_select_put(m_instance, "first_trim_condition", 0); }

        public trim_condition_select_get get_second_trim_condition() { return new trim_condition_select_get(m_instance, "second_trim_condition", 0); }
        public trim_condition_select_get _second_trim_condition { get { return new trim_condition_select_get(m_instance, "second_trim_condition", 0); } }
        public trim_condition_select_put put_second_trim_condition() { return new trim_condition_select_put(m_instance, "second_trim_condition", 0); }

        protected override TextValue EntityName() { return "revolved_face_solid_with_trim_conditions"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of right_angular_wedge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class right_angular_wedge : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of right_angular_wedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public right_angular_wedge(SdaiInstance instance) : base(instance) { }
        public right_angular_wedge() : base(0) { }

        public static implicit operator right_angular_wedge(SdaiInstance instance) => new right_angular_wedge(instance);

        /// <summary>
        /// Create new instace of right_angular_wedge and returns object of this class to interact with
        /// </summary>
        public static new right_angular_wedge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "right_angular_wedge"); Debug.Assert(inst != 0); return inst; }

        public axis2_placement_3d get_position() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis2_placement_3d (inst); }
        public axis2_placement_3d _position { get { return get_position(); } }
        public void put_position(axis2_placement_3d inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
        public double? get_x() { return get_double("x", ifcengine.sdaiREAL);}
        public double? _x { get { return get_x(); } }
        public void put_x(double value) { ifcengine.sdaiPutAttrBN(m_instance, "x", ifcengine.sdaiREAL, ref value); }
        public double? get_y() { return get_double("y", ifcengine.sdaiREAL);}
        public double? _y { get { return get_y(); } }
        public void put_y(double value) { ifcengine.sdaiPutAttrBN(m_instance, "y", ifcengine.sdaiREAL, ref value); }
        public double? get_z() { return get_double("z", ifcengine.sdaiREAL);}
        public double? _z { get { return get_z(); } }
        public void put_z(double value) { ifcengine.sdaiPutAttrBN(m_instance, "z", ifcengine.sdaiREAL, ref value); }
        public double? get_ltx() { return get_double("ltx", ifcengine.sdaiREAL);}
        public double? _ltx { get { return get_ltx(); } }
        public void put_ltx(double value) { ifcengine.sdaiPutAttrBN(m_instance, "ltx", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "right_angular_wedge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of right_circular_cone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class right_circular_cone : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of right_circular_cone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public right_circular_cone(SdaiInstance instance) : base(instance) { }
        public right_circular_cone() : base(0) { }

        public static implicit operator right_circular_cone(SdaiInstance instance) => new right_circular_cone(instance);

        /// <summary>
        /// Create new instace of right_circular_cone and returns object of this class to interact with
        /// </summary>
        public static new right_circular_cone Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "right_circular_cone"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement get_position() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement (inst); }
        public axis1_placement _position { get { return get_position(); } }
        public void put_position(axis1_placement inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
        public double? get_height() { return get_double("height", ifcengine.sdaiREAL);}
        public double? _height { get { return get_height(); } }
        public void put_height(double value) { ifcengine.sdaiPutAttrBN(m_instance, "height", ifcengine.sdaiREAL, ref value); }
        public double? get_radius() { return get_double("radius", ifcengine.sdaiREAL);}
        public double? _radius { get { return get_radius(); } }
        public void put_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref value); }
        public double? get_semi_angle() { return get_double("semi_angle", ifcengine.sdaiREAL);}
        public double? _semi_angle { get { return get_semi_angle(); } }
        public void put_semi_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "semi_angle", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "right_circular_cone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of right_circular_cylinder
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class right_circular_cylinder : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of right_circular_cylinder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public right_circular_cylinder(SdaiInstance instance) : base(instance) { }
        public right_circular_cylinder() : base(0) { }

        public static implicit operator right_circular_cylinder(SdaiInstance instance) => new right_circular_cylinder(instance);

        /// <summary>
        /// Create new instace of right_circular_cylinder and returns object of this class to interact with
        /// </summary>
        public static new right_circular_cylinder Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "right_circular_cylinder"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement get_position() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement (inst); }
        public axis1_placement _position { get { return get_position(); } }
        public void put_position(axis1_placement inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
        public double? get_height() { return get_double("height", ifcengine.sdaiREAL);}
        public double? _height { get { return get_height(); } }
        public void put_height(double value) { ifcengine.sdaiPutAttrBN(m_instance, "height", ifcengine.sdaiREAL, ref value); }
        public double? get_radius() { return get_double("radius", ifcengine.sdaiREAL);}
        public double? _radius { get { return get_radius(); } }
        public void put_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "right_circular_cylinder"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of right_to_usage_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class right_to_usage_association : action_method_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of right_to_usage_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public right_to_usage_association(SdaiInstance instance) : base(instance) { }
        public right_to_usage_association() : base(0) { }

        public static implicit operator right_to_usage_association(SdaiInstance instance) => new right_to_usage_association(instance);

        /// <summary>
        /// Create new instace of right_to_usage_association and returns object of this class to interact with
        /// </summary>
        public static new right_to_usage_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "right_to_usage_association"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "right_to_usage_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of role_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class role_association : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of role_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public role_association(SdaiInstance instance) : base(instance) { }
        public role_association() : base(0) { }

        public static implicit operator role_association(SdaiInstance instance) => new role_association(instance);

        /// <summary>
        /// Create new instace of role_association and returns object of this class to interact with
        /// </summary>
        public static new role_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "role_association"); Debug.Assert(inst != 0); return inst; }

        public object_role get_role() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, out inst); return new object_role (inst); }
        public object_role _role { get { return get_role(); } }
        public void put_role(object_role inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "role", ifcengine.sdaiINSTANCE, i); }

        public role_select_get get_item_with_role() { return new role_select_get(m_instance, "item_with_role", 0); }
        public role_select_get _item_with_role { get { return new role_select_get(m_instance, "item_with_role", 0); } }
        public role_select_put put_item_with_role() { return new role_select_put(m_instance, "item_with_role", 0); }

        protected override TextValue EntityName() { return "role_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of roundness_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class roundness_tolerance : geometric_tolerance
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of roundness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public roundness_tolerance(SdaiInstance instance) : base(instance) { }
        public roundness_tolerance() : base(0) { }

        public static implicit operator roundness_tolerance(SdaiInstance instance) => new roundness_tolerance(instance);

        /// <summary>
        /// Create new instace of roundness_tolerance and returns object of this class to interact with
        /// </summary>
        public static new roundness_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "roundness_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "roundness_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of row_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class row_representation_item : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of row_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public row_representation_item(SdaiInstance instance) : base(instance) { }
        public row_representation_item() : base(0) { }

        public static implicit operator row_representation_item(SdaiInstance instance) => new row_representation_item(instance);

        /// <summary>
        /// Create new instace of row_representation_item and returns object of this class to interact with
        /// </summary>
        public static new row_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "row_representation_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "row_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of row_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class row_value : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of row_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public row_value(SdaiInstance instance) : base(instance) { }
        public row_value() : base(0) { }

        public static implicit operator row_value(SdaiInstance instance) => new row_value(instance);

        /// <summary>
        /// Create new instace of row_value and returns object of this class to interact with
        /// </summary>
        public static new row_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "row_value"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "row_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of row_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class row_variable : abstract_variable
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of row_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public row_variable(SdaiInstance instance) : base(instance) { }
        public row_variable() : base(0) { }

        public static implicit operator row_variable(SdaiInstance instance) => new row_variable(instance);

        /// <summary>
        /// Create new instace of row_variable and returns object of this class to interact with
        /// </summary>
        public static new row_variable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "row_variable"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "row_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rule_action
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rule_action : action
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rule_action
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rule_action(SdaiInstance instance) : base(instance) { }
        public rule_action() : base(0) { }

        public static implicit operator rule_action(SdaiInstance instance) => new rule_action(instance);

        /// <summary>
        /// Create new instace of rule_action and returns object of this class to interact with
        /// </summary>
        public static new rule_action Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rule_action"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "rule_action"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rule_condition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rule_condition : atomic_formula
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rule_condition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rule_condition(SdaiInstance instance) : base(instance) { }
        public rule_condition() : base(0) { }

        public static implicit operator rule_condition(SdaiInstance instance) => new rule_condition(instance);

        /// <summary>
        /// Create new instace of rule_condition and returns object of this class to interact with
        /// </summary>
        public static new rule_condition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rule_condition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "rule_condition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rule_set
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rule_set : rule_software_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rule_set
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rule_set(SdaiInstance instance) : base(instance) { }
        public rule_set() : base(0) { }

        public static implicit operator rule_set(SdaiInstance instance) => new rule_set(instance);

        /// <summary>
        /// Create new instace of rule_set and returns object of this class to interact with
        /// </summary>
        public static new rule_set Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rule_set"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "rule_set"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rule_set_group
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rule_set_group : rule_software_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rule_set_group
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rule_set_group(SdaiInstance instance) : base(instance) { }
        public rule_set_group() : base(0) { }

        public static implicit operator rule_set_group(SdaiInstance instance) => new rule_set_group(instance);

        /// <summary>
        /// Create new instace of rule_set_group and returns object of this class to interact with
        /// </summary>
        public static new rule_set_group Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rule_set_group"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "rule_set_group"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rule_superseded_assignment
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rule_superseded_assignment : action_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rule_superseded_assignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rule_superseded_assignment(SdaiInstance instance) : base(instance) { }
        public rule_superseded_assignment() : base(0) { }

        public static implicit operator rule_superseded_assignment(SdaiInstance instance) => new rule_superseded_assignment(instance);

        /// <summary>
        /// Create new instace of rule_superseded_assignment and returns object of this class to interact with
        /// </summary>
        public static new rule_superseded_assignment Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rule_superseded_assignment"); Debug.Assert(inst != 0); return inst; }

        public set_of_rule_superseded_item get_items() { return (new set_of_rule_superseded_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_rule_superseded_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<rule_superseded_item> lst) { (new set_of_rule_superseded_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_rule_superseded_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "rule_superseded_assignment"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of rule_supersedence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class rule_supersedence : rule_action
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of rule_supersedence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public rule_supersedence(SdaiInstance instance) : base(instance) { }
        public rule_supersedence() : base(0) { }

        public static implicit operator rule_supersedence(SdaiInstance instance) => new rule_supersedence(instance);

        /// <summary>
        /// Create new instace of rule_supersedence and returns object of this class to interact with
        /// </summary>
        public static new rule_supersedence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "rule_supersedence"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "rule_supersedence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_curve_swept_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_curve_swept_area_solid : swept_area_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_curve_swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_curve_swept_area_solid(SdaiInstance instance) : base(instance) { }
        public surface_curve_swept_area_solid() : base(0) { }

        public static implicit operator surface_curve_swept_area_solid(SdaiInstance instance) => new surface_curve_swept_area_solid(instance);

        /// <summary>
        /// Create new instace of surface_curve_swept_area_solid and returns object of this class to interact with
        /// </summary>
        public static new surface_curve_swept_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_curve_swept_area_solid"); Debug.Assert(inst != 0); return inst; }

        public curve get_directrix() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, out inst); return new curve (inst); }
        public curve _directrix { get { return get_directrix(); } }
        public void put_directrix(curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, i); }
        public double? get_start_param() { return get_double("start_param", ifcengine.sdaiREAL);}
        public double? _start_param { get { return get_start_param(); } }
        public void put_start_param(double value) { ifcengine.sdaiPutAttrBN(m_instance, "start_param", ifcengine.sdaiREAL, ref value); }
        public double? get_end_param() { return get_double("end_param", ifcengine.sdaiREAL);}
        public double? _end_param { get { return get_end_param(); } }
        public void put_end_param(double value) { ifcengine.sdaiPutAttrBN(m_instance, "end_param", ifcengine.sdaiREAL, ref value); }
        public surface get_reference_surface() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_surface", ifcengine.sdaiINSTANCE, out inst); return new surface (inst); }
        public surface _reference_surface { get { return get_reference_surface(); } }
        public void put_reference_surface(surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "reference_surface", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "surface_curve_swept_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of ruled_surface_swept_area_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class ruled_surface_swept_area_solid : surface_curve_swept_area_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of ruled_surface_swept_area_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public ruled_surface_swept_area_solid(SdaiInstance instance) : base(instance) { }
        public ruled_surface_swept_area_solid() : base(0) { }

        public static implicit operator ruled_surface_swept_area_solid(SdaiInstance instance) => new ruled_surface_swept_area_solid(instance);

        /// <summary>
        /// Create new instace of ruled_surface_swept_area_solid and returns object of this class to interact with
        /// </summary>
        public static new ruled_surface_swept_area_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "ruled_surface_swept_area_solid"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "ruled_surface_swept_area_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of runout_zone_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class runout_zone_definition : tolerance_zone_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of runout_zone_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public runout_zone_definition(SdaiInstance instance) : base(instance) { }
        public runout_zone_definition() : base(0) { }

        public static implicit operator runout_zone_definition(SdaiInstance instance) => new runout_zone_definition(instance);

        /// <summary>
        /// Create new instace of runout_zone_definition and returns object of this class to interact with
        /// </summary>
        public static new runout_zone_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "runout_zone_definition"); Debug.Assert(inst != 0); return inst; }

        public runout_zone_orientation get_orientation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, out inst); return new runout_zone_orientation (inst); }
        public runout_zone_orientation _orientation { get { return get_orientation(); } }
        public void put_orientation(runout_zone_orientation inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "runout_zone_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of runout_zone_orientation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class runout_zone_orientation : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of runout_zone_orientation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public runout_zone_orientation(SdaiInstance instance) : base(instance) { }
        public runout_zone_orientation() : base(0) { }

        public static implicit operator runout_zone_orientation(SdaiInstance instance) => new runout_zone_orientation(instance);

        /// <summary>
        /// Create new instace of runout_zone_orientation and returns object of this class to interact with
        /// </summary>
        public static new runout_zone_orientation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "runout_zone_orientation"); Debug.Assert(inst != 0); return inst; }

        public measure_with_unit get_angle() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "angle", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _angle { get { return get_angle(); } }
        public void put_angle(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "angle", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "runout_zone_orientation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of runout_zone_orientation_reference_direction
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class runout_zone_orientation_reference_direction : runout_zone_orientation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of runout_zone_orientation_reference_direction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public runout_zone_orientation_reference_direction(SdaiInstance instance) : base(instance) { }
        public runout_zone_orientation_reference_direction() : base(0) { }

        public static implicit operator runout_zone_orientation_reference_direction(SdaiInstance instance) => new runout_zone_orientation_reference_direction(instance);

        /// <summary>
        /// Create new instace of runout_zone_orientation_reference_direction and returns object of this class to interact with
        /// </summary>
        public static new runout_zone_orientation_reference_direction Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "runout_zone_orientation_reference_direction"); Debug.Assert(inst != 0); return inst; }

        public shape_aspect_relationship get_orientation_defining_relationship() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "orientation_defining_relationship", ifcengine.sdaiINSTANCE, out inst); return new shape_aspect_relationship (inst); }
        public shape_aspect_relationship _orientation_defining_relationship { get { return get_orientation_defining_relationship(); } }
        public void put_orientation_defining_relationship(shape_aspect_relationship inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "orientation_defining_relationship", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "runout_zone_orientation_reference_direction"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of satisfied_requirement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class satisfied_requirement : group_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of satisfied_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public satisfied_requirement(SdaiInstance instance) : base(instance) { }
        public satisfied_requirement() : base(0) { }

        public static implicit operator satisfied_requirement(SdaiInstance instance) => new satisfied_requirement(instance);

        /// <summary>
        /// Create new instace of satisfied_requirement and returns object of this class to interact with
        /// </summary>
        public static new satisfied_requirement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "satisfied_requirement"); Debug.Assert(inst != 0); return inst; }

        public set_of_product_definition get_items() { return (new set_of_product_definitionSerializer()).FromAttr(m_instance, "items"); }
        public set_of_product_definition _items { get { return get_items(); } }
        public void put_items(IEnumerable<product_definition> lst) { (new set_of_product_definitionSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_product_definitionSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "satisfied_requirement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of satisfies_requirement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class satisfies_requirement : group
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of satisfies_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public satisfies_requirement(SdaiInstance instance) : base(instance) { }
        public satisfies_requirement() : base(0) { }

        public static implicit operator satisfies_requirement(SdaiInstance instance) => new satisfies_requirement(instance);

        /// <summary>
        /// Create new instace of satisfies_requirement and returns object of this class to interact with
        /// </summary>
        public static new satisfies_requirement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "satisfies_requirement"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "satisfies_requirement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of satisfying_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class satisfying_item : group_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of satisfying_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public satisfying_item(SdaiInstance instance) : base(instance) { }
        public satisfying_item() : base(0) { }

        public static implicit operator satisfying_item(SdaiInstance instance) => new satisfying_item(instance);

        /// <summary>
        /// Create new instace of satisfying_item and returns object of this class to interact with
        /// </summary>
        public static new satisfying_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "satisfying_item"); Debug.Assert(inst != 0); return inst; }

        public set_of_requirement_satisfaction_item get_items() { return (new set_of_requirement_satisfaction_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_requirement_satisfaction_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<requirement_satisfaction_item> lst) { (new set_of_requirement_satisfaction_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_requirement_satisfaction_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "satisfying_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of scalar_variable
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class scalar_variable : abstract_variable
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of scalar_variable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public scalar_variable(SdaiInstance instance) : base(instance) { }
        public scalar_variable() : base(0) { }

        public static implicit operator scalar_variable(SdaiInstance instance) => new scalar_variable(instance);

        /// <summary>
        /// Create new instace of scalar_variable and returns object of this class to interact with
        /// </summary>
        public static new scalar_variable Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "scalar_variable"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "scalar_variable"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of scattering_parameter
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class scattering_parameter : polar_complex_number_literal
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of scattering_parameter
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public scattering_parameter(SdaiInstance instance) : base(instance) { }
        public scattering_parameter() : base(0) { }

        public static implicit operator scattering_parameter(SdaiInstance instance) => new scattering_parameter(instance);

        /// <summary>
        /// Create new instace of scattering_parameter and returns object of this class to interact with
        /// </summary>
        public static new scattering_parameter Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "scattering_parameter"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "scattering_parameter"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of sculptured_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class sculptured_solid : modified_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of sculptured_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public sculptured_solid(SdaiInstance instance) : base(instance) { }
        public sculptured_solid() : base(0) { }

        public static implicit operator sculptured_solid(SdaiInstance instance) => new sculptured_solid(instance);

        /// <summary>
        /// Create new instace of sculptured_solid and returns object of this class to interact with
        /// </summary>
        public static new sculptured_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "sculptured_solid"); Debug.Assert(inst != 0); return inst; }


        public generalized_surface_select_get get_sculpturing_element() { return new generalized_surface_select_get(m_instance, "sculpturing_element", 0); }
        public generalized_surface_select_get _sculpturing_element { get { return new generalized_surface_select_get(m_instance, "sculpturing_element", 0); } }
        public generalized_surface_select_put put_sculpturing_element() { return new generalized_surface_select_put(m_instance, "sculpturing_element", 0); }
        public bool? get_positive_side() { return get_bool("positive_side", ifcengine.sdaiBOOLEAN);}
        public bool? _positive_side { get { return get_positive_side(); } }
        public void put_positive_side(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "positive_side", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "sculptured_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of seam_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class seam_curve : surface_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of seam_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public seam_curve(SdaiInstance instance) : base(instance) { }
        public seam_curve() : base(0) { }

        public static implicit operator seam_curve(SdaiInstance instance) => new seam_curve(instance);

        /// <summary>
        /// Create new instace of seam_curve and returns object of this class to interact with
        /// </summary>
        public static new seam_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "seam_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "seam_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of security_classification
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class security_classification : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of security_classification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public security_classification(SdaiInstance instance) : base(instance) { }
        public security_classification() : base(0) { }

        public static implicit operator security_classification(SdaiInstance instance) => new security_classification(instance);

        /// <summary>
        /// Create new instace of security_classification and returns object of this class to interact with
        /// </summary>
        public static new security_classification Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "security_classification"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_purpose() { return get_string("purpose", ifcengine.sdaiSTRING); }
        public TextValue _purpose { get { return get_purpose(); } }
        public void put_purpose(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
        public security_classification_level get_security_level() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "security_level", ifcengine.sdaiINSTANCE, out inst); return new security_classification_level (inst); }
        public security_classification_level _security_level { get { return get_security_level(); } }
        public void put_security_level(security_classification_level inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "security_level", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "security_classification"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of security_classification_level
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class security_classification_level : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of security_classification_level
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public security_classification_level(SdaiInstance instance) : base(instance) { }
        public security_classification_level() : base(0) { }

        public static implicit operator security_classification_level(SdaiInstance instance) => new security_classification_level(instance);

        /// <summary>
        /// Create new instace of security_classification_level and returns object of this class to interact with
        /// </summary>
        public static new security_classification_level Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "security_classification_level"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "security_classification_level"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of serial_numbered_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class serial_numbered_effectivity : effectivity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of serial_numbered_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public serial_numbered_effectivity(SdaiInstance instance) : base(instance) { }
        public serial_numbered_effectivity() : base(0) { }

        public static implicit operator serial_numbered_effectivity(SdaiInstance instance) => new serial_numbered_effectivity(instance);

        /// <summary>
        /// Create new instace of serial_numbered_effectivity and returns object of this class to interact with
        /// </summary>
        public static new serial_numbered_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "serial_numbered_effectivity"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_effectivity_start_id() { return get_string("effectivity_start_id", ifcengine.sdaiSTRING); }
        public TextValue _effectivity_start_id { get { return get_effectivity_start_id(); } }
        public void put_effectivity_start_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "effectivity_start_id", ifcengine.sdaiSTRING, value); }
        public TextValue get_effectivity_end_id() { return get_string("effectivity_end_id", ifcengine.sdaiSTRING); }
        public TextValue _effectivity_end_id { get { return get_effectivity_end_id(); } }
        public void put_effectivity_end_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "effectivity_end_id", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "serial_numbered_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_aspect_associativity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_aspect_associativity : shape_aspect_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_aspect_associativity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_aspect_associativity(SdaiInstance instance) : base(instance) { }
        public shape_aspect_associativity() : base(0) { }

        public static implicit operator shape_aspect_associativity(SdaiInstance instance) => new shape_aspect_associativity(instance);

        /// <summary>
        /// Create new instace of shape_aspect_associativity and returns object of this class to interact with
        /// </summary>
        public static new shape_aspect_associativity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_aspect_associativity"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "shape_aspect_associativity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_aspect_deriving_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_aspect_deriving_relationship : shape_aspect_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_aspect_deriving_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_aspect_deriving_relationship(SdaiInstance instance) : base(instance) { }
        public shape_aspect_deriving_relationship() : base(0) { }

        public static implicit operator shape_aspect_deriving_relationship(SdaiInstance instance) => new shape_aspect_deriving_relationship(instance);

        /// <summary>
        /// Create new instace of shape_aspect_deriving_relationship and returns object of this class to interact with
        /// </summary>
        public static new shape_aspect_deriving_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_aspect_deriving_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "shape_aspect_deriving_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_definition_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_definition_representation : property_definition_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_definition_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_definition_representation(SdaiInstance instance) : base(instance) { }
        public shape_definition_representation() : base(0) { }

        public static implicit operator shape_definition_representation(SdaiInstance instance) => new shape_definition_representation(instance);

        /// <summary>
        /// Create new instace of shape_definition_representation and returns object of this class to interact with
        /// </summary>
        public static new shape_definition_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_definition_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "shape_definition_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_dimension_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_dimension_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_dimension_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_dimension_representation(SdaiInstance instance) : base(instance) { }
        public shape_dimension_representation() : base(0) { }

        public static implicit operator shape_dimension_representation(SdaiInstance instance) => new shape_dimension_representation(instance);

        /// <summary>
        /// Create new instace of shape_dimension_representation and returns object of this class to interact with
        /// </summary>
        public static new shape_dimension_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_dimension_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "shape_dimension_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_feature_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_feature_definition : characterized_object
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_feature_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_feature_definition(SdaiInstance instance) : base(instance) { }
        public shape_feature_definition() : base(0) { }

        public static implicit operator shape_feature_definition(SdaiInstance instance) => new shape_feature_definition(instance);

        /// <summary>
        /// Create new instace of shape_feature_definition and returns object of this class to interact with
        /// </summary>
        public static new shape_feature_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_feature_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "shape_feature_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shape_representation_with_parameters
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shape_representation_with_parameters : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shape_representation_with_parameters
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shape_representation_with_parameters(SdaiInstance instance) : base(instance) { }
        public shape_representation_with_parameters() : base(0) { }

        public static implicit operator shape_representation_with_parameters(SdaiInstance instance) => new shape_representation_with_parameters(instance);

        /// <summary>
        /// Create new instace of shape_representation_with_parameters and returns object of this class to interact with
        /// </summary>
        public static new shape_representation_with_parameters Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shape_representation_with_parameters"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "shape_representation_with_parameters"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shell_based_surface_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shell_based_surface_model : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shell_based_surface_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shell_based_surface_model(SdaiInstance instance) : base(instance) { }
        public shell_based_surface_model() : base(0) { }

        public static implicit operator shell_based_surface_model(SdaiInstance instance) => new shell_based_surface_model(instance);

        /// <summary>
        /// Create new instace of shell_based_surface_model and returns object of this class to interact with
        /// </summary>
        public static new shell_based_surface_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shell_based_surface_model"); Debug.Assert(inst != 0); return inst; }

        public set_of_shell get_sbsm_boundary() { return (new set_of_shellSerializer()).FromAttr(m_instance, "sbsm_boundary"); }
        public set_of_shell _sbsm_boundary { get { return get_sbsm_boundary(); } }
        public void put_sbsm_boundary(IEnumerable<shell> lst) { (new set_of_shellSerializer()).ToSdaiAggr(lst, m_instance, "sbsm_boundary"); }
        //public void put_sbsm_boundary_untyped(IEnumerable lst) { (new set_of_shellSerializer()).ToSdaiAggr(lst, m_instance, "sbsm_boundary"); }

        protected override TextValue EntityName() { return "shell_based_surface_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shell_based_wireframe_model
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shell_based_wireframe_model : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shell_based_wireframe_model
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shell_based_wireframe_model(SdaiInstance instance) : base(instance) { }
        public shell_based_wireframe_model() : base(0) { }

        public static implicit operator shell_based_wireframe_model(SdaiInstance instance) => new shell_based_wireframe_model(instance);

        /// <summary>
        /// Create new instace of shell_based_wireframe_model and returns object of this class to interact with
        /// </summary>
        public static new shell_based_wireframe_model Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shell_based_wireframe_model"); Debug.Assert(inst != 0); return inst; }

        public set_of_shell get_sbwm_boundary() { return (new set_of_shellSerializer()).FromAttr(m_instance, "sbwm_boundary"); }
        public set_of_shell _sbwm_boundary { get { return get_sbwm_boundary(); } }
        public void put_sbwm_boundary(IEnumerable<shell> lst) { (new set_of_shellSerializer()).ToSdaiAggr(lst, m_instance, "sbwm_boundary"); }
        //public void put_sbwm_boundary_untyped(IEnumerable lst) { (new set_of_shellSerializer()).ToSdaiAggr(lst, m_instance, "sbwm_boundary"); }

        protected override TextValue EntityName() { return "shell_based_wireframe_model"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of shell_based_wireframe_shape_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class shell_based_wireframe_shape_representation : shape_representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of shell_based_wireframe_shape_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public shell_based_wireframe_shape_representation(SdaiInstance instance) : base(instance) { }
        public shell_based_wireframe_shape_representation() : base(0) { }

        public static implicit operator shell_based_wireframe_shape_representation(SdaiInstance instance) => new shell_based_wireframe_shape_representation(instance);

        /// <summary>
        /// Create new instace of shell_based_wireframe_shape_representation and returns object of this class to interact with
        /// </summary>
        public static new shell_based_wireframe_shape_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "shell_based_wireframe_shape_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "shell_based_wireframe_shape_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_absorbed_dose_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_absorbed_dose_unit : absorbed_dose_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_absorbed_dose_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_absorbed_dose_unit(SdaiInstance instance) : base(instance) { }
        public si_absorbed_dose_unit() : base(0) { }

        public static implicit operator si_absorbed_dose_unit(SdaiInstance instance) => new si_absorbed_dose_unit(instance);

        /// <summary>
        /// Create new instace of si_absorbed_dose_unit and returns object of this class to interact with
        /// </summary>
        public static new si_absorbed_dose_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_absorbed_dose_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_absorbed_dose_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_capacitance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_capacitance_unit : capacitance_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_capacitance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_capacitance_unit(SdaiInstance instance) : base(instance) { }
        public si_capacitance_unit() : base(0) { }

        public static implicit operator si_capacitance_unit(SdaiInstance instance) => new si_capacitance_unit(instance);

        /// <summary>
        /// Create new instace of si_capacitance_unit and returns object of this class to interact with
        /// </summary>
        public static new si_capacitance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_capacitance_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_capacitance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_conductance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_conductance_unit : conductance_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_conductance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_conductance_unit(SdaiInstance instance) : base(instance) { }
        public si_conductance_unit() : base(0) { }

        public static implicit operator si_conductance_unit(SdaiInstance instance) => new si_conductance_unit(instance);

        /// <summary>
        /// Create new instace of si_conductance_unit and returns object of this class to interact with
        /// </summary>
        public static new si_conductance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_conductance_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_conductance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_dose_equivalent_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_dose_equivalent_unit : dose_equivalent_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_dose_equivalent_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_dose_equivalent_unit(SdaiInstance instance) : base(instance) { }
        public si_dose_equivalent_unit() : base(0) { }

        public static implicit operator si_dose_equivalent_unit(SdaiInstance instance) => new si_dose_equivalent_unit(instance);

        /// <summary>
        /// Create new instace of si_dose_equivalent_unit and returns object of this class to interact with
        /// </summary>
        public static new si_dose_equivalent_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_dose_equivalent_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_dose_equivalent_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_electric_charge_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_electric_charge_unit : electric_charge_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_electric_charge_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_electric_charge_unit(SdaiInstance instance) : base(instance) { }
        public si_electric_charge_unit() : base(0) { }

        public static implicit operator si_electric_charge_unit(SdaiInstance instance) => new si_electric_charge_unit(instance);

        /// <summary>
        /// Create new instace of si_electric_charge_unit and returns object of this class to interact with
        /// </summary>
        public static new si_electric_charge_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_electric_charge_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_electric_charge_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_electric_potential_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_electric_potential_unit : electric_potential_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_electric_potential_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_electric_potential_unit(SdaiInstance instance) : base(instance) { }
        public si_electric_potential_unit() : base(0) { }

        public static implicit operator si_electric_potential_unit(SdaiInstance instance) => new si_electric_potential_unit(instance);

        /// <summary>
        /// Create new instace of si_electric_potential_unit and returns object of this class to interact with
        /// </summary>
        public static new si_electric_potential_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_electric_potential_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_electric_potential_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_energy_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_energy_unit : energy_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_energy_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_energy_unit(SdaiInstance instance) : base(instance) { }
        public si_energy_unit() : base(0) { }

        public static implicit operator si_energy_unit(SdaiInstance instance) => new si_energy_unit(instance);

        /// <summary>
        /// Create new instace of si_energy_unit and returns object of this class to interact with
        /// </summary>
        public static new si_energy_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_energy_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_energy_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_force_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_force_unit : force_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_force_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_force_unit(SdaiInstance instance) : base(instance) { }
        public si_force_unit() : base(0) { }

        public static implicit operator si_force_unit(SdaiInstance instance) => new si_force_unit(instance);

        /// <summary>
        /// Create new instace of si_force_unit and returns object of this class to interact with
        /// </summary>
        public static new si_force_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_force_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_force_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_frequency_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_frequency_unit : frequency_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_frequency_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_frequency_unit(SdaiInstance instance) : base(instance) { }
        public si_frequency_unit() : base(0) { }

        public static implicit operator si_frequency_unit(SdaiInstance instance) => new si_frequency_unit(instance);

        /// <summary>
        /// Create new instace of si_frequency_unit and returns object of this class to interact with
        /// </summary>
        public static new si_frequency_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_frequency_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_frequency_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_illuminance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_illuminance_unit : illuminance_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_illuminance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_illuminance_unit(SdaiInstance instance) : base(instance) { }
        public si_illuminance_unit() : base(0) { }

        public static implicit operator si_illuminance_unit(SdaiInstance instance) => new si_illuminance_unit(instance);

        /// <summary>
        /// Create new instace of si_illuminance_unit and returns object of this class to interact with
        /// </summary>
        public static new si_illuminance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_illuminance_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_illuminance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_inductance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_inductance_unit : inductance_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_inductance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_inductance_unit(SdaiInstance instance) : base(instance) { }
        public si_inductance_unit() : base(0) { }

        public static implicit operator si_inductance_unit(SdaiInstance instance) => new si_inductance_unit(instance);

        /// <summary>
        /// Create new instace of si_inductance_unit and returns object of this class to interact with
        /// </summary>
        public static new si_inductance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_inductance_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_inductance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_magnetic_flux_density_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_magnetic_flux_density_unit : magnetic_flux_density_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_magnetic_flux_density_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_magnetic_flux_density_unit(SdaiInstance instance) : base(instance) { }
        public si_magnetic_flux_density_unit() : base(0) { }

        public static implicit operator si_magnetic_flux_density_unit(SdaiInstance instance) => new si_magnetic_flux_density_unit(instance);

        /// <summary>
        /// Create new instace of si_magnetic_flux_density_unit and returns object of this class to interact with
        /// </summary>
        public static new si_magnetic_flux_density_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_magnetic_flux_density_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_magnetic_flux_density_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_magnetic_flux_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_magnetic_flux_unit : magnetic_flux_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_magnetic_flux_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_magnetic_flux_unit(SdaiInstance instance) : base(instance) { }
        public si_magnetic_flux_unit() : base(0) { }

        public static implicit operator si_magnetic_flux_unit(SdaiInstance instance) => new si_magnetic_flux_unit(instance);

        /// <summary>
        /// Create new instace of si_magnetic_flux_unit and returns object of this class to interact with
        /// </summary>
        public static new si_magnetic_flux_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_magnetic_flux_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_magnetic_flux_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_power_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_power_unit : power_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_power_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_power_unit(SdaiInstance instance) : base(instance) { }
        public si_power_unit() : base(0) { }

        public static implicit operator si_power_unit(SdaiInstance instance) => new si_power_unit(instance);

        /// <summary>
        /// Create new instace of si_power_unit and returns object of this class to interact with
        /// </summary>
        public static new si_power_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_power_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_power_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_pressure_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_pressure_unit : pressure_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_pressure_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_pressure_unit(SdaiInstance instance) : base(instance) { }
        public si_pressure_unit() : base(0) { }

        public static implicit operator si_pressure_unit(SdaiInstance instance) => new si_pressure_unit(instance);

        /// <summary>
        /// Create new instace of si_pressure_unit and returns object of this class to interact with
        /// </summary>
        public static new si_pressure_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_pressure_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_pressure_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_radioactivity_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_radioactivity_unit : radioactivity_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_radioactivity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_radioactivity_unit(SdaiInstance instance) : base(instance) { }
        public si_radioactivity_unit() : base(0) { }

        public static implicit operator si_radioactivity_unit(SdaiInstance instance) => new si_radioactivity_unit(instance);

        /// <summary>
        /// Create new instace of si_radioactivity_unit and returns object of this class to interact with
        /// </summary>
        public static new si_radioactivity_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_radioactivity_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_radioactivity_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_resistance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_resistance_unit : resistance_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_resistance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_resistance_unit(SdaiInstance instance) : base(instance) { }
        public si_resistance_unit() : base(0) { }

        public static implicit operator si_resistance_unit(SdaiInstance instance) => new si_resistance_unit(instance);

        /// <summary>
        /// Create new instace of si_resistance_unit and returns object of this class to interact with
        /// </summary>
        public static new si_resistance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_resistance_unit"); Debug.Assert(inst != 0); return inst; }

        public dimensional_exponents get_dimensions() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, out inst); return new dimensional_exponents (inst); }
        public dimensional_exponents _dimensions { get { return get_dimensions(); } }
        public void put_dimensions(dimensional_exponents inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "dimensions", ifcengine.sdaiINSTANCE, i); }
        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_resistance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of si_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class si_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of si_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public si_unit(SdaiInstance instance) : base(instance) { }
        public si_unit() : base(0) { }

        public static implicit operator si_unit(SdaiInstance instance) => new si_unit(instance);

        /// <summary>
        /// Create new instace of si_unit and returns object of this class to interact with
        /// </summary>
        public static new si_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "si_unit"); Debug.Assert(inst != 0); return inst; }

        public si_prefix? get_prefix() { var str = get_string("prefix", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_prefix_); return EnumValue<si_prefix>.FromIndex(ind); }
        public si_prefix? _prefix { get { return get_prefix(); } }
        public void put_prefix(si_prefix value) { var str = EnumString<si_prefix>.FromValue(value, EnumNames.si_prefix_); ifcengine.sdaiPutAttrBN(m_instance, "prefix", ifcengine.sdaiENUM, str); }
        public si_unit_name? get_name() { var str = get_string("name", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.si_unit_name_); return EnumValue<si_unit_name>.FromIndex(ind); }
        public si_unit_name? _name { get { return get_name(); } }
        public void put_name(si_unit_name value) { var str = EnumString<si_unit_name>.FromValue(value, EnumNames.si_unit_name_); ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "si_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of slash_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class slash_expression : binary_numeric_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of slash_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public slash_expression(SdaiInstance instance) : base(instance) { }
        public slash_expression() : base(0) { }

        public static implicit operator slash_expression(SdaiInstance instance) => new slash_expression(instance);

        /// <summary>
        /// Create new instace of slash_expression and returns object of this class to interact with
        /// </summary>
        public static new slash_expression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "slash_expression"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "slash_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of smeared_material_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class smeared_material_definition : zone_structural_makeup
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of smeared_material_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public smeared_material_definition(SdaiInstance instance) : base(instance) { }
        public smeared_material_definition() : base(0) { }

        public static implicit operator smeared_material_definition(SdaiInstance instance) => new smeared_material_definition(instance);

        /// <summary>
        /// Create new instace of smeared_material_definition and returns object of this class to interact with
        /// </summary>
        public static new smeared_material_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "smeared_material_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "smeared_material_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_angle_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_angle_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_angle_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_angle_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public solid_angle_measure_with_unit() : base(0) { }

        public static implicit operator solid_angle_measure_with_unit(SdaiInstance instance) => new solid_angle_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of solid_angle_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new solid_angle_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_angle_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "solid_angle_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_angle_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_angle_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_angle_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_angle_unit(SdaiInstance instance) : base(instance) { }
        public solid_angle_unit() : base(0) { }

        public static implicit operator solid_angle_unit(SdaiInstance instance) => new solid_angle_unit(instance);

        /// <summary>
        /// Create new instace of solid_angle_unit and returns object of this class to interact with
        /// </summary>
        public static new solid_angle_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_angle_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "solid_angle_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_curve_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_curve_font : pre_defined_curve_font
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_curve_font(SdaiInstance instance) : base(instance) { }
        public solid_curve_font() : base(0) { }

        public static implicit operator solid_curve_font(SdaiInstance instance) => new solid_curve_font(instance);

        /// <summary>
        /// Create new instace of solid_curve_font and returns object of this class to interact with
        /// </summary>
        public static new solid_curve_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_curve_font"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "solid_curve_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_replica : solid_model
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_replica(SdaiInstance instance) : base(instance) { }
        public solid_replica() : base(0) { }

        public static implicit operator solid_replica(SdaiInstance instance) => new solid_replica(instance);

        /// <summary>
        /// Create new instace of solid_replica and returns object of this class to interact with
        /// </summary>
        public static new solid_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_replica"); Debug.Assert(inst != 0); return inst; }

        public solid_model get_parent_solid() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_solid", ifcengine.sdaiINSTANCE, out inst); return new solid_model (inst); }
        public solid_model _parent_solid { get { return get_parent_solid(); } }
        public void put_parent_solid(solid_model inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "parent_solid", ifcengine.sdaiINSTANCE, i); }
        public cartesian_transformation_operator_3d get_transformation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator_3d (inst); }
        public cartesian_transformation_operator_3d _transformation { get { return get_transformation(); } }
        public void put_transformation(cartesian_transformation_operator_3d inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "solid_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_chamfered_edges
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_chamfered_edges : edge_blended_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_chamfered_edges
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_chamfered_edges(SdaiInstance instance) : base(instance) { }
        public solid_with_chamfered_edges() : base(0) { }

        public static implicit operator solid_with_chamfered_edges(SdaiInstance instance) => new solid_with_chamfered_edges(instance);


        protected override TextValue EntityName() { return "solid_with_chamfered_edges"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_angle_based_chamfer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_angle_based_chamfer : solid_with_chamfered_edges
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_angle_based_chamfer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_angle_based_chamfer(SdaiInstance instance) : base(instance) { }
        public solid_with_angle_based_chamfer() : base(0) { }

        public static implicit operator solid_with_angle_based_chamfer(SdaiInstance instance) => new solid_with_angle_based_chamfer(instance);

        /// <summary>
        /// Create new instace of solid_with_angle_based_chamfer and returns object of this class to interact with
        /// </summary>
        public static new solid_with_angle_based_chamfer Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_angle_based_chamfer"); Debug.Assert(inst != 0); return inst; }

        public double? get_offset_distance() { return get_double("offset_distance", ifcengine.sdaiREAL);}
        public double? _offset_distance { get { return get_offset_distance(); } }
        public void put_offset_distance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "offset_distance", ifcengine.sdaiREAL, ref value); }
        public bool? get_left_offset() { return get_bool("left_offset", ifcengine.sdaiBOOLEAN);}
        public bool? _left_offset { get { return get_left_offset(); } }
        public void put_left_offset(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "left_offset", ifcengine.sdaiBOOLEAN, ref value); }
        public double? get_offset_angle() { return get_double("offset_angle", ifcengine.sdaiREAL);}
        public double? _offset_angle { get { return get_offset_angle(); } }
        public void put_offset_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "offset_angle", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_angle_based_chamfer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_shape_element_pattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_shape_element_pattern : modified_solid_with_placed_configuration
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_shape_element_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_shape_element_pattern(SdaiInstance instance) : base(instance) { }
        public solid_with_shape_element_pattern() : base(0) { }

        public static implicit operator solid_with_shape_element_pattern(SdaiInstance instance) => new solid_with_shape_element_pattern(instance);

        public modified_solid_with_placed_configuration get_replicated_element() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "replicated_element", ifcengine.sdaiINSTANCE, out inst); return new modified_solid_with_placed_configuration (inst); }
        public modified_solid_with_placed_configuration _replicated_element { get { return get_replicated_element(); } }
        public void put_replicated_element(modified_solid_with_placed_configuration inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "replicated_element", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "solid_with_shape_element_pattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_circular_pattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_circular_pattern : solid_with_shape_element_pattern
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_circular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_circular_pattern(SdaiInstance instance) : base(instance) { }
        public solid_with_circular_pattern() : base(0) { }

        public static implicit operator solid_with_circular_pattern(SdaiInstance instance) => new solid_with_circular_pattern(instance);

        /// <summary>
        /// Create new instace of solid_with_circular_pattern and returns object of this class to interact with
        /// </summary>
        public static new solid_with_circular_pattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_circular_pattern"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_replicate_count() { return get_IntValue("replicate_count", ifcengine.sdaiINTEGER);}
        public IntValue? _replicate_count { get { return get_replicate_count(); } }
        public void put_replicate_count(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "replicate_count", ifcengine.sdaiINTEGER, ref value); }
        public double? get_angular_spacing() { return get_double("angular_spacing", ifcengine.sdaiREAL);}
        public double? _angular_spacing { get { return get_angular_spacing(); } }
        public void put_angular_spacing(double value) { ifcengine.sdaiPutAttrBN(m_instance, "angular_spacing", ifcengine.sdaiREAL, ref value); }
        public bool? get_radial_alignment() { return get_bool("radial_alignment", ifcengine.sdaiBOOLEAN);}
        public bool? _radial_alignment { get { return get_radial_alignment(); } }
        public void put_radial_alignment(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "radial_alignment", ifcengine.sdaiBOOLEAN, ref value); }
        public point get_reference_point() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_point", ifcengine.sdaiINSTANCE, out inst); return new point (inst); }
        public point _reference_point { get { return get_reference_point(); } }
        public void put_reference_point(point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "reference_point", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "solid_with_circular_pattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_depression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_depression : modified_solid_with_placed_configuration
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_depression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_depression(SdaiInstance instance) : base(instance) { }
        public solid_with_depression() : base(0) { }

        public static implicit operator solid_with_depression(SdaiInstance instance) => new solid_with_depression(instance);

        public double? get_depth() { return get_double("depth", ifcengine.sdaiREAL);}
        public double? _depth { get { return get_depth(); } }
        public void put_depth(double value) { ifcengine.sdaiPutAttrBN(m_instance, "depth", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_depression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_pocket
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_pocket : solid_with_depression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_pocket
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_pocket(SdaiInstance instance) : base(instance) { }
        public solid_with_pocket() : base(0) { }

        public static implicit operator solid_with_pocket(SdaiInstance instance) => new solid_with_pocket(instance);

        public double? get_floor_blend_radius() { return get_double("floor_blend_radius", ifcengine.sdaiREAL);}
        public double? _floor_blend_radius { get { return get_floor_blend_radius(); } }
        public void put_floor_blend_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "floor_blend_radius", ifcengine.sdaiREAL, ref value); }
        public double? get_draft_angle() { return get_double("draft_angle", ifcengine.sdaiREAL);}
        public double? _draft_angle { get { return get_draft_angle(); } }
        public void put_draft_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "draft_angle", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_pocket"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_circular_pocket
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_circular_pocket : solid_with_pocket
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_circular_pocket
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_circular_pocket(SdaiInstance instance) : base(instance) { }
        public solid_with_circular_pocket() : base(0) { }

        public static implicit operator solid_with_circular_pocket(SdaiInstance instance) => new solid_with_circular_pocket(instance);

        /// <summary>
        /// Create new instace of solid_with_circular_pocket and returns object of this class to interact with
        /// </summary>
        public static new solid_with_circular_pocket Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_circular_pocket"); Debug.Assert(inst != 0); return inst; }

        public double? get_pocket_radius() { return get_double("pocket_radius", ifcengine.sdaiREAL);}
        public double? _pocket_radius { get { return get_pocket_radius(); } }
        public void put_pocket_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "pocket_radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_circular_pocket"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_protrusion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_protrusion : modified_solid_with_placed_configuration
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_protrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_protrusion(SdaiInstance instance) : base(instance) { }
        public solid_with_protrusion() : base(0) { }

        public static implicit operator solid_with_protrusion(SdaiInstance instance) => new solid_with_protrusion(instance);

        public double? get_protrusion_height() { return get_double("protrusion_height", ifcengine.sdaiREAL);}
        public double? _protrusion_height { get { return get_protrusion_height(); } }
        public void put_protrusion_height(double value) { ifcengine.sdaiPutAttrBN(m_instance, "protrusion_height", ifcengine.sdaiREAL, ref value); }
        public double? get_protrusion_draft_angle() { return get_double("protrusion_draft_angle", ifcengine.sdaiREAL);}
        public double? _protrusion_draft_angle { get { return get_protrusion_draft_angle(); } }
        public void put_protrusion_draft_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "protrusion_draft_angle", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_protrusion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_circular_protrusion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_circular_protrusion : solid_with_protrusion
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_circular_protrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_circular_protrusion(SdaiInstance instance) : base(instance) { }
        public solid_with_circular_protrusion() : base(0) { }

        public static implicit operator solid_with_circular_protrusion(SdaiInstance instance) => new solid_with_circular_protrusion(instance);

        /// <summary>
        /// Create new instace of solid_with_circular_protrusion and returns object of this class to interact with
        /// </summary>
        public static new solid_with_circular_protrusion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_circular_protrusion"); Debug.Assert(inst != 0); return inst; }

        public double? get_protrusion_radius() { return get_double("protrusion_radius", ifcengine.sdaiREAL);}
        public double? _protrusion_radius { get { return get_protrusion_radius(); } }
        public void put_protrusion_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "protrusion_radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_circular_protrusion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_hole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_hole : solid_with_depression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_hole(SdaiInstance instance) : base(instance) { }
        public solid_with_hole() : base(0) { }

        public static implicit operator solid_with_hole(SdaiInstance instance) => new solid_with_hole(instance);


        protected override TextValue EntityName() { return "solid_with_hole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_stepped_round_hole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_stepped_round_hole : solid_with_hole
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_stepped_round_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_stepped_round_hole(SdaiInstance instance) : base(instance) { }
        public solid_with_stepped_round_hole() : base(0) { }

        public static implicit operator solid_with_stepped_round_hole(SdaiInstance instance) => new solid_with_stepped_round_hole(instance);

        /// <summary>
        /// Create new instace of solid_with_stepped_round_hole and returns object of this class to interact with
        /// </summary>
        public static new solid_with_stepped_round_hole Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_stepped_round_hole"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_segments() { return get_IntValue("segments", ifcengine.sdaiINTEGER);}
        public IntValue? _segments { get { return get_segments(); } }
        public void put_segments(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "segments", ifcengine.sdaiINTEGER, ref value); }
        public list_of_positive_length_measure get_segment_radii() { return (new list_of_positive_length_measureSerializer()).FromAttr(m_instance, "segment_radii"); }
        public list_of_positive_length_measure _segment_radii { get { return get_segment_radii(); } }
        public void put_segment_radii(IEnumerable<double> lst) { (new list_of_positive_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "segment_radii"); }
        //public void put_segment_radii_untyped(IEnumerable lst) { (new list_of_positive_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "segment_radii"); }
        public list_of_positive_length_measure get_segment_depths() { return (new list_of_positive_length_measureSerializer()).FromAttr(m_instance, "segment_depths"); }
        public list_of_positive_length_measure _segment_depths { get { return get_segment_depths(); } }
        public void put_segment_depths(IEnumerable<double> lst) { (new list_of_positive_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "segment_depths"); }
        //public void put_segment_depths_untyped(IEnumerable lst) { (new list_of_positive_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "segment_depths"); }

        protected override TextValue EntityName() { return "solid_with_stepped_round_hole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_conical_bottom_round_hole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_conical_bottom_round_hole : solid_with_stepped_round_hole
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_conical_bottom_round_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_conical_bottom_round_hole(SdaiInstance instance) : base(instance) { }
        public solid_with_conical_bottom_round_hole() : base(0) { }

        public static implicit operator solid_with_conical_bottom_round_hole(SdaiInstance instance) => new solid_with_conical_bottom_round_hole(instance);

        /// <summary>
        /// Create new instace of solid_with_conical_bottom_round_hole and returns object of this class to interact with
        /// </summary>
        public static new solid_with_conical_bottom_round_hole Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_conical_bottom_round_hole"); Debug.Assert(inst != 0); return inst; }

        public double? get_semi_apex_angle() { return get_double("semi_apex_angle", ifcengine.sdaiREAL);}
        public double? _semi_apex_angle { get { return get_semi_apex_angle(); } }
        public void put_semi_apex_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "semi_apex_angle", ifcengine.sdaiREAL, ref value); }
        public double? get_tip_radius() { return get_double("tip_radius", ifcengine.sdaiREAL);}
        public double? _tip_radius { get { return get_tip_radius(); } }
        public void put_tip_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "tip_radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_conical_bottom_round_hole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_constant_radius_edge_blend
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_constant_radius_edge_blend : edge_blended_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_constant_radius_edge_blend
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_constant_radius_edge_blend(SdaiInstance instance) : base(instance) { }
        public solid_with_constant_radius_edge_blend() : base(0) { }

        public static implicit operator solid_with_constant_radius_edge_blend(SdaiInstance instance) => new solid_with_constant_radius_edge_blend(instance);

        /// <summary>
        /// Create new instace of solid_with_constant_radius_edge_blend and returns object of this class to interact with
        /// </summary>
        public static new solid_with_constant_radius_edge_blend Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_constant_radius_edge_blend"); Debug.Assert(inst != 0); return inst; }

        public double? get_radius() { return get_double("radius", ifcengine.sdaiREAL);}
        public double? _radius { get { return get_radius(); } }
        public void put_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_constant_radius_edge_blend"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_slot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_slot : solid_with_depression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_slot(SdaiInstance instance) : base(instance) { }
        public solid_with_slot() : base(0) { }

        public static implicit operator solid_with_slot(SdaiInstance instance) => new solid_with_slot(instance);

        public double? get_slot_width() { return get_double("slot_width", ifcengine.sdaiREAL);}
        public double? _slot_width { get { return get_slot_width(); } }
        public void put_slot_width(double value) { ifcengine.sdaiPutAttrBN(m_instance, "slot_width", ifcengine.sdaiREAL, ref value); }
        public ListOfLOGICAL_VALUE get_closed_ends() { return (new ListOfLOGICAL_VALUESerializer()).FromAttr(m_instance, "closed_ends"); }
        public ListOfLOGICAL_VALUE _closed_ends { get { return get_closed_ends(); } }
        public void put_closed_ends(IEnumerable<LOGICAL_VALUE> lst) { (new ListOfLOGICAL_VALUESerializer()).ToSdaiAggr(lst, m_instance, "closed_ends"); }
        //public void put_closed_ends_untyped(IEnumerable lst) { (new ListOfLOGICAL_VALUESerializer()).ToSdaiAggr(lst, m_instance, "closed_ends"); }
        public set_of_list_of_face_surface get_end_exit_faces() { return (new set_of_list_of_face_surfaceSerializer()).FromAttr(m_instance, "end_exit_faces"); }
        public set_of_list_of_face_surface _end_exit_faces { get { return get_end_exit_faces(); } }
        public void put_end_exit_faces(IEnumerable<list_of_face_surface> lst) { (new set_of_list_of_face_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "end_exit_faces"); }
        //public void put_end_exit_faces_untyped(IEnumerable lst) { (new set_of_list_of_face_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "end_exit_faces"); }

        protected override TextValue EntityName() { return "solid_with_slot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_curved_slot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_curved_slot : solid_with_slot
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_curved_slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_curved_slot(SdaiInstance instance) : base(instance) { }
        public solid_with_curved_slot() : base(0) { }

        public static implicit operator solid_with_curved_slot(SdaiInstance instance) => new solid_with_curved_slot(instance);

        /// <summary>
        /// Create new instace of solid_with_curved_slot and returns object of this class to interact with
        /// </summary>
        public static new solid_with_curved_slot Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_curved_slot"); Debug.Assert(inst != 0); return inst; }

        public bounded_curve get_slot_centreline() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "slot_centreline", ifcengine.sdaiINSTANCE, out inst); return new bounded_curve (inst); }
        public bounded_curve _slot_centreline { get { return get_slot_centreline(); } }
        public void put_slot_centreline(bounded_curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "slot_centreline", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "solid_with_curved_slot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_double_offset_chamfer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_double_offset_chamfer : solid_with_chamfered_edges
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_double_offset_chamfer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_double_offset_chamfer(SdaiInstance instance) : base(instance) { }
        public solid_with_double_offset_chamfer() : base(0) { }

        public static implicit operator solid_with_double_offset_chamfer(SdaiInstance instance) => new solid_with_double_offset_chamfer(instance);

        /// <summary>
        /// Create new instace of solid_with_double_offset_chamfer and returns object of this class to interact with
        /// </summary>
        public static new solid_with_double_offset_chamfer Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_double_offset_chamfer"); Debug.Assert(inst != 0); return inst; }

        public double? get_left_offset_distance() { return get_double("left_offset_distance", ifcengine.sdaiREAL);}
        public double? _left_offset_distance { get { return get_left_offset_distance(); } }
        public void put_left_offset_distance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "left_offset_distance", ifcengine.sdaiREAL, ref value); }
        public double? get_right_offset_distance() { return get_double("right_offset_distance", ifcengine.sdaiREAL);}
        public double? _right_offset_distance { get { return get_right_offset_distance(); } }
        public void put_right_offset_distance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "right_offset_distance", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_double_offset_chamfer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_flat_bottom_round_hole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_flat_bottom_round_hole : solid_with_stepped_round_hole
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_flat_bottom_round_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_flat_bottom_round_hole(SdaiInstance instance) : base(instance) { }
        public solid_with_flat_bottom_round_hole() : base(0) { }

        public static implicit operator solid_with_flat_bottom_round_hole(SdaiInstance instance) => new solid_with_flat_bottom_round_hole(instance);

        /// <summary>
        /// Create new instace of solid_with_flat_bottom_round_hole and returns object of this class to interact with
        /// </summary>
        public static new solid_with_flat_bottom_round_hole Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_flat_bottom_round_hole"); Debug.Assert(inst != 0); return inst; }

        public double? get_fillet_radius() { return get_double("fillet_radius", ifcengine.sdaiREAL);}
        public double? _fillet_radius { get { return get_fillet_radius(); } }
        public void put_fillet_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "fillet_radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_flat_bottom_round_hole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_general_pocket
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_general_pocket : solid_with_pocket
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_general_pocket
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_general_pocket(SdaiInstance instance) : base(instance) { }
        public solid_with_general_pocket() : base(0) { }

        public static implicit operator solid_with_general_pocket(SdaiInstance instance) => new solid_with_general_pocket(instance);

        /// <summary>
        /// Create new instace of solid_with_general_pocket and returns object of this class to interact with
        /// </summary>
        public static new solid_with_general_pocket Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_general_pocket"); Debug.Assert(inst != 0); return inst; }

        public positioned_sketch get_profile() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "profile", ifcengine.sdaiINSTANCE, out inst); return new positioned_sketch (inst); }
        public positioned_sketch _profile { get { return get_profile(); } }
        public void put_profile(positioned_sketch inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "profile", ifcengine.sdaiINSTANCE, i); }
        public point get_reference_point() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_point", ifcengine.sdaiINSTANCE, out inst); return new point (inst); }
        public point _reference_point { get { return get_reference_point(); } }
        public void put_reference_point(point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "reference_point", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "solid_with_general_pocket"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_general_protrusion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_general_protrusion : solid_with_protrusion
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_general_protrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_general_protrusion(SdaiInstance instance) : base(instance) { }
        public solid_with_general_protrusion() : base(0) { }

        public static implicit operator solid_with_general_protrusion(SdaiInstance instance) => new solid_with_general_protrusion(instance);

        /// <summary>
        /// Create new instace of solid_with_general_protrusion and returns object of this class to interact with
        /// </summary>
        public static new solid_with_general_protrusion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_general_protrusion"); Debug.Assert(inst != 0); return inst; }

        public positioned_sketch get_profile() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "profile", ifcengine.sdaiINSTANCE, out inst); return new positioned_sketch (inst); }
        public positioned_sketch _profile { get { return get_profile(); } }
        public void put_profile(positioned_sketch inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "profile", ifcengine.sdaiINSTANCE, i); }
        public point get_reference_point() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "reference_point", ifcengine.sdaiINSTANCE, out inst); return new point (inst); }
        public point _reference_point { get { return get_reference_point(); } }
        public void put_reference_point(point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "reference_point", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "solid_with_general_protrusion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_groove
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_groove : solid_with_depression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_groove
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_groove(SdaiInstance instance) : base(instance) { }
        public solid_with_groove() : base(0) { }

        public static implicit operator solid_with_groove(SdaiInstance instance) => new solid_with_groove(instance);

        /// <summary>
        /// Create new instace of solid_with_groove and returns object of this class to interact with
        /// </summary>
        public static new solid_with_groove Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_groove"); Debug.Assert(inst != 0); return inst; }

        public double? get_groove_radius() { return get_double("groove_radius", ifcengine.sdaiREAL);}
        public double? _groove_radius { get { return get_groove_radius(); } }
        public void put_groove_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "groove_radius", ifcengine.sdaiREAL, ref value); }
        public double? get_groove_width() { return get_double("groove_width", ifcengine.sdaiREAL);}
        public double? _groove_width { get { return get_groove_width(); } }
        public void put_groove_width(double value) { ifcengine.sdaiPutAttrBN(m_instance, "groove_width", ifcengine.sdaiREAL, ref value); }
        public double? get_draft_angle() { return get_double("draft_angle", ifcengine.sdaiREAL);}
        public double? _draft_angle { get { return get_draft_angle(); } }
        public void put_draft_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "draft_angle", ifcengine.sdaiREAL, ref value); }
        public double? get_floor_fillet_radius() { return get_double("floor_fillet_radius", ifcengine.sdaiREAL);}
        public double? _floor_fillet_radius { get { return get_floor_fillet_radius(); } }
        public void put_floor_fillet_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "floor_fillet_radius", ifcengine.sdaiREAL, ref value); }
        public bool? get_external_groove() { return get_bool("external_groove", ifcengine.sdaiBOOLEAN);}
        public bool? _external_groove { get { return get_external_groove(); } }
        public void put_external_groove(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "external_groove", ifcengine.sdaiBOOLEAN, ref value); }

        protected override TextValue EntityName() { return "solid_with_groove"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_incomplete_circular_pattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_incomplete_circular_pattern : solid_with_circular_pattern
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_incomplete_circular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_incomplete_circular_pattern(SdaiInstance instance) : base(instance) { }
        public solid_with_incomplete_circular_pattern() : base(0) { }

        public static implicit operator solid_with_incomplete_circular_pattern(SdaiInstance instance) => new solid_with_incomplete_circular_pattern(instance);

        /// <summary>
        /// Create new instace of solid_with_incomplete_circular_pattern and returns object of this class to interact with
        /// </summary>
        public static new solid_with_incomplete_circular_pattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_incomplete_circular_pattern"); Debug.Assert(inst != 0); return inst; }

        public set_of_positive_integer get_omitted_instances() { return (new set_of_positive_integerSerializer()).FromAttr(m_instance, "omitted_instances"); }
        public set_of_positive_integer _omitted_instances { get { return get_omitted_instances(); } }
        public void put_omitted_instances(IEnumerable<IntValue> lst) { (new set_of_positive_integerSerializer()).ToSdaiAggr(lst, m_instance, "omitted_instances"); }
        //public void put_omitted_instances_untyped(IEnumerable lst) { (new set_of_positive_integerSerializer()).ToSdaiAggr(lst, m_instance, "omitted_instances"); }

        protected override TextValue EntityName() { return "solid_with_incomplete_circular_pattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_rectangular_pattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_rectangular_pattern : solid_with_shape_element_pattern
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_rectangular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_rectangular_pattern(SdaiInstance instance) : base(instance) { }
        public solid_with_rectangular_pattern() : base(0) { }

        public static implicit operator solid_with_rectangular_pattern(SdaiInstance instance) => new solid_with_rectangular_pattern(instance);

        /// <summary>
        /// Create new instace of solid_with_rectangular_pattern and returns object of this class to interact with
        /// </summary>
        public static new solid_with_rectangular_pattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_rectangular_pattern"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_row_count() { return get_IntValue("row_count", ifcengine.sdaiINTEGER);}
        public IntValue? _row_count { get { return get_row_count(); } }
        public void put_row_count(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "row_count", ifcengine.sdaiINTEGER, ref value); }
        public IntValue? get_column_count() { return get_IntValue("column_count", ifcengine.sdaiINTEGER);}
        public IntValue? _column_count { get { return get_column_count(); } }
        public void put_column_count(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "column_count", ifcengine.sdaiINTEGER, ref value); }
        public double? get_row_spacing() { return get_double("row_spacing", ifcengine.sdaiREAL);}
        public double? _row_spacing { get { return get_row_spacing(); } }
        public void put_row_spacing(double value) { ifcengine.sdaiPutAttrBN(m_instance, "row_spacing", ifcengine.sdaiREAL, ref value); }
        public double? get_column_spacing() { return get_double("column_spacing", ifcengine.sdaiREAL);}
        public double? _column_spacing { get { return get_column_spacing(); } }
        public void put_column_spacing(double value) { ifcengine.sdaiPutAttrBN(m_instance, "column_spacing", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_rectangular_pattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_incomplete_rectangular_pattern
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_incomplete_rectangular_pattern : solid_with_rectangular_pattern
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_incomplete_rectangular_pattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_incomplete_rectangular_pattern(SdaiInstance instance) : base(instance) { }
        public solid_with_incomplete_rectangular_pattern() : base(0) { }

        public static implicit operator solid_with_incomplete_rectangular_pattern(SdaiInstance instance) => new solid_with_incomplete_rectangular_pattern(instance);

        /// <summary>
        /// Create new instace of solid_with_incomplete_rectangular_pattern and returns object of this class to interact with
        /// </summary>
        public static new solid_with_incomplete_rectangular_pattern Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_incomplete_rectangular_pattern"); Debug.Assert(inst != 0); return inst; }

        public list_of_set_of_positive_integer get_omitted_instances() { return (new list_of_set_of_positive_integerSerializer()).FromAttr(m_instance, "omitted_instances"); }
        public list_of_set_of_positive_integer _omitted_instances { get { return get_omitted_instances(); } }
        public void put_omitted_instances(IEnumerable<set_of_positive_integer> lst) { (new list_of_set_of_positive_integerSerializer()).ToSdaiAggr(lst, m_instance, "omitted_instances"); }
        //public void put_omitted_instances_untyped(IEnumerable lst) { (new list_of_set_of_positive_integerSerializer()).ToSdaiAggr(lst, m_instance, "omitted_instances"); }

        protected override TextValue EntityName() { return "solid_with_incomplete_rectangular_pattern"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_rectangular_pocket
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_rectangular_pocket : solid_with_pocket
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_rectangular_pocket
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_rectangular_pocket(SdaiInstance instance) : base(instance) { }
        public solid_with_rectangular_pocket() : base(0) { }

        public static implicit operator solid_with_rectangular_pocket(SdaiInstance instance) => new solid_with_rectangular_pocket(instance);

        /// <summary>
        /// Create new instace of solid_with_rectangular_pocket and returns object of this class to interact with
        /// </summary>
        public static new solid_with_rectangular_pocket Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_rectangular_pocket"); Debug.Assert(inst != 0); return inst; }

        public double? get_pocket_length() { return get_double("pocket_length", ifcengine.sdaiREAL);}
        public double? _pocket_length { get { return get_pocket_length(); } }
        public void put_pocket_length(double value) { ifcengine.sdaiPutAttrBN(m_instance, "pocket_length", ifcengine.sdaiREAL, ref value); }
        public double? get_pocket_width() { return get_double("pocket_width", ifcengine.sdaiREAL);}
        public double? _pocket_width { get { return get_pocket_width(); } }
        public void put_pocket_width(double value) { ifcengine.sdaiPutAttrBN(m_instance, "pocket_width", ifcengine.sdaiREAL, ref value); }
        public double? get_corner_radius() { return get_double("corner_radius", ifcengine.sdaiREAL);}
        public double? _corner_radius { get { return get_corner_radius(); } }
        public void put_corner_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "corner_radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_rectangular_pocket"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_rectangular_protrusion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_rectangular_protrusion : solid_with_protrusion
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_rectangular_protrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_rectangular_protrusion(SdaiInstance instance) : base(instance) { }
        public solid_with_rectangular_protrusion() : base(0) { }

        public static implicit operator solid_with_rectangular_protrusion(SdaiInstance instance) => new solid_with_rectangular_protrusion(instance);

        /// <summary>
        /// Create new instace of solid_with_rectangular_protrusion and returns object of this class to interact with
        /// </summary>
        public static new solid_with_rectangular_protrusion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_rectangular_protrusion"); Debug.Assert(inst != 0); return inst; }

        public double? get_protrusion_length() { return get_double("protrusion_length", ifcengine.sdaiREAL);}
        public double? _protrusion_length { get { return get_protrusion_length(); } }
        public void put_protrusion_length(double value) { ifcengine.sdaiPutAttrBN(m_instance, "protrusion_length", ifcengine.sdaiREAL, ref value); }
        public double? get_protrusion_width() { return get_double("protrusion_width", ifcengine.sdaiREAL);}
        public double? _protrusion_width { get { return get_protrusion_width(); } }
        public void put_protrusion_width(double value) { ifcengine.sdaiPutAttrBN(m_instance, "protrusion_width", ifcengine.sdaiREAL, ref value); }
        public double? get_protrusion_corner_radius() { return get_double("protrusion_corner_radius", ifcengine.sdaiREAL);}
        public double? _protrusion_corner_radius { get { return get_protrusion_corner_radius(); } }
        public void put_protrusion_corner_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "protrusion_corner_radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_rectangular_protrusion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_single_offset_chamfer
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_single_offset_chamfer : solid_with_chamfered_edges
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_single_offset_chamfer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_single_offset_chamfer(SdaiInstance instance) : base(instance) { }
        public solid_with_single_offset_chamfer() : base(0) { }

        public static implicit operator solid_with_single_offset_chamfer(SdaiInstance instance) => new solid_with_single_offset_chamfer(instance);

        /// <summary>
        /// Create new instace of solid_with_single_offset_chamfer and returns object of this class to interact with
        /// </summary>
        public static new solid_with_single_offset_chamfer Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_single_offset_chamfer"); Debug.Assert(inst != 0); return inst; }

        public double? get_offset_distance() { return get_double("offset_distance", ifcengine.sdaiREAL);}
        public double? _offset_distance { get { return get_offset_distance(); } }
        public void put_offset_distance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "offset_distance", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_single_offset_chamfer"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_spherical_bottom_round_hole
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_spherical_bottom_round_hole : solid_with_stepped_round_hole
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_spherical_bottom_round_hole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_spherical_bottom_round_hole(SdaiInstance instance) : base(instance) { }
        public solid_with_spherical_bottom_round_hole() : base(0) { }

        public static implicit operator solid_with_spherical_bottom_round_hole(SdaiInstance instance) => new solid_with_spherical_bottom_round_hole(instance);

        /// <summary>
        /// Create new instace of solid_with_spherical_bottom_round_hole and returns object of this class to interact with
        /// </summary>
        public static new solid_with_spherical_bottom_round_hole Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_spherical_bottom_round_hole"); Debug.Assert(inst != 0); return inst; }

        public double? get_sphere_radius() { return get_double("sphere_radius", ifcengine.sdaiREAL);}
        public double? _sphere_radius { get { return get_sphere_radius(); } }
        public void put_sphere_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "sphere_radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_spherical_bottom_round_hole"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_stepped_round_hole_and_conical_transitions
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_stepped_round_hole_and_conical_transitions : solid_with_stepped_round_hole
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_stepped_round_hole_and_conical_transitions
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_stepped_round_hole_and_conical_transitions(SdaiInstance instance) : base(instance) { }
        public solid_with_stepped_round_hole_and_conical_transitions() : base(0) { }

        public static implicit operator solid_with_stepped_round_hole_and_conical_transitions(SdaiInstance instance) => new solid_with_stepped_round_hole_and_conical_transitions(instance);

        /// <summary>
        /// Create new instace of solid_with_stepped_round_hole_and_conical_transitions and returns object of this class to interact with
        /// </summary>
        public static new solid_with_stepped_round_hole_and_conical_transitions Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_stepped_round_hole_and_conical_transitions"); Debug.Assert(inst != 0); return inst; }

        public set_of_conical_stepped_hole_transition get_conical_transitions() { return (new set_of_conical_stepped_hole_transitionSerializer()).FromAttr(m_instance, "conical_transitions"); }
        public set_of_conical_stepped_hole_transition _conical_transitions { get { return get_conical_transitions(); } }
        public void put_conical_transitions(IEnumerable<conical_stepped_hole_transition> lst) { (new set_of_conical_stepped_hole_transitionSerializer()).ToSdaiAggr(lst, m_instance, "conical_transitions"); }
        //public void put_conical_transitions_untyped(IEnumerable lst) { (new set_of_conical_stepped_hole_transitionSerializer()).ToSdaiAggr(lst, m_instance, "conical_transitions"); }

        protected override TextValue EntityName() { return "solid_with_stepped_round_hole_and_conical_transitions"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_straight_slot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_straight_slot : solid_with_slot
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_straight_slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_straight_slot(SdaiInstance instance) : base(instance) { }
        public solid_with_straight_slot() : base(0) { }

        public static implicit operator solid_with_straight_slot(SdaiInstance instance) => new solid_with_straight_slot(instance);

        /// <summary>
        /// Create new instace of solid_with_straight_slot and returns object of this class to interact with
        /// </summary>
        public static new solid_with_straight_slot Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_straight_slot"); Debug.Assert(inst != 0); return inst; }

        public double? get_slot_length() { return get_double("slot_length", ifcengine.sdaiREAL);}
        public double? _slot_length { get { return get_slot_length(); } }
        public void put_slot_length(double value) { ifcengine.sdaiPutAttrBN(m_instance, "slot_length", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_straight_slot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_tee_section_slot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_tee_section_slot : solid_with_slot
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_tee_section_slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_tee_section_slot(SdaiInstance instance) : base(instance) { }
        public solid_with_tee_section_slot() : base(0) { }

        public static implicit operator solid_with_tee_section_slot(SdaiInstance instance) => new solid_with_tee_section_slot(instance);

        /// <summary>
        /// Create new instace of solid_with_tee_section_slot and returns object of this class to interact with
        /// </summary>
        public static new solid_with_tee_section_slot Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_tee_section_slot"); Debug.Assert(inst != 0); return inst; }

        public double? get_tee_section_width() { return get_double("tee_section_width", ifcengine.sdaiREAL);}
        public double? _tee_section_width { get { return get_tee_section_width(); } }
        public void put_tee_section_width(double value) { ifcengine.sdaiPutAttrBN(m_instance, "tee_section_width", ifcengine.sdaiREAL, ref value); }
        public double? get_collar_depth() { return get_double("collar_depth", ifcengine.sdaiREAL);}
        public double? _collar_depth { get { return get_collar_depth(); } }
        public void put_collar_depth(double value) { ifcengine.sdaiPutAttrBN(m_instance, "collar_depth", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_tee_section_slot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_through_depression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_through_depression : solid_with_depression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_through_depression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_through_depression(SdaiInstance instance) : base(instance) { }
        public solid_with_through_depression() : base(0) { }

        public static implicit operator solid_with_through_depression(SdaiInstance instance) => new solid_with_through_depression(instance);

        /// <summary>
        /// Create new instace of solid_with_through_depression and returns object of this class to interact with
        /// </summary>
        public static new solid_with_through_depression Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_through_depression"); Debug.Assert(inst != 0); return inst; }

        public set_of_face_surface get_exit_faces() { return (new set_of_face_surfaceSerializer()).FromAttr(m_instance, "exit_faces"); }
        public set_of_face_surface _exit_faces { get { return get_exit_faces(); } }
        public void put_exit_faces(IEnumerable<face_surface> lst) { (new set_of_face_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "exit_faces"); }
        //public void put_exit_faces_untyped(IEnumerable lst) { (new set_of_face_surfaceSerializer()).ToSdaiAggr(lst, m_instance, "exit_faces"); }

        protected override TextValue EntityName() { return "solid_with_through_depression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_trapezoidal_section_slot
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_trapezoidal_section_slot : solid_with_slot
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_trapezoidal_section_slot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_trapezoidal_section_slot(SdaiInstance instance) : base(instance) { }
        public solid_with_trapezoidal_section_slot() : base(0) { }

        public static implicit operator solid_with_trapezoidal_section_slot(SdaiInstance instance) => new solid_with_trapezoidal_section_slot(instance);

        /// <summary>
        /// Create new instace of solid_with_trapezoidal_section_slot and returns object of this class to interact with
        /// </summary>
        public static new solid_with_trapezoidal_section_slot Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_trapezoidal_section_slot"); Debug.Assert(inst != 0); return inst; }

        public double? get_draft_angle() { return get_double("draft_angle", ifcengine.sdaiREAL);}
        public double? _draft_angle { get { return get_draft_angle(); } }
        public void put_draft_angle(double value) { ifcengine.sdaiPutAttrBN(m_instance, "draft_angle", ifcengine.sdaiREAL, ref value); }
        public double? get_floor_fillet_radius() { return get_double("floor_fillet_radius", ifcengine.sdaiREAL);}
        public double? _floor_fillet_radius { get { return get_floor_fillet_radius(); } }
        public void put_floor_fillet_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "floor_fillet_radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "solid_with_trapezoidal_section_slot"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of solid_with_variable_radius_edge_blend
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class solid_with_variable_radius_edge_blend : edge_blended_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of solid_with_variable_radius_edge_blend
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public solid_with_variable_radius_edge_blend(SdaiInstance instance) : base(instance) { }
        public solid_with_variable_radius_edge_blend() : base(0) { }

        public static implicit operator solid_with_variable_radius_edge_blend(SdaiInstance instance) => new solid_with_variable_radius_edge_blend(instance);

        /// <summary>
        /// Create new instace of solid_with_variable_radius_edge_blend and returns object of this class to interact with
        /// </summary>
        public static new solid_with_variable_radius_edge_blend Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "solid_with_variable_radius_edge_blend"); Debug.Assert(inst != 0); return inst; }

        public list_of_point get_point_list() { return (new list_of_pointSerializer()).FromAttr(m_instance, "point_list"); }
        public list_of_point _point_list { get { return get_point_list(); } }
        public void put_point_list(IEnumerable<point> lst) { (new list_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "point_list"); }
        //public void put_point_list_untyped(IEnumerable lst) { (new list_of_pointSerializer()).ToSdaiAggr(lst, m_instance, "point_list"); }
        public list_of_positive_length_measure get_radius_list() { return (new list_of_positive_length_measureSerializer()).FromAttr(m_instance, "radius_list"); }
        public list_of_positive_length_measure _radius_list { get { return get_radius_list(); } }
        public void put_radius_list(IEnumerable<double> lst) { (new list_of_positive_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "radius_list"); }
        //public void put_radius_list_untyped(IEnumerable lst) { (new list_of_positive_length_measureSerializer()).ToSdaiAggr(lst, m_instance, "radius_list"); }
        public list_of_blend_radius_variation_type get_edge_function_list() { return (new list_of_blend_radius_variation_typeSerializer()).FromAttr(m_instance, "edge_function_list"); }
        public list_of_blend_radius_variation_type _edge_function_list { get { return get_edge_function_list(); } }
        public void put_edge_function_list(IEnumerable<blend_radius_variation_type> lst) { (new list_of_blend_radius_variation_typeSerializer()).ToSdaiAggr(lst, m_instance, "edge_function_list"); }
        //public void put_edge_function_list_untyped(IEnumerable lst) { (new list_of_blend_radius_variation_typeSerializer()).ToSdaiAggr(lst, m_instance, "edge_function_list"); }

        protected override TextValue EntityName() { return "solid_with_variable_radius_edge_blend"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of source_for_requirement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class source_for_requirement : group_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of source_for_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public source_for_requirement(SdaiInstance instance) : base(instance) { }
        public source_for_requirement() : base(0) { }

        public static implicit operator source_for_requirement(SdaiInstance instance) => new source_for_requirement(instance);

        /// <summary>
        /// Create new instace of source_for_requirement and returns object of this class to interact with
        /// </summary>
        public static new source_for_requirement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "source_for_requirement"); Debug.Assert(inst != 0); return inst; }

        public set_of_requirement_source_item get_items() { return (new set_of_requirement_source_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_requirement_source_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<requirement_source_item> lst) { (new set_of_requirement_source_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_requirement_source_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "source_for_requirement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of sourced_requirement
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class sourced_requirement : group_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of sourced_requirement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public sourced_requirement(SdaiInstance instance) : base(instance) { }
        public sourced_requirement() : base(0) { }

        public static implicit operator sourced_requirement(SdaiInstance instance) => new sourced_requirement(instance);

        /// <summary>
        /// Create new instace of sourced_requirement and returns object of this class to interact with
        /// </summary>
        public static new sourced_requirement Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "sourced_requirement"); Debug.Assert(inst != 0); return inst; }

        public set_of_product_definition get_items() { return (new set_of_product_definitionSerializer()).FromAttr(m_instance, "items"); }
        public set_of_product_definition _items { get { return get_items(); } }
        public void put_items(IEnumerable<product_definition> lst) { (new set_of_product_definitionSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_product_definitionSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "sourced_requirement"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of specification_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class specification_definition : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of specification_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public specification_definition(SdaiInstance instance) : base(instance) { }
        public specification_definition() : base(0) { }

        public static implicit operator specification_definition(SdaiInstance instance) => new specification_definition(instance);

        /// <summary>
        /// Create new instace of specification_definition and returns object of this class to interact with
        /// </summary>
        public static new specification_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "specification_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "specification_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of specified_higher_usage_occurrence
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class specified_higher_usage_occurrence : assembly_component_usage
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of specified_higher_usage_occurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public specified_higher_usage_occurrence(SdaiInstance instance) : base(instance) { }
        public specified_higher_usage_occurrence() : base(0) { }

        public static implicit operator specified_higher_usage_occurrence(SdaiInstance instance) => new specified_higher_usage_occurrence(instance);

        /// <summary>
        /// Create new instace of specified_higher_usage_occurrence and returns object of this class to interact with
        /// </summary>
        public static new specified_higher_usage_occurrence Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "specified_higher_usage_occurrence"); Debug.Assert(inst != 0); return inst; }

        public assembly_component_usage get_upper_usage() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "upper_usage", ifcengine.sdaiINSTANCE, out inst); return new assembly_component_usage (inst); }
        public assembly_component_usage _upper_usage { get { return get_upper_usage(); } }
        public void put_upper_usage(assembly_component_usage inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "upper_usage", ifcengine.sdaiINSTANCE, i); }
        public next_assembly_usage_occurrence get_next_usage() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "next_usage", ifcengine.sdaiINSTANCE, out inst); return new next_assembly_usage_occurrence (inst); }
        public next_assembly_usage_occurrence _next_usage { get { return get_next_usage(); } }
        public void put_next_usage(next_assembly_usage_occurrence inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "next_usage", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "specified_higher_usage_occurrence"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of sphere
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class sphere : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of sphere
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public sphere(SdaiInstance instance) : base(instance) { }
        public sphere() : base(0) { }

        public static implicit operator sphere(SdaiInstance instance) => new sphere(instance);

        /// <summary>
        /// Create new instace of sphere and returns object of this class to interact with
        /// </summary>
        public static new sphere Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "sphere"); Debug.Assert(inst != 0); return inst; }

        public double? get_radius() { return get_double("radius", ifcengine.sdaiREAL);}
        public double? _radius { get { return get_radius(); } }
        public void put_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref value); }
        public point get_centre() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "centre", ifcengine.sdaiINSTANCE, out inst); return new point (inst); }
        public point _centre { get { return get_centre(); } }
        public void put_centre(point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "centre", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "sphere"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of spherical_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class spherical_surface : elementary_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of spherical_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public spherical_surface(SdaiInstance instance) : base(instance) { }
        public spherical_surface() : base(0) { }

        public static implicit operator spherical_surface(SdaiInstance instance) => new spherical_surface(instance);

        /// <summary>
        /// Create new instace of spherical_surface and returns object of this class to interact with
        /// </summary>
        public static new spherical_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "spherical_surface"); Debug.Assert(inst != 0); return inst; }

        public double? get_radius() { return get_double("radius", ifcengine.sdaiREAL);}
        public double? _radius { get { return get_radius(); } }
        public void put_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "spherical_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of start_request
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class start_request : action_request_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of start_request
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public start_request(SdaiInstance instance) : base(instance) { }
        public start_request() : base(0) { }

        public static implicit operator start_request(SdaiInstance instance) => new start_request(instance);

        /// <summary>
        /// Create new instace of start_request and returns object of this class to interact with
        /// </summary>
        public static new start_request Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "start_request"); Debug.Assert(inst != 0); return inst; }

        public set_of_start_request_item get_items() { return (new set_of_start_request_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_start_request_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<start_request_item> lst) { (new set_of_start_request_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_start_request_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "start_request"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of start_work
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class start_work : action_assignment
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of start_work
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public start_work(SdaiInstance instance) : base(instance) { }
        public start_work() : base(0) { }

        public static implicit operator start_work(SdaiInstance instance) => new start_work(instance);

        /// <summary>
        /// Create new instace of start_work and returns object of this class to interact with
        /// </summary>
        public static new start_work Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "start_work"); Debug.Assert(inst != 0); return inst; }

        public set_of_work_item get_items() { return (new set_of_work_itemSerializer()).FromAttr(m_instance, "items"); }
        public set_of_work_item _items { get { return get_items(); } }
        public void put_items(IEnumerable<work_item> lst) { (new set_of_work_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }
        //public void put_items_untyped(IEnumerable lst) { (new set_of_work_itemSerializer()).ToSdaiAggr(lst, m_instance, "items"); }

        protected override TextValue EntityName() { return "start_work"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of straightness_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class straightness_tolerance : geometric_tolerance
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of straightness_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public straightness_tolerance(SdaiInstance instance) : base(instance) { }
        public straightness_tolerance() : base(0) { }

        public static implicit operator straightness_tolerance(SdaiInstance instance) => new straightness_tolerance(instance);

        /// <summary>
        /// Create new instace of straightness_tolerance and returns object of this class to interact with
        /// </summary>
        public static new straightness_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "straightness_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "straightness_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structured_dimension_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structured_dimension_callout : draughting_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structured_dimension_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structured_dimension_callout(SdaiInstance instance) : base(instance) { }
        public structured_dimension_callout() : base(0) { }

        public static implicit operator structured_dimension_callout(SdaiInstance instance) => new structured_dimension_callout(instance);

        /// <summary>
        /// Create new instace of structured_dimension_callout and returns object of this class to interact with
        /// </summary>
        public static new structured_dimension_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structured_dimension_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "structured_dimension_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structured_text_composition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structured_text_composition : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structured_text_composition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structured_text_composition(SdaiInstance instance) : base(instance) { }
        public structured_text_composition() : base(0) { }

        public static implicit operator structured_text_composition(SdaiInstance instance) => new structured_text_composition(instance);

        /// <summary>
        /// Create new instace of structured_text_composition and returns object of this class to interact with
        /// </summary>
        public static new structured_text_composition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structured_text_composition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "structured_text_composition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of structured_text_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class structured_text_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of structured_text_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public structured_text_representation(SdaiInstance instance) : base(instance) { }
        public structured_text_representation() : base(0) { }

        public static implicit operator structured_text_representation(SdaiInstance instance) => new structured_text_representation(instance);

        /// <summary>
        /// Create new instace of structured_text_representation and returns object of this class to interact with
        /// </summary>
        public static new structured_text_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "structured_text_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "structured_text_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of subedge
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class subedge : edge
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of subedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public subedge(SdaiInstance instance) : base(instance) { }
        public subedge() : base(0) { }

        public static implicit operator subedge(SdaiInstance instance) => new subedge(instance);

        /// <summary>
        /// Create new instace of subedge and returns object of this class to interact with
        /// </summary>
        public static new subedge Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "subedge"); Debug.Assert(inst != 0); return inst; }

        public edge get_parent_edge() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_edge", ifcengine.sdaiINSTANCE, out inst); return new edge (inst); }
        public edge _parent_edge { get { return get_parent_edge(); } }
        public void put_parent_edge(edge inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "parent_edge", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "subedge"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of subface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class subface : face
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of subface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public subface(SdaiInstance instance) : base(instance) { }
        public subface() : base(0) { }

        public static implicit operator subface(SdaiInstance instance) => new subface(instance);

        /// <summary>
        /// Create new instace of subface and returns object of this class to interact with
        /// </summary>
        public static new subface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "subface"); Debug.Assert(inst != 0); return inst; }

        public face get_parent_face() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_face", ifcengine.sdaiINSTANCE, out inst); return new face (inst); }
        public face _parent_face { get { return get_parent_face(); } }
        public void put_parent_face(face inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "parent_face", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "subface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of supplied_part_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class supplied_part_relationship : product_definition_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of supplied_part_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public supplied_part_relationship(SdaiInstance instance) : base(instance) { }
        public supplied_part_relationship() : base(0) { }

        public static implicit operator supplied_part_relationship(SdaiInstance instance) => new supplied_part_relationship(instance);

        /// <summary>
        /// Create new instace of supplied_part_relationship and returns object of this class to interact with
        /// </summary>
        public static new supplied_part_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "supplied_part_relationship"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "supplied_part_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_condition_callout
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_condition_callout : draughting_callout
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_condition_callout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_condition_callout(SdaiInstance instance) : base(instance) { }
        public surface_condition_callout() : base(0) { }

        public static implicit operator surface_condition_callout(SdaiInstance instance) => new surface_condition_callout(instance);

        /// <summary>
        /// Create new instace of surface_condition_callout and returns object of this class to interact with
        /// </summary>
        public static new surface_condition_callout Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_condition_callout"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "surface_condition_callout"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of swept_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class swept_surface : surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of swept_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public swept_surface(SdaiInstance instance) : base(instance) { }
        public swept_surface() : base(0) { }

        public static implicit operator swept_surface(SdaiInstance instance) => new swept_surface(instance);

        /// <summary>
        /// Create new instace of swept_surface and returns object of this class to interact with
        /// </summary>
        public static new swept_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "swept_surface"); Debug.Assert(inst != 0); return inst; }

        public curve get_swept_curve() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "swept_curve", ifcengine.sdaiINSTANCE, out inst); return new curve (inst); }
        public curve _swept_curve { get { return get_swept_curve(); } }
        public void put_swept_curve(curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "swept_curve", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "swept_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_of_linear_extrusion
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_of_linear_extrusion : swept_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_of_linear_extrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_of_linear_extrusion(SdaiInstance instance) : base(instance) { }
        public surface_of_linear_extrusion() : base(0) { }

        public static implicit operator surface_of_linear_extrusion(SdaiInstance instance) => new surface_of_linear_extrusion(instance);

        /// <summary>
        /// Create new instace of surface_of_linear_extrusion and returns object of this class to interact with
        /// </summary>
        public static new surface_of_linear_extrusion Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_of_linear_extrusion"); Debug.Assert(inst != 0); return inst; }

        public vector get_extrusion_axis() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extrusion_axis", ifcengine.sdaiINSTANCE, out inst); return new vector (inst); }
        public vector _extrusion_axis { get { return get_extrusion_axis(); } }
        public void put_extrusion_axis(vector inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "extrusion_axis", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "surface_of_linear_extrusion"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_of_revolution
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_of_revolution : swept_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_of_revolution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_of_revolution(SdaiInstance instance) : base(instance) { }
        public surface_of_revolution() : base(0) { }

        public static implicit operator surface_of_revolution(SdaiInstance instance) => new surface_of_revolution(instance);

        /// <summary>
        /// Create new instace of surface_of_revolution and returns object of this class to interact with
        /// </summary>
        public static new surface_of_revolution Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_of_revolution"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement get_axis_position() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "axis_position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement (inst); }
        public axis1_placement _axis_position { get { return get_axis_position(); } }
        public void put_axis_position(axis1_placement inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "axis_position", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "surface_of_revolution"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_patch
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_patch : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_patch
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_patch(SdaiInstance instance) : base(instance) { }
        public surface_patch() : base(0) { }

        public static implicit operator surface_patch(SdaiInstance instance) => new surface_patch(instance);

        /// <summary>
        /// Create new instace of surface_patch and returns object of this class to interact with
        /// </summary>
        public static new surface_patch Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_patch"); Debug.Assert(inst != 0); return inst; }

        public bounded_surface get_parent_surface() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, out inst); return new bounded_surface (inst); }
        public bounded_surface _parent_surface { get { return get_parent_surface(); } }
        public void put_parent_surface(bounded_surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, i); }
        public transition_code? get_u_transition() { var str = get_string("u_transition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.transition_code_); return EnumValue<transition_code>.FromIndex(ind); }
        public transition_code? _u_transition { get { return get_u_transition(); } }
        public void put_u_transition(transition_code value) { var str = EnumString<transition_code>.FromValue(value, EnumNames.transition_code_); ifcengine.sdaiPutAttrBN(m_instance, "u_transition", ifcengine.sdaiENUM, str); }
        public transition_code? get_v_transition() { var str = get_string("v_transition", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.transition_code_); return EnumValue<transition_code>.FromIndex(ind); }
        public transition_code? _v_transition { get { return get_v_transition(); } }
        public void put_v_transition(transition_code value) { var str = EnumString<transition_code>.FromValue(value, EnumNames.transition_code_); ifcengine.sdaiPutAttrBN(m_instance, "v_transition", ifcengine.sdaiENUM, str); }
        public bool? get_u_sense() { return get_bool("u_sense", ifcengine.sdaiBOOLEAN);}
        public bool? _u_sense { get { return get_u_sense(); } }
        public void put_u_sense(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "u_sense", ifcengine.sdaiBOOLEAN, ref value); }
        public bool? get_v_sense() { return get_bool("v_sense", ifcengine.sdaiBOOLEAN);}
        public bool? _v_sense { get { return get_v_sense(); } }
        public void put_v_sense(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "v_sense", ifcengine.sdaiBOOLEAN, ref value); }
        public bag_of_rectangular_composite_surface get_using_surfaces() { return (new bag_of_rectangular_composite_surfaceSerializer()).FromAttr(m_instance, "using_surfaces"); }
        public bag_of_rectangular_composite_surface _using_surfaces { get { return get_using_surfaces(); } }

        protected override TextValue EntityName() { return "surface_patch"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_profile_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_profile_tolerance : geometric_tolerance
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_profile_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_profile_tolerance(SdaiInstance instance) : base(instance) { }
        public surface_profile_tolerance() : base(0) { }

        public static implicit operator surface_profile_tolerance(SdaiInstance instance) => new surface_profile_tolerance(instance);

        /// <summary>
        /// Create new instace of surface_profile_tolerance and returns object of this class to interact with
        /// </summary>
        public static new surface_profile_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_profile_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "surface_profile_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_rendering_properties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_rendering_properties : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_rendering_properties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_rendering_properties(SdaiInstance instance) : base(instance) { }
        public surface_rendering_properties() : base(0) { }

        public static implicit operator surface_rendering_properties(SdaiInstance instance) => new surface_rendering_properties(instance);

        /// <summary>
        /// Create new instace of surface_rendering_properties and returns object of this class to interact with
        /// </summary>
        public static new surface_rendering_properties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_rendering_properties"); Debug.Assert(inst != 0); return inst; }

        public colour get_rendered_colour() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "rendered_colour", ifcengine.sdaiINSTANCE, out inst); return new colour (inst); }
        public colour _rendered_colour { get { return get_rendered_colour(); } }
        public void put_rendered_colour(colour inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "rendered_colour", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "surface_rendering_properties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_replica
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_replica : surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_replica
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_replica(SdaiInstance instance) : base(instance) { }
        public surface_replica() : base(0) { }

        public static implicit operator surface_replica(SdaiInstance instance) => new surface_replica(instance);

        /// <summary>
        /// Create new instace of surface_replica and returns object of this class to interact with
        /// </summary>
        public static new surface_replica Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_replica"); Debug.Assert(inst != 0); return inst; }

        public surface get_parent_surface() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, out inst); return new surface (inst); }
        public surface _parent_surface { get { return get_parent_surface(); } }
        public void put_parent_surface(surface inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "parent_surface", ifcengine.sdaiINSTANCE, i); }
        public cartesian_transformation_operator_3d get_transformation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, out inst); return new cartesian_transformation_operator_3d (inst); }
        public cartesian_transformation_operator_3d _transformation { get { return get_transformation(); } }
        public void put_transformation(cartesian_transformation_operator_3d inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "transformation", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "surface_replica"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_side_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_side_style : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_side_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_side_style(SdaiInstance instance) : base(instance) { }
        public surface_side_style() : base(0) { }

        public static implicit operator surface_side_style(SdaiInstance instance) => new surface_side_style(instance);

        /// <summary>
        /// Create new instace of surface_side_style and returns object of this class to interact with
        /// </summary>
        public static new surface_side_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_side_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public set_of_surface_style_element_select get_styles() { return (new set_of_surface_style_element_selectSerializer()).FromAttr(m_instance, "styles"); }
        public set_of_surface_style_element_select _styles { get { return get_styles(); } }
        public void put_styles(IEnumerable<surface_style_element_select> lst) { (new set_of_surface_style_element_selectSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }
        //public void put_styles_untyped(IEnumerable lst) { (new set_of_surface_style_element_selectSerializer()).ToSdaiAggr(lst, m_instance, "styles"); }

        protected override TextValue EntityName() { return "surface_side_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_boundary
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_boundary : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_boundary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_boundary(SdaiInstance instance) : base(instance) { }
        public surface_style_boundary() : base(0) { }

        public static implicit operator surface_style_boundary(SdaiInstance instance) => new surface_style_boundary(instance);

        /// <summary>
        /// Create new instace of surface_style_boundary and returns object of this class to interact with
        /// </summary>
        public static new surface_style_boundary Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_boundary"); Debug.Assert(inst != 0); return inst; }


        public curve_or_render_get get_style_of_boundary() { return new curve_or_render_get(m_instance, "style_of_boundary", 0); }
        public curve_or_render_get _style_of_boundary { get { return new curve_or_render_get(m_instance, "style_of_boundary", 0); } }
        public curve_or_render_put put_style_of_boundary() { return new curve_or_render_put(m_instance, "style_of_boundary", 0); }

        protected override TextValue EntityName() { return "surface_style_boundary"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_control_grid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_control_grid : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_control_grid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_control_grid(SdaiInstance instance) : base(instance) { }
        public surface_style_control_grid() : base(0) { }

        public static implicit operator surface_style_control_grid(SdaiInstance instance) => new surface_style_control_grid(instance);

        /// <summary>
        /// Create new instace of surface_style_control_grid and returns object of this class to interact with
        /// </summary>
        public static new surface_style_control_grid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_control_grid"); Debug.Assert(inst != 0); return inst; }


        public curve_or_render_get get_style_of_control_grid() { return new curve_or_render_get(m_instance, "style_of_control_grid", 0); }
        public curve_or_render_get _style_of_control_grid { get { return new curve_or_render_get(m_instance, "style_of_control_grid", 0); } }
        public curve_or_render_put put_style_of_control_grid() { return new curve_or_render_put(m_instance, "style_of_control_grid", 0); }

        protected override TextValue EntityName() { return "surface_style_control_grid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_fill_area
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_fill_area : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_fill_area
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_fill_area(SdaiInstance instance) : base(instance) { }
        public surface_style_fill_area() : base(0) { }

        public static implicit operator surface_style_fill_area(SdaiInstance instance) => new surface_style_fill_area(instance);

        /// <summary>
        /// Create new instace of surface_style_fill_area and returns object of this class to interact with
        /// </summary>
        public static new surface_style_fill_area Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_fill_area"); Debug.Assert(inst != 0); return inst; }

        public fill_area_style get_fill_area() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "fill_area", ifcengine.sdaiINSTANCE, out inst); return new fill_area_style (inst); }
        public fill_area_style _fill_area { get { return get_fill_area(); } }
        public void put_fill_area(fill_area_style inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "fill_area", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "surface_style_fill_area"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_parameter_line
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_parameter_line : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_parameter_line
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_parameter_line(SdaiInstance instance) : base(instance) { }
        public surface_style_parameter_line() : base(0) { }

        public static implicit operator surface_style_parameter_line(SdaiInstance instance) => new surface_style_parameter_line(instance);

        /// <summary>
        /// Create new instace of surface_style_parameter_line and returns object of this class to interact with
        /// </summary>
        public static new surface_style_parameter_line Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_parameter_line"); Debug.Assert(inst != 0); return inst; }


        public curve_or_render_get get_style_of_parameter_lines() { return new curve_or_render_get(m_instance, "style_of_parameter_lines", 0); }
        public curve_or_render_get _style_of_parameter_lines { get { return new curve_or_render_get(m_instance, "style_of_parameter_lines", 0); } }
        public curve_or_render_put put_style_of_parameter_lines() { return new curve_or_render_put(m_instance, "style_of_parameter_lines", 0); }
        public set_of_direction_count_select get_direction_counts() { return (new set_of_direction_count_selectSerializer()).FromAttr(m_instance, "direction_counts"); }
        public set_of_direction_count_select _direction_counts { get { return get_direction_counts(); } }
        public void put_direction_counts(IEnumerable<direction_count_select> lst) { (new set_of_direction_count_selectSerializer()).ToSdaiAggr(lst, m_instance, "direction_counts"); }
        //public void put_direction_counts_untyped(IEnumerable lst) { (new set_of_direction_count_selectSerializer()).ToSdaiAggr(lst, m_instance, "direction_counts"); }

        protected override TextValue EntityName() { return "surface_style_parameter_line"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_reflectance_ambient : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_reflectance_ambient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_reflectance_ambient(SdaiInstance instance) : base(instance) { }
        public surface_style_reflectance_ambient() : base(0) { }

        public static implicit operator surface_style_reflectance_ambient(SdaiInstance instance) => new surface_style_reflectance_ambient(instance);

        /// <summary>
        /// Create new instace of surface_style_reflectance_ambient and returns object of this class to interact with
        /// </summary>
        public static new surface_style_reflectance_ambient Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient"); Debug.Assert(inst != 0); return inst; }

        public double? get_ambient_reflectance() { return get_double("ambient_reflectance", ifcengine.sdaiREAL);}
        public double? _ambient_reflectance { get { return get_ambient_reflectance(); } }
        public void put_ambient_reflectance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "ambient_reflectance", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "surface_style_reflectance_ambient"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient_diffuse
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_reflectance_ambient_diffuse : surface_style_reflectance_ambient
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_reflectance_ambient_diffuse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_reflectance_ambient_diffuse(SdaiInstance instance) : base(instance) { }
        public surface_style_reflectance_ambient_diffuse() : base(0) { }

        public static implicit operator surface_style_reflectance_ambient_diffuse(SdaiInstance instance) => new surface_style_reflectance_ambient_diffuse(instance);

        /// <summary>
        /// Create new instace of surface_style_reflectance_ambient_diffuse and returns object of this class to interact with
        /// </summary>
        public static new surface_style_reflectance_ambient_diffuse Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient_diffuse"); Debug.Assert(inst != 0); return inst; }

        public double? get_diffuse_reflectance() { return get_double("diffuse_reflectance", ifcengine.sdaiREAL);}
        public double? _diffuse_reflectance { get { return get_diffuse_reflectance(); } }
        public void put_diffuse_reflectance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "diffuse_reflectance", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "surface_style_reflectance_ambient_diffuse"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_reflectance_ambient_diffuse_specular
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_reflectance_ambient_diffuse_specular : surface_style_reflectance_ambient_diffuse
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_reflectance_ambient_diffuse_specular
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_reflectance_ambient_diffuse_specular(SdaiInstance instance) : base(instance) { }
        public surface_style_reflectance_ambient_diffuse_specular() : base(0) { }

        public static implicit operator surface_style_reflectance_ambient_diffuse_specular(SdaiInstance instance) => new surface_style_reflectance_ambient_diffuse_specular(instance);

        /// <summary>
        /// Create new instace of surface_style_reflectance_ambient_diffuse_specular and returns object of this class to interact with
        /// </summary>
        public static new surface_style_reflectance_ambient_diffuse_specular Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_reflectance_ambient_diffuse_specular"); Debug.Assert(inst != 0); return inst; }

        public double? get_specular_reflectance() { return get_double("specular_reflectance", ifcengine.sdaiREAL);}
        public double? _specular_reflectance { get { return get_specular_reflectance(); } }
        public void put_specular_reflectance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "specular_reflectance", ifcengine.sdaiREAL, ref value); }
        public double? get_specular_exponent() { return get_double("specular_exponent", ifcengine.sdaiREAL);}
        public double? _specular_exponent { get { return get_specular_exponent(); } }
        public void put_specular_exponent(double value) { ifcengine.sdaiPutAttrBN(m_instance, "specular_exponent", ifcengine.sdaiREAL, ref value); }
        public colour get_specular_colour() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "specular_colour", ifcengine.sdaiINSTANCE, out inst); return new colour (inst); }
        public colour _specular_colour { get { return get_specular_colour(); } }
        public void put_specular_colour(colour inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "specular_colour", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "surface_style_reflectance_ambient_diffuse_specular"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_rendering
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_rendering : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_rendering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_rendering(SdaiInstance instance) : base(instance) { }
        public surface_style_rendering() : base(0) { }

        public static implicit operator surface_style_rendering(SdaiInstance instance) => new surface_style_rendering(instance);

        /// <summary>
        /// Create new instace of surface_style_rendering and returns object of this class to interact with
        /// </summary>
        public static new surface_style_rendering Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_rendering"); Debug.Assert(inst != 0); return inst; }

        public shading_surface_method? get_rendering_method() { var str = get_string("rendering_method", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.shading_surface_method_); return EnumValue<shading_surface_method>.FromIndex(ind); }
        public shading_surface_method? _rendering_method { get { return get_rendering_method(); } }
        public void put_rendering_method(shading_surface_method value) { var str = EnumString<shading_surface_method>.FromValue(value, EnumNames.shading_surface_method_); ifcengine.sdaiPutAttrBN(m_instance, "rendering_method", ifcengine.sdaiENUM, str); }
        public colour get_surface_colour() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "surface_colour", ifcengine.sdaiINSTANCE, out inst); return new colour (inst); }
        public colour _surface_colour { get { return get_surface_colour(); } }
        public void put_surface_colour(colour inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "surface_colour", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "surface_style_rendering"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_rendering_with_properties
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_rendering_with_properties : surface_style_rendering
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_rendering_with_properties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_rendering_with_properties(SdaiInstance instance) : base(instance) { }
        public surface_style_rendering_with_properties() : base(0) { }

        public static implicit operator surface_style_rendering_with_properties(SdaiInstance instance) => new surface_style_rendering_with_properties(instance);

        /// <summary>
        /// Create new instace of surface_style_rendering_with_properties and returns object of this class to interact with
        /// </summary>
        public static new surface_style_rendering_with_properties Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_rendering_with_properties"); Debug.Assert(inst != 0); return inst; }

        public set_of_rendering_properties_select get_properties() { return (new set_of_rendering_properties_selectSerializer()).FromAttr(m_instance, "properties"); }
        public set_of_rendering_properties_select _properties { get { return get_properties(); } }
        public void put_properties(IEnumerable<rendering_properties_select> lst) { (new set_of_rendering_properties_selectSerializer()).ToSdaiAggr(lst, m_instance, "properties"); }
        //public void put_properties_untyped(IEnumerable lst) { (new set_of_rendering_properties_selectSerializer()).ToSdaiAggr(lst, m_instance, "properties"); }

        protected override TextValue EntityName() { return "surface_style_rendering_with_properties"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_segmentation_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_segmentation_curve : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_segmentation_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_segmentation_curve(SdaiInstance instance) : base(instance) { }
        public surface_style_segmentation_curve() : base(0) { }

        public static implicit operator surface_style_segmentation_curve(SdaiInstance instance) => new surface_style_segmentation_curve(instance);

        /// <summary>
        /// Create new instace of surface_style_segmentation_curve and returns object of this class to interact with
        /// </summary>
        public static new surface_style_segmentation_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_segmentation_curve"); Debug.Assert(inst != 0); return inst; }


        public curve_or_render_get get_style_of_segmentation_curve() { return new curve_or_render_get(m_instance, "style_of_segmentation_curve", 0); }
        public curve_or_render_get _style_of_segmentation_curve { get { return new curve_or_render_get(m_instance, "style_of_segmentation_curve", 0); } }
        public curve_or_render_put put_style_of_segmentation_curve() { return new curve_or_render_put(m_instance, "style_of_segmentation_curve", 0); }

        protected override TextValue EntityName() { return "surface_style_segmentation_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_silhouette
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_silhouette : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_silhouette
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_silhouette(SdaiInstance instance) : base(instance) { }
        public surface_style_silhouette() : base(0) { }

        public static implicit operator surface_style_silhouette(SdaiInstance instance) => new surface_style_silhouette(instance);

        /// <summary>
        /// Create new instace of surface_style_silhouette and returns object of this class to interact with
        /// </summary>
        public static new surface_style_silhouette Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_silhouette"); Debug.Assert(inst != 0); return inst; }


        public curve_or_render_get get_style_of_silhouette() { return new curve_or_render_get(m_instance, "style_of_silhouette", 0); }
        public curve_or_render_get _style_of_silhouette { get { return new curve_or_render_get(m_instance, "style_of_silhouette", 0); } }
        public curve_or_render_put put_style_of_silhouette() { return new curve_or_render_put(m_instance, "style_of_silhouette", 0); }

        protected override TextValue EntityName() { return "surface_style_silhouette"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_transparent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_transparent : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_transparent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_transparent(SdaiInstance instance) : base(instance) { }
        public surface_style_transparent() : base(0) { }

        public static implicit operator surface_style_transparent(SdaiInstance instance) => new surface_style_transparent(instance);

        /// <summary>
        /// Create new instace of surface_style_transparent and returns object of this class to interact with
        /// </summary>
        public static new surface_style_transparent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_transparent"); Debug.Assert(inst != 0); return inst; }

        public double? get_transparency() { return get_double("transparency", ifcengine.sdaiREAL);}
        public double? _transparency { get { return get_transparency(); } }
        public void put_transparency(double value) { ifcengine.sdaiPutAttrBN(m_instance, "transparency", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "surface_style_transparent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_style_usage
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_style_usage : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_style_usage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_style_usage(SdaiInstance instance) : base(instance) { }
        public surface_style_usage() : base(0) { }

        public static implicit operator surface_style_usage(SdaiInstance instance) => new surface_style_usage(instance);

        /// <summary>
        /// Create new instace of surface_style_usage and returns object of this class to interact with
        /// </summary>
        public static new surface_style_usage Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_style_usage"); Debug.Assert(inst != 0); return inst; }

        public surface_side? get_side() { var str = get_string("side", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.surface_side_); return EnumValue<surface_side>.FromIndex(ind); }
        public surface_side? _side { get { return get_side(); } }
        public void put_side(surface_side value) { var str = EnumString<surface_side>.FromValue(value, EnumNames.surface_side_); ifcengine.sdaiPutAttrBN(m_instance, "side", ifcengine.sdaiENUM, str); }

        public surface_side_style_select_get get_style() { return new surface_side_style_select_get(m_instance, "style", 0); }
        public surface_side_style_select_get _style { get { return new surface_side_style_select_get(m_instance, "style", 0); } }
        public surface_side_style_select_put put_style() { return new surface_side_style_select_put(m_instance, "style", 0); }

        protected override TextValue EntityName() { return "surface_style_usage"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surface_texture_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surface_texture_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surface_texture_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surface_texture_representation(SdaiInstance instance) : base(instance) { }
        public surface_texture_representation() : base(0) { }

        public static implicit operator surface_texture_representation(SdaiInstance instance) => new surface_texture_representation(instance);

        /// <summary>
        /// Create new instace of surface_texture_representation and returns object of this class to interact with
        /// </summary>
        public static new surface_texture_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surface_texture_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "surface_texture_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of surfaced_open_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class surfaced_open_shell : open_shell
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of surfaced_open_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public surfaced_open_shell(SdaiInstance instance) : base(instance) { }
        public surfaced_open_shell() : base(0) { }

        public static implicit operator surfaced_open_shell(SdaiInstance instance) => new surfaced_open_shell(instance);

        /// <summary>
        /// Create new instace of surfaced_open_shell and returns object of this class to interact with
        /// </summary>
        public static new surfaced_open_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "surfaced_open_shell"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "surfaced_open_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of swept_disk_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class swept_disk_solid : solid_model
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of swept_disk_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public swept_disk_solid(SdaiInstance instance) : base(instance) { }
        public swept_disk_solid() : base(0) { }

        public static implicit operator swept_disk_solid(SdaiInstance instance) => new swept_disk_solid(instance);

        /// <summary>
        /// Create new instace of swept_disk_solid and returns object of this class to interact with
        /// </summary>
        public static new swept_disk_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "swept_disk_solid"); Debug.Assert(inst != 0); return inst; }

        public curve get_directrix() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, out inst); return new curve (inst); }
        public curve _directrix { get { return get_directrix(); } }
        public void put_directrix(curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "directrix", ifcengine.sdaiINSTANCE, i); }
        public double? get_radius() { return get_double("radius", ifcengine.sdaiREAL);}
        public double? _radius { get { return get_radius(); } }
        public void put_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "radius", ifcengine.sdaiREAL, ref value); }
        public double? get_inner_radius() { return get_double("inner_radius", ifcengine.sdaiREAL);}
        public double? _inner_radius { get { return get_inner_radius(); } }
        public void put_inner_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "inner_radius", ifcengine.sdaiREAL, ref value); }
        public double? get_start_param() { return get_double("start_param", ifcengine.sdaiREAL);}
        public double? _start_param { get { return get_start_param(); } }
        public void put_start_param(double value) { ifcengine.sdaiPutAttrBN(m_instance, "start_param", ifcengine.sdaiREAL, ref value); }
        public double? get_end_param() { return get_double("end_param", ifcengine.sdaiREAL);}
        public double? _end_param { get { return get_end_param(); } }
        public void put_end_param(double value) { ifcengine.sdaiPutAttrBN(m_instance, "end_param", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "swept_disk_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symbol : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symbol(SdaiInstance instance) : base(instance) { }
        public symbol() : base(0) { }

        public static implicit operator symbol(SdaiInstance instance) => new symbol(instance);

        /// <summary>
        /// Create new instace of symbol and returns object of this class to interact with
        /// </summary>
        public static new symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symbol_colour
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symbol_colour : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symbol_colour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symbol_colour(SdaiInstance instance) : base(instance) { }
        public symbol_colour() : base(0) { }

        public static implicit operator symbol_colour(SdaiInstance instance) => new symbol_colour(instance);

        /// <summary>
        /// Create new instace of symbol_colour and returns object of this class to interact with
        /// </summary>
        public static new symbol_colour Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symbol_colour"); Debug.Assert(inst != 0); return inst; }

        public colour get_colour_of_symbol() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "colour_of_symbol", ifcengine.sdaiINSTANCE, out inst); return new colour (inst); }
        public colour _colour_of_symbol { get { return get_colour_of_symbol(); } }
        public void put_colour_of_symbol(colour inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "colour_of_symbol", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "symbol_colour"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symbol_representation_map
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symbol_representation_map : representation_map
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symbol_representation_map
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symbol_representation_map(SdaiInstance instance) : base(instance) { }
        public symbol_representation_map() : base(0) { }

        public static implicit operator symbol_representation_map(SdaiInstance instance) => new symbol_representation_map(instance);

        /// <summary>
        /// Create new instace of symbol_representation_map and returns object of this class to interact with
        /// </summary>
        public static new symbol_representation_map Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symbol_representation_map"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "symbol_representation_map"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symbol_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symbol_style : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symbol_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symbol_style(SdaiInstance instance) : base(instance) { }
        public symbol_style() : base(0) { }

        public static implicit operator symbol_style(SdaiInstance instance) => new symbol_style(instance);

        /// <summary>
        /// Create new instace of symbol_style and returns object of this class to interact with
        /// </summary>
        public static new symbol_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symbol_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        public symbol_style_select_get get_style_of_symbol() { return new symbol_style_select_get(m_instance, "style_of_symbol", 0); }
        public symbol_style_select_get _style_of_symbol { get { return new symbol_style_select_get(m_instance, "style_of_symbol", 0); } }
        public symbol_style_select_put put_style_of_symbol() { return new symbol_style_select_put(m_instance, "style_of_symbol", 0); }

        protected override TextValue EntityName() { return "symbol_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symbol_target
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symbol_target : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symbol_target
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symbol_target(SdaiInstance instance) : base(instance) { }
        public symbol_target() : base(0) { }

        public static implicit operator symbol_target(SdaiInstance instance) => new symbol_target(instance);

        /// <summary>
        /// Create new instace of symbol_target and returns object of this class to interact with
        /// </summary>
        public static new symbol_target Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symbol_target"); Debug.Assert(inst != 0); return inst; }


        public axis2_placement_get get_placement() { return new axis2_placement_get(m_instance, "placement", 0); }
        public axis2_placement_get _placement { get { return new axis2_placement_get(m_instance, "placement", 0); } }
        public axis2_placement_put put_placement() { return new axis2_placement_put(m_instance, "placement", 0); }
        public double? get_x_scale() { return get_double("x_scale", ifcengine.sdaiREAL);}
        public double? _x_scale { get { return get_x_scale(); } }
        public void put_x_scale(double value) { ifcengine.sdaiPutAttrBN(m_instance, "x_scale", ifcengine.sdaiREAL, ref value); }
        public double? get_y_scale() { return get_double("y_scale", ifcengine.sdaiREAL);}
        public double? _y_scale { get { return get_y_scale(); } }
        public void put_y_scale(double value) { ifcengine.sdaiPutAttrBN(m_instance, "y_scale", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "symbol_target"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symmetric_shape_aspect
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symmetric_shape_aspect : shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symmetric_shape_aspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symmetric_shape_aspect(SdaiInstance instance) : base(instance) { }
        public symmetric_shape_aspect() : base(0) { }

        public static implicit operator symmetric_shape_aspect(SdaiInstance instance) => new symmetric_shape_aspect(instance);

        /// <summary>
        /// Create new instace of symmetric_shape_aspect and returns object of this class to interact with
        /// </summary>
        public static new symmetric_shape_aspect Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symmetric_shape_aspect"); Debug.Assert(inst != 0); return inst; }

        public set_of_shape_aspect_relationship get_basis_relationships() { return (new set_of_shape_aspect_relationshipSerializer()).FromAttr(m_instance, "basis_relationships"); }
        public set_of_shape_aspect_relationship _basis_relationships { get { return get_basis_relationships(); } }

        protected override TextValue EntityName() { return "symmetric_shape_aspect"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of symmetry_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class symmetry_tolerance : geometric_tolerance_with_datum_reference
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of symmetry_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public symmetry_tolerance(SdaiInstance instance) : base(instance) { }
        public symmetry_tolerance() : base(0) { }

        public static implicit operator symmetry_tolerance(SdaiInstance instance) => new symmetry_tolerance(instance);

        /// <summary>
        /// Create new instace of symmetry_tolerance and returns object of this class to interact with
        /// </summary>
        public static new symmetry_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "symmetry_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "symmetry_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of table_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class table_representation_item : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of table_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public table_representation_item(SdaiInstance instance) : base(instance) { }
        public table_representation_item() : base(0) { }

        public static implicit operator table_representation_item(SdaiInstance instance) => new table_representation_item(instance);

        /// <summary>
        /// Create new instace of table_representation_item and returns object of this class to interact with
        /// </summary>
        public static new table_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "table_representation_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "table_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tactile_appearance_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tactile_appearance_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tactile_appearance_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tactile_appearance_representation(SdaiInstance instance) : base(instance) { }
        public tactile_appearance_representation() : base(0) { }

        public static implicit operator tactile_appearance_representation(SdaiInstance instance) => new tactile_appearance_representation(instance);

        /// <summary>
        /// Create new instace of tactile_appearance_representation and returns object of this class to interact with
        /// </summary>
        public static new tactile_appearance_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tactile_appearance_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "tactile_appearance_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tagged_text_format
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tagged_text_format : representation_context
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tagged_text_format
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tagged_text_format(SdaiInstance instance) : base(instance) { }
        public tagged_text_format() : base(0) { }

        public static implicit operator tagged_text_format(SdaiInstance instance) => new tagged_text_format(instance);

        /// <summary>
        /// Create new instace of tagged_text_format and returns object of this class to interact with
        /// </summary>
        public static new tagged_text_format Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tagged_text_format"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "tagged_text_format"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tagged_text_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tagged_text_item : descriptive_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tagged_text_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tagged_text_item(SdaiInstance instance) : base(instance) { }
        public tagged_text_item() : base(0) { }

        public static implicit operator tagged_text_item(SdaiInstance instance) => new tagged_text_item(instance);

        /// <summary>
        /// Create new instace of tagged_text_item and returns object of this class to interact with
        /// </summary>
        public static new tagged_text_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tagged_text_item"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "tagged_text_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tangent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tangent : derived_shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tangent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tangent(SdaiInstance instance) : base(instance) { }
        public tangent() : base(0) { }

        public static implicit operator tangent(SdaiInstance instance) => new tangent(instance);

        /// <summary>
        /// Create new instace of tangent and returns object of this class to interact with
        /// </summary>
        public static new tangent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tangent"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "tangent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_font : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_font(SdaiInstance instance) : base(instance) { }
        public text_font() : base(0) { }

        public static implicit operator text_font(SdaiInstance instance) => new text_font(instance);

        /// <summary>
        /// Create new instace of text_font and returns object of this class to interact with
        /// </summary>
        public static new text_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_font"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public set_of_character_glyph_font_usage get_glyphs() { return (new set_of_character_glyph_font_usageSerializer()).FromAttr(m_instance, "glyphs"); }
        public set_of_character_glyph_font_usage _glyphs { get { return get_glyphs(); } }

        protected override TextValue EntityName() { return "text_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_font_family
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_font_family : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_font_family
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_font_family(SdaiInstance instance) : base(instance) { }
        public text_font_family() : base(0) { }

        public static implicit operator text_font_family(SdaiInstance instance) => new text_font_family(instance);

        /// <summary>
        /// Create new instace of text_font_family and returns object of this class to interact with
        /// </summary>
        public static new text_font_family Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_font_family"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public set_of_text_font_in_family get_fonts() { return (new set_of_text_font_in_familySerializer()).FromAttr(m_instance, "fonts"); }
        public set_of_text_font_in_family _fonts { get { return get_fonts(); } }

        protected override TextValue EntityName() { return "text_font_family"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_font_in_family
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_font_in_family : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_font_in_family
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_font_in_family(SdaiInstance instance) : base(instance) { }
        public text_font_in_family() : base(0) { }

        public static implicit operator text_font_in_family(SdaiInstance instance) => new text_font_in_family(instance);

        /// <summary>
        /// Create new instace of text_font_in_family and returns object of this class to interact with
        /// </summary>
        public static new text_font_in_family Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_font_in_family"); Debug.Assert(inst != 0); return inst; }

        public text_font get_font() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "font", ifcengine.sdaiINSTANCE, out inst); return new text_font (inst); }
        public text_font _font { get { return get_font(); } }
        public void put_font(text_font inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "font", ifcengine.sdaiINSTANCE, i); }
        public text_font_family get_family() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "family", ifcengine.sdaiINSTANCE, out inst); return new text_font_family (inst); }
        public text_font_family _family { get { return get_family(); } }
        public void put_family(text_font_family inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "family", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "text_font_in_family"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_literal_with_associated_curves
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_literal_with_associated_curves : text_literal
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_literal_with_associated_curves
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_literal_with_associated_curves(SdaiInstance instance) : base(instance) { }
        public text_literal_with_associated_curves() : base(0) { }

        public static implicit operator text_literal_with_associated_curves(SdaiInstance instance) => new text_literal_with_associated_curves(instance);

        /// <summary>
        /// Create new instace of text_literal_with_associated_curves and returns object of this class to interact with
        /// </summary>
        public static new text_literal_with_associated_curves Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_literal_with_associated_curves"); Debug.Assert(inst != 0); return inst; }

        public set_of_curve get_associated_curves() { return (new set_of_curveSerializer()).FromAttr(m_instance, "associated_curves"); }
        public set_of_curve _associated_curves { get { return get_associated_curves(); } }
        public void put_associated_curves(IEnumerable<curve> lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "associated_curves"); }
        //public void put_associated_curves_untyped(IEnumerable lst) { (new set_of_curveSerializer()).ToSdaiAggr(lst, m_instance, "associated_curves"); }

        protected override TextValue EntityName() { return "text_literal_with_associated_curves"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_literal_with_blanking_box
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_literal_with_blanking_box : text_literal
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_literal_with_blanking_box
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_literal_with_blanking_box(SdaiInstance instance) : base(instance) { }
        public text_literal_with_blanking_box() : base(0) { }

        public static implicit operator text_literal_with_blanking_box(SdaiInstance instance) => new text_literal_with_blanking_box(instance);

        /// <summary>
        /// Create new instace of text_literal_with_blanking_box and returns object of this class to interact with
        /// </summary>
        public static new text_literal_with_blanking_box Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_literal_with_blanking_box"); Debug.Assert(inst != 0); return inst; }

        public planar_box get_blanking() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "blanking", ifcengine.sdaiINSTANCE, out inst); return new planar_box (inst); }
        public planar_box _blanking { get { return get_blanking(); } }
        public void put_blanking(planar_box inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "blanking", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "text_literal_with_blanking_box"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_literal_with_extent
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_literal_with_extent : text_literal
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_literal_with_extent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_literal_with_extent(SdaiInstance instance) : base(instance) { }
        public text_literal_with_extent() : base(0) { }

        public static implicit operator text_literal_with_extent(SdaiInstance instance) => new text_literal_with_extent(instance);

        /// <summary>
        /// Create new instace of text_literal_with_extent and returns object of this class to interact with
        /// </summary>
        public static new text_literal_with_extent Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_literal_with_extent"); Debug.Assert(inst != 0); return inst; }

        public planar_extent get_extent() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "extent", ifcengine.sdaiINSTANCE, out inst); return new planar_extent (inst); }
        public planar_extent _extent { get { return get_extent(); } }
        public void put_extent(planar_extent inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "extent", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "text_literal_with_extent"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_string_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_string_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_string_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_string_representation(SdaiInstance instance) : base(instance) { }
        public text_string_representation() : base(0) { }

        public static implicit operator text_string_representation(SdaiInstance instance) => new text_string_representation(instance);

        /// <summary>
        /// Create new instace of text_string_representation and returns object of this class to interact with
        /// </summary>
        public static new text_string_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_string_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "text_string_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_style : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_style(SdaiInstance instance) : base(instance) { }
        public text_style() : base(0) { }

        public static implicit operator text_style(SdaiInstance instance) => new text_style(instance);

        /// <summary>
        /// Create new instace of text_style and returns object of this class to interact with
        /// </summary>
        public static new text_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_style"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        public character_style_select_get get_character_appearance() { return new character_style_select_get(m_instance, "character_appearance", 0); }
        public character_style_select_get _character_appearance { get { return new character_style_select_get(m_instance, "character_appearance", 0); } }
        public character_style_select_put put_character_appearance() { return new character_style_select_put(m_instance, "character_appearance", 0); }

        protected override TextValue EntityName() { return "text_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_style_for_defined_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_style_for_defined_font : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_style_for_defined_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_style_for_defined_font(SdaiInstance instance) : base(instance) { }
        public text_style_for_defined_font() : base(0) { }

        public static implicit operator text_style_for_defined_font(SdaiInstance instance) => new text_style_for_defined_font(instance);

        /// <summary>
        /// Create new instace of text_style_for_defined_font and returns object of this class to interact with
        /// </summary>
        public static new text_style_for_defined_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_style_for_defined_font"); Debug.Assert(inst != 0); return inst; }

        public colour get_text_colour() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "text_colour", ifcengine.sdaiINSTANCE, out inst); return new colour (inst); }
        public colour _text_colour { get { return get_text_colour(); } }
        public void put_text_colour(colour inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "text_colour", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "text_style_for_defined_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_style_with_box_characteristics
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_style_with_box_characteristics : text_style
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_style_with_box_characteristics
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_style_with_box_characteristics(SdaiInstance instance) : base(instance) { }
        public text_style_with_box_characteristics() : base(0) { }

        public static implicit operator text_style_with_box_characteristics(SdaiInstance instance) => new text_style_with_box_characteristics(instance);

        /// <summary>
        /// Create new instace of text_style_with_box_characteristics and returns object of this class to interact with
        /// </summary>
        public static new text_style_with_box_characteristics Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_style_with_box_characteristics"); Debug.Assert(inst != 0); return inst; }

        public set_of_box_characteristic_select get_characteristics() { return (new set_of_box_characteristic_selectSerializer()).FromAttr(m_instance, "characteristics"); }
        public set_of_box_characteristic_select _characteristics { get { return get_characteristics(); } }
        public void put_characteristics(IEnumerable<box_characteristic_select> lst) { (new set_of_box_characteristic_selectSerializer()).ToSdaiAggr(lst, m_instance, "characteristics"); }
        //public void put_characteristics_untyped(IEnumerable lst) { (new set_of_box_characteristic_selectSerializer()).ToSdaiAggr(lst, m_instance, "characteristics"); }

        protected override TextValue EntityName() { return "text_style_with_box_characteristics"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_style_with_mirror
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_style_with_mirror : text_style
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_style_with_mirror
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_style_with_mirror(SdaiInstance instance) : base(instance) { }
        public text_style_with_mirror() : base(0) { }

        public static implicit operator text_style_with_mirror(SdaiInstance instance) => new text_style_with_mirror(instance);

        /// <summary>
        /// Create new instace of text_style_with_mirror and returns object of this class to interact with
        /// </summary>
        public static new text_style_with_mirror Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_style_with_mirror"); Debug.Assert(inst != 0); return inst; }


        public axis2_placement_get get_mirror_placement() { return new axis2_placement_get(m_instance, "mirror_placement", 0); }
        public axis2_placement_get _mirror_placement { get { return new axis2_placement_get(m_instance, "mirror_placement", 0); } }
        public axis2_placement_put put_mirror_placement() { return new axis2_placement_put(m_instance, "mirror_placement", 0); }

        protected override TextValue EntityName() { return "text_style_with_mirror"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of text_style_with_spacing
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class text_style_with_spacing : text_style
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of text_style_with_spacing
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public text_style_with_spacing(SdaiInstance instance) : base(instance) { }
        public text_style_with_spacing() : base(0) { }

        public static implicit operator text_style_with_spacing(SdaiInstance instance) => new text_style_with_spacing(instance);

        /// <summary>
        /// Create new instace of text_style_with_spacing and returns object of this class to interact with
        /// </summary>
        public static new text_style_with_spacing Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "text_style_with_spacing"); Debug.Assert(inst != 0); return inst; }


        public character_spacing_select_get get_character_spacing() { return new character_spacing_select_get(m_instance, "character_spacing", 0); }
        public character_spacing_select_get _character_spacing { get { return new character_spacing_select_get(m_instance, "character_spacing", 0); } }
        public character_spacing_select_put put_character_spacing() { return new character_spacing_select_put(m_instance, "character_spacing", 0); }

        protected override TextValue EntityName() { return "text_style_with_spacing"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thermal_resistance_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thermal_resistance_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thermal_resistance_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thermal_resistance_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public thermal_resistance_measure_with_unit() : base(0) { }

        public static implicit operator thermal_resistance_measure_with_unit(SdaiInstance instance) => new thermal_resistance_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of thermal_resistance_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new thermal_resistance_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thermal_resistance_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "thermal_resistance_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thermal_resistance_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thermal_resistance_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thermal_resistance_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thermal_resistance_unit(SdaiInstance instance) : base(instance) { }
        public thermal_resistance_unit() : base(0) { }

        public static implicit operator thermal_resistance_unit(SdaiInstance instance) => new thermal_resistance_unit(instance);

        /// <summary>
        /// Create new instace of thermal_resistance_unit and returns object of this class to interact with
        /// </summary>
        public static new thermal_resistance_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thermal_resistance_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "thermal_resistance_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thermodynamic_temperature_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thermodynamic_temperature_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thermodynamic_temperature_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thermodynamic_temperature_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public thermodynamic_temperature_measure_with_unit() : base(0) { }

        public static implicit operator thermodynamic_temperature_measure_with_unit(SdaiInstance instance) => new thermodynamic_temperature_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of thermodynamic_temperature_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new thermodynamic_temperature_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thermodynamic_temperature_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "thermodynamic_temperature_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thermodynamic_temperature_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thermodynamic_temperature_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thermodynamic_temperature_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thermodynamic_temperature_unit(SdaiInstance instance) : base(instance) { }
        public thermodynamic_temperature_unit() : base(0) { }

        public static implicit operator thermodynamic_temperature_unit(SdaiInstance instance) => new thermodynamic_temperature_unit(instance);

        /// <summary>
        /// Create new instace of thermodynamic_temperature_unit and returns object of this class to interact with
        /// </summary>
        public static new thermodynamic_temperature_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thermodynamic_temperature_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "thermodynamic_temperature_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thickened_face_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thickened_face_solid : solid_model
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thickened_face_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thickened_face_solid(SdaiInstance instance) : base(instance) { }
        public thickened_face_solid() : base(0) { }

        public static implicit operator thickened_face_solid(SdaiInstance instance) => new thickened_face_solid(instance);

        /// <summary>
        /// Create new instace of thickened_face_solid and returns object of this class to interact with
        /// </summary>
        public static new thickened_face_solid Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thickened_face_solid"); Debug.Assert(inst != 0); return inst; }


        public generalized_surface_select_get get_base_element() { return new generalized_surface_select_get(m_instance, "base_element", 0); }
        public generalized_surface_select_get _base_element { get { return new generalized_surface_select_get(m_instance, "base_element", 0); } }
        public generalized_surface_select_put put_base_element() { return new generalized_surface_select_put(m_instance, "base_element", 0); }
        public double? get_offset1() { return get_double("offset1", ifcengine.sdaiREAL);}
        public double? _offset1 { get { return get_offset1(); } }
        public void put_offset1(double value) { ifcengine.sdaiPutAttrBN(m_instance, "offset1", ifcengine.sdaiREAL, ref value); }
        public double? get_offset2() { return get_double("offset2", ifcengine.sdaiREAL);}
        public double? _offset2 { get { return get_offset2(); } }
        public void put_offset2(double value) { ifcengine.sdaiPutAttrBN(m_instance, "offset2", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "thickened_face_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thickness_laminate_definition
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thickness_laminate_definition : product_definition
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thickness_laminate_definition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thickness_laminate_definition(SdaiInstance instance) : base(instance) { }
        public thickness_laminate_definition() : base(0) { }

        public static implicit operator thickness_laminate_definition(SdaiInstance instance) => new thickness_laminate_definition(instance);

        /// <summary>
        /// Create new instace of thickness_laminate_definition and returns object of this class to interact with
        /// </summary>
        public static new thickness_laminate_definition Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thickness_laminate_definition"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "thickness_laminate_definition"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of thickness_laminate_table
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class thickness_laminate_table : zone_structural_makeup
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of thickness_laminate_table
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public thickness_laminate_table(SdaiInstance instance) : base(instance) { }
        public thickness_laminate_table() : base(0) { }

        public static implicit operator thickness_laminate_table(SdaiInstance instance) => new thickness_laminate_table(instance);

        /// <summary>
        /// Create new instace of thickness_laminate_table and returns object of this class to interact with
        /// </summary>
        public static new thickness_laminate_table Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "thickness_laminate_table"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "thickness_laminate_table"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_interval
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_interval : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_interval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_interval(SdaiInstance instance) : base(instance) { }
        public time_interval() : base(0) { }

        public static implicit operator time_interval(SdaiInstance instance) => new time_interval(instance);

        /// <summary>
        /// Create new instace of time_interval and returns object of this class to interact with
        /// </summary>
        public static new time_interval Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_interval"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "time_interval"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_interval_based_effectivity
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_interval_based_effectivity : effectivity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_interval_based_effectivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_interval_based_effectivity(SdaiInstance instance) : base(instance) { }
        public time_interval_based_effectivity() : base(0) { }

        public static implicit operator time_interval_based_effectivity(SdaiInstance instance) => new time_interval_based_effectivity(instance);

        /// <summary>
        /// Create new instace of time_interval_based_effectivity and returns object of this class to interact with
        /// </summary>
        public static new time_interval_based_effectivity Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_interval_based_effectivity"); Debug.Assert(inst != 0); return inst; }

        public time_interval get_effectivity_period() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "effectivity_period", ifcengine.sdaiINSTANCE, out inst); return new time_interval (inst); }
        public time_interval _effectivity_period { get { return get_effectivity_period(); } }
        public void put_effectivity_period(time_interval inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "effectivity_period", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "time_interval_based_effectivity"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_interval_relationship
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_interval_relationship : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_interval_relationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_interval_relationship(SdaiInstance instance) : base(instance) { }
        public time_interval_relationship() : base(0) { }

        public static implicit operator time_interval_relationship(SdaiInstance instance) => new time_interval_relationship(instance);

        /// <summary>
        /// Create new instace of time_interval_relationship and returns object of this class to interact with
        /// </summary>
        public static new time_interval_relationship Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_interval_relationship"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }
        public time_interval get_relating_time_interval() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "relating_time_interval", ifcengine.sdaiINSTANCE, out inst); return new time_interval (inst); }
        public time_interval _relating_time_interval { get { return get_relating_time_interval(); } }
        public void put_relating_time_interval(time_interval inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "relating_time_interval", ifcengine.sdaiINSTANCE, i); }
        public time_interval get_related_time_interval() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "related_time_interval", ifcengine.sdaiINSTANCE, out inst); return new time_interval (inst); }
        public time_interval _related_time_interval { get { return get_related_time_interval(); } }
        public void put_related_time_interval(time_interval inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "related_time_interval", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "time_interval_relationship"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_interval_role
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_interval_role : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_interval_role
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_interval_role(SdaiInstance instance) : base(instance) { }
        public time_interval_role() : base(0) { }

        public static implicit operator time_interval_role(SdaiInstance instance) => new time_interval_role(instance);

        /// <summary>
        /// Create new instace of time_interval_role and returns object of this class to interact with
        /// </summary>
        public static new time_interval_role Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_interval_role"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "time_interval_role"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_interval_with_bounds
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_interval_with_bounds : time_interval
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_interval_with_bounds
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_interval_with_bounds(SdaiInstance instance) : base(instance) { }
        public time_interval_with_bounds() : base(0) { }

        public static implicit operator time_interval_with_bounds(SdaiInstance instance) => new time_interval_with_bounds(instance);

        /// <summary>
        /// Create new instace of time_interval_with_bounds and returns object of this class to interact with
        /// </summary>
        public static new time_interval_with_bounds Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_interval_with_bounds"); Debug.Assert(inst != 0); return inst; }


        public date_time_or_event_occurrence_get get_primary_bound() { return new date_time_or_event_occurrence_get(m_instance, "primary_bound", 0); }
        public date_time_or_event_occurrence_get _primary_bound { get { return new date_time_or_event_occurrence_get(m_instance, "primary_bound", 0); } }
        public date_time_or_event_occurrence_put put_primary_bound() { return new date_time_or_event_occurrence_put(m_instance, "primary_bound", 0); }

        public date_time_or_event_occurrence_get get_secondary_bound() { return new date_time_or_event_occurrence_get(m_instance, "secondary_bound", 0); }
        public date_time_or_event_occurrence_get _secondary_bound { get { return new date_time_or_event_occurrence_get(m_instance, "secondary_bound", 0); } }
        public date_time_or_event_occurrence_put put_secondary_bound() { return new date_time_or_event_occurrence_put(m_instance, "secondary_bound", 0); }
        public time_measure_with_unit get_duration() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "duration", ifcengine.sdaiINSTANCE, out inst); return new time_measure_with_unit (inst); }
        public time_measure_with_unit _duration { get { return get_duration(); } }
        public void put_duration(time_measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "duration", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "time_interval_with_bounds"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public time_measure_with_unit() : base(0) { }

        public static implicit operator time_measure_with_unit(SdaiInstance instance) => new time_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of time_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new time_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "time_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of time_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class time_unit : named_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of time_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public time_unit(SdaiInstance instance) : base(instance) { }
        public time_unit() : base(0) { }

        public static implicit operator time_unit(SdaiInstance instance) => new time_unit(instance);

        /// <summary>
        /// Create new instace of time_unit and returns object of this class to interact with
        /// </summary>
        public static new time_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "time_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "time_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tolerance_value
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tolerance_value : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tolerance_value
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tolerance_value(SdaiInstance instance) : base(instance) { }
        public tolerance_value() : base(0) { }

        public static implicit operator tolerance_value(SdaiInstance instance) => new tolerance_value(instance);

        /// <summary>
        /// Create new instace of tolerance_value and returns object of this class to interact with
        /// </summary>
        public static new tolerance_value Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tolerance_value"); Debug.Assert(inst != 0); return inst; }

        public measure_with_unit get_lower_bound() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "lower_bound", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _lower_bound { get { return get_lower_bound(); } }
        public void put_lower_bound(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "lower_bound", ifcengine.sdaiINSTANCE, i); }
        public measure_with_unit get_upper_bound() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "upper_bound", ifcengine.sdaiINSTANCE, out inst); return new measure_with_unit (inst); }
        public measure_with_unit _upper_bound { get { return get_upper_bound(); } }
        public void put_upper_bound(measure_with_unit inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "upper_bound", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "tolerance_value"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tolerance_zone
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tolerance_zone : shape_aspect
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tolerance_zone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tolerance_zone(SdaiInstance instance) : base(instance) { }
        public tolerance_zone() : base(0) { }

        public static implicit operator tolerance_zone(SdaiInstance instance) => new tolerance_zone(instance);

        /// <summary>
        /// Create new instace of tolerance_zone and returns object of this class to interact with
        /// </summary>
        public static new tolerance_zone Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tolerance_zone"); Debug.Assert(inst != 0); return inst; }

        public set_of_geometric_tolerance get_defining_tolerance() { return (new set_of_geometric_toleranceSerializer()).FromAttr(m_instance, "defining_tolerance"); }
        public set_of_geometric_tolerance _defining_tolerance { get { return get_defining_tolerance(); } }
        public void put_defining_tolerance(IEnumerable<geometric_tolerance> lst) { (new set_of_geometric_toleranceSerializer()).ToSdaiAggr(lst, m_instance, "defining_tolerance"); }
        //public void put_defining_tolerance_untyped(IEnumerable lst) { (new set_of_geometric_toleranceSerializer()).ToSdaiAggr(lst, m_instance, "defining_tolerance"); }
        public tolerance_zone_form get_form() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "form", ifcengine.sdaiINSTANCE, out inst); return new tolerance_zone_form (inst); }
        public tolerance_zone_form _form { get { return get_form(); } }
        public void put_form(tolerance_zone_form inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "form", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "tolerance_zone"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of tolerance_zone_form
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class tolerance_zone_form : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of tolerance_zone_form
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public tolerance_zone_form(SdaiInstance instance) : base(instance) { }
        public tolerance_zone_form() : base(0) { }

        public static implicit operator tolerance_zone_form(SdaiInstance instance) => new tolerance_zone_form(instance);

        /// <summary>
        /// Create new instace of tolerance_zone_form and returns object of this class to interact with
        /// </summary>
        public static new tolerance_zone_form Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "tolerance_zone_form"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "tolerance_zone_form"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of torus
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class torus : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of torus
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public torus(SdaiInstance instance) : base(instance) { }
        public torus() : base(0) { }

        public static implicit operator torus(SdaiInstance instance) => new torus(instance);

        /// <summary>
        /// Create new instace of torus and returns object of this class to interact with
        /// </summary>
        public static new torus Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "torus"); Debug.Assert(inst != 0); return inst; }

        public axis1_placement get_position() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, out inst); return new axis1_placement (inst); }
        public axis1_placement _position { get { return get_position(); } }
        public void put_position(axis1_placement inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "position", ifcengine.sdaiINSTANCE, i); }
        public double? get_major_radius() { return get_double("major_radius", ifcengine.sdaiREAL);}
        public double? _major_radius { get { return get_major_radius(); } }
        public void put_major_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "major_radius", ifcengine.sdaiREAL, ref value); }
        public double? get_minor_radius() { return get_double("minor_radius", ifcengine.sdaiREAL);}
        public double? _minor_radius { get { return get_minor_radius(); } }
        public void put_minor_radius(double value) { ifcengine.sdaiPutAttrBN(m_instance, "minor_radius", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "torus"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of total_runout_tolerance
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class total_runout_tolerance : geometric_tolerance_with_datum_reference
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of total_runout_tolerance
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public total_runout_tolerance(SdaiInstance instance) : base(instance) { }
        public total_runout_tolerance() : base(0) { }

        public static implicit operator total_runout_tolerance(SdaiInstance instance) => new total_runout_tolerance(instance);

        /// <summary>
        /// Create new instace of total_runout_tolerance and returns object of this class to interact with
        /// </summary>
        public static new total_runout_tolerance Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "total_runout_tolerance"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "total_runout_tolerance"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of track_blended_solid
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class track_blended_solid : edge_blended_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of track_blended_solid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public track_blended_solid(SdaiInstance instance) : base(instance) { }
        public track_blended_solid() : base(0) { }

        public static implicit operator track_blended_solid(SdaiInstance instance) => new track_blended_solid(instance);


        protected override TextValue EntityName() { return "track_blended_solid"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of track_blended_solid_with_end_conditions
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class track_blended_solid_with_end_conditions : track_blended_solid
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of track_blended_solid_with_end_conditions
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public track_blended_solid_with_end_conditions(SdaiInstance instance) : base(instance) { }
        public track_blended_solid_with_end_conditions() : base(0) { }

        public static implicit operator track_blended_solid_with_end_conditions(SdaiInstance instance) => new track_blended_solid_with_end_conditions(instance);

        /// <summary>
        /// Create new instace of track_blended_solid_with_end_conditions and returns object of this class to interact with
        /// </summary>
        public static new track_blended_solid_with_end_conditions Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "track_blended_solid_with_end_conditions"); Debug.Assert(inst != 0); return inst; }

        public list_of_blend_end_condition_select get_end_conditions() { return (new list_of_blend_end_condition_selectSerializer()).FromAttr(m_instance, "end_conditions"); }
        public list_of_blend_end_condition_select _end_conditions { get { return get_end_conditions(); } }
        public void put_end_conditions(IEnumerable<blend_end_condition_select> lst) { (new list_of_blend_end_condition_selectSerializer()).ToSdaiAggr(lst, m_instance, "end_conditions"); }
        //public void put_end_conditions_untyped(IEnumerable lst) { (new list_of_blend_end_condition_selectSerializer()).ToSdaiAggr(lst, m_instance, "end_conditions"); }

        protected override TextValue EntityName() { return "track_blended_solid_with_end_conditions"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of trimmed_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class trimmed_curve : bounded_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of trimmed_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public trimmed_curve(SdaiInstance instance) : base(instance) { }
        public trimmed_curve() : base(0) { }

        public static implicit operator trimmed_curve(SdaiInstance instance) => new trimmed_curve(instance);

        /// <summary>
        /// Create new instace of trimmed_curve and returns object of this class to interact with
        /// </summary>
        public static new trimmed_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "trimmed_curve"); Debug.Assert(inst != 0); return inst; }

        public curve get_basis_curve() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, out inst); return new curve (inst); }
        public curve _basis_curve { get { return get_basis_curve(); } }
        public void put_basis_curve(curve inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "basis_curve", ifcengine.sdaiINSTANCE, i); }
        public set_of_trimming_select get_trim_1() { return (new set_of_trimming_selectSerializer()).FromAttr(m_instance, "trim_1"); }
        public set_of_trimming_select _trim_1 { get { return get_trim_1(); } }
        public void put_trim_1(IEnumerable<trimming_select> lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_1"); }
        //public void put_trim_1_untyped(IEnumerable lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_1"); }
        public set_of_trimming_select get_trim_2() { return (new set_of_trimming_selectSerializer()).FromAttr(m_instance, "trim_2"); }
        public set_of_trimming_select _trim_2 { get { return get_trim_2(); } }
        public void put_trim_2(IEnumerable<trimming_select> lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_2"); }
        //public void put_trim_2_untyped(IEnumerable lst) { (new set_of_trimming_selectSerializer()).ToSdaiAggr(lst, m_instance, "trim_2"); }
        public bool? get_sense_agreement() { return get_bool("sense_agreement", ifcengine.sdaiBOOLEAN);}
        public bool? _sense_agreement { get { return get_sense_agreement(); } }
        public void put_sense_agreement(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "sense_agreement", ifcengine.sdaiBOOLEAN, ref value); }
        public trimming_preference? get_master_representation() { var str = get_string("master_representation", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.trimming_preference_); return EnumValue<trimming_preference>.FromIndex(ind); }
        public trimming_preference? _master_representation { get { return get_master_representation(); } }
        public void put_master_representation(trimming_preference value) { var str = EnumString<trimming_preference>.FromValue(value, EnumNames.trimming_preference_); ifcengine.sdaiPutAttrBN(m_instance, "master_representation", ifcengine.sdaiENUM, str); }

        protected override TextValue EntityName() { return "trimmed_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of two_direction_repeat_factor
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class two_direction_repeat_factor : one_direction_repeat_factor
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of two_direction_repeat_factor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public two_direction_repeat_factor(SdaiInstance instance) : base(instance) { }
        public two_direction_repeat_factor() : base(0) { }

        public static implicit operator two_direction_repeat_factor(SdaiInstance instance) => new two_direction_repeat_factor(instance);

        /// <summary>
        /// Create new instace of two_direction_repeat_factor and returns object of this class to interact with
        /// </summary>
        public static new two_direction_repeat_factor Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "two_direction_repeat_factor"); Debug.Assert(inst != 0); return inst; }

        public vector get_second_repeat_factor() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "second_repeat_factor", ifcengine.sdaiINSTANCE, out inst); return new vector (inst); }
        public vector _second_repeat_factor { get { return get_second_repeat_factor(); } }
        public void put_second_repeat_factor(vector inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "second_repeat_factor", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "two_direction_repeat_factor"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of type_qualifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class type_qualifier : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of type_qualifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public type_qualifier(SdaiInstance instance) : base(instance) { }
        public type_qualifier() : base(0) { }

        public static implicit operator type_qualifier(SdaiInstance instance) => new type_qualifier(instance);

        /// <summary>
        /// Create new instace of type_qualifier and returns object of this class to interact with
        /// </summary>
        public static new type_qualifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "type_qualifier"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "type_qualifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of unary_generic_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class unary_generic_expression : generic_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of unary_generic_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public unary_generic_expression(SdaiInstance instance) : base(instance) { }
        public unary_generic_expression() : base(0) { }

        public static implicit operator unary_generic_expression(SdaiInstance instance) => new unary_generic_expression(instance);

        public generic_expression get_operand() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, out inst); return new generic_expression (inst); }
        public generic_expression _operand { get { return get_operand(); } }
        public void put_operand(generic_expression inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "unary_generic_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of unary_numeric_expression
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class unary_numeric_expression : numeric_expression
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of unary_numeric_expression
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public unary_numeric_expression(SdaiInstance instance) : base(instance) { }
        public unary_numeric_expression() : base(0) { }

        public static implicit operator unary_numeric_expression(SdaiInstance instance) => new unary_numeric_expression(instance);

        public generic_expression get_operand() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, out inst); return new generic_expression (inst); }
        public generic_expression _operand { get { return get_operand(); } }
        public void put_operand(generic_expression inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "operand", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "unary_numeric_expression"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uncertainty_assigned_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uncertainty_assigned_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uncertainty_assigned_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uncertainty_assigned_representation(SdaiInstance instance) : base(instance) { }
        public uncertainty_assigned_representation() : base(0) { }

        public static implicit operator uncertainty_assigned_representation(SdaiInstance instance) => new uncertainty_assigned_representation(instance);

        /// <summary>
        /// Create new instace of uncertainty_assigned_representation and returns object of this class to interact with
        /// </summary>
        public static new uncertainty_assigned_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uncertainty_assigned_representation"); Debug.Assert(inst != 0); return inst; }

        public set_of_uncertainty_measure_with_unit get_uncertainty() { return (new set_of_uncertainty_measure_with_unitSerializer()).FromAttr(m_instance, "uncertainty"); }
        public set_of_uncertainty_measure_with_unit _uncertainty { get { return get_uncertainty(); } }
        public void put_uncertainty(IEnumerable<uncertainty_measure_with_unit> lst) { (new set_of_uncertainty_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "uncertainty"); }
        //public void put_uncertainty_untyped(IEnumerable lst) { (new set_of_uncertainty_measure_with_unitSerializer()).ToSdaiAggr(lst, m_instance, "uncertainty"); }

        protected override TextValue EntityName() { return "uncertainty_assigned_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uncertainty_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uncertainty_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uncertainty_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uncertainty_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public uncertainty_measure_with_unit() : base(0) { }

        public static implicit operator uncertainty_measure_with_unit(SdaiInstance instance) => new uncertainty_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of uncertainty_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new uncertainty_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uncertainty_measure_with_unit"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_name() { return get_string("name", ifcengine.sdaiSTRING); }
        public TextValue _name { get { return get_name(); } }
        public void put_name(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "name", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "uncertainty_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uniform_curve
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uniform_curve : b_spline_curve
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uniform_curve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uniform_curve(SdaiInstance instance) : base(instance) { }
        public uniform_curve() : base(0) { }

        public static implicit operator uniform_curve(SdaiInstance instance) => new uniform_curve(instance);

        /// <summary>
        /// Create new instace of uniform_curve and returns object of this class to interact with
        /// </summary>
        public static new uniform_curve Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uniform_curve"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "uniform_curve"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uniform_resource_identifier
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uniform_resource_identifier : descriptive_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uniform_resource_identifier
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uniform_resource_identifier(SdaiInstance instance) : base(instance) { }
        public uniform_resource_identifier() : base(0) { }

        public static implicit operator uniform_resource_identifier(SdaiInstance instance) => new uniform_resource_identifier(instance);

        /// <summary>
        /// Create new instace of uniform_resource_identifier and returns object of this class to interact with
        /// </summary>
        public static new uniform_resource_identifier Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uniform_resource_identifier"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "uniform_resource_identifier"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of uniform_surface
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class uniform_surface : b_spline_surface
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of uniform_surface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public uniform_surface(SdaiInstance instance) : base(instance) { }
        public uniform_surface() : base(0) { }

        public static implicit operator uniform_surface(SdaiInstance instance) => new uniform_surface(instance);

        /// <summary>
        /// Create new instace of uniform_surface and returns object of this class to interact with
        /// </summary>
        public static new uniform_surface Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "uniform_surface"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "uniform_surface"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of usage_association
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class usage_association : action_method_relationship
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of usage_association
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public usage_association(SdaiInstance instance) : base(instance) { }
        public usage_association() : base(0) { }

        public static implicit operator usage_association(SdaiInstance instance) => new usage_association(instance);

        /// <summary>
        /// Create new instace of usage_association and returns object of this class to interact with
        /// </summary>
        public static new usage_association Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "usage_association"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "usage_association"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of user_defined_curve_font
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class user_defined_curve_font : curve_style_font
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of user_defined_curve_font
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public user_defined_curve_font(SdaiInstance instance) : base(instance) { }
        public user_defined_curve_font() : base(0) { }

        public static implicit operator user_defined_curve_font(SdaiInstance instance) => new user_defined_curve_font(instance);

        /// <summary>
        /// Create new instace of user_defined_curve_font and returns object of this class to interact with
        /// </summary>
        public static new user_defined_curve_font Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "user_defined_curve_font"); Debug.Assert(inst != 0); return inst; }

        public representation_map get_mapping_source() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, out inst); return new representation_map (inst); }
        public representation_map _mapping_source { get { return get_mapping_source(); } }
        public void put_mapping_source(representation_map inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "mapping_source", ifcengine.sdaiINSTANCE, i); }
        public representation_item get_mapping_target() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, out inst); return new representation_item (inst); }
        public representation_item _mapping_target { get { return get_mapping_target(); } }
        public void put_mapping_target(representation_item inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "mapping_target", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "user_defined_curve_font"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of user_defined_marker
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class user_defined_marker : mapped_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of user_defined_marker
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public user_defined_marker(SdaiInstance instance) : base(instance) { }
        public user_defined_marker() : base(0) { }

        public static implicit operator user_defined_marker(SdaiInstance instance) => new user_defined_marker(instance);

        /// <summary>
        /// Create new instace of user_defined_marker and returns object of this class to interact with
        /// </summary>
        public static new user_defined_marker Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "user_defined_marker"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "user_defined_marker"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of user_defined_terminator_symbol
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class user_defined_terminator_symbol : mapped_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of user_defined_terminator_symbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public user_defined_terminator_symbol(SdaiInstance instance) : base(instance) { }
        public user_defined_terminator_symbol() : base(0) { }

        public static implicit operator user_defined_terminator_symbol(SdaiInstance instance) => new user_defined_terminator_symbol(instance);

        /// <summary>
        /// Create new instace of user_defined_terminator_symbol and returns object of this class to interact with
        /// </summary>
        public static new user_defined_terminator_symbol Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "user_defined_terminator_symbol"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "user_defined_terminator_symbol"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of user_selected_shape_elements
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class user_selected_shape_elements : user_selected_elements
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of user_selected_shape_elements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public user_selected_shape_elements(SdaiInstance instance) : base(instance) { }
        public user_selected_shape_elements() : base(0) { }

        public static implicit operator user_selected_shape_elements(SdaiInstance instance) => new user_selected_shape_elements(instance);

        /// <summary>
        /// Create new instace of user_selected_shape_elements and returns object of this class to interact with
        /// </summary>
        public static new user_selected_shape_elements Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "user_selected_shape_elements"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "user_selected_shape_elements"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of value_range
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class value_range : compound_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of value_range
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public value_range(SdaiInstance instance) : base(instance) { }
        public value_range() : base(0) { }

        public static implicit operator value_range(SdaiInstance instance) => new value_range(instance);

        /// <summary>
        /// Create new instace of value_range and returns object of this class to interact with
        /// </summary>
        public static new value_range Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "value_range"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "value_range"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of value_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class value_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of value_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public value_representation_item(SdaiInstance instance) : base(instance) { }
        public value_representation_item() : base(0) { }

        public static implicit operator value_representation_item(SdaiInstance instance) => new value_representation_item(instance);

        /// <summary>
        /// Create new instace of value_representation_item and returns object of this class to interact with
        /// </summary>
        public static new value_representation_item Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "value_representation_item"); Debug.Assert(inst != 0); return inst; }


        public measure_value_get get_value_component() { return new measure_value_get(m_instance, "value_component", 0); }
        public measure_value_get _value_component { get { return new measure_value_get(m_instance, "value_component", 0); } }
        public measure_value_put put_value_component() { return new measure_value_put(m_instance, "value_component", 0); }

        protected override TextValue EntityName() { return "value_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of variable_semantics
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class variable_semantics : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of variable_semantics
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public variable_semantics(SdaiInstance instance) : base(instance) { }
        public variable_semantics() : base(0) { }

        public static implicit operator variable_semantics(SdaiInstance instance) => new variable_semantics(instance);


        protected override TextValue EntityName() { return "variable_semantics"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of variational_representation_item
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class variational_representation_item : representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of variational_representation_item
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public variational_representation_item(SdaiInstance instance) : base(instance) { }
        public variational_representation_item() : base(0) { }

        public static implicit operator variational_representation_item(SdaiInstance instance) => new variational_representation_item(instance);


        protected override TextValue EntityName() { return "variational_representation_item"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vector
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vector : geometric_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vector
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vector(SdaiInstance instance) : base(instance) { }
        public vector() : base(0) { }

        public static implicit operator vector(SdaiInstance instance) => new vector(instance);

        /// <summary>
        /// Create new instace of vector and returns object of this class to interact with
        /// </summary>
        public static new vector Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vector"); Debug.Assert(inst != 0); return inst; }

        public direction get_orientation() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, out inst); return new direction (inst); }
        public direction _orientation { get { return get_orientation(); } }
        public void put_orientation(direction inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "orientation", ifcengine.sdaiINSTANCE, i); }
        public double? get_magnitude() { return get_double("magnitude", ifcengine.sdaiREAL);}
        public double? _magnitude { get { return get_magnitude(); } }
        public void put_magnitude(double value) { ifcengine.sdaiPutAttrBN(m_instance, "magnitude", ifcengine.sdaiREAL, ref value); }

        protected override TextValue EntityName() { return "vector"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vector_style
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vector_style : curve_style
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vector_style
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vector_style(SdaiInstance instance) : base(instance) { }
        public vector_style() : base(0) { }

        public static implicit operator vector_style(SdaiInstance instance) => new vector_style(instance);

        /// <summary>
        /// Create new instace of vector_style and returns object of this class to interact with
        /// </summary>
        public static new vector_style Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vector_style"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "vector_style"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of velocity_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class velocity_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of velocity_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public velocity_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public velocity_measure_with_unit() : base(0) { }

        public static implicit operator velocity_measure_with_unit(SdaiInstance instance) => new velocity_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of velocity_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new velocity_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "velocity_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "velocity_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of velocity_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class velocity_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of velocity_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public velocity_unit(SdaiInstance instance) : base(instance) { }
        public velocity_unit() : base(0) { }

        public static implicit operator velocity_unit(SdaiInstance instance) => new velocity_unit(instance);

        /// <summary>
        /// Create new instace of velocity_unit and returns object of this class to interact with
        /// </summary>
        public static new velocity_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "velocity_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "velocity_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of versioned_action_request
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class versioned_action_request : Entity
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of versioned_action_request
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public versioned_action_request(SdaiInstance instance) : base(instance) { }
        public versioned_action_request() : base(0) { }

        public static implicit operator versioned_action_request(SdaiInstance instance) => new versioned_action_request(instance);

        /// <summary>
        /// Create new instace of versioned_action_request and returns object of this class to interact with
        /// </summary>
        public static new versioned_action_request Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "versioned_action_request"); Debug.Assert(inst != 0); return inst; }

        public TextValue get_id() { return get_string("id", ifcengine.sdaiSTRING); }
        public TextValue _id { get { return get_id(); } }
        public void put_id(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "id", ifcengine.sdaiSTRING, value); }
        public TextValue get_version() { return get_string("version", ifcengine.sdaiSTRING); }
        public TextValue _version { get { return get_version(); } }
        public void put_version(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "version", ifcengine.sdaiSTRING, value); }
        public TextValue get_purpose() { return get_string("purpose", ifcengine.sdaiSTRING); }
        public TextValue _purpose { get { return get_purpose(); } }
        public void put_purpose(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "purpose", ifcengine.sdaiSTRING, value); }
        public TextValue get_description() { return get_string("description", ifcengine.sdaiSTRING); }
        public TextValue _description { get { return get_description(); } }
        public void put_description(TextValue value) { ifcengine.sdaiPutAttrBN(m_instance, "description", ifcengine.sdaiSTRING, value); }

        protected override TextValue EntityName() { return "versioned_action_request"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vertex
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vertex : topological_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vertex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vertex(SdaiInstance instance) : base(instance) { }
        public vertex() : base(0) { }

        public static implicit operator vertex(SdaiInstance instance) => new vertex(instance);

        /// <summary>
        /// Create new instace of vertex and returns object of this class to interact with
        /// </summary>
        public static new vertex Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vertex"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "vertex"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vertex_loop
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vertex_loop : loop
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vertex_loop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vertex_loop(SdaiInstance instance) : base(instance) { }
        public vertex_loop() : base(0) { }

        public static implicit operator vertex_loop(SdaiInstance instance) => new vertex_loop(instance);

        /// <summary>
        /// Create new instace of vertex_loop and returns object of this class to interact with
        /// </summary>
        public static new vertex_loop Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vertex_loop"); Debug.Assert(inst != 0); return inst; }

        public vertex get_loop_vertex() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "loop_vertex", ifcengine.sdaiINSTANCE, out inst); return new vertex (inst); }
        public vertex _loop_vertex { get { return get_loop_vertex(); } }
        public void put_loop_vertex(vertex inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "loop_vertex", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "vertex_loop"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vertex_point
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vertex_point : vertex
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vertex_point
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vertex_point(SdaiInstance instance) : base(instance) { }
        public vertex_point() : base(0) { }

        public static implicit operator vertex_point(SdaiInstance instance) => new vertex_point(instance);

        /// <summary>
        /// Create new instace of vertex_point and returns object of this class to interact with
        /// </summary>
        public static new vertex_point Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vertex_point"); Debug.Assert(inst != 0); return inst; }

        public point get_vertex_geometry() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "vertex_geometry", ifcengine.sdaiINSTANCE, out inst); return new point (inst); }
        public point _vertex_geometry { get { return get_vertex_geometry(); } }
        public void put_vertex_geometry(point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "vertex_geometry", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "vertex_point"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of vertex_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class vertex_shell : topological_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of vertex_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public vertex_shell(SdaiInstance instance) : base(instance) { }
        public vertex_shell() : base(0) { }

        public static implicit operator vertex_shell(SdaiInstance instance) => new vertex_shell(instance);

        /// <summary>
        /// Create new instace of vertex_shell and returns object of this class to interact with
        /// </summary>
        public static new vertex_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "vertex_shell"); Debug.Assert(inst != 0); return inst; }

        public vertex_loop get_vertex_shell_extent() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "vertex_shell_extent", ifcengine.sdaiINSTANCE, out inst); return new vertex_loop (inst); }
        public vertex_loop _vertex_shell_extent { get { return get_vertex_shell_extent(); } }
        public void put_vertex_shell_extent(vertex_loop inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "vertex_shell_extent", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "vertex_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of view_volume
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class view_volume : founded_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of view_volume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public view_volume(SdaiInstance instance) : base(instance) { }
        public view_volume() : base(0) { }

        public static implicit operator view_volume(SdaiInstance instance) => new view_volume(instance);

        /// <summary>
        /// Create new instace of view_volume and returns object of this class to interact with
        /// </summary>
        public static new view_volume Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "view_volume"); Debug.Assert(inst != 0); return inst; }

        public central_or_parallel? get_projection_type() { var str = get_string("projection_type", ifcengine.sdaiENUM); var ind = EnumIndex.FromString(str, EnumNames.central_or_parallel_); return EnumValue<central_or_parallel>.FromIndex(ind); }
        public central_or_parallel? _projection_type { get { return get_projection_type(); } }
        public void put_projection_type(central_or_parallel value) { var str = EnumString<central_or_parallel>.FromValue(value, EnumNames.central_or_parallel_); ifcengine.sdaiPutAttrBN(m_instance, "projection_type", ifcengine.sdaiENUM, str); }
        public cartesian_point get_projection_point() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "projection_point", ifcengine.sdaiINSTANCE, out inst); return new cartesian_point (inst); }
        public cartesian_point _projection_point { get { return get_projection_point(); } }
        public void put_projection_point(cartesian_point inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "projection_point", ifcengine.sdaiINSTANCE, i); }
        public double? get_view_plane_distance() { return get_double("view_plane_distance", ifcengine.sdaiREAL);}
        public double? _view_plane_distance { get { return get_view_plane_distance(); } }
        public void put_view_plane_distance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "view_plane_distance", ifcengine.sdaiREAL, ref value); }
        public double? get_front_plane_distance() { return get_double("front_plane_distance", ifcengine.sdaiREAL);}
        public double? _front_plane_distance { get { return get_front_plane_distance(); } }
        public void put_front_plane_distance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "front_plane_distance", ifcengine.sdaiREAL, ref value); }
        public bool? get_front_plane_clipping() { return get_bool("front_plane_clipping", ifcengine.sdaiBOOLEAN);}
        public bool? _front_plane_clipping { get { return get_front_plane_clipping(); } }
        public void put_front_plane_clipping(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "front_plane_clipping", ifcengine.sdaiBOOLEAN, ref value); }
        public double? get_back_plane_distance() { return get_double("back_plane_distance", ifcengine.sdaiREAL);}
        public double? _back_plane_distance { get { return get_back_plane_distance(); } }
        public void put_back_plane_distance(double value) { ifcengine.sdaiPutAttrBN(m_instance, "back_plane_distance", ifcengine.sdaiREAL, ref value); }
        public bool? get_back_plane_clipping() { return get_bool("back_plane_clipping", ifcengine.sdaiBOOLEAN);}
        public bool? _back_plane_clipping { get { return get_back_plane_clipping(); } }
        public void put_back_plane_clipping(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "back_plane_clipping", ifcengine.sdaiBOOLEAN, ref value); }
        public bool? get_view_volume_sides_clipping() { return get_bool("view_volume_sides_clipping", ifcengine.sdaiBOOLEAN);}
        public bool? _view_volume_sides_clipping { get { return get_view_volume_sides_clipping(); } }
        public void put_view_volume_sides_clipping(bool value) { ifcengine.sdaiPutAttrBN(m_instance, "view_volume_sides_clipping", ifcengine.sdaiBOOLEAN, ref value); }
        public planar_box get_view_window() { SdaiInstance inst = 0; ifcengine.sdaiGetAttrBN(m_instance, "view_window", ifcengine.sdaiINSTANCE, out inst); return new planar_box (inst); }
        public planar_box _view_window { get { return get_view_window(); } }
        public void put_view_window(planar_box inst) { SdaiInstance i = inst; ifcengine.sdaiPutAttrBN(m_instance, "view_window", ifcengine.sdaiINSTANCE, i); }

        protected override TextValue EntityName() { return "view_volume"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of visual_appearance_representation
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class visual_appearance_representation : representation
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of visual_appearance_representation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public visual_appearance_representation(SdaiInstance instance) : base(instance) { }
        public visual_appearance_representation() : base(0) { }

        public static implicit operator visual_appearance_representation(SdaiInstance instance) => new visual_appearance_representation(instance);

        /// <summary>
        /// Create new instace of visual_appearance_representation and returns object of this class to interact with
        /// </summary>
        public static new visual_appearance_representation Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "visual_appearance_representation"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "visual_appearance_representation"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of volume_measure_with_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class volume_measure_with_unit : measure_with_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of volume_measure_with_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public volume_measure_with_unit(SdaiInstance instance) : base(instance) { }
        public volume_measure_with_unit() : base(0) { }

        public static implicit operator volume_measure_with_unit(SdaiInstance instance) => new volume_measure_with_unit(instance);

        /// <summary>
        /// Create new instace of volume_measure_with_unit and returns object of this class to interact with
        /// </summary>
        public static new volume_measure_with_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "volume_measure_with_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "volume_measure_with_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of volume_unit
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class volume_unit : derived_unit
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of volume_unit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public volume_unit(SdaiInstance instance) : base(instance) { }
        public volume_unit() : base(0) { }

        public static implicit operator volume_unit(SdaiInstance instance) => new volume_unit(instance);

        /// <summary>
        /// Create new instace of volume_unit and returns object of this class to interact with
        /// </summary>
        public static new volume_unit Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "volume_unit"); Debug.Assert(inst != 0); return inst; }


        protected override TextValue EntityName() { return "volume_unit"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of week_of_year_and_day_date
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class week_of_year_and_day_date : date
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of week_of_year_and_day_date
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public week_of_year_and_day_date(SdaiInstance instance) : base(instance) { }
        public week_of_year_and_day_date() : base(0) { }

        public static implicit operator week_of_year_and_day_date(SdaiInstance instance) => new week_of_year_and_day_date(instance);

        /// <summary>
        /// Create new instace of week_of_year_and_day_date and returns object of this class to interact with
        /// </summary>
        public static new week_of_year_and_day_date Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "week_of_year_and_day_date"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_week_component() { return get_IntValue("week_component", ifcengine.sdaiINTEGER);}
        public IntValue? _week_component { get { return get_week_component(); } }
        public void put_week_component(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "week_component", ifcengine.sdaiINTEGER, ref value); }
        public IntValue? get_day_component() { return get_IntValue("day_component", ifcengine.sdaiINTEGER);}
        public IntValue? _day_component { get { return get_day_component(); } }
        public void put_day_component(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "day_component", ifcengine.sdaiINTEGER, ref value); }

        protected override TextValue EntityName() { return "week_of_year_and_day_date"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of wire_shell
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class wire_shell : topological_representation_item
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of wire_shell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public wire_shell(SdaiInstance instance) : base(instance) { }
        public wire_shell() : base(0) { }

        public static implicit operator wire_shell(SdaiInstance instance) => new wire_shell(instance);

        /// <summary>
        /// Create new instace of wire_shell and returns object of this class to interact with
        /// </summary>
        public static new wire_shell Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "wire_shell"); Debug.Assert(inst != 0); return inst; }

        public set_of_loop get_wire_shell_extent() { return (new set_of_loopSerializer()).FromAttr(m_instance, "wire_shell_extent"); }
        public set_of_loop _wire_shell_extent { get { return get_wire_shell_extent(); } }
        public void put_wire_shell_extent(IEnumerable<loop> lst) { (new set_of_loopSerializer()).ToSdaiAggr(lst, m_instance, "wire_shell_extent"); }
        //public void put_wire_shell_extent_untyped(IEnumerable lst) { (new set_of_loopSerializer()).ToSdaiAggr(lst, m_instance, "wire_shell_extent"); }

        protected override TextValue EntityName() { return "wire_shell"; }
    };


    /// <summary>
    /// Provides utility methods to interact with an instnace of year_month
    /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
    /// </summary>
    public class year_month : date
    {
        /// <summary>
        /// Constructs object of this C# class that wraps existing SdaiInstance of year_month
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        public year_month(SdaiInstance instance) : base(instance) { }
        public year_month() : base(0) { }

        public static implicit operator year_month(SdaiInstance instance) => new year_month(instance);

        /// <summary>
        /// Create new instace of year_month and returns object of this class to interact with
        /// </summary>
        public static new year_month Create(SdaiModel model) { SdaiInstance inst = ifcengine.sdaiCreateInstanceBN(model, "year_month"); Debug.Assert(inst != 0); return inst; }

        public IntValue? get_month_component() { return get_IntValue("month_component", ifcengine.sdaiINTEGER);}
        public IntValue? _month_component { get { return get_month_component(); } }
        public void put_month_component(IntValue value) { ifcengine.sdaiPutAttrBN(m_instance, "month_component", ifcengine.sdaiINTEGER, ref value); }

        protected override TextValue EntityName() { return "year_month"; }
    };

}

